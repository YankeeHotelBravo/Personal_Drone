
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee80  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cc4  0800f120  0800f120  0001f120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fde4  0800fde4  0001fde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fdec  0800fdec  0001fdec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fdf0  0800fdf0  0001fdf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  24000000  0800fdf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000344  240001f0  0800ffe4  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000534  0800ffe4  00020534  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000296d5  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f36  00000000  00000000  000498f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016c8  00000000  00000000  0004d830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001668  00000000  00000000  0004eef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038cb3  00000000  00000000  00050560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cc2b  00000000  00000000  00089213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016661f  00000000  00000000  000a5e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0020c45d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007044  00000000  00000000  0020c4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f108 	.word	0x0800f108

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	0800f108 	.word	0x0800f108

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15f;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	4608      	mov	r0, r1
 8000692:	4611      	mov	r1, r2
 8000694:	461a      	mov	r2, r3
 8000696:	4603      	mov	r3, r0
 8000698:	70fb      	strb	r3, [r7, #3]
 800069a:	460b      	mov	r3, r1
 800069c:	70bb      	strb	r3, [r7, #2]
 800069e:	4613      	mov	r3, r2
 80006a0:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d81b      	bhi.n	80006e0 <MPU9250_Init+0x58>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <MPU9250_Init+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d1 	.word	0x080006d1
 80006bc:	080006d9 	.word	0x080006d9
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80006c0:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <MPU9250_Init+0x1b0>)
 80006c2:	4a5e      	ldr	r2, [pc, #376]	; (800083c <MPU9250_Init+0x1b4>)
 80006c4:	601a      	str	r2, [r3, #0]
		break;
 80006c6:	e00c      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <MPU9250_Init+0x1b0>)
 80006ca:	4a5d      	ldr	r2, [pc, #372]	; (8000840 <MPU9250_Init+0x1b8>)
 80006cc:	601a      	str	r2, [r3, #0]
		break;
 80006ce:	e008      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80006d0:	4b59      	ldr	r3, [pc, #356]	; (8000838 <MPU9250_Init+0x1b0>)
 80006d2:	4a5c      	ldr	r2, [pc, #368]	; (8000844 <MPU9250_Init+0x1bc>)
 80006d4:	601a      	str	r2, [r3, #0]
		break;
 80006d6:	e004      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80006d8:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MPU9250_Init+0x1b0>)
 80006da:	4a5b      	ldr	r2, [pc, #364]	; (8000848 <MPU9250_Init+0x1c0>)
 80006dc:	601a      	str	r2, [r3, #0]
		break;
 80006de:	e000      	b.n	80006e2 <MPU9250_Init+0x5a>
	default:
		break;
 80006e0:	bf00      	nop
	}

	switch(Acc_FS)
 80006e2:	78bb      	ldrb	r3, [r7, #2]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81f      	bhi.n	8000728 <MPU9250_Init+0xa0>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MPU9250_Init+0x68>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	08000715 	.word	0x08000715
 80006fc:	0800071f 	.word	0x0800071f
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000700:	4b52      	ldr	r3, [pc, #328]	; (800084c <MPU9250_Init+0x1c4>)
 8000702:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000706:	601a      	str	r2, [r3, #0]
		break;
 8000708:	e00f      	b.n	800072a <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <MPU9250_Init+0x1c4>)
 800070c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000710:	601a      	str	r2, [r3, #0]
		break;
 8000712:	e00a      	b.n	800072a <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 8000714:	4b4d      	ldr	r3, [pc, #308]	; (800084c <MPU9250_Init+0x1c4>)
 8000716:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800071a:	601a      	str	r2, [r3, #0]
		break;
 800071c:	e005      	b.n	800072a <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <MPU9250_Init+0x1c4>)
 8000720:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000724:	601a      	str	r2, [r3, #0]
		break;
 8000726:	e000      	b.n	800072a <MPU9250_Init+0xa2>
	default:
		break;
 8000728:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <MPU9250_Init+0x1c8>)
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	2275      	movs	r2, #117	; 0x75
 800073a:	21d0      	movs	r1, #208	; 0xd0
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f005 fa33 	bl	8005ba8 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 8000742:	4b43      	ldr	r3, [pc, #268]	; (8000850 <MPU9250_Init+0x1c8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b71      	cmp	r3, #113	; 0x71
 8000748:	d171      	bne.n	800082e <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <MPU9250_Init+0x1cc>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <MPU9250_Init+0x1cc>)
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	2219      	movs	r2, #25
 8000760:	21d0      	movs	r1, #208	; 0xd0
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f005 f90c 	bl	8005980 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000768:	200a      	movs	r0, #10
 800076a:	f001 ff1b 	bl	80025a4 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 800076e:	4a39      	ldr	r2, [pc, #228]	; (8000854 <MPU9250_Init+0x1cc>)
 8000770:	787b      	ldrb	r3, [r7, #1]
 8000772:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <MPU9250_Init+0x1cc>)
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	221a      	movs	r2, #26
 8000784:	21d0      	movs	r1, #208	; 0xd0
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f005 f8fa 	bl	8005980 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f001 ff09 	bl	80025a4 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MPU9250_Init+0x1cc>)
 800079a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MPU9250_Init+0x1cc>)
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	221b      	movs	r2, #27
 80007ac:	21d0      	movs	r1, #208	; 0xd0
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f005 f8e6 	bl	8005980 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007b4:	200a      	movs	r0, #10
 80007b6:	f001 fef5 	bl	80025a4 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80007ba:	78bb      	ldrb	r3, [r7, #2]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MPU9250_Init+0x1cc>)
 80007c2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	2301      	movs	r3, #1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MPU9250_Init+0x1cc>)
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	221c      	movs	r2, #28
 80007d4:	21d0      	movs	r1, #208	; 0xd0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f005 f8d2 	bl	8005980 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007dc:	200a      	movs	r0, #10
 80007de:	f001 fee1 	bl	80025a4 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MPU9250_Init+0x1cc>)
 80007e4:	7c3b      	ldrb	r3, [r7, #16]
 80007e6:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MPU9250_Init+0x1cc>)
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	221d      	movs	r2, #29
 80007f8:	21d0      	movs	r1, #208	; 0xd0
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f005 f8c0 	bl	8005980 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f001 fecf 	bl	80025a4 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MPU9250_Init+0x1cc>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MPU9250_Init+0x1cc>)
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	226b      	movs	r2, #107	; 0x6b
 800081c:	21d0      	movs	r1, #208	; 0xd0
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f005 f8ae 	bl	8005980 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000824:	200a      	movs	r0, #10
 8000826:	f001 febd 	bl	80025a4 <HAL_Delay>

		return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <MPU9250_Init+0x1a8>
	}
	else
	{
		return 0;
 800082e:	2300      	movs	r3, #0
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000000 	.word	0x24000000
 800083c:	43030000 	.word	0x43030000
 8000840:	42830000 	.word	0x42830000
 8000844:	42033333 	.word	0x42033333
 8000848:	41833333 	.word	0x41833333
 800084c:	24000004 	.word	0x24000004
 8000850:	2400027d 	.word	0x2400027d
 8000854:	24000225 	.word	0x24000225

08000858 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af04      	add	r7, sp, #16
 800085e:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2301      	movs	r3, #1
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	226a      	movs	r2, #106	; 0x6a
 8000876:	21d0      	movs	r1, #208	; 0xd0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f005 f881 	bl	8005980 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800087e:	200a      	movs	r0, #10
 8000880:	f001 fe90 	bl	80025a4 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000886:	2202      	movs	r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	2237      	movs	r2, #55	; 0x37
 800089a:	21d0      	movs	r1, #208	; 0xd0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f005 f86f 	bl	8005980 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f001 fe7e 	bl	80025a4 <HAL_Delay>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	24000225 	.word	0x24000225

080008b4 <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af04      	add	r7, sp, #16
 80008ba:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MPU9250_Master+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	2301      	movs	r3, #1
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MPU9250_Master+0xa0>)
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2237      	movs	r2, #55	; 0x37
 80008d2:	21d0      	movs	r1, #208	; 0xd0
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f005 f853 	bl	8005980 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008da:	200a      	movs	r0, #10
 80008dc:	f001 fe62 	bl	80025a4 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MPU9250_Master+0xa0>)
 80008e2:	2220      	movs	r2, #32
 80008e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 80008e6:	2364      	movs	r3, #100	; 0x64
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2301      	movs	r3, #1
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MPU9250_Master+0xa0>)
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	226a      	movs	r2, #106	; 0x6a
 80008f6:	21d0      	movs	r1, #208	; 0xd0
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f005 f841 	bl	8005980 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008fe:	200a      	movs	r0, #10
 8000900:	f001 fe50 	bl	80025a4 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MPU9250_Master+0xa0>)
 8000906:	220d      	movs	r2, #13
 8000908:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	9302      	str	r3, [sp, #8]
 800090e:	2301      	movs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MPU9250_Master+0xa0>)
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2301      	movs	r3, #1
 8000918:	2224      	movs	r2, #36	; 0x24
 800091a:	21d0      	movs	r1, #208	; 0xd0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f005 f82f 	bl	8005980 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000922:	200a      	movs	r0, #10
 8000924:	f001 fe3e 	bl	80025a4 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MPU9250_Master+0xa0>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	2301      	movs	r3, #1
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MPU9250_Master+0xa0>)
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	226b      	movs	r2, #107	; 0x6b
 800093e:	21d0      	movs	r1, #208	; 0xd0
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f005 f81d 	bl	8005980 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f001 fe2c 	bl	80025a4 <HAL_Delay>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	24000225 	.word	0x24000225

08000958 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *Datastruct)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000964:	2216      	movs	r2, #22
 8000966:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	220a      	movs	r2, #10
 8000978:	2118      	movs	r1, #24
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f005 f800 	bl	8005980 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000980:	200a      	movs	r0, #10
 8000982:	f001 fe0f 	bl	80025a4 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	2303      	movs	r3, #3
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	2210      	movs	r2, #16
 8000996:	2118      	movs	r1, #24
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f005 f905 	bl	8005ba8 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 800099e:	200a      	movs	r0, #10
 80009a0:	f001 fe00 	bl	80025a4 <HAL_Delay>

	Datastruct->ASAX = MPU9250_rx_buf[0];
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Datastruct->ASAY = MPU9250_rx_buf[1];
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009b0:	785a      	ldrb	r2, [r3, #1]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Datastruct->ASAZ = MPU9250_rx_buf[2];
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009ba:	789a      	ldrb	r2, [r3, #2]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2303      	movs	r3, #3
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	2200      	movs	r2, #0
 80009d2:	2118      	movs	r1, #24
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f005 f8e7 	bl	8005ba8 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f001 fde2 	bl	80025a4 <HAL_Delay>

	if(AK8963_WAI == 0b01001000)
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b48      	cmp	r3, #72	; 0x48
 80009e6:	d101      	bne.n	80009ec <MPU9250_AK8963_Setup+0x94>
	{
		return 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <MPU9250_AK8963_Setup+0x96>
	}
	else return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	24000225 	.word	0x24000225
 80009fc:	24000280 	.word	0x24000280
 8000a00:	2400027c 	.word	0x2400027c

08000a04 <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a0e:	228c      	movs	r2, #140	; 0x8c
 8000a10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2301      	movs	r3, #1
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	2225      	movs	r2, #37	; 0x25
 8000a22:	21d0      	movs	r1, #208	; 0xd0
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f004 ffab 	bl	8005980 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f001 fdba 	bl	80025a4 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000a36:	2364      	movs	r3, #100	; 0x64
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2226      	movs	r2, #38	; 0x26
 8000a46:	21d0      	movs	r1, #208	; 0xd0
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f004 ff99 	bl	8005980 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f001 fda8 	bl	80025a4 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a56:	2287      	movs	r2, #135	; 0x87
 8000a58:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	2227      	movs	r2, #39	; 0x27
 8000a6a:	21d0      	movs	r1, #208	; 0xd0
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f004 ff87 	bl	8005980 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a72:	200a      	movs	r0, #10
 8000a74:	f001 fd96 	bl	80025a4 <HAL_Delay>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	24000225 	.word	0x24000225

08000a84 <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000a8c:	2314      	movs	r3, #20
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MPU9250_Read_All+0x24>)
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2301      	movs	r3, #1
 8000a96:	223b      	movs	r2, #59	; 0x3b
 8000a98:	21d0      	movs	r1, #208	; 0xd0
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f005 f99e 	bl	8005ddc <HAL_I2C_Mem_Read_DMA>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	24000280 	.word	0x24000280
 8000aac:	00000000 	.word	0x00000000

08000ab0 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = (MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000ab8:	4bb7      	ldr	r3, [pc, #732]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	4bb5      	ldr	r3, [pc, #724]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = -(MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000ace:	4bb2      	ldr	r3, [pc, #712]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ad0:	789b      	ldrb	r3, [r3, #2]
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	4bb0      	ldr	r3, [pc, #704]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ad8:	78db      	ldrb	r3, [r3, #3]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = -(MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000aec:	4baa      	ldr	r3, [pc, #680]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	4ba8      	ldr	r3, [pc, #672]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	425b      	negs	r3, r3
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000b0a:	4ba3      	ldr	r3, [pc, #652]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b0c:	7a1b      	ldrb	r3, [r3, #8]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b14:	7a5b      	ldrb	r3, [r3, #9]
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000b20:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b22:	7a9b      	ldrb	r3, [r3, #10]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	4b9b      	ldr	r3, [pc, #620]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b2a:	7adb      	ldrb	r3, [r3, #11]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	425b      	negs	r3, r3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000b3e:	4b96      	ldr	r3, [pc, #600]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b40:	7b1b      	ldrb	r3, [r3, #12]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	4b94      	ldr	r3, [pc, #592]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b48:	7b5b      	ldrb	r3, [r3, #13]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	425b      	negs	r3, r3
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000b5c:	4b8e      	ldr	r3, [pc, #568]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b5e:	7bdb      	ldrb	r3, [r3, #15]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	4b8c      	ldr	r3, [pc, #560]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b66:	7b9b      	ldrb	r3, [r3, #14]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	425b      	negs	r3, r3
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	85da      	strh	r2, [r3, #46]	; 0x2e
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000b7a:	4b87      	ldr	r3, [pc, #540]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b7c:	7c5b      	ldrb	r3, [r3, #17]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	4b85      	ldr	r3, [pc, #532]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b84:	7c1b      	ldrb	r3, [r3, #16]
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000b90:	4b81      	ldr	r3, [pc, #516]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b92:	7cdb      	ldrb	r3, [r3, #19]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	4b7f      	ldr	r3, [pc, #508]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b9a:	7c9b      	ldrb	r3, [r3, #18]
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	861a      	strh	r2, [r3, #48]	; 0x30

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bb4:	4b79      	ldr	r3, [pc, #484]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000bb6:	ed93 7a00 	vldr	s14, [r3]
 8000bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc2:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000bc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000be2:	4b6e      	ldr	r3, [pc, #440]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000be4:	ed93 7a00 	vldr	s14, [r3]
 8000be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000bf4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bf8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c10:	4b62      	ldr	r3, [pc, #392]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000c12:	ed93 7a00 	vldr	s14, [r3]
 8000c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1e:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000c22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c3e:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c40:	ed93 7a00 	vldr	s14, [r3]
 8000c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c5c:	4b50      	ldr	r3, [pc, #320]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c5e:	ed93 7a00 	vldr	s14, [r3]
 8000c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Az_Raw / MPU9250_Acc_LSB;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c72:	ee07 3a90 	vmov	s15, r3
 8000c76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c7a:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c7c:	ed93 7a00 	vldr	s14, [r3]
 8000c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c98:	3b80      	subs	r3, #128	; 0x80
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da00      	bge.n	8000ca0 <MPU9250_Parsing+0x1f0>
 8000c9e:	33ff      	adds	r3, #255	; 0xff
 8000ca0:	121b      	asrs	r3, r3, #8
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	fb03 f302 	mul.w	r3, r3, r2
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cb0:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000cb2:	ed93 7a00 	vldr	s14, [r3]
 8000cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8000cce:	3b80      	subs	r3, #128	; 0x80
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	da00      	bge.n	8000cd6 <MPU9250_Parsing+0x226>
 8000cd4:	33ff      	adds	r3, #255	; 0xff
 8000cd6:	121b      	asrs	r3, r3, #8
 8000cd8:	3301      	adds	r3, #1
 8000cda:	fb03 f302 	mul.w	r3, r3, r2
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000ce8:	ed93 7a00 	vldr	s14, [r3]
 8000cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d04:	3b80      	subs	r3, #128	; 0x80
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da00      	bge.n	8000d0c <MPU9250_Parsing+0x25c>
 8000d0a:	33ff      	adds	r3, #255	; 0xff
 8000d0c:	121b      	asrs	r3, r3, #8
 8000d0e:	3301      	adds	r3, #1
 8000d10:	fb03 f302 	mul.w	r3, r3, r2
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000d1e:	ed93 7a00 	vldr	s14, [r3]
 8000d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	ed93 7a08 	vldr	s14, [r3, #32]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000d74:	ee07 3a90 	vmov	s15, r3
 8000d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000d8c:	e00c      	b.n	8000da8 <MPU9250_Parsing+0x2f8>
 8000d8e:	bf00      	nop
 8000d90:	a252dd11 	.word	0xa252dd11
 8000d94:	3f91df46 	.word	0x3f91df46
 8000d98:	24000280 	.word	0x24000280
 8000d9c:	24000000 	.word	0x24000000
 8000da0:	24000004 	.word	0x24000004
 8000da4:	24000008 	.word	0x24000008
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	DataStruct->My -= DataStruct->My_Offset;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	461a      	mov	r2, r3
 8000e1a:	68b9      	ldr	r1, [r7, #8]
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <_write+0x24>)
 8000e1e:	f00a f829 	bl	800ae74 <HAL_UART_Transmit_DMA>
}
 8000e22:	bf00      	nop
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	24000358 	.word	0x24000358

08000e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e36:	f001 fb23 	bl	8002480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e3a:	f000 f89f 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3e:	f000 fa2d 	bl	800129c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e42:	f000 fa03 	bl	800124c <MX_DMA_Init>
  MX_TIM7_Init();
 8000e46:	f000 f97f 	bl	8001148 <MX_TIM7_Init>
  MX_QUADSPI_Init();
 8000e4a:	f000 f951 	bl	80010f0 <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 8000e4e:	f000 f9b1 	bl	80011b4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e52:	f000 f90d 	bl	8001070 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8000e56:	483d      	ldr	r0, [pc, #244]	; (8000f4c <main+0x11c>)
 8000e58:	f009 fcc4 	bl	800a7e4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8000e5c:	e009      	b.n	8000e72 <main+0x42>
	{
		if(tim1_10ms_flag == 1)
 8000e5e:	4b3c      	ldr	r3, [pc, #240]	; (8000f50 <main+0x120>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d105      	bne.n	8000e72 <main+0x42>
		{
			tim1_10ms_flag = 0;
 8000e66:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <main+0x120>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialization Failed \n");
 8000e6c:	4839      	ldr	r0, [pc, #228]	; (8000f54 <main+0x124>)
 8000e6e:	f00c f947 	bl	800d100 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8000e72:	2303      	movs	r3, #3
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2303      	movs	r3, #3
 8000e78:	2203      	movs	r2, #3
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	4836      	ldr	r0, [pc, #216]	; (8000f58 <main+0x128>)
 8000e7e:	f7ff fc03 	bl	8000688 <MPU9250_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0ea      	beq.n	8000e5e <main+0x2e>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8000e88:	4833      	ldr	r0, [pc, #204]	; (8000f58 <main+0x128>)
 8000e8a:	f7ff fce5 	bl	8000858 <MPU9250_Bypass>
//	MPU9250_AK8963_Setup(&hi2c1, &MPU9250);
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8000e8e:	e009      	b.n	8000ea4 <main+0x74>
	{
		if(tim1_10ms_flag == 1)
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <main+0x120>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d105      	bne.n	8000ea4 <main+0x74>
		{
			tim1_10ms_flag = 0;
 8000e98:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <main+0x120>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialization Failed \n");
 8000e9e:	482f      	ldr	r0, [pc, #188]	; (8000f5c <main+0x12c>)
 8000ea0:	f00c f92e 	bl	800d100 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8000ea4:	492e      	ldr	r1, [pc, #184]	; (8000f60 <main+0x130>)
 8000ea6:	482c      	ldr	r0, [pc, #176]	; (8000f58 <main+0x128>)
 8000ea8:	f7ff fd56 	bl	8000958 <MPU9250_AK8963_Setup>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0ee      	beq.n	8000e90 <main+0x60>
		}
	}
	MPU9250_Master(&hi2c1);
 8000eb2:	4829      	ldr	r0, [pc, #164]	; (8000f58 <main+0x128>)
 8000eb4:	f7ff fcfe 	bl	80008b4 <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8000eb8:	4827      	ldr	r0, [pc, #156]	; (8000f58 <main+0x128>)
 8000eba:	f7ff fda3 	bl	8000a04 <MPU9250_Slave0_Enable>

	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8000ebe:	f000 ff99 	bl	8001df4 <W25qxx_Init>
	W25qxx_EraseChip();
 8000ec2:	f001 f8e9 	bl	8002098 <W25qxx_EraseChip>

	W25qxx_WritePage(buffer1, 0, 0, 4);
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4825      	ldr	r0, [pc, #148]	; (8000f64 <main+0x134>)
 8000ece:	f001 f927 	bl	8002120 <W25qxx_WritePage>
	W25qxx_ReadPage(buffer2, 0, 0, 4);
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4823      	ldr	r0, [pc, #140]	; (8000f68 <main+0x138>)
 8000eda:	f001 f9e7 	bl	80022ac <W25qxx_ReadPage>


	while (1)
	{

		if(MPU9250_DRDY == 1)
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <main+0x13c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d105      	bne.n	8000ef2 <main+0xc2>
		{
			MPU9250_DRDY = 0;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	; (8000f6c <main+0x13c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
			MPU9250_Parsing(&MPU9250);
 8000eec:	481c      	ldr	r0, [pc, #112]	; (8000f60 <main+0x130>)
 8000eee:	f7ff fddf 	bl	8000ab0 <MPU9250_Parsing>
		}

		if(tim1_2ms_flag == 1)
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <main+0x140>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d10f      	bne.n	8000f1a <main+0xea>
		{
			tim1_2ms_flag = 0;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <main+0x140>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2102      	movs	r1, #2
 8000f04:	481b      	ldr	r0, [pc, #108]	; (8000f74 <main+0x144>)
 8000f06:	f004 fc91 	bl	800582c <HAL_GPIO_WritePin>
			MPU9250_Read_All(&hi2c1);
 8000f0a:	4813      	ldr	r0, [pc, #76]	; (8000f58 <main+0x128>)
 8000f0c:	f7ff fdba 	bl	8000a84 <MPU9250_Read_All>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2102      	movs	r1, #2
 8000f14:	4817      	ldr	r0, [pc, #92]	; (8000f74 <main+0x144>)
 8000f16:	f004 fc89 	bl	800582c <HAL_GPIO_WritePin>
		}

		//Print
		if(tim1_10ms_flag == 1)
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <main+0x120>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d1dd      	bne.n	8000ede <main+0xae>
		{
			tim1_10ms_flag = 0;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <main+0x120>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
//			printf("%d \t %d \t %d \t \n", MPU9250.ASAX, MPU9250.ASAY, MPU9250.ASAZ);
//			printf("%d \t %d \t %d \t \n", MPU9250.Mx_Raw, MPU9250.My_Raw, MPU9250.Mz_Raw);
//			printf("%.1f \t %.1f \t %.1f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz);
			printf("%d \t %d \t %d \t %d \t \n", buffer2[0], buffer2[1], buffer2[2], buffer2[3]);
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <main+0x138>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <main+0x138>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <main+0x138>)
 8000f36:	789b      	ldrb	r3, [r3, #2]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <main+0x138>)
 8000f3c:	78db      	ldrb	r3, [r3, #3]
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	4603      	mov	r3, r0
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <main+0x148>)
 8000f44:	f00c f856 	bl	800cff4 <iprintf>
		if(MPU9250_DRDY == 1)
 8000f48:	e7c9      	b.n	8000ede <main+0xae>
 8000f4a:	bf00      	nop
 8000f4c:	24000460 	.word	0x24000460
 8000f50:	24000217 	.word	0x24000217
 8000f54:	0800f120 	.word	0x0800f120
 8000f58:	24000294 	.word	0x24000294
 8000f5c:	0800f140 	.word	0x0800f140
 8000f60:	24000228 	.word	0x24000228
 8000f64:	2400000c 	.word	0x2400000c
 8000f68:	24000210 	.word	0x24000210
 8000f6c:	2400020c 	.word	0x2400020c
 8000f70:	24000216 	.word	0x24000216
 8000f74:	58020000 	.word	0x58020000
 8000f78:	0800f160 	.word	0x0800f160

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b09c      	sub	sp, #112	; 0x70
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	224c      	movs	r2, #76	; 0x4c
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f00b fbe6 	bl	800c75c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	1d3b      	adds	r3, r7, #4
 8000f92:	2220      	movs	r2, #32
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f00b fbe0 	bl	800c75c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f006 fea9 	bl	8007cf4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <SystemClock_Config+0xec>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <SystemClock_Config+0xec>)
 8000fac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb0:	6193      	str	r3, [r2, #24]
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <SystemClock_Config+0xec>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <SystemClock_Config+0xf0>)
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	4a2a      	ldr	r2, [pc, #168]	; (800106c <SystemClock_Config+0xf0>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fc8:	4b28      	ldr	r3, [pc, #160]	; (800106c <SystemClock_Config+0xf0>)
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fd4:	bf00      	nop
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <SystemClock_Config+0xec>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fe2:	d1f8      	bne.n	8000fd6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ffa:	23c0      	movs	r3, #192	; 0xc0
 8000ffc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001002:	2302      	movs	r3, #2
 8001004:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001006:	2302      	movs	r3, #2
 8001008:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800100a:	2308      	movs	r3, #8
 800100c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800100e:	2300      	movs	r3, #0
 8001010:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101a:	4618      	mov	r0, r3
 800101c:	f007 f88c 	bl	8008138 <HAL_RCC_OscConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001026:	f000 f9ab 	bl	8001380 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102a:	233f      	movs	r3, #63	; 0x3f
 800102c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102e:	2303      	movs	r3, #3
 8001030:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001036:	2308      	movs	r3, #8
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800103a:	2340      	movs	r3, #64	; 0x40
 800103c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800103e:	2340      	movs	r3, #64	; 0x40
 8001040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001046:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001048:	2340      	movs	r3, #64	; 0x40
 800104a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2104      	movs	r1, #4
 8001050:	4618      	mov	r0, r3
 8001052:	f007 fc81 	bl	8008958 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800105c:	f000 f990 	bl	8001380 <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3770      	adds	r7, #112	; 0x70
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	58024800 	.word	0x58024800
 800106c:	58000400 	.word	0x58000400

08001070 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_I2C1_Init+0x74>)
 8001076:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <MX_I2C1_Init+0x78>)
 8001078:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_I2C1_Init+0x74>)
 800107c:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <MX_I2C1_Init+0x7c>)
 800107e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_I2C1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_I2C1_Init+0x74>)
 8001088:	2201      	movs	r2, #1
 800108a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_I2C1_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_I2C1_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_I2C1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_I2C1_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010aa:	480e      	ldr	r0, [pc, #56]	; (80010e4 <MX_I2C1_Init+0x74>)
 80010ac:	f004 fbd8 	bl	8005860 <HAL_I2C_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010b6:	f000 f963 	bl	8001380 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ba:	2100      	movs	r1, #0
 80010bc:	4809      	ldr	r0, [pc, #36]	; (80010e4 <MX_I2C1_Init+0x74>)
 80010be:	f006 fd81 	bl	8007bc4 <HAL_I2CEx_ConfigAnalogFilter>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010c8:	f000 f95a 	bl	8001380 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010cc:	2100      	movs	r1, #0
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_I2C1_Init+0x74>)
 80010d0:	f006 fdc3 	bl	8007c5a <HAL_I2CEx_ConfigDigitalFilter>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010da:	f000 f951 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	24000294 	.word	0x24000294
 80010e8:	40005400 	.word	0x40005400
 80010ec:	00b03fdb 	.word	0x00b03fdb

080010f0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_QUADSPI_Init+0x50>)
 80010f6:	4a13      	ldr	r2, [pc, #76]	; (8001144 <MX_QUADSPI_Init+0x54>)
 80010f8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_QUADSPI_Init+0x50>)
 80010fc:	22ff      	movs	r2, #255	; 0xff
 80010fe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_QUADSPI_Init+0x50>)
 8001102:	2201      	movs	r2, #1
 8001104:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_QUADSPI_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_QUADSPI_Init+0x50>)
 800110e:	2201      	movs	r2, #1
 8001110:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_QUADSPI_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_QUADSPI_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_QUADSPI_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_QUADSPI_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_QUADSPI_Init+0x50>)
 800112c:	f006 fe1c 	bl	8007d68 <HAL_QSPI_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001136:	f000 f923 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	240004ac 	.word	0x240004ac
 8001144:	52005000 	.word	0x52005000

08001148 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_TIM7_Init+0x64>)
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <MX_TIM7_Init+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_TIM7_Init+0x64>)
 8001160:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001164:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_TIM7_Init+0x64>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_TIM7_Init+0x64>)
 800116e:	2205      	movs	r2, #5
 8001170:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_TIM7_Init+0x64>)
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <MX_TIM7_Init+0x64>)
 800117a:	f009 fadb 	bl	800a734 <HAL_TIM_Base_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001184:	f000 f8fc 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_TIM7_Init+0x64>)
 8001196:	f009 fd77 	bl	800ac88 <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80011a0:	f000 f8ee 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	24000460 	.word	0x24000460
 80011b0:	40001400 	.word	0x40001400

080011b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011ba:	4a23      	ldr	r2, [pc, #140]	; (8001248 <MX_USART1_UART_Init+0x94>)
 80011bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011cc:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011da:	220c      	movs	r2, #12
 80011dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011fc:	4811      	ldr	r0, [pc, #68]	; (8001244 <MX_USART1_UART_Init+0x90>)
 80011fe:	f009 fde9 	bl	800add4 <HAL_UART_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001208:	f000 f8ba 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120c:	2100      	movs	r1, #0
 800120e:	480d      	ldr	r0, [pc, #52]	; (8001244 <MX_USART1_UART_Init+0x90>)
 8001210:	f00b f9af 	bl	800c572 <HAL_UARTEx_SetTxFifoThreshold>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800121a:	f000 f8b1 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800121e:	2100      	movs	r1, #0
 8001220:	4808      	ldr	r0, [pc, #32]	; (8001244 <MX_USART1_UART_Init+0x90>)
 8001222:	f00b f9e4 	bl	800c5ee <HAL_UARTEx_SetRxFifoThreshold>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800122c:	f000 f8a8 	bl	8001380 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_USART1_UART_Init+0x90>)
 8001232:	f00b f965 	bl	800c500 <HAL_UARTEx_DisableFifoMode>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800123c:	f000 f8a0 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	24000358 	.word	0x24000358
 8001248:	40011000 	.word	0x40011000

0800124c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_DMA_Init+0x4c>)
 8001254:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <MX_DMA_Init+0x4c>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <MX_DMA_Init+0x4c>)
 8001264:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	200b      	movs	r0, #11
 8001276:	f001 faa0 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800127a:	200b      	movs	r0, #11
 800127c:	f001 fab7 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	200c      	movs	r0, #12
 8001286:	f001 fa98 	bl	80027ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800128a:	200c      	movs	r0, #12
 800128c:	f001 faaf 	bl	80027ee <HAL_NVIC_EnableIRQ>

}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	58024400 	.word	0x58024400

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <MX_GPIO_Init+0xdc>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <MX_GPIO_Init+0xdc>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c2:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <MX_GPIO_Init+0xdc>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d0:	4b29      	ldr	r3, [pc, #164]	; (8001378 <MX_GPIO_Init+0xdc>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	4a28      	ldr	r2, [pc, #160]	; (8001378 <MX_GPIO_Init+0xdc>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <MX_GPIO_Init+0xdc>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b22      	ldr	r3, [pc, #136]	; (8001378 <MX_GPIO_Init+0xdc>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f4:	4a20      	ldr	r2, [pc, #128]	; (8001378 <MX_GPIO_Init+0xdc>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <MX_GPIO_Init+0xdc>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_GPIO_Init+0xdc>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001312:	4a19      	ldr	r2, [pc, #100]	; (8001378 <MX_GPIO_Init+0xdc>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <MX_GPIO_Init+0xdc>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132a:	4b13      	ldr	r3, [pc, #76]	; (8001378 <MX_GPIO_Init+0xdc>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	4a11      	ldr	r2, [pc, #68]	; (8001378 <MX_GPIO_Init+0xdc>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_GPIO_Init+0xdc>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2102      	movs	r1, #2
 800134c:	480b      	ldr	r0, [pc, #44]	; (800137c <MX_GPIO_Init+0xe0>)
 800134e:	f004 fa6d 	bl	800582c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001352:	2302      	movs	r3, #2
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_GPIO_Init+0xe0>)
 800136a:	f004 f8af 	bl	80054cc <HAL_GPIO_Init>

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	58024400 	.word	0x58024400
 800137c:	58020000 	.word	0x58020000

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001388:	e7fe      	b.n	8001388 <Error_Handler+0x8>
	...

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_MspInit+0x30>)
 8001394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001398:	4a08      	ldr	r2, [pc, #32]	; (80013bc <HAL_MspInit+0x30>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_MspInit+0x30>)
 80013a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	58024400 	.word	0x58024400

080013c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0b8      	sub	sp, #224	; 0xe0
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	22bc      	movs	r2, #188	; 0xbc
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f00b f9bb 	bl	800c75c <memset>
  if(hi2c->Instance==I2C1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a3f      	ldr	r2, [pc, #252]	; (80014e8 <HAL_I2C_MspInit+0x128>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d177      	bne.n	80014e0 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013f0:	2308      	movs	r3, #8
 80013f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4618      	mov	r0, r3
 8001400:	f007 fe36 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800140a:	f7ff ffb9 	bl	8001380 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <HAL_I2C_MspInit+0x12c>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	4a35      	ldr	r2, [pc, #212]	; (80014ec <HAL_I2C_MspInit+0x12c>)
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <HAL_I2C_MspInit+0x12c>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800142c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001434:	2312      	movs	r3, #18
 8001436:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001446:	2304      	movs	r3, #4
 8001448:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001450:	4619      	mov	r1, r3
 8001452:	4827      	ldr	r0, [pc, #156]	; (80014f0 <HAL_I2C_MspInit+0x130>)
 8001454:	f004 f83a 	bl	80054cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_I2C_MspInit+0x12c>)
 800145a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800145e:	4a23      	ldr	r2, [pc, #140]	; (80014ec <HAL_I2C_MspInit+0x12c>)
 8001460:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001464:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <HAL_I2C_MspInit+0x12c>)
 800146a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800146e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 8001478:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_I2C_MspInit+0x138>)
 800147a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 800147e:	2221      	movs	r2, #33	; 0x21
 8001480:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 8001490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001494:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80014b4:	480f      	ldr	r0, [pc, #60]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 80014b6:	f001 f9b5 	bl	8002824 <HAL_DMA_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 80014c0:	f7ff ff5e 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 80014c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <HAL_I2C_MspInit+0x134>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	201f      	movs	r0, #31
 80014d6:	f001 f970 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014da:	201f      	movs	r0, #31
 80014dc:	f001 f987 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	37e0      	adds	r7, #224	; 0xe0
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40005400 	.word	0x40005400
 80014ec:	58024400 	.word	0x58024400
 80014f0:	58020400 	.word	0x58020400
 80014f4:	240003e8 	.word	0x240003e8
 80014f8:	40020028 	.word	0x40020028

080014fc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b0ba      	sub	sp, #232	; 0xe8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	22bc      	movs	r2, #188	; 0xbc
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f00b f91d 	bl	800c75c <memset>
  if(hqspi->Instance==QUADSPI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a54      	ldr	r2, [pc, #336]	; (8001678 <HAL_QSPI_MspInit+0x17c>)
 8001528:	4293      	cmp	r3, r2
 800152a:	f040 80a0 	bne.w	800166e <HAL_QSPI_MspInit+0x172>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800152e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001532:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001534:	2300      	movs	r3, #0
 8001536:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4618      	mov	r0, r3
 800153e:	f007 fd97 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8001548:	f7ff ff1a 	bl	8001380 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800154c:	4b4b      	ldr	r3, [pc, #300]	; (800167c <HAL_QSPI_MspInit+0x180>)
 800154e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001552:	4a4a      	ldr	r2, [pc, #296]	; (800167c <HAL_QSPI_MspInit+0x180>)
 8001554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001558:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800155c:	4b47      	ldr	r3, [pc, #284]	; (800167c <HAL_QSPI_MspInit+0x180>)
 800155e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800156a:	4b44      	ldr	r3, [pc, #272]	; (800167c <HAL_QSPI_MspInit+0x180>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	4a42      	ldr	r2, [pc, #264]	; (800167c <HAL_QSPI_MspInit+0x180>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157a:	4b40      	ldr	r3, [pc, #256]	; (800167c <HAL_QSPI_MspInit+0x180>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	4b3c      	ldr	r3, [pc, #240]	; (800167c <HAL_QSPI_MspInit+0x180>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158e:	4a3b      	ldr	r2, [pc, #236]	; (800167c <HAL_QSPI_MspInit+0x180>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <HAL_QSPI_MspInit+0x180>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <HAL_QSPI_MspInit+0x180>)
 80015a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ac:	4a33      	ldr	r2, [pc, #204]	; (800167c <HAL_QSPI_MspInit+0x180>)
 80015ae:	f043 0308 	orr.w	r3, r3, #8
 80015b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <HAL_QSPI_MspInit+0x180>)
 80015b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015c4:	2304      	movs	r3, #4
 80015c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015dc:	2309      	movs	r3, #9
 80015de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4825      	ldr	r0, [pc, #148]	; (8001680 <HAL_QSPI_MspInit+0x184>)
 80015ea:	f003 ff6f 	bl	80054cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ee:	2304      	movs	r3, #4
 80015f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001606:	2309      	movs	r3, #9
 8001608:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001610:	4619      	mov	r1, r3
 8001612:	481c      	ldr	r0, [pc, #112]	; (8001684 <HAL_QSPI_MspInit+0x188>)
 8001614:	f003 ff5a 	bl	80054cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001618:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800161c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001632:	2309      	movs	r3, #9
 8001634:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001638:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800163c:	4619      	mov	r1, r3
 800163e:	4812      	ldr	r0, [pc, #72]	; (8001688 <HAL_QSPI_MspInit+0x18c>)
 8001640:	f003 ff44 	bl	80054cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001644:	2340      	movs	r3, #64	; 0x40
 8001646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800165c:	230a      	movs	r3, #10
 800165e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001666:	4619      	mov	r1, r3
 8001668:	4806      	ldr	r0, [pc, #24]	; (8001684 <HAL_QSPI_MspInit+0x188>)
 800166a:	f003 ff2f 	bl	80054cc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	37e8      	adds	r7, #232	; 0xe8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	52005000 	.word	0x52005000
 800167c:	58024400 	.word	0x58024400
 8001680:	58021000 	.word	0x58021000
 8001684:	58020400 	.word	0x58020400
 8001688:	58020c00 	.word	0x58020c00

0800168c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_TIM_Base_MspInit+0x48>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d116      	bne.n	80016cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_TIM_Base_MspInit+0x4c>)
 80016a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016a4:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <HAL_TIM_Base_MspInit+0x4c>)
 80016a6:	f043 0320 	orr.w	r3, r3, #32
 80016aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_TIM_Base_MspInit+0x4c>)
 80016b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016b4:	f003 0320 	and.w	r3, r3, #32
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2037      	movs	r0, #55	; 0x37
 80016c2:	f001 f87a 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016c6:	2037      	movs	r0, #55	; 0x37
 80016c8:	f001 f891 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40001400 	.word	0x40001400
 80016d8:	58024400 	.word	0x58024400

080016dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0b8      	sub	sp, #224	; 0xe0
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	22bc      	movs	r2, #188	; 0xbc
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00b f82d 	bl	800c75c <memset>
  if(huart->Instance==USART1)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a3f      	ldr	r2, [pc, #252]	; (8001804 <HAL_UART_MspInit+0x128>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d177      	bne.n	80017fc <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800170c:	2301      	movs	r3, #1
 800170e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001716:	f107 0310 	add.w	r3, r7, #16
 800171a:	4618      	mov	r0, r3
 800171c:	f007 fca8 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001726:	f7ff fe2b 	bl	8001380 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800172a:	4b37      	ldr	r3, [pc, #220]	; (8001808 <HAL_UART_MspInit+0x12c>)
 800172c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001730:	4a35      	ldr	r2, [pc, #212]	; (8001808 <HAL_UART_MspInit+0x12c>)
 8001732:	f043 0310 	orr.w	r3, r3, #16
 8001736:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800173a:	4b33      	ldr	r3, [pc, #204]	; (8001808 <HAL_UART_MspInit+0x12c>)
 800173c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <HAL_UART_MspInit+0x12c>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174e:	4a2e      	ldr	r2, [pc, #184]	; (8001808 <HAL_UART_MspInit+0x12c>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001758:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <HAL_UART_MspInit+0x12c>)
 800175a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001766:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800176a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001780:	2304      	movs	r3, #4
 8001782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800178a:	4619      	mov	r1, r3
 800178c:	481f      	ldr	r0, [pc, #124]	; (800180c <HAL_UART_MspInit+0x130>)
 800178e:	f003 fe9d 	bl	80054cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8001792:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_UART_MspInit+0x134>)
 8001794:	4a1f      	ldr	r2, [pc, #124]	; (8001814 <HAL_UART_MspInit+0x138>)
 8001796:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_UART_MspInit+0x134>)
 800179a:	222a      	movs	r2, #42	; 0x2a
 800179c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_UART_MspInit+0x134>)
 80017a0:	2240      	movs	r2, #64	; 0x40
 80017a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_UART_MspInit+0x134>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_UART_MspInit+0x134>)
 80017ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <HAL_UART_MspInit+0x134>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_UART_MspInit+0x134>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_UART_MspInit+0x134>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_UART_MspInit+0x134>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_UART_MspInit+0x134>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017d0:	480f      	ldr	r0, [pc, #60]	; (8001810 <HAL_UART_MspInit+0x134>)
 80017d2:	f001 f827 	bl	8002824 <HAL_DMA_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 80017dc:	f7ff fdd0 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <HAL_UART_MspInit+0x134>)
 80017e4:	679a      	str	r2, [r3, #120]	; 0x78
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <HAL_UART_MspInit+0x134>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	2025      	movs	r0, #37	; 0x25
 80017f2:	f000 ffe2 	bl	80027ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017f6:	2025      	movs	r0, #37	; 0x25
 80017f8:	f000 fff9 	bl	80027ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017fc:	bf00      	nop
 80017fe:	37e0      	adds	r7, #224	; 0xe0
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40011000 	.word	0x40011000
 8001808:	58024400 	.word	0x58024400
 800180c:	58020400 	.word	0x58020400
 8001810:	240002e0 	.word	0x240002e0
 8001814:	40020010 	.word	0x40020010

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800181c:	e7fe      	b.n	800181c <NMI_Handler+0x4>

0800181e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001822:	e7fe      	b.n	8001822 <HardFault_Handler+0x4>

08001824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <MemManage_Handler+0x4>

0800182a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182e:	e7fe      	b.n	800182e <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler+0x4>

08001836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001864:	f000 fe7e 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}

0800186c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <DMA1_Stream0_IRQHandler+0x10>)
 8001872:	f002 faff 	bl	8003e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	240002e0 	.word	0x240002e0

08001880 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <DMA1_Stream1_IRQHandler+0x10>)
 8001886:	f002 faf5 	bl	8003e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	240003e8 	.word	0x240003e8

08001894 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <I2C1_EV_IRQHandler+0x10>)
 800189a:	f004 fb97 	bl	8005fcc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	24000294 	.word	0x24000294

080018a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <USART1_IRQHandler+0x10>)
 80018ae:	f009 fb61 	bl	800af74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	24000358 	.word	0x24000358

080018bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <TIM7_IRQHandler+0x10>)
 80018c2:	f008 ffff 	bl	800a8c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	24000460 	.word	0x24000460

080018d0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d11f      	bne.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		tim1_2ms_count++;
 80018e2:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018ec:	701a      	strb	r2, [r3, #0]
		if(tim1_2ms_count == 2)
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d105      	bne.n	8001902 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim1_2ms_count = 0;
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
			tim1_2ms_flag = 1;
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
		}
		tim1_10ms_count++;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800190c:	701a      	strb	r2, [r3, #0]
		if(tim1_10ms_count == 10)
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b0a      	cmp	r3, #10
 8001914:	d105      	bne.n	8001922 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			tim1_10ms_count = 0;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
			tim1_10ms_flag = 1;
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40001400 	.word	0x40001400
 8001934:	24000214 	.word	0x24000214
 8001938:	24000216 	.word	0x24000216
 800193c:	24000215 	.word	0x24000215
 8001940:	24000217 	.word	0x24000217

08001944 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(hi2c->Instance == I2C1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d102      	bne.n	800195c <HAL_I2C_MemRxCpltCallback+0x18>
  {
	  MPU9250_DRDY = 1;
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_I2C_MemRxCpltCallback+0x28>)
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40005400 	.word	0x40005400
 800196c:	2400020c 	.word	0x2400020c

08001970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
	return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_kill>:

int _kill(int pid, int sig)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800198a:	f00a febd 	bl	800c708 <__errno>
 800198e:	4603      	mov	r3, r0
 8001990:	2216      	movs	r2, #22
 8001992:	601a      	str	r2, [r3, #0]
	return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_exit>:

void _exit (int status)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ffe7 	bl	8001980 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019b2:	e7fe      	b.n	80019b2 <_exit+0x12>

080019b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e00a      	b.n	80019dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019c6:	f3af 8000 	nop.w
 80019ca:	4601      	mov	r1, r0
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60ba      	str	r2, [r7, #8]
 80019d2:	b2ca      	uxtb	r2, r1
 80019d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbf0      	blt.n	80019c6 <_read+0x12>
	}

return len;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_close>:
	}
	return len;
}

int _close(int file)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
	return -1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a16:	605a      	str	r2, [r3, #4]
	return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <_isatty>:

int _isatty(int file)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a2e:	2301      	movs	r3, #1
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
	return 0;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <_sbrk+0x5c>)
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <_sbrk+0x60>)
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <_sbrk+0x64>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <_sbrk+0x64>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <_sbrk+0x68>)
 8001a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d207      	bcs.n	8001a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a88:	f00a fe3e 	bl	800c708 <__errno>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	220c      	movs	r2, #12
 8001a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	e009      	b.n	8001aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <_sbrk+0x64>)
 8001aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	24080000 	.word	0x24080000
 8001ab8:	00000400 	.word	0x00000400
 8001abc:	24000218 	.word	0x24000218
 8001ac0:	24000538 	.word	0x24000538

08001ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ac8:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <SystemInit+0xec>)
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ace:	4a38      	ldr	r2, [pc, #224]	; (8001bb0 <SystemInit+0xec>)
 8001ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <SystemInit+0xf0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	2b06      	cmp	r3, #6
 8001ae2:	d807      	bhi.n	8001af4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ae4:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <SystemInit+0xf0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 030f 	bic.w	r3, r3, #15
 8001aec:	4a31      	ldr	r2, [pc, #196]	; (8001bb4 <SystemInit+0xf0>)
 8001aee:	f043 0307 	orr.w	r3, r3, #7
 8001af2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <SystemInit+0xf4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2f      	ldr	r2, [pc, #188]	; (8001bb8 <SystemInit+0xf4>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <SystemInit+0xf4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b06:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <SystemInit+0xf4>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	492b      	ldr	r1, [pc, #172]	; (8001bb8 <SystemInit+0xf4>)
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <SystemInit+0xf8>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b12:	4b28      	ldr	r3, [pc, #160]	; (8001bb4 <SystemInit+0xf0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <SystemInit+0xf0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 030f 	bic.w	r3, r3, #15
 8001b26:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <SystemInit+0xf0>)
 8001b28:	f043 0307 	orr.w	r3, r3, #7
 8001b2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b2e:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <SystemInit+0xf4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b34:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <SystemInit+0xf4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <SystemInit+0xf4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <SystemInit+0xf4>)
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <SystemInit+0xfc>)
 8001b44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <SystemInit+0xf4>)
 8001b48:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <SystemInit+0x100>)
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <SystemInit+0xf4>)
 8001b4e:	4a1e      	ldr	r2, [pc, #120]	; (8001bc8 <SystemInit+0x104>)
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <SystemInit+0xf4>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <SystemInit+0xf4>)
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <SystemInit+0x104>)
 8001b5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <SystemInit+0xf4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <SystemInit+0xf4>)
 8001b66:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <SystemInit+0x104>)
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <SystemInit+0xf4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <SystemInit+0xf4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <SystemInit+0xf4>)
 8001b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <SystemInit+0xf4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <SystemInit+0x108>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <SystemInit+0x10c>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b8e:	d202      	bcs.n	8001b96 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <SystemInit+0x110>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <SystemInit+0x114>)
 8001b98:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b9c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <SystemInit+0xec>)
 8001ba0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ba4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00
 8001bb4:	52002000 	.word	0x52002000
 8001bb8:	58024400 	.word	0x58024400
 8001bbc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bc0:	02020200 	.word	0x02020200
 8001bc4:	01ff0000 	.word	0x01ff0000
 8001bc8:	01010280 	.word	0x01010280
 8001bcc:	5c001000 	.word	0x5c001000
 8001bd0:	ffff0000 	.word	0xffff0000
 8001bd4:	51008108 	.word	0x51008108
 8001bd8:	52004000 	.word	0x52004000

08001bdc <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
//	HAL_QSPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
	HAL_QSPI_Transmit(&_W25QXX_SPI, &Data, 100);
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	2264      	movs	r2, #100	; 0x64
 8001bea:	4619      	mov	r1, r3
 8001bec:	4807      	ldr	r0, [pc, #28]	; (8001c0c <W25qxx_Spi+0x30>)
 8001bee:	f006 f92f 	bl	8007e50 <HAL_QSPI_Transmit>
	HAL_QSPI_Receive(&_W25QXX_SPI, &ret, 100);
 8001bf2:	f107 030f 	add.w	r3, r7, #15
 8001bf6:	2264      	movs	r2, #100	; 0x64
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4804      	ldr	r0, [pc, #16]	; (8001c0c <W25qxx_Spi+0x30>)
 8001bfc:	f006 f9ba 	bl	8007f74 <HAL_QSPI_Receive>
	return ret;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	240004ac 	.word	0x240004ac

08001c10 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2140      	movs	r1, #64	; 0x40
 8001c2a:	4813      	ldr	r0, [pc, #76]	; (8001c78 <W25qxx_ReadID+0x68>)
 8001c2c:	f003 fdfe 	bl	800582c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001c30:	209f      	movs	r0, #159	; 0x9f
 8001c32:	f7ff ffd3 	bl	8001bdc <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c36:	20a5      	movs	r0, #165	; 0xa5
 8001c38:	f7ff ffd0 	bl	8001bdc <W25qxx_Spi>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c40:	20a5      	movs	r0, #165	; 0xa5
 8001c42:	f7ff ffcb 	bl	8001bdc <W25qxx_Spi>
 8001c46:	4603      	mov	r3, r0
 8001c48:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c4a:	20a5      	movs	r0, #165	; 0xa5
 8001c4c:	f7ff ffc6 	bl	8001bdc <W25qxx_Spi>
 8001c50:	4603      	mov	r3, r0
 8001c52:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	2140      	movs	r1, #64	; 0x40
 8001c58:	4807      	ldr	r0, [pc, #28]	; (8001c78 <W25qxx_ReadID+0x68>)
 8001c5a:	f003 fde7 	bl	800582c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	041a      	lsls	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	4313      	orrs	r3, r2
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	58020400 	.word	0x58020400

08001c7c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2140      	movs	r1, #64	; 0x40
 8001c86:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <W25qxx_ReadUniqID+0x64>)
 8001c88:	f003 fdd0 	bl	800582c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8001c8c:	204b      	movs	r0, #75	; 0x4b
 8001c8e:	f7ff ffa5 	bl	8001bdc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	e005      	b.n	8001ca4 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001c98:	20a5      	movs	r0, #165	; 0xa5
 8001c9a:	f7ff ff9f 	bl	8001bdc <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d9f6      	bls.n	8001c98 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	71bb      	strb	r3, [r7, #6]
 8001cae:	e00b      	b.n	8001cc8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001cb0:	79bc      	ldrb	r4, [r7, #6]
 8001cb2:	20a5      	movs	r0, #165	; 0xa5
 8001cb4:	f7ff ff92 	bl	8001bdc <W25qxx_Spi>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <W25qxx_ReadUniqID+0x68>)
 8001cbe:	4423      	add	r3, r4
 8001cc0:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8001cc2:	79bb      	ldrb	r3, [r7, #6]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	71bb      	strb	r3, [r7, #6]
 8001cc8:	79bb      	ldrb	r3, [r7, #6]
 8001cca:	2b07      	cmp	r3, #7
 8001ccc:	d9f0      	bls.n	8001cb0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2140      	movs	r1, #64	; 0x40
 8001cd2:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <W25qxx_ReadUniqID+0x64>)
 8001cd4:	f003 fdaa 	bl	800582c <HAL_GPIO_WritePin>
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd90      	pop	{r4, r7, pc}
 8001ce0:	58020400 	.word	0x58020400
 8001ce4:	240004f8 	.word	0x240004f8

08001ce8 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2140      	movs	r1, #64	; 0x40
 8001cf0:	4807      	ldr	r0, [pc, #28]	; (8001d10 <W25qxx_WriteEnable+0x28>)
 8001cf2:	f003 fd9b 	bl	800582c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8001cf6:	2006      	movs	r0, #6
 8001cf8:	f7ff ff70 	bl	8001bdc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2140      	movs	r1, #64	; 0x40
 8001d00:	4803      	ldr	r0, [pc, #12]	; (8001d10 <W25qxx_WriteEnable+0x28>)
 8001d02:	f003 fd93 	bl	800582c <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f000 fc4c 	bl	80025a4 <HAL_Delay>
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	58020400 	.word	0x58020400

08001d14 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2140      	movs	r1, #64	; 0x40
 8001d26:	481c      	ldr	r0, [pc, #112]	; (8001d98 <W25qxx_ReadStatusRegister+0x84>)
 8001d28:	f003 fd80 	bl	800582c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d10c      	bne.n	8001d4c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8001d32:	2005      	movs	r0, #5
 8001d34:	f7ff ff52 	bl	8001bdc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d38:	20a5      	movs	r0, #165	; 0xa5
 8001d3a:	f7ff ff4f 	bl	8001bdc <W25qxx_Spi>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <W25qxx_ReadStatusRegister+0x88>)
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8001d4a:	e01b      	b.n	8001d84 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d10c      	bne.n	8001d6c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8001d52:	2035      	movs	r0, #53	; 0x35
 8001d54:	f7ff ff42 	bl	8001bdc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d58:	20a5      	movs	r0, #165	; 0xa5
 8001d5a:	f7ff ff3f 	bl	8001bdc <W25qxx_Spi>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <W25qxx_ReadStatusRegister+0x88>)
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8001d6a:	e00b      	b.n	8001d84 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8001d6c:	2015      	movs	r0, #21
 8001d6e:	f7ff ff35 	bl	8001bdc <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001d72:	20a5      	movs	r0, #165	; 0xa5
 8001d74:	f7ff ff32 	bl	8001bdc <W25qxx_Spi>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <W25qxx_ReadStatusRegister+0x88>)
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001d84:	2201      	movs	r2, #1
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	4803      	ldr	r0, [pc, #12]	; (8001d98 <W25qxx_ReadStatusRegister+0x84>)
 8001d8a:	f003 fd4f 	bl	800582c <HAL_GPIO_WritePin>
	return status;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	58020400 	.word	0x58020400
 8001d9c:	240004f8 	.word	0x240004f8

08001da0 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f000 fbfd 	bl	80025a4 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2140      	movs	r1, #64	; 0x40
 8001dae:	480f      	ldr	r0, [pc, #60]	; (8001dec <W25qxx_WaitForWriteEnd+0x4c>)
 8001db0:	f003 fd3c 	bl	800582c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8001db4:	2005      	movs	r0, #5
 8001db6:	f7ff ff11 	bl	8001bdc <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001dba:	20a5      	movs	r0, #165	; 0xa5
 8001dbc:	f7ff ff0e 	bl	8001bdc <W25qxx_Spi>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <W25qxx_WaitForWriteEnd+0x50>)
 8001dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f000 fbea 	bl	80025a4 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <W25qxx_WaitForWriteEnd+0x50>)
 8001dd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ed      	bne.n	8001dba <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	2140      	movs	r1, #64	; 0x40
 8001de2:	4802      	ldr	r0, [pc, #8]	; (8001dec <W25qxx_WaitForWriteEnd+0x4c>)
 8001de4:	f003 fd22 	bl	800582c <HAL_GPIO_WritePin>
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	58020400 	.word	0x58020400
 8001df0:	240004f8 	.word	0x240004f8

08001df4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8001dfa:	4b90      	ldr	r3, [pc, #576]	; (800203c <W25qxx_Init+0x248>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8001e02:	e002      	b.n	8001e0a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8001e04:	2001      	movs	r0, #1
 8001e06:	f000 fbcd 	bl	80025a4 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8001e0a:	f000 fbbf 	bl	800258c <HAL_GetTick>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b63      	cmp	r3, #99	; 0x63
 8001e12:	d9f7      	bls.n	8001e04 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001e14:	2201      	movs	r2, #1
 8001e16:	2140      	movs	r1, #64	; 0x40
 8001e18:	4889      	ldr	r0, [pc, #548]	; (8002040 <W25qxx_Init+0x24c>)
 8001e1a:	f003 fd07 	bl	800582c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8001e1e:	2064      	movs	r0, #100	; 0x64
 8001e20:	f000 fbc0 	bl	80025a4 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8001e24:	4887      	ldr	r0, [pc, #540]	; (8002044 <W25qxx_Init+0x250>)
 8001e26:	f00b f96b 	bl	800d100 <puts>
#endif
	id = W25qxx_ReadID();
 8001e2a:	f7ff fef1 	bl	8001c10 <W25qxx_ReadID>
 8001e2e:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4885      	ldr	r0, [pc, #532]	; (8002048 <W25qxx_Init+0x254>)
 8001e34:	f00b f8de 	bl	800cff4 <iprintf>
#endif
	switch (id & 0x000000FF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3b11      	subs	r3, #17
 8001e3e:	2b0f      	cmp	r3, #15
 8001e40:	f200 808b 	bhi.w	8001f5a <W25qxx_Init+0x166>
 8001e44:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <W25qxx_Init+0x58>)
 8001e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4a:	bf00      	nop
 8001e4c:	08001f47 	.word	0x08001f47
 8001e50:	08001f33 	.word	0x08001f33
 8001e54:	08001f1f 	.word	0x08001f1f
 8001e58:	08001f0b 	.word	0x08001f0b
 8001e5c:	08001ef7 	.word	0x08001ef7
 8001e60:	08001ee3 	.word	0x08001ee3
 8001e64:	08001ecf 	.word	0x08001ecf
 8001e68:	08001eb9 	.word	0x08001eb9
 8001e6c:	08001ea3 	.word	0x08001ea3
 8001e70:	08001f5b 	.word	0x08001f5b
 8001e74:	08001f5b 	.word	0x08001f5b
 8001e78:	08001f5b 	.word	0x08001f5b
 8001e7c:	08001f5b 	.word	0x08001f5b
 8001e80:	08001f5b 	.word	0x08001f5b
 8001e84:	08001f5b 	.word	0x08001f5b
 8001e88:	08001e8d 	.word	0x08001e8d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8001e8c:	4b6b      	ldr	r3, [pc, #428]	; (800203c <W25qxx_Init+0x248>)
 8001e8e:	220a      	movs	r2, #10
 8001e90:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8001e92:	4b6a      	ldr	r3, [pc, #424]	; (800203c <W25qxx_Init+0x248>)
 8001e94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e98:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8001e9a:	486c      	ldr	r0, [pc, #432]	; (800204c <W25qxx_Init+0x258>)
 8001e9c:	f00b f930 	bl	800d100 <puts>
#endif
		break;
 8001ea0:	e064      	b.n	8001f6c <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8001ea2:	4b66      	ldr	r3, [pc, #408]	; (800203c <W25qxx_Init+0x248>)
 8001ea4:	2209      	movs	r2, #9
 8001ea6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8001ea8:	4b64      	ldr	r3, [pc, #400]	; (800203c <W25qxx_Init+0x248>)
 8001eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eae:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8001eb0:	4867      	ldr	r0, [pc, #412]	; (8002050 <W25qxx_Init+0x25c>)
 8001eb2:	f00b f925 	bl	800d100 <puts>
#endif
		break;
 8001eb6:	e059      	b.n	8001f6c <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8001eb8:	4b60      	ldr	r3, [pc, #384]	; (800203c <W25qxx_Init+0x248>)
 8001eba:	2208      	movs	r2, #8
 8001ebc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <W25qxx_Init+0x248>)
 8001ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8001ec6:	4863      	ldr	r0, [pc, #396]	; (8002054 <W25qxx_Init+0x260>)
 8001ec8:	f00b f91a 	bl	800d100 <puts>
#endif
		break;
 8001ecc:	e04e      	b.n	8001f6c <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <W25qxx_Init+0x248>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8001ed4:	4b59      	ldr	r3, [pc, #356]	; (800203c <W25qxx_Init+0x248>)
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8001eda:	485f      	ldr	r0, [pc, #380]	; (8002058 <W25qxx_Init+0x264>)
 8001edc:	f00b f910 	bl	800d100 <puts>
#endif
		break;
 8001ee0:	e044      	b.n	8001f6c <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8001ee2:	4b56      	ldr	r3, [pc, #344]	; (800203c <W25qxx_Init+0x248>)
 8001ee4:	2206      	movs	r2, #6
 8001ee6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8001ee8:	4b54      	ldr	r3, [pc, #336]	; (800203c <W25qxx_Init+0x248>)
 8001eea:	2240      	movs	r2, #64	; 0x40
 8001eec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8001eee:	485b      	ldr	r0, [pc, #364]	; (800205c <W25qxx_Init+0x268>)
 8001ef0:	f00b f906 	bl	800d100 <puts>
#endif
		break;
 8001ef4:	e03a      	b.n	8001f6c <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8001ef6:	4b51      	ldr	r3, [pc, #324]	; (800203c <W25qxx_Init+0x248>)
 8001ef8:	2205      	movs	r2, #5
 8001efa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8001efc:	4b4f      	ldr	r3, [pc, #316]	; (800203c <W25qxx_Init+0x248>)
 8001efe:	2220      	movs	r2, #32
 8001f00:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8001f02:	4857      	ldr	r0, [pc, #348]	; (8002060 <W25qxx_Init+0x26c>)
 8001f04:	f00b f8fc 	bl	800d100 <puts>
#endif
		break;
 8001f08:	e030      	b.n	8001f6c <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	; (800203c <W25qxx_Init+0x248>)
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8001f10:	4b4a      	ldr	r3, [pc, #296]	; (800203c <W25qxx_Init+0x248>)
 8001f12:	2210      	movs	r2, #16
 8001f14:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8001f16:	4853      	ldr	r0, [pc, #332]	; (8002064 <W25qxx_Init+0x270>)
 8001f18:	f00b f8f2 	bl	800d100 <puts>
#endif
		break;
 8001f1c:	e026      	b.n	8001f6c <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <W25qxx_Init+0x248>)
 8001f20:	2203      	movs	r2, #3
 8001f22:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8001f24:	4b45      	ldr	r3, [pc, #276]	; (800203c <W25qxx_Init+0x248>)
 8001f26:	2208      	movs	r2, #8
 8001f28:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8001f2a:	484f      	ldr	r0, [pc, #316]	; (8002068 <W25qxx_Init+0x274>)
 8001f2c:	f00b f8e8 	bl	800d100 <puts>
#endif
		break;
 8001f30:	e01c      	b.n	8001f6c <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8001f32:	4b42      	ldr	r3, [pc, #264]	; (800203c <W25qxx_Init+0x248>)
 8001f34:	2202      	movs	r2, #2
 8001f36:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8001f38:	4b40      	ldr	r3, [pc, #256]	; (800203c <W25qxx_Init+0x248>)
 8001f3a:	2204      	movs	r2, #4
 8001f3c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8001f3e:	484b      	ldr	r0, [pc, #300]	; (800206c <W25qxx_Init+0x278>)
 8001f40:	f00b f8de 	bl	800d100 <puts>
#endif
		break;
 8001f44:	e012      	b.n	8001f6c <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <W25qxx_Init+0x248>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	; (800203c <W25qxx_Init+0x248>)
 8001f4e:	2202      	movs	r2, #2
 8001f50:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8001f52:	4847      	ldr	r0, [pc, #284]	; (8002070 <W25qxx_Init+0x27c>)
 8001f54:	f00b f8d4 	bl	800d100 <puts>
#endif
		break;
 8001f58:	e008      	b.n	8001f6c <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8001f5a:	4846      	ldr	r0, [pc, #280]	; (8002074 <W25qxx_Init+0x280>)
 8001f5c:	f00b f8d0 	bl	800d100 <puts>
#endif
		w25qxx.Lock = 0;
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <W25qxx_Init+0x248>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e063      	b.n	8002034 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8001f6c:	4b33      	ldr	r3, [pc, #204]	; (800203c <W25qxx_Init+0x248>)
 8001f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f72:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8001f74:	4b31      	ldr	r3, [pc, #196]	; (800203c <W25qxx_Init+0x248>)
 8001f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f7a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8001f7c:	4b2f      	ldr	r3, [pc, #188]	; (800203c <W25qxx_Init+0x248>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	4a2e      	ldr	r2, [pc, #184]	; (800203c <W25qxx_Init+0x248>)
 8001f84:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8001f86:	4b2d      	ldr	r3, [pc, #180]	; (800203c <W25qxx_Init+0x248>)
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	4a2c      	ldr	r2, [pc, #176]	; (800203c <W25qxx_Init+0x248>)
 8001f8c:	6912      	ldr	r2, [r2, #16]
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	4a2a      	ldr	r2, [pc, #168]	; (800203c <W25qxx_Init+0x248>)
 8001f94:	8952      	ldrh	r2, [r2, #10]
 8001f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f9a:	4a28      	ldr	r2, [pc, #160]	; (800203c <W25qxx_Init+0x248>)
 8001f9c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8001f9e:	4b27      	ldr	r3, [pc, #156]	; (800203c <W25qxx_Init+0x248>)
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	4a25      	ldr	r2, [pc, #148]	; (800203c <W25qxx_Init+0x248>)
 8001fa6:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <W25qxx_Init+0x248>)
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <W25qxx_Init+0x248>)
 8001fae:	6912      	ldr	r2, [r2, #16]
 8001fb0:	fb02 f303 	mul.w	r3, r2, r3
 8001fb4:	0a9b      	lsrs	r3, r3, #10
 8001fb6:	4a21      	ldr	r2, [pc, #132]	; (800203c <W25qxx_Init+0x248>)
 8001fb8:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8001fba:	f7ff fe5f 	bl	8001c7c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8001fbe:	2001      	movs	r0, #1
 8001fc0:	f7ff fea8 	bl	8001d14 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f7ff fea5 	bl	8001d14 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8001fca:	2003      	movs	r0, #3
 8001fcc:	f7ff fea2 	bl	8001d14 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	; (800203c <W25qxx_Init+0x248>)
 8001fd2:	895b      	ldrh	r3, [r3, #10]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4828      	ldr	r0, [pc, #160]	; (8002078 <W25qxx_Init+0x284>)
 8001fd8:	f00b f80c 	bl	800cff4 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8001fdc:	4b17      	ldr	r3, [pc, #92]	; (800203c <W25qxx_Init+0x248>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4826      	ldr	r0, [pc, #152]	; (800207c <W25qxx_Init+0x288>)
 8001fe4:	f00b f806 	bl	800cff4 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8001fe8:	4b14      	ldr	r3, [pc, #80]	; (800203c <W25qxx_Init+0x248>)
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	4619      	mov	r1, r3
 8001fee:	4824      	ldr	r0, [pc, #144]	; (8002080 <W25qxx_Init+0x28c>)
 8001ff0:	f00b f800 	bl	800cff4 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <W25qxx_Init+0x248>)
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4822      	ldr	r0, [pc, #136]	; (8002084 <W25qxx_Init+0x290>)
 8001ffc:	f00a fffa 	bl	800cff4 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <W25qxx_Init+0x248>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4619      	mov	r1, r3
 8002006:	4820      	ldr	r0, [pc, #128]	; (8002088 <W25qxx_Init+0x294>)
 8002008:	f00a fff4 	bl	800cff4 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <W25qxx_Init+0x248>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	4619      	mov	r1, r3
 8002012:	481e      	ldr	r0, [pc, #120]	; (800208c <W25qxx_Init+0x298>)
 8002014:	f00a ffee 	bl	800cff4 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <W25qxx_Init+0x248>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4619      	mov	r1, r3
 800201e:	481c      	ldr	r0, [pc, #112]	; (8002090 <W25qxx_Init+0x29c>)
 8002020:	f00a ffe8 	bl	800cff4 <iprintf>
	printf("w25qxx Init Done\r\n");
 8002024:	481b      	ldr	r0, [pc, #108]	; (8002094 <W25qxx_Init+0x2a0>)
 8002026:	f00b f86b 	bl	800d100 <puts>
#endif
	w25qxx.Lock = 0;
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <W25qxx_Init+0x248>)
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	240004f8 	.word	0x240004f8
 8002040:	58020400 	.word	0x58020400
 8002044:	0800f178 	.word	0x0800f178
 8002048:	0800f190 	.word	0x0800f190
 800204c:	0800f1a4 	.word	0x0800f1a4
 8002050:	0800f1bc 	.word	0x0800f1bc
 8002054:	0800f1d4 	.word	0x0800f1d4
 8002058:	0800f1ec 	.word	0x0800f1ec
 800205c:	0800f204 	.word	0x0800f204
 8002060:	0800f21c 	.word	0x0800f21c
 8002064:	0800f234 	.word	0x0800f234
 8002068:	0800f24c 	.word	0x0800f24c
 800206c:	0800f264 	.word	0x0800f264
 8002070:	0800f27c 	.word	0x0800f27c
 8002074:	0800f294 	.word	0x0800f294
 8002078:	0800f2a8 	.word	0x0800f2a8
 800207c:	0800f2c8 	.word	0x0800f2c8
 8002080:	0800f2e0 	.word	0x0800f2e0
 8002084:	0800f300 	.word	0x0800f300
 8002088:	0800f31c 	.word	0x0800f31c
 800208c:	0800f33c 	.word	0x0800f33c
 8002090:	0800f358 	.word	0x0800f358
 8002094:	0800f378 	.word	0x0800f378

08002098 <W25qxx_EraseChip>:
//###################################################################################################################
void W25qxx_EraseChip(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
	while (w25qxx.Lock == 1)
 800209e:	e002      	b.n	80020a6 <W25qxx_EraseChip+0xe>
		W25qxx_Delay(1);
 80020a0:	2001      	movs	r0, #1
 80020a2:	f000 fa7f 	bl	80025a4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <W25qxx_EraseChip+0x78>)
 80020a8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d0f7      	beq.n	80020a0 <W25qxx_EraseChip+0x8>
	w25qxx.Lock = 1;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <W25qxx_EraseChip+0x78>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 80020b8:	f000 fa68 	bl	800258c <HAL_GetTick>
 80020bc:	6078      	str	r0, [r7, #4]
	printf("w25qxx EraseChip Begin...\r\n");
 80020be:	4815      	ldr	r0, [pc, #84]	; (8002114 <W25qxx_EraseChip+0x7c>)
 80020c0:	f00b f81e 	bl	800d100 <puts>
#endif
	W25qxx_WriteEnable();
 80020c4:	f7ff fe10 	bl	8001ce8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2140      	movs	r1, #64	; 0x40
 80020cc:	4812      	ldr	r0, [pc, #72]	; (8002118 <W25qxx_EraseChip+0x80>)
 80020ce:	f003 fbad 	bl	800582c <HAL_GPIO_WritePin>
	W25qxx_Spi(0xC7);
 80020d2:	20c7      	movs	r0, #199	; 0xc7
 80020d4:	f7ff fd82 	bl	8001bdc <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80020d8:	2201      	movs	r2, #1
 80020da:	2140      	movs	r1, #64	; 0x40
 80020dc:	480e      	ldr	r0, [pc, #56]	; (8002118 <W25qxx_EraseChip+0x80>)
 80020de:	f003 fba5 	bl	800582c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80020e2:	f7ff fe5d 	bl	8001da0 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms!\r\n", HAL_GetTick() - StartTime);
 80020e6:	f000 fa51 	bl	800258c <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	4619      	mov	r1, r3
 80020f2:	480a      	ldr	r0, [pc, #40]	; (800211c <W25qxx_EraseChip+0x84>)
 80020f4:	f00a ff7e 	bl	800cff4 <iprintf>
#endif
	W25qxx_Delay(10);
 80020f8:	200a      	movs	r0, #10
 80020fa:	f000 fa53 	bl	80025a4 <HAL_Delay>
	w25qxx.Lock = 0;
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <W25qxx_EraseChip+0x78>)
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	240004f8 	.word	0x240004f8
 8002114:	0800f38c 	.word	0x0800f38c
 8002118:	58020400 	.word	0x58020400
 800211c:	0800f3a8 	.word	0x0800f3a8

08002120 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800212e:	e002      	b.n	8002136 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002130:	2001      	movs	r0, #1
 8002132:	f000 fa37 	bl	80025a4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002136:	4b56      	ldr	r3, [pc, #344]	; (8002290 <W25qxx_WritePage+0x170>)
 8002138:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800213c:	2b01      	cmp	r3, #1
 800213e:	d0f7      	beq.n	8002130 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <W25qxx_WritePage+0x170>)
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	4a50      	ldr	r2, [pc, #320]	; (8002290 <W25qxx_WritePage+0x170>)
 8002150:	8952      	ldrh	r2, [r2, #10]
 8002152:	4293      	cmp	r3, r2
 8002154:	d802      	bhi.n	800215c <W25qxx_WritePage+0x3c>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800215c:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <W25qxx_WritePage+0x170>)
 800215e:	895b      	ldrh	r3, [r3, #10]
 8002160:	461a      	mov	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	4413      	add	r3, r2
 800216e:	4a48      	ldr	r2, [pc, #288]	; (8002290 <W25qxx_WritePage+0x170>)
 8002170:	8952      	ldrh	r2, [r2, #10]
 8002172:	4293      	cmp	r3, r2
 8002174:	d905      	bls.n	8002182 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <W25qxx_WritePage+0x170>)
 8002178:	895b      	ldrh	r3, [r3, #10]
 800217a:	461a      	mov	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	4842      	ldr	r0, [pc, #264]	; (8002294 <W25qxx_WritePage+0x174>)
 800218a:	f00a ff33 	bl	800cff4 <iprintf>
	W25qxx_Delay(100);
 800218e:	2064      	movs	r0, #100	; 0x64
 8002190:	f000 fa08 	bl	80025a4 <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 8002194:	f000 f9fa 	bl	800258c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 800219a:	f7ff fe01 	bl	8001da0 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800219e:	f7ff fda3 	bl	8001ce8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2140      	movs	r1, #64	; 0x40
 80021a6:	483c      	ldr	r0, [pc, #240]	; (8002298 <W25qxx_WritePage+0x178>)
 80021a8:	f003 fb40 	bl	800582c <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <W25qxx_WritePage+0x170>)
 80021ae:	895b      	ldrh	r3, [r3, #10]
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	fb03 f302 	mul.w	r3, r3, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <W25qxx_WritePage+0x170>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d909      	bls.n	80021da <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 80021c6:	2012      	movs	r0, #18
 80021c8:	f7ff fd08 	bl	8001bdc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	0e1b      	lsrs	r3, r3, #24
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fd02 	bl	8001bdc <W25qxx_Spi>
 80021d8:	e002      	b.n	80021e0 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 80021da:	2002      	movs	r0, #2
 80021dc:	f7ff fcfe 	bl	8001bdc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	0c1b      	lsrs	r3, r3, #16
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fcf8 	bl	8001bdc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fcf2 	bl	8001bdc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fced 	bl	8001bdc <W25qxx_Spi>
//	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
	HAL_QSPI_Transmit(&_W25QXX_SPI, pBuffer, 100);
 8002202:	2264      	movs	r2, #100	; 0x64
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	4825      	ldr	r0, [pc, #148]	; (800229c <W25qxx_WritePage+0x17c>)
 8002208:	f005 fe22 	bl	8007e50 <HAL_QSPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800220c:	2201      	movs	r2, #1
 800220e:	2140      	movs	r1, #64	; 0x40
 8002210:	4821      	ldr	r0, [pc, #132]	; (8002298 <W25qxx_WritePage+0x178>)
 8002212:	f003 fb0b 	bl	800582c <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002216:	f7ff fdc3 	bl	8001da0 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 800221a:	f000 f9b7 	bl	800258c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e018      	b.n	800225e <W25qxx_WritePage+0x13e>
	{
		if ((i % 8 == 0) && (i > 2))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	2b00      	cmp	r3, #0
 8002234:	d108      	bne.n	8002248 <W25qxx_WritePage+0x128>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d905      	bls.n	8002248 <W25qxx_WritePage+0x128>
		{
			printf("\r\n");
 800223c:	4818      	ldr	r0, [pc, #96]	; (80022a0 <W25qxx_WritePage+0x180>)
 800223e:	f00a ff5f 	bl	800d100 <puts>
			W25qxx_Delay(10);
 8002242:	200a      	movs	r0, #10
 8002244:	f000 f9ae 	bl	80025a4 <HAL_Delay>
		}
		printf("0x%02X,", pBuffer[i]);
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	4413      	add	r3, r2
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	4814      	ldr	r0, [pc, #80]	; (80022a4 <W25qxx_WritePage+0x184>)
 8002254:	f00a fece 	bl	800cff4 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	3301      	adds	r3, #1
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d3e2      	bcc.n	800222c <W25qxx_WritePage+0x10c>
	}
	printf("\r\n");
 8002266:	480e      	ldr	r0, [pc, #56]	; (80022a0 <W25qxx_WritePage+0x180>)
 8002268:	f00a ff4a 	bl	800d100 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 800226c:	6939      	ldr	r1, [r7, #16]
 800226e:	480e      	ldr	r0, [pc, #56]	; (80022a8 <W25qxx_WritePage+0x188>)
 8002270:	f00a fec0 	bl	800cff4 <iprintf>
	W25qxx_Delay(100);
 8002274:	2064      	movs	r0, #100	; 0x64
 8002276:	f000 f995 	bl	80025a4 <HAL_Delay>
#endif
	W25qxx_Delay(1);
 800227a:	2001      	movs	r0, #1
 800227c:	f000 f992 	bl	80025a4 <HAL_Delay>
	w25qxx.Lock = 0;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <W25qxx_WritePage+0x170>)
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002288:	bf00      	nop
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	240004f8 	.word	0x240004f8
 8002294:	0800f658 	.word	0x0800f658
 8002298:	58020400 	.word	0x58020400
 800229c:	240004ac 	.word	0x240004ac
 80022a0:	0800f694 	.word	0x0800f694
 80022a4:	0800f698 	.word	0x0800f698
 80022a8:	0800f6a0 	.word	0x0800f6a0

080022ac <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80022ba:	e002      	b.n	80022c2 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80022bc:	2001      	movs	r0, #1
 80022be:	f000 f971 	bl	80025a4 <HAL_Delay>
	while (w25qxx.Lock == 1)
 80022c2:	4b53      	ldr	r3, [pc, #332]	; (8002410 <W25qxx_ReadPage+0x164>)
 80022c4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d0f7      	beq.n	80022bc <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80022cc:	4b50      	ldr	r3, [pc, #320]	; (8002410 <W25qxx_ReadPage+0x164>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80022d4:	4b4e      	ldr	r3, [pc, #312]	; (8002410 <W25qxx_ReadPage+0x164>)
 80022d6:	895b      	ldrh	r3, [r3, #10]
 80022d8:	461a      	mov	r2, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	4293      	cmp	r3, r2
 80022de:	d802      	bhi.n	80022e6 <W25qxx_ReadPage+0x3a>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d102      	bne.n	80022ec <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80022e6:	4b4a      	ldr	r3, [pc, #296]	; (8002410 <W25qxx_ReadPage+0x164>)
 80022e8:	895b      	ldrh	r3, [r3, #10]
 80022ea:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a47      	ldr	r2, [pc, #284]	; (8002410 <W25qxx_ReadPage+0x164>)
 80022f4:	8952      	ldrh	r2, [r2, #10]
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d905      	bls.n	8002306 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80022fa:	4b45      	ldr	r3, [pc, #276]	; (8002410 <W25qxx_ReadPage+0x164>)
 80022fc:	895b      	ldrh	r3, [r3, #10]
 80022fe:	461a      	mov	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	4841      	ldr	r0, [pc, #260]	; (8002414 <W25qxx_ReadPage+0x168>)
 800230e:	f00a fe71 	bl	800cff4 <iprintf>
	W25qxx_Delay(100);
 8002312:	2064      	movs	r0, #100	; 0x64
 8002314:	f000 f946 	bl	80025a4 <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 8002318:	f000 f938 	bl	800258c <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800231e:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <W25qxx_ReadPage+0x164>)
 8002320:	895b      	ldrh	r3, [r3, #10]
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	fb03 f302 	mul.w	r3, r3, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002330:	2200      	movs	r2, #0
 8002332:	2140      	movs	r1, #64	; 0x40
 8002334:	4838      	ldr	r0, [pc, #224]	; (8002418 <W25qxx_ReadPage+0x16c>)
 8002336:	f003 fa79 	bl	800582c <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800233a:	4b35      	ldr	r3, [pc, #212]	; (8002410 <W25qxx_ReadPage+0x164>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b08      	cmp	r3, #8
 8002340:	d909      	bls.n	8002356 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8002342:	200c      	movs	r0, #12
 8002344:	f7ff fc4a 	bl	8001bdc <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	0e1b      	lsrs	r3, r3, #24
 800234c:	b2db      	uxtb	r3, r3
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fc44 	bl	8001bdc <W25qxx_Spi>
 8002354:	e002      	b.n	800235c <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8002356:	200b      	movs	r0, #11
 8002358:	f7ff fc40 	bl	8001bdc <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	0c1b      	lsrs	r3, r3, #16
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fc3a 	bl	8001bdc <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fc34 	bl	8001bdc <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fc2f 	bl	8001bdc <W25qxx_Spi>
	W25qxx_Spi(0);
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff fc2c 	bl	8001bdc <W25qxx_Spi>
//	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
	HAL_QSPI_Receive(&_W25QXX_SPI, pBuffer, 100);
 8002384:	2264      	movs	r2, #100	; 0x64
 8002386:	68f9      	ldr	r1, [r7, #12]
 8002388:	4824      	ldr	r0, [pc, #144]	; (800241c <W25qxx_ReadPage+0x170>)
 800238a:	f005 fdf3 	bl	8007f74 <HAL_QSPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800238e:	2201      	movs	r2, #1
 8002390:	2140      	movs	r1, #64	; 0x40
 8002392:	4821      	ldr	r0, [pc, #132]	; (8002418 <W25qxx_ReadPage+0x16c>)
 8002394:	f003 fa4a 	bl	800582c <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8002398:	f000 f8f8 	bl	800258c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	e018      	b.n	80023dc <W25qxx_ReadPage+0x130>
	{
		if ((i % 8 == 0) && (i > 2))
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d108      	bne.n	80023c6 <W25qxx_ReadPage+0x11a>
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d905      	bls.n	80023c6 <W25qxx_ReadPage+0x11a>
		{
			printf("\r\n");
 80023ba:	4819      	ldr	r0, [pc, #100]	; (8002420 <W25qxx_ReadPage+0x174>)
 80023bc:	f00a fea0 	bl	800d100 <puts>
			W25qxx_Delay(10);
 80023c0:	200a      	movs	r0, #10
 80023c2:	f000 f8ef 	bl	80025a4 <HAL_Delay>
		}
		printf("0x%02X,", pBuffer[i]);
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	4413      	add	r3, r2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	4814      	ldr	r0, [pc, #80]	; (8002424 <W25qxx_ReadPage+0x178>)
 80023d2:	f00a fe0f 	bl	800cff4 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3301      	adds	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d3e2      	bcc.n	80023aa <W25qxx_ReadPage+0xfe>
	}
	printf("\r\n");
 80023e4:	480e      	ldr	r0, [pc, #56]	; (8002420 <W25qxx_ReadPage+0x174>)
 80023e6:	f00a fe8b 	bl	800d100 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 80023ea:	6939      	ldr	r1, [r7, #16]
 80023ec:	480e      	ldr	r0, [pc, #56]	; (8002428 <W25qxx_ReadPage+0x17c>)
 80023ee:	f00a fe01 	bl	800cff4 <iprintf>
	W25qxx_Delay(100);
 80023f2:	2064      	movs	r0, #100	; 0x64
 80023f4:	f000 f8d6 	bl	80025a4 <HAL_Delay>
#endif
	W25qxx_Delay(1);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f000 f8d3 	bl	80025a4 <HAL_Delay>
	w25qxx.Lock = 0;
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <W25qxx_ReadPage+0x164>)
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	240004f8 	.word	0x240004f8
 8002414:	0800f870 	.word	0x0800f870
 8002418:	58020400 	.word	0x58020400
 800241c:	240004ac 	.word	0x240004ac
 8002420:	0800f694 	.word	0x0800f694
 8002424:	0800f698 	.word	0x0800f698
 8002428:	0800f8ac 	.word	0x0800f8ac

0800242c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800242c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002464 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002430:	f7ff fb48 	bl	8001ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002434:	480c      	ldr	r0, [pc, #48]	; (8002468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002436:	490d      	ldr	r1, [pc, #52]	; (800246c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800244c:	4c0a      	ldr	r4, [pc, #40]	; (8002478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800245a:	f00a f95b 	bl	800c714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800245e:	f7fe fce7 	bl	8000e30 <main>
  bx  lr
 8002462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002464:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002468:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800246c:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8002470:	0800fdf4 	.word	0x0800fdf4
  ldr r2, =_sbss
 8002474:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 8002478:	24000534 	.word	0x24000534

0800247c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC3_IRQHandler>
	...

08002480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002486:	2003      	movs	r0, #3
 8002488:	f000 f98c 	bl	80027a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800248c:	f006 fc1a 	bl	8008cc4 <HAL_RCC_GetSysClockFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_Init+0x68>)
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	4913      	ldr	r1, [pc, #76]	; (80024ec <HAL_Init+0x6c>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_Init+0x68>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <HAL_Init+0x6c>)
 80024b4:	5cd3      	ldrb	r3, [r2, r3]
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
 80024c0:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_Init+0x70>)
 80024c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024c4:	4a0b      	ldr	r2, [pc, #44]	; (80024f4 <HAL_Init+0x74>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024ca:	200f      	movs	r0, #15
 80024cc:	f000 f814 	bl	80024f8 <HAL_InitTick>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e002      	b.n	80024e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024da:	f7fe ff57 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	58024400 	.word	0x58024400
 80024ec:	0800f9c4 	.word	0x0800f9c4
 80024f0:	24000014 	.word	0x24000014
 80024f4:	24000010 	.word	0x24000010

080024f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_InitTick+0x60>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e021      	b.n	8002550 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_InitTick+0x64>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_InitTick+0x60>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f971 	bl	800280a <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00e      	b.n	8002550 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d80a      	bhi.n	800254e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002538:	2200      	movs	r2, #0
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f000 f93b 	bl	80027ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <HAL_InitTick+0x68>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2400001c 	.word	0x2400001c
 800255c:	24000010 	.word	0x24000010
 8002560:	24000018 	.word	0x24000018

08002564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_IncTick+0x20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_IncTick+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_IncTick+0x24>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	2400001c 	.word	0x2400001c
 8002588:	24000520 	.word	0x24000520

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_GetTick+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	24000520 	.word	0x24000520

080025a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025ac:	f7ff ffee 	bl	800258c <HAL_GetTick>
 80025b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025bc:	d005      	beq.n	80025ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_Delay+0x44>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ca:	bf00      	nop
 80025cc:	f7ff ffde 	bl	800258c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d8f7      	bhi.n	80025cc <HAL_Delay+0x28>
  {
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	2400001c 	.word	0x2400001c

080025ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <HAL_GetREVID+0x14>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	0c1b      	lsrs	r3, r3, #16
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	5c001000 	.word	0x5c001000

08002604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <__NVIC_SetPriorityGrouping+0x40>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002620:	4013      	ands	r3, r2
 8002622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <__NVIC_SetPriorityGrouping+0x44>)
 800262e:	4313      	orrs	r3, r2
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	; (8002644 <__NVIC_SetPriorityGrouping+0x40>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00
 8002648:	05fa0000 	.word	0x05fa0000

0800264c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002650:	4b04      	ldr	r3, [pc, #16]	; (8002664 <__NVIC_GetPriorityGrouping+0x18>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	0a1b      	lsrs	r3, r3, #8
 8002656:	f003 0307 	and.w	r3, r3, #7
}
 800265a:	4618      	mov	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002676:	2b00      	cmp	r3, #0
 8002678:	db0b      	blt.n	8002692 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	f003 021f 	and.w	r2, r3, #31
 8002680:	4907      	ldr	r1, [pc, #28]	; (80026a0 <__NVIC_EnableIRQ+0x38>)
 8002682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	2001      	movs	r0, #1
 800268a:	fa00 f202 	lsl.w	r2, r0, r2
 800268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000e100 	.word	0xe000e100

080026a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db0a      	blt.n	80026ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	490c      	ldr	r1, [pc, #48]	; (80026f0 <__NVIC_SetPriority+0x4c>)
 80026be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c2:	0112      	lsls	r2, r2, #4
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	440b      	add	r3, r1
 80026c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026cc:	e00a      	b.n	80026e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	4908      	ldr	r1, [pc, #32]	; (80026f4 <__NVIC_SetPriority+0x50>)
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	3b04      	subs	r3, #4
 80026dc:	0112      	lsls	r2, r2, #4
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	440b      	add	r3, r1
 80026e2:	761a      	strb	r2, [r3, #24]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000e100 	.word	0xe000e100
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f1c3 0307 	rsb	r3, r3, #7
 8002712:	2b04      	cmp	r3, #4
 8002714:	bf28      	it	cs
 8002716:	2304      	movcs	r3, #4
 8002718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3304      	adds	r3, #4
 800271e:	2b06      	cmp	r3, #6
 8002720:	d902      	bls.n	8002728 <NVIC_EncodePriority+0x30>
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3b03      	subs	r3, #3
 8002726:	e000      	b.n	800272a <NVIC_EncodePriority+0x32>
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	f04f 32ff 	mov.w	r2, #4294967295
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43da      	mvns	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002740:	f04f 31ff 	mov.w	r1, #4294967295
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	fa01 f303 	lsl.w	r3, r1, r3
 800274a:	43d9      	mvns	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002750:	4313      	orrs	r3, r2
         );
}
 8002752:	4618      	mov	r0, r3
 8002754:	3724      	adds	r7, #36	; 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002770:	d301      	bcc.n	8002776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002772:	2301      	movs	r3, #1
 8002774:	e00f      	b.n	8002796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002776:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <SysTick_Config+0x40>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3b01      	subs	r3, #1
 800277c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800277e:	210f      	movs	r1, #15
 8002780:	f04f 30ff 	mov.w	r0, #4294967295
 8002784:	f7ff ff8e 	bl	80026a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <SysTick_Config+0x40>)
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800278e:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <SysTick_Config+0x40>)
 8002790:	2207      	movs	r2, #7
 8002792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	e000e010 	.word	0xe000e010

080027a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff29 	bl	8002604 <__NVIC_SetPriorityGrouping>
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
 80027c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027c8:	f7ff ff40 	bl	800264c <__NVIC_GetPriorityGrouping>
 80027cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	6978      	ldr	r0, [r7, #20]
 80027d4:	f7ff ff90 	bl	80026f8 <NVIC_EncodePriority>
 80027d8:	4602      	mov	r2, r0
 80027da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff5f 	bl	80026a4 <__NVIC_SetPriority>
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff ff33 	bl	8002668 <__NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffa4 	bl	8002760 <SysTick_Config>
 8002818:	4603      	mov	r3, r0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff feae 	bl	800258c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e316      	b.n	8002e6a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a66      	ldr	r2, [pc, #408]	; (80029dc <HAL_DMA_Init+0x1b8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d04a      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_DMA_Init+0x1bc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d045      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a63      	ldr	r2, [pc, #396]	; (80029e4 <HAL_DMA_Init+0x1c0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d040      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a62      	ldr	r2, [pc, #392]	; (80029e8 <HAL_DMA_Init+0x1c4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d03b      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a60      	ldr	r2, [pc, #384]	; (80029ec <HAL_DMA_Init+0x1c8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d036      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a5f      	ldr	r2, [pc, #380]	; (80029f0 <HAL_DMA_Init+0x1cc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d031      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a5d      	ldr	r2, [pc, #372]	; (80029f4 <HAL_DMA_Init+0x1d0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d02c      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a5c      	ldr	r2, [pc, #368]	; (80029f8 <HAL_DMA_Init+0x1d4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d027      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a5a      	ldr	r2, [pc, #360]	; (80029fc <HAL_DMA_Init+0x1d8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d022      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a59      	ldr	r2, [pc, #356]	; (8002a00 <HAL_DMA_Init+0x1dc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d01d      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a57      	ldr	r2, [pc, #348]	; (8002a04 <HAL_DMA_Init+0x1e0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d018      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a56      	ldr	r2, [pc, #344]	; (8002a08 <HAL_DMA_Init+0x1e4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d013      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a54      	ldr	r2, [pc, #336]	; (8002a0c <HAL_DMA_Init+0x1e8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00e      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a53      	ldr	r2, [pc, #332]	; (8002a10 <HAL_DMA_Init+0x1ec>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d009      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a51      	ldr	r2, [pc, #324]	; (8002a14 <HAL_DMA_Init+0x1f0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_DMA_Init+0xb8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a50      	ldr	r2, [pc, #320]	; (8002a18 <HAL_DMA_Init+0x1f4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d101      	bne.n	80028e0 <HAL_DMA_Init+0xbc>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_DMA_Init+0xbe>
 80028e0:	2300      	movs	r3, #0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 813b 	beq.w	8002b5e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a37      	ldr	r2, [pc, #220]	; (80029dc <HAL_DMA_Init+0x1b8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d04a      	beq.n	8002998 <HAL_DMA_Init+0x174>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a36      	ldr	r2, [pc, #216]	; (80029e0 <HAL_DMA_Init+0x1bc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d045      	beq.n	8002998 <HAL_DMA_Init+0x174>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a34      	ldr	r2, [pc, #208]	; (80029e4 <HAL_DMA_Init+0x1c0>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d040      	beq.n	8002998 <HAL_DMA_Init+0x174>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a33      	ldr	r2, [pc, #204]	; (80029e8 <HAL_DMA_Init+0x1c4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d03b      	beq.n	8002998 <HAL_DMA_Init+0x174>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a31      	ldr	r2, [pc, #196]	; (80029ec <HAL_DMA_Init+0x1c8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d036      	beq.n	8002998 <HAL_DMA_Init+0x174>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <HAL_DMA_Init+0x1cc>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d031      	beq.n	8002998 <HAL_DMA_Init+0x174>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a2e      	ldr	r2, [pc, #184]	; (80029f4 <HAL_DMA_Init+0x1d0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d02c      	beq.n	8002998 <HAL_DMA_Init+0x174>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2d      	ldr	r2, [pc, #180]	; (80029f8 <HAL_DMA_Init+0x1d4>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d027      	beq.n	8002998 <HAL_DMA_Init+0x174>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_DMA_Init+0x1d8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d022      	beq.n	8002998 <HAL_DMA_Init+0x174>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a2a      	ldr	r2, [pc, #168]	; (8002a00 <HAL_DMA_Init+0x1dc>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d01d      	beq.n	8002998 <HAL_DMA_Init+0x174>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <HAL_DMA_Init+0x1e0>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d018      	beq.n	8002998 <HAL_DMA_Init+0x174>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <HAL_DMA_Init+0x1e4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d013      	beq.n	8002998 <HAL_DMA_Init+0x174>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <HAL_DMA_Init+0x1e8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00e      	beq.n	8002998 <HAL_DMA_Init+0x174>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <HAL_DMA_Init+0x1ec>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d009      	beq.n	8002998 <HAL_DMA_Init+0x174>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <HAL_DMA_Init+0x1f0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d004      	beq.n	8002998 <HAL_DMA_Init+0x174>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <HAL_DMA_Init+0x1f4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d108      	bne.n	80029aa <HAL_DMA_Init+0x186>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e007      	b.n	80029ba <HAL_DMA_Init+0x196>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80029ba:	e02f      	b.n	8002a1c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029bc:	f7ff fde6 	bl	800258c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b05      	cmp	r3, #5
 80029c8:	d928      	bls.n	8002a1c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2203      	movs	r2, #3
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e246      	b.n	8002e6a <HAL_DMA_Init+0x646>
 80029dc:	40020010 	.word	0x40020010
 80029e0:	40020028 	.word	0x40020028
 80029e4:	40020040 	.word	0x40020040
 80029e8:	40020058 	.word	0x40020058
 80029ec:	40020070 	.word	0x40020070
 80029f0:	40020088 	.word	0x40020088
 80029f4:	400200a0 	.word	0x400200a0
 80029f8:	400200b8 	.word	0x400200b8
 80029fc:	40020410 	.word	0x40020410
 8002a00:	40020428 	.word	0x40020428
 8002a04:	40020440 	.word	0x40020440
 8002a08:	40020458 	.word	0x40020458
 8002a0c:	40020470 	.word	0x40020470
 8002a10:	40020488 	.word	0x40020488
 8002a14:	400204a0 	.word	0x400204a0
 8002a18:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1c8      	bne.n	80029bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4b83      	ldr	r3, [pc, #524]	; (8002c44 <HAL_DMA_Init+0x420>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002a42:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d107      	bne.n	8002a80 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002a80:	4b71      	ldr	r3, [pc, #452]	; (8002c48 <HAL_DMA_Init+0x424>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b71      	ldr	r3, [pc, #452]	; (8002c4c <HAL_DMA_Init+0x428>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a8c:	d328      	bcc.n	8002ae0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b28      	cmp	r3, #40	; 0x28
 8002a94:	d903      	bls.n	8002a9e <HAL_DMA_Init+0x27a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8002a9c:	d917      	bls.n	8002ace <HAL_DMA_Init+0x2aa>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b3e      	cmp	r3, #62	; 0x3e
 8002aa4:	d903      	bls.n	8002aae <HAL_DMA_Init+0x28a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b42      	cmp	r3, #66	; 0x42
 8002aac:	d90f      	bls.n	8002ace <HAL_DMA_Init+0x2aa>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b46      	cmp	r3, #70	; 0x46
 8002ab4:	d903      	bls.n	8002abe <HAL_DMA_Init+0x29a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b48      	cmp	r3, #72	; 0x48
 8002abc:	d907      	bls.n	8002ace <HAL_DMA_Init+0x2aa>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b4e      	cmp	r3, #78	; 0x4e
 8002ac4:	d905      	bls.n	8002ad2 <HAL_DMA_Init+0x2ae>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b52      	cmp	r3, #82	; 0x52
 8002acc:	d801      	bhi.n	8002ad2 <HAL_DMA_Init+0x2ae>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_DMA_Init+0x2b0>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ade:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f023 0307 	bic.w	r3, r3, #7
 8002af6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d117      	bne.n	8002b3a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00e      	beq.n	8002b3a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f002 fb4b 	bl	80051b8 <DMA_CheckFifoParam>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2240      	movs	r2, #64	; 0x40
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e197      	b.n	8002e6a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f002 fa86 	bl	8005054 <DMA_CalcBaseAndBitshift>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	223f      	movs	r2, #63	; 0x3f
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	e0cd      	b.n	8002cfa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <HAL_DMA_Init+0x42c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d022      	beq.n	8002bae <HAL_DMA_Init+0x38a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a39      	ldr	r2, [pc, #228]	; (8002c54 <HAL_DMA_Init+0x430>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01d      	beq.n	8002bae <HAL_DMA_Init+0x38a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a38      	ldr	r2, [pc, #224]	; (8002c58 <HAL_DMA_Init+0x434>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d018      	beq.n	8002bae <HAL_DMA_Init+0x38a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a36      	ldr	r2, [pc, #216]	; (8002c5c <HAL_DMA_Init+0x438>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_DMA_Init+0x38a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a35      	ldr	r2, [pc, #212]	; (8002c60 <HAL_DMA_Init+0x43c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00e      	beq.n	8002bae <HAL_DMA_Init+0x38a>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a33      	ldr	r2, [pc, #204]	; (8002c64 <HAL_DMA_Init+0x440>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d009      	beq.n	8002bae <HAL_DMA_Init+0x38a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a32      	ldr	r2, [pc, #200]	; (8002c68 <HAL_DMA_Init+0x444>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d004      	beq.n	8002bae <HAL_DMA_Init+0x38a>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a30      	ldr	r2, [pc, #192]	; (8002c6c <HAL_DMA_Init+0x448>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_DMA_Init+0x38e>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <HAL_DMA_Init+0x390>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8097 	beq.w	8002ce8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a24      	ldr	r2, [pc, #144]	; (8002c50 <HAL_DMA_Init+0x42c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d021      	beq.n	8002c08 <HAL_DMA_Init+0x3e4>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <HAL_DMA_Init+0x430>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01c      	beq.n	8002c08 <HAL_DMA_Init+0x3e4>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a21      	ldr	r2, [pc, #132]	; (8002c58 <HAL_DMA_Init+0x434>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d017      	beq.n	8002c08 <HAL_DMA_Init+0x3e4>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1f      	ldr	r2, [pc, #124]	; (8002c5c <HAL_DMA_Init+0x438>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d012      	beq.n	8002c08 <HAL_DMA_Init+0x3e4>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_DMA_Init+0x43c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00d      	beq.n	8002c08 <HAL_DMA_Init+0x3e4>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_DMA_Init+0x440>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d008      	beq.n	8002c08 <HAL_DMA_Init+0x3e4>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_DMA_Init+0x444>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <HAL_DMA_Init+0x3e4>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <HAL_DMA_Init+0x448>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_DMA_Init+0x44c>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b40      	cmp	r3, #64	; 0x40
 8002c30:	d020      	beq.n	8002c74 <HAL_DMA_Init+0x450>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b80      	cmp	r3, #128	; 0x80
 8002c38:	d102      	bne.n	8002c40 <HAL_DMA_Init+0x41c>
 8002c3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c3e:	e01a      	b.n	8002c76 <HAL_DMA_Init+0x452>
 8002c40:	2300      	movs	r3, #0
 8002c42:	e018      	b.n	8002c76 <HAL_DMA_Init+0x452>
 8002c44:	fe10803f 	.word	0xfe10803f
 8002c48:	5c001000 	.word	0x5c001000
 8002c4c:	ffff0000 	.word	0xffff0000
 8002c50:	58025408 	.word	0x58025408
 8002c54:	5802541c 	.word	0x5802541c
 8002c58:	58025430 	.word	0x58025430
 8002c5c:	58025444 	.word	0x58025444
 8002c60:	58025458 	.word	0x58025458
 8002c64:	5802546c 	.word	0x5802546c
 8002c68:	58025480 	.word	0x58025480
 8002c6c:	58025494 	.word	0x58025494
 8002c70:	fffe000f 	.word	0xfffe000f
 8002c74:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68d2      	ldr	r2, [r2, #12]
 8002c7a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ca4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b6e      	ldr	r3, [pc, #440]	; (8002e74 <HAL_DMA_Init+0x650>)
 8002cbc:	4413      	add	r3, r2
 8002cbe:	4a6e      	ldr	r2, [pc, #440]	; (8002e78 <HAL_DMA_Init+0x654>)
 8002cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	009a      	lsls	r2, r3, #2
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f002 f9c1 	bl	8005054 <DMA_CalcBaseAndBitshift>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2201      	movs	r2, #1
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	e008      	b.n	8002cfa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0b7      	b.n	8002e6a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5f      	ldr	r2, [pc, #380]	; (8002e7c <HAL_DMA_Init+0x658>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d072      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a5d      	ldr	r2, [pc, #372]	; (8002e80 <HAL_DMA_Init+0x65c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d06d      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a5c      	ldr	r2, [pc, #368]	; (8002e84 <HAL_DMA_Init+0x660>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d068      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a5a      	ldr	r2, [pc, #360]	; (8002e88 <HAL_DMA_Init+0x664>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d063      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a59      	ldr	r2, [pc, #356]	; (8002e8c <HAL_DMA_Init+0x668>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d05e      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a57      	ldr	r2, [pc, #348]	; (8002e90 <HAL_DMA_Init+0x66c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d059      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a56      	ldr	r2, [pc, #344]	; (8002e94 <HAL_DMA_Init+0x670>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d054      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a54      	ldr	r2, [pc, #336]	; (8002e98 <HAL_DMA_Init+0x674>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d04f      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a53      	ldr	r2, [pc, #332]	; (8002e9c <HAL_DMA_Init+0x678>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d04a      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a51      	ldr	r2, [pc, #324]	; (8002ea0 <HAL_DMA_Init+0x67c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d045      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a50      	ldr	r2, [pc, #320]	; (8002ea4 <HAL_DMA_Init+0x680>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d040      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ea8 <HAL_DMA_Init+0x684>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d03b      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a4d      	ldr	r2, [pc, #308]	; (8002eac <HAL_DMA_Init+0x688>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d036      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_DMA_Init+0x68c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d031      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a4a      	ldr	r2, [pc, #296]	; (8002eb4 <HAL_DMA_Init+0x690>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d02c      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a48      	ldr	r2, [pc, #288]	; (8002eb8 <HAL_DMA_Init+0x694>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d027      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a47      	ldr	r2, [pc, #284]	; (8002ebc <HAL_DMA_Init+0x698>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d022      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a45      	ldr	r2, [pc, #276]	; (8002ec0 <HAL_DMA_Init+0x69c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01d      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a44      	ldr	r2, [pc, #272]	; (8002ec4 <HAL_DMA_Init+0x6a0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d018      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a42      	ldr	r2, [pc, #264]	; (8002ec8 <HAL_DMA_Init+0x6a4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a41      	ldr	r2, [pc, #260]	; (8002ecc <HAL_DMA_Init+0x6a8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00e      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a3f      	ldr	r2, [pc, #252]	; (8002ed0 <HAL_DMA_Init+0x6ac>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d009      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a3e      	ldr	r2, [pc, #248]	; (8002ed4 <HAL_DMA_Init+0x6b0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_DMA_Init+0x5c6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a3c      	ldr	r2, [pc, #240]	; (8002ed8 <HAL_DMA_Init+0x6b4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_DMA_Init+0x5ca>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_DMA_Init+0x5cc>
 8002dee:	2300      	movs	r3, #0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d032      	beq.n	8002e5a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f002 fa5b 	bl	80052b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b80      	cmp	r3, #128	; 0x80
 8002e00:	d102      	bne.n	8002e08 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e1c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d010      	beq.n	8002e48 <HAL_DMA_Init+0x624>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d80c      	bhi.n	8002e48 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f002 fad8 	bl	80053e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	e008      	b.n	8002e5a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	a7fdabf8 	.word	0xa7fdabf8
 8002e78:	cccccccd 	.word	0xcccccccd
 8002e7c:	40020010 	.word	0x40020010
 8002e80:	40020028 	.word	0x40020028
 8002e84:	40020040 	.word	0x40020040
 8002e88:	40020058 	.word	0x40020058
 8002e8c:	40020070 	.word	0x40020070
 8002e90:	40020088 	.word	0x40020088
 8002e94:	400200a0 	.word	0x400200a0
 8002e98:	400200b8 	.word	0x400200b8
 8002e9c:	40020410 	.word	0x40020410
 8002ea0:	40020428 	.word	0x40020428
 8002ea4:	40020440 	.word	0x40020440
 8002ea8:	40020458 	.word	0x40020458
 8002eac:	40020470 	.word	0x40020470
 8002eb0:	40020488 	.word	0x40020488
 8002eb4:	400204a0 	.word	0x400204a0
 8002eb8:	400204b8 	.word	0x400204b8
 8002ebc:	58025408 	.word	0x58025408
 8002ec0:	5802541c 	.word	0x5802541c
 8002ec4:	58025430 	.word	0x58025430
 8002ec8:	58025444 	.word	0x58025444
 8002ecc:	58025458 	.word	0x58025458
 8002ed0:	5802546c 	.word	0x5802546c
 8002ed4:	58025480 	.word	0x58025480
 8002ed8:	58025494 	.word	0x58025494

08002edc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e226      	b.n	8003346 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_DMA_Start_IT+0x2a>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e21f      	b.n	8003346 <HAL_DMA_Start_IT+0x46a>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	f040 820a 	bne.w	8003330 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a68      	ldr	r2, [pc, #416]	; (80030d0 <HAL_DMA_Start_IT+0x1f4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d04a      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a66      	ldr	r2, [pc, #408]	; (80030d4 <HAL_DMA_Start_IT+0x1f8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d045      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a65      	ldr	r2, [pc, #404]	; (80030d8 <HAL_DMA_Start_IT+0x1fc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d040      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a63      	ldr	r2, [pc, #396]	; (80030dc <HAL_DMA_Start_IT+0x200>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d03b      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a62      	ldr	r2, [pc, #392]	; (80030e0 <HAL_DMA_Start_IT+0x204>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d036      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a60      	ldr	r2, [pc, #384]	; (80030e4 <HAL_DMA_Start_IT+0x208>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d031      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a5f      	ldr	r2, [pc, #380]	; (80030e8 <HAL_DMA_Start_IT+0x20c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d02c      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a5d      	ldr	r2, [pc, #372]	; (80030ec <HAL_DMA_Start_IT+0x210>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d027      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a5c      	ldr	r2, [pc, #368]	; (80030f0 <HAL_DMA_Start_IT+0x214>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d022      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5a      	ldr	r2, [pc, #360]	; (80030f4 <HAL_DMA_Start_IT+0x218>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d01d      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a59      	ldr	r2, [pc, #356]	; (80030f8 <HAL_DMA_Start_IT+0x21c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d018      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a57      	ldr	r2, [pc, #348]	; (80030fc <HAL_DMA_Start_IT+0x220>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a56      	ldr	r2, [pc, #344]	; (8003100 <HAL_DMA_Start_IT+0x224>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00e      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a54      	ldr	r2, [pc, #336]	; (8003104 <HAL_DMA_Start_IT+0x228>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a53      	ldr	r2, [pc, #332]	; (8003108 <HAL_DMA_Start_IT+0x22c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d004      	beq.n	8002fca <HAL_DMA_Start_IT+0xee>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a51      	ldr	r2, [pc, #324]	; (800310c <HAL_DMA_Start_IT+0x230>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d108      	bne.n	8002fdc <HAL_DMA_Start_IT+0x100>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e007      	b.n	8002fec <HAL_DMA_Start_IT+0x110>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f001 fe82 	bl	8004cfc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a34      	ldr	r2, [pc, #208]	; (80030d0 <HAL_DMA_Start_IT+0x1f4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d04a      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a33      	ldr	r2, [pc, #204]	; (80030d4 <HAL_DMA_Start_IT+0x1f8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d045      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a31      	ldr	r2, [pc, #196]	; (80030d8 <HAL_DMA_Start_IT+0x1fc>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d040      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a30      	ldr	r2, [pc, #192]	; (80030dc <HAL_DMA_Start_IT+0x200>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d03b      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2e      	ldr	r2, [pc, #184]	; (80030e0 <HAL_DMA_Start_IT+0x204>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d036      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2d      	ldr	r2, [pc, #180]	; (80030e4 <HAL_DMA_Start_IT+0x208>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d031      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2b      	ldr	r2, [pc, #172]	; (80030e8 <HAL_DMA_Start_IT+0x20c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d02c      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2a      	ldr	r2, [pc, #168]	; (80030ec <HAL_DMA_Start_IT+0x210>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d027      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a28      	ldr	r2, [pc, #160]	; (80030f0 <HAL_DMA_Start_IT+0x214>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d022      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <HAL_DMA_Start_IT+0x218>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d01d      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a25      	ldr	r2, [pc, #148]	; (80030f8 <HAL_DMA_Start_IT+0x21c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d018      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a24      	ldr	r2, [pc, #144]	; (80030fc <HAL_DMA_Start_IT+0x220>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a22      	ldr	r2, [pc, #136]	; (8003100 <HAL_DMA_Start_IT+0x224>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00e      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a21      	ldr	r2, [pc, #132]	; (8003104 <HAL_DMA_Start_IT+0x228>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d009      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1f      	ldr	r2, [pc, #124]	; (8003108 <HAL_DMA_Start_IT+0x22c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_DMA_Start_IT+0x1bc>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1e      	ldr	r2, [pc, #120]	; (800310c <HAL_DMA_Start_IT+0x230>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_DMA_Start_IT+0x1c0>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_DMA_Start_IT+0x1c2>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d036      	beq.n	8003110 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 021e 	bic.w	r2, r3, #30
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0216 	orr.w	r2, r2, #22
 80030b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d03e      	beq.n	800313c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0208 	orr.w	r2, r2, #8
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	e035      	b.n	800313c <HAL_DMA_Start_IT+0x260>
 80030d0:	40020010 	.word	0x40020010
 80030d4:	40020028 	.word	0x40020028
 80030d8:	40020040 	.word	0x40020040
 80030dc:	40020058 	.word	0x40020058
 80030e0:	40020070 	.word	0x40020070
 80030e4:	40020088 	.word	0x40020088
 80030e8:	400200a0 	.word	0x400200a0
 80030ec:	400200b8 	.word	0x400200b8
 80030f0:	40020410 	.word	0x40020410
 80030f4:	40020428 	.word	0x40020428
 80030f8:	40020440 	.word	0x40020440
 80030fc:	40020458 	.word	0x40020458
 8003100:	40020470 	.word	0x40020470
 8003104:	40020488 	.word	0x40020488
 8003108:	400204a0 	.word	0x400204a0
 800310c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 020e 	bic.w	r2, r3, #14
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 020a 	orr.w	r2, r2, #10
 8003122:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0204 	orr.w	r2, r2, #4
 800313a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a83      	ldr	r2, [pc, #524]	; (8003350 <HAL_DMA_Start_IT+0x474>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d072      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a82      	ldr	r2, [pc, #520]	; (8003354 <HAL_DMA_Start_IT+0x478>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d06d      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a80      	ldr	r2, [pc, #512]	; (8003358 <HAL_DMA_Start_IT+0x47c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d068      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a7f      	ldr	r2, [pc, #508]	; (800335c <HAL_DMA_Start_IT+0x480>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d063      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a7d      	ldr	r2, [pc, #500]	; (8003360 <HAL_DMA_Start_IT+0x484>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d05e      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7c      	ldr	r2, [pc, #496]	; (8003364 <HAL_DMA_Start_IT+0x488>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d059      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a7a      	ldr	r2, [pc, #488]	; (8003368 <HAL_DMA_Start_IT+0x48c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d054      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a79      	ldr	r2, [pc, #484]	; (800336c <HAL_DMA_Start_IT+0x490>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d04f      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a77      	ldr	r2, [pc, #476]	; (8003370 <HAL_DMA_Start_IT+0x494>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d04a      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a76      	ldr	r2, [pc, #472]	; (8003374 <HAL_DMA_Start_IT+0x498>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d045      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a74      	ldr	r2, [pc, #464]	; (8003378 <HAL_DMA_Start_IT+0x49c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d040      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a73      	ldr	r2, [pc, #460]	; (800337c <HAL_DMA_Start_IT+0x4a0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d03b      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a71      	ldr	r2, [pc, #452]	; (8003380 <HAL_DMA_Start_IT+0x4a4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d036      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a70      	ldr	r2, [pc, #448]	; (8003384 <HAL_DMA_Start_IT+0x4a8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d031      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a6e      	ldr	r2, [pc, #440]	; (8003388 <HAL_DMA_Start_IT+0x4ac>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02c      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a6d      	ldr	r2, [pc, #436]	; (800338c <HAL_DMA_Start_IT+0x4b0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d027      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a6b      	ldr	r2, [pc, #428]	; (8003390 <HAL_DMA_Start_IT+0x4b4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d022      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a6a      	ldr	r2, [pc, #424]	; (8003394 <HAL_DMA_Start_IT+0x4b8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d01d      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a68      	ldr	r2, [pc, #416]	; (8003398 <HAL_DMA_Start_IT+0x4bc>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a67      	ldr	r2, [pc, #412]	; (800339c <HAL_DMA_Start_IT+0x4c0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a65      	ldr	r2, [pc, #404]	; (80033a0 <HAL_DMA_Start_IT+0x4c4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a64      	ldr	r2, [pc, #400]	; (80033a4 <HAL_DMA_Start_IT+0x4c8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a62      	ldr	r2, [pc, #392]	; (80033a8 <HAL_DMA_Start_IT+0x4cc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_DMA_Start_IT+0x350>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a61      	ldr	r2, [pc, #388]	; (80033ac <HAL_DMA_Start_IT+0x4d0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_DMA_Start_IT+0x354>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_DMA_Start_IT+0x356>
 8003230:	2300      	movs	r3, #0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01a      	beq.n	800326c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003252:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800326a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a37      	ldr	r2, [pc, #220]	; (8003350 <HAL_DMA_Start_IT+0x474>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d04a      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a36      	ldr	r2, [pc, #216]	; (8003354 <HAL_DMA_Start_IT+0x478>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d045      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a34      	ldr	r2, [pc, #208]	; (8003358 <HAL_DMA_Start_IT+0x47c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d040      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a33      	ldr	r2, [pc, #204]	; (800335c <HAL_DMA_Start_IT+0x480>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d03b      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a31      	ldr	r2, [pc, #196]	; (8003360 <HAL_DMA_Start_IT+0x484>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d036      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a30      	ldr	r2, [pc, #192]	; (8003364 <HAL_DMA_Start_IT+0x488>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d031      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <HAL_DMA_Start_IT+0x48c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02c      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2d      	ldr	r2, [pc, #180]	; (800336c <HAL_DMA_Start_IT+0x490>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d027      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a2b      	ldr	r2, [pc, #172]	; (8003370 <HAL_DMA_Start_IT+0x494>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d022      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <HAL_DMA_Start_IT+0x498>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d01d      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a28      	ldr	r2, [pc, #160]	; (8003378 <HAL_DMA_Start_IT+0x49c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d018      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a27      	ldr	r2, [pc, #156]	; (800337c <HAL_DMA_Start_IT+0x4a0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a25      	ldr	r2, [pc, #148]	; (8003380 <HAL_DMA_Start_IT+0x4a4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00e      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a24      	ldr	r2, [pc, #144]	; (8003384 <HAL_DMA_Start_IT+0x4a8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <HAL_DMA_Start_IT+0x4ac>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_DMA_Start_IT+0x430>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a21      	ldr	r2, [pc, #132]	; (800338c <HAL_DMA_Start_IT+0x4b0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <HAL_DMA_Start_IT+0x442>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e012      	b.n	8003344 <HAL_DMA_Start_IT+0x468>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e009      	b.n	8003344 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800333e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003344:	7dfb      	ldrb	r3, [r7, #23]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40020010 	.word	0x40020010
 8003354:	40020028 	.word	0x40020028
 8003358:	40020040 	.word	0x40020040
 800335c:	40020058 	.word	0x40020058
 8003360:	40020070 	.word	0x40020070
 8003364:	40020088 	.word	0x40020088
 8003368:	400200a0 	.word	0x400200a0
 800336c:	400200b8 	.word	0x400200b8
 8003370:	40020410 	.word	0x40020410
 8003374:	40020428 	.word	0x40020428
 8003378:	40020440 	.word	0x40020440
 800337c:	40020458 	.word	0x40020458
 8003380:	40020470 	.word	0x40020470
 8003384:	40020488 	.word	0x40020488
 8003388:	400204a0 	.word	0x400204a0
 800338c:	400204b8 	.word	0x400204b8
 8003390:	58025408 	.word	0x58025408
 8003394:	5802541c 	.word	0x5802541c
 8003398:	58025430 	.word	0x58025430
 800339c:	58025444 	.word	0x58025444
 80033a0:	58025458 	.word	0x58025458
 80033a4:	5802546c 	.word	0x5802546c
 80033a8:	58025480 	.word	0x58025480
 80033ac:	58025494 	.word	0x58025494

080033b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff f8e8 	bl	800258c <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e2dc      	b.n	8003982 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d008      	beq.n	80033e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e2cd      	b.n	8003982 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a76      	ldr	r2, [pc, #472]	; (80035c4 <HAL_DMA_Abort+0x214>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d04a      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a74      	ldr	r2, [pc, #464]	; (80035c8 <HAL_DMA_Abort+0x218>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d045      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a73      	ldr	r2, [pc, #460]	; (80035cc <HAL_DMA_Abort+0x21c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d040      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a71      	ldr	r2, [pc, #452]	; (80035d0 <HAL_DMA_Abort+0x220>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d03b      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a70      	ldr	r2, [pc, #448]	; (80035d4 <HAL_DMA_Abort+0x224>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d036      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6e      	ldr	r2, [pc, #440]	; (80035d8 <HAL_DMA_Abort+0x228>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d031      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6d      	ldr	r2, [pc, #436]	; (80035dc <HAL_DMA_Abort+0x22c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d02c      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a6b      	ldr	r2, [pc, #428]	; (80035e0 <HAL_DMA_Abort+0x230>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d027      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6a      	ldr	r2, [pc, #424]	; (80035e4 <HAL_DMA_Abort+0x234>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d022      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	; (80035e8 <HAL_DMA_Abort+0x238>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01d      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a67      	ldr	r2, [pc, #412]	; (80035ec <HAL_DMA_Abort+0x23c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d018      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <HAL_DMA_Abort+0x240>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a64      	ldr	r2, [pc, #400]	; (80035f4 <HAL_DMA_Abort+0x244>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00e      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a62      	ldr	r2, [pc, #392]	; (80035f8 <HAL_DMA_Abort+0x248>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d009      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a61      	ldr	r2, [pc, #388]	; (80035fc <HAL_DMA_Abort+0x24c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d004      	beq.n	8003486 <HAL_DMA_Abort+0xd6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5f      	ldr	r2, [pc, #380]	; (8003600 <HAL_DMA_Abort+0x250>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <HAL_DMA_Abort+0xda>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_DMA_Abort+0xdc>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d013      	beq.n	80034b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 021e 	bic.w	r2, r2, #30
 800349e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	e00a      	b.n	80034ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 020e 	bic.w	r2, r2, #14
 80034c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a3c      	ldr	r2, [pc, #240]	; (80035c4 <HAL_DMA_Abort+0x214>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d072      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a3a      	ldr	r2, [pc, #232]	; (80035c8 <HAL_DMA_Abort+0x218>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d06d      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a39      	ldr	r2, [pc, #228]	; (80035cc <HAL_DMA_Abort+0x21c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d068      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <HAL_DMA_Abort+0x220>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d063      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a36      	ldr	r2, [pc, #216]	; (80035d4 <HAL_DMA_Abort+0x224>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d05e      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a34      	ldr	r2, [pc, #208]	; (80035d8 <HAL_DMA_Abort+0x228>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d059      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a33      	ldr	r2, [pc, #204]	; (80035dc <HAL_DMA_Abort+0x22c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d054      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a31      	ldr	r2, [pc, #196]	; (80035e0 <HAL_DMA_Abort+0x230>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d04f      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <HAL_DMA_Abort+0x234>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d04a      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2e      	ldr	r2, [pc, #184]	; (80035e8 <HAL_DMA_Abort+0x238>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d045      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a2d      	ldr	r2, [pc, #180]	; (80035ec <HAL_DMA_Abort+0x23c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d040      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a2b      	ldr	r2, [pc, #172]	; (80035f0 <HAL_DMA_Abort+0x240>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d03b      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2a      	ldr	r2, [pc, #168]	; (80035f4 <HAL_DMA_Abort+0x244>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d036      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <HAL_DMA_Abort+0x248>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d031      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a27      	ldr	r2, [pc, #156]	; (80035fc <HAL_DMA_Abort+0x24c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d02c      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a25      	ldr	r2, [pc, #148]	; (8003600 <HAL_DMA_Abort+0x250>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d027      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a24      	ldr	r2, [pc, #144]	; (8003604 <HAL_DMA_Abort+0x254>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a22      	ldr	r2, [pc, #136]	; (8003608 <HAL_DMA_Abort+0x258>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01d      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a21      	ldr	r2, [pc, #132]	; (800360c <HAL_DMA_Abort+0x25c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d018      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <HAL_DMA_Abort+0x260>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <HAL_DMA_Abort+0x264>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_DMA_Abort+0x268>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d009      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1b      	ldr	r2, [pc, #108]	; (800361c <HAL_DMA_Abort+0x26c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_DMA_Abort+0x20e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <HAL_DMA_Abort+0x270>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d132      	bne.n	8003624 <HAL_DMA_Abort+0x274>
 80035be:	2301      	movs	r3, #1
 80035c0:	e031      	b.n	8003626 <HAL_DMA_Abort+0x276>
 80035c2:	bf00      	nop
 80035c4:	40020010 	.word	0x40020010
 80035c8:	40020028 	.word	0x40020028
 80035cc:	40020040 	.word	0x40020040
 80035d0:	40020058 	.word	0x40020058
 80035d4:	40020070 	.word	0x40020070
 80035d8:	40020088 	.word	0x40020088
 80035dc:	400200a0 	.word	0x400200a0
 80035e0:	400200b8 	.word	0x400200b8
 80035e4:	40020410 	.word	0x40020410
 80035e8:	40020428 	.word	0x40020428
 80035ec:	40020440 	.word	0x40020440
 80035f0:	40020458 	.word	0x40020458
 80035f4:	40020470 	.word	0x40020470
 80035f8:	40020488 	.word	0x40020488
 80035fc:	400204a0 	.word	0x400204a0
 8003600:	400204b8 	.word	0x400204b8
 8003604:	58025408 	.word	0x58025408
 8003608:	5802541c 	.word	0x5802541c
 800360c:	58025430 	.word	0x58025430
 8003610:	58025444 	.word	0x58025444
 8003614:	58025458 	.word	0x58025458
 8003618:	5802546c 	.word	0x5802546c
 800361c:	58025480 	.word	0x58025480
 8003620:	58025494 	.word	0x58025494
 8003624:	2300      	movs	r3, #0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003638:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6d      	ldr	r2, [pc, #436]	; (80037f4 <HAL_DMA_Abort+0x444>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d04a      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a6b      	ldr	r2, [pc, #428]	; (80037f8 <HAL_DMA_Abort+0x448>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d045      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6a      	ldr	r2, [pc, #424]	; (80037fc <HAL_DMA_Abort+0x44c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d040      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a68      	ldr	r2, [pc, #416]	; (8003800 <HAL_DMA_Abort+0x450>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d03b      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a67      	ldr	r2, [pc, #412]	; (8003804 <HAL_DMA_Abort+0x454>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d036      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a65      	ldr	r2, [pc, #404]	; (8003808 <HAL_DMA_Abort+0x458>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d031      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a64      	ldr	r2, [pc, #400]	; (800380c <HAL_DMA_Abort+0x45c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d02c      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a62      	ldr	r2, [pc, #392]	; (8003810 <HAL_DMA_Abort+0x460>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d027      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a61      	ldr	r2, [pc, #388]	; (8003814 <HAL_DMA_Abort+0x464>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d022      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5f      	ldr	r2, [pc, #380]	; (8003818 <HAL_DMA_Abort+0x468>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d01d      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5e      	ldr	r2, [pc, #376]	; (800381c <HAL_DMA_Abort+0x46c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d018      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5c      	ldr	r2, [pc, #368]	; (8003820 <HAL_DMA_Abort+0x470>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a5b      	ldr	r2, [pc, #364]	; (8003824 <HAL_DMA_Abort+0x474>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00e      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a59      	ldr	r2, [pc, #356]	; (8003828 <HAL_DMA_Abort+0x478>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d009      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a58      	ldr	r2, [pc, #352]	; (800382c <HAL_DMA_Abort+0x47c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_DMA_Abort+0x32a>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a56      	ldr	r2, [pc, #344]	; (8003830 <HAL_DMA_Abort+0x480>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d108      	bne.n	80036ec <HAL_DMA_Abort+0x33c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0201 	bic.w	r2, r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e007      	b.n	80036fc <HAL_DMA_Abort+0x34c>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80036fc:	e013      	b.n	8003726 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036fe:	f7fe ff45 	bl	800258c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b05      	cmp	r3, #5
 800370a:	d90c      	bls.n	8003726 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2220      	movs	r2, #32
 8003710:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2203      	movs	r2, #3
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e12d      	b.n	8003982 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1e5      	bne.n	80036fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2f      	ldr	r2, [pc, #188]	; (80037f4 <HAL_DMA_Abort+0x444>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d04a      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2d      	ldr	r2, [pc, #180]	; (80037f8 <HAL_DMA_Abort+0x448>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d045      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2c      	ldr	r2, [pc, #176]	; (80037fc <HAL_DMA_Abort+0x44c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d040      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2a      	ldr	r2, [pc, #168]	; (8003800 <HAL_DMA_Abort+0x450>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d03b      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a29      	ldr	r2, [pc, #164]	; (8003804 <HAL_DMA_Abort+0x454>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d036      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_DMA_Abort+0x458>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d031      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a26      	ldr	r2, [pc, #152]	; (800380c <HAL_DMA_Abort+0x45c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d02c      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a24      	ldr	r2, [pc, #144]	; (8003810 <HAL_DMA_Abort+0x460>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d027      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a23      	ldr	r2, [pc, #140]	; (8003814 <HAL_DMA_Abort+0x464>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d022      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a21      	ldr	r2, [pc, #132]	; (8003818 <HAL_DMA_Abort+0x468>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01d      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a20      	ldr	r2, [pc, #128]	; (800381c <HAL_DMA_Abort+0x46c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d018      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <HAL_DMA_Abort+0x470>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_DMA_Abort+0x474>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <HAL_DMA_Abort+0x478>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a1a      	ldr	r2, [pc, #104]	; (800382c <HAL_DMA_Abort+0x47c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_DMA_Abort+0x422>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_DMA_Abort+0x480>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <HAL_DMA_Abort+0x426>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_DMA_Abort+0x428>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02b      	beq.n	8003834 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	f003 031f 	and.w	r3, r3, #31
 80037ea:	223f      	movs	r2, #63	; 0x3f
 80037ec:	409a      	lsls	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	e02a      	b.n	800384a <HAL_DMA_Abort+0x49a>
 80037f4:	40020010 	.word	0x40020010
 80037f8:	40020028 	.word	0x40020028
 80037fc:	40020040 	.word	0x40020040
 8003800:	40020058 	.word	0x40020058
 8003804:	40020070 	.word	0x40020070
 8003808:	40020088 	.word	0x40020088
 800380c:	400200a0 	.word	0x400200a0
 8003810:	400200b8 	.word	0x400200b8
 8003814:	40020410 	.word	0x40020410
 8003818:	40020428 	.word	0x40020428
 800381c:	40020440 	.word	0x40020440
 8003820:	40020458 	.word	0x40020458
 8003824:	40020470 	.word	0x40020470
 8003828:	40020488 	.word	0x40020488
 800382c:	400204a0 	.word	0x400204a0
 8003830:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2201      	movs	r2, #1
 8003844:	409a      	lsls	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a4f      	ldr	r2, [pc, #316]	; (800398c <HAL_DMA_Abort+0x5dc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d072      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a4d      	ldr	r2, [pc, #308]	; (8003990 <HAL_DMA_Abort+0x5e0>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d06d      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a4c      	ldr	r2, [pc, #304]	; (8003994 <HAL_DMA_Abort+0x5e4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d068      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a4a      	ldr	r2, [pc, #296]	; (8003998 <HAL_DMA_Abort+0x5e8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d063      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a49      	ldr	r2, [pc, #292]	; (800399c <HAL_DMA_Abort+0x5ec>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d05e      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a47      	ldr	r2, [pc, #284]	; (80039a0 <HAL_DMA_Abort+0x5f0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d059      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a46      	ldr	r2, [pc, #280]	; (80039a4 <HAL_DMA_Abort+0x5f4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d054      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a44      	ldr	r2, [pc, #272]	; (80039a8 <HAL_DMA_Abort+0x5f8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d04f      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a43      	ldr	r2, [pc, #268]	; (80039ac <HAL_DMA_Abort+0x5fc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d04a      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a41      	ldr	r2, [pc, #260]	; (80039b0 <HAL_DMA_Abort+0x600>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d045      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a40      	ldr	r2, [pc, #256]	; (80039b4 <HAL_DMA_Abort+0x604>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d040      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a3e      	ldr	r2, [pc, #248]	; (80039b8 <HAL_DMA_Abort+0x608>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d03b      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a3d      	ldr	r2, [pc, #244]	; (80039bc <HAL_DMA_Abort+0x60c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d036      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a3b      	ldr	r2, [pc, #236]	; (80039c0 <HAL_DMA_Abort+0x610>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d031      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a3a      	ldr	r2, [pc, #232]	; (80039c4 <HAL_DMA_Abort+0x614>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d02c      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a38      	ldr	r2, [pc, #224]	; (80039c8 <HAL_DMA_Abort+0x618>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d027      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a37      	ldr	r2, [pc, #220]	; (80039cc <HAL_DMA_Abort+0x61c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d022      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a35      	ldr	r2, [pc, #212]	; (80039d0 <HAL_DMA_Abort+0x620>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01d      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a34      	ldr	r2, [pc, #208]	; (80039d4 <HAL_DMA_Abort+0x624>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d018      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <HAL_DMA_Abort+0x628>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a31      	ldr	r2, [pc, #196]	; (80039dc <HAL_DMA_Abort+0x62c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2f      	ldr	r2, [pc, #188]	; (80039e0 <HAL_DMA_Abort+0x630>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a2e      	ldr	r2, [pc, #184]	; (80039e4 <HAL_DMA_Abort+0x634>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <HAL_DMA_Abort+0x58a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a2c      	ldr	r2, [pc, #176]	; (80039e8 <HAL_DMA_Abort+0x638>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <HAL_DMA_Abort+0x58e>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_DMA_Abort+0x590>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d015      	beq.n	8003970 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800394c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00c      	beq.n	8003970 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003964:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800396e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40020010 	.word	0x40020010
 8003990:	40020028 	.word	0x40020028
 8003994:	40020040 	.word	0x40020040
 8003998:	40020058 	.word	0x40020058
 800399c:	40020070 	.word	0x40020070
 80039a0:	40020088 	.word	0x40020088
 80039a4:	400200a0 	.word	0x400200a0
 80039a8:	400200b8 	.word	0x400200b8
 80039ac:	40020410 	.word	0x40020410
 80039b0:	40020428 	.word	0x40020428
 80039b4:	40020440 	.word	0x40020440
 80039b8:	40020458 	.word	0x40020458
 80039bc:	40020470 	.word	0x40020470
 80039c0:	40020488 	.word	0x40020488
 80039c4:	400204a0 	.word	0x400204a0
 80039c8:	400204b8 	.word	0x400204b8
 80039cc:	58025408 	.word	0x58025408
 80039d0:	5802541c 	.word	0x5802541c
 80039d4:	58025430 	.word	0x58025430
 80039d8:	58025444 	.word	0x58025444
 80039dc:	58025458 	.word	0x58025458
 80039e0:	5802546c 	.word	0x5802546c
 80039e4:	58025480 	.word	0x58025480
 80039e8:	58025494 	.word	0x58025494

080039ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e205      	b.n	8003e0a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d004      	beq.n	8003a14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2280      	movs	r2, #128	; 0x80
 8003a0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e1fa      	b.n	8003e0a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a8c      	ldr	r2, [pc, #560]	; (8003c4c <HAL_DMA_Abort_IT+0x260>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d04a      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a8b      	ldr	r2, [pc, #556]	; (8003c50 <HAL_DMA_Abort_IT+0x264>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d045      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a89      	ldr	r2, [pc, #548]	; (8003c54 <HAL_DMA_Abort_IT+0x268>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d040      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a88      	ldr	r2, [pc, #544]	; (8003c58 <HAL_DMA_Abort_IT+0x26c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d03b      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a86      	ldr	r2, [pc, #536]	; (8003c5c <HAL_DMA_Abort_IT+0x270>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d036      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a85      	ldr	r2, [pc, #532]	; (8003c60 <HAL_DMA_Abort_IT+0x274>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d031      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a83      	ldr	r2, [pc, #524]	; (8003c64 <HAL_DMA_Abort_IT+0x278>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d02c      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a82      	ldr	r2, [pc, #520]	; (8003c68 <HAL_DMA_Abort_IT+0x27c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d027      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a80      	ldr	r2, [pc, #512]	; (8003c6c <HAL_DMA_Abort_IT+0x280>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d022      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a7f      	ldr	r2, [pc, #508]	; (8003c70 <HAL_DMA_Abort_IT+0x284>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d01d      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a7d      	ldr	r2, [pc, #500]	; (8003c74 <HAL_DMA_Abort_IT+0x288>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d018      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7c      	ldr	r2, [pc, #496]	; (8003c78 <HAL_DMA_Abort_IT+0x28c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a7a      	ldr	r2, [pc, #488]	; (8003c7c <HAL_DMA_Abort_IT+0x290>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00e      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a79      	ldr	r2, [pc, #484]	; (8003c80 <HAL_DMA_Abort_IT+0x294>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d009      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a77      	ldr	r2, [pc, #476]	; (8003c84 <HAL_DMA_Abort_IT+0x298>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_DMA_Abort_IT+0xc8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a76      	ldr	r2, [pc, #472]	; (8003c88 <HAL_DMA_Abort_IT+0x29c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d101      	bne.n	8003ab8 <HAL_DMA_Abort_IT+0xcc>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_DMA_Abort_IT+0xce>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d065      	beq.n	8003b8a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a60      	ldr	r2, [pc, #384]	; (8003c4c <HAL_DMA_Abort_IT+0x260>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04a      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a5e      	ldr	r2, [pc, #376]	; (8003c50 <HAL_DMA_Abort_IT+0x264>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d045      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a5d      	ldr	r2, [pc, #372]	; (8003c54 <HAL_DMA_Abort_IT+0x268>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d040      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a5b      	ldr	r2, [pc, #364]	; (8003c58 <HAL_DMA_Abort_IT+0x26c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d03b      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a5a      	ldr	r2, [pc, #360]	; (8003c5c <HAL_DMA_Abort_IT+0x270>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d036      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a58      	ldr	r2, [pc, #352]	; (8003c60 <HAL_DMA_Abort_IT+0x274>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d031      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a57      	ldr	r2, [pc, #348]	; (8003c64 <HAL_DMA_Abort_IT+0x278>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d02c      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a55      	ldr	r2, [pc, #340]	; (8003c68 <HAL_DMA_Abort_IT+0x27c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d027      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a54      	ldr	r2, [pc, #336]	; (8003c6c <HAL_DMA_Abort_IT+0x280>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d022      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a52      	ldr	r2, [pc, #328]	; (8003c70 <HAL_DMA_Abort_IT+0x284>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01d      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a51      	ldr	r2, [pc, #324]	; (8003c74 <HAL_DMA_Abort_IT+0x288>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d018      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a4f      	ldr	r2, [pc, #316]	; (8003c78 <HAL_DMA_Abort_IT+0x28c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a4e      	ldr	r2, [pc, #312]	; (8003c7c <HAL_DMA_Abort_IT+0x290>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00e      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a4c      	ldr	r2, [pc, #304]	; (8003c80 <HAL_DMA_Abort_IT+0x294>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a4b      	ldr	r2, [pc, #300]	; (8003c84 <HAL_DMA_Abort_IT+0x298>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_DMA_Abort_IT+0x17a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a49      	ldr	r2, [pc, #292]	; (8003c88 <HAL_DMA_Abort_IT+0x29c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d108      	bne.n	8003b78 <HAL_DMA_Abort_IT+0x18c>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e147      	b.n	8003e08 <HAL_DMA_Abort_IT+0x41c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	e13e      	b.n	8003e08 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 020e 	bic.w	r2, r2, #14
 8003b98:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2b      	ldr	r2, [pc, #172]	; (8003c4c <HAL_DMA_Abort_IT+0x260>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d04a      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a29      	ldr	r2, [pc, #164]	; (8003c50 <HAL_DMA_Abort_IT+0x264>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d045      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a28      	ldr	r2, [pc, #160]	; (8003c54 <HAL_DMA_Abort_IT+0x268>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d040      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <HAL_DMA_Abort_IT+0x26c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d03b      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a25      	ldr	r2, [pc, #148]	; (8003c5c <HAL_DMA_Abort_IT+0x270>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d036      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <HAL_DMA_Abort_IT+0x274>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d031      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a22      	ldr	r2, [pc, #136]	; (8003c64 <HAL_DMA_Abort_IT+0x278>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d02c      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a20      	ldr	r2, [pc, #128]	; (8003c68 <HAL_DMA_Abort_IT+0x27c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d027      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1f      	ldr	r2, [pc, #124]	; (8003c6c <HAL_DMA_Abort_IT+0x280>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <HAL_DMA_Abort_IT+0x284>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01d      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1c      	ldr	r2, [pc, #112]	; (8003c74 <HAL_DMA_Abort_IT+0x288>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1a      	ldr	r2, [pc, #104]	; (8003c78 <HAL_DMA_Abort_IT+0x28c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a19      	ldr	r2, [pc, #100]	; (8003c7c <HAL_DMA_Abort_IT+0x290>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <HAL_DMA_Abort_IT+0x294>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <HAL_DMA_Abort_IT+0x298>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x24e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <HAL_DMA_Abort_IT+0x29c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d128      	bne.n	8003c8c <HAL_DMA_Abort_IT+0x2a0>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e027      	b.n	8003c9c <HAL_DMA_Abort_IT+0x2b0>
 8003c4c:	40020010 	.word	0x40020010
 8003c50:	40020028 	.word	0x40020028
 8003c54:	40020040 	.word	0x40020040
 8003c58:	40020058 	.word	0x40020058
 8003c5c:	40020070 	.word	0x40020070
 8003c60:	40020088 	.word	0x40020088
 8003c64:	400200a0 	.word	0x400200a0
 8003c68:	400200b8 	.word	0x400200b8
 8003c6c:	40020410 	.word	0x40020410
 8003c70:	40020428 	.word	0x40020428
 8003c74:	40020440 	.word	0x40020440
 8003c78:	40020458 	.word	0x40020458
 8003c7c:	40020470 	.word	0x40020470
 8003c80:	40020488 	.word	0x40020488
 8003c84:	400204a0 	.word	0x400204a0
 8003c88:	400204b8 	.word	0x400204b8
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0201 	bic.w	r2, r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5c      	ldr	r2, [pc, #368]	; (8003e14 <HAL_DMA_Abort_IT+0x428>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d072      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a5b      	ldr	r2, [pc, #364]	; (8003e18 <HAL_DMA_Abort_IT+0x42c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d06d      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a59      	ldr	r2, [pc, #356]	; (8003e1c <HAL_DMA_Abort_IT+0x430>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d068      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a58      	ldr	r2, [pc, #352]	; (8003e20 <HAL_DMA_Abort_IT+0x434>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d063      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a56      	ldr	r2, [pc, #344]	; (8003e24 <HAL_DMA_Abort_IT+0x438>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d05e      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a55      	ldr	r2, [pc, #340]	; (8003e28 <HAL_DMA_Abort_IT+0x43c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d059      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a53      	ldr	r2, [pc, #332]	; (8003e2c <HAL_DMA_Abort_IT+0x440>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d054      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a52      	ldr	r2, [pc, #328]	; (8003e30 <HAL_DMA_Abort_IT+0x444>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d04f      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a50      	ldr	r2, [pc, #320]	; (8003e34 <HAL_DMA_Abort_IT+0x448>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d04a      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4f      	ldr	r2, [pc, #316]	; (8003e38 <HAL_DMA_Abort_IT+0x44c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d045      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a4d      	ldr	r2, [pc, #308]	; (8003e3c <HAL_DMA_Abort_IT+0x450>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d040      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4c      	ldr	r2, [pc, #304]	; (8003e40 <HAL_DMA_Abort_IT+0x454>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d03b      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a4a      	ldr	r2, [pc, #296]	; (8003e44 <HAL_DMA_Abort_IT+0x458>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d036      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a49      	ldr	r2, [pc, #292]	; (8003e48 <HAL_DMA_Abort_IT+0x45c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d031      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a47      	ldr	r2, [pc, #284]	; (8003e4c <HAL_DMA_Abort_IT+0x460>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d02c      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a46      	ldr	r2, [pc, #280]	; (8003e50 <HAL_DMA_Abort_IT+0x464>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d027      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a44      	ldr	r2, [pc, #272]	; (8003e54 <HAL_DMA_Abort_IT+0x468>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d022      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a43      	ldr	r2, [pc, #268]	; (8003e58 <HAL_DMA_Abort_IT+0x46c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d01d      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a41      	ldr	r2, [pc, #260]	; (8003e5c <HAL_DMA_Abort_IT+0x470>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d018      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a40      	ldr	r2, [pc, #256]	; (8003e60 <HAL_DMA_Abort_IT+0x474>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d013      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a3e      	ldr	r2, [pc, #248]	; (8003e64 <HAL_DMA_Abort_IT+0x478>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00e      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a3d      	ldr	r2, [pc, #244]	; (8003e68 <HAL_DMA_Abort_IT+0x47c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d009      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <HAL_DMA_Abort_IT+0x480>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d004      	beq.n	8003d8c <HAL_DMA_Abort_IT+0x3a0>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a3a      	ldr	r2, [pc, #232]	; (8003e70 <HAL_DMA_Abort_IT+0x484>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d101      	bne.n	8003d90 <HAL_DMA_Abort_IT+0x3a4>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <HAL_DMA_Abort_IT+0x3a6>
 8003d90:	2300      	movs	r3, #0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d028      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003da4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003dc4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00c      	beq.n	8003de8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ddc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003de6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	58025408 	.word	0x58025408
 8003e58:	5802541c 	.word	0x5802541c
 8003e5c:	58025430 	.word	0x58025430
 8003e60:	58025444 	.word	0x58025444
 8003e64:	58025458 	.word	0x58025458
 8003e68:	5802546c 	.word	0x5802546c
 8003e6c:	58025480 	.word	0x58025480
 8003e70:	58025494 	.word	0x58025494

08003e74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e80:	4b67      	ldr	r3, [pc, #412]	; (8004020 <HAL_DMA_IRQHandler+0x1ac>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a67      	ldr	r2, [pc, #412]	; (8004024 <HAL_DMA_IRQHandler+0x1b0>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	0a9b      	lsrs	r3, r3, #10
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e98:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a5f      	ldr	r2, [pc, #380]	; (8004028 <HAL_DMA_IRQHandler+0x1b4>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d04a      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a5d      	ldr	r2, [pc, #372]	; (800402c <HAL_DMA_IRQHandler+0x1b8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d045      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a5c      	ldr	r2, [pc, #368]	; (8004030 <HAL_DMA_IRQHandler+0x1bc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d040      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a5a      	ldr	r2, [pc, #360]	; (8004034 <HAL_DMA_IRQHandler+0x1c0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d03b      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a59      	ldr	r2, [pc, #356]	; (8004038 <HAL_DMA_IRQHandler+0x1c4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d036      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a57      	ldr	r2, [pc, #348]	; (800403c <HAL_DMA_IRQHandler+0x1c8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d031      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a56      	ldr	r2, [pc, #344]	; (8004040 <HAL_DMA_IRQHandler+0x1cc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d02c      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a54      	ldr	r2, [pc, #336]	; (8004044 <HAL_DMA_IRQHandler+0x1d0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d027      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a53      	ldr	r2, [pc, #332]	; (8004048 <HAL_DMA_IRQHandler+0x1d4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d022      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a51      	ldr	r2, [pc, #324]	; (800404c <HAL_DMA_IRQHandler+0x1d8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01d      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a50      	ldr	r2, [pc, #320]	; (8004050 <HAL_DMA_IRQHandler+0x1dc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d018      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a4e      	ldr	r2, [pc, #312]	; (8004054 <HAL_DMA_IRQHandler+0x1e0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a4d      	ldr	r2, [pc, #308]	; (8004058 <HAL_DMA_IRQHandler+0x1e4>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a4b      	ldr	r2, [pc, #300]	; (800405c <HAL_DMA_IRQHandler+0x1e8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a4a      	ldr	r2, [pc, #296]	; (8004060 <HAL_DMA_IRQHandler+0x1ec>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xd2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a48      	ldr	r2, [pc, #288]	; (8004064 <HAL_DMA_IRQHandler+0x1f0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d101      	bne.n	8003f4a <HAL_DMA_IRQHandler+0xd6>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_DMA_IRQHandler+0xd8>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 842b 	beq.w	80047a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f56:	f003 031f 	and.w	r3, r3, #31
 8003f5a:	2208      	movs	r2, #8
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 80a2 	beq.w	80040ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a2e      	ldr	r2, [pc, #184]	; (8004028 <HAL_DMA_IRQHandler+0x1b4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d04a      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2d      	ldr	r2, [pc, #180]	; (800402c <HAL_DMA_IRQHandler+0x1b8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d045      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2b      	ldr	r2, [pc, #172]	; (8004030 <HAL_DMA_IRQHandler+0x1bc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d040      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a2a      	ldr	r2, [pc, #168]	; (8004034 <HAL_DMA_IRQHandler+0x1c0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d03b      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a28      	ldr	r2, [pc, #160]	; (8004038 <HAL_DMA_IRQHandler+0x1c4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d036      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a27      	ldr	r2, [pc, #156]	; (800403c <HAL_DMA_IRQHandler+0x1c8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d031      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a25      	ldr	r2, [pc, #148]	; (8004040 <HAL_DMA_IRQHandler+0x1cc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d02c      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a24      	ldr	r2, [pc, #144]	; (8004044 <HAL_DMA_IRQHandler+0x1d0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d027      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a22      	ldr	r2, [pc, #136]	; (8004048 <HAL_DMA_IRQHandler+0x1d4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d022      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a21      	ldr	r2, [pc, #132]	; (800404c <HAL_DMA_IRQHandler+0x1d8>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01d      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <HAL_DMA_IRQHandler+0x1dc>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d018      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_DMA_IRQHandler+0x1e0>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <HAL_DMA_IRQHandler+0x1e4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1b      	ldr	r2, [pc, #108]	; (800405c <HAL_DMA_IRQHandler+0x1e8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d009      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_DMA_IRQHandler+0x1ec>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_DMA_IRQHandler+0x194>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a18      	ldr	r2, [pc, #96]	; (8004064 <HAL_DMA_IRQHandler+0x1f0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d12f      	bne.n	8004068 <HAL_DMA_IRQHandler+0x1f4>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	bf14      	ite	ne
 8004016:	2301      	movne	r3, #1
 8004018:	2300      	moveq	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	e02e      	b.n	800407c <HAL_DMA_IRQHandler+0x208>
 800401e:	bf00      	nop
 8004020:	24000010 	.word	0x24000010
 8004024:	1b4e81b5 	.word	0x1b4e81b5
 8004028:	40020010 	.word	0x40020010
 800402c:	40020028 	.word	0x40020028
 8004030:	40020040 	.word	0x40020040
 8004034:	40020058 	.word	0x40020058
 8004038:	40020070 	.word	0x40020070
 800403c:	40020088 	.word	0x40020088
 8004040:	400200a0 	.word	0x400200a0
 8004044:	400200b8 	.word	0x400200b8
 8004048:	40020410 	.word	0x40020410
 800404c:	40020428 	.word	0x40020428
 8004050:	40020440 	.word	0x40020440
 8004054:	40020458 	.word	0x40020458
 8004058:	40020470 	.word	0x40020470
 800405c:	40020488 	.word	0x40020488
 8004060:	400204a0 	.word	0x400204a0
 8004064:	400204b8 	.word	0x400204b8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	bf14      	ite	ne
 8004076:	2301      	movne	r3, #1
 8004078:	2300      	moveq	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0204 	bic.w	r2, r2, #4
 800408e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2208      	movs	r2, #8
 800409a:	409a      	lsls	r2, r3
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	f043 0201 	orr.w	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	f003 031f 	and.w	r3, r3, #31
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d06e      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a69      	ldr	r2, [pc, #420]	; (800426c <HAL_DMA_IRQHandler+0x3f8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d04a      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a67      	ldr	r2, [pc, #412]	; (8004270 <HAL_DMA_IRQHandler+0x3fc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d045      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a66      	ldr	r2, [pc, #408]	; (8004274 <HAL_DMA_IRQHandler+0x400>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d040      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a64      	ldr	r2, [pc, #400]	; (8004278 <HAL_DMA_IRQHandler+0x404>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d03b      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a63      	ldr	r2, [pc, #396]	; (800427c <HAL_DMA_IRQHandler+0x408>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d036      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a61      	ldr	r2, [pc, #388]	; (8004280 <HAL_DMA_IRQHandler+0x40c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d031      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a60      	ldr	r2, [pc, #384]	; (8004284 <HAL_DMA_IRQHandler+0x410>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d02c      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a5e      	ldr	r2, [pc, #376]	; (8004288 <HAL_DMA_IRQHandler+0x414>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d027      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a5d      	ldr	r2, [pc, #372]	; (800428c <HAL_DMA_IRQHandler+0x418>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d022      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a5b      	ldr	r2, [pc, #364]	; (8004290 <HAL_DMA_IRQHandler+0x41c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01d      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a5a      	ldr	r2, [pc, #360]	; (8004294 <HAL_DMA_IRQHandler+0x420>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d018      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a58      	ldr	r2, [pc, #352]	; (8004298 <HAL_DMA_IRQHandler+0x424>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a57      	ldr	r2, [pc, #348]	; (800429c <HAL_DMA_IRQHandler+0x428>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00e      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a55      	ldr	r2, [pc, #340]	; (80042a0 <HAL_DMA_IRQHandler+0x42c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d009      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a54      	ldr	r2, [pc, #336]	; (80042a4 <HAL_DMA_IRQHandler+0x430>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_DMA_IRQHandler+0x2ee>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a52      	ldr	r2, [pc, #328]	; (80042a8 <HAL_DMA_IRQHandler+0x434>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d10a      	bne.n	8004178 <HAL_DMA_IRQHandler+0x304>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e003      	b.n	8004180 <HAL_DMA_IRQHandler+0x30c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2201      	movs	r2, #1
 800418e:	409a      	lsls	r2, r3
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f043 0202 	orr.w	r2, r3, #2
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2204      	movs	r2, #4
 80041aa:	409a      	lsls	r2, r3
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 808f 	beq.w	80042d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2c      	ldr	r2, [pc, #176]	; (800426c <HAL_DMA_IRQHandler+0x3f8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d04a      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2a      	ldr	r2, [pc, #168]	; (8004270 <HAL_DMA_IRQHandler+0x3fc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d045      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a29      	ldr	r2, [pc, #164]	; (8004274 <HAL_DMA_IRQHandler+0x400>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d040      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a27      	ldr	r2, [pc, #156]	; (8004278 <HAL_DMA_IRQHandler+0x404>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d03b      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a26      	ldr	r2, [pc, #152]	; (800427c <HAL_DMA_IRQHandler+0x408>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d036      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a24      	ldr	r2, [pc, #144]	; (8004280 <HAL_DMA_IRQHandler+0x40c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d031      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a23      	ldr	r2, [pc, #140]	; (8004284 <HAL_DMA_IRQHandler+0x410>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d02c      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a21      	ldr	r2, [pc, #132]	; (8004288 <HAL_DMA_IRQHandler+0x414>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d027      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a20      	ldr	r2, [pc, #128]	; (800428c <HAL_DMA_IRQHandler+0x418>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <HAL_DMA_IRQHandler+0x41c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01d      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <HAL_DMA_IRQHandler+0x420>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d018      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1b      	ldr	r2, [pc, #108]	; (8004298 <HAL_DMA_IRQHandler+0x424>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1a      	ldr	r2, [pc, #104]	; (800429c <HAL_DMA_IRQHandler+0x428>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00e      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_DMA_IRQHandler+0x42c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a17      	ldr	r2, [pc, #92]	; (80042a4 <HAL_DMA_IRQHandler+0x430>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d004      	beq.n	8004256 <HAL_DMA_IRQHandler+0x3e2>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <HAL_DMA_IRQHandler+0x434>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d12a      	bne.n	80042ac <HAL_DMA_IRQHandler+0x438>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	bf14      	ite	ne
 8004264:	2301      	movne	r3, #1
 8004266:	2300      	moveq	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	e023      	b.n	80042b4 <HAL_DMA_IRQHandler+0x440>
 800426c:	40020010 	.word	0x40020010
 8004270:	40020028 	.word	0x40020028
 8004274:	40020040 	.word	0x40020040
 8004278:	40020058 	.word	0x40020058
 800427c:	40020070 	.word	0x40020070
 8004280:	40020088 	.word	0x40020088
 8004284:	400200a0 	.word	0x400200a0
 8004288:	400200b8 	.word	0x400200b8
 800428c:	40020410 	.word	0x40020410
 8004290:	40020428 	.word	0x40020428
 8004294:	40020440 	.word	0x40020440
 8004298:	40020458 	.word	0x40020458
 800429c:	40020470 	.word	0x40020470
 80042a0:	40020488 	.word	0x40020488
 80042a4:	400204a0 	.word	0x400204a0
 80042a8:	400204b8 	.word	0x400204b8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2204      	movs	r2, #4
 80042c2:	409a      	lsls	r2, r3
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	f043 0204 	orr.w	r2, r3, #4
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	2210      	movs	r2, #16
 80042de:	409a      	lsls	r2, r3
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a6 	beq.w	8004436 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a85      	ldr	r2, [pc, #532]	; (8004504 <HAL_DMA_IRQHandler+0x690>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d04a      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a83      	ldr	r2, [pc, #524]	; (8004508 <HAL_DMA_IRQHandler+0x694>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d045      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a82      	ldr	r2, [pc, #520]	; (800450c <HAL_DMA_IRQHandler+0x698>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d040      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a80      	ldr	r2, [pc, #512]	; (8004510 <HAL_DMA_IRQHandler+0x69c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d03b      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a7f      	ldr	r2, [pc, #508]	; (8004514 <HAL_DMA_IRQHandler+0x6a0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d036      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a7d      	ldr	r2, [pc, #500]	; (8004518 <HAL_DMA_IRQHandler+0x6a4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d031      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7c      	ldr	r2, [pc, #496]	; (800451c <HAL_DMA_IRQHandler+0x6a8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d02c      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a7a      	ldr	r2, [pc, #488]	; (8004520 <HAL_DMA_IRQHandler+0x6ac>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d027      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a79      	ldr	r2, [pc, #484]	; (8004524 <HAL_DMA_IRQHandler+0x6b0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a77      	ldr	r2, [pc, #476]	; (8004528 <HAL_DMA_IRQHandler+0x6b4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d01d      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a76      	ldr	r2, [pc, #472]	; (800452c <HAL_DMA_IRQHandler+0x6b8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d018      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a74      	ldr	r2, [pc, #464]	; (8004530 <HAL_DMA_IRQHandler+0x6bc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d013      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a73      	ldr	r2, [pc, #460]	; (8004534 <HAL_DMA_IRQHandler+0x6c0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a71      	ldr	r2, [pc, #452]	; (8004538 <HAL_DMA_IRQHandler+0x6c4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a70      	ldr	r2, [pc, #448]	; (800453c <HAL_DMA_IRQHandler+0x6c8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_DMA_IRQHandler+0x516>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a6e      	ldr	r2, [pc, #440]	; (8004540 <HAL_DMA_IRQHandler+0x6cc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10a      	bne.n	80043a0 <HAL_DMA_IRQHandler+0x52c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e009      	b.n	80043b4 <HAL_DMA_IRQHandler+0x540>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	bf14      	ite	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	2300      	moveq	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d03e      	beq.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043bc:	f003 031f 	and.w	r3, r3, #31
 80043c0:	2210      	movs	r2, #16
 80043c2:	409a      	lsls	r2, r3
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d018      	beq.n	8004408 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d108      	bne.n	80043f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d024      	beq.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
 80043f4:	e01f      	b.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01b      	beq.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
 8004406:	e016      	b.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d107      	bne.n	8004426 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0208 	bic.w	r2, r2, #8
 8004424:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2220      	movs	r2, #32
 8004440:	409a      	lsls	r2, r3
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4013      	ands	r3, r2
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8110 	beq.w	800466c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <HAL_DMA_IRQHandler+0x690>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d04a      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2b      	ldr	r2, [pc, #172]	; (8004508 <HAL_DMA_IRQHandler+0x694>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d045      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a29      	ldr	r2, [pc, #164]	; (800450c <HAL_DMA_IRQHandler+0x698>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d040      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a28      	ldr	r2, [pc, #160]	; (8004510 <HAL_DMA_IRQHandler+0x69c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d03b      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a26      	ldr	r2, [pc, #152]	; (8004514 <HAL_DMA_IRQHandler+0x6a0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d036      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a25      	ldr	r2, [pc, #148]	; (8004518 <HAL_DMA_IRQHandler+0x6a4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d031      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a23      	ldr	r2, [pc, #140]	; (800451c <HAL_DMA_IRQHandler+0x6a8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d02c      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a22      	ldr	r2, [pc, #136]	; (8004520 <HAL_DMA_IRQHandler+0x6ac>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d027      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a20      	ldr	r2, [pc, #128]	; (8004524 <HAL_DMA_IRQHandler+0x6b0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d022      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <HAL_DMA_IRQHandler+0x6b4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d01d      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1d      	ldr	r2, [pc, #116]	; (800452c <HAL_DMA_IRQHandler+0x6b8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1c      	ldr	r2, [pc, #112]	; (8004530 <HAL_DMA_IRQHandler+0x6bc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <HAL_DMA_IRQHandler+0x6c0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a19      	ldr	r2, [pc, #100]	; (8004538 <HAL_DMA_IRQHandler+0x6c4>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a17      	ldr	r2, [pc, #92]	; (800453c <HAL_DMA_IRQHandler+0x6c8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_DMA_IRQHandler+0x678>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a16      	ldr	r2, [pc, #88]	; (8004540 <HAL_DMA_IRQHandler+0x6cc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d12b      	bne.n	8004544 <HAL_DMA_IRQHandler+0x6d0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	bf14      	ite	ne
 80044fa:	2301      	movne	r3, #1
 80044fc:	2300      	moveq	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	e02a      	b.n	8004558 <HAL_DMA_IRQHandler+0x6e4>
 8004502:	bf00      	nop
 8004504:	40020010 	.word	0x40020010
 8004508:	40020028 	.word	0x40020028
 800450c:	40020040 	.word	0x40020040
 8004510:	40020058 	.word	0x40020058
 8004514:	40020070 	.word	0x40020070
 8004518:	40020088 	.word	0x40020088
 800451c:	400200a0 	.word	0x400200a0
 8004520:	400200b8 	.word	0x400200b8
 8004524:	40020410 	.word	0x40020410
 8004528:	40020428 	.word	0x40020428
 800452c:	40020440 	.word	0x40020440
 8004530:	40020458 	.word	0x40020458
 8004534:	40020470 	.word	0x40020470
 8004538:	40020488 	.word	0x40020488
 800453c:	400204a0 	.word	0x400204a0
 8004540:	400204b8 	.word	0x400204b8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8087 	beq.w	800466c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	2220      	movs	r2, #32
 8004568:	409a      	lsls	r2, r3
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b04      	cmp	r3, #4
 8004578:	d139      	bne.n	80045ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0216 	bic.w	r2, r2, #22
 8004588:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004598:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d103      	bne.n	80045aa <HAL_DMA_IRQHandler+0x736>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0208 	bic.w	r2, r2, #8
 80045b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	f003 031f 	and.w	r3, r3, #31
 80045c2:	223f      	movs	r2, #63	; 0x3f
 80045c4:	409a      	lsls	r2, r3
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 834a 	beq.w	8004c78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
          }
          return;
 80045ec:	e344      	b.n	8004c78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d018      	beq.n	800462e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d108      	bne.n	800461c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	2b00      	cmp	r3, #0
 8004610:	d02c      	beq.n	800466c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	4798      	blx	r3
 800461a:	e027      	b.n	800466c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d023      	beq.n	800466c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
 800462c:	e01e      	b.n	800466c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10f      	bne.n	800465c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0210 	bic.w	r2, r2, #16
 800464a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d003      	beq.n	800466c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8306 	beq.w	8004c82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8088 	beq.w	8004794 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2204      	movs	r2, #4
 8004688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a7a      	ldr	r2, [pc, #488]	; (800487c <HAL_DMA_IRQHandler+0xa08>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d04a      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a79      	ldr	r2, [pc, #484]	; (8004880 <HAL_DMA_IRQHandler+0xa0c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d045      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a77      	ldr	r2, [pc, #476]	; (8004884 <HAL_DMA_IRQHandler+0xa10>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d040      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a76      	ldr	r2, [pc, #472]	; (8004888 <HAL_DMA_IRQHandler+0xa14>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d03b      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a74      	ldr	r2, [pc, #464]	; (800488c <HAL_DMA_IRQHandler+0xa18>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d036      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a73      	ldr	r2, [pc, #460]	; (8004890 <HAL_DMA_IRQHandler+0xa1c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d031      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a71      	ldr	r2, [pc, #452]	; (8004894 <HAL_DMA_IRQHandler+0xa20>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d02c      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a70      	ldr	r2, [pc, #448]	; (8004898 <HAL_DMA_IRQHandler+0xa24>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d027      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a6e      	ldr	r2, [pc, #440]	; (800489c <HAL_DMA_IRQHandler+0xa28>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d022      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a6d      	ldr	r2, [pc, #436]	; (80048a0 <HAL_DMA_IRQHandler+0xa2c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d01d      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a6b      	ldr	r2, [pc, #428]	; (80048a4 <HAL_DMA_IRQHandler+0xa30>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d018      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a6a      	ldr	r2, [pc, #424]	; (80048a8 <HAL_DMA_IRQHandler+0xa34>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d013      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a68      	ldr	r2, [pc, #416]	; (80048ac <HAL_DMA_IRQHandler+0xa38>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00e      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a67      	ldr	r2, [pc, #412]	; (80048b0 <HAL_DMA_IRQHandler+0xa3c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d009      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a65      	ldr	r2, [pc, #404]	; (80048b4 <HAL_DMA_IRQHandler+0xa40>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_DMA_IRQHandler+0x8b8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a64      	ldr	r2, [pc, #400]	; (80048b8 <HAL_DMA_IRQHandler+0xa44>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d108      	bne.n	800473e <HAL_DMA_IRQHandler+0x8ca>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	e007      	b.n	800474e <HAL_DMA_IRQHandler+0x8da>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3301      	adds	r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	429a      	cmp	r2, r3
 8004758:	d307      	bcc.n	800476a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f2      	bne.n	800474e <HAL_DMA_IRQHandler+0x8da>
 8004768:	e000      	b.n	800476c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800476a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d004      	beq.n	800478c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2203      	movs	r2, #3
 8004786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800478a:	e003      	b.n	8004794 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8272 	beq.w	8004c82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
 80047a6:	e26c      	b.n	8004c82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a43      	ldr	r2, [pc, #268]	; (80048bc <HAL_DMA_IRQHandler+0xa48>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d022      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a42      	ldr	r2, [pc, #264]	; (80048c0 <HAL_DMA_IRQHandler+0xa4c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d01d      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a40      	ldr	r2, [pc, #256]	; (80048c4 <HAL_DMA_IRQHandler+0xa50>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a3f      	ldr	r2, [pc, #252]	; (80048c8 <HAL_DMA_IRQHandler+0xa54>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a3d      	ldr	r2, [pc, #244]	; (80048cc <HAL_DMA_IRQHandler+0xa58>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a3c      	ldr	r2, [pc, #240]	; (80048d0 <HAL_DMA_IRQHandler+0xa5c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3a      	ldr	r2, [pc, #232]	; (80048d4 <HAL_DMA_IRQHandler+0xa60>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x984>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a39      	ldr	r2, [pc, #228]	; (80048d8 <HAL_DMA_IRQHandler+0xa64>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d101      	bne.n	80047fc <HAL_DMA_IRQHandler+0x988>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <HAL_DMA_IRQHandler+0x98a>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f000 823f 	beq.w	8004c82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	2204      	movs	r2, #4
 8004816:	409a      	lsls	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80cd 	beq.w	80049bc <HAL_DMA_IRQHandler+0xb48>
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80c7 	beq.w	80049bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2204      	movs	r2, #4
 8004838:	409a      	lsls	r2, r3
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d049      	beq.n	80048dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8210 	beq.w	8004c7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004864:	e20a      	b.n	8004c7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8206 	beq.w	8004c7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004878:	e200      	b.n	8004c7c <HAL_DMA_IRQHandler+0xe08>
 800487a:	bf00      	nop
 800487c:	40020010 	.word	0x40020010
 8004880:	40020028 	.word	0x40020028
 8004884:	40020040 	.word	0x40020040
 8004888:	40020058 	.word	0x40020058
 800488c:	40020070 	.word	0x40020070
 8004890:	40020088 	.word	0x40020088
 8004894:	400200a0 	.word	0x400200a0
 8004898:	400200b8 	.word	0x400200b8
 800489c:	40020410 	.word	0x40020410
 80048a0:	40020428 	.word	0x40020428
 80048a4:	40020440 	.word	0x40020440
 80048a8:	40020458 	.word	0x40020458
 80048ac:	40020470 	.word	0x40020470
 80048b0:	40020488 	.word	0x40020488
 80048b4:	400204a0 	.word	0x400204a0
 80048b8:	400204b8 	.word	0x400204b8
 80048bc:	58025408 	.word	0x58025408
 80048c0:	5802541c 	.word	0x5802541c
 80048c4:	58025430 	.word	0x58025430
 80048c8:	58025444 	.word	0x58025444
 80048cc:	58025458 	.word	0x58025458
 80048d0:	5802546c 	.word	0x5802546c
 80048d4:	58025480 	.word	0x58025480
 80048d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d160      	bne.n	80049a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a8c      	ldr	r2, [pc, #560]	; (8004b1c <HAL_DMA_IRQHandler+0xca8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d04a      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a8a      	ldr	r2, [pc, #552]	; (8004b20 <HAL_DMA_IRQHandler+0xcac>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d045      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a89      	ldr	r2, [pc, #548]	; (8004b24 <HAL_DMA_IRQHandler+0xcb0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d040      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a87      	ldr	r2, [pc, #540]	; (8004b28 <HAL_DMA_IRQHandler+0xcb4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d03b      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a86      	ldr	r2, [pc, #536]	; (8004b2c <HAL_DMA_IRQHandler+0xcb8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d036      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a84      	ldr	r2, [pc, #528]	; (8004b30 <HAL_DMA_IRQHandler+0xcbc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d031      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a83      	ldr	r2, [pc, #524]	; (8004b34 <HAL_DMA_IRQHandler+0xcc0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d02c      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a81      	ldr	r2, [pc, #516]	; (8004b38 <HAL_DMA_IRQHandler+0xcc4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d027      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a80      	ldr	r2, [pc, #512]	; (8004b3c <HAL_DMA_IRQHandler+0xcc8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d022      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a7e      	ldr	r2, [pc, #504]	; (8004b40 <HAL_DMA_IRQHandler+0xccc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d01d      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a7d      	ldr	r2, [pc, #500]	; (8004b44 <HAL_DMA_IRQHandler+0xcd0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d018      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a7b      	ldr	r2, [pc, #492]	; (8004b48 <HAL_DMA_IRQHandler+0xcd4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a7a      	ldr	r2, [pc, #488]	; (8004b4c <HAL_DMA_IRQHandler+0xcd8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a78      	ldr	r2, [pc, #480]	; (8004b50 <HAL_DMA_IRQHandler+0xcdc>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a77      	ldr	r2, [pc, #476]	; (8004b54 <HAL_DMA_IRQHandler+0xce0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_DMA_IRQHandler+0xb12>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a75      	ldr	r2, [pc, #468]	; (8004b58 <HAL_DMA_IRQHandler+0xce4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d108      	bne.n	8004998 <HAL_DMA_IRQHandler+0xb24>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0208 	bic.w	r2, r2, #8
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e007      	b.n	80049a8 <HAL_DMA_IRQHandler+0xb34>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0204 	bic.w	r2, r2, #4
 80049a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8165 	beq.w	8004c7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ba:	e15f      	b.n	8004c7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	2202      	movs	r2, #2
 80049c6:	409a      	lsls	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80c5 	beq.w	8004b5c <HAL_DMA_IRQHandler+0xce8>
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80bf 	beq.w	8004b5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2202      	movs	r2, #2
 80049e8:	409a      	lsls	r2, r3
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d018      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 813a 	beq.w	8004c80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a14:	e134      	b.n	8004c80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8130 	beq.w	8004c80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a28:	e12a      	b.n	8004c80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d168      	bne.n	8004b06 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a38      	ldr	r2, [pc, #224]	; (8004b1c <HAL_DMA_IRQHandler+0xca8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d04a      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a37      	ldr	r2, [pc, #220]	; (8004b20 <HAL_DMA_IRQHandler+0xcac>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d045      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a35      	ldr	r2, [pc, #212]	; (8004b24 <HAL_DMA_IRQHandler+0xcb0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d040      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a34      	ldr	r2, [pc, #208]	; (8004b28 <HAL_DMA_IRQHandler+0xcb4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d03b      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a32      	ldr	r2, [pc, #200]	; (8004b2c <HAL_DMA_IRQHandler+0xcb8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d036      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a31      	ldr	r2, [pc, #196]	; (8004b30 <HAL_DMA_IRQHandler+0xcbc>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d031      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2f      	ldr	r2, [pc, #188]	; (8004b34 <HAL_DMA_IRQHandler+0xcc0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d02c      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a2e      	ldr	r2, [pc, #184]	; (8004b38 <HAL_DMA_IRQHandler+0xcc4>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d027      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2c      	ldr	r2, [pc, #176]	; (8004b3c <HAL_DMA_IRQHandler+0xcc8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d022      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2b      	ldr	r2, [pc, #172]	; (8004b40 <HAL_DMA_IRQHandler+0xccc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d01d      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a29      	ldr	r2, [pc, #164]	; (8004b44 <HAL_DMA_IRQHandler+0xcd0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d018      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a28      	ldr	r2, [pc, #160]	; (8004b48 <HAL_DMA_IRQHandler+0xcd4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a26      	ldr	r2, [pc, #152]	; (8004b4c <HAL_DMA_IRQHandler+0xcd8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a25      	ldr	r2, [pc, #148]	; (8004b50 <HAL_DMA_IRQHandler+0xcdc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <HAL_DMA_IRQHandler+0xce0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_DMA_IRQHandler+0xc60>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <HAL_DMA_IRQHandler+0xce4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d108      	bne.n	8004ae6 <HAL_DMA_IRQHandler+0xc72>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0214 	bic.w	r2, r2, #20
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e007      	b.n	8004af6 <HAL_DMA_IRQHandler+0xc82>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 020a 	bic.w	r2, r2, #10
 8004af4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80b8 	beq.w	8004c80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b18:	e0b2      	b.n	8004c80 <HAL_DMA_IRQHandler+0xe0c>
 8004b1a:	bf00      	nop
 8004b1c:	40020010 	.word	0x40020010
 8004b20:	40020028 	.word	0x40020028
 8004b24:	40020040 	.word	0x40020040
 8004b28:	40020058 	.word	0x40020058
 8004b2c:	40020070 	.word	0x40020070
 8004b30:	40020088 	.word	0x40020088
 8004b34:	400200a0 	.word	0x400200a0
 8004b38:	400200b8 	.word	0x400200b8
 8004b3c:	40020410 	.word	0x40020410
 8004b40:	40020428 	.word	0x40020428
 8004b44:	40020440 	.word	0x40020440
 8004b48:	40020458 	.word	0x40020458
 8004b4c:	40020470 	.word	0x40020470
 8004b50:	40020488 	.word	0x40020488
 8004b54:	400204a0 	.word	0x400204a0
 8004b58:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	2208      	movs	r2, #8
 8004b66:	409a      	lsls	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8088 	beq.w	8004c82 <HAL_DMA_IRQHandler+0xe0e>
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 8082 	beq.w	8004c82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a41      	ldr	r2, [pc, #260]	; (8004c88 <HAL_DMA_IRQHandler+0xe14>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d04a      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a3f      	ldr	r2, [pc, #252]	; (8004c8c <HAL_DMA_IRQHandler+0xe18>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d045      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a3e      	ldr	r2, [pc, #248]	; (8004c90 <HAL_DMA_IRQHandler+0xe1c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d040      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a3c      	ldr	r2, [pc, #240]	; (8004c94 <HAL_DMA_IRQHandler+0xe20>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d03b      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3b      	ldr	r2, [pc, #236]	; (8004c98 <HAL_DMA_IRQHandler+0xe24>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d036      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a39      	ldr	r2, [pc, #228]	; (8004c9c <HAL_DMA_IRQHandler+0xe28>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d031      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a38      	ldr	r2, [pc, #224]	; (8004ca0 <HAL_DMA_IRQHandler+0xe2c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d02c      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a36      	ldr	r2, [pc, #216]	; (8004ca4 <HAL_DMA_IRQHandler+0xe30>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d027      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a35      	ldr	r2, [pc, #212]	; (8004ca8 <HAL_DMA_IRQHandler+0xe34>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d022      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a33      	ldr	r2, [pc, #204]	; (8004cac <HAL_DMA_IRQHandler+0xe38>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01d      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a32      	ldr	r2, [pc, #200]	; (8004cb0 <HAL_DMA_IRQHandler+0xe3c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d018      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a30      	ldr	r2, [pc, #192]	; (8004cb4 <HAL_DMA_IRQHandler+0xe40>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2f      	ldr	r2, [pc, #188]	; (8004cb8 <HAL_DMA_IRQHandler+0xe44>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00e      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2d      	ldr	r2, [pc, #180]	; (8004cbc <HAL_DMA_IRQHandler+0xe48>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d009      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2c      	ldr	r2, [pc, #176]	; (8004cc0 <HAL_DMA_IRQHandler+0xe4c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <HAL_DMA_IRQHandler+0xdaa>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a2a      	ldr	r2, [pc, #168]	; (8004cc4 <HAL_DMA_IRQHandler+0xe50>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d108      	bne.n	8004c30 <HAL_DMA_IRQHandler+0xdbc>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 021c 	bic.w	r2, r2, #28
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	e007      	b.n	8004c40 <HAL_DMA_IRQHandler+0xdcc>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 020e 	bic.w	r2, r2, #14
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	2201      	movs	r2, #1
 8004c4a:	409a      	lsls	r2, r3
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
 8004c76:	e004      	b.n	8004c82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c78:	bf00      	nop
 8004c7a:	e002      	b.n	8004c82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c7c:	bf00      	nop
 8004c7e:	e000      	b.n	8004c82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c82:	3728      	adds	r7, #40	; 0x28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40020010 	.word	0x40020010
 8004c8c:	40020028 	.word	0x40020028
 8004c90:	40020040 	.word	0x40020040
 8004c94:	40020058 	.word	0x40020058
 8004c98:	40020070 	.word	0x40020070
 8004c9c:	40020088 	.word	0x40020088
 8004ca0:	400200a0 	.word	0x400200a0
 8004ca4:	400200b8 	.word	0x400200b8
 8004ca8:	40020410 	.word	0x40020410
 8004cac:	40020428 	.word	0x40020428
 8004cb0:	40020440 	.word	0x40020440
 8004cb4:	40020458 	.word	0x40020458
 8004cb8:	40020470 	.word	0x40020470
 8004cbc:	40020488 	.word	0x40020488
 8004cc0:	400204a0 	.word	0x400204a0
 8004cc4:	400204b8 	.word	0x400204b8

08004cc8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd6:	b2db      	uxtb	r3, r3
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a84      	ldr	r2, [pc, #528]	; (8004f2c <DMA_SetConfig+0x230>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d072      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a82      	ldr	r2, [pc, #520]	; (8004f30 <DMA_SetConfig+0x234>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d06d      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a81      	ldr	r2, [pc, #516]	; (8004f34 <DMA_SetConfig+0x238>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d068      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a7f      	ldr	r2, [pc, #508]	; (8004f38 <DMA_SetConfig+0x23c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d063      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a7e      	ldr	r2, [pc, #504]	; (8004f3c <DMA_SetConfig+0x240>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d05e      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a7c      	ldr	r2, [pc, #496]	; (8004f40 <DMA_SetConfig+0x244>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d059      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a7b      	ldr	r2, [pc, #492]	; (8004f44 <DMA_SetConfig+0x248>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d054      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a79      	ldr	r2, [pc, #484]	; (8004f48 <DMA_SetConfig+0x24c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d04f      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a78      	ldr	r2, [pc, #480]	; (8004f4c <DMA_SetConfig+0x250>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d04a      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a76      	ldr	r2, [pc, #472]	; (8004f50 <DMA_SetConfig+0x254>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d045      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a75      	ldr	r2, [pc, #468]	; (8004f54 <DMA_SetConfig+0x258>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d040      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a73      	ldr	r2, [pc, #460]	; (8004f58 <DMA_SetConfig+0x25c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d03b      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a72      	ldr	r2, [pc, #456]	; (8004f5c <DMA_SetConfig+0x260>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d036      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a70      	ldr	r2, [pc, #448]	; (8004f60 <DMA_SetConfig+0x264>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d031      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a6f      	ldr	r2, [pc, #444]	; (8004f64 <DMA_SetConfig+0x268>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d02c      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a6d      	ldr	r2, [pc, #436]	; (8004f68 <DMA_SetConfig+0x26c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d027      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a6c      	ldr	r2, [pc, #432]	; (8004f6c <DMA_SetConfig+0x270>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d022      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a6a      	ldr	r2, [pc, #424]	; (8004f70 <DMA_SetConfig+0x274>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01d      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a69      	ldr	r2, [pc, #420]	; (8004f74 <DMA_SetConfig+0x278>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d018      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a67      	ldr	r2, [pc, #412]	; (8004f78 <DMA_SetConfig+0x27c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a66      	ldr	r2, [pc, #408]	; (8004f7c <DMA_SetConfig+0x280>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00e      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a64      	ldr	r2, [pc, #400]	; (8004f80 <DMA_SetConfig+0x284>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d009      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a63      	ldr	r2, [pc, #396]	; (8004f84 <DMA_SetConfig+0x288>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <DMA_SetConfig+0x10a>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a61      	ldr	r2, [pc, #388]	; (8004f88 <DMA_SetConfig+0x28c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d101      	bne.n	8004e0a <DMA_SetConfig+0x10e>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <DMA_SetConfig+0x110>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d004      	beq.n	8004e2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a3e      	ldr	r2, [pc, #248]	; (8004f2c <DMA_SetConfig+0x230>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d04a      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a3d      	ldr	r2, [pc, #244]	; (8004f30 <DMA_SetConfig+0x234>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d045      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a3b      	ldr	r2, [pc, #236]	; (8004f34 <DMA_SetConfig+0x238>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d040      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a3a      	ldr	r2, [pc, #232]	; (8004f38 <DMA_SetConfig+0x23c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d03b      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a38      	ldr	r2, [pc, #224]	; (8004f3c <DMA_SetConfig+0x240>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d036      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a37      	ldr	r2, [pc, #220]	; (8004f40 <DMA_SetConfig+0x244>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d031      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a35      	ldr	r2, [pc, #212]	; (8004f44 <DMA_SetConfig+0x248>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d02c      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a34      	ldr	r2, [pc, #208]	; (8004f48 <DMA_SetConfig+0x24c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d027      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a32      	ldr	r2, [pc, #200]	; (8004f4c <DMA_SetConfig+0x250>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d022      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a31      	ldr	r2, [pc, #196]	; (8004f50 <DMA_SetConfig+0x254>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d01d      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2f      	ldr	r2, [pc, #188]	; (8004f54 <DMA_SetConfig+0x258>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2e      	ldr	r2, [pc, #184]	; (8004f58 <DMA_SetConfig+0x25c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a2c      	ldr	r2, [pc, #176]	; (8004f5c <DMA_SetConfig+0x260>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a2b      	ldr	r2, [pc, #172]	; (8004f60 <DMA_SetConfig+0x264>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a29      	ldr	r2, [pc, #164]	; (8004f64 <DMA_SetConfig+0x268>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <DMA_SetConfig+0x1d0>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a28      	ldr	r2, [pc, #160]	; (8004f68 <DMA_SetConfig+0x26c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d101      	bne.n	8004ed0 <DMA_SetConfig+0x1d4>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <DMA_SetConfig+0x1d6>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d05a      	beq.n	8004f8c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	223f      	movs	r2, #63	; 0x3f
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ef4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d108      	bne.n	8004f18 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f16:	e087      	b.n	8005028 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	60da      	str	r2, [r3, #12]
}
 8004f28:	e07e      	b.n	8005028 <DMA_SetConfig+0x32c>
 8004f2a:	bf00      	nop
 8004f2c:	40020010 	.word	0x40020010
 8004f30:	40020028 	.word	0x40020028
 8004f34:	40020040 	.word	0x40020040
 8004f38:	40020058 	.word	0x40020058
 8004f3c:	40020070 	.word	0x40020070
 8004f40:	40020088 	.word	0x40020088
 8004f44:	400200a0 	.word	0x400200a0
 8004f48:	400200b8 	.word	0x400200b8
 8004f4c:	40020410 	.word	0x40020410
 8004f50:	40020428 	.word	0x40020428
 8004f54:	40020440 	.word	0x40020440
 8004f58:	40020458 	.word	0x40020458
 8004f5c:	40020470 	.word	0x40020470
 8004f60:	40020488 	.word	0x40020488
 8004f64:	400204a0 	.word	0x400204a0
 8004f68:	400204b8 	.word	0x400204b8
 8004f6c:	58025408 	.word	0x58025408
 8004f70:	5802541c 	.word	0x5802541c
 8004f74:	58025430 	.word	0x58025430
 8004f78:	58025444 	.word	0x58025444
 8004f7c:	58025458 	.word	0x58025458
 8004f80:	5802546c 	.word	0x5802546c
 8004f84:	58025480 	.word	0x58025480
 8004f88:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a28      	ldr	r2, [pc, #160]	; (8005034 <DMA_SetConfig+0x338>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d022      	beq.n	8004fdc <DMA_SetConfig+0x2e0>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a27      	ldr	r2, [pc, #156]	; (8005038 <DMA_SetConfig+0x33c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d01d      	beq.n	8004fdc <DMA_SetConfig+0x2e0>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a25      	ldr	r2, [pc, #148]	; (800503c <DMA_SetConfig+0x340>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d018      	beq.n	8004fdc <DMA_SetConfig+0x2e0>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a24      	ldr	r2, [pc, #144]	; (8005040 <DMA_SetConfig+0x344>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <DMA_SetConfig+0x2e0>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a22      	ldr	r2, [pc, #136]	; (8005044 <DMA_SetConfig+0x348>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <DMA_SetConfig+0x2e0>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a21      	ldr	r2, [pc, #132]	; (8005048 <DMA_SetConfig+0x34c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <DMA_SetConfig+0x2e0>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1f      	ldr	r2, [pc, #124]	; (800504c <DMA_SetConfig+0x350>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <DMA_SetConfig+0x2e0>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1e      	ldr	r2, [pc, #120]	; (8005050 <DMA_SetConfig+0x354>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <DMA_SetConfig+0x2e4>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <DMA_SetConfig+0x2e6>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d020      	beq.n	8005028 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	2201      	movs	r2, #1
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	d108      	bne.n	8005018 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	60da      	str	r2, [r3, #12]
}
 8005016:	e007      	b.n	8005028 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	60da      	str	r2, [r3, #12]
}
 8005028:	bf00      	nop
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	58025408 	.word	0x58025408
 8005038:	5802541c 	.word	0x5802541c
 800503c:	58025430 	.word	0x58025430
 8005040:	58025444 	.word	0x58025444
 8005044:	58025458 	.word	0x58025458
 8005048:	5802546c 	.word	0x5802546c
 800504c:	58025480 	.word	0x58025480
 8005050:	58025494 	.word	0x58025494

08005054 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a42      	ldr	r2, [pc, #264]	; (800516c <DMA_CalcBaseAndBitshift+0x118>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d04a      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a41      	ldr	r2, [pc, #260]	; (8005170 <DMA_CalcBaseAndBitshift+0x11c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d045      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a3f      	ldr	r2, [pc, #252]	; (8005174 <DMA_CalcBaseAndBitshift+0x120>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d040      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a3e      	ldr	r2, [pc, #248]	; (8005178 <DMA_CalcBaseAndBitshift+0x124>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d03b      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a3c      	ldr	r2, [pc, #240]	; (800517c <DMA_CalcBaseAndBitshift+0x128>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d036      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a3b      	ldr	r2, [pc, #236]	; (8005180 <DMA_CalcBaseAndBitshift+0x12c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d031      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a39      	ldr	r2, [pc, #228]	; (8005184 <DMA_CalcBaseAndBitshift+0x130>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d02c      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a38      	ldr	r2, [pc, #224]	; (8005188 <DMA_CalcBaseAndBitshift+0x134>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d027      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a36      	ldr	r2, [pc, #216]	; (800518c <DMA_CalcBaseAndBitshift+0x138>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d022      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a35      	ldr	r2, [pc, #212]	; (8005190 <DMA_CalcBaseAndBitshift+0x13c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d01d      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a33      	ldr	r2, [pc, #204]	; (8005194 <DMA_CalcBaseAndBitshift+0x140>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d018      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a32      	ldr	r2, [pc, #200]	; (8005198 <DMA_CalcBaseAndBitshift+0x144>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a30      	ldr	r2, [pc, #192]	; (800519c <DMA_CalcBaseAndBitshift+0x148>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a2f      	ldr	r2, [pc, #188]	; (80051a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d009      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2d      	ldr	r2, [pc, #180]	; (80051a4 <DMA_CalcBaseAndBitshift+0x150>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <DMA_CalcBaseAndBitshift+0xa8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a2c      	ldr	r2, [pc, #176]	; (80051a8 <DMA_CalcBaseAndBitshift+0x154>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d101      	bne.n	8005100 <DMA_CalcBaseAndBitshift+0xac>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <DMA_CalcBaseAndBitshift+0xae>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d024      	beq.n	8005150 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	3b10      	subs	r3, #16
 800510e:	4a27      	ldr	r2, [pc, #156]	; (80051ac <DMA_CalcBaseAndBitshift+0x158>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	091b      	lsrs	r3, r3, #4
 8005116:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005120:	5cd3      	ldrb	r3, [r2, r3]
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b03      	cmp	r3, #3
 800512c:	d908      	bls.n	8005140 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	4b1f      	ldr	r3, [pc, #124]	; (80051b4 <DMA_CalcBaseAndBitshift+0x160>)
 8005136:	4013      	ands	r3, r2
 8005138:	1d1a      	adds	r2, r3, #4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	659a      	str	r2, [r3, #88]	; 0x58
 800513e:	e00d      	b.n	800515c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <DMA_CalcBaseAndBitshift+0x160>)
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6593      	str	r3, [r2, #88]	; 0x58
 800514e:	e005      	b.n	800515c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	40020010 	.word	0x40020010
 8005170:	40020028 	.word	0x40020028
 8005174:	40020040 	.word	0x40020040
 8005178:	40020058 	.word	0x40020058
 800517c:	40020070 	.word	0x40020070
 8005180:	40020088 	.word	0x40020088
 8005184:	400200a0 	.word	0x400200a0
 8005188:	400200b8 	.word	0x400200b8
 800518c:	40020410 	.word	0x40020410
 8005190:	40020428 	.word	0x40020428
 8005194:	40020440 	.word	0x40020440
 8005198:	40020458 	.word	0x40020458
 800519c:	40020470 	.word	0x40020470
 80051a0:	40020488 	.word	0x40020488
 80051a4:	400204a0 	.word	0x400204a0
 80051a8:	400204b8 	.word	0x400204b8
 80051ac:	aaaaaaab 	.word	0xaaaaaaab
 80051b0:	0800f9d4 	.word	0x0800f9d4
 80051b4:	fffffc00 	.word	0xfffffc00

080051b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d120      	bne.n	800520e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d858      	bhi.n	8005286 <DMA_CheckFifoParam+0xce>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <DMA_CheckFifoParam+0x24>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051ff 	.word	0x080051ff
 80051e4:	080051ed 	.word	0x080051ed
 80051e8:	08005287 	.word	0x08005287
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d048      	beq.n	800528a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80051fc:	e045      	b.n	800528a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005206:	d142      	bne.n	800528e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800520c:	e03f      	b.n	800528e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005216:	d123      	bne.n	8005260 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	2b03      	cmp	r3, #3
 800521e:	d838      	bhi.n	8005292 <DMA_CheckFifoParam+0xda>
 8005220:	a201      	add	r2, pc, #4	; (adr r2, 8005228 <DMA_CheckFifoParam+0x70>)
 8005222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005226:	bf00      	nop
 8005228:	08005239 	.word	0x08005239
 800522c:	0800523f 	.word	0x0800523f
 8005230:	08005239 	.word	0x08005239
 8005234:	08005251 	.word	0x08005251
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	73fb      	strb	r3, [r7, #15]
        break;
 800523c:	e030      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d025      	beq.n	8005296 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800524e:	e022      	b.n	8005296 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005258:	d11f      	bne.n	800529a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800525e:	e01c      	b.n	800529a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005264:	2b02      	cmp	r3, #2
 8005266:	d902      	bls.n	800526e <DMA_CheckFifoParam+0xb6>
 8005268:	2b03      	cmp	r3, #3
 800526a:	d003      	beq.n	8005274 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800526c:	e018      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	73fb      	strb	r3, [r7, #15]
        break;
 8005272:	e015      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00e      	beq.n	800529e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
    break;
 8005284:	e00b      	b.n	800529e <DMA_CheckFifoParam+0xe6>
        break;
 8005286:	bf00      	nop
 8005288:	e00a      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        break;
 800528a:	bf00      	nop
 800528c:	e008      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        break;
 800528e:	bf00      	nop
 8005290:	e006      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        break;
 8005292:	bf00      	nop
 8005294:	e004      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        break;
 8005296:	bf00      	nop
 8005298:	e002      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
        break;
 800529a:	bf00      	nop
 800529c:	e000      	b.n	80052a0 <DMA_CheckFifoParam+0xe8>
    break;
 800529e:	bf00      	nop
    }
  }

  return status;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop

080052b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a38      	ldr	r2, [pc, #224]	; (80053a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d022      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a36      	ldr	r2, [pc, #216]	; (80053a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d01d      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a35      	ldr	r2, [pc, #212]	; (80053ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d018      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a33      	ldr	r2, [pc, #204]	; (80053b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a32      	ldr	r2, [pc, #200]	; (80053b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a30      	ldr	r2, [pc, #192]	; (80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2f      	ldr	r2, [pc, #188]	; (80053bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2d      	ldr	r2, [pc, #180]	; (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01a      	beq.n	800534e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	3b08      	subs	r3, #8
 8005320:	4a28      	ldr	r2, [pc, #160]	; (80053c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	091b      	lsrs	r3, r3, #4
 8005328:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4b26      	ldr	r3, [pc, #152]	; (80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	461a      	mov	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a24      	ldr	r2, [pc, #144]	; (80053cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800533c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	2201      	movs	r2, #1
 8005346:	409a      	lsls	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800534c:	e024      	b.n	8005398 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	3b10      	subs	r3, #16
 8005356:	4a1e      	ldr	r2, [pc, #120]	; (80053d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005358:	fba2 2303 	umull	r2, r3, r2, r3
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a1c      	ldr	r2, [pc, #112]	; (80053d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d806      	bhi.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a1b      	ldr	r2, [pc, #108]	; (80053d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d902      	bls.n	8005376 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	3308      	adds	r3, #8
 8005374:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4b18      	ldr	r3, [pc, #96]	; (80053dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	461a      	mov	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005388:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	2201      	movs	r2, #1
 8005392:	409a      	lsls	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	58025408 	.word	0x58025408
 80053a8:	5802541c 	.word	0x5802541c
 80053ac:	58025430 	.word	0x58025430
 80053b0:	58025444 	.word	0x58025444
 80053b4:	58025458 	.word	0x58025458
 80053b8:	5802546c 	.word	0x5802546c
 80053bc:	58025480 	.word	0x58025480
 80053c0:	58025494 	.word	0x58025494
 80053c4:	cccccccd 	.word	0xcccccccd
 80053c8:	16009600 	.word	0x16009600
 80053cc:	58025880 	.word	0x58025880
 80053d0:	aaaaaaab 	.word	0xaaaaaaab
 80053d4:	400204b8 	.word	0x400204b8
 80053d8:	4002040f 	.word	0x4002040f
 80053dc:	10008200 	.word	0x10008200
 80053e0:	40020880 	.word	0x40020880

080053e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d04a      	beq.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d847      	bhi.n	8005490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a25      	ldr	r2, [pc, #148]	; (800549c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d022      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a24      	ldr	r2, [pc, #144]	; (80054a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d01d      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a22      	ldr	r2, [pc, #136]	; (80054a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d018      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d013      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1f      	ldr	r2, [pc, #124]	; (80054ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d00e      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1e      	ldr	r2, [pc, #120]	; (80054b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d009      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1c      	ldr	r2, [pc, #112]	; (80054b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d004      	beq.n	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1b      	ldr	r2, [pc, #108]	; (80054b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d101      	bne.n	8005454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005454:	2300      	movs	r3, #0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	461a      	mov	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a15      	ldr	r2, [pc, #84]	; (80054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800546c:	671a      	str	r2, [r3, #112]	; 0x70
 800546e:	e009      	b.n	8005484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	461a      	mov	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a11      	ldr	r2, [pc, #68]	; (80054c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005482:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3b01      	subs	r3, #1
 8005488:	2201      	movs	r2, #1
 800548a:	409a      	lsls	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	58025408 	.word	0x58025408
 80054a0:	5802541c 	.word	0x5802541c
 80054a4:	58025430 	.word	0x58025430
 80054a8:	58025444 	.word	0x58025444
 80054ac:	58025458 	.word	0x58025458
 80054b0:	5802546c 	.word	0x5802546c
 80054b4:	58025480 	.word	0x58025480
 80054b8:	58025494 	.word	0x58025494
 80054bc:	1600963f 	.word	0x1600963f
 80054c0:	58025940 	.word	0x58025940
 80054c4:	1000823f 	.word	0x1000823f
 80054c8:	40020940 	.word	0x40020940

080054cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b089      	sub	sp, #36	; 0x24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80054da:	4b89      	ldr	r3, [pc, #548]	; (8005700 <HAL_GPIO_Init+0x234>)
 80054dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054de:	e194      	b.n	800580a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	2101      	movs	r1, #1
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ec:	4013      	ands	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8186 	beq.w	8005804 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d00b      	beq.n	8005518 <HAL_GPIO_Init+0x4c>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d007      	beq.n	8005518 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800550c:	2b11      	cmp	r3, #17
 800550e:	d003      	beq.n	8005518 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b12      	cmp	r3, #18
 8005516:	d130      	bne.n	800557a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	2203      	movs	r2, #3
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4013      	ands	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	4313      	orrs	r3, r2
 8005540:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800554e:	2201      	movs	r2, #1
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4013      	ands	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	f003 0201 	and.w	r2, r3, #1
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4313      	orrs	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	2203      	movs	r2, #3
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	43db      	mvns	r3, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4013      	ands	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d003      	beq.n	80055ba <HAL_GPIO_Init+0xee>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	2b12      	cmp	r3, #18
 80055b8:	d123      	bne.n	8005602 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	08da      	lsrs	r2, r3, #3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3208      	adds	r2, #8
 80055c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f003 0307 	and.w	r3, r3, #7
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	220f      	movs	r2, #15
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43db      	mvns	r3, r3
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	4013      	ands	r3, r2
 80055dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	08da      	lsrs	r2, r3, #3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3208      	adds	r2, #8
 80055fc:	69b9      	ldr	r1, [r7, #24]
 80055fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	2203      	movs	r2, #3
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 0203 	and.w	r2, r3, #3
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	4313      	orrs	r3, r2
 800562e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80e0 	beq.w	8005804 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005644:	4b2f      	ldr	r3, [pc, #188]	; (8005704 <HAL_GPIO_Init+0x238>)
 8005646:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800564a:	4a2e      	ldr	r2, [pc, #184]	; (8005704 <HAL_GPIO_Init+0x238>)
 800564c:	f043 0302 	orr.w	r3, r3, #2
 8005650:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005654:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <HAL_GPIO_Init+0x238>)
 8005656:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005662:	4a29      	ldr	r2, [pc, #164]	; (8005708 <HAL_GPIO_Init+0x23c>)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	3302      	adds	r3, #2
 800566a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	220f      	movs	r2, #15
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4013      	ands	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a20      	ldr	r2, [pc, #128]	; (800570c <HAL_GPIO_Init+0x240>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d052      	beq.n	8005734 <HAL_GPIO_Init+0x268>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a1f      	ldr	r2, [pc, #124]	; (8005710 <HAL_GPIO_Init+0x244>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d031      	beq.n	80056fa <HAL_GPIO_Init+0x22e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a1e      	ldr	r2, [pc, #120]	; (8005714 <HAL_GPIO_Init+0x248>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d02b      	beq.n	80056f6 <HAL_GPIO_Init+0x22a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <HAL_GPIO_Init+0x24c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d025      	beq.n	80056f2 <HAL_GPIO_Init+0x226>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_GPIO_Init+0x250>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01f      	beq.n	80056ee <HAL_GPIO_Init+0x222>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <HAL_GPIO_Init+0x254>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d019      	beq.n	80056ea <HAL_GPIO_Init+0x21e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <HAL_GPIO_Init+0x258>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_GPIO_Init+0x21a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a19      	ldr	r2, [pc, #100]	; (8005728 <HAL_GPIO_Init+0x25c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00d      	beq.n	80056e2 <HAL_GPIO_Init+0x216>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a18      	ldr	r2, [pc, #96]	; (800572c <HAL_GPIO_Init+0x260>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d007      	beq.n	80056de <HAL_GPIO_Init+0x212>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <HAL_GPIO_Init+0x264>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d101      	bne.n	80056da <HAL_GPIO_Init+0x20e>
 80056d6:	2309      	movs	r3, #9
 80056d8:	e02d      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056da:	230a      	movs	r3, #10
 80056dc:	e02b      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056de:	2308      	movs	r3, #8
 80056e0:	e029      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056e2:	2307      	movs	r3, #7
 80056e4:	e027      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056e6:	2306      	movs	r3, #6
 80056e8:	e025      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056ea:	2305      	movs	r3, #5
 80056ec:	e023      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056ee:	2304      	movs	r3, #4
 80056f0:	e021      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056f2:	2303      	movs	r3, #3
 80056f4:	e01f      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e01d      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e01b      	b.n	8005736 <HAL_GPIO_Init+0x26a>
 80056fe:	bf00      	nop
 8005700:	58000080 	.word	0x58000080
 8005704:	58024400 	.word	0x58024400
 8005708:	58000400 	.word	0x58000400
 800570c:	58020000 	.word	0x58020000
 8005710:	58020400 	.word	0x58020400
 8005714:	58020800 	.word	0x58020800
 8005718:	58020c00 	.word	0x58020c00
 800571c:	58021000 	.word	0x58021000
 8005720:	58021400 	.word	0x58021400
 8005724:	58021800 	.word	0x58021800
 8005728:	58021c00 	.word	0x58021c00
 800572c:	58022000 	.word	0x58022000
 8005730:	58022400 	.word	0x58022400
 8005734:	2300      	movs	r3, #0
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	f002 0203 	and.w	r2, r2, #3
 800573c:	0092      	lsls	r2, r2, #2
 800573e:	4093      	lsls	r3, r2
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4313      	orrs	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005746:	4938      	ldr	r1, [pc, #224]	; (8005828 <HAL_GPIO_Init+0x35c>)
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	3302      	adds	r3, #2
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	43db      	mvns	r3, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4013      	ands	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	43db      	mvns	r3, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4013      	ands	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	43db      	mvns	r3, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	4013      	ands	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4013      	ands	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d003      	beq.n	80057fc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	3301      	adds	r3, #1
 8005808:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	f47f ae63 	bne.w	80054e0 <HAL_GPIO_Init+0x14>
  }
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	3724      	adds	r7, #36	; 0x24
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	58000400 	.word	0x58000400

0800582c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	807b      	strh	r3, [r7, #2]
 8005838:	4613      	mov	r3, r2
 800583a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800583c:	787b      	ldrb	r3, [r7, #1]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005842:	887a      	ldrh	r2, [r7, #2]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005848:	e003      	b.n	8005852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800584a:	887b      	ldrh	r3, [r7, #2]
 800584c:	041a      	lsls	r2, r3, #16
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	619a      	str	r2, [r3, #24]
}
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e07f      	b.n	8005972 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fb fd9a 	bl	80013c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	; 0x24
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d107      	bne.n	80058da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	e006      	b.n	80058e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d104      	bne.n	80058fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6859      	ldr	r1, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	4b1d      	ldr	r3, [pc, #116]	; (800597c <HAL_I2C_Init+0x11c>)
 8005906:	430b      	orrs	r3, r1
 8005908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691a      	ldr	r2, [r3, #16]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	ea42 0103 	orr.w	r1, r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	021a      	lsls	r2, r3, #8
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69d9      	ldr	r1, [r3, #28]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1a      	ldr	r2, [r3, #32]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0201 	orr.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	02008000 	.word	0x02008000

08005980 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	4608      	mov	r0, r1
 800598a:	4611      	mov	r1, r2
 800598c:	461a      	mov	r2, r3
 800598e:	4603      	mov	r3, r0
 8005990:	817b      	strh	r3, [r7, #10]
 8005992:	460b      	mov	r3, r1
 8005994:	813b      	strh	r3, [r7, #8]
 8005996:	4613      	mov	r3, r2
 8005998:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	f040 80f9 	bne.w	8005b9a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_I2C_Mem_Write+0x34>
 80059ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d105      	bne.n	80059c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0ed      	b.n	8005b9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_I2C_Mem_Write+0x4e>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e0e6      	b.n	8005b9c <HAL_I2C_Mem_Write+0x21c>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059d6:	f7fc fdd9 	bl	800258c <HAL_GetTick>
 80059da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	2319      	movs	r3, #25
 80059e2:	2201      	movs	r2, #1
 80059e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f001 fed9 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e0d1      	b.n	8005b9c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2221      	movs	r2, #33	; 0x21
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2240      	movs	r2, #64	; 0x40
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a3a      	ldr	r2, [r7, #32]
 8005a12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a20:	88f8      	ldrh	r0, [r7, #6]
 8005a22:	893a      	ldrh	r2, [r7, #8]
 8005a24:	8979      	ldrh	r1, [r7, #10]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	4603      	mov	r3, r0
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 ff19 	bl	8006868 <I2C_RequestMemoryWrite>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0a9      	b.n	8005b9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2bff      	cmp	r3, #255	; 0xff
 8005a50:	d90e      	bls.n	8005a70 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	22ff      	movs	r2, #255	; 0xff
 8005a56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	8979      	ldrh	r1, [r7, #10]
 8005a60:	2300      	movs	r3, #0
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f001 ffbb 	bl	80079e4 <I2C_TransferConfig>
 8005a6e:	e00f      	b.n	8005a90 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	8979      	ldrh	r1, [r7, #10]
 8005a82:	2300      	movs	r3, #0
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f001 ffaa 	bl	80079e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f001 fec3 	bl	8007820 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e07b      	b.n	8005b9c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	1c5a      	adds	r2, r3, #1
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d034      	beq.n	8005b48 <HAL_I2C_Mem_Write+0x1c8>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d130      	bne.n	8005b48 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	2200      	movs	r2, #0
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f001 fe55 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e04d      	b.n	8005b9c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2bff      	cmp	r3, #255	; 0xff
 8005b08:	d90e      	bls.n	8005b28 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	22ff      	movs	r2, #255	; 0xff
 8005b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	8979      	ldrh	r1, [r7, #10]
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f001 ff5f 	bl	80079e4 <I2C_TransferConfig>
 8005b26:	e00f      	b.n	8005b48 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	8979      	ldrh	r1, [r7, #10]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f001 ff4e 	bl	80079e4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d19e      	bne.n	8005a90 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f001 fea2 	bl	80078a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e01a      	b.n	8005b9c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6859      	ldr	r1, [r3, #4]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <HAL_I2C_Mem_Write+0x224>)
 8005b7a:	400b      	ands	r3, r1
 8005b7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2220      	movs	r2, #32
 8005b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e000      	b.n	8005b9c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
  }
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	fe00e800 	.word	0xfe00e800

08005ba8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	817b      	strh	r3, [r7, #10]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	813b      	strh	r3, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	f040 80fd 	bne.w	8005dca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <HAL_I2C_Mem_Read+0x34>
 8005bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d105      	bne.n	8005be8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0f1      	b.n	8005dcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_I2C_Mem_Read+0x4e>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e0ea      	b.n	8005dcc <HAL_I2C_Mem_Read+0x224>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bfe:	f7fc fcc5 	bl	800258c <HAL_GetTick>
 8005c02:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	2319      	movs	r3, #25
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f001 fdc5 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0d5      	b.n	8005dcc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2222      	movs	r2, #34	; 0x22
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2240      	movs	r2, #64	; 0x40
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a3a      	ldr	r2, [r7, #32]
 8005c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c48:	88f8      	ldrh	r0, [r7, #6]
 8005c4a:	893a      	ldrh	r2, [r7, #8]
 8005c4c:	8979      	ldrh	r1, [r7, #10]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	4603      	mov	r3, r0
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 fe59 	bl	8006910 <I2C_RequestMemoryRead>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e0ad      	b.n	8005dcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2bff      	cmp	r3, #255	; 0xff
 8005c78:	d90e      	bls.n	8005c98 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	22ff      	movs	r2, #255	; 0xff
 8005c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	8979      	ldrh	r1, [r7, #10]
 8005c88:	4b52      	ldr	r3, [pc, #328]	; (8005dd4 <HAL_I2C_Mem_Read+0x22c>)
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f001 fea7 	bl	80079e4 <I2C_TransferConfig>
 8005c96:	e00f      	b.n	8005cb8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	8979      	ldrh	r1, [r7, #10]
 8005caa:	4b4a      	ldr	r3, [pc, #296]	; (8005dd4 <HAL_I2C_Mem_Read+0x22c>)
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f001 fe96 	bl	80079e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2104      	movs	r1, #4
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f001 fd6c 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e07c      	b.n	8005dcc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d034      	beq.n	8005d78 <HAL_I2C_Mem_Read+0x1d0>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d130      	bne.n	8005d78 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2180      	movs	r1, #128	; 0x80
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f001 fd3d 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e04d      	b.n	8005dcc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	2bff      	cmp	r3, #255	; 0xff
 8005d38:	d90e      	bls.n	8005d58 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	8979      	ldrh	r1, [r7, #10]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f001 fe47 	bl	80079e4 <I2C_TransferConfig>
 8005d56:	e00f      	b.n	8005d78 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	8979      	ldrh	r1, [r7, #10]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f001 fe36 	bl	80079e4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d19a      	bne.n	8005cb8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f001 fd8a 	bl	80078a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e01a      	b.n	8005dcc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6859      	ldr	r1, [r3, #4]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <HAL_I2C_Mem_Read+0x230>)
 8005daa:	400b      	ands	r3, r1
 8005dac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e000      	b.n	8005dcc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005dca:	2302      	movs	r3, #2
  }
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	80002400 	.word	0x80002400
 8005dd8:	fe00e800 	.word	0xfe00e800

08005ddc <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	; 0x28
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	4608      	mov	r0, r1
 8005de6:	4611      	mov	r1, r2
 8005de8:	461a      	mov	r2, r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	817b      	strh	r3, [r7, #10]
 8005dee:	460b      	mov	r3, r1
 8005df0:	813b      	strh	r3, [r7, #8]
 8005df2:	4613      	mov	r3, r2
 8005df4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	f040 80d5 	bne.w	8005fae <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_I2C_Mem_Read_DMA+0x34>
 8005e0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d105      	bne.n	8005e1c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e16:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e0c9      	b.n	8005fb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e2a:	d101      	bne.n	8005e30 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e0bf      	b.n	8005fb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_I2C_Mem_Read_DMA+0x62>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e0b8      	b.n	8005fb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e46:	f7fc fba1 	bl	800258c <HAL_GetTick>
 8005e4a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2222      	movs	r2, #34	; 0x22
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2240      	movs	r2, #64	; 0x40
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4a51      	ldr	r2, [pc, #324]	; (8005fb8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8005e72:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4a51      	ldr	r2, [pc, #324]	; (8005fbc <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8005e78:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2bff      	cmp	r3, #255	; 0xff
 8005e82:	d906      	bls.n	8005e92 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	22ff      	movs	r2, #255	; 0xff
 8005e88:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005e8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	e007      	b.n	8005ea2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005e9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ea0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005ea2:	88f8      	ldrh	r0, [r7, #6]
 8005ea4:	893a      	ldrh	r2, [r7, #8]
 8005ea6:	8979      	ldrh	r1, [r7, #10]
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	2319      	movs	r3, #25
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 fd2c 	bl	8006910 <I2C_RequestMemoryRead>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e072      	b.n	8005fb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d020      	beq.n	8005f14 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed6:	4a3a      	ldr	r2, [pc, #232]	; (8005fc0 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8005ed8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ede:	4a39      	ldr	r2, [pc, #228]	; (8005fc4 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8005ee0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	2200      	movs	r2, #0
 8005ef0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3324      	adds	r3, #36	; 0x24
 8005efc:	4619      	mov	r1, r3
 8005efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f04:	f7fc ffea 	bl	8002edc <HAL_DMA_Start_IT>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d139      	bne.n	8005f86 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8005f12:	e013      	b.n	8005f3c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e039      	b.n	8005fb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	8979      	ldrh	r1, [r7, #10]
 8005f44:	4b20      	ldr	r3, [pc, #128]	; (8005fc8 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f001 fd4a 	bl	80079e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005f6a:	2110      	movs	r1, #16
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f001 fd67 	bl	8007a40 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f80:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	e014      	b.n	8005fb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	f043 0210 	orr.w	r2, r3, #16
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8005fae:	2302      	movs	r3, #2
  }
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	ffff0000 	.word	0xffff0000
 8005fbc:	080062c3 	.word	0x080062c3
 8005fc0:	0800745f 	.word	0x0800745f
 8005fc4:	080074f5 	.word	0x080074f5
 8005fc8:	80002400 	.word	0x80002400

08005fcc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	4798      	blx	r3
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
 800605c:	4613      	mov	r3, r2
 800605e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <I2C_Slave_ISR_IT+0x24>
 80060dc:	2302      	movs	r3, #2
 80060de:	e0ec      	b.n	80062ba <I2C_Slave_ISR_IT+0x1fe>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <I2C_Slave_ISR_IT+0x4c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006100:	6939      	ldr	r1, [r7, #16]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fe42 	bl	8006d8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	091b      	lsrs	r3, r3, #4
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d04d      	beq.n	80061b0 <I2C_Slave_ISR_IT+0xf4>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	091b      	lsrs	r3, r3, #4
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	2b00      	cmp	r3, #0
 800611e:	d047      	beq.n	80061b0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d128      	bne.n	800617c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b28      	cmp	r3, #40	; 0x28
 8006134:	d108      	bne.n	8006148 <I2C_Slave_ISR_IT+0x8c>
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800613c:	d104      	bne.n	8006148 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800613e:	6939      	ldr	r1, [r7, #16]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f001 f81b 	bl	800717c <I2C_ITListenCplt>
 8006146:	e032      	b.n	80061ae <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b29      	cmp	r3, #41	; 0x29
 8006152:	d10e      	bne.n	8006172 <I2C_Slave_ISR_IT+0xb6>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800615a:	d00a      	beq.n	8006172 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2210      	movs	r2, #16
 8006162:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f001 f956 	bl	8007416 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fce5 	bl	8006b3a <I2C_ITSlaveSeqCplt>
 8006170:	e01d      	b.n	80061ae <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2210      	movs	r2, #16
 8006178:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800617a:	e096      	b.n	80062aa <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2210      	movs	r2, #16
 8006182:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006188:	f043 0204 	orr.w	r2, r3, #4
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d004      	beq.n	80061a0 <I2C_Slave_ISR_IT+0xe4>
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800619c:	f040 8085 	bne.w	80062aa <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a4:	4619      	mov	r1, r3
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f001 f83e 	bl	8007228 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80061ac:	e07d      	b.n	80062aa <I2C_Slave_ISR_IT+0x1ee>
 80061ae:	e07c      	b.n	80062aa <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d030      	beq.n	800621e <I2C_Slave_ISR_IT+0x162>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	089b      	lsrs	r3, r3, #2
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d02a      	beq.n	800621e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d018      	beq.n	8006204 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ee:	3b01      	subs	r3, #1
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d14f      	bne.n	80062ae <I2C_Slave_ISR_IT+0x1f2>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006214:	d04b      	beq.n	80062ae <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fc8f 	bl	8006b3a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800621c:	e047      	b.n	80062ae <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	08db      	lsrs	r3, r3, #3
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	08db      	lsrs	r3, r3, #3
 800622e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006236:	6939      	ldr	r1, [r7, #16]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fbbd 	bl	80069b8 <I2C_ITAddrCplt>
 800623e:	e037      	b.n	80062b0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	085b      	lsrs	r3, r3, #1
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d031      	beq.n	80062b0 <I2C_Slave_ISR_IT+0x1f4>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	085b      	lsrs	r3, r3, #1
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b00      	cmp	r3, #0
 8006256:	d02b      	beq.n	80062b0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625c:	b29b      	uxth	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	781a      	ldrb	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628a:	3b01      	subs	r3, #1
 800628c:	b29a      	uxth	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	851a      	strh	r2, [r3, #40]	; 0x28
 8006292:	e00d      	b.n	80062b0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800629a:	d002      	beq.n	80062a2 <I2C_Slave_ISR_IT+0x1e6>
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 fc49 	bl	8006b3a <I2C_ITSlaveSeqCplt>
 80062a8:	e002      	b.n	80062b0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80062aa:	bf00      	nop
 80062ac:	e000      	b.n	80062b0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80062ae:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b088      	sub	sp, #32
 80062c6:	af02      	add	r7, sp, #8
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <I2C_Master_ISR_DMA+0x1a>
 80062d8:	2302      	movs	r3, #2
 80062da:	e0e1      	b.n	80064a0 <I2C_Master_ISR_DMA+0x1de>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	091b      	lsrs	r3, r3, #4
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d017      	beq.n	8006320 <I2C_Master_ISR_DMA+0x5e>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	091b      	lsrs	r3, r3, #4
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d011      	beq.n	8006320 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2210      	movs	r2, #16
 8006302:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006308:	f043 0204 	orr.w	r2, r3, #4
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006310:	2120      	movs	r1, #32
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f001 fb94 	bl	8007a40 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f001 f87c 	bl	8007416 <I2C_Flush_TXDR>
 800631e:	e0ba      	b.n	8006496 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	09db      	lsrs	r3, r3, #7
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d072      	beq.n	8006412 <I2C_Master_ISR_DMA+0x150>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	099b      	lsrs	r3, r3, #6
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d06c      	beq.n	8006412 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006346:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d04e      	beq.n	80063f0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800635e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006364:	b29b      	uxth	r3, r3
 8006366:	2bff      	cmp	r3, #255	; 0xff
 8006368:	d906      	bls.n	8006378 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	22ff      	movs	r2, #255	; 0xff
 800636e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006370:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e010      	b.n	800639a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006386:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800638a:	d003      	beq.n	8006394 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e002      	b.n	800639a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006398:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	8a79      	ldrh	r1, [r7, #18]
 80063a2:	2300      	movs	r3, #0
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f001 fb1b 	bl	80079e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b22      	cmp	r3, #34	; 0x22
 80063ca:	d108      	bne.n	80063de <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063da:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063dc:	e05b      	b.n	8006496 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063ee:	e052      	b.n	8006496 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063fe:	d003      	beq.n	8006408 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 fb5d 	bl	8006ac0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006406:	e046      	b.n	8006496 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006408:	2140      	movs	r1, #64	; 0x40
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 ff0c 	bl	8007228 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006410:	e041      	b.n	8006496 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	099b      	lsrs	r3, r3, #6
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d029      	beq.n	8006472 <I2C_Master_ISR_DMA+0x1b0>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	099b      	lsrs	r3, r3, #6
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d023      	beq.n	8006472 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d119      	bne.n	8006468 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800643e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006442:	d027      	beq.n	8006494 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800644c:	d108      	bne.n	8006460 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800645c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800645e:	e019      	b.n	8006494 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 fb2d 	bl	8006ac0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006466:	e015      	b.n	8006494 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006468:	2140      	movs	r1, #64	; 0x40
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 fedc 	bl	8007228 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006470:	e010      	b.n	8006494 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <I2C_Master_ISR_DMA+0x1d4>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fbb3 	bl	8006bf8 <I2C_ITMasterCplt>
 8006492:	e000      	b.n	8006496 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8006494:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <I2C_Slave_ISR_DMA+0x24>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e1c8      	b.n	800685e <I2C_Slave_ISR_DMA+0x3b6>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <I2C_Slave_ISR_DMA+0x4c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 fc4c 	bl	8006d8c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 8199 	beq.w	8006834 <I2C_Slave_ISR_DMA+0x38c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	091b      	lsrs	r3, r3, #4
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8192 	beq.w	8006834 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	0b9b      	lsrs	r3, r3, #14
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	0bdb      	lsrs	r3, r3, #15
 8006520:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 817e 	beq.w	8006826 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d07c      	beq.n	800662c <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	0bdb      	lsrs	r3, r3, #15
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d076      	beq.n	800662c <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a8d      	ldr	r2, [pc, #564]	; (800677c <I2C_Slave_ISR_DMA+0x2d4>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d059      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a8b      	ldr	r2, [pc, #556]	; (8006780 <I2C_Slave_ISR_DMA+0x2d8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d053      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a89      	ldr	r2, [pc, #548]	; (8006784 <I2C_Slave_ISR_DMA+0x2dc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d04d      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a87      	ldr	r2, [pc, #540]	; (8006788 <I2C_Slave_ISR_DMA+0x2e0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d047      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a85      	ldr	r2, [pc, #532]	; (800678c <I2C_Slave_ISR_DMA+0x2e4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d041      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a83      	ldr	r2, [pc, #524]	; (8006790 <I2C_Slave_ISR_DMA+0x2e8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d03b      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a81      	ldr	r2, [pc, #516]	; (8006794 <I2C_Slave_ISR_DMA+0x2ec>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d035      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a7f      	ldr	r2, [pc, #508]	; (8006798 <I2C_Slave_ISR_DMA+0x2f0>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d02f      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a7d      	ldr	r2, [pc, #500]	; (800679c <I2C_Slave_ISR_DMA+0x2f4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d029      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a7b      	ldr	r2, [pc, #492]	; (80067a0 <I2C_Slave_ISR_DMA+0x2f8>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d023      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a79      	ldr	r2, [pc, #484]	; (80067a4 <I2C_Slave_ISR_DMA+0x2fc>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01d      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a77      	ldr	r2, [pc, #476]	; (80067a8 <I2C_Slave_ISR_DMA+0x300>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d017      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a75      	ldr	r2, [pc, #468]	; (80067ac <I2C_Slave_ISR_DMA+0x304>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d011      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a73      	ldr	r2, [pc, #460]	; (80067b0 <I2C_Slave_ISR_DMA+0x308>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00b      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a71      	ldr	r2, [pc, #452]	; (80067b4 <I2C_Slave_ISR_DMA+0x30c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d005      	beq.n	80065fe <I2C_Slave_ISR_DMA+0x156>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a6f      	ldr	r2, [pc, #444]	; (80067b8 <I2C_Slave_ISR_DMA+0x310>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d109      	bne.n	8006612 <I2C_Slave_ISR_DMA+0x16a>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	bf0c      	ite	eq
 800660a:	2301      	moveq	r3, #1
 800660c:	2300      	movne	r3, #0
 800660e:	b2db      	uxtb	r3, r3
 8006610:	e008      	b.n	8006624 <I2C_Slave_ISR_DMA+0x17c>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	bf0c      	ite	eq
 800661e:	2301      	moveq	r3, #1
 8006620:	2300      	movne	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8006628:	2301      	movs	r3, #1
 800662a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	2b00      	cmp	r3, #0
 8006632:	d07c      	beq.n	800672e <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	0b9b      	lsrs	r3, r3, #14
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d076      	beq.n	800672e <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a4d      	ldr	r2, [pc, #308]	; (800677c <I2C_Slave_ISR_DMA+0x2d4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d059      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a4b      	ldr	r2, [pc, #300]	; (8006780 <I2C_Slave_ISR_DMA+0x2d8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d053      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a49      	ldr	r2, [pc, #292]	; (8006784 <I2C_Slave_ISR_DMA+0x2dc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d04d      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a47      	ldr	r2, [pc, #284]	; (8006788 <I2C_Slave_ISR_DMA+0x2e0>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d047      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a45      	ldr	r2, [pc, #276]	; (800678c <I2C_Slave_ISR_DMA+0x2e4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d041      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a43      	ldr	r2, [pc, #268]	; (8006790 <I2C_Slave_ISR_DMA+0x2e8>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d03b      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a41      	ldr	r2, [pc, #260]	; (8006794 <I2C_Slave_ISR_DMA+0x2ec>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d035      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a3f      	ldr	r2, [pc, #252]	; (8006798 <I2C_Slave_ISR_DMA+0x2f0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d02f      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a3d      	ldr	r2, [pc, #244]	; (800679c <I2C_Slave_ISR_DMA+0x2f4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d029      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a3b      	ldr	r2, [pc, #236]	; (80067a0 <I2C_Slave_ISR_DMA+0x2f8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d023      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a39      	ldr	r2, [pc, #228]	; (80067a4 <I2C_Slave_ISR_DMA+0x2fc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d01d      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a37      	ldr	r2, [pc, #220]	; (80067a8 <I2C_Slave_ISR_DMA+0x300>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d017      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a35      	ldr	r2, [pc, #212]	; (80067ac <I2C_Slave_ISR_DMA+0x304>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d011      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a33      	ldr	r2, [pc, #204]	; (80067b0 <I2C_Slave_ISR_DMA+0x308>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00b      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a31      	ldr	r2, [pc, #196]	; (80067b4 <I2C_Slave_ISR_DMA+0x30c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d005      	beq.n	8006700 <I2C_Slave_ISR_DMA+0x258>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a2f      	ldr	r2, [pc, #188]	; (80067b8 <I2C_Slave_ISR_DMA+0x310>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d109      	bne.n	8006714 <I2C_Slave_ISR_DMA+0x26c>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	bf0c      	ite	eq
 800670c:	2301      	moveq	r3, #1
 800670e:	2300      	movne	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	e008      	b.n	8006726 <I2C_Slave_ISR_DMA+0x27e>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	bf0c      	ite	eq
 8006720:	2301      	moveq	r3, #1
 8006722:	2300      	movne	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 800672a:	2301      	movs	r3, #1
 800672c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d148      	bne.n	80067c6 <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b28      	cmp	r3, #40	; 0x28
 800673e:	d108      	bne.n	8006752 <I2C_Slave_ISR_DMA+0x2aa>
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006746:	d104      	bne.n	8006752 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fd16 	bl	800717c <I2C_ITListenCplt>
 8006750:	e068      	b.n	8006824 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b29      	cmp	r3, #41	; 0x29
 800675c:	d12e      	bne.n	80067bc <I2C_Slave_ISR_DMA+0x314>
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006764:	d02a      	beq.n	80067bc <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2210      	movs	r2, #16
 800676c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fe51 	bl	8007416 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f9e0 	bl	8006b3a <I2C_ITSlaveSeqCplt>
 800677a:	e053      	b.n	8006824 <I2C_Slave_ISR_DMA+0x37c>
 800677c:	40020010 	.word	0x40020010
 8006780:	40020028 	.word	0x40020028
 8006784:	40020040 	.word	0x40020040
 8006788:	40020058 	.word	0x40020058
 800678c:	40020070 	.word	0x40020070
 8006790:	40020088 	.word	0x40020088
 8006794:	400200a0 	.word	0x400200a0
 8006798:	400200b8 	.word	0x400200b8
 800679c:	40020410 	.word	0x40020410
 80067a0:	40020428 	.word	0x40020428
 80067a4:	40020440 	.word	0x40020440
 80067a8:	40020458 	.word	0x40020458
 80067ac:	40020470 	.word	0x40020470
 80067b0:	40020488 	.word	0x40020488
 80067b4:	400204a0 	.word	0x400204a0
 80067b8:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2210      	movs	r2, #16
 80067c2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80067c4:	e034      	b.n	8006830 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2210      	movs	r2, #16
 80067cc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d2:	f043 0204 	orr.w	r2, r3, #4
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <I2C_Slave_ISR_DMA+0x348>
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067ee:	d11f      	bne.n	8006830 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	2b21      	cmp	r3, #33	; 0x21
 80067f4:	d002      	beq.n	80067fc <I2C_Slave_ISR_DMA+0x354>
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
 80067f8:	2b29      	cmp	r3, #41	; 0x29
 80067fa:	d103      	bne.n	8006804 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2221      	movs	r2, #33	; 0x21
 8006800:	631a      	str	r2, [r3, #48]	; 0x30
 8006802:	e008      	b.n	8006816 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b22      	cmp	r3, #34	; 0x22
 8006808:	d002      	beq.n	8006810 <I2C_Slave_ISR_DMA+0x368>
 800680a:	7dfb      	ldrb	r3, [r7, #23]
 800680c:	2b2a      	cmp	r3, #42	; 0x2a
 800680e:	d102      	bne.n	8006816 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2222      	movs	r2, #34	; 0x22
 8006814:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681a:	4619      	mov	r1, r3
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 fd03 	bl	8007228 <I2C_ITError>
      if (treatdmanack == 1U)
 8006822:	e005      	b.n	8006830 <I2C_Slave_ISR_DMA+0x388>
 8006824:	e004      	b.n	8006830 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2210      	movs	r2, #16
 800682c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800682e:	e011      	b.n	8006854 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8006830:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006832:	e00f      	b.n	8006854 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	08db      	lsrs	r3, r3, #3
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b00      	cmp	r3, #0
 800683e:	d009      	beq.n	8006854 <I2C_Slave_ISR_DMA+0x3ac>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	08db      	lsrs	r3, r3, #3
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	2b00      	cmp	r3, #0
 800684a:	d003      	beq.n	8006854 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 f8b2 	bl	80069b8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop

08006868 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af02      	add	r7, sp, #8
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	4608      	mov	r0, r1
 8006872:	4611      	mov	r1, r2
 8006874:	461a      	mov	r2, r3
 8006876:	4603      	mov	r3, r0
 8006878:	817b      	strh	r3, [r7, #10]
 800687a:	460b      	mov	r3, r1
 800687c:	813b      	strh	r3, [r7, #8]
 800687e:	4613      	mov	r3, r2
 8006880:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006882:	88fb      	ldrh	r3, [r7, #6]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	8979      	ldrh	r1, [r7, #10]
 8006888:	4b20      	ldr	r3, [pc, #128]	; (800690c <I2C_RequestMemoryWrite+0xa4>)
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f001 f8a7 	bl	80079e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	69b9      	ldr	r1, [r7, #24]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 ffc0 	bl	8007820 <I2C_WaitOnTXISFlagUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e02c      	b.n	8006904 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d105      	bne.n	80068bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068b0:	893b      	ldrh	r3, [r7, #8]
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	629a      	str	r2, [r3, #40]	; 0x28
 80068ba:	e015      	b.n	80068e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80068bc:	893b      	ldrh	r3, [r7, #8]
 80068be:	0a1b      	lsrs	r3, r3, #8
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	69b9      	ldr	r1, [r7, #24]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 ffa6 	bl	8007820 <I2C_WaitOnTXISFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d001      	beq.n	80068de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e012      	b.n	8006904 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068de:	893b      	ldrh	r3, [r7, #8]
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	9300      	str	r3, [sp, #0]
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2200      	movs	r2, #0
 80068f0:	2180      	movs	r1, #128	; 0x80
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 ff54 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	80002000 	.word	0x80002000

08006910 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	4608      	mov	r0, r1
 800691a:	4611      	mov	r1, r2
 800691c:	461a      	mov	r2, r3
 800691e:	4603      	mov	r3, r0
 8006920:	817b      	strh	r3, [r7, #10]
 8006922:	460b      	mov	r3, r1
 8006924:	813b      	strh	r3, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800692a:	88fb      	ldrh	r3, [r7, #6]
 800692c:	b2da      	uxtb	r2, r3
 800692e:	8979      	ldrh	r1, [r7, #10]
 8006930:	4b20      	ldr	r3, [pc, #128]	; (80069b4 <I2C_RequestMemoryRead+0xa4>)
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	2300      	movs	r3, #0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f001 f854 	bl	80079e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	69b9      	ldr	r1, [r7, #24]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 ff6d 	bl	8007820 <I2C_WaitOnTXISFlagUntilTimeout>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d001      	beq.n	8006950 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e02c      	b.n	80069aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006950:	88fb      	ldrh	r3, [r7, #6]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d105      	bne.n	8006962 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006956:	893b      	ldrh	r3, [r7, #8]
 8006958:	b2da      	uxtb	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	629a      	str	r2, [r3, #40]	; 0x28
 8006960:	e015      	b.n	800698e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006962:	893b      	ldrh	r3, [r7, #8]
 8006964:	0a1b      	lsrs	r3, r3, #8
 8006966:	b29b      	uxth	r3, r3
 8006968:	b2da      	uxtb	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	69b9      	ldr	r1, [r7, #24]
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 ff53 	bl	8007820 <I2C_WaitOnTXISFlagUntilTimeout>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e012      	b.n	80069aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006984:	893b      	ldrh	r3, [r7, #8]
 8006986:	b2da      	uxtb	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	2200      	movs	r2, #0
 8006996:	2140      	movs	r1, #64	; 0x40
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 ff01 	bl	80077a0 <I2C_WaitOnFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e000      	b.n	80069aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	80002000 	.word	0x80002000

080069b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069ce:	2b28      	cmp	r3, #40	; 0x28
 80069d0:	d16a      	bne.n	8006aa8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	0c1b      	lsrs	r3, r3, #16
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80069f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006a0c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d138      	bne.n	8006a88 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006a16:	897b      	ldrh	r3, [r7, #10]
 8006a18:	09db      	lsrs	r3, r3, #7
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	89bb      	ldrh	r3, [r7, #12]
 8006a1e:	4053      	eors	r3, r2
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	f003 0306 	and.w	r3, r3, #6
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d11c      	bne.n	8006a64 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006a2a:	897b      	ldrh	r3, [r7, #10]
 8006a2c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d13b      	bne.n	8006ab8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2208      	movs	r2, #8
 8006a4c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a56:	89ba      	ldrh	r2, [r7, #12]
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff faf7 	bl	8006050 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a62:	e029      	b.n	8006ab8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006a64:	893b      	ldrh	r3, [r7, #8]
 8006a66:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 f84b 	bl	8007b08 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a7a:	89ba      	ldrh	r2, [r7, #12]
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7ff fae5 	bl	8006050 <HAL_I2C_AddrCallback>
}
 8006a86:	e017      	b.n	8006ab8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f83b 	bl	8007b08 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a9a:	89ba      	ldrh	r2, [r7, #12]
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff fad5 	bl	8006050 <HAL_I2C_AddrCallback>
}
 8006aa6:	e007      	b.n	8006ab8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2208      	movs	r2, #8
 8006aae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006ab8:	bf00      	nop
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b21      	cmp	r3, #33	; 0x21
 8006ada:	d115      	bne.n	8006b08 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2211      	movs	r2, #17
 8006ae8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006af0:	2101      	movs	r1, #1
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f001 f808 	bl	8007b08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7ff fa7d 	bl	8006000 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b06:	e014      	b.n	8006b32 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2212      	movs	r2, #18
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b1c:	2102      	movs	r1, #2
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fff2 	bl	8007b08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fa71 	bl	8006014 <HAL_I2C_MasterRxCpltCallback>
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	0b9b      	lsrs	r3, r3, #14
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d008      	beq.n	8006b70 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	e00d      	b.n	8006b8c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	0bdb      	lsrs	r3, r3, #15
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d007      	beq.n	8006b8c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b8a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b29      	cmp	r3, #41	; 0x29
 8006b96:	d112      	bne.n	8006bbe <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2228      	movs	r2, #40	; 0x28
 8006b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2221      	movs	r2, #33	; 0x21
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 ffad 	bl	8007b08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff fa36 	bl	8006028 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006bbc:	e017      	b.n	8006bee <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8006bc8:	d111      	bne.n	8006bee <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2228      	movs	r2, #40	; 0x28
 8006bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2222      	movs	r2, #34	; 0x22
 8006bd6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006bd8:	2102      	movs	r1, #2
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 ff94 	bl	8007b08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f7ff fa27 	bl	800603c <HAL_I2C_SlaveRxCpltCallback>
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b21      	cmp	r3, #33	; 0x21
 8006c18:	d107      	bne.n	8006c2a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 ff73 	bl	8007b08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2211      	movs	r2, #17
 8006c26:	631a      	str	r2, [r3, #48]	; 0x30
 8006c28:	e00c      	b.n	8006c44 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b22      	cmp	r3, #34	; 0x22
 8006c34:	d106      	bne.n	8006c44 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c36:	2102      	movs	r1, #2
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 ff65 	bl	8007b08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2212      	movs	r2, #18
 8006c42:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6859      	ldr	r1, [r3, #4]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4b4d      	ldr	r3, [pc, #308]	; (8006d84 <I2C_ITMasterCplt+0x18c>)
 8006c50:	400b      	ands	r3, r1
 8006c52:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a4a      	ldr	r2, [pc, #296]	; (8006d88 <I2C_ITMasterCplt+0x190>)
 8006c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	091b      	lsrs	r3, r3, #4
 8006c64:	f003 0301 	and.w	r3, r3, #1
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d009      	beq.n	8006c80 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2210      	movs	r2, #16
 8006c72:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c78:	f043 0204 	orr.w	r2, r3, #4
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b60      	cmp	r3, #96	; 0x60
 8006c8a:	d10b      	bne.n	8006ca4 <I2C_ITMasterCplt+0xac>
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	089b      	lsrs	r3, r3, #2
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fbb6 	bl	8007416 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cae:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b60      	cmp	r3, #96	; 0x60
 8006cba:	d002      	beq.n	8006cc2 <I2C_ITMasterCplt+0xca>
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d006      	beq.n	8006cd0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 faad 	bl	8007228 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cce:	e054      	b.n	8006d7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b21      	cmp	r3, #33	; 0x21
 8006cda:	d124      	bne.n	8006d26 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b40      	cmp	r3, #64	; 0x40
 8006cf4:	d10b      	bne.n	8006d0e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff f9ba 	bl	8006080 <HAL_I2C_MemTxCpltCallback>
}
 8006d0c:	e035      	b.n	8006d7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff f96e 	bl	8006000 <HAL_I2C_MasterTxCpltCallback>
}
 8006d24:	e029      	b.n	8006d7a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b22      	cmp	r3, #34	; 0x22
 8006d30:	d123      	bne.n	8006d7a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b40      	cmp	r3, #64	; 0x40
 8006d4a:	d10b      	bne.n	8006d64 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7fa fdf1 	bl	8001944 <HAL_I2C_MemRxCpltCallback>
}
 8006d62:	e00a      	b.n	8006d7a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff f94d 	bl	8006014 <HAL_I2C_MasterRxCpltCallback>
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	fe00e800 	.word	0xfe00e800
 8006d88:	ffff0000 	.word	0xffff0000

08006d8c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006da8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2220      	movs	r2, #32
 8006db0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	2b21      	cmp	r3, #33	; 0x21
 8006db6:	d002      	beq.n	8006dbe <I2C_ITSlaveCplt+0x32>
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b29      	cmp	r3, #41	; 0x29
 8006dbc:	d108      	bne.n	8006dd0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006dbe:	f248 0101 	movw	r1, #32769	; 0x8001
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fea0 	bl	8007b08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2221      	movs	r2, #33	; 0x21
 8006dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8006dce:	e00d      	b.n	8006dec <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b22      	cmp	r3, #34	; 0x22
 8006dd4:	d002      	beq.n	8006ddc <I2C_ITSlaveCplt+0x50>
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8006dda:	d107      	bne.n	8006dec <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006ddc:	f248 0102 	movw	r1, #32770	; 0x8002
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fe91 	bl	8007b08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2222      	movs	r2, #34	; 0x22
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6859      	ldr	r1, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4b80      	ldr	r3, [pc, #512]	; (8007008 <I2C_ITSlaveCplt+0x27c>)
 8006e08:	400b      	ands	r3, r1
 8006e0a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fb02 	bl	8007416 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	0b9b      	lsrs	r3, r3, #14
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d07a      	beq.n	8006f14 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e2c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 8111 	beq.w	800705a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a73      	ldr	r2, [pc, #460]	; (800700c <I2C_ITSlaveCplt+0x280>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d059      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a71      	ldr	r2, [pc, #452]	; (8007010 <I2C_ITSlaveCplt+0x284>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d053      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a6f      	ldr	r2, [pc, #444]	; (8007014 <I2C_ITSlaveCplt+0x288>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d04d      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a6d      	ldr	r2, [pc, #436]	; (8007018 <I2C_ITSlaveCplt+0x28c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d047      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a6b      	ldr	r2, [pc, #428]	; (800701c <I2C_ITSlaveCplt+0x290>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d041      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a69      	ldr	r2, [pc, #420]	; (8007020 <I2C_ITSlaveCplt+0x294>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d03b      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a67      	ldr	r2, [pc, #412]	; (8007024 <I2C_ITSlaveCplt+0x298>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d035      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a65      	ldr	r2, [pc, #404]	; (8007028 <I2C_ITSlaveCplt+0x29c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d02f      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a63      	ldr	r2, [pc, #396]	; (800702c <I2C_ITSlaveCplt+0x2a0>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d029      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a61      	ldr	r2, [pc, #388]	; (8007030 <I2C_ITSlaveCplt+0x2a4>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d023      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a5f      	ldr	r2, [pc, #380]	; (8007034 <I2C_ITSlaveCplt+0x2a8>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d01d      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a5d      	ldr	r2, [pc, #372]	; (8007038 <I2C_ITSlaveCplt+0x2ac>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d017      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a5b      	ldr	r2, [pc, #364]	; (800703c <I2C_ITSlaveCplt+0x2b0>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d011      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a59      	ldr	r2, [pc, #356]	; (8007040 <I2C_ITSlaveCplt+0x2b4>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d00b      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a57      	ldr	r2, [pc, #348]	; (8007044 <I2C_ITSlaveCplt+0x2b8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d005      	beq.n	8006ef8 <I2C_ITSlaveCplt+0x16c>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a55      	ldr	r2, [pc, #340]	; (8007048 <I2C_ITSlaveCplt+0x2bc>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d105      	bne.n	8006f04 <I2C_ITSlaveCplt+0x178>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	e004      	b.n	8006f0e <I2C_ITSlaveCplt+0x182>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	8553      	strh	r3, [r2, #42]	; 0x2a
 8006f12:	e0a2      	b.n	800705a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	0bdb      	lsrs	r3, r3, #15
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 809c 	beq.w	800705a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f30:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 808f 	beq.w	800705a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a32      	ldr	r2, [pc, #200]	; (800700c <I2C_ITSlaveCplt+0x280>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d059      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a30      	ldr	r2, [pc, #192]	; (8007010 <I2C_ITSlaveCplt+0x284>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d053      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a2e      	ldr	r2, [pc, #184]	; (8007014 <I2C_ITSlaveCplt+0x288>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d04d      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2c      	ldr	r2, [pc, #176]	; (8007018 <I2C_ITSlaveCplt+0x28c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d047      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a2a      	ldr	r2, [pc, #168]	; (800701c <I2C_ITSlaveCplt+0x290>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d041      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a28      	ldr	r2, [pc, #160]	; (8007020 <I2C_ITSlaveCplt+0x294>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d03b      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a26      	ldr	r2, [pc, #152]	; (8007024 <I2C_ITSlaveCplt+0x298>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d035      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a24      	ldr	r2, [pc, #144]	; (8007028 <I2C_ITSlaveCplt+0x29c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d02f      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a22      	ldr	r2, [pc, #136]	; (800702c <I2C_ITSlaveCplt+0x2a0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d029      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a20      	ldr	r2, [pc, #128]	; (8007030 <I2C_ITSlaveCplt+0x2a4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d023      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a1e      	ldr	r2, [pc, #120]	; (8007034 <I2C_ITSlaveCplt+0x2a8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d01d      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1c      	ldr	r2, [pc, #112]	; (8007038 <I2C_ITSlaveCplt+0x2ac>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d017      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a1a      	ldr	r2, [pc, #104]	; (800703c <I2C_ITSlaveCplt+0x2b0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d011      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a18      	ldr	r2, [pc, #96]	; (8007040 <I2C_ITSlaveCplt+0x2b4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d00b      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a16      	ldr	r2, [pc, #88]	; (8007044 <I2C_ITSlaveCplt+0x2b8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d005      	beq.n	8006ffc <I2C_ITSlaveCplt+0x270>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a14      	ldr	r2, [pc, #80]	; (8007048 <I2C_ITSlaveCplt+0x2bc>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d127      	bne.n	800704c <I2C_ITSlaveCplt+0x2c0>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	b29b      	uxth	r3, r3
 8007006:	e026      	b.n	8007056 <I2C_ITSlaveCplt+0x2ca>
 8007008:	fe00e800 	.word	0xfe00e800
 800700c:	40020010 	.word	0x40020010
 8007010:	40020028 	.word	0x40020028
 8007014:	40020040 	.word	0x40020040
 8007018:	40020058 	.word	0x40020058
 800701c:	40020070 	.word	0x40020070
 8007020:	40020088 	.word	0x40020088
 8007024:	400200a0 	.word	0x400200a0
 8007028:	400200b8 	.word	0x400200b8
 800702c:	40020410 	.word	0x40020410
 8007030:	40020428 	.word	0x40020428
 8007034:	40020440 	.word	0x40020440
 8007038:	40020458 	.word	0x40020458
 800703c:	40020470 	.word	0x40020470
 8007040:	40020488 	.word	0x40020488
 8007044:	400204a0 	.word	0x400204a0
 8007048:	400204b8 	.word	0x400204b8
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	b29b      	uxth	r3, r3
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	089b      	lsrs	r3, r3, #2
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	2b00      	cmp	r3, #0
 8007064:	d020      	beq.n	80070a8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f023 0304 	bic.w	r3, r3, #4
 800706c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00c      	beq.n	80070a8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709e:	b29b      	uxth	r3, r3
 80070a0:	3b01      	subs	r3, #1
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d005      	beq.n	80070be <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	f043 0204 	orr.w	r2, r3, #4
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d010      	beq.n	80070f6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f8a4 	bl	8007228 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b28      	cmp	r3, #40	; 0x28
 80070ea:	d141      	bne.n	8007170 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80070ec:	6979      	ldr	r1, [r7, #20]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f844 	bl	800717c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070f4:	e03c      	b.n	8007170 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070fe:	d014      	beq.n	800712a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7ff fd1a 	bl	8006b3a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a1b      	ldr	r2, [pc, #108]	; (8007178 <I2C_ITSlaveCplt+0x3ec>)
 800710a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2220      	movs	r2, #32
 8007110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fe ffa2 	bl	800606c <HAL_I2C_ListenCpltCallback>
}
 8007128:	e022      	b.n	8007170 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b22      	cmp	r3, #34	; 0x22
 8007134:	d10e      	bne.n	8007154 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2220      	movs	r2, #32
 800713a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7fe ff75 	bl	800603c <HAL_I2C_SlaveRxCpltCallback>
}
 8007152:	e00d      	b.n	8007170 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fe ff5c 	bl	8006028 <HAL_I2C_SlaveTxCpltCallback>
}
 8007170:	bf00      	nop
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	ffff0000 	.word	0xffff0000

0800717c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a26      	ldr	r2, [pc, #152]	; (8007224 <I2C_ITListenCplt+0xa8>)
 800718a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2220      	movs	r2, #32
 8007196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	089b      	lsrs	r3, r3, #2
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d022      	beq.n	80071fa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d012      	beq.n	80071fa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071d8:	3b01      	subs	r3, #1
 80071da:	b29a      	uxth	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f2:	f043 0204 	orr.w	r2, r3, #4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071fa:	f248 0103 	movw	r1, #32771	; 0x8003
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fc82 	bl	8007b08 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2210      	movs	r2, #16
 800720a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7fe ff29 	bl	800606c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	ffff0000 	.word	0xffff0000

08007228 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a5d      	ldr	r2, [pc, #372]	; (80073bc <I2C_ITError+0x194>)
 8007246:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	2b28      	cmp	r3, #40	; 0x28
 800725e:	d005      	beq.n	800726c <I2C_ITError+0x44>
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	2b29      	cmp	r3, #41	; 0x29
 8007264:	d002      	beq.n	800726c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	2b2a      	cmp	r3, #42	; 0x2a
 800726a:	d10b      	bne.n	8007284 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800726c:	2103      	movs	r1, #3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fc4a 	bl	8007b08 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2228      	movs	r2, #40	; 0x28
 8007278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a50      	ldr	r2, [pc, #320]	; (80073c0 <I2C_ITError+0x198>)
 8007280:	635a      	str	r2, [r3, #52]	; 0x34
 8007282:	e011      	b.n	80072a8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007284:	f248 0103 	movw	r1, #32771	; 0x8003
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fc3d 	bl	8007b08 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b60      	cmp	r3, #96	; 0x60
 8007298:	d003      	beq.n	80072a2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2220      	movs	r2, #32
 800729e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d039      	beq.n	800732a <I2C_ITError+0x102>
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b11      	cmp	r3, #17
 80072ba:	d002      	beq.n	80072c2 <I2C_ITError+0x9a>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b21      	cmp	r3, #33	; 0x21
 80072c0:	d133      	bne.n	800732a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d0:	d107      	bne.n	80072e2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072e0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fd fcee 	bl	8004cc8 <HAL_DMA_GetState>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d017      	beq.n	8007322 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	4a33      	ldr	r2, [pc, #204]	; (80073c4 <I2C_ITError+0x19c>)
 80072f8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007306:	4618      	mov	r0, r3
 8007308:	f7fc fb70 	bl	80039ec <HAL_DMA_Abort_IT>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d04d      	beq.n	80073ae <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007320:	e045      	b.n	80073ae <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f850 	bl	80073c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007328:	e041      	b.n	80073ae <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732e:	2b00      	cmp	r3, #0
 8007330:	d039      	beq.n	80073a6 <I2C_ITError+0x17e>
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b12      	cmp	r3, #18
 8007336:	d002      	beq.n	800733e <I2C_ITError+0x116>
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b22      	cmp	r3, #34	; 0x22
 800733c:	d133      	bne.n	80073a6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800734c:	d107      	bne.n	800735e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800735c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007362:	4618      	mov	r0, r3
 8007364:	f7fd fcb0 	bl	8004cc8 <HAL_DMA_GetState>
 8007368:	4603      	mov	r3, r0
 800736a:	2b01      	cmp	r3, #1
 800736c:	d017      	beq.n	800739e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	4a14      	ldr	r2, [pc, #80]	; (80073c4 <I2C_ITError+0x19c>)
 8007374:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007382:	4618      	mov	r0, r3
 8007384:	f7fc fb32 	bl	80039ec <HAL_DMA_Abort_IT>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d011      	beq.n	80073b2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007398:	4610      	mov	r0, r2
 800739a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800739c:	e009      	b.n	80073b2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f812 	bl	80073c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073a4:	e005      	b.n	80073b2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f80e 	bl	80073c8 <I2C_TreatErrorCallback>
  }
}
 80073ac:	e002      	b.n	80073b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80073ae:	bf00      	nop
 80073b0:	e000      	b.n	80073b4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073b2:	bf00      	nop
}
 80073b4:	bf00      	nop
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	ffff0000 	.word	0xffff0000
 80073c0:	080060bd 	.word	0x080060bd
 80073c4:	08007765 	.word	0x08007765

080073c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b60      	cmp	r3, #96	; 0x60
 80073da:	d10e      	bne.n	80073fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7fe fe58 	bl	80060a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073f8:	e009      	b.n	800740e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7fe fe43 	bl	8006094 <HAL_I2C_ErrorCallback>
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b02      	cmp	r3, #2
 800742a:	d103      	bne.n	8007434 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2200      	movs	r2, #0
 8007432:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b01      	cmp	r3, #1
 8007440:	d007      	beq.n	8007452 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	699a      	ldr	r2, [r3, #24]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f042 0201 	orr.w	r2, r2, #1
 8007450:	619a      	str	r2, [r3, #24]
  }
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800747a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d104      	bne.n	8007490 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007486:	2120      	movs	r1, #32
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 fad9 	bl	8007a40 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800748e:	e02d      	b.n	80074ec <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007498:	441a      	add	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	2bff      	cmp	r3, #255	; 0xff
 80074a6:	d903      	bls.n	80074b0 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	22ff      	movs	r2, #255	; 0xff
 80074ac:	851a      	strh	r2, [r3, #40]	; 0x28
 80074ae:	e004      	b.n	80074ba <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b4:	b29a      	uxth	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3324      	adds	r3, #36	; 0x24
 80074c4:	4619      	mov	r1, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	461a      	mov	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d0:	f7fb fd04 	bl	8002edc <HAL_DMA_Start_IT>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d004      	beq.n	80074e4 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80074da:	2110      	movs	r1, #16
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f7ff fea3 	bl	8007228 <I2C_ITError>
}
 80074e2:	e003      	b.n	80074ec <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80074e4:	2140      	movs	r1, #64	; 0x40
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 faaa 	bl	8007a40 <I2C_Enable_IRQ>
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007504:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750a:	2b00      	cmp	r3, #0
 800750c:	d076      	beq.n	80075fc <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a83      	ldr	r2, [pc, #524]	; (8007724 <I2C_DMAError+0x230>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d059      	beq.n	80075ce <I2C_DMAError+0xda>
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a81      	ldr	r2, [pc, #516]	; (8007728 <I2C_DMAError+0x234>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d053      	beq.n	80075ce <I2C_DMAError+0xda>
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a7f      	ldr	r2, [pc, #508]	; (800772c <I2C_DMAError+0x238>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d04d      	beq.n	80075ce <I2C_DMAError+0xda>
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a7d      	ldr	r2, [pc, #500]	; (8007730 <I2C_DMAError+0x23c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d047      	beq.n	80075ce <I2C_DMAError+0xda>
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a7b      	ldr	r2, [pc, #492]	; (8007734 <I2C_DMAError+0x240>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d041      	beq.n	80075ce <I2C_DMAError+0xda>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a79      	ldr	r2, [pc, #484]	; (8007738 <I2C_DMAError+0x244>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d03b      	beq.n	80075ce <I2C_DMAError+0xda>
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a77      	ldr	r2, [pc, #476]	; (800773c <I2C_DMAError+0x248>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d035      	beq.n	80075ce <I2C_DMAError+0xda>
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a75      	ldr	r2, [pc, #468]	; (8007740 <I2C_DMAError+0x24c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d02f      	beq.n	80075ce <I2C_DMAError+0xda>
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a73      	ldr	r2, [pc, #460]	; (8007744 <I2C_DMAError+0x250>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d029      	beq.n	80075ce <I2C_DMAError+0xda>
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a71      	ldr	r2, [pc, #452]	; (8007748 <I2C_DMAError+0x254>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d023      	beq.n	80075ce <I2C_DMAError+0xda>
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a6f      	ldr	r2, [pc, #444]	; (800774c <I2C_DMAError+0x258>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d01d      	beq.n	80075ce <I2C_DMAError+0xda>
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a6d      	ldr	r2, [pc, #436]	; (8007750 <I2C_DMAError+0x25c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d017      	beq.n	80075ce <I2C_DMAError+0xda>
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a6b      	ldr	r2, [pc, #428]	; (8007754 <I2C_DMAError+0x260>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d011      	beq.n	80075ce <I2C_DMAError+0xda>
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a69      	ldr	r2, [pc, #420]	; (8007758 <I2C_DMAError+0x264>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00b      	beq.n	80075ce <I2C_DMAError+0xda>
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a67      	ldr	r2, [pc, #412]	; (800775c <I2C_DMAError+0x268>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d005      	beq.n	80075ce <I2C_DMAError+0xda>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a65      	ldr	r2, [pc, #404]	; (8007760 <I2C_DMAError+0x26c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d109      	bne.n	80075e2 <I2C_DMAError+0xee>
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bf0c      	ite	eq
 80075da:	2301      	moveq	r3, #1
 80075dc:	2300      	movne	r3, #0
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	e008      	b.n	80075f4 <I2C_DMAError+0x100>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	bf0c      	ite	eq
 80075ee:	2301      	moveq	r3, #1
 80075f0:	2300      	movne	r3, #0
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80075f8:	2301      	movs	r3, #1
 80075fa:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d076      	beq.n	80076f2 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a46      	ldr	r2, [pc, #280]	; (8007724 <I2C_DMAError+0x230>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d059      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a44      	ldr	r2, [pc, #272]	; (8007728 <I2C_DMAError+0x234>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d053      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a42      	ldr	r2, [pc, #264]	; (800772c <I2C_DMAError+0x238>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d04d      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a40      	ldr	r2, [pc, #256]	; (8007730 <I2C_DMAError+0x23c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d047      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a3e      	ldr	r2, [pc, #248]	; (8007734 <I2C_DMAError+0x240>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d041      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a3c      	ldr	r2, [pc, #240]	; (8007738 <I2C_DMAError+0x244>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d03b      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a3a      	ldr	r2, [pc, #232]	; (800773c <I2C_DMAError+0x248>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d035      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a38      	ldr	r2, [pc, #224]	; (8007740 <I2C_DMAError+0x24c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d02f      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a36      	ldr	r2, [pc, #216]	; (8007744 <I2C_DMAError+0x250>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d029      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a34      	ldr	r2, [pc, #208]	; (8007748 <I2C_DMAError+0x254>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d023      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a32      	ldr	r2, [pc, #200]	; (800774c <I2C_DMAError+0x258>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d01d      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a30      	ldr	r2, [pc, #192]	; (8007750 <I2C_DMAError+0x25c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d017      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a2e      	ldr	r2, [pc, #184]	; (8007754 <I2C_DMAError+0x260>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d011      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a2c      	ldr	r2, [pc, #176]	; (8007758 <I2C_DMAError+0x264>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d00b      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a2a      	ldr	r2, [pc, #168]	; (800775c <I2C_DMAError+0x268>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d005      	beq.n	80076c4 <I2C_DMAError+0x1d0>
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a28      	ldr	r2, [pc, #160]	; (8007760 <I2C_DMAError+0x26c>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d109      	bne.n	80076d8 <I2C_DMAError+0x1e4>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	bf0c      	ite	eq
 80076d0:	2301      	moveq	r3, #1
 80076d2:	2300      	movne	r3, #0
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	e008      	b.n	80076ea <I2C_DMAError+0x1f6>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	bf0c      	ite	eq
 80076e4:	2301      	moveq	r3, #1
 80076e6:	2300      	movne	r3, #0
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 80076ee:	2301      	movs	r3, #1
 80076f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fd faf6 	bl	8004ce4 <HAL_DMA_GetError>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d00e      	beq.n	800771c <I2C_DMAError+0x228>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007712:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007714:	2110      	movs	r1, #16
 8007716:	68b8      	ldr	r0, [r7, #8]
 8007718:	f7ff fd86 	bl	8007228 <I2C_ITError>
  }
}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	40020010 	.word	0x40020010
 8007728:	40020028 	.word	0x40020028
 800772c:	40020040 	.word	0x40020040
 8007730:	40020058 	.word	0x40020058
 8007734:	40020070 	.word	0x40020070
 8007738:	40020088 	.word	0x40020088
 800773c:	400200a0 	.word	0x400200a0
 8007740:	400200b8 	.word	0x400200b8
 8007744:	40020410 	.word	0x40020410
 8007748:	40020428 	.word	0x40020428
 800774c:	40020440 	.word	0x40020440
 8007750:	40020458 	.word	0x40020458
 8007754:	40020470 	.word	0x40020470
 8007758:	40020488 	.word	0x40020488
 800775c:	400204a0 	.word	0x400204a0
 8007760:	400204b8 	.word	0x400204b8

08007764 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	2200      	movs	r2, #0
 8007780:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778e:	2200      	movs	r2, #0
 8007790:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7ff fe18 	bl	80073c8 <I2C_TreatErrorCallback>
}
 8007798:	bf00      	nop
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4613      	mov	r3, r2
 80077ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077b0:	e022      	b.n	80077f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d01e      	beq.n	80077f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ba:	f7fa fee7 	bl	800258c <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d302      	bcc.n	80077d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d113      	bne.n	80077f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d4:	f043 0220 	orr.w	r2, r3, #32
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e00f      	b.n	8007818 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4013      	ands	r3, r2
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	429a      	cmp	r2, r3
 8007806:	bf0c      	ite	eq
 8007808:	2301      	moveq	r3, #1
 800780a:	2300      	movne	r3, #0
 800780c:	b2db      	uxtb	r3, r3
 800780e:	461a      	mov	r2, r3
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	429a      	cmp	r2, r3
 8007814:	d0cd      	beq.n	80077b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800782c:	e02c      	b.n	8007888 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	68b9      	ldr	r1, [r7, #8]
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 f870 	bl	8007918 <I2C_IsAcknowledgeFailed>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e02a      	b.n	8007898 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007848:	d01e      	beq.n	8007888 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800784a:	f7fa fe9f 	bl	800258c <HAL_GetTick>
 800784e:	4602      	mov	r2, r0
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	429a      	cmp	r2, r3
 8007858:	d302      	bcc.n	8007860 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d113      	bne.n	8007888 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007864:	f043 0220 	orr.w	r2, r3, #32
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2220      	movs	r2, #32
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e007      	b.n	8007898 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b02      	cmp	r3, #2
 8007894:	d1cb      	bne.n	800782e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078ac:	e028      	b.n	8007900 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	68b9      	ldr	r1, [r7, #8]
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 f830 	bl	8007918 <I2C_IsAcknowledgeFailed>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e026      	b.n	8007910 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078c2:	f7fa fe63 	bl	800258c <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d302      	bcc.n	80078d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d113      	bne.n	8007900 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078dc:	f043 0220 	orr.w	r2, r3, #32
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e007      	b.n	8007910 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b20      	cmp	r3, #32
 800790c:	d1cf      	bne.n	80078ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	f003 0310 	and.w	r3, r3, #16
 800792e:	2b10      	cmp	r3, #16
 8007930:	d151      	bne.n	80079d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007932:	e022      	b.n	800797a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	d01e      	beq.n	800797a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800793c:	f7fa fe26 	bl	800258c <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	429a      	cmp	r2, r3
 800794a:	d302      	bcc.n	8007952 <I2C_IsAcknowledgeFailed+0x3a>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d113      	bne.n	800797a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007956:	f043 0220 	orr.w	r2, r3, #32
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2220      	movs	r2, #32
 8007962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e02e      	b.n	80079d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	f003 0320 	and.w	r3, r3, #32
 8007984:	2b20      	cmp	r3, #32
 8007986:	d1d5      	bne.n	8007934 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2210      	movs	r2, #16
 800798e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2220      	movs	r2, #32
 8007996:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f7ff fd3c 	bl	8007416 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6859      	ldr	r1, [r3, #4]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	4b0d      	ldr	r3, [pc, #52]	; (80079e0 <I2C_IsAcknowledgeFailed+0xc8>)
 80079aa:	400b      	ands	r3, r1
 80079ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b2:	f043 0204 	orr.w	r2, r3, #4
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	fe00e800 	.word	0xfe00e800

080079e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	607b      	str	r3, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	817b      	strh	r3, [r7, #10]
 80079f2:	4613      	mov	r3, r2
 80079f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	0d5b      	lsrs	r3, r3, #21
 8007a00:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007a04:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <I2C_TransferConfig+0x58>)
 8007a06:	430b      	orrs	r3, r1
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	ea02 0103 	and.w	r1, r2, r3
 8007a0e:	897b      	ldrh	r3, [r7, #10]
 8007a10:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a14:	7a7b      	ldrb	r3, [r7, #9]
 8007a16:	041b      	lsls	r3, r3, #16
 8007a18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	431a      	orrs	r2, r3
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	431a      	orrs	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007a2e:	bf00      	nop
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	03ff63ff 	.word	0x03ff63ff

08007a40 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a54:	4a2a      	ldr	r2, [pc, #168]	; (8007b00 <I2C_Enable_IRQ+0xc0>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d004      	beq.n	8007a64 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007a5e:	4a29      	ldr	r2, [pc, #164]	; (8007b04 <I2C_Enable_IRQ+0xc4>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d11d      	bne.n	8007aa0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007a64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	da03      	bge.n	8007a74 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007a72:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007a74:	887b      	ldrh	r3, [r7, #2]
 8007a76:	2b10      	cmp	r3, #16
 8007a78:	d103      	bne.n	8007a82 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007a80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007a82:	887b      	ldrh	r3, [r7, #2]
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d103      	bne.n	8007a90 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007a90:	887b      	ldrh	r3, [r7, #2]
 8007a92:	2b40      	cmp	r3, #64	; 0x40
 8007a94:	d125      	bne.n	8007ae2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a9c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007a9e:	e020      	b.n	8007ae2 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007aa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	da03      	bge.n	8007ab0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007aae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007ab0:	887b      	ldrh	r3, [r7, #2]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007ac0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007ac2:	887b      	ldrh	r3, [r7, #2]
 8007ac4:	f003 0302 	and.w	r3, r3, #2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007ad2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ad4:	887b      	ldrh	r3, [r7, #2]
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d103      	bne.n	8007ae2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f043 0320 	orr.w	r3, r3, #32
 8007ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6819      	ldr	r1, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	601a      	str	r2, [r3, #0]
}
 8007af2:	bf00      	nop
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	080062c3 	.word	0x080062c3
 8007b04:	080064a9 	.word	0x080064a9

08007b08 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	460b      	mov	r3, r1
 8007b12:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007b18:	887b      	ldrh	r3, [r7, #2]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00f      	beq.n	8007b42 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007b28:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b36:	2b28      	cmp	r3, #40	; 0x28
 8007b38:	d003      	beq.n	8007b42 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007b40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007b42:	887b      	ldrh	r3, [r7, #2]
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00f      	beq.n	8007b6c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007b52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b60:	2b28      	cmp	r3, #40	; 0x28
 8007b62:	d003      	beq.n	8007b6c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007b6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	da03      	bge.n	8007b7c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007b7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b7c:	887b      	ldrh	r3, [r7, #2]
 8007b7e:	2b10      	cmp	r3, #16
 8007b80:	d103      	bne.n	8007b8a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007b88:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007b8a:	887b      	ldrh	r3, [r7, #2]
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d103      	bne.n	8007b98 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f043 0320 	orr.w	r3, r3, #32
 8007b96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007b98:	887b      	ldrh	r3, [r7, #2]
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	d103      	bne.n	8007ba6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6819      	ldr	r1, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	43da      	mvns	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	400a      	ands	r2, r1
 8007bb6:	601a      	str	r2, [r3, #0]
}
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d138      	bne.n	8007c4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007be4:	2302      	movs	r3, #2
 8007be6:	e032      	b.n	8007c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2224      	movs	r2, #36	; 0x24
 8007bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0201 	bic.w	r2, r2, #1
 8007c06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6819      	ldr	r1, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f042 0201 	orr.w	r2, r2, #1
 8007c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e000      	b.n	8007c4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c4c:	2302      	movs	r3, #2
  }
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b20      	cmp	r3, #32
 8007c6e:	d139      	bne.n	8007ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e033      	b.n	8007ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2224      	movs	r2, #36	; 0x24
 8007c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007cac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0201 	orr.w	r2, r2, #1
 8007cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2220      	movs	r2, #32
 8007cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e000      	b.n	8007ce6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ce4:	2302      	movs	r3, #2
  }
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr
	...

08007cf4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007cfc:	4b19      	ldr	r3, [pc, #100]	; (8007d64 <HAL_PWREx_ConfigSupply+0x70>)
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d00a      	beq.n	8007d1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d08:	4b16      	ldr	r3, [pc, #88]	; (8007d64 <HAL_PWREx_ConfigSupply+0x70>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f003 0307 	and.w	r3, r3, #7
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d001      	beq.n	8007d1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e01f      	b.n	8007d5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e01d      	b.n	8007d5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d1e:	4b11      	ldr	r3, [pc, #68]	; (8007d64 <HAL_PWREx_ConfigSupply+0x70>)
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f023 0207 	bic.w	r2, r3, #7
 8007d26:	490f      	ldr	r1, [pc, #60]	; (8007d64 <HAL_PWREx_ConfigSupply+0x70>)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d2e:	f7fa fc2d 	bl	800258c <HAL_GetTick>
 8007d32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d34:	e009      	b.n	8007d4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d36:	f7fa fc29 	bl	800258c <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d44:	d901      	bls.n	8007d4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e007      	b.n	8007d5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d4a:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <HAL_PWREx_ConfigSupply+0x70>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d56:	d1ee      	bne.n	8007d36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	58024800 	.word	0x58024800

08007d68 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af02      	add	r7, sp, #8
 8007d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007d70:	f7fa fc0c 	bl	800258c <HAL_GetTick>
 8007d74:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e05f      	b.n	8007e40 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d107      	bne.n	8007d9c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7f9 fbb5 	bl	80014fc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007d92:	f241 3188 	movw	r1, #5000	; 0x1388
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f989 	bl	80080ae <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	021a      	lsls	r2, r3, #8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2120      	movs	r1, #32
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f981 	bl	80080ca <QSPI_WaitFlagStateUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007dcc:	7afb      	ldrb	r3, [r7, #11]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d135      	bne.n	8007e3e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <HAL_QSPI_Init+0xe0>)
 8007dda:	4013      	ands	r3, r2
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	6852      	ldr	r2, [r2, #4]
 8007de0:	0611      	lsls	r1, r2, #24
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	68d2      	ldr	r2, [r2, #12]
 8007de6:	4311      	orrs	r1, r2
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	69d2      	ldr	r2, [r2, #28]
 8007dec:	4311      	orrs	r1, r2
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	6a12      	ldr	r2, [r2, #32]
 8007df2:	4311      	orrs	r1, r2
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	6812      	ldr	r2, [r2, #0]
 8007df8:	430b      	orrs	r3, r1
 8007dfa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <HAL_QSPI_Init+0xe4>)
 8007e04:	4013      	ands	r3, r2
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6912      	ldr	r2, [r2, #16]
 8007e0a:	0411      	lsls	r1, r2, #16
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6952      	ldr	r2, [r2, #20]
 8007e10:	4311      	orrs	r1, r2
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6992      	ldr	r2, [r2, #24]
 8007e16:	4311      	orrs	r1, r2
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6812      	ldr	r2, [r2, #0]
 8007e1c:	430b      	orrs	r3, r1
 8007e1e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8007e3e:	7afb      	ldrb	r3, [r7, #11]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	00ffff2f 	.word	0x00ffff2f
 8007e4c:	ffe0f8fe 	.word	0xffe0f8fe

08007e50 <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	; 0x28
 8007e54:	af02      	add	r7, sp, #8
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007e60:	f7fa fb94 	bl	800258c <HAL_GetTick>
 8007e64:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3320      	adds	r3, #32
 8007e6c:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d101      	bne.n	8007e7e <HAL_QSPI_Transmit+0x2e>
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e076      	b.n	8007f6c <HAL_QSPI_Transmit+0x11c>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d165      	bne.n	8007f5e <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d056      	beq.n	8007f4c <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2212      	movs	r2, #18
 8007ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695a      	ldr	r2, [r3, #20]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8007ed2:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8007ed4:	e01b      	b.n	8007f0e <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2201      	movs	r2, #1
 8007ede:	2104      	movs	r1, #4
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f8f2 	bl	80080ca <QSPI_WaitFlagStateUntilTimeout>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8007eea:	7ffb      	ldrb	r3, [r7, #31]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d113      	bne.n	8007f18 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	781a      	ldrb	r2, [r3, #0]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	1e5a      	subs	r2, r3, #1
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1df      	bne.n	8007ed6 <HAL_QSPI_Transmit+0x86>
 8007f16:	e000      	b.n	8007f1a <HAL_QSPI_Transmit+0xca>
          break;
 8007f18:	bf00      	nop
      }

      if (status == HAL_OK)
 8007f1a:	7ffb      	ldrb	r3, [r7, #31]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d110      	bne.n	8007f42 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	2201      	movs	r2, #1
 8007f28:	2102      	movs	r1, #2
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 f8cd 	bl	80080ca <QSPI_WaitFlagStateUntilTimeout>
 8007f30:	4603      	mov	r3, r0
 8007f32:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8007f34:	7ffb      	ldrb	r3, [r7, #31]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d103      	bne.n	8007f42 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f4a:	e00a      	b.n	8007f62 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f50:	f043 0208 	orr.w	r2, r3, #8
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	77fb      	strb	r3, [r7, #31]
 8007f5c:	e001      	b.n	8007f62 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007f5e:	2302      	movs	r3, #2
 8007f60:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007f6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3720      	adds	r7, #32
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b08a      	sub	sp, #40	; 0x28
 8007f78:	af02      	add	r7, sp, #8
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007f84:	f7fa fb02 	bl	800258c <HAL_GetTick>
 8007f88:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3320      	adds	r3, #32
 8007f98:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d101      	bne.n	8007faa <HAL_QSPI_Receive+0x36>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e07d      	b.n	80080a6 <HAL_QSPI_Receive+0x132>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d16c      	bne.n	8008098 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d05d      	beq.n	8008086 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2222      	movs	r2, #34	; 0x22
 8007fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	691b      	ldr	r3, [r3, #16]
 8007fd8:	1c5a      	adds	r2, r3, #1
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	1c5a      	adds	r2, r3, #1
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008002:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800800c:	e01c      	b.n	8008048 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2201      	movs	r2, #1
 8008016:	2106      	movs	r1, #6
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 f856 	bl	80080ca <QSPI_WaitFlagStateUntilTimeout>
 800801e:	4603      	mov	r3, r0
 8008020:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8008022:	7ffb      	ldrb	r3, [r7, #31]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d114      	bne.n	8008052 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	1e5a      	subs	r2, r3, #1
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1de      	bne.n	800800e <HAL_QSPI_Receive+0x9a>
 8008050:	e000      	b.n	8008054 <HAL_QSPI_Receive+0xe0>
          break;
 8008052:	bf00      	nop
      }

      if (status == HAL_OK)
 8008054:	7ffb      	ldrb	r3, [r7, #31]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d110      	bne.n	800807c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	2201      	movs	r2, #1
 8008062:	2102      	movs	r1, #2
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 f830 	bl	80080ca <QSPI_WaitFlagStateUntilTimeout>
 800806a:	4603      	mov	r3, r0
 800806c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800806e:	7ffb      	ldrb	r3, [r7, #31]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d103      	bne.n	800807c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2202      	movs	r2, #2
 800807a:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008084:	e00a      	b.n	800809c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808a:	f043 0208 	orr.w	r2, r3, #8
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	77fb      	strb	r3, [r7, #31]
 8008096:	e001      	b.n	800809c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8008098:	2302      	movs	r3, #2
 800809a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80080a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3720      	adds	r7, #32
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b083      	sub	sp, #12
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	649a      	str	r2, [r3, #72]	; 0x48
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
 80080d2:	60b9      	str	r1, [r7, #8]
 80080d4:	603b      	str	r3, [r7, #0]
 80080d6:	4613      	mov	r3, r2
 80080d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80080da:	e01a      	b.n	8008112 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e2:	d016      	beq.n	8008112 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080e4:	f7fa fa52 	bl	800258c <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d302      	bcc.n	80080fa <QSPI_WaitFlagStateUntilTimeout+0x30>
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10b      	bne.n	8008112 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2204      	movs	r2, #4
 80080fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008106:	f043 0201 	orr.w	r2, r3, #1
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e00e      	b.n	8008130 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4013      	ands	r3, r2
 800811c:	2b00      	cmp	r3, #0
 800811e:	bf14      	ite	ne
 8008120:	2301      	movne	r3, #1
 8008122:	2300      	moveq	r3, #0
 8008124:	b2db      	uxtb	r3, r3
 8008126:	461a      	mov	r2, r3
 8008128:	79fb      	ldrb	r3, [r7, #7]
 800812a:	429a      	cmp	r2, r3
 800812c:	d1d6      	bne.n	80080dc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08c      	sub	sp, #48	; 0x30
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e3ff      	b.n	800894a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 8087 	beq.w	8008266 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008158:	4b99      	ldr	r3, [pc, #612]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008160:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008162:	4b97      	ldr	r3, [pc, #604]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008166:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816a:	2b10      	cmp	r3, #16
 800816c:	d007      	beq.n	800817e <HAL_RCC_OscConfig+0x46>
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	2b18      	cmp	r3, #24
 8008172:	d110      	bne.n	8008196 <HAL_RCC_OscConfig+0x5e>
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	f003 0303 	and.w	r3, r3, #3
 800817a:	2b02      	cmp	r3, #2
 800817c:	d10b      	bne.n	8008196 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800817e:	4b90      	ldr	r3, [pc, #576]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d06c      	beq.n	8008264 <HAL_RCC_OscConfig+0x12c>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d168      	bne.n	8008264 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e3d9      	b.n	800894a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800819e:	d106      	bne.n	80081ae <HAL_RCC_OscConfig+0x76>
 80081a0:	4b87      	ldr	r3, [pc, #540]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a86      	ldr	r2, [pc, #536]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081aa:	6013      	str	r3, [r2, #0]
 80081ac:	e02e      	b.n	800820c <HAL_RCC_OscConfig+0xd4>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10c      	bne.n	80081d0 <HAL_RCC_OscConfig+0x98>
 80081b6:	4b82      	ldr	r3, [pc, #520]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a81      	ldr	r2, [pc, #516]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081c0:	6013      	str	r3, [r2, #0]
 80081c2:	4b7f      	ldr	r3, [pc, #508]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a7e      	ldr	r2, [pc, #504]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	e01d      	b.n	800820c <HAL_RCC_OscConfig+0xd4>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081d8:	d10c      	bne.n	80081f4 <HAL_RCC_OscConfig+0xbc>
 80081da:	4b79      	ldr	r3, [pc, #484]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a78      	ldr	r2, [pc, #480]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	4b76      	ldr	r3, [pc, #472]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a75      	ldr	r2, [pc, #468]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	e00b      	b.n	800820c <HAL_RCC_OscConfig+0xd4>
 80081f4:	4b72      	ldr	r3, [pc, #456]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a71      	ldr	r2, [pc, #452]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80081fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	4b6f      	ldr	r3, [pc, #444]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a6e      	ldr	r2, [pc, #440]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800820a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d013      	beq.n	800823c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008214:	f7fa f9ba 	bl	800258c <HAL_GetTick>
 8008218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800821a:	e008      	b.n	800822e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800821c:	f7fa f9b6 	bl	800258c <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b64      	cmp	r3, #100	; 0x64
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e38d      	b.n	800894a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800822e:	4b64      	ldr	r3, [pc, #400]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0f0      	beq.n	800821c <HAL_RCC_OscConfig+0xe4>
 800823a:	e014      	b.n	8008266 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823c:	f7fa f9a6 	bl	800258c <HAL_GetTick>
 8008240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008242:	e008      	b.n	8008256 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008244:	f7fa f9a2 	bl	800258c <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b64      	cmp	r3, #100	; 0x64
 8008250:	d901      	bls.n	8008256 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e379      	b.n	800894a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008256:	4b5a      	ldr	r3, [pc, #360]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f0      	bne.n	8008244 <HAL_RCC_OscConfig+0x10c>
 8008262:	e000      	b.n	8008266 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 80ae 	beq.w	80083d0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008274:	4b52      	ldr	r3, [pc, #328]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800827c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800827e:	4b50      	ldr	r3, [pc, #320]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008282:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <HAL_RCC_OscConfig+0x162>
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	2b18      	cmp	r3, #24
 800828e:	d13a      	bne.n	8008306 <HAL_RCC_OscConfig+0x1ce>
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	f003 0303 	and.w	r3, r3, #3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d135      	bne.n	8008306 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800829a:	4b49      	ldr	r3, [pc, #292]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0304 	and.w	r3, r3, #4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d005      	beq.n	80082b2 <HAL_RCC_OscConfig+0x17a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e34b      	b.n	800894a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082b2:	f7fa f99b 	bl	80025ec <HAL_GetREVID>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80082bc:	4293      	cmp	r3, r2
 80082be:	d817      	bhi.n	80082f0 <HAL_RCC_OscConfig+0x1b8>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b40      	cmp	r3, #64	; 0x40
 80082c6:	d108      	bne.n	80082da <HAL_RCC_OscConfig+0x1a2>
 80082c8:	4b3d      	ldr	r3, [pc, #244]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80082d0:	4a3b      	ldr	r2, [pc, #236]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80082d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082d6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082d8:	e07a      	b.n	80083d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082da:	4b39      	ldr	r3, [pc, #228]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	031b      	lsls	r3, r3, #12
 80082e8:	4935      	ldr	r1, [pc, #212]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082ee:	e06f      	b.n	80083d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082f0:	4b33      	ldr	r3, [pc, #204]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	061b      	lsls	r3, r3, #24
 80082fe:	4930      	ldr	r1, [pc, #192]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008300:	4313      	orrs	r3, r2
 8008302:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008304:	e064      	b.n	80083d0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d045      	beq.n	800839a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800830e:	4b2c      	ldr	r3, [pc, #176]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f023 0219 	bic.w	r2, r3, #25
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	4929      	ldr	r1, [pc, #164]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 800831c:	4313      	orrs	r3, r2
 800831e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008320:	f7fa f934 	bl	800258c <HAL_GetTick>
 8008324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008326:	e008      	b.n	800833a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008328:	f7fa f930 	bl	800258c <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b02      	cmp	r3, #2
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e307      	b.n	800894a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800833a:	4b21      	ldr	r3, [pc, #132]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0304 	and.w	r3, r3, #4
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f0      	beq.n	8008328 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008346:	f7fa f951 	bl	80025ec <HAL_GetREVID>
 800834a:	4603      	mov	r3, r0
 800834c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008350:	4293      	cmp	r3, r2
 8008352:	d817      	bhi.n	8008384 <HAL_RCC_OscConfig+0x24c>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	2b40      	cmp	r3, #64	; 0x40
 800835a:	d108      	bne.n	800836e <HAL_RCC_OscConfig+0x236>
 800835c:	4b18      	ldr	r3, [pc, #96]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008364:	4a16      	ldr	r2, [pc, #88]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800836a:	6053      	str	r3, [r2, #4]
 800836c:	e030      	b.n	80083d0 <HAL_RCC_OscConfig+0x298>
 800836e:	4b14      	ldr	r3, [pc, #80]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	031b      	lsls	r3, r3, #12
 800837c:	4910      	ldr	r1, [pc, #64]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 800837e:	4313      	orrs	r3, r2
 8008380:	604b      	str	r3, [r1, #4]
 8008382:	e025      	b.n	80083d0 <HAL_RCC_OscConfig+0x298>
 8008384:	4b0e      	ldr	r3, [pc, #56]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	061b      	lsls	r3, r3, #24
 8008392:	490b      	ldr	r1, [pc, #44]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 8008394:	4313      	orrs	r3, r2
 8008396:	604b      	str	r3, [r1, #4]
 8008398:	e01a      	b.n	80083d0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800839a:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a08      	ldr	r2, [pc, #32]	; (80083c0 <HAL_RCC_OscConfig+0x288>)
 80083a0:	f023 0301 	bic.w	r3, r3, #1
 80083a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a6:	f7fa f8f1 	bl	800258c <HAL_GetTick>
 80083aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083ac:	e00a      	b.n	80083c4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083ae:	f7fa f8ed 	bl	800258c <HAL_GetTick>
 80083b2:	4602      	mov	r2, r0
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d903      	bls.n	80083c4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e2c4      	b.n	800894a <HAL_RCC_OscConfig+0x812>
 80083c0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80083c4:	4ba4      	ldr	r3, [pc, #656]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1ee      	bne.n	80083ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 80a9 	beq.w	8008530 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083de:	4b9e      	ldr	r3, [pc, #632]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083e8:	4b9b      	ldr	r3, [pc, #620]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80083ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	2b08      	cmp	r3, #8
 80083f2:	d007      	beq.n	8008404 <HAL_RCC_OscConfig+0x2cc>
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2b18      	cmp	r3, #24
 80083f8:	d13a      	bne.n	8008470 <HAL_RCC_OscConfig+0x338>
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f003 0303 	and.w	r3, r3, #3
 8008400:	2b01      	cmp	r3, #1
 8008402:	d135      	bne.n	8008470 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008404:	4b94      	ldr	r3, [pc, #592]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_RCC_OscConfig+0x2e4>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	2b80      	cmp	r3, #128	; 0x80
 8008416:	d001      	beq.n	800841c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e296      	b.n	800894a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800841c:	f7fa f8e6 	bl	80025ec <HAL_GetREVID>
 8008420:	4603      	mov	r3, r0
 8008422:	f241 0203 	movw	r2, #4099	; 0x1003
 8008426:	4293      	cmp	r3, r2
 8008428:	d817      	bhi.n	800845a <HAL_RCC_OscConfig+0x322>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	2b20      	cmp	r3, #32
 8008430:	d108      	bne.n	8008444 <HAL_RCC_OscConfig+0x30c>
 8008432:	4b89      	ldr	r3, [pc, #548]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800843a:	4a87      	ldr	r2, [pc, #540]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 800843c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008440:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008442:	e075      	b.n	8008530 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008444:	4b84      	ldr	r3, [pc, #528]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	069b      	lsls	r3, r3, #26
 8008452:	4981      	ldr	r1, [pc, #516]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 8008454:	4313      	orrs	r3, r2
 8008456:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008458:	e06a      	b.n	8008530 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800845a:	4b7f      	ldr	r3, [pc, #508]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	061b      	lsls	r3, r3, #24
 8008468:	497b      	ldr	r1, [pc, #492]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 800846a:	4313      	orrs	r3, r2
 800846c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800846e:	e05f      	b.n	8008530 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	69db      	ldr	r3, [r3, #28]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d042      	beq.n	80084fe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008478:	4b77      	ldr	r3, [pc, #476]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a76      	ldr	r2, [pc, #472]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 800847e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008484:	f7fa f882 	bl	800258c <HAL_GetTick>
 8008488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800848a:	e008      	b.n	800849e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800848c:	f7fa f87e 	bl	800258c <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d901      	bls.n	800849e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e255      	b.n	800894a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800849e:	4b6e      	ldr	r3, [pc, #440]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0f0      	beq.n	800848c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80084aa:	f7fa f89f 	bl	80025ec <HAL_GetREVID>
 80084ae:	4603      	mov	r3, r0
 80084b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d817      	bhi.n	80084e8 <HAL_RCC_OscConfig+0x3b0>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a1b      	ldr	r3, [r3, #32]
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d108      	bne.n	80084d2 <HAL_RCC_OscConfig+0x39a>
 80084c0:	4b65      	ldr	r3, [pc, #404]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80084c8:	4a63      	ldr	r2, [pc, #396]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80084ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084ce:	6053      	str	r3, [r2, #4]
 80084d0:	e02e      	b.n	8008530 <HAL_RCC_OscConfig+0x3f8>
 80084d2:	4b61      	ldr	r3, [pc, #388]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	069b      	lsls	r3, r3, #26
 80084e0:	495d      	ldr	r1, [pc, #372]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	604b      	str	r3, [r1, #4]
 80084e6:	e023      	b.n	8008530 <HAL_RCC_OscConfig+0x3f8>
 80084e8:	4b5b      	ldr	r3, [pc, #364]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	061b      	lsls	r3, r3, #24
 80084f6:	4958      	ldr	r1, [pc, #352]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60cb      	str	r3, [r1, #12]
 80084fc:	e018      	b.n	8008530 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80084fe:	4b56      	ldr	r3, [pc, #344]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a55      	ldr	r2, [pc, #340]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 8008504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800850a:	f7fa f83f 	bl	800258c <HAL_GetTick>
 800850e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008510:	e008      	b.n	8008524 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008512:	f7fa f83b 	bl	800258c <HAL_GetTick>
 8008516:	4602      	mov	r2, r0
 8008518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d901      	bls.n	8008524 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e212      	b.n	800894a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008524:	4b4c      	ldr	r3, [pc, #304]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852c:	2b00      	cmp	r3, #0
 800852e:	d1f0      	bne.n	8008512 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0308 	and.w	r3, r3, #8
 8008538:	2b00      	cmp	r3, #0
 800853a:	d036      	beq.n	80085aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d019      	beq.n	8008578 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008544:	4b44      	ldr	r3, [pc, #272]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 8008546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008548:	4a43      	ldr	r2, [pc, #268]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 800854a:	f043 0301 	orr.w	r3, r3, #1
 800854e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008550:	f7fa f81c 	bl	800258c <HAL_GetTick>
 8008554:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008556:	e008      	b.n	800856a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008558:	f7fa f818 	bl	800258c <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e1ef      	b.n	800894a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800856a:	4b3b      	ldr	r3, [pc, #236]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 800856c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	2b00      	cmp	r3, #0
 8008574:	d0f0      	beq.n	8008558 <HAL_RCC_OscConfig+0x420>
 8008576:	e018      	b.n	80085aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008578:	4b37      	ldr	r3, [pc, #220]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 800857a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800857c:	4a36      	ldr	r2, [pc, #216]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 800857e:	f023 0301 	bic.w	r3, r3, #1
 8008582:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008584:	f7fa f802 	bl	800258c <HAL_GetTick>
 8008588:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800858c:	f7f9 fffe 	bl	800258c <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e1d5      	b.n	800894a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800859e:	4b2e      	ldr	r3, [pc, #184]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80085a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085a2:	f003 0302 	and.w	r3, r3, #2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1f0      	bne.n	800858c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0320 	and.w	r3, r3, #32
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d036      	beq.n	8008624 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	699b      	ldr	r3, [r3, #24]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d019      	beq.n	80085f2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80085be:	4b26      	ldr	r3, [pc, #152]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a25      	ldr	r2, [pc, #148]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80085c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80085c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085ca:	f7f9 ffdf 	bl	800258c <HAL_GetTick>
 80085ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085d0:	e008      	b.n	80085e4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80085d2:	f7f9 ffdb 	bl	800258c <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d901      	bls.n	80085e4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e1b2      	b.n	800894a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80085e4:	4b1c      	ldr	r3, [pc, #112]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d0f0      	beq.n	80085d2 <HAL_RCC_OscConfig+0x49a>
 80085f0:	e018      	b.n	8008624 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085f2:	4b19      	ldr	r3, [pc, #100]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a18      	ldr	r2, [pc, #96]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 80085f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085fe:	f7f9 ffc5 	bl	800258c <HAL_GetTick>
 8008602:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008604:	e008      	b.n	8008618 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008606:	f7f9 ffc1 	bl	800258c <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	2b02      	cmp	r3, #2
 8008612:	d901      	bls.n	8008618 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e198      	b.n	800894a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008618:	4b0f      	ldr	r3, [pc, #60]	; (8008658 <HAL_RCC_OscConfig+0x520>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1f0      	bne.n	8008606 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 8085 	beq.w	800873c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008632:	4b0a      	ldr	r3, [pc, #40]	; (800865c <HAL_RCC_OscConfig+0x524>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a09      	ldr	r2, [pc, #36]	; (800865c <HAL_RCC_OscConfig+0x524>)
 8008638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800863c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800863e:	f7f9 ffa5 	bl	800258c <HAL_GetTick>
 8008642:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008644:	e00c      	b.n	8008660 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008646:	f7f9 ffa1 	bl	800258c <HAL_GetTick>
 800864a:	4602      	mov	r2, r0
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	2b64      	cmp	r3, #100	; 0x64
 8008652:	d905      	bls.n	8008660 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e178      	b.n	800894a <HAL_RCC_OscConfig+0x812>
 8008658:	58024400 	.word	0x58024400
 800865c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008660:	4b96      	ldr	r3, [pc, #600]	; (80088bc <HAL_RCC_OscConfig+0x784>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0ec      	beq.n	8008646 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d106      	bne.n	8008682 <HAL_RCC_OscConfig+0x54a>
 8008674:	4b92      	ldr	r3, [pc, #584]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008678:	4a91      	ldr	r2, [pc, #580]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800867a:	f043 0301 	orr.w	r3, r3, #1
 800867e:	6713      	str	r3, [r2, #112]	; 0x70
 8008680:	e02d      	b.n	80086de <HAL_RCC_OscConfig+0x5a6>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10c      	bne.n	80086a4 <HAL_RCC_OscConfig+0x56c>
 800868a:	4b8d      	ldr	r3, [pc, #564]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800868c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868e:	4a8c      	ldr	r2, [pc, #560]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008690:	f023 0301 	bic.w	r3, r3, #1
 8008694:	6713      	str	r3, [r2, #112]	; 0x70
 8008696:	4b8a      	ldr	r3, [pc, #552]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869a:	4a89      	ldr	r2, [pc, #548]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800869c:	f023 0304 	bic.w	r3, r3, #4
 80086a0:	6713      	str	r3, [r2, #112]	; 0x70
 80086a2:	e01c      	b.n	80086de <HAL_RCC_OscConfig+0x5a6>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	2b05      	cmp	r3, #5
 80086aa:	d10c      	bne.n	80086c6 <HAL_RCC_OscConfig+0x58e>
 80086ac:	4b84      	ldr	r3, [pc, #528]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80086ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b0:	4a83      	ldr	r2, [pc, #524]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80086b2:	f043 0304 	orr.w	r3, r3, #4
 80086b6:	6713      	str	r3, [r2, #112]	; 0x70
 80086b8:	4b81      	ldr	r3, [pc, #516]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80086ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086bc:	4a80      	ldr	r2, [pc, #512]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80086be:	f043 0301 	orr.w	r3, r3, #1
 80086c2:	6713      	str	r3, [r2, #112]	; 0x70
 80086c4:	e00b      	b.n	80086de <HAL_RCC_OscConfig+0x5a6>
 80086c6:	4b7e      	ldr	r3, [pc, #504]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80086c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ca:	4a7d      	ldr	r2, [pc, #500]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80086cc:	f023 0301 	bic.w	r3, r3, #1
 80086d0:	6713      	str	r3, [r2, #112]	; 0x70
 80086d2:	4b7b      	ldr	r3, [pc, #492]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80086d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d6:	4a7a      	ldr	r2, [pc, #488]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80086d8:	f023 0304 	bic.w	r3, r3, #4
 80086dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d015      	beq.n	8008712 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086e6:	f7f9 ff51 	bl	800258c <HAL_GetTick>
 80086ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086ec:	e00a      	b.n	8008704 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086ee:	f7f9 ff4d 	bl	800258c <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d901      	bls.n	8008704 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e122      	b.n	800894a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008704:	4b6e      	ldr	r3, [pc, #440]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008708:	f003 0302 	and.w	r3, r3, #2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0ee      	beq.n	80086ee <HAL_RCC_OscConfig+0x5b6>
 8008710:	e014      	b.n	800873c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008712:	f7f9 ff3b 	bl	800258c <HAL_GetTick>
 8008716:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008718:	e00a      	b.n	8008730 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800871a:	f7f9 ff37 	bl	800258c <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	f241 3288 	movw	r2, #5000	; 0x1388
 8008728:	4293      	cmp	r3, r2
 800872a:	d901      	bls.n	8008730 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e10c      	b.n	800894a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008730:	4b63      	ldr	r3, [pc, #396]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1ee      	bne.n	800871a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 8101 	beq.w	8008948 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008746:	4b5e      	ldr	r3, [pc, #376]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800874e:	2b18      	cmp	r3, #24
 8008750:	f000 80bc 	beq.w	80088cc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	2b02      	cmp	r3, #2
 800875a:	f040 8095 	bne.w	8008888 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800875e:	4b58      	ldr	r3, [pc, #352]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a57      	ldr	r2, [pc, #348]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008764:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876a:	f7f9 ff0f 	bl	800258c <HAL_GetTick>
 800876e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008770:	e008      	b.n	8008784 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008772:	f7f9 ff0b 	bl	800258c <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d901      	bls.n	8008784 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e0e2      	b.n	800894a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008784:	4b4e      	ldr	r3, [pc, #312]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1f0      	bne.n	8008772 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008790:	4b4b      	ldr	r3, [pc, #300]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008794:	4b4b      	ldr	r3, [pc, #300]	; (80088c4 <HAL_RCC_OscConfig+0x78c>)
 8008796:	4013      	ands	r3, r2
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80087a0:	0112      	lsls	r2, r2, #4
 80087a2:	430a      	orrs	r2, r1
 80087a4:	4946      	ldr	r1, [pc, #280]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	628b      	str	r3, [r1, #40]	; 0x28
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ae:	3b01      	subs	r3, #1
 80087b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087b8:	3b01      	subs	r3, #1
 80087ba:	025b      	lsls	r3, r3, #9
 80087bc:	b29b      	uxth	r3, r3
 80087be:	431a      	orrs	r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c4:	3b01      	subs	r3, #1
 80087c6:	041b      	lsls	r3, r3, #16
 80087c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80087cc:	431a      	orrs	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d2:	3b01      	subs	r3, #1
 80087d4:	061b      	lsls	r3, r3, #24
 80087d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087da:	4939      	ldr	r1, [pc, #228]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80087dc:	4313      	orrs	r3, r2
 80087de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80087e0:	4b37      	ldr	r3, [pc, #220]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	4a36      	ldr	r2, [pc, #216]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80087e6:	f023 0301 	bic.w	r3, r3, #1
 80087ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80087ec:	4b34      	ldr	r3, [pc, #208]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80087ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087f0:	4b35      	ldr	r3, [pc, #212]	; (80088c8 <HAL_RCC_OscConfig+0x790>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80087f8:	00d2      	lsls	r2, r2, #3
 80087fa:	4931      	ldr	r1, [pc, #196]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008800:	4b2f      	ldr	r3, [pc, #188]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	f023 020c 	bic.w	r2, r3, #12
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880c:	492c      	ldr	r1, [pc, #176]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800880e:	4313      	orrs	r3, r2
 8008810:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008812:	4b2b      	ldr	r3, [pc, #172]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008816:	f023 0202 	bic.w	r2, r3, #2
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881e:	4928      	ldr	r1, [pc, #160]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008820:	4313      	orrs	r3, r2
 8008822:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008824:	4b26      	ldr	r3, [pc, #152]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008828:	4a25      	ldr	r2, [pc, #148]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800882a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800882e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008830:	4b23      	ldr	r3, [pc, #140]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	4a22      	ldr	r2, [pc, #136]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800883a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800883c:	4b20      	ldr	r3, [pc, #128]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800883e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008840:	4a1f      	ldr	r2, [pc, #124]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008848:	4b1d      	ldr	r3, [pc, #116]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800884a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800884c:	4a1c      	ldr	r2, [pc, #112]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800884e:	f043 0301 	orr.w	r3, r3, #1
 8008852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008854:	4b1a      	ldr	r3, [pc, #104]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a19      	ldr	r2, [pc, #100]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800885a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800885e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008860:	f7f9 fe94 	bl	800258c <HAL_GetTick>
 8008864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008866:	e008      	b.n	800887a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008868:	f7f9 fe90 	bl	800258c <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b02      	cmp	r3, #2
 8008874:	d901      	bls.n	800887a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e067      	b.n	800894a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800887a:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0f0      	beq.n	8008868 <HAL_RCC_OscConfig+0x730>
 8008886:	e05f      	b.n	8008948 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008888:	4b0d      	ldr	r3, [pc, #52]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a0c      	ldr	r2, [pc, #48]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 800888e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008894:	f7f9 fe7a 	bl	800258c <HAL_GetTick>
 8008898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800889a:	e008      	b.n	80088ae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800889c:	f7f9 fe76 	bl	800258c <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d901      	bls.n	80088ae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e04d      	b.n	800894a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088ae:	4b04      	ldr	r3, [pc, #16]	; (80088c0 <HAL_RCC_OscConfig+0x788>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1f0      	bne.n	800889c <HAL_RCC_OscConfig+0x764>
 80088ba:	e045      	b.n	8008948 <HAL_RCC_OscConfig+0x810>
 80088bc:	58024800 	.word	0x58024800
 80088c0:	58024400 	.word	0x58024400
 80088c4:	fffffc0c 	.word	0xfffffc0c
 80088c8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80088cc:	4b21      	ldr	r3, [pc, #132]	; (8008954 <HAL_RCC_OscConfig+0x81c>)
 80088ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80088d2:	4b20      	ldr	r3, [pc, #128]	; (8008954 <HAL_RCC_OscConfig+0x81c>)
 80088d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d031      	beq.n	8008944 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	f003 0203 	and.w	r2, r3, #3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d12a      	bne.n	8008944 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	091b      	lsrs	r3, r3, #4
 80088f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d122      	bne.n	8008944 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008908:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800890a:	429a      	cmp	r2, r3
 800890c:	d11a      	bne.n	8008944 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	0a5b      	lsrs	r3, r3, #9
 8008912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800891a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800891c:	429a      	cmp	r2, r3
 800891e:	d111      	bne.n	8008944 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	0c1b      	lsrs	r3, r3, #16
 8008924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800892e:	429a      	cmp	r2, r3
 8008930:	d108      	bne.n	8008944 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	0e1b      	lsrs	r3, r3, #24
 8008936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800893e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008940:	429a      	cmp	r2, r3
 8008942:	d001      	beq.n	8008948 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e000      	b.n	800894a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3730      	adds	r7, #48	; 0x30
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	58024400 	.word	0x58024400

08008958 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e19c      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800896c:	4b8a      	ldr	r3, [pc, #552]	; (8008b98 <HAL_RCC_ClockConfig+0x240>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d910      	bls.n	800899c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800897a:	4b87      	ldr	r3, [pc, #540]	; (8008b98 <HAL_RCC_ClockConfig+0x240>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f023 020f 	bic.w	r2, r3, #15
 8008982:	4985      	ldr	r1, [pc, #532]	; (8008b98 <HAL_RCC_ClockConfig+0x240>)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	4313      	orrs	r3, r2
 8008988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800898a:	4b83      	ldr	r3, [pc, #524]	; (8008b98 <HAL_RCC_ClockConfig+0x240>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 030f 	and.w	r3, r3, #15
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d001      	beq.n	800899c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e184      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0304 	and.w	r3, r3, #4
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d010      	beq.n	80089ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	4b7b      	ldr	r3, [pc, #492]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d908      	bls.n	80089ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089b8:	4b78      	ldr	r3, [pc, #480]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	4975      	ldr	r1, [pc, #468]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d010      	beq.n	80089f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	695a      	ldr	r2, [r3, #20]
 80089da:	4b70      	ldr	r3, [pc, #448]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d908      	bls.n	80089f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089e6:	4b6d      	ldr	r3, [pc, #436]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	496a      	ldr	r1, [pc, #424]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d010      	beq.n	8008a26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	699a      	ldr	r2, [r3, #24]
 8008a08:	4b64      	ldr	r3, [pc, #400]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d908      	bls.n	8008a26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a14:	4b61      	ldr	r3, [pc, #388]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	495e      	ldr	r1, [pc, #376]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0320 	and.w	r3, r3, #32
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d010      	beq.n	8008a54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	69da      	ldr	r2, [r3, #28]
 8008a36:	4b59      	ldr	r3, [pc, #356]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d908      	bls.n	8008a54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008a42:	4b56      	ldr	r3, [pc, #344]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	4953      	ldr	r1, [pc, #332]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d010      	beq.n	8008a82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	68da      	ldr	r2, [r3, #12]
 8008a64:	4b4d      	ldr	r3, [pc, #308]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008a66:	699b      	ldr	r3, [r3, #24]
 8008a68:	f003 030f 	and.w	r3, r3, #15
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d908      	bls.n	8008a82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a70:	4b4a      	ldr	r3, [pc, #296]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	f023 020f 	bic.w	r2, r3, #15
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	4947      	ldr	r1, [pc, #284]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d055      	beq.n	8008b3a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a8e:	4b43      	ldr	r3, [pc, #268]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	4940      	ldr	r1, [pc, #256]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d107      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008aa8:	4b3c      	ldr	r3, [pc, #240]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d121      	bne.n	8008af8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e0f6      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d107      	bne.n	8008ad0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ac0:	4b36      	ldr	r3, [pc, #216]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d115      	bne.n	8008af8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e0ea      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d107      	bne.n	8008ae8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ad8:	4b30      	ldr	r3, [pc, #192]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d109      	bne.n	8008af8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e0de      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ae8:	4b2c      	ldr	r3, [pc, #176]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e0d6      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008af8:	4b28      	ldr	r3, [pc, #160]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	f023 0207 	bic.w	r2, r3, #7
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	4925      	ldr	r1, [pc, #148]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008b06:	4313      	orrs	r3, r2
 8008b08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b0a:	f7f9 fd3f 	bl	800258c <HAL_GetTick>
 8008b0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b10:	e00a      	b.n	8008b28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b12:	f7f9 fd3b 	bl	800258c <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d901      	bls.n	8008b28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e0be      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b28:	4b1c      	ldr	r3, [pc, #112]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	00db      	lsls	r3, r3, #3
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d1eb      	bne.n	8008b12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d010      	beq.n	8008b68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	68da      	ldr	r2, [r3, #12]
 8008b4a:	4b14      	ldr	r3, [pc, #80]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f003 030f 	and.w	r3, r3, #15
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d208      	bcs.n	8008b68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b56:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	f023 020f 	bic.w	r2, r3, #15
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	490e      	ldr	r1, [pc, #56]	; (8008b9c <HAL_RCC_ClockConfig+0x244>)
 8008b64:	4313      	orrs	r3, r2
 8008b66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b68:	4b0b      	ldr	r3, [pc, #44]	; (8008b98 <HAL_RCC_ClockConfig+0x240>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 030f 	and.w	r3, r3, #15
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d214      	bcs.n	8008ba0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b76:	4b08      	ldr	r3, [pc, #32]	; (8008b98 <HAL_RCC_ClockConfig+0x240>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f023 020f 	bic.w	r2, r3, #15
 8008b7e:	4906      	ldr	r1, [pc, #24]	; (8008b98 <HAL_RCC_ClockConfig+0x240>)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b86:	4b04      	ldr	r3, [pc, #16]	; (8008b98 <HAL_RCC_ClockConfig+0x240>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d005      	beq.n	8008ba0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e086      	b.n	8008ca6 <HAL_RCC_ClockConfig+0x34e>
 8008b98:	52002000 	.word	0x52002000
 8008b9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0304 	and.w	r3, r3, #4
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d010      	beq.n	8008bce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	691a      	ldr	r2, [r3, #16]
 8008bb0:	4b3f      	ldr	r3, [pc, #252]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d208      	bcs.n	8008bce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008bbc:	4b3c      	ldr	r3, [pc, #240]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	4939      	ldr	r1, [pc, #228]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0308 	and.w	r3, r3, #8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d010      	beq.n	8008bfc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	695a      	ldr	r2, [r3, #20]
 8008bde:	4b34      	ldr	r3, [pc, #208]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d208      	bcs.n	8008bfc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008bea:	4b31      	ldr	r3, [pc, #196]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	492e      	ldr	r1, [pc, #184]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 0310 	and.w	r3, r3, #16
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d010      	beq.n	8008c2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	699a      	ldr	r2, [r3, #24]
 8008c0c:	4b28      	ldr	r3, [pc, #160]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008c0e:	69db      	ldr	r3, [r3, #28]
 8008c10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d208      	bcs.n	8008c2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c18:	4b25      	ldr	r3, [pc, #148]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	4922      	ldr	r1, [pc, #136]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0320 	and.w	r3, r3, #32
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d010      	beq.n	8008c58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	69da      	ldr	r2, [r3, #28]
 8008c3a:	4b1d      	ldr	r3, [pc, #116]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d208      	bcs.n	8008c58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008c46:	4b1a      	ldr	r3, [pc, #104]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	4917      	ldr	r1, [pc, #92]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008c54:	4313      	orrs	r3, r2
 8008c56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c58:	f000 f834 	bl	8008cc4 <HAL_RCC_GetSysClockFreq>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	4b14      	ldr	r3, [pc, #80]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	0a1b      	lsrs	r3, r3, #8
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	4912      	ldr	r1, [pc, #72]	; (8008cb4 <HAL_RCC_ClockConfig+0x35c>)
 8008c6a:	5ccb      	ldrb	r3, [r1, r3]
 8008c6c:	f003 031f 	and.w	r3, r3, #31
 8008c70:	fa22 f303 	lsr.w	r3, r2, r3
 8008c74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c76:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <HAL_RCC_ClockConfig+0x358>)
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	4a0d      	ldr	r2, [pc, #52]	; (8008cb4 <HAL_RCC_ClockConfig+0x35c>)
 8008c80:	5cd3      	ldrb	r3, [r2, r3]
 8008c82:	f003 031f 	and.w	r3, r3, #31
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8c:	4a0a      	ldr	r2, [pc, #40]	; (8008cb8 <HAL_RCC_ClockConfig+0x360>)
 8008c8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c90:	4a0a      	ldr	r2, [pc, #40]	; (8008cbc <HAL_RCC_ClockConfig+0x364>)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008c96:	4b0a      	ldr	r3, [pc, #40]	; (8008cc0 <HAL_RCC_ClockConfig+0x368>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7f9 fc2c 	bl	80024f8 <HAL_InitTick>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	58024400 	.word	0x58024400
 8008cb4:	0800f9c4 	.word	0x0800f9c4
 8008cb8:	24000014 	.word	0x24000014
 8008cbc:	24000010 	.word	0x24000010
 8008cc0:	24000018 	.word	0x24000018

08008cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b089      	sub	sp, #36	; 0x24
 8008cc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cca:	4bb3      	ldr	r3, [pc, #716]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cd2:	2b18      	cmp	r3, #24
 8008cd4:	f200 8155 	bhi.w	8008f82 <HAL_RCC_GetSysClockFreq+0x2be>
 8008cd8:	a201      	add	r2, pc, #4	; (adr r2, 8008ce0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cde:	bf00      	nop
 8008ce0:	08008d45 	.word	0x08008d45
 8008ce4:	08008f83 	.word	0x08008f83
 8008ce8:	08008f83 	.word	0x08008f83
 8008cec:	08008f83 	.word	0x08008f83
 8008cf0:	08008f83 	.word	0x08008f83
 8008cf4:	08008f83 	.word	0x08008f83
 8008cf8:	08008f83 	.word	0x08008f83
 8008cfc:	08008f83 	.word	0x08008f83
 8008d00:	08008d6b 	.word	0x08008d6b
 8008d04:	08008f83 	.word	0x08008f83
 8008d08:	08008f83 	.word	0x08008f83
 8008d0c:	08008f83 	.word	0x08008f83
 8008d10:	08008f83 	.word	0x08008f83
 8008d14:	08008f83 	.word	0x08008f83
 8008d18:	08008f83 	.word	0x08008f83
 8008d1c:	08008f83 	.word	0x08008f83
 8008d20:	08008d71 	.word	0x08008d71
 8008d24:	08008f83 	.word	0x08008f83
 8008d28:	08008f83 	.word	0x08008f83
 8008d2c:	08008f83 	.word	0x08008f83
 8008d30:	08008f83 	.word	0x08008f83
 8008d34:	08008f83 	.word	0x08008f83
 8008d38:	08008f83 	.word	0x08008f83
 8008d3c:	08008f83 	.word	0x08008f83
 8008d40:	08008d77 	.word	0x08008d77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d44:	4b94      	ldr	r3, [pc, #592]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 0320 	and.w	r3, r3, #32
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d009      	beq.n	8008d64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d50:	4b91      	ldr	r3, [pc, #580]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	08db      	lsrs	r3, r3, #3
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	4a90      	ldr	r2, [pc, #576]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008d62:	e111      	b.n	8008f88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008d64:	4b8d      	ldr	r3, [pc, #564]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d66:	61bb      	str	r3, [r7, #24]
    break;
 8008d68:	e10e      	b.n	8008f88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008d6a:	4b8d      	ldr	r3, [pc, #564]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d6c:	61bb      	str	r3, [r7, #24]
    break;
 8008d6e:	e10b      	b.n	8008f88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008d70:	4b8c      	ldr	r3, [pc, #560]	; (8008fa4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008d72:	61bb      	str	r3, [r7, #24]
    break;
 8008d74:	e108      	b.n	8008f88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d76:	4b88      	ldr	r3, [pc, #544]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008d80:	4b85      	ldr	r3, [pc, #532]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d84:	091b      	lsrs	r3, r3, #4
 8008d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008d8c:	4b82      	ldr	r3, [pc, #520]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008d96:	4b80      	ldr	r3, [pc, #512]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9a:	08db      	lsrs	r3, r3, #3
 8008d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	fb02 f303 	mul.w	r3, r2, r3
 8008da6:	ee07 3a90 	vmov	s15, r3
 8008daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 80e1 	beq.w	8008f7c <HAL_RCC_GetSysClockFreq+0x2b8>
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	f000 8083 	beq.w	8008ec8 <HAL_RCC_GetSysClockFreq+0x204>
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	f200 80a1 	bhi.w	8008f0c <HAL_RCC_GetSysClockFreq+0x248>
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <HAL_RCC_GetSysClockFreq+0x114>
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d056      	beq.n	8008e84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008dd6:	e099      	b.n	8008f0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dd8:	4b6f      	ldr	r3, [pc, #444]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d02d      	beq.n	8008e40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008de4:	4b6c      	ldr	r3, [pc, #432]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	08db      	lsrs	r3, r3, #3
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	4a6b      	ldr	r2, [pc, #428]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008df0:	fa22 f303 	lsr.w	r3, r2, r3
 8008df4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0e:	4b62      	ldr	r3, [pc, #392]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e22:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008e3e:	e087      	b.n	8008f50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008fac <HAL_RCC_GetSysClockFreq+0x2e8>
 8008e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e52:	4b51      	ldr	r3, [pc, #324]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e66:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e82:	e065      	b.n	8008f50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	ee07 3a90 	vmov	s15, r3
 8008e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008fb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e96:	4b40      	ldr	r3, [pc, #256]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e9e:	ee07 3a90 	vmov	s15, r3
 8008ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eaa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ec6:	e043      	b.n	8008f50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	ee07 3a90 	vmov	s15, r3
 8008ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008fb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eda:	4b2f      	ldr	r3, [pc, #188]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee2:	ee07 3a90 	vmov	s15, r3
 8008ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f0a:	e021      	b.n	8008f50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008fb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f1e:	4b1e      	ldr	r3, [pc, #120]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f26:	ee07 3a90 	vmov	s15, r3
 8008f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008f50:	4b11      	ldr	r3, [pc, #68]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f54:	0a5b      	lsrs	r3, r3, #9
 8008f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	ee07 3a90 	vmov	s15, r3
 8008f64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f74:	ee17 3a90 	vmov	r3, s15
 8008f78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008f7a:	e005      	b.n	8008f88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	61bb      	str	r3, [r7, #24]
    break;
 8008f80:	e002      	b.n	8008f88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008f82:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f84:	61bb      	str	r3, [r7, #24]
    break;
 8008f86:	bf00      	nop
  }

  return sysclockfreq;
 8008f88:	69bb      	ldr	r3, [r7, #24]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3724      	adds	r7, #36	; 0x24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	03d09000 	.word	0x03d09000
 8008fa0:	003d0900 	.word	0x003d0900
 8008fa4:	017d7840 	.word	0x017d7840
 8008fa8:	46000000 	.word	0x46000000
 8008fac:	4c742400 	.word	0x4c742400
 8008fb0:	4a742400 	.word	0x4a742400
 8008fb4:	4bbebc20 	.word	0x4bbebc20

08008fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008fbe:	f7ff fe81 	bl	8008cc4 <HAL_RCC_GetSysClockFreq>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	4b10      	ldr	r3, [pc, #64]	; (8009008 <HAL_RCC_GetHCLKFreq+0x50>)
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	0a1b      	lsrs	r3, r3, #8
 8008fca:	f003 030f 	and.w	r3, r3, #15
 8008fce:	490f      	ldr	r1, [pc, #60]	; (800900c <HAL_RCC_GetHCLKFreq+0x54>)
 8008fd0:	5ccb      	ldrb	r3, [r1, r3]
 8008fd2:	f003 031f 	and.w	r3, r3, #31
 8008fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <HAL_RCC_GetHCLKFreq+0x50>)
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	f003 030f 	and.w	r3, r3, #15
 8008fe4:	4a09      	ldr	r2, [pc, #36]	; (800900c <HAL_RCC_GetHCLKFreq+0x54>)
 8008fe6:	5cd3      	ldrb	r3, [r2, r3]
 8008fe8:	f003 031f 	and.w	r3, r3, #31
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff2:	4a07      	ldr	r2, [pc, #28]	; (8009010 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ff4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ff6:	4a07      	ldr	r2, [pc, #28]	; (8009014 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008ffc:	4b04      	ldr	r3, [pc, #16]	; (8009010 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	58024400 	.word	0x58024400
 800900c:	0800f9c4 	.word	0x0800f9c4
 8009010:	24000014 	.word	0x24000014
 8009014:	24000010 	.word	0x24000010

08009018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800901c:	f7ff ffcc 	bl	8008fb8 <HAL_RCC_GetHCLKFreq>
 8009020:	4602      	mov	r2, r0
 8009022:	4b06      	ldr	r3, [pc, #24]	; (800903c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	091b      	lsrs	r3, r3, #4
 8009028:	f003 0307 	and.w	r3, r3, #7
 800902c:	4904      	ldr	r1, [pc, #16]	; (8009040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800902e:	5ccb      	ldrb	r3, [r1, r3]
 8009030:	f003 031f 	and.w	r3, r3, #31
 8009034:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009038:	4618      	mov	r0, r3
 800903a:	bd80      	pop	{r7, pc}
 800903c:	58024400 	.word	0x58024400
 8009040:	0800f9c4 	.word	0x0800f9c4

08009044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009048:	f7ff ffb6 	bl	8008fb8 <HAL_RCC_GetHCLKFreq>
 800904c:	4602      	mov	r2, r0
 800904e:	4b06      	ldr	r3, [pc, #24]	; (8009068 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	0a1b      	lsrs	r3, r3, #8
 8009054:	f003 0307 	and.w	r3, r3, #7
 8009058:	4904      	ldr	r1, [pc, #16]	; (800906c <HAL_RCC_GetPCLK2Freq+0x28>)
 800905a:	5ccb      	ldrb	r3, [r1, r3]
 800905c:	f003 031f 	and.w	r3, r3, #31
 8009060:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009064:	4618      	mov	r0, r3
 8009066:	bd80      	pop	{r7, pc}
 8009068:	58024400 	.word	0x58024400
 800906c:	0800f9c4 	.word	0x0800f9c4

08009070 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009078:	2300      	movs	r3, #0
 800907a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800907c:	2300      	movs	r3, #0
 800907e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d03f      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009090:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009094:	d02a      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009096:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800909a:	d824      	bhi.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800909c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090a0:	d018      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80090a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090a6:	d81e      	bhi.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80090ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090b0:	d007      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80090b2:	e018      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090b4:	4bab      	ldr	r3, [pc, #684]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	4aaa      	ldr	r2, [pc, #680]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80090ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80090c0:	e015      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	3304      	adds	r3, #4
 80090c6:	2102      	movs	r1, #2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 f9cf 	bl	800a46c <RCCEx_PLL2_Config>
 80090ce:	4603      	mov	r3, r0
 80090d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80090d2:	e00c      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	3324      	adds	r3, #36	; 0x24
 80090d8:	2102      	movs	r1, #2
 80090da:	4618      	mov	r0, r3
 80090dc:	f001 fa78 	bl	800a5d0 <RCCEx_PLL3_Config>
 80090e0:	4603      	mov	r3, r0
 80090e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80090e4:	e003      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	75fb      	strb	r3, [r7, #23]
      break;
 80090ea:	e000      	b.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80090ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d109      	bne.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80090f4:	4b9b      	ldr	r3, [pc, #620]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80090f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009100:	4998      	ldr	r1, [pc, #608]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009102:	4313      	orrs	r3, r2
 8009104:	650b      	str	r3, [r1, #80]	; 0x50
 8009106:	e001      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009108:	7dfb      	ldrb	r3, [r7, #23]
 800910a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009114:	2b00      	cmp	r3, #0
 8009116:	d03d      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911c:	2b04      	cmp	r3, #4
 800911e:	d826      	bhi.n	800916e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009120:	a201      	add	r2, pc, #4	; (adr r2, 8009128 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	0800913d 	.word	0x0800913d
 800912c:	0800914b 	.word	0x0800914b
 8009130:	0800915d 	.word	0x0800915d
 8009134:	08009175 	.word	0x08009175
 8009138:	08009175 	.word	0x08009175
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800913c:	4b89      	ldr	r3, [pc, #548]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	4a88      	ldr	r2, [pc, #544]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009146:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009148:	e015      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	3304      	adds	r3, #4
 800914e:	2100      	movs	r1, #0
 8009150:	4618      	mov	r0, r3
 8009152:	f001 f98b 	bl	800a46c <RCCEx_PLL2_Config>
 8009156:	4603      	mov	r3, r0
 8009158:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800915a:	e00c      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	3324      	adds	r3, #36	; 0x24
 8009160:	2100      	movs	r1, #0
 8009162:	4618      	mov	r0, r3
 8009164:	f001 fa34 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009168:	4603      	mov	r3, r0
 800916a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800916c:	e003      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	75fb      	strb	r3, [r7, #23]
      break;
 8009172:	e000      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d109      	bne.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800917c:	4b79      	ldr	r3, [pc, #484]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800917e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009180:	f023 0207 	bic.w	r2, r3, #7
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009188:	4976      	ldr	r1, [pc, #472]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800918a:	4313      	orrs	r3, r2
 800918c:	650b      	str	r3, [r1, #80]	; 0x50
 800918e:	e001      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009190:	7dfb      	ldrb	r3, [r7, #23]
 8009192:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800919c:	2b00      	cmp	r3, #0
 800919e:	d042      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a8:	d02b      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80091aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ae:	d825      	bhi.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80091b0:	2bc0      	cmp	r3, #192	; 0xc0
 80091b2:	d028      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80091b4:	2bc0      	cmp	r3, #192	; 0xc0
 80091b6:	d821      	bhi.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80091b8:	2b80      	cmp	r3, #128	; 0x80
 80091ba:	d016      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80091bc:	2b80      	cmp	r3, #128	; 0x80
 80091be:	d81d      	bhi.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80091c4:	2b40      	cmp	r3, #64	; 0x40
 80091c6:	d007      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80091c8:	e018      	b.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091ca:	4b66      	ldr	r3, [pc, #408]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ce:	4a65      	ldr	r2, [pc, #404]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80091d6:	e017      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3304      	adds	r3, #4
 80091dc:	2100      	movs	r1, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	f001 f944 	bl	800a46c <RCCEx_PLL2_Config>
 80091e4:	4603      	mov	r3, r0
 80091e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80091e8:	e00e      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	3324      	adds	r3, #36	; 0x24
 80091ee:	2100      	movs	r1, #0
 80091f0:	4618      	mov	r0, r3
 80091f2:	f001 f9ed 	bl	800a5d0 <RCCEx_PLL3_Config>
 80091f6:	4603      	mov	r3, r0
 80091f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80091fa:	e005      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009200:	e002      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009202:	bf00      	nop
 8009204:	e000      	b.n	8009208 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800920e:	4b55      	ldr	r3, [pc, #340]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009212:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921a:	4952      	ldr	r1, [pc, #328]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800921c:	4313      	orrs	r3, r2
 800921e:	650b      	str	r3, [r1, #80]	; 0x50
 8009220:	e001      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009222:	7dfb      	ldrb	r3, [r7, #23]
 8009224:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800922e:	2b00      	cmp	r3, #0
 8009230:	d049      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009238:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800923c:	d030      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800923e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009242:	d82a      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009244:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009248:	d02c      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800924a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800924e:	d824      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009254:	d018      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800925a:	d81e      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800925c:	2b00      	cmp	r3, #0
 800925e:	d003      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009264:	d007      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009266:	e018      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009268:	4b3e      	ldr	r3, [pc, #248]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800926a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926c:	4a3d      	ldr	r2, [pc, #244]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800926e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009272:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009274:	e017      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3304      	adds	r3, #4
 800927a:	2100      	movs	r1, #0
 800927c:	4618      	mov	r0, r3
 800927e:	f001 f8f5 	bl	800a46c <RCCEx_PLL2_Config>
 8009282:	4603      	mov	r3, r0
 8009284:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009286:	e00e      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3324      	adds	r3, #36	; 0x24
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f001 f99e 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009294:	4603      	mov	r3, r0
 8009296:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009298:	e005      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	75fb      	strb	r3, [r7, #23]
      break;
 800929e:	e002      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80092a0:	bf00      	nop
 80092a2:	e000      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80092a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10a      	bne.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80092ac:	4b2d      	ldr	r3, [pc, #180]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80092ba:	492a      	ldr	r1, [pc, #168]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	658b      	str	r3, [r1, #88]	; 0x58
 80092c0:	e001      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d04c      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80092d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092dc:	d030      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80092de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092e2:	d82a      	bhi.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80092e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092e8:	d02c      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80092ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092ee:	d824      	bhi.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80092f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092f4:	d018      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80092f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092fa:	d81e      	bhi.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009304:	d007      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009306:	e018      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009308:	4b16      	ldr	r3, [pc, #88]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	4a15      	ldr	r2, [pc, #84]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800930e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009312:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009314:	e017      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	3304      	adds	r3, #4
 800931a:	2100      	movs	r1, #0
 800931c:	4618      	mov	r0, r3
 800931e:	f001 f8a5 	bl	800a46c <RCCEx_PLL2_Config>
 8009322:	4603      	mov	r3, r0
 8009324:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009326:	e00e      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3324      	adds	r3, #36	; 0x24
 800932c:	2100      	movs	r1, #0
 800932e:	4618      	mov	r0, r3
 8009330:	f001 f94e 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009334:	4603      	mov	r3, r0
 8009336:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009338:	e005      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	75fb      	strb	r3, [r7, #23]
      break;
 800933e:	e002      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009340:	bf00      	nop
 8009342:	e000      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10d      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800934c:	4b05      	ldr	r3, [pc, #20]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800934e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009350:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800935a:	4902      	ldr	r1, [pc, #8]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800935c:	4313      	orrs	r3, r2
 800935e:	658b      	str	r3, [r1, #88]	; 0x58
 8009360:	e004      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009362:	bf00      	nop
 8009364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009368:	7dfb      	ldrb	r3, [r7, #23]
 800936a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d032      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937c:	2b30      	cmp	r3, #48	; 0x30
 800937e:	d01c      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009380:	2b30      	cmp	r3, #48	; 0x30
 8009382:	d817      	bhi.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009384:	2b20      	cmp	r3, #32
 8009386:	d00c      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009388:	2b20      	cmp	r3, #32
 800938a:	d813      	bhi.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800938c:	2b00      	cmp	r3, #0
 800938e:	d016      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009390:	2b10      	cmp	r3, #16
 8009392:	d10f      	bne.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009394:	4baf      	ldr	r3, [pc, #700]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	4aae      	ldr	r2, [pc, #696]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800939a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800939e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80093a0:	e00e      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	3304      	adds	r3, #4
 80093a6:	2102      	movs	r1, #2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f001 f85f 	bl	800a46c <RCCEx_PLL2_Config>
 80093ae:	4603      	mov	r3, r0
 80093b0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80093b2:	e005      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	75fb      	strb	r3, [r7, #23]
      break;
 80093b8:	e002      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80093ba:	bf00      	nop
 80093bc:	e000      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80093be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d109      	bne.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80093c6:	4ba3      	ldr	r3, [pc, #652]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80093c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093d2:	49a0      	ldr	r1, [pc, #640]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80093d8:	e001      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d047      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093f2:	d030      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80093f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093f8:	d82a      	bhi.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80093fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093fe:	d02c      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009400:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009404:	d824      	bhi.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800940a:	d018      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800940c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009410:	d81e      	bhi.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800941a:	d007      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800941c:	e018      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800941e:	4b8d      	ldr	r3, [pc, #564]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009422:	4a8c      	ldr	r2, [pc, #560]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009428:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800942a:	e017      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3304      	adds	r3, #4
 8009430:	2100      	movs	r1, #0
 8009432:	4618      	mov	r0, r3
 8009434:	f001 f81a 	bl	800a46c <RCCEx_PLL2_Config>
 8009438:	4603      	mov	r3, r0
 800943a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800943c:	e00e      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3324      	adds	r3, #36	; 0x24
 8009442:	2100      	movs	r1, #0
 8009444:	4618      	mov	r0, r3
 8009446:	f001 f8c3 	bl	800a5d0 <RCCEx_PLL3_Config>
 800944a:	4603      	mov	r3, r0
 800944c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800944e:	e005      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	75fb      	strb	r3, [r7, #23]
      break;
 8009454:	e002      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8009456:	bf00      	nop
 8009458:	e000      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800945a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d109      	bne.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009462:	4b7c      	ldr	r3, [pc, #496]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009466:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800946e:	4979      	ldr	r1, [pc, #484]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009470:	4313      	orrs	r3, r2
 8009472:	650b      	str	r3, [r1, #80]	; 0x50
 8009474:	e001      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d049      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800948a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800948e:	d02e      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009494:	d828      	bhi.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009496:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800949a:	d02a      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800949c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094a0:	d822      	bhi.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80094a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094a6:	d026      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80094a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094ac:	d81c      	bhi.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80094ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094b2:	d010      	beq.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80094b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094b8:	d816      	bhi.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d01d      	beq.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80094be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c2:	d111      	bne.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3304      	adds	r3, #4
 80094c8:	2101      	movs	r1, #1
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 ffce 	bl	800a46c <RCCEx_PLL2_Config>
 80094d0:	4603      	mov	r3, r0
 80094d2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80094d4:	e012      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3324      	adds	r3, #36	; 0x24
 80094da:	2101      	movs	r1, #1
 80094dc:	4618      	mov	r0, r3
 80094de:	f001 f877 	bl	800a5d0 <RCCEx_PLL3_Config>
 80094e2:	4603      	mov	r3, r0
 80094e4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80094e6:	e009      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	75fb      	strb	r3, [r7, #23]
      break;
 80094ec:	e006      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80094ee:	bf00      	nop
 80094f0:	e004      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80094f2:	bf00      	nop
 80094f4:	e002      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80094f6:	bf00      	nop
 80094f8:	e000      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80094fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094fc:	7dfb      	ldrb	r3, [r7, #23]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d109      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009502:	4b54      	ldr	r3, [pc, #336]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009506:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800950e:	4951      	ldr	r1, [pc, #324]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009510:	4313      	orrs	r3, r2
 8009512:	650b      	str	r3, [r1, #80]	; 0x50
 8009514:	e001      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009516:	7dfb      	ldrb	r3, [r7, #23]
 8009518:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d04b      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800952c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009530:	d02e      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009536:	d828      	bhi.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800953c:	d02a      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800953e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009542:	d822      	bhi.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009544:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009548:	d026      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800954a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800954e:	d81c      	bhi.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009554:	d010      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8009556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800955a:	d816      	bhi.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800955c:	2b00      	cmp	r3, #0
 800955e:	d01d      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009564:	d111      	bne.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3304      	adds	r3, #4
 800956a:	2101      	movs	r1, #1
 800956c:	4618      	mov	r0, r3
 800956e:	f000 ff7d 	bl	800a46c <RCCEx_PLL2_Config>
 8009572:	4603      	mov	r3, r0
 8009574:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009576:	e012      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	3324      	adds	r3, #36	; 0x24
 800957c:	2101      	movs	r1, #1
 800957e:	4618      	mov	r0, r3
 8009580:	f001 f826 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009584:	4603      	mov	r3, r0
 8009586:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009588:	e009      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	75fb      	strb	r3, [r7, #23]
      break;
 800958e:	e006      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009590:	bf00      	nop
 8009592:	e004      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009594:	bf00      	nop
 8009596:	e002      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009598:	bf00      	nop
 800959a:	e000      	b.n	800959e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800959c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800959e:	7dfb      	ldrb	r3, [r7, #23]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80095a4:	4b2b      	ldr	r3, [pc, #172]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095b2:	4928      	ldr	r1, [pc, #160]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	658b      	str	r3, [r1, #88]	; 0x58
 80095b8:	e001      	b.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d02f      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095d2:	d00e      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80095d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095d8:	d814      	bhi.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d015      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80095de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095e2:	d10f      	bne.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095e4:	4b1b      	ldr	r3, [pc, #108]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e8:	4a1a      	ldr	r2, [pc, #104]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80095ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80095f0:	e00c      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3304      	adds	r3, #4
 80095f6:	2101      	movs	r1, #1
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 ff37 	bl	800a46c <RCCEx_PLL2_Config>
 80095fe:	4603      	mov	r3, r0
 8009600:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009602:	e003      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	75fb      	strb	r3, [r7, #23]
      break;
 8009608:	e000      	b.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800960a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800960c:	7dfb      	ldrb	r3, [r7, #23]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d109      	bne.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009612:	4b10      	ldr	r3, [pc, #64]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009616:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800961e:	490d      	ldr	r1, [pc, #52]	; (8009654 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009620:	4313      	orrs	r3, r2
 8009622:	650b      	str	r3, [r1, #80]	; 0x50
 8009624:	e001      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009626:	7dfb      	ldrb	r3, [r7, #23]
 8009628:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d033      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963a:	2b03      	cmp	r3, #3
 800963c:	d81c      	bhi.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800963e:	a201      	add	r2, pc, #4	; (adr r2, 8009644 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009644:	0800967f 	.word	0x0800967f
 8009648:	08009659 	.word	0x08009659
 800964c:	08009667 	.word	0x08009667
 8009650:	0800967f 	.word	0x0800967f
 8009654:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009658:	4bb8      	ldr	r3, [pc, #736]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800965a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965c:	4ab7      	ldr	r2, [pc, #732]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800965e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009662:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009664:	e00c      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	3304      	adds	r3, #4
 800966a:	2102      	movs	r1, #2
 800966c:	4618      	mov	r0, r3
 800966e:	f000 fefd 	bl	800a46c <RCCEx_PLL2_Config>
 8009672:	4603      	mov	r3, r0
 8009674:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009676:	e003      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	75fb      	strb	r3, [r7, #23]
      break;
 800967c:	e000      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800967e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d109      	bne.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009686:	4bad      	ldr	r3, [pc, #692]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800968a:	f023 0203 	bic.w	r2, r3, #3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009692:	49aa      	ldr	r1, [pc, #680]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009694:	4313      	orrs	r3, r2
 8009696:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009698:	e001      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969a:	7dfb      	ldrb	r3, [r7, #23]
 800969c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 8086 	beq.w	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096ac:	4ba4      	ldr	r3, [pc, #656]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4aa3      	ldr	r2, [pc, #652]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80096b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096b8:	f7f8 ff68 	bl	800258c <HAL_GetTick>
 80096bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096be:	e009      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096c0:	f7f8 ff64 	bl	800258c <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	2b64      	cmp	r3, #100	; 0x64
 80096cc:	d902      	bls.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80096ce:	2303      	movs	r3, #3
 80096d0:	75fb      	strb	r3, [r7, #23]
        break;
 80096d2:	e005      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096d4:	4b9a      	ldr	r3, [pc, #616]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d0ef      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80096e0:	7dfb      	ldrb	r3, [r7, #23]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d166      	bne.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80096e6:	4b95      	ldr	r3, [pc, #596]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80096e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096f0:	4053      	eors	r3, r2
 80096f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d013      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096fa:	4b90      	ldr	r3, [pc, #576]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80096fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009702:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009704:	4b8d      	ldr	r3, [pc, #564]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009708:	4a8c      	ldr	r2, [pc, #560]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800970a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800970e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009710:	4b8a      	ldr	r3, [pc, #552]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009714:	4a89      	ldr	r2, [pc, #548]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800971a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800971c:	4a87      	ldr	r2, [pc, #540]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800972c:	d115      	bne.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800972e:	f7f8 ff2d 	bl	800258c <HAL_GetTick>
 8009732:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009734:	e00b      	b.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009736:	f7f8 ff29 	bl	800258c <HAL_GetTick>
 800973a:	4602      	mov	r2, r0
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	f241 3288 	movw	r2, #5000	; 0x1388
 8009744:	4293      	cmp	r3, r2
 8009746:	d902      	bls.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	75fb      	strb	r3, [r7, #23]
            break;
 800974c:	e005      	b.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800974e:	4b7b      	ldr	r3, [pc, #492]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009752:	f003 0302 	and.w	r3, r3, #2
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0ed      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d126      	bne.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800976a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800976e:	d10d      	bne.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009770:	4b72      	ldr	r3, [pc, #456]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800977e:	0919      	lsrs	r1, r3, #4
 8009780:	4b70      	ldr	r3, [pc, #448]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8009782:	400b      	ands	r3, r1
 8009784:	496d      	ldr	r1, [pc, #436]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009786:	4313      	orrs	r3, r2
 8009788:	610b      	str	r3, [r1, #16]
 800978a:	e005      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800978c:	4b6b      	ldr	r3, [pc, #428]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	4a6a      	ldr	r2, [pc, #424]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009792:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009796:	6113      	str	r3, [r2, #16]
 8009798:	4b68      	ldr	r3, [pc, #416]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800979a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80097a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097a6:	4965      	ldr	r1, [pc, #404]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	670b      	str	r3, [r1, #112]	; 0x70
 80097ac:	e004      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097ae:	7dfb      	ldrb	r3, [r7, #23]
 80097b0:	75bb      	strb	r3, [r7, #22]
 80097b2:	e001      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
 80097b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d07e      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097c8:	2b28      	cmp	r3, #40	; 0x28
 80097ca:	d867      	bhi.n	800989c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80097cc:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80097ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d2:	bf00      	nop
 80097d4:	080098a3 	.word	0x080098a3
 80097d8:	0800989d 	.word	0x0800989d
 80097dc:	0800989d 	.word	0x0800989d
 80097e0:	0800989d 	.word	0x0800989d
 80097e4:	0800989d 	.word	0x0800989d
 80097e8:	0800989d 	.word	0x0800989d
 80097ec:	0800989d 	.word	0x0800989d
 80097f0:	0800989d 	.word	0x0800989d
 80097f4:	08009879 	.word	0x08009879
 80097f8:	0800989d 	.word	0x0800989d
 80097fc:	0800989d 	.word	0x0800989d
 8009800:	0800989d 	.word	0x0800989d
 8009804:	0800989d 	.word	0x0800989d
 8009808:	0800989d 	.word	0x0800989d
 800980c:	0800989d 	.word	0x0800989d
 8009810:	0800989d 	.word	0x0800989d
 8009814:	0800988b 	.word	0x0800988b
 8009818:	0800989d 	.word	0x0800989d
 800981c:	0800989d 	.word	0x0800989d
 8009820:	0800989d 	.word	0x0800989d
 8009824:	0800989d 	.word	0x0800989d
 8009828:	0800989d 	.word	0x0800989d
 800982c:	0800989d 	.word	0x0800989d
 8009830:	0800989d 	.word	0x0800989d
 8009834:	080098a3 	.word	0x080098a3
 8009838:	0800989d 	.word	0x0800989d
 800983c:	0800989d 	.word	0x0800989d
 8009840:	0800989d 	.word	0x0800989d
 8009844:	0800989d 	.word	0x0800989d
 8009848:	0800989d 	.word	0x0800989d
 800984c:	0800989d 	.word	0x0800989d
 8009850:	0800989d 	.word	0x0800989d
 8009854:	080098a3 	.word	0x080098a3
 8009858:	0800989d 	.word	0x0800989d
 800985c:	0800989d 	.word	0x0800989d
 8009860:	0800989d 	.word	0x0800989d
 8009864:	0800989d 	.word	0x0800989d
 8009868:	0800989d 	.word	0x0800989d
 800986c:	0800989d 	.word	0x0800989d
 8009870:	0800989d 	.word	0x0800989d
 8009874:	080098a3 	.word	0x080098a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3304      	adds	r3, #4
 800987c:	2101      	movs	r1, #1
 800987e:	4618      	mov	r0, r3
 8009880:	f000 fdf4 	bl	800a46c <RCCEx_PLL2_Config>
 8009884:	4603      	mov	r3, r0
 8009886:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009888:	e00c      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	3324      	adds	r3, #36	; 0x24
 800988e:	2101      	movs	r1, #1
 8009890:	4618      	mov	r0, r3
 8009892:	f000 fe9d 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009896:	4603      	mov	r3, r0
 8009898:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800989a:	e003      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	75fb      	strb	r3, [r7, #23]
      break;
 80098a0:	e000      	b.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80098a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d109      	bne.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80098aa:	4b24      	ldr	r3, [pc, #144]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098b6:	4921      	ldr	r1, [pc, #132]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80098b8:	4313      	orrs	r3, r2
 80098ba:	654b      	str	r3, [r1, #84]	; 0x54
 80098bc:	e001      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0302 	and.w	r3, r3, #2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d03e      	beq.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	d820      	bhi.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80098d6:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	0800991f 	.word	0x0800991f
 80098e0:	080098f5 	.word	0x080098f5
 80098e4:	08009907 	.word	0x08009907
 80098e8:	0800991f 	.word	0x0800991f
 80098ec:	0800991f 	.word	0x0800991f
 80098f0:	0800991f 	.word	0x0800991f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3304      	adds	r3, #4
 80098f8:	2101      	movs	r1, #1
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 fdb6 	bl	800a46c <RCCEx_PLL2_Config>
 8009900:	4603      	mov	r3, r0
 8009902:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009904:	e00c      	b.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	3324      	adds	r3, #36	; 0x24
 800990a:	2101      	movs	r1, #1
 800990c:	4618      	mov	r0, r3
 800990e:	f000 fe5f 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009912:	4603      	mov	r3, r0
 8009914:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009916:	e003      	b.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	75fb      	strb	r3, [r7, #23]
      break;
 800991c:	e000      	b.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800991e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009920:	7dfb      	ldrb	r3, [r7, #23]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d110      	bne.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009926:	4b05      	ldr	r3, [pc, #20]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800992a:	f023 0207 	bic.w	r2, r3, #7
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009932:	4902      	ldr	r1, [pc, #8]	; (800993c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009934:	4313      	orrs	r3, r2
 8009936:	654b      	str	r3, [r1, #84]	; 0x54
 8009938:	e008      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800993a:	bf00      	nop
 800993c:	58024400 	.word	0x58024400
 8009940:	58024800 	.word	0x58024800
 8009944:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009948:	7dfb      	ldrb	r3, [r7, #23]
 800994a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0304 	and.w	r3, r3, #4
 8009954:	2b00      	cmp	r3, #0
 8009956:	d039      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800995e:	2b05      	cmp	r3, #5
 8009960:	d820      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009962:	a201      	add	r2, pc, #4	; (adr r2, 8009968 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009968:	080099ab 	.word	0x080099ab
 800996c:	08009981 	.word	0x08009981
 8009970:	08009993 	.word	0x08009993
 8009974:	080099ab 	.word	0x080099ab
 8009978:	080099ab 	.word	0x080099ab
 800997c:	080099ab 	.word	0x080099ab
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3304      	adds	r3, #4
 8009984:	2101      	movs	r1, #1
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fd70 	bl	800a46c <RCCEx_PLL2_Config>
 800998c:	4603      	mov	r3, r0
 800998e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009990:	e00c      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	3324      	adds	r3, #36	; 0x24
 8009996:	2101      	movs	r1, #1
 8009998:	4618      	mov	r0, r3
 800999a:	f000 fe19 	bl	800a5d0 <RCCEx_PLL3_Config>
 800999e:	4603      	mov	r3, r0
 80099a0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80099a2:	e003      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	75fb      	strb	r3, [r7, #23]
      break;
 80099a8:	e000      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80099aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099b2:	4bb7      	ldr	r3, [pc, #732]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80099b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099b6:	f023 0207 	bic.w	r2, r3, #7
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c0:	49b3      	ldr	r1, [pc, #716]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	658b      	str	r3, [r1, #88]	; 0x58
 80099c6:	e001      	b.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0320 	and.w	r3, r3, #32
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d04b      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099e2:	d02e      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80099e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099e8:	d828      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80099ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ee:	d02a      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80099f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099f4:	d822      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80099f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099fa:	d026      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80099fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009a00:	d81c      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a06:	d010      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a0c:	d816      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d01d      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009a12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a16:	d111      	bne.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 fd24 	bl	800a46c <RCCEx_PLL2_Config>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009a28:	e012      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3324      	adds	r3, #36	; 0x24
 8009a2e:	2102      	movs	r1, #2
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fdcd 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009a36:	4603      	mov	r3, r0
 8009a38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009a3a:	e009      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a40:	e006      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009a42:	bf00      	nop
 8009a44:	e004      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009a46:	bf00      	nop
 8009a48:	e002      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009a4a:	bf00      	nop
 8009a4c:	e000      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10a      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a56:	4b8e      	ldr	r3, [pc, #568]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a64:	498a      	ldr	r1, [pc, #552]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	654b      	str	r3, [r1, #84]	; 0x54
 8009a6a:	e001      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d04b      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a86:	d02e      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8009a88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a8c:	d828      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a92:	d02a      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a98:	d822      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009a9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a9e:	d026      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009aa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009aa4:	d81c      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aaa:	d010      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ab0:	d816      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d01d      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aba:	d111      	bne.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fcd2 	bl	800a46c <RCCEx_PLL2_Config>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009acc:	e012      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3324      	adds	r3, #36	; 0x24
 8009ad2:	2102      	movs	r1, #2
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fd7b 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009ade:	e009      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae4:	e006      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009ae6:	bf00      	nop
 8009ae8:	e004      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009aea:	bf00      	nop
 8009aec:	e002      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009aee:	bf00      	nop
 8009af0:	e000      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10a      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009afa:	4b65      	ldr	r3, [pc, #404]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b08:	4961      	ldr	r1, [pc, #388]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	658b      	str	r3, [r1, #88]	; 0x58
 8009b0e:	e001      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d04b      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009b2a:	d02e      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009b2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009b30:	d828      	bhi.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b36:	d02a      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b3c:	d822      	bhi.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009b3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009b42:	d026      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009b44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009b48:	d81c      	bhi.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b4e:	d010      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b54:	d816      	bhi.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d01d      	beq.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b5e:	d111      	bne.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3304      	adds	r3, #4
 8009b64:	2100      	movs	r1, #0
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fc80 	bl	800a46c <RCCEx_PLL2_Config>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009b70:	e012      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	3324      	adds	r3, #36	; 0x24
 8009b76:	2102      	movs	r1, #2
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fd29 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009b82:	e009      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	75fb      	strb	r3, [r7, #23]
      break;
 8009b88:	e006      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009b8a:	bf00      	nop
 8009b8c:	e004      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009b8e:	bf00      	nop
 8009b90:	e002      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009b92:	bf00      	nop
 8009b94:	e000      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10a      	bne.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009b9e:	4b3c      	ldr	r3, [pc, #240]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009bac:	4938      	ldr	r1, [pc, #224]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	658b      	str	r3, [r1, #88]	; 0x58
 8009bb2:	e001      	b.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb4:	7dfb      	ldrb	r3, [r7, #23]
 8009bb6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0308 	and.w	r3, r3, #8
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d01a      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bce:	d10a      	bne.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	3324      	adds	r3, #36	; 0x24
 8009bd4:	2102      	movs	r1, #2
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 fcfa 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009be6:	4b2a      	ldr	r3, [pc, #168]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bf4:	4926      	ldr	r1, [pc, #152]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0310 	and.w	r3, r3, #16
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d01a      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c10:	d10a      	bne.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	3324      	adds	r3, #36	; 0x24
 8009c16:	2102      	movs	r1, #2
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 fcd9 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
 8009c26:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c28:	4b19      	ldr	r3, [pc, #100]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c36:	4916      	ldr	r1, [pc, #88]	; (8009c90 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d036      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c52:	d01f      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c58:	d817      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c62:	d009      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009c64:	e011      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 fbfd 	bl	800a46c <RCCEx_PLL2_Config>
 8009c72:	4603      	mov	r3, r0
 8009c74:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009c76:	e00e      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3324      	adds	r3, #36	; 0x24
 8009c7c:	2102      	movs	r1, #2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 fca6 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009c84:	4603      	mov	r3, r0
 8009c86:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009c88:	e005      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c8e:	e002      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009c90:	58024400 	.word	0x58024400
      break;
 8009c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10a      	bne.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c9c:	4b93      	ldr	r3, [pc, #588]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009caa:	4990      	ldr	r1, [pc, #576]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009cac:	4313      	orrs	r3, r2
 8009cae:	658b      	str	r3, [r1, #88]	; 0x58
 8009cb0:	e001      	b.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb2:	7dfb      	ldrb	r3, [r7, #23]
 8009cb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d033      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ccc:	d01c      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009cce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009cd2:	d816      	bhi.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cd8:	d003      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cde:	d007      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009ce0:	e00f      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ce2:	4b82      	ldr	r3, [pc, #520]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce6:	4a81      	ldr	r2, [pc, #516]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009cee:	e00c      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3324      	adds	r3, #36	; 0x24
 8009cf4:	2101      	movs	r1, #1
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 fc6a 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009d00:	e003      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	75fb      	strb	r3, [r7, #23]
      break;
 8009d06:	e000      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10a      	bne.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d10:	4b76      	ldr	r3, [pc, #472]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d1e:	4973      	ldr	r1, [pc, #460]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	654b      	str	r3, [r1, #84]	; 0x54
 8009d24:	e001      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d26:	7dfb      	ldrb	r3, [r7, #23]
 8009d28:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d029      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d42:	d007      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009d44:	e00f      	b.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d46:	4b69      	ldr	r3, [pc, #420]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4a:	4a68      	ldr	r2, [pc, #416]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009d52:	e00b      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3304      	adds	r3, #4
 8009d58:	2102      	movs	r1, #2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 fb86 	bl	800a46c <RCCEx_PLL2_Config>
 8009d60:	4603      	mov	r3, r0
 8009d62:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009d64:	e002      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	75fb      	strb	r3, [r7, #23]
      break;
 8009d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d109      	bne.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d72:	4b5e      	ldr	r3, [pc, #376]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d7e:	495b      	ldr	r1, [pc, #364]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d80:	4313      	orrs	r3, r2
 8009d82:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009d84:	e001      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00a      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	3324      	adds	r3, #36	; 0x24
 8009d9a:	2102      	movs	r1, #2
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 fc17 	bl	800a5d0 <RCCEx_PLL3_Config>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d030      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dc0:	d017      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dc6:	d811      	bhi.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dcc:	d013      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dd2:	d80b      	bhi.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d010      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ddc:	d106      	bne.n	8009dec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dde:	4b43      	ldr	r3, [pc, #268]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de2:	4a42      	ldr	r2, [pc, #264]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009de8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009dea:	e007      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dec:	2301      	movs	r3, #1
 8009dee:	75fb      	strb	r3, [r7, #23]
      break;
 8009df0:	e004      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009df2:	bf00      	nop
 8009df4:	e002      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009df6:	bf00      	nop
 8009df8:	e000      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dfc:	7dfb      	ldrb	r3, [r7, #23]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d109      	bne.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e02:	4b3a      	ldr	r3, [pc, #232]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e0e:	4937      	ldr	r1, [pc, #220]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	654b      	str	r3, [r1, #84]	; 0x54
 8009e14:	e001      	b.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e16:	7dfb      	ldrb	r3, [r7, #23]
 8009e18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d008      	beq.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e26:	4b31      	ldr	r3, [pc, #196]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e32:	492e      	ldr	r1, [pc, #184]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d009      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009e44:	4b29      	ldr	r3, [pc, #164]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e46:	691b      	ldr	r3, [r3, #16]
 8009e48:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009e52:	4926      	ldr	r1, [pc, #152]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e54:	4313      	orrs	r3, r2
 8009e56:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d008      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009e64:	4b21      	ldr	r3, [pc, #132]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e70:	491e      	ldr	r1, [pc, #120]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d00d      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009e82:	4b1a      	ldr	r3, [pc, #104]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	4a19      	ldr	r2, [pc, #100]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e8c:	6113      	str	r3, [r2, #16]
 8009e8e:	4b17      	ldr	r3, [pc, #92]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e90:	691a      	ldr	r2, [r3, #16]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009e98:	4914      	ldr	r1, [pc, #80]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	da08      	bge.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ea6:	4b11      	ldr	r3, [pc, #68]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eb2:	490e      	ldr	r1, [pc, #56]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d009      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009ec4:	4b09      	ldr	r3, [pc, #36]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed2:	4906      	ldr	r1, [pc, #24]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009ed8:	7dbb      	ldrb	r3, [r7, #22]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e000      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	58024400 	.word	0x58024400

08009ef0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009ef4:	f7ff f860 	bl	8008fb8 <HAL_RCC_GetHCLKFreq>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	4b06      	ldr	r3, [pc, #24]	; (8009f14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	091b      	lsrs	r3, r3, #4
 8009f00:	f003 0307 	and.w	r3, r3, #7
 8009f04:	4904      	ldr	r1, [pc, #16]	; (8009f18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009f06:	5ccb      	ldrb	r3, [r1, r3]
 8009f08:	f003 031f 	and.w	r3, r3, #31
 8009f0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	58024400 	.word	0x58024400
 8009f18:	0800f9c4 	.word	0x0800f9c4

08009f1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b089      	sub	sp, #36	; 0x24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f24:	4ba1      	ldr	r3, [pc, #644]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f28:	f003 0303 	and.w	r3, r3, #3
 8009f2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009f2e:	4b9f      	ldr	r3, [pc, #636]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f32:	0b1b      	lsrs	r3, r3, #12
 8009f34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009f3a:	4b9c      	ldr	r3, [pc, #624]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3e:	091b      	lsrs	r3, r3, #4
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009f46:	4b99      	ldr	r3, [pc, #612]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4a:	08db      	lsrs	r3, r3, #3
 8009f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	fb02 f303 	mul.w	r3, r2, r3
 8009f56:	ee07 3a90 	vmov	s15, r3
 8009f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 8111 	beq.w	800a18c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	f000 8083 	beq.w	800a078 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	f200 80a1 	bhi.w	800a0bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d056      	beq.n	800a034 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009f86:	e099      	b.n	800a0bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f88:	4b88      	ldr	r3, [pc, #544]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 0320 	and.w	r3, r3, #32
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d02d      	beq.n	8009ff0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f94:	4b85      	ldr	r3, [pc, #532]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	08db      	lsrs	r3, r3, #3
 8009f9a:	f003 0303 	and.w	r3, r3, #3
 8009f9e:	4a84      	ldr	r2, [pc, #528]	; (800a1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	ee07 3a90 	vmov	s15, r3
 8009fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	ee07 3a90 	vmov	s15, r3
 8009fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fbe:	4b7b      	ldr	r3, [pc, #492]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc6:	ee07 3a90 	vmov	s15, r3
 8009fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009fee:	e087      	b.n	800a100 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a002:	4b6a      	ldr	r3, [pc, #424]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00a:	ee07 3a90 	vmov	s15, r3
 800a00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a012:	ed97 6a03 	vldr	s12, [r7, #12]
 800a016:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a032:	e065      	b.n	800a100 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	ee07 3a90 	vmov	s15, r3
 800a03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a1bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a046:	4b59      	ldr	r3, [pc, #356]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04e:	ee07 3a90 	vmov	s15, r3
 800a052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a056:	ed97 6a03 	vldr	s12, [r7, #12]
 800a05a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a072:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a076:	e043      	b.n	800a100 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	ee07 3a90 	vmov	s15, r3
 800a07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a082:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a08a:	4b48      	ldr	r3, [pc, #288]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a092:	ee07 3a90 	vmov	s15, r3
 800a096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a09a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a09e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0ba:	e021      	b.n	800a100 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	ee07 3a90 	vmov	s15, r3
 800a0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a1bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ce:	4b37      	ldr	r3, [pc, #220]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d6:	ee07 3a90 	vmov	s15, r3
 800a0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a100:	4b2a      	ldr	r3, [pc, #168]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a104:	0a5b      	lsrs	r3, r3, #9
 800a106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a10a:	ee07 3a90 	vmov	s15, r3
 800a10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a116:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a11a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a11e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a126:	ee17 2a90 	vmov	r2, s15
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a12e:	4b1f      	ldr	r3, [pc, #124]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a132:	0c1b      	lsrs	r3, r3, #16
 800a134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a138:	ee07 3a90 	vmov	s15, r3
 800a13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a144:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a148:	edd7 6a07 	vldr	s13, [r7, #28]
 800a14c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a154:	ee17 2a90 	vmov	r2, s15
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a15c:	4b13      	ldr	r3, [pc, #76]	; (800a1ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a160:	0e1b      	lsrs	r3, r3, #24
 800a162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a166:	ee07 3a90 	vmov	s15, r3
 800a16a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a172:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a176:	edd7 6a07 	vldr	s13, [r7, #28]
 800a17a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a17e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a182:	ee17 2a90 	vmov	r2, s15
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a18a:	e008      	b.n	800a19e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	609a      	str	r2, [r3, #8]
}
 800a19e:	bf00      	nop
 800a1a0:	3724      	adds	r7, #36	; 0x24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	58024400 	.word	0x58024400
 800a1b0:	03d09000 	.word	0x03d09000
 800a1b4:	46000000 	.word	0x46000000
 800a1b8:	4c742400 	.word	0x4c742400
 800a1bc:	4a742400 	.word	0x4a742400
 800a1c0:	4bbebc20 	.word	0x4bbebc20

0800a1c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b089      	sub	sp, #36	; 0x24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1cc:	4ba1      	ldr	r3, [pc, #644]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d0:	f003 0303 	and.w	r3, r3, #3
 800a1d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a1d6:	4b9f      	ldr	r3, [pc, #636]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1da:	0d1b      	lsrs	r3, r3, #20
 800a1dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a1e2:	4b9c      	ldr	r3, [pc, #624]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e6:	0a1b      	lsrs	r3, r3, #8
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a1ee:	4b99      	ldr	r3, [pc, #612]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1f2:	08db      	lsrs	r3, r3, #3
 800a1f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	fb02 f303 	mul.w	r3, r2, r3
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a206:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f000 8111 	beq.w	800a434 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	2b02      	cmp	r3, #2
 800a216:	f000 8083 	beq.w	800a320 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	f200 80a1 	bhi.w	800a364 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d003      	beq.n	800a230 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d056      	beq.n	800a2dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a22e:	e099      	b.n	800a364 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a230:	4b88      	ldr	r3, [pc, #544]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0320 	and.w	r3, r3, #32
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d02d      	beq.n	800a298 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a23c:	4b85      	ldr	r3, [pc, #532]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	08db      	lsrs	r3, r3, #3
 800a242:	f003 0303 	and.w	r3, r3, #3
 800a246:	4a84      	ldr	r2, [pc, #528]	; (800a458 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a248:	fa22 f303 	lsr.w	r3, r2, r3
 800a24c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	ee07 3a90 	vmov	s15, r3
 800a254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a266:	4b7b      	ldr	r3, [pc, #492]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a26e:	ee07 3a90 	vmov	s15, r3
 800a272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a276:	ed97 6a03 	vldr	s12, [r7, #12]
 800a27a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a292:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a296:	e087      	b.n	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	ee07 3a90 	vmov	s15, r3
 800a29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a460 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2aa:	4b6a      	ldr	r3, [pc, #424]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b2:	ee07 3a90 	vmov	s15, r3
 800a2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2da:	e065      	b.n	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2dc:	697b      	ldr	r3, [r7, #20]
 800a2de:	ee07 3a90 	vmov	s15, r3
 800a2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a464 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ee:	4b59      	ldr	r3, [pc, #356]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f6:	ee07 3a90 	vmov	s15, r3
 800a2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a302:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a30e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a31a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a31e:	e043      	b.n	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	ee07 3a90 	vmov	s15, r3
 800a326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a468 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a332:	4b48      	ldr	r3, [pc, #288]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33a:	ee07 3a90 	vmov	s15, r3
 800a33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a342:	ed97 6a03 	vldr	s12, [r7, #12]
 800a346:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a35e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a362:	e021      	b.n	800a3a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	ee07 3a90 	vmov	s15, r3
 800a36a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a36e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a464 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a376:	4b37      	ldr	r3, [pc, #220]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a37e:	ee07 3a90 	vmov	s15, r3
 800a382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a386:	ed97 6a03 	vldr	s12, [r7, #12]
 800a38a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a45c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a38e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a39a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a3a8:	4b2a      	ldr	r3, [pc, #168]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ac:	0a5b      	lsrs	r3, r3, #9
 800a3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b2:	ee07 3a90 	vmov	s15, r3
 800a3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ce:	ee17 2a90 	vmov	r2, s15
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a3d6:	4b1f      	ldr	r3, [pc, #124]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3da:	0c1b      	lsrs	r3, r3, #16
 800a3dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3e0:	ee07 3a90 	vmov	s15, r3
 800a3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a3ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3fc:	ee17 2a90 	vmov	r2, s15
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a404:	4b13      	ldr	r3, [pc, #76]	; (800a454 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a408:	0e1b      	lsrs	r3, r3, #24
 800a40a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a40e:	ee07 3a90 	vmov	s15, r3
 800a412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a41a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a41e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a42a:	ee17 2a90 	vmov	r2, s15
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a432:	e008      	b.n	800a446 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	609a      	str	r2, [r3, #8]
}
 800a446:	bf00      	nop
 800a448:	3724      	adds	r7, #36	; 0x24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	58024400 	.word	0x58024400
 800a458:	03d09000 	.word	0x03d09000
 800a45c:	46000000 	.word	0x46000000
 800a460:	4c742400 	.word	0x4c742400
 800a464:	4a742400 	.word	0x4a742400
 800a468:	4bbebc20 	.word	0x4bbebc20

0800a46c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a47a:	4b53      	ldr	r3, [pc, #332]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	2b03      	cmp	r3, #3
 800a484:	d101      	bne.n	800a48a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e099      	b.n	800a5be <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a48a:	4b4f      	ldr	r3, [pc, #316]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a4e      	ldr	r2, [pc, #312]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a490:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a496:	f7f8 f879 	bl	800258c <HAL_GetTick>
 800a49a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a49c:	e008      	b.n	800a4b0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a49e:	f7f8 f875 	bl	800258c <HAL_GetTick>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d901      	bls.n	800a4b0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e086      	b.n	800a5be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4b0:	4b45      	ldr	r3, [pc, #276]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1f0      	bne.n	800a49e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a4bc:	4b42      	ldr	r3, [pc, #264]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	031b      	lsls	r3, r3, #12
 800a4ca:	493f      	ldr	r1, [pc, #252]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	628b      	str	r3, [r1, #40]	; 0x28
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	025b      	lsls	r3, r3, #9
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	431a      	orrs	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	041b      	lsls	r3, r3, #16
 800a4ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	061b      	lsls	r3, r3, #24
 800a4fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a500:	4931      	ldr	r1, [pc, #196]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a502:	4313      	orrs	r3, r2
 800a504:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a506:	4b30      	ldr	r3, [pc, #192]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	695b      	ldr	r3, [r3, #20]
 800a512:	492d      	ldr	r1, [pc, #180]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a514:	4313      	orrs	r3, r2
 800a516:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a518:	4b2b      	ldr	r3, [pc, #172]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	f023 0220 	bic.w	r2, r3, #32
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	4928      	ldr	r1, [pc, #160]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a526:	4313      	orrs	r3, r2
 800a528:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a52a:	4b27      	ldr	r3, [pc, #156]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52e:	4a26      	ldr	r2, [pc, #152]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a530:	f023 0310 	bic.w	r3, r3, #16
 800a534:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a536:	4b24      	ldr	r3, [pc, #144]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a538:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a53a:	4b24      	ldr	r3, [pc, #144]	; (800a5cc <RCCEx_PLL2_Config+0x160>)
 800a53c:	4013      	ands	r3, r2
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	69d2      	ldr	r2, [r2, #28]
 800a542:	00d2      	lsls	r2, r2, #3
 800a544:	4920      	ldr	r1, [pc, #128]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a546:	4313      	orrs	r3, r2
 800a548:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a54a:	4b1f      	ldr	r3, [pc, #124]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54e:	4a1e      	ldr	r2, [pc, #120]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a550:	f043 0310 	orr.w	r3, r3, #16
 800a554:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d106      	bne.n	800a56a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a55c:	4b1a      	ldr	r3, [pc, #104]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a560:	4a19      	ldr	r2, [pc, #100]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a566:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a568:	e00f      	b.n	800a58a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d106      	bne.n	800a57e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a570:	4b15      	ldr	r3, [pc, #84]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a574:	4a14      	ldr	r2, [pc, #80]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a57a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a57c:	e005      	b.n	800a58a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a57e:	4b12      	ldr	r3, [pc, #72]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a582:	4a11      	ldr	r2, [pc, #68]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a588:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a58a:	4b0f      	ldr	r3, [pc, #60]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a0e      	ldr	r2, [pc, #56]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a596:	f7f7 fff9 	bl	800258c <HAL_GetTick>
 800a59a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a59c:	e008      	b.n	800a5b0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a59e:	f7f7 fff5 	bl	800258c <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d901      	bls.n	800a5b0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e006      	b.n	800a5be <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5b0:	4b05      	ldr	r3, [pc, #20]	; (800a5c8 <RCCEx_PLL2_Config+0x15c>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0f0      	beq.n	800a59e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	58024400 	.word	0x58024400
 800a5cc:	ffff0007 	.word	0xffff0007

0800a5d0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5de:	4b53      	ldr	r3, [pc, #332]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a5e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e2:	f003 0303 	and.w	r3, r3, #3
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d101      	bne.n	800a5ee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e099      	b.n	800a722 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a5ee:	4b4f      	ldr	r3, [pc, #316]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a4e      	ldr	r2, [pc, #312]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a5f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5fa:	f7f7 ffc7 	bl	800258c <HAL_GetTick>
 800a5fe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a600:	e008      	b.n	800a614 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a602:	f7f7 ffc3 	bl	800258c <HAL_GetTick>
 800a606:	4602      	mov	r2, r0
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d901      	bls.n	800a614 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e086      	b.n	800a722 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a614:	4b45      	ldr	r3, [pc, #276]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1f0      	bne.n	800a602 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a620:	4b42      	ldr	r3, [pc, #264]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a624:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	051b      	lsls	r3, r3, #20
 800a62e:	493f      	ldr	r1, [pc, #252]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a630:	4313      	orrs	r3, r2
 800a632:	628b      	str	r3, [r1, #40]	; 0x28
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	3b01      	subs	r3, #1
 800a63a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	3b01      	subs	r3, #1
 800a644:	025b      	lsls	r3, r3, #9
 800a646:	b29b      	uxth	r3, r3
 800a648:	431a      	orrs	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	3b01      	subs	r3, #1
 800a650:	041b      	lsls	r3, r3, #16
 800a652:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a656:	431a      	orrs	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	691b      	ldr	r3, [r3, #16]
 800a65c:	3b01      	subs	r3, #1
 800a65e:	061b      	lsls	r3, r3, #24
 800a660:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a664:	4931      	ldr	r1, [pc, #196]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a666:	4313      	orrs	r3, r2
 800a668:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a66a:	4b30      	ldr	r3, [pc, #192]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	492d      	ldr	r1, [pc, #180]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a67c:	4b2b      	ldr	r3, [pc, #172]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a680:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	4928      	ldr	r1, [pc, #160]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a68a:	4313      	orrs	r3, r2
 800a68c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a68e:	4b27      	ldr	r3, [pc, #156]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a692:	4a26      	ldr	r2, [pc, #152]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a698:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a69a:	4b24      	ldr	r3, [pc, #144]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a69c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a69e:	4b24      	ldr	r3, [pc, #144]	; (800a730 <RCCEx_PLL3_Config+0x160>)
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	69d2      	ldr	r2, [r2, #28]
 800a6a6:	00d2      	lsls	r2, r2, #3
 800a6a8:	4920      	ldr	r1, [pc, #128]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a6ae:	4b1f      	ldr	r3, [pc, #124]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b2:	4a1e      	ldr	r2, [pc, #120]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d106      	bne.n	800a6ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a6c0:	4b1a      	ldr	r3, [pc, #104]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c4:	4a19      	ldr	r2, [pc, #100]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a6ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6cc:	e00f      	b.n	800a6ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d106      	bne.n	800a6e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a6d4:	4b15      	ldr	r3, [pc, #84]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d8:	4a14      	ldr	r2, [pc, #80]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a6de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a6e0:	e005      	b.n	800a6ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a6e2:	4b12      	ldr	r3, [pc, #72]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e6:	4a11      	ldr	r2, [pc, #68]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a6ee:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a0e      	ldr	r2, [pc, #56]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a6f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6fa:	f7f7 ff47 	bl	800258c <HAL_GetTick>
 800a6fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a700:	e008      	b.n	800a714 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a702:	f7f7 ff43 	bl	800258c <HAL_GetTick>
 800a706:	4602      	mov	r2, r0
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d901      	bls.n	800a714 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e006      	b.n	800a722 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a714:	4b05      	ldr	r3, [pc, #20]	; (800a72c <RCCEx_PLL3_Config+0x15c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d0f0      	beq.n	800a702 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a720:	7bfb      	ldrb	r3, [r7, #15]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	58024400 	.word	0x58024400
 800a730:	ffff0007 	.word	0xffff0007

0800a734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e049      	b.n	800a7da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d106      	bne.n	800a760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7f6 ff96 	bl	800168c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2202      	movs	r2, #2
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	3304      	adds	r3, #4
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f000 f9ee 	bl	800ab54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
	...

0800a7e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d001      	beq.n	800a7fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e04f      	b.n	800a89c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2202      	movs	r2, #2
 800a800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0201 	orr.w	r2, r2, #1
 800a812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a23      	ldr	r2, [pc, #140]	; (800a8a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d01d      	beq.n	800a85a <HAL_TIM_Base_Start_IT+0x76>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a826:	d018      	beq.n	800a85a <HAL_TIM_Base_Start_IT+0x76>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a1f      	ldr	r2, [pc, #124]	; (800a8ac <HAL_TIM_Base_Start_IT+0xc8>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d013      	beq.n	800a85a <HAL_TIM_Base_Start_IT+0x76>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a1e      	ldr	r2, [pc, #120]	; (800a8b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d00e      	beq.n	800a85a <HAL_TIM_Base_Start_IT+0x76>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a1c      	ldr	r2, [pc, #112]	; (800a8b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d009      	beq.n	800a85a <HAL_TIM_Base_Start_IT+0x76>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a1b      	ldr	r2, [pc, #108]	; (800a8b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d004      	beq.n	800a85a <HAL_TIM_Base_Start_IT+0x76>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a19      	ldr	r2, [pc, #100]	; (800a8bc <HAL_TIM_Base_Start_IT+0xd8>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d115      	bne.n	800a886 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	689a      	ldr	r2, [r3, #8]
 800a860:	4b17      	ldr	r3, [pc, #92]	; (800a8c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a862:	4013      	ands	r3, r2
 800a864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2b06      	cmp	r3, #6
 800a86a:	d015      	beq.n	800a898 <HAL_TIM_Base_Start_IT+0xb4>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a872:	d011      	beq.n	800a898 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f042 0201 	orr.w	r2, r2, #1
 800a882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a884:	e008      	b.n	800a898 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f042 0201 	orr.w	r2, r2, #1
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	e000      	b.n	800a89a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a898:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	40010000 	.word	0x40010000
 800a8ac:	40000400 	.word	0x40000400
 800a8b0:	40000800 	.word	0x40000800
 800a8b4:	40000c00 	.word	0x40000c00
 800a8b8:	40010400 	.word	0x40010400
 800a8bc:	40001800 	.word	0x40001800
 800a8c0:	00010007 	.word	0x00010007

0800a8c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	691b      	ldr	r3, [r3, #16]
 800a8d2:	f003 0302 	and.w	r3, r3, #2
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d122      	bne.n	800a920 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d11b      	bne.n	800a920 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f06f 0202 	mvn.w	r2, #2
 800a8f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	f003 0303 	and.w	r3, r3, #3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 f905 	bl	800ab16 <HAL_TIM_IC_CaptureCallback>
 800a90c:	e005      	b.n	800a91a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f8f7 	bl	800ab02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 f908 	bl	800ab2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	f003 0304 	and.w	r3, r3, #4
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d122      	bne.n	800a974 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	f003 0304 	and.w	r3, r3, #4
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d11b      	bne.n	800a974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f06f 0204 	mvn.w	r2, #4
 800a944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2202      	movs	r2, #2
 800a94a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a956:	2b00      	cmp	r3, #0
 800a958:	d003      	beq.n	800a962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f8db 	bl	800ab16 <HAL_TIM_IC_CaptureCallback>
 800a960:	e005      	b.n	800a96e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f8cd 	bl	800ab02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 f8de 	bl	800ab2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	f003 0308 	and.w	r3, r3, #8
 800a97e:	2b08      	cmp	r3, #8
 800a980:	d122      	bne.n	800a9c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	f003 0308 	and.w	r3, r3, #8
 800a98c:	2b08      	cmp	r3, #8
 800a98e:	d11b      	bne.n	800a9c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f06f 0208 	mvn.w	r2, #8
 800a998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2204      	movs	r2, #4
 800a99e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	f003 0303 	and.w	r3, r3, #3
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f8b1 	bl	800ab16 <HAL_TIM_IC_CaptureCallback>
 800a9b4:	e005      	b.n	800a9c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f8a3 	bl	800ab02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f8b4 	bl	800ab2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	f003 0310 	and.w	r3, r3, #16
 800a9d2:	2b10      	cmp	r3, #16
 800a9d4:	d122      	bne.n	800aa1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	f003 0310 	and.w	r3, r3, #16
 800a9e0:	2b10      	cmp	r3, #16
 800a9e2:	d11b      	bne.n	800aa1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f06f 0210 	mvn.w	r2, #16
 800a9ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2208      	movs	r2, #8
 800a9f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	69db      	ldr	r3, [r3, #28]
 800a9fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d003      	beq.n	800aa0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f887 	bl	800ab16 <HAL_TIM_IC_CaptureCallback>
 800aa08:	e005      	b.n	800aa16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f879 	bl	800ab02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f88a 	bl	800ab2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d10e      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d107      	bne.n	800aa48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f06f 0201 	mvn.w	r2, #1
 800aa40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7f6 ff44 	bl	80018d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa52:	2b80      	cmp	r3, #128	; 0x80
 800aa54:	d10e      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa60:	2b80      	cmp	r3, #128	; 0x80
 800aa62:	d107      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f99c 	bl	800adac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa82:	d10e      	bne.n	800aaa2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa8e:	2b80      	cmp	r3, #128	; 0x80
 800aa90:	d107      	bne.n	800aaa2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aa9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f98f 	bl	800adc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaac:	2b40      	cmp	r3, #64	; 0x40
 800aaae:	d10e      	bne.n	800aace <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaba:	2b40      	cmp	r3, #64	; 0x40
 800aabc:	d107      	bne.n	800aace <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f838 	bl	800ab3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	f003 0320 	and.w	r3, r3, #32
 800aad8:	2b20      	cmp	r3, #32
 800aada:	d10e      	bne.n	800aafa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	f003 0320 	and.w	r3, r3, #32
 800aae6:	2b20      	cmp	r3, #32
 800aae8:	d107      	bne.n	800aafa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f06f 0220 	mvn.w	r2, #32
 800aaf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 f94f 	bl	800ad98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab02:	b480      	push	{r7}
 800ab04:	b083      	sub	sp, #12
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab0a:	bf00      	nop
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b083      	sub	sp, #12
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b083      	sub	sp, #12
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab32:	bf00      	nop
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b083      	sub	sp, #12
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab46:	bf00      	nop
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr
	...

0800ab54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a40      	ldr	r2, [pc, #256]	; (800ac68 <TIM_Base_SetConfig+0x114>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d013      	beq.n	800ab94 <TIM_Base_SetConfig+0x40>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab72:	d00f      	beq.n	800ab94 <TIM_Base_SetConfig+0x40>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a3d      	ldr	r2, [pc, #244]	; (800ac6c <TIM_Base_SetConfig+0x118>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d00b      	beq.n	800ab94 <TIM_Base_SetConfig+0x40>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a3c      	ldr	r2, [pc, #240]	; (800ac70 <TIM_Base_SetConfig+0x11c>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d007      	beq.n	800ab94 <TIM_Base_SetConfig+0x40>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a3b      	ldr	r2, [pc, #236]	; (800ac74 <TIM_Base_SetConfig+0x120>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d003      	beq.n	800ab94 <TIM_Base_SetConfig+0x40>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a3a      	ldr	r2, [pc, #232]	; (800ac78 <TIM_Base_SetConfig+0x124>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d108      	bne.n	800aba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a2f      	ldr	r2, [pc, #188]	; (800ac68 <TIM_Base_SetConfig+0x114>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d01f      	beq.n	800abee <TIM_Base_SetConfig+0x9a>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abb4:	d01b      	beq.n	800abee <TIM_Base_SetConfig+0x9a>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a2c      	ldr	r2, [pc, #176]	; (800ac6c <TIM_Base_SetConfig+0x118>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d017      	beq.n	800abee <TIM_Base_SetConfig+0x9a>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a2b      	ldr	r2, [pc, #172]	; (800ac70 <TIM_Base_SetConfig+0x11c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d013      	beq.n	800abee <TIM_Base_SetConfig+0x9a>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a2a      	ldr	r2, [pc, #168]	; (800ac74 <TIM_Base_SetConfig+0x120>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d00f      	beq.n	800abee <TIM_Base_SetConfig+0x9a>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a29      	ldr	r2, [pc, #164]	; (800ac78 <TIM_Base_SetConfig+0x124>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d00b      	beq.n	800abee <TIM_Base_SetConfig+0x9a>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a28      	ldr	r2, [pc, #160]	; (800ac7c <TIM_Base_SetConfig+0x128>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d007      	beq.n	800abee <TIM_Base_SetConfig+0x9a>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a27      	ldr	r2, [pc, #156]	; (800ac80 <TIM_Base_SetConfig+0x12c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d003      	beq.n	800abee <TIM_Base_SetConfig+0x9a>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a26      	ldr	r2, [pc, #152]	; (800ac84 <TIM_Base_SetConfig+0x130>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d108      	bne.n	800ac00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681a      	ldr	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a10      	ldr	r2, [pc, #64]	; (800ac68 <TIM_Base_SetConfig+0x114>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d00f      	beq.n	800ac4c <TIM_Base_SetConfig+0xf8>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a12      	ldr	r2, [pc, #72]	; (800ac78 <TIM_Base_SetConfig+0x124>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d00b      	beq.n	800ac4c <TIM_Base_SetConfig+0xf8>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a11      	ldr	r2, [pc, #68]	; (800ac7c <TIM_Base_SetConfig+0x128>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d007      	beq.n	800ac4c <TIM_Base_SetConfig+0xf8>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a10      	ldr	r2, [pc, #64]	; (800ac80 <TIM_Base_SetConfig+0x12c>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d003      	beq.n	800ac4c <TIM_Base_SetConfig+0xf8>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a0f      	ldr	r2, [pc, #60]	; (800ac84 <TIM_Base_SetConfig+0x130>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d103      	bne.n	800ac54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	691a      	ldr	r2, [r3, #16]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	615a      	str	r2, [r3, #20]
}
 800ac5a:	bf00      	nop
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	40010000 	.word	0x40010000
 800ac6c:	40000400 	.word	0x40000400
 800ac70:	40000800 	.word	0x40000800
 800ac74:	40000c00 	.word	0x40000c00
 800ac78:	40010400 	.word	0x40010400
 800ac7c:	40014000 	.word	0x40014000
 800ac80:	40014400 	.word	0x40014400
 800ac84:	40014800 	.word	0x40014800

0800ac88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d101      	bne.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	e068      	b.n	800ad72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a2e      	ldr	r2, [pc, #184]	; (800ad80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d004      	beq.n	800acd4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a2d      	ldr	r2, [pc, #180]	; (800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d108      	bne.n	800ace6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800acda:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a1e      	ldr	r2, [pc, #120]	; (800ad80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d01d      	beq.n	800ad46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad12:	d018      	beq.n	800ad46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a1b      	ldr	r2, [pc, #108]	; (800ad88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d013      	beq.n	800ad46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a1a      	ldr	r2, [pc, #104]	; (800ad8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d00e      	beq.n	800ad46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a18      	ldr	r2, [pc, #96]	; (800ad90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d009      	beq.n	800ad46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a13      	ldr	r2, [pc, #76]	; (800ad84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d004      	beq.n	800ad46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a14      	ldr	r2, [pc, #80]	; (800ad94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d10c      	bne.n	800ad60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	4313      	orrs	r3, r2
 800ad56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68ba      	ldr	r2, [r7, #8]
 800ad5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	40010000 	.word	0x40010000
 800ad84:	40010400 	.word	0x40010400
 800ad88:	40000400 	.word	0x40000400
 800ad8c:	40000800 	.word	0x40000800
 800ad90:	40000c00 	.word	0x40000c00
 800ad94:	40001800 	.word	0x40001800

0800ad98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adb4:	bf00      	nop
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	e042      	b.n	800ae6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adec:	2b00      	cmp	r3, #0
 800adee:	d106      	bne.n	800adfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f7f6 fc6f 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2224      	movs	r2, #36	; 0x24
 800ae02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f022 0201 	bic.w	r2, r2, #1
 800ae14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fb90 	bl	800b53c <UART_SetConfig>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d101      	bne.n	800ae26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	e022      	b.n	800ae6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f001 f8e4 	bl	800bffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	689a      	ldr	r2, [r3, #8]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f042 0201 	orr.w	r2, r2, #1
 800ae62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f001 f96b 	bl	800c140 <UART_CheckIdleState>
 800ae6a:	4603      	mov	r3, r0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae88:	2b20      	cmp	r3, #32
 800ae8a:	d168      	bne.n	800af5e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <HAL_UART_Transmit_DMA+0x24>
 800ae92:	88fb      	ldrh	r3, [r7, #6]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e061      	b.n	800af60 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d101      	bne.n	800aeaa <HAL_UART_Transmit_DMA+0x36>
 800aea6:	2302      	movs	r3, #2
 800aea8:	e05a      	b.n	800af60 <HAL_UART_Transmit_DMA+0xec>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	68ba      	ldr	r2, [r7, #8]
 800aeb6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	88fa      	ldrh	r2, [r7, #6]
 800aebc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	88fa      	ldrh	r2, [r7, #6]
 800aec4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2221      	movs	r2, #33	; 0x21
 800aed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d02c      	beq.n	800af3a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aee4:	4a20      	ldr	r2, [pc, #128]	; (800af68 <HAL_UART_Transmit_DMA+0xf4>)
 800aee6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeec:	4a1f      	ldr	r2, [pc, #124]	; (800af6c <HAL_UART_Transmit_DMA+0xf8>)
 800aeee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aef4:	4a1e      	ldr	r2, [pc, #120]	; (800af70 <HAL_UART_Transmit_DMA+0xfc>)
 800aef6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aefc:	2200      	movs	r2, #0
 800aefe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af08:	4619      	mov	r1, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3328      	adds	r3, #40	; 0x28
 800af10:	461a      	mov	r2, r3
 800af12:	88fb      	ldrh	r3, [r7, #6]
 800af14:	f7f7 ffe2 	bl	8002edc <HAL_DMA_Start_IT>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00d      	beq.n	800af3a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2210      	movs	r2, #16
 800af22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2220      	movs	r2, #32
 800af32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e012      	b.n	800af60 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2240      	movs	r2, #64	; 0x40
 800af40:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	689a      	ldr	r2, [r3, #8]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af58:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800af5a:	2300      	movs	r3, #0
 800af5c:	e000      	b.n	800af60 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800af5e:	2302      	movs	r3, #2
  }
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	0800c379 	.word	0x0800c379
 800af6c:	0800c3c9 	.word	0x0800c3c9
 800af70:	0800c3e5 	.word	0x0800c3e5

0800af74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	69db      	ldr	r3, [r3, #28]
 800af82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	689b      	ldr	r3, [r3, #8]
 800af92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af94:	69fa      	ldr	r2, [r7, #28]
 800af96:	f640 030f 	movw	r3, #2063	; 0x80f
 800af9a:	4013      	ands	r3, r2
 800af9c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d118      	bne.n	800afd6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	f003 0320 	and.w	r3, r3, #32
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d013      	beq.n	800afd6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	f003 0320 	and.w	r3, r3, #32
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d104      	bne.n	800afc2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d009      	beq.n	800afd6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 8282 	beq.w	800b4d0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	4798      	blx	r3
      }
      return;
 800afd4:	e27c      	b.n	800b4d0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f000 80ef 	beq.w	800b1bc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	4b73      	ldr	r3, [pc, #460]	; (800b1b0 <HAL_UART_IRQHandler+0x23c>)
 800afe2:	4013      	ands	r3, r2
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d105      	bne.n	800aff4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	4b72      	ldr	r3, [pc, #456]	; (800b1b4 <HAL_UART_IRQHandler+0x240>)
 800afec:	4013      	ands	r3, r2
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f000 80e4 	beq.w	800b1bc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d010      	beq.n	800b020 <HAL_UART_IRQHandler+0xac>
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00b      	beq.n	800b020 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2201      	movs	r2, #1
 800b00e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b016:	f043 0201 	orr.w	r2, r3, #1
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	2b00      	cmp	r3, #0
 800b028:	d010      	beq.n	800b04c <HAL_UART_IRQHandler+0xd8>
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00b      	beq.n	800b04c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2202      	movs	r2, #2
 800b03a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b042:	f043 0204 	orr.w	r2, r3, #4
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	f003 0304 	and.w	r3, r3, #4
 800b052:	2b00      	cmp	r3, #0
 800b054:	d010      	beq.n	800b078 <HAL_UART_IRQHandler+0x104>
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d00b      	beq.n	800b078 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2204      	movs	r2, #4
 800b066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b06e:	f043 0202 	orr.w	r2, r3, #2
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	f003 0308 	and.w	r3, r3, #8
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d015      	beq.n	800b0ae <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	f003 0320 	and.w	r3, r3, #32
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d104      	bne.n	800b096 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	4b48      	ldr	r3, [pc, #288]	; (800b1b0 <HAL_UART_IRQHandler+0x23c>)
 800b090:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00b      	beq.n	800b0ae <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2208      	movs	r2, #8
 800b09c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0a4:	f043 0208 	orr.w	r2, r3, #8
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d011      	beq.n	800b0dc <HAL_UART_IRQHandler+0x168>
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00c      	beq.n	800b0dc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b0ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0d2:	f043 0220 	orr.w	r2, r3, #32
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 81f6 	beq.w	800b4d4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	f003 0320 	and.w	r3, r3, #32
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d011      	beq.n	800b116 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	f003 0320 	and.w	r3, r3, #32
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d104      	bne.n	800b106 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d007      	beq.n	800b116 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b11c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b128:	2b40      	cmp	r3, #64	; 0x40
 800b12a:	d004      	beq.n	800b136 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b132:	2b00      	cmp	r3, #0
 800b134:	d031      	beq.n	800b19a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f001 f8ec 	bl	800c314 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	689b      	ldr	r3, [r3, #8]
 800b142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b146:	2b40      	cmp	r3, #64	; 0x40
 800b148:	d123      	bne.n	800b192 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	689a      	ldr	r2, [r3, #8]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b158:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d013      	beq.n	800b18a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b166:	4a14      	ldr	r2, [pc, #80]	; (800b1b8 <HAL_UART_IRQHandler+0x244>)
 800b168:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b16e:	4618      	mov	r0, r3
 800b170:	f7f8 fc3c 	bl	80039ec <HAL_DMA_Abort_IT>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d017      	beq.n	800b1aa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b17e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b184:	4610      	mov	r0, r2
 800b186:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b188:	e00f      	b.n	800b1aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f9c0 	bl	800b510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b190:	e00b      	b.n	800b1aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f9bc 	bl	800b510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b198:	e007      	b.n	800b1aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f9b8 	bl	800b510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b1a8:	e194      	b.n	800b4d4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1aa:	bf00      	nop
    return;
 800b1ac:	e192      	b.n	800b4d4 <HAL_UART_IRQHandler+0x560>
 800b1ae:	bf00      	nop
 800b1b0:	10000001 	.word	0x10000001
 800b1b4:	04000120 	.word	0x04000120
 800b1b8:	0800c465 	.word	0x0800c465

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	f040 810f 	bne.w	800b3e4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	f003 0310 	and.w	r3, r3, #16
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 8109 	beq.w	800b3e4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	f003 0310 	and.w	r3, r3, #16
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f000 8103 	beq.w	800b3e4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2210      	movs	r2, #16
 800b1e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f0:	2b40      	cmp	r3, #64	; 0x40
 800b1f2:	f040 80bb 	bne.w	800b36c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a96      	ldr	r2, [pc, #600]	; (800b458 <HAL_UART_IRQHandler+0x4e4>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d059      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a94      	ldr	r2, [pc, #592]	; (800b45c <HAL_UART_IRQHandler+0x4e8>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d053      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a92      	ldr	r2, [pc, #584]	; (800b460 <HAL_UART_IRQHandler+0x4ec>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d04d      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a90      	ldr	r2, [pc, #576]	; (800b464 <HAL_UART_IRQHandler+0x4f0>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d047      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a8e      	ldr	r2, [pc, #568]	; (800b468 <HAL_UART_IRQHandler+0x4f4>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d041      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a8c      	ldr	r2, [pc, #560]	; (800b46c <HAL_UART_IRQHandler+0x4f8>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d03b      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a8a      	ldr	r2, [pc, #552]	; (800b470 <HAL_UART_IRQHandler+0x4fc>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d035      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a88      	ldr	r2, [pc, #544]	; (800b474 <HAL_UART_IRQHandler+0x500>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d02f      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a86      	ldr	r2, [pc, #536]	; (800b478 <HAL_UART_IRQHandler+0x504>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d029      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a84      	ldr	r2, [pc, #528]	; (800b47c <HAL_UART_IRQHandler+0x508>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d023      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a82      	ldr	r2, [pc, #520]	; (800b480 <HAL_UART_IRQHandler+0x50c>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d01d      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a80      	ldr	r2, [pc, #512]	; (800b484 <HAL_UART_IRQHandler+0x510>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d017      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a7e      	ldr	r2, [pc, #504]	; (800b488 <HAL_UART_IRQHandler+0x514>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d011      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a7c      	ldr	r2, [pc, #496]	; (800b48c <HAL_UART_IRQHandler+0x518>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d00b      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a7a      	ldr	r2, [pc, #488]	; (800b490 <HAL_UART_IRQHandler+0x51c>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d005      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x342>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a78      	ldr	r2, [pc, #480]	; (800b494 <HAL_UART_IRQHandler+0x520>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d105      	bne.n	800b2c2 <HAL_UART_IRQHandler+0x34e>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	e004      	b.n	800b2cc <HAL_UART_IRQHandler+0x358>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b2ce:	893b      	ldrh	r3, [r7, #8]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 8101 	beq.w	800b4d8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2dc:	893a      	ldrh	r2, [r7, #8]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	f080 80fa 	bcs.w	800b4d8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	893a      	ldrh	r2, [r7, #8]
 800b2e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2f0:	69db      	ldr	r3, [r3, #28]
 800b2f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2f6:	d02b      	beq.n	800b350 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b306:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	689a      	ldr	r2, [r3, #8]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f022 0201 	bic.w	r2, r2, #1
 800b316:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b326:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2220      	movs	r2, #32
 800b32c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f022 0210 	bic.w	r2, r2, #16
 800b344:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7f8 f830 	bl	80033b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	b29b      	uxth	r3, r3
 800b362:	4619      	mov	r1, r3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f8dd 	bl	800b524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b36a:	e0b5      	b.n	800b4d8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b378:	b29b      	uxth	r3, r3
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b384:	b29b      	uxth	r3, r3
 800b386:	2b00      	cmp	r3, #0
 800b388:	f000 80a8 	beq.w	800b4dc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800b38c:	897b      	ldrh	r3, [r7, #10]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f000 80a4 	beq.w	800b4dc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b3a2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6899      	ldr	r1, [r3, #8]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	4b3a      	ldr	r3, [pc, #232]	; (800b498 <HAL_UART_IRQHandler+0x524>)
 800b3b0:	400b      	ands	r3, r1
 800b3b2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2220      	movs	r2, #32
 800b3b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f022 0210 	bic.w	r2, r2, #16
 800b3d6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b3d8:	897b      	ldrh	r3, [r7, #10]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f8a1 	bl	800b524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3e2:	e07b      	b.n	800b4dc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00d      	beq.n	800b40a <HAL_UART_IRQHandler+0x496>
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d008      	beq.n	800b40a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b400:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f001 f85e 	bl	800c4c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b408:	e06b      	b.n	800b4e2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b410:	2b00      	cmp	r3, #0
 800b412:	d012      	beq.n	800b43a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d104      	bne.n	800b428 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b424:	2b00      	cmp	r3, #0
 800b426:	d008      	beq.n	800b43a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d057      	beq.n	800b4e0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	4798      	blx	r3
    }
    return;
 800b438:	e052      	b.n	800b4e0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b440:	2b00      	cmp	r3, #0
 800b442:	d02b      	beq.n	800b49c <HAL_UART_IRQHandler+0x528>
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d026      	beq.n	800b49c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f001 f81e 	bl	800c490 <UART_EndTransmit_IT>
    return;
 800b454:	e045      	b.n	800b4e2 <HAL_UART_IRQHandler+0x56e>
 800b456:	bf00      	nop
 800b458:	40020010 	.word	0x40020010
 800b45c:	40020028 	.word	0x40020028
 800b460:	40020040 	.word	0x40020040
 800b464:	40020058 	.word	0x40020058
 800b468:	40020070 	.word	0x40020070
 800b46c:	40020088 	.word	0x40020088
 800b470:	400200a0 	.word	0x400200a0
 800b474:	400200b8 	.word	0x400200b8
 800b478:	40020410 	.word	0x40020410
 800b47c:	40020428 	.word	0x40020428
 800b480:	40020440 	.word	0x40020440
 800b484:	40020458 	.word	0x40020458
 800b488:	40020470 	.word	0x40020470
 800b48c:	40020488 	.word	0x40020488
 800b490:	400204a0 	.word	0x400204a0
 800b494:	400204b8 	.word	0x400204b8
 800b498:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d008      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x544>
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f001 f81b 	bl	800c4ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4b6:	e014      	b.n	800b4e2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00f      	beq.n	800b4e2 <HAL_UART_IRQHandler+0x56e>
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	da0c      	bge.n	800b4e2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f001 f805 	bl	800c4d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4ce:	e008      	b.n	800b4e2 <HAL_UART_IRQHandler+0x56e>
      return;
 800b4d0:	bf00      	nop
 800b4d2:	e006      	b.n	800b4e2 <HAL_UART_IRQHandler+0x56e>
    return;
 800b4d4:	bf00      	nop
 800b4d6:	e004      	b.n	800b4e2 <HAL_UART_IRQHandler+0x56e>
      return;
 800b4d8:	bf00      	nop
 800b4da:	e002      	b.n	800b4e2 <HAL_UART_IRQHandler+0x56e>
      return;
 800b4dc:	bf00      	nop
 800b4de:	e000      	b.n	800b4e2 <HAL_UART_IRQHandler+0x56e>
    return;
 800b4e0:	bf00      	nop
  }
}
 800b4e2:	3720      	adds	r7, #32
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b4f0:	bf00      	nop
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr

0800b4fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	460b      	mov	r3, r1
 800b52e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b53c:	b5b0      	push	{r4, r5, r7, lr}
 800b53e:	b08e      	sub	sp, #56	; 0x38
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b544:	2300      	movs	r3, #0
 800b546:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	689a      	ldr	r2, [r3, #8]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	431a      	orrs	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	695b      	ldr	r3, [r3, #20]
 800b558:	431a      	orrs	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	69db      	ldr	r3, [r3, #28]
 800b55e:	4313      	orrs	r3, r2
 800b560:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	4bbf      	ldr	r3, [pc, #764]	; (800b868 <UART_SetConfig+0x32c>)
 800b56a:	4013      	ands	r3, r2
 800b56c:	687a      	ldr	r2, [r7, #4]
 800b56e:	6812      	ldr	r2, [r2, #0]
 800b570:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b572:	430b      	orrs	r3, r1
 800b574:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	68da      	ldr	r2, [r3, #12]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	430a      	orrs	r2, r1
 800b58a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4ab5      	ldr	r2, [pc, #724]	; (800b86c <UART_SetConfig+0x330>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d004      	beq.n	800b5a6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a1b      	ldr	r3, [r3, #32]
 800b5a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	689a      	ldr	r2, [r3, #8]
 800b5ac:	4bb0      	ldr	r3, [pc, #704]	; (800b870 <UART_SetConfig+0x334>)
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	6812      	ldr	r2, [r2, #0]
 800b5b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b5b6:	430b      	orrs	r3, r1
 800b5b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c0:	f023 010f 	bic.w	r1, r3, #15
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4aa7      	ldr	r2, [pc, #668]	; (800b874 <UART_SetConfig+0x338>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d176      	bne.n	800b6c8 <UART_SetConfig+0x18c>
 800b5da:	4ba7      	ldr	r3, [pc, #668]	; (800b878 <UART_SetConfig+0x33c>)
 800b5dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5e2:	2b28      	cmp	r3, #40	; 0x28
 800b5e4:	d86c      	bhi.n	800b6c0 <UART_SetConfig+0x184>
 800b5e6:	a201      	add	r2, pc, #4	; (adr r2, 800b5ec <UART_SetConfig+0xb0>)
 800b5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ec:	0800b691 	.word	0x0800b691
 800b5f0:	0800b6c1 	.word	0x0800b6c1
 800b5f4:	0800b6c1 	.word	0x0800b6c1
 800b5f8:	0800b6c1 	.word	0x0800b6c1
 800b5fc:	0800b6c1 	.word	0x0800b6c1
 800b600:	0800b6c1 	.word	0x0800b6c1
 800b604:	0800b6c1 	.word	0x0800b6c1
 800b608:	0800b6c1 	.word	0x0800b6c1
 800b60c:	0800b699 	.word	0x0800b699
 800b610:	0800b6c1 	.word	0x0800b6c1
 800b614:	0800b6c1 	.word	0x0800b6c1
 800b618:	0800b6c1 	.word	0x0800b6c1
 800b61c:	0800b6c1 	.word	0x0800b6c1
 800b620:	0800b6c1 	.word	0x0800b6c1
 800b624:	0800b6c1 	.word	0x0800b6c1
 800b628:	0800b6c1 	.word	0x0800b6c1
 800b62c:	0800b6a1 	.word	0x0800b6a1
 800b630:	0800b6c1 	.word	0x0800b6c1
 800b634:	0800b6c1 	.word	0x0800b6c1
 800b638:	0800b6c1 	.word	0x0800b6c1
 800b63c:	0800b6c1 	.word	0x0800b6c1
 800b640:	0800b6c1 	.word	0x0800b6c1
 800b644:	0800b6c1 	.word	0x0800b6c1
 800b648:	0800b6c1 	.word	0x0800b6c1
 800b64c:	0800b6a9 	.word	0x0800b6a9
 800b650:	0800b6c1 	.word	0x0800b6c1
 800b654:	0800b6c1 	.word	0x0800b6c1
 800b658:	0800b6c1 	.word	0x0800b6c1
 800b65c:	0800b6c1 	.word	0x0800b6c1
 800b660:	0800b6c1 	.word	0x0800b6c1
 800b664:	0800b6c1 	.word	0x0800b6c1
 800b668:	0800b6c1 	.word	0x0800b6c1
 800b66c:	0800b6b1 	.word	0x0800b6b1
 800b670:	0800b6c1 	.word	0x0800b6c1
 800b674:	0800b6c1 	.word	0x0800b6c1
 800b678:	0800b6c1 	.word	0x0800b6c1
 800b67c:	0800b6c1 	.word	0x0800b6c1
 800b680:	0800b6c1 	.word	0x0800b6c1
 800b684:	0800b6c1 	.word	0x0800b6c1
 800b688:	0800b6c1 	.word	0x0800b6c1
 800b68c:	0800b6b9 	.word	0x0800b6b9
 800b690:	2301      	movs	r3, #1
 800b692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b696:	e222      	b.n	800bade <UART_SetConfig+0x5a2>
 800b698:	2304      	movs	r3, #4
 800b69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b69e:	e21e      	b.n	800bade <UART_SetConfig+0x5a2>
 800b6a0:	2308      	movs	r3, #8
 800b6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6a6:	e21a      	b.n	800bade <UART_SetConfig+0x5a2>
 800b6a8:	2310      	movs	r3, #16
 800b6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6ae:	e216      	b.n	800bade <UART_SetConfig+0x5a2>
 800b6b0:	2320      	movs	r3, #32
 800b6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6b6:	e212      	b.n	800bade <UART_SetConfig+0x5a2>
 800b6b8:	2340      	movs	r3, #64	; 0x40
 800b6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6be:	e20e      	b.n	800bade <UART_SetConfig+0x5a2>
 800b6c0:	2380      	movs	r3, #128	; 0x80
 800b6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b6c6:	e20a      	b.n	800bade <UART_SetConfig+0x5a2>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a6b      	ldr	r2, [pc, #428]	; (800b87c <UART_SetConfig+0x340>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d130      	bne.n	800b734 <UART_SetConfig+0x1f8>
 800b6d2:	4b69      	ldr	r3, [pc, #420]	; (800b878 <UART_SetConfig+0x33c>)
 800b6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d6:	f003 0307 	and.w	r3, r3, #7
 800b6da:	2b05      	cmp	r3, #5
 800b6dc:	d826      	bhi.n	800b72c <UART_SetConfig+0x1f0>
 800b6de:	a201      	add	r2, pc, #4	; (adr r2, 800b6e4 <UART_SetConfig+0x1a8>)
 800b6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e4:	0800b6fd 	.word	0x0800b6fd
 800b6e8:	0800b705 	.word	0x0800b705
 800b6ec:	0800b70d 	.word	0x0800b70d
 800b6f0:	0800b715 	.word	0x0800b715
 800b6f4:	0800b71d 	.word	0x0800b71d
 800b6f8:	0800b725 	.word	0x0800b725
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b702:	e1ec      	b.n	800bade <UART_SetConfig+0x5a2>
 800b704:	2304      	movs	r3, #4
 800b706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b70a:	e1e8      	b.n	800bade <UART_SetConfig+0x5a2>
 800b70c:	2308      	movs	r3, #8
 800b70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b712:	e1e4      	b.n	800bade <UART_SetConfig+0x5a2>
 800b714:	2310      	movs	r3, #16
 800b716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b71a:	e1e0      	b.n	800bade <UART_SetConfig+0x5a2>
 800b71c:	2320      	movs	r3, #32
 800b71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b722:	e1dc      	b.n	800bade <UART_SetConfig+0x5a2>
 800b724:	2340      	movs	r3, #64	; 0x40
 800b726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b72a:	e1d8      	b.n	800bade <UART_SetConfig+0x5a2>
 800b72c:	2380      	movs	r3, #128	; 0x80
 800b72e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b732:	e1d4      	b.n	800bade <UART_SetConfig+0x5a2>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a51      	ldr	r2, [pc, #324]	; (800b880 <UART_SetConfig+0x344>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d130      	bne.n	800b7a0 <UART_SetConfig+0x264>
 800b73e:	4b4e      	ldr	r3, [pc, #312]	; (800b878 <UART_SetConfig+0x33c>)
 800b740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b742:	f003 0307 	and.w	r3, r3, #7
 800b746:	2b05      	cmp	r3, #5
 800b748:	d826      	bhi.n	800b798 <UART_SetConfig+0x25c>
 800b74a:	a201      	add	r2, pc, #4	; (adr r2, 800b750 <UART_SetConfig+0x214>)
 800b74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b750:	0800b769 	.word	0x0800b769
 800b754:	0800b771 	.word	0x0800b771
 800b758:	0800b779 	.word	0x0800b779
 800b75c:	0800b781 	.word	0x0800b781
 800b760:	0800b789 	.word	0x0800b789
 800b764:	0800b791 	.word	0x0800b791
 800b768:	2300      	movs	r3, #0
 800b76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b76e:	e1b6      	b.n	800bade <UART_SetConfig+0x5a2>
 800b770:	2304      	movs	r3, #4
 800b772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b776:	e1b2      	b.n	800bade <UART_SetConfig+0x5a2>
 800b778:	2308      	movs	r3, #8
 800b77a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b77e:	e1ae      	b.n	800bade <UART_SetConfig+0x5a2>
 800b780:	2310      	movs	r3, #16
 800b782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b786:	e1aa      	b.n	800bade <UART_SetConfig+0x5a2>
 800b788:	2320      	movs	r3, #32
 800b78a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b78e:	e1a6      	b.n	800bade <UART_SetConfig+0x5a2>
 800b790:	2340      	movs	r3, #64	; 0x40
 800b792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b796:	e1a2      	b.n	800bade <UART_SetConfig+0x5a2>
 800b798:	2380      	movs	r3, #128	; 0x80
 800b79a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b79e:	e19e      	b.n	800bade <UART_SetConfig+0x5a2>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a37      	ldr	r2, [pc, #220]	; (800b884 <UART_SetConfig+0x348>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d130      	bne.n	800b80c <UART_SetConfig+0x2d0>
 800b7aa:	4b33      	ldr	r3, [pc, #204]	; (800b878 <UART_SetConfig+0x33c>)
 800b7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ae:	f003 0307 	and.w	r3, r3, #7
 800b7b2:	2b05      	cmp	r3, #5
 800b7b4:	d826      	bhi.n	800b804 <UART_SetConfig+0x2c8>
 800b7b6:	a201      	add	r2, pc, #4	; (adr r2, 800b7bc <UART_SetConfig+0x280>)
 800b7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7bc:	0800b7d5 	.word	0x0800b7d5
 800b7c0:	0800b7dd 	.word	0x0800b7dd
 800b7c4:	0800b7e5 	.word	0x0800b7e5
 800b7c8:	0800b7ed 	.word	0x0800b7ed
 800b7cc:	0800b7f5 	.word	0x0800b7f5
 800b7d0:	0800b7fd 	.word	0x0800b7fd
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7da:	e180      	b.n	800bade <UART_SetConfig+0x5a2>
 800b7dc:	2304      	movs	r3, #4
 800b7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7e2:	e17c      	b.n	800bade <UART_SetConfig+0x5a2>
 800b7e4:	2308      	movs	r3, #8
 800b7e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7ea:	e178      	b.n	800bade <UART_SetConfig+0x5a2>
 800b7ec:	2310      	movs	r3, #16
 800b7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7f2:	e174      	b.n	800bade <UART_SetConfig+0x5a2>
 800b7f4:	2320      	movs	r3, #32
 800b7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b7fa:	e170      	b.n	800bade <UART_SetConfig+0x5a2>
 800b7fc:	2340      	movs	r3, #64	; 0x40
 800b7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b802:	e16c      	b.n	800bade <UART_SetConfig+0x5a2>
 800b804:	2380      	movs	r3, #128	; 0x80
 800b806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b80a:	e168      	b.n	800bade <UART_SetConfig+0x5a2>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a1d      	ldr	r2, [pc, #116]	; (800b888 <UART_SetConfig+0x34c>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d142      	bne.n	800b89c <UART_SetConfig+0x360>
 800b816:	4b18      	ldr	r3, [pc, #96]	; (800b878 <UART_SetConfig+0x33c>)
 800b818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b81a:	f003 0307 	and.w	r3, r3, #7
 800b81e:	2b05      	cmp	r3, #5
 800b820:	d838      	bhi.n	800b894 <UART_SetConfig+0x358>
 800b822:	a201      	add	r2, pc, #4	; (adr r2, 800b828 <UART_SetConfig+0x2ec>)
 800b824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b828:	0800b841 	.word	0x0800b841
 800b82c:	0800b849 	.word	0x0800b849
 800b830:	0800b851 	.word	0x0800b851
 800b834:	0800b859 	.word	0x0800b859
 800b838:	0800b861 	.word	0x0800b861
 800b83c:	0800b88d 	.word	0x0800b88d
 800b840:	2300      	movs	r3, #0
 800b842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b846:	e14a      	b.n	800bade <UART_SetConfig+0x5a2>
 800b848:	2304      	movs	r3, #4
 800b84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b84e:	e146      	b.n	800bade <UART_SetConfig+0x5a2>
 800b850:	2308      	movs	r3, #8
 800b852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b856:	e142      	b.n	800bade <UART_SetConfig+0x5a2>
 800b858:	2310      	movs	r3, #16
 800b85a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b85e:	e13e      	b.n	800bade <UART_SetConfig+0x5a2>
 800b860:	2320      	movs	r3, #32
 800b862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b866:	e13a      	b.n	800bade <UART_SetConfig+0x5a2>
 800b868:	cfff69f3 	.word	0xcfff69f3
 800b86c:	58000c00 	.word	0x58000c00
 800b870:	11fff4ff 	.word	0x11fff4ff
 800b874:	40011000 	.word	0x40011000
 800b878:	58024400 	.word	0x58024400
 800b87c:	40004400 	.word	0x40004400
 800b880:	40004800 	.word	0x40004800
 800b884:	40004c00 	.word	0x40004c00
 800b888:	40005000 	.word	0x40005000
 800b88c:	2340      	movs	r3, #64	; 0x40
 800b88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b892:	e124      	b.n	800bade <UART_SetConfig+0x5a2>
 800b894:	2380      	movs	r3, #128	; 0x80
 800b896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b89a:	e120      	b.n	800bade <UART_SetConfig+0x5a2>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4acc      	ldr	r2, [pc, #816]	; (800bbd4 <UART_SetConfig+0x698>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d176      	bne.n	800b994 <UART_SetConfig+0x458>
 800b8a6:	4bcc      	ldr	r3, [pc, #816]	; (800bbd8 <UART_SetConfig+0x69c>)
 800b8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8ae:	2b28      	cmp	r3, #40	; 0x28
 800b8b0:	d86c      	bhi.n	800b98c <UART_SetConfig+0x450>
 800b8b2:	a201      	add	r2, pc, #4	; (adr r2, 800b8b8 <UART_SetConfig+0x37c>)
 800b8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b8:	0800b95d 	.word	0x0800b95d
 800b8bc:	0800b98d 	.word	0x0800b98d
 800b8c0:	0800b98d 	.word	0x0800b98d
 800b8c4:	0800b98d 	.word	0x0800b98d
 800b8c8:	0800b98d 	.word	0x0800b98d
 800b8cc:	0800b98d 	.word	0x0800b98d
 800b8d0:	0800b98d 	.word	0x0800b98d
 800b8d4:	0800b98d 	.word	0x0800b98d
 800b8d8:	0800b965 	.word	0x0800b965
 800b8dc:	0800b98d 	.word	0x0800b98d
 800b8e0:	0800b98d 	.word	0x0800b98d
 800b8e4:	0800b98d 	.word	0x0800b98d
 800b8e8:	0800b98d 	.word	0x0800b98d
 800b8ec:	0800b98d 	.word	0x0800b98d
 800b8f0:	0800b98d 	.word	0x0800b98d
 800b8f4:	0800b98d 	.word	0x0800b98d
 800b8f8:	0800b96d 	.word	0x0800b96d
 800b8fc:	0800b98d 	.word	0x0800b98d
 800b900:	0800b98d 	.word	0x0800b98d
 800b904:	0800b98d 	.word	0x0800b98d
 800b908:	0800b98d 	.word	0x0800b98d
 800b90c:	0800b98d 	.word	0x0800b98d
 800b910:	0800b98d 	.word	0x0800b98d
 800b914:	0800b98d 	.word	0x0800b98d
 800b918:	0800b975 	.word	0x0800b975
 800b91c:	0800b98d 	.word	0x0800b98d
 800b920:	0800b98d 	.word	0x0800b98d
 800b924:	0800b98d 	.word	0x0800b98d
 800b928:	0800b98d 	.word	0x0800b98d
 800b92c:	0800b98d 	.word	0x0800b98d
 800b930:	0800b98d 	.word	0x0800b98d
 800b934:	0800b98d 	.word	0x0800b98d
 800b938:	0800b97d 	.word	0x0800b97d
 800b93c:	0800b98d 	.word	0x0800b98d
 800b940:	0800b98d 	.word	0x0800b98d
 800b944:	0800b98d 	.word	0x0800b98d
 800b948:	0800b98d 	.word	0x0800b98d
 800b94c:	0800b98d 	.word	0x0800b98d
 800b950:	0800b98d 	.word	0x0800b98d
 800b954:	0800b98d 	.word	0x0800b98d
 800b958:	0800b985 	.word	0x0800b985
 800b95c:	2301      	movs	r3, #1
 800b95e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b962:	e0bc      	b.n	800bade <UART_SetConfig+0x5a2>
 800b964:	2304      	movs	r3, #4
 800b966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b96a:	e0b8      	b.n	800bade <UART_SetConfig+0x5a2>
 800b96c:	2308      	movs	r3, #8
 800b96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b972:	e0b4      	b.n	800bade <UART_SetConfig+0x5a2>
 800b974:	2310      	movs	r3, #16
 800b976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b97a:	e0b0      	b.n	800bade <UART_SetConfig+0x5a2>
 800b97c:	2320      	movs	r3, #32
 800b97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b982:	e0ac      	b.n	800bade <UART_SetConfig+0x5a2>
 800b984:	2340      	movs	r3, #64	; 0x40
 800b986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b98a:	e0a8      	b.n	800bade <UART_SetConfig+0x5a2>
 800b98c:	2380      	movs	r3, #128	; 0x80
 800b98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b992:	e0a4      	b.n	800bade <UART_SetConfig+0x5a2>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a90      	ldr	r2, [pc, #576]	; (800bbdc <UART_SetConfig+0x6a0>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d130      	bne.n	800ba00 <UART_SetConfig+0x4c4>
 800b99e:	4b8e      	ldr	r3, [pc, #568]	; (800bbd8 <UART_SetConfig+0x69c>)
 800b9a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a2:	f003 0307 	and.w	r3, r3, #7
 800b9a6:	2b05      	cmp	r3, #5
 800b9a8:	d826      	bhi.n	800b9f8 <UART_SetConfig+0x4bc>
 800b9aa:	a201      	add	r2, pc, #4	; (adr r2, 800b9b0 <UART_SetConfig+0x474>)
 800b9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b0:	0800b9c9 	.word	0x0800b9c9
 800b9b4:	0800b9d1 	.word	0x0800b9d1
 800b9b8:	0800b9d9 	.word	0x0800b9d9
 800b9bc:	0800b9e1 	.word	0x0800b9e1
 800b9c0:	0800b9e9 	.word	0x0800b9e9
 800b9c4:	0800b9f1 	.word	0x0800b9f1
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ce:	e086      	b.n	800bade <UART_SetConfig+0x5a2>
 800b9d0:	2304      	movs	r3, #4
 800b9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9d6:	e082      	b.n	800bade <UART_SetConfig+0x5a2>
 800b9d8:	2308      	movs	r3, #8
 800b9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9de:	e07e      	b.n	800bade <UART_SetConfig+0x5a2>
 800b9e0:	2310      	movs	r3, #16
 800b9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9e6:	e07a      	b.n	800bade <UART_SetConfig+0x5a2>
 800b9e8:	2320      	movs	r3, #32
 800b9ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ee:	e076      	b.n	800bade <UART_SetConfig+0x5a2>
 800b9f0:	2340      	movs	r3, #64	; 0x40
 800b9f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9f6:	e072      	b.n	800bade <UART_SetConfig+0x5a2>
 800b9f8:	2380      	movs	r3, #128	; 0x80
 800b9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9fe:	e06e      	b.n	800bade <UART_SetConfig+0x5a2>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a76      	ldr	r2, [pc, #472]	; (800bbe0 <UART_SetConfig+0x6a4>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d130      	bne.n	800ba6c <UART_SetConfig+0x530>
 800ba0a:	4b73      	ldr	r3, [pc, #460]	; (800bbd8 <UART_SetConfig+0x69c>)
 800ba0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba0e:	f003 0307 	and.w	r3, r3, #7
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	d826      	bhi.n	800ba64 <UART_SetConfig+0x528>
 800ba16:	a201      	add	r2, pc, #4	; (adr r2, 800ba1c <UART_SetConfig+0x4e0>)
 800ba18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1c:	0800ba35 	.word	0x0800ba35
 800ba20:	0800ba3d 	.word	0x0800ba3d
 800ba24:	0800ba45 	.word	0x0800ba45
 800ba28:	0800ba4d 	.word	0x0800ba4d
 800ba2c:	0800ba55 	.word	0x0800ba55
 800ba30:	0800ba5d 	.word	0x0800ba5d
 800ba34:	2300      	movs	r3, #0
 800ba36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba3a:	e050      	b.n	800bade <UART_SetConfig+0x5a2>
 800ba3c:	2304      	movs	r3, #4
 800ba3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba42:	e04c      	b.n	800bade <UART_SetConfig+0x5a2>
 800ba44:	2308      	movs	r3, #8
 800ba46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba4a:	e048      	b.n	800bade <UART_SetConfig+0x5a2>
 800ba4c:	2310      	movs	r3, #16
 800ba4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba52:	e044      	b.n	800bade <UART_SetConfig+0x5a2>
 800ba54:	2320      	movs	r3, #32
 800ba56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba5a:	e040      	b.n	800bade <UART_SetConfig+0x5a2>
 800ba5c:	2340      	movs	r3, #64	; 0x40
 800ba5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba62:	e03c      	b.n	800bade <UART_SetConfig+0x5a2>
 800ba64:	2380      	movs	r3, #128	; 0x80
 800ba66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba6a:	e038      	b.n	800bade <UART_SetConfig+0x5a2>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a5c      	ldr	r2, [pc, #368]	; (800bbe4 <UART_SetConfig+0x6a8>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d130      	bne.n	800bad8 <UART_SetConfig+0x59c>
 800ba76:	4b58      	ldr	r3, [pc, #352]	; (800bbd8 <UART_SetConfig+0x69c>)
 800ba78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba7a:	f003 0307 	and.w	r3, r3, #7
 800ba7e:	2b05      	cmp	r3, #5
 800ba80:	d826      	bhi.n	800bad0 <UART_SetConfig+0x594>
 800ba82:	a201      	add	r2, pc, #4	; (adr r2, 800ba88 <UART_SetConfig+0x54c>)
 800ba84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba88:	0800baa1 	.word	0x0800baa1
 800ba8c:	0800baa9 	.word	0x0800baa9
 800ba90:	0800bab1 	.word	0x0800bab1
 800ba94:	0800bab9 	.word	0x0800bab9
 800ba98:	0800bac1 	.word	0x0800bac1
 800ba9c:	0800bac9 	.word	0x0800bac9
 800baa0:	2302      	movs	r3, #2
 800baa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa6:	e01a      	b.n	800bade <UART_SetConfig+0x5a2>
 800baa8:	2304      	movs	r3, #4
 800baaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baae:	e016      	b.n	800bade <UART_SetConfig+0x5a2>
 800bab0:	2308      	movs	r3, #8
 800bab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab6:	e012      	b.n	800bade <UART_SetConfig+0x5a2>
 800bab8:	2310      	movs	r3, #16
 800baba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800babe:	e00e      	b.n	800bade <UART_SetConfig+0x5a2>
 800bac0:	2320      	movs	r3, #32
 800bac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bac6:	e00a      	b.n	800bade <UART_SetConfig+0x5a2>
 800bac8:	2340      	movs	r3, #64	; 0x40
 800baca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bace:	e006      	b.n	800bade <UART_SetConfig+0x5a2>
 800bad0:	2380      	movs	r3, #128	; 0x80
 800bad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bad6:	e002      	b.n	800bade <UART_SetConfig+0x5a2>
 800bad8:	2380      	movs	r3, #128	; 0x80
 800bada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a40      	ldr	r2, [pc, #256]	; (800bbe4 <UART_SetConfig+0x6a8>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	f040 80ef 	bne.w	800bcc8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800baea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800baee:	2b20      	cmp	r3, #32
 800baf0:	dc46      	bgt.n	800bb80 <UART_SetConfig+0x644>
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	f2c0 8081 	blt.w	800bbfa <UART_SetConfig+0x6be>
 800baf8:	3b02      	subs	r3, #2
 800bafa:	2b1e      	cmp	r3, #30
 800bafc:	d87d      	bhi.n	800bbfa <UART_SetConfig+0x6be>
 800bafe:	a201      	add	r2, pc, #4	; (adr r2, 800bb04 <UART_SetConfig+0x5c8>)
 800bb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb04:	0800bb87 	.word	0x0800bb87
 800bb08:	0800bbfb 	.word	0x0800bbfb
 800bb0c:	0800bb8f 	.word	0x0800bb8f
 800bb10:	0800bbfb 	.word	0x0800bbfb
 800bb14:	0800bbfb 	.word	0x0800bbfb
 800bb18:	0800bbfb 	.word	0x0800bbfb
 800bb1c:	0800bb9f 	.word	0x0800bb9f
 800bb20:	0800bbfb 	.word	0x0800bbfb
 800bb24:	0800bbfb 	.word	0x0800bbfb
 800bb28:	0800bbfb 	.word	0x0800bbfb
 800bb2c:	0800bbfb 	.word	0x0800bbfb
 800bb30:	0800bbfb 	.word	0x0800bbfb
 800bb34:	0800bbfb 	.word	0x0800bbfb
 800bb38:	0800bbfb 	.word	0x0800bbfb
 800bb3c:	0800bbaf 	.word	0x0800bbaf
 800bb40:	0800bbfb 	.word	0x0800bbfb
 800bb44:	0800bbfb 	.word	0x0800bbfb
 800bb48:	0800bbfb 	.word	0x0800bbfb
 800bb4c:	0800bbfb 	.word	0x0800bbfb
 800bb50:	0800bbfb 	.word	0x0800bbfb
 800bb54:	0800bbfb 	.word	0x0800bbfb
 800bb58:	0800bbfb 	.word	0x0800bbfb
 800bb5c:	0800bbfb 	.word	0x0800bbfb
 800bb60:	0800bbfb 	.word	0x0800bbfb
 800bb64:	0800bbfb 	.word	0x0800bbfb
 800bb68:	0800bbfb 	.word	0x0800bbfb
 800bb6c:	0800bbfb 	.word	0x0800bbfb
 800bb70:	0800bbfb 	.word	0x0800bbfb
 800bb74:	0800bbfb 	.word	0x0800bbfb
 800bb78:	0800bbfb 	.word	0x0800bbfb
 800bb7c:	0800bbed 	.word	0x0800bbed
 800bb80:	2b40      	cmp	r3, #64	; 0x40
 800bb82:	d036      	beq.n	800bbf2 <UART_SetConfig+0x6b6>
 800bb84:	e039      	b.n	800bbfa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bb86:	f7fe f9b3 	bl	8009ef0 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bb8c:	e03b      	b.n	800bc06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb8e:	f107 0314 	add.w	r3, r7, #20
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7fe f9c2 	bl	8009f1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb98:	69bb      	ldr	r3, [r7, #24]
 800bb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bb9c:	e033      	b.n	800bc06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb9e:	f107 0308 	add.w	r3, r7, #8
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fe fb0e 	bl	800a1c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bbac:	e02b      	b.n	800bc06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bbae:	4b0a      	ldr	r3, [pc, #40]	; (800bbd8 <UART_SetConfig+0x69c>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f003 0320 	and.w	r3, r3, #32
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d009      	beq.n	800bbce <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bbba:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <UART_SetConfig+0x69c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	08db      	lsrs	r3, r3, #3
 800bbc0:	f003 0303 	and.w	r3, r3, #3
 800bbc4:	4a08      	ldr	r2, [pc, #32]	; (800bbe8 <UART_SetConfig+0x6ac>)
 800bbc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bbca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bbcc:	e01b      	b.n	800bc06 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800bbce:	4b06      	ldr	r3, [pc, #24]	; (800bbe8 <UART_SetConfig+0x6ac>)
 800bbd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bbd2:	e018      	b.n	800bc06 <UART_SetConfig+0x6ca>
 800bbd4:	40011400 	.word	0x40011400
 800bbd8:	58024400 	.word	0x58024400
 800bbdc:	40007800 	.word	0x40007800
 800bbe0:	40007c00 	.word	0x40007c00
 800bbe4:	58000c00 	.word	0x58000c00
 800bbe8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bbec:	4bc4      	ldr	r3, [pc, #784]	; (800bf00 <UART_SetConfig+0x9c4>)
 800bbee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bbf0:	e009      	b.n	800bc06 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bbf8:	e005      	b.n	800bc06 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bc04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 81da 	beq.w	800bfc2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc12:	4abc      	ldr	r2, [pc, #752]	; (800bf04 <UART_SetConfig+0x9c8>)
 800bc14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc18:	461a      	mov	r2, r3
 800bc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc20:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	4613      	mov	r3, r2
 800bc28:	005b      	lsls	r3, r3, #1
 800bc2a:	4413      	add	r3, r2
 800bc2c:	6a3a      	ldr	r2, [r7, #32]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d305      	bcc.n	800bc3e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc38:	6a3a      	ldr	r2, [r7, #32]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d903      	bls.n	800bc46 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bc44:	e1bd      	b.n	800bfc2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f04f 0100 	mov.w	r1, #0
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc52:	4aac      	ldr	r2, [pc, #688]	; (800bf04 <UART_SetConfig+0x9c8>)
 800bc54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	f04f 0300 	mov.w	r3, #0
 800bc5e:	f7f4 fb97 	bl	8000390 <__aeabi_uldivmod>
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	4610      	mov	r0, r2
 800bc68:	4619      	mov	r1, r3
 800bc6a:	f04f 0200 	mov.w	r2, #0
 800bc6e:	f04f 0300 	mov.w	r3, #0
 800bc72:	020b      	lsls	r3, r1, #8
 800bc74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc78:	0202      	lsls	r2, r0, #8
 800bc7a:	6879      	ldr	r1, [r7, #4]
 800bc7c:	6849      	ldr	r1, [r1, #4]
 800bc7e:	0849      	lsrs	r1, r1, #1
 800bc80:	4608      	mov	r0, r1
 800bc82:	f04f 0100 	mov.w	r1, #0
 800bc86:	1814      	adds	r4, r2, r0
 800bc88:	eb43 0501 	adc.w	r5, r3, r1
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	461a      	mov	r2, r3
 800bc92:	f04f 0300 	mov.w	r3, #0
 800bc96:	4620      	mov	r0, r4
 800bc98:	4629      	mov	r1, r5
 800bc9a:	f7f4 fb79 	bl	8000390 <__aeabi_uldivmod>
 800bc9e:	4602      	mov	r2, r0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4613      	mov	r3, r2
 800bca4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcac:	d308      	bcc.n	800bcc0 <UART_SetConfig+0x784>
 800bcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcb4:	d204      	bcs.n	800bcc0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcbc:	60da      	str	r2, [r3, #12]
 800bcbe:	e180      	b.n	800bfc2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bcc6:	e17c      	b.n	800bfc2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	69db      	ldr	r3, [r3, #28]
 800bccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcd0:	f040 80bf 	bne.w	800be52 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800bcd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bcd8:	2b20      	cmp	r3, #32
 800bcda:	dc49      	bgt.n	800bd70 <UART_SetConfig+0x834>
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	db7c      	blt.n	800bdda <UART_SetConfig+0x89e>
 800bce0:	2b20      	cmp	r3, #32
 800bce2:	d87a      	bhi.n	800bdda <UART_SetConfig+0x89e>
 800bce4:	a201      	add	r2, pc, #4	; (adr r2, 800bcec <UART_SetConfig+0x7b0>)
 800bce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcea:	bf00      	nop
 800bcec:	0800bd77 	.word	0x0800bd77
 800bcf0:	0800bd7f 	.word	0x0800bd7f
 800bcf4:	0800bddb 	.word	0x0800bddb
 800bcf8:	0800bddb 	.word	0x0800bddb
 800bcfc:	0800bd87 	.word	0x0800bd87
 800bd00:	0800bddb 	.word	0x0800bddb
 800bd04:	0800bddb 	.word	0x0800bddb
 800bd08:	0800bddb 	.word	0x0800bddb
 800bd0c:	0800bd97 	.word	0x0800bd97
 800bd10:	0800bddb 	.word	0x0800bddb
 800bd14:	0800bddb 	.word	0x0800bddb
 800bd18:	0800bddb 	.word	0x0800bddb
 800bd1c:	0800bddb 	.word	0x0800bddb
 800bd20:	0800bddb 	.word	0x0800bddb
 800bd24:	0800bddb 	.word	0x0800bddb
 800bd28:	0800bddb 	.word	0x0800bddb
 800bd2c:	0800bda7 	.word	0x0800bda7
 800bd30:	0800bddb 	.word	0x0800bddb
 800bd34:	0800bddb 	.word	0x0800bddb
 800bd38:	0800bddb 	.word	0x0800bddb
 800bd3c:	0800bddb 	.word	0x0800bddb
 800bd40:	0800bddb 	.word	0x0800bddb
 800bd44:	0800bddb 	.word	0x0800bddb
 800bd48:	0800bddb 	.word	0x0800bddb
 800bd4c:	0800bddb 	.word	0x0800bddb
 800bd50:	0800bddb 	.word	0x0800bddb
 800bd54:	0800bddb 	.word	0x0800bddb
 800bd58:	0800bddb 	.word	0x0800bddb
 800bd5c:	0800bddb 	.word	0x0800bddb
 800bd60:	0800bddb 	.word	0x0800bddb
 800bd64:	0800bddb 	.word	0x0800bddb
 800bd68:	0800bddb 	.word	0x0800bddb
 800bd6c:	0800bdcd 	.word	0x0800bdcd
 800bd70:	2b40      	cmp	r3, #64	; 0x40
 800bd72:	d02e      	beq.n	800bdd2 <UART_SetConfig+0x896>
 800bd74:	e031      	b.n	800bdda <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd76:	f7fd f94f 	bl	8009018 <HAL_RCC_GetPCLK1Freq>
 800bd7a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bd7c:	e033      	b.n	800bde6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd7e:	f7fd f961 	bl	8009044 <HAL_RCC_GetPCLK2Freq>
 800bd82:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bd84:	e02f      	b.n	800bde6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd86:	f107 0314 	add.w	r3, r7, #20
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe f8c6 	bl	8009f1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bd94:	e027      	b.n	800bde6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd96:	f107 0308 	add.w	r3, r7, #8
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe fa12 	bl	800a1c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bda4:	e01f      	b.n	800bde6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bda6:	4b58      	ldr	r3, [pc, #352]	; (800bf08 <UART_SetConfig+0x9cc>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f003 0320 	and.w	r3, r3, #32
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d009      	beq.n	800bdc6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bdb2:	4b55      	ldr	r3, [pc, #340]	; (800bf08 <UART_SetConfig+0x9cc>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	08db      	lsrs	r3, r3, #3
 800bdb8:	f003 0303 	and.w	r3, r3, #3
 800bdbc:	4a53      	ldr	r2, [pc, #332]	; (800bf0c <UART_SetConfig+0x9d0>)
 800bdbe:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bdc4:	e00f      	b.n	800bde6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800bdc6:	4b51      	ldr	r3, [pc, #324]	; (800bf0c <UART_SetConfig+0x9d0>)
 800bdc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bdca:	e00c      	b.n	800bde6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bdcc:	4b4c      	ldr	r3, [pc, #304]	; (800bf00 <UART_SetConfig+0x9c4>)
 800bdce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bdd0:	e009      	b.n	800bde6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bdd8:	e005      	b.n	800bde6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800bdda:	2300      	movs	r3, #0
 800bddc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bde4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f000 80ea 	beq.w	800bfc2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf2:	4a44      	ldr	r2, [pc, #272]	; (800bf04 <UART_SetConfig+0x9c8>)
 800bdf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	fbb3 f3f2 	udiv	r3, r3, r2
 800be00:	005a      	lsls	r2, r3, #1
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	085b      	lsrs	r3, r3, #1
 800be08:	441a      	add	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be12:	b29b      	uxth	r3, r3
 800be14:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be18:	2b0f      	cmp	r3, #15
 800be1a:	d916      	bls.n	800be4a <UART_SetConfig+0x90e>
 800be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be22:	d212      	bcs.n	800be4a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	b29b      	uxth	r3, r3
 800be28:	f023 030f 	bic.w	r3, r3, #15
 800be2c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be30:	085b      	lsrs	r3, r3, #1
 800be32:	b29b      	uxth	r3, r3
 800be34:	f003 0307 	and.w	r3, r3, #7
 800be38:	b29a      	uxth	r2, r3
 800be3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be3c:	4313      	orrs	r3, r2
 800be3e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800be46:	60da      	str	r2, [r3, #12]
 800be48:	e0bb      	b.n	800bfc2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800be50:	e0b7      	b.n	800bfc2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800be52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be56:	2b20      	cmp	r3, #32
 800be58:	dc4a      	bgt.n	800bef0 <UART_SetConfig+0x9b4>
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f2c0 8086 	blt.w	800bf6c <UART_SetConfig+0xa30>
 800be60:	2b20      	cmp	r3, #32
 800be62:	f200 8083 	bhi.w	800bf6c <UART_SetConfig+0xa30>
 800be66:	a201      	add	r2, pc, #4	; (adr r2, 800be6c <UART_SetConfig+0x930>)
 800be68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6c:	0800bef7 	.word	0x0800bef7
 800be70:	0800bf11 	.word	0x0800bf11
 800be74:	0800bf6d 	.word	0x0800bf6d
 800be78:	0800bf6d 	.word	0x0800bf6d
 800be7c:	0800bf19 	.word	0x0800bf19
 800be80:	0800bf6d 	.word	0x0800bf6d
 800be84:	0800bf6d 	.word	0x0800bf6d
 800be88:	0800bf6d 	.word	0x0800bf6d
 800be8c:	0800bf29 	.word	0x0800bf29
 800be90:	0800bf6d 	.word	0x0800bf6d
 800be94:	0800bf6d 	.word	0x0800bf6d
 800be98:	0800bf6d 	.word	0x0800bf6d
 800be9c:	0800bf6d 	.word	0x0800bf6d
 800bea0:	0800bf6d 	.word	0x0800bf6d
 800bea4:	0800bf6d 	.word	0x0800bf6d
 800bea8:	0800bf6d 	.word	0x0800bf6d
 800beac:	0800bf39 	.word	0x0800bf39
 800beb0:	0800bf6d 	.word	0x0800bf6d
 800beb4:	0800bf6d 	.word	0x0800bf6d
 800beb8:	0800bf6d 	.word	0x0800bf6d
 800bebc:	0800bf6d 	.word	0x0800bf6d
 800bec0:	0800bf6d 	.word	0x0800bf6d
 800bec4:	0800bf6d 	.word	0x0800bf6d
 800bec8:	0800bf6d 	.word	0x0800bf6d
 800becc:	0800bf6d 	.word	0x0800bf6d
 800bed0:	0800bf6d 	.word	0x0800bf6d
 800bed4:	0800bf6d 	.word	0x0800bf6d
 800bed8:	0800bf6d 	.word	0x0800bf6d
 800bedc:	0800bf6d 	.word	0x0800bf6d
 800bee0:	0800bf6d 	.word	0x0800bf6d
 800bee4:	0800bf6d 	.word	0x0800bf6d
 800bee8:	0800bf6d 	.word	0x0800bf6d
 800beec:	0800bf5f 	.word	0x0800bf5f
 800bef0:	2b40      	cmp	r3, #64	; 0x40
 800bef2:	d037      	beq.n	800bf64 <UART_SetConfig+0xa28>
 800bef4:	e03a      	b.n	800bf6c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bef6:	f7fd f88f 	bl	8009018 <HAL_RCC_GetPCLK1Freq>
 800befa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800befc:	e03c      	b.n	800bf78 <UART_SetConfig+0xa3c>
 800befe:	bf00      	nop
 800bf00:	003d0900 	.word	0x003d0900
 800bf04:	0800f9dc 	.word	0x0800f9dc
 800bf08:	58024400 	.word	0x58024400
 800bf0c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf10:	f7fd f898 	bl	8009044 <HAL_RCC_GetPCLK2Freq>
 800bf14:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bf16:	e02f      	b.n	800bf78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf18:	f107 0314 	add.w	r3, r7, #20
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fd fffd 	bl	8009f1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf26:	e027      	b.n	800bf78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf28:	f107 0308 	add.w	r3, r7, #8
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7fe f949 	bl	800a1c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf36:	e01f      	b.n	800bf78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf38:	4b2c      	ldr	r3, [pc, #176]	; (800bfec <UART_SetConfig+0xab0>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f003 0320 	and.w	r3, r3, #32
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d009      	beq.n	800bf58 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf44:	4b29      	ldr	r3, [pc, #164]	; (800bfec <UART_SetConfig+0xab0>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	08db      	lsrs	r3, r3, #3
 800bf4a:	f003 0303 	and.w	r3, r3, #3
 800bf4e:	4a28      	ldr	r2, [pc, #160]	; (800bff0 <UART_SetConfig+0xab4>)
 800bf50:	fa22 f303 	lsr.w	r3, r2, r3
 800bf54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf56:	e00f      	b.n	800bf78 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800bf58:	4b25      	ldr	r3, [pc, #148]	; (800bff0 <UART_SetConfig+0xab4>)
 800bf5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf5c:	e00c      	b.n	800bf78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf5e:	4b25      	ldr	r3, [pc, #148]	; (800bff4 <UART_SetConfig+0xab8>)
 800bf60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf62:	e009      	b.n	800bf78 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf6a:	e005      	b.n	800bf78 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bf76:	bf00      	nop
    }

    if (pclk != 0U)
 800bf78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d021      	beq.n	800bfc2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf82:	4a1d      	ldr	r2, [pc, #116]	; (800bff8 <UART_SetConfig+0xabc>)
 800bf84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf88:	461a      	mov	r2, r3
 800bf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8c:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	085b      	lsrs	r3, r3, #1
 800bf96:	441a      	add	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	2b0f      	cmp	r3, #15
 800bfa8:	d908      	bls.n	800bfbc <UART_SetConfig+0xa80>
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfb0:	d204      	bcs.n	800bfbc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfb8:	60da      	str	r2, [r3, #12]
 800bfba:	e002      	b.n	800bfc2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bfde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3738      	adds	r7, #56	; 0x38
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bdb0      	pop	{r4, r5, r7, pc}
 800bfea:	bf00      	nop
 800bfec:	58024400 	.word	0x58024400
 800bff0:	03d09000 	.word	0x03d09000
 800bff4:	003d0900 	.word	0x003d0900
 800bff8:	0800f9dc 	.word	0x0800f9dc

0800bffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c008:	f003 0301 	and.w	r3, r3, #1
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00a      	beq.n	800c026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	430a      	orrs	r2, r1
 800c024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c02a:	f003 0302 	and.w	r3, r3, #2
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00a      	beq.n	800c048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	430a      	orrs	r2, r1
 800c046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c04c:	f003 0304 	and.w	r3, r3, #4
 800c050:	2b00      	cmp	r3, #0
 800c052:	d00a      	beq.n	800c06a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	430a      	orrs	r2, r1
 800c068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c06e:	f003 0308 	and.w	r3, r3, #8
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00a      	beq.n	800c08c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	430a      	orrs	r2, r1
 800c08a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c090:	f003 0310 	and.w	r3, r3, #16
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00a      	beq.n	800c0ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00a      	beq.n	800c0d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	430a      	orrs	r2, r1
 800c0ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d01a      	beq.n	800c112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	685b      	ldr	r3, [r3, #4]
 800c0e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	430a      	orrs	r2, r1
 800c0f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0fa:	d10a      	bne.n	800c112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	430a      	orrs	r2, r1
 800c110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00a      	beq.n	800c134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	430a      	orrs	r2, r1
 800c132:	605a      	str	r2, [r3, #4]
  }
}
 800c134:	bf00      	nop
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af02      	add	r7, sp, #8
 800c146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c150:	f7f6 fa1c 	bl	800258c <HAL_GetTick>
 800c154:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 0308 	and.w	r3, r3, #8
 800c160:	2b08      	cmp	r3, #8
 800c162:	d10e      	bne.n	800c182 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f82f 	bl	800c1d6 <UART_WaitOnFlagUntilTimeout>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c17e:	2303      	movs	r3, #3
 800c180:	e025      	b.n	800c1ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b04      	cmp	r3, #4
 800c18e:	d10e      	bne.n	800c1ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2200      	movs	r2, #0
 800c19a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f819 	bl	800c1d6 <UART_WaitOnFlagUntilTimeout>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	e00f      	b.n	800c1ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2220      	movs	r2, #32
 800c1ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b084      	sub	sp, #16
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	60f8      	str	r0, [r7, #12]
 800c1de:	60b9      	str	r1, [r7, #8]
 800c1e0:	603b      	str	r3, [r7, #0]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1e6:	e062      	b.n	800c2ae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1e8:	69bb      	ldr	r3, [r7, #24]
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ee:	d05e      	beq.n	800c2ae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1f0:	f7f6 f9cc 	bl	800258c <HAL_GetTick>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	69ba      	ldr	r2, [r7, #24]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d302      	bcc.n	800c206 <UART_WaitOnFlagUntilTimeout+0x30>
 800c200:	69bb      	ldr	r3, [r7, #24]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d11d      	bne.n	800c242 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c214:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	689a      	ldr	r2, [r3, #8]
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f022 0201 	bic.w	r2, r2, #1
 800c224:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2220      	movs	r2, #32
 800c22a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2220      	movs	r2, #32
 800c232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c23e:	2303      	movs	r3, #3
 800c240:	e045      	b.n	800c2ce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 0304 	and.w	r3, r3, #4
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d02e      	beq.n	800c2ae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	69db      	ldr	r3, [r3, #28]
 800c256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c25a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c25e:	d126      	bne.n	800c2ae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c268:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c278:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	689a      	ldr	r2, [r3, #8]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f022 0201 	bic.w	r2, r2, #1
 800c288:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2220      	movs	r2, #32
 800c28e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2220      	movs	r2, #32
 800c296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2220      	movs	r2, #32
 800c29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c2aa:	2303      	movs	r3, #3
 800c2ac:	e00f      	b.n	800c2ce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	69da      	ldr	r2, [r3, #28]
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	4013      	ands	r3, r2
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	bf0c      	ite	eq
 800c2be:	2301      	moveq	r3, #1
 800c2c0:	2300      	movne	r3, #0
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	79fb      	ldrb	r3, [r7, #7]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d08d      	beq.n	800c1e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c2d6:	b480      	push	{r7}
 800c2d8:	b083      	sub	sp, #12
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c2ec:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	689a      	ldr	r2, [r3, #8]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c2fc:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2220      	movs	r2, #32
 800c302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c306:	bf00      	nop
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr
	...

0800c314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c32a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	6899      	ldr	r1, [r3, #8]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	4b0f      	ldr	r3, [pc, #60]	; (800c374 <UART_EndRxTransfer+0x60>)
 800c338:	400b      	ands	r3, r1
 800c33a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c340:	2b01      	cmp	r3, #1
 800c342:	d107      	bne.n	800c354 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f022 0210 	bic.w	r2, r2, #16
 800c352:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2220      	movs	r2, #32
 800c358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr
 800c374:	effffffe 	.word	0xeffffffe

0800c378 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c384:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	69db      	ldr	r3, [r3, #28]
 800c38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c38e:	d014      	beq.n	800c3ba <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2200      	movs	r2, #0
 800c394:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	689a      	ldr	r2, [r3, #8]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c3a6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3b6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c3b8:	e002      	b.n	800c3c0 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f7ff f894 	bl	800b4e8 <HAL_UART_TxCpltCallback>
}
 800c3c0:	bf00      	nop
 800c3c2:	3710      	adds	r7, #16
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b084      	sub	sp, #16
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f7ff f890 	bl	800b4fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3dc:	bf00      	nop
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c400:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c40c:	2b80      	cmp	r3, #128	; 0x80
 800c40e:	d109      	bne.n	800c424 <UART_DMAError+0x40>
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	2b21      	cmp	r3, #33	; 0x21
 800c414:	d106      	bne.n	800c424 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2200      	movs	r2, #0
 800c41a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c41e:	6978      	ldr	r0, [r7, #20]
 800c420:	f7ff ff59 	bl	800c2d6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c42e:	2b40      	cmp	r3, #64	; 0x40
 800c430:	d109      	bne.n	800c446 <UART_DMAError+0x62>
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2b22      	cmp	r3, #34	; 0x22
 800c436:	d106      	bne.n	800c446 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c440:	6978      	ldr	r0, [r7, #20]
 800c442:	f7ff ff67 	bl	800c314 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c44c:	f043 0210 	orr.w	r2, r3, #16
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c456:	6978      	ldr	r0, [r7, #20]
 800c458:	f7ff f85a 	bl	800b510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c45c:	bf00      	nop
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2200      	movs	r2, #0
 800c476:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2200      	movs	r2, #0
 800c47e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f7ff f844 	bl	800b510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c488:	bf00      	nop
 800c48a:	3710      	adds	r7, #16
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4a6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2220      	movs	r2, #32
 800c4ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7ff f816 	bl	800b4e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4bc:	bf00      	nop
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c4cc:	bf00      	nop
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c4f4:	bf00      	nop
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c500:	b480      	push	{r7}
 800c502:	b085      	sub	sp, #20
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d101      	bne.n	800c516 <HAL_UARTEx_DisableFifoMode+0x16>
 800c512:	2302      	movs	r3, #2
 800c514:	e027      	b.n	800c566 <HAL_UARTEx_DisableFifoMode+0x66>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2201      	movs	r2, #1
 800c51a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2224      	movs	r2, #36	; 0x24
 800c522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f022 0201 	bic.w	r2, r2, #1
 800c53c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c544:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2220      	movs	r2, #32
 800c558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b084      	sub	sp, #16
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
 800c57a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c582:	2b01      	cmp	r3, #1
 800c584:	d101      	bne.n	800c58a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c586:	2302      	movs	r3, #2
 800c588:	e02d      	b.n	800c5e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2224      	movs	r2, #36	; 0x24
 800c596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f022 0201 	bic.w	r2, r2, #1
 800c5b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	430a      	orrs	r2, r1
 800c5c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 f850 	bl	800c66c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2220      	movs	r2, #32
 800c5d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b084      	sub	sp, #16
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d101      	bne.n	800c606 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c602:	2302      	movs	r3, #2
 800c604:	e02d      	b.n	800c662 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2201      	movs	r2, #1
 800c60a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2224      	movs	r2, #36	; 0x24
 800c612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f022 0201 	bic.w	r2, r2, #1
 800c62c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	683a      	ldr	r2, [r7, #0]
 800c63e:	430a      	orrs	r2, r1
 800c640:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f812 	bl	800c66c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2220      	movs	r2, #32
 800c654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
	...

0800c66c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d108      	bne.n	800c68e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2201      	movs	r2, #1
 800c688:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c68c:	e031      	b.n	800c6f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c68e:	2310      	movs	r3, #16
 800c690:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c692:	2310      	movs	r3, #16
 800c694:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	0e5b      	lsrs	r3, r3, #25
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	f003 0307 	and.w	r3, r3, #7
 800c6a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	0f5b      	lsrs	r3, r3, #29
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	f003 0307 	and.w	r3, r3, #7
 800c6b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6b6:	7bbb      	ldrb	r3, [r7, #14]
 800c6b8:	7b3a      	ldrb	r2, [r7, #12]
 800c6ba:	4911      	ldr	r1, [pc, #68]	; (800c700 <UARTEx_SetNbDataToProcess+0x94>)
 800c6bc:	5c8a      	ldrb	r2, [r1, r2]
 800c6be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c6c2:	7b3a      	ldrb	r2, [r7, #12]
 800c6c4:	490f      	ldr	r1, [pc, #60]	; (800c704 <UARTEx_SetNbDataToProcess+0x98>)
 800c6c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6d4:	7bfb      	ldrb	r3, [r7, #15]
 800c6d6:	7b7a      	ldrb	r2, [r7, #13]
 800c6d8:	4909      	ldr	r1, [pc, #36]	; (800c700 <UARTEx_SetNbDataToProcess+0x94>)
 800c6da:	5c8a      	ldrb	r2, [r1, r2]
 800c6dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c6e0:	7b7a      	ldrb	r2, [r7, #13]
 800c6e2:	4908      	ldr	r1, [pc, #32]	; (800c704 <UARTEx_SetNbDataToProcess+0x98>)
 800c6e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c6f2:	bf00      	nop
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	0800f9f4 	.word	0x0800f9f4
 800c704:	0800f9fc 	.word	0x0800f9fc

0800c708 <__errno>:
 800c708:	4b01      	ldr	r3, [pc, #4]	; (800c710 <__errno+0x8>)
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	24000020 	.word	0x24000020

0800c714 <__libc_init_array>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	4d0d      	ldr	r5, [pc, #52]	; (800c74c <__libc_init_array+0x38>)
 800c718:	4c0d      	ldr	r4, [pc, #52]	; (800c750 <__libc_init_array+0x3c>)
 800c71a:	1b64      	subs	r4, r4, r5
 800c71c:	10a4      	asrs	r4, r4, #2
 800c71e:	2600      	movs	r6, #0
 800c720:	42a6      	cmp	r6, r4
 800c722:	d109      	bne.n	800c738 <__libc_init_array+0x24>
 800c724:	4d0b      	ldr	r5, [pc, #44]	; (800c754 <__libc_init_array+0x40>)
 800c726:	4c0c      	ldr	r4, [pc, #48]	; (800c758 <__libc_init_array+0x44>)
 800c728:	f002 fcee 	bl	800f108 <_init>
 800c72c:	1b64      	subs	r4, r4, r5
 800c72e:	10a4      	asrs	r4, r4, #2
 800c730:	2600      	movs	r6, #0
 800c732:	42a6      	cmp	r6, r4
 800c734:	d105      	bne.n	800c742 <__libc_init_array+0x2e>
 800c736:	bd70      	pop	{r4, r5, r6, pc}
 800c738:	f855 3b04 	ldr.w	r3, [r5], #4
 800c73c:	4798      	blx	r3
 800c73e:	3601      	adds	r6, #1
 800c740:	e7ee      	b.n	800c720 <__libc_init_array+0xc>
 800c742:	f855 3b04 	ldr.w	r3, [r5], #4
 800c746:	4798      	blx	r3
 800c748:	3601      	adds	r6, #1
 800c74a:	e7f2      	b.n	800c732 <__libc_init_array+0x1e>
 800c74c:	0800fdec 	.word	0x0800fdec
 800c750:	0800fdec 	.word	0x0800fdec
 800c754:	0800fdec 	.word	0x0800fdec
 800c758:	0800fdf0 	.word	0x0800fdf0

0800c75c <memset>:
 800c75c:	4402      	add	r2, r0
 800c75e:	4603      	mov	r3, r0
 800c760:	4293      	cmp	r3, r2
 800c762:	d100      	bne.n	800c766 <memset+0xa>
 800c764:	4770      	bx	lr
 800c766:	f803 1b01 	strb.w	r1, [r3], #1
 800c76a:	e7f9      	b.n	800c760 <memset+0x4>

0800c76c <__cvt>:
 800c76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c76e:	ed2d 8b02 	vpush	{d8}
 800c772:	eeb0 8b40 	vmov.f64	d8, d0
 800c776:	b085      	sub	sp, #20
 800c778:	4617      	mov	r7, r2
 800c77a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c77c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c77e:	ee18 2a90 	vmov	r2, s17
 800c782:	f025 0520 	bic.w	r5, r5, #32
 800c786:	2a00      	cmp	r2, #0
 800c788:	bfb6      	itet	lt
 800c78a:	222d      	movlt	r2, #45	; 0x2d
 800c78c:	2200      	movge	r2, #0
 800c78e:	eeb1 8b40 	vneglt.f64	d8, d0
 800c792:	2d46      	cmp	r5, #70	; 0x46
 800c794:	460c      	mov	r4, r1
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	d004      	beq.n	800c7a4 <__cvt+0x38>
 800c79a:	2d45      	cmp	r5, #69	; 0x45
 800c79c:	d100      	bne.n	800c7a0 <__cvt+0x34>
 800c79e:	3401      	adds	r4, #1
 800c7a0:	2102      	movs	r1, #2
 800c7a2:	e000      	b.n	800c7a6 <__cvt+0x3a>
 800c7a4:	2103      	movs	r1, #3
 800c7a6:	ab03      	add	r3, sp, #12
 800c7a8:	9301      	str	r3, [sp, #4]
 800c7aa:	ab02      	add	r3, sp, #8
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	4622      	mov	r2, r4
 800c7b0:	4633      	mov	r3, r6
 800c7b2:	eeb0 0b48 	vmov.f64	d0, d8
 800c7b6:	f000 fdf7 	bl	800d3a8 <_dtoa_r>
 800c7ba:	2d47      	cmp	r5, #71	; 0x47
 800c7bc:	d109      	bne.n	800c7d2 <__cvt+0x66>
 800c7be:	07fb      	lsls	r3, r7, #31
 800c7c0:	d407      	bmi.n	800c7d2 <__cvt+0x66>
 800c7c2:	9b03      	ldr	r3, [sp, #12]
 800c7c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7c6:	1a1b      	subs	r3, r3, r0
 800c7c8:	6013      	str	r3, [r2, #0]
 800c7ca:	b005      	add	sp, #20
 800c7cc:	ecbd 8b02 	vpop	{d8}
 800c7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7d2:	2d46      	cmp	r5, #70	; 0x46
 800c7d4:	eb00 0204 	add.w	r2, r0, r4
 800c7d8:	d10c      	bne.n	800c7f4 <__cvt+0x88>
 800c7da:	7803      	ldrb	r3, [r0, #0]
 800c7dc:	2b30      	cmp	r3, #48	; 0x30
 800c7de:	d107      	bne.n	800c7f0 <__cvt+0x84>
 800c7e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e8:	bf1c      	itt	ne
 800c7ea:	f1c4 0401 	rsbne	r4, r4, #1
 800c7ee:	6034      	strne	r4, [r6, #0]
 800c7f0:	6833      	ldr	r3, [r6, #0]
 800c7f2:	441a      	add	r2, r3
 800c7f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7fc:	bf08      	it	eq
 800c7fe:	9203      	streq	r2, [sp, #12]
 800c800:	2130      	movs	r1, #48	; 0x30
 800c802:	9b03      	ldr	r3, [sp, #12]
 800c804:	4293      	cmp	r3, r2
 800c806:	d2dc      	bcs.n	800c7c2 <__cvt+0x56>
 800c808:	1c5c      	adds	r4, r3, #1
 800c80a:	9403      	str	r4, [sp, #12]
 800c80c:	7019      	strb	r1, [r3, #0]
 800c80e:	e7f8      	b.n	800c802 <__cvt+0x96>

0800c810 <__exponent>:
 800c810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c812:	4603      	mov	r3, r0
 800c814:	2900      	cmp	r1, #0
 800c816:	bfb8      	it	lt
 800c818:	4249      	neglt	r1, r1
 800c81a:	f803 2b02 	strb.w	r2, [r3], #2
 800c81e:	bfb4      	ite	lt
 800c820:	222d      	movlt	r2, #45	; 0x2d
 800c822:	222b      	movge	r2, #43	; 0x2b
 800c824:	2909      	cmp	r1, #9
 800c826:	7042      	strb	r2, [r0, #1]
 800c828:	dd2a      	ble.n	800c880 <__exponent+0x70>
 800c82a:	f10d 0407 	add.w	r4, sp, #7
 800c82e:	46a4      	mov	ip, r4
 800c830:	270a      	movs	r7, #10
 800c832:	46a6      	mov	lr, r4
 800c834:	460a      	mov	r2, r1
 800c836:	fb91 f6f7 	sdiv	r6, r1, r7
 800c83a:	fb07 1516 	mls	r5, r7, r6, r1
 800c83e:	3530      	adds	r5, #48	; 0x30
 800c840:	2a63      	cmp	r2, #99	; 0x63
 800c842:	f104 34ff 	add.w	r4, r4, #4294967295
 800c846:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c84a:	4631      	mov	r1, r6
 800c84c:	dcf1      	bgt.n	800c832 <__exponent+0x22>
 800c84e:	3130      	adds	r1, #48	; 0x30
 800c850:	f1ae 0502 	sub.w	r5, lr, #2
 800c854:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c858:	1c44      	adds	r4, r0, #1
 800c85a:	4629      	mov	r1, r5
 800c85c:	4561      	cmp	r1, ip
 800c85e:	d30a      	bcc.n	800c876 <__exponent+0x66>
 800c860:	f10d 0209 	add.w	r2, sp, #9
 800c864:	eba2 020e 	sub.w	r2, r2, lr
 800c868:	4565      	cmp	r5, ip
 800c86a:	bf88      	it	hi
 800c86c:	2200      	movhi	r2, #0
 800c86e:	4413      	add	r3, r2
 800c870:	1a18      	subs	r0, r3, r0
 800c872:	b003      	add	sp, #12
 800c874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c87a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c87e:	e7ed      	b.n	800c85c <__exponent+0x4c>
 800c880:	2330      	movs	r3, #48	; 0x30
 800c882:	3130      	adds	r1, #48	; 0x30
 800c884:	7083      	strb	r3, [r0, #2]
 800c886:	70c1      	strb	r1, [r0, #3]
 800c888:	1d03      	adds	r3, r0, #4
 800c88a:	e7f1      	b.n	800c870 <__exponent+0x60>
 800c88c:	0000      	movs	r0, r0
	...

0800c890 <_printf_float>:
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	b08b      	sub	sp, #44	; 0x2c
 800c896:	460c      	mov	r4, r1
 800c898:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c89c:	4616      	mov	r6, r2
 800c89e:	461f      	mov	r7, r3
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	f001 fcbb 	bl	800e21c <_localeconv_r>
 800c8a6:	f8d0 b000 	ldr.w	fp, [r0]
 800c8aa:	4658      	mov	r0, fp
 800c8ac:	f7f3 fd18 	bl	80002e0 <strlen>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9308      	str	r3, [sp, #32]
 800c8b4:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c8bc:	6822      	ldr	r2, [r4, #0]
 800c8be:	3307      	adds	r3, #7
 800c8c0:	f023 0307 	bic.w	r3, r3, #7
 800c8c4:	f103 0108 	add.w	r1, r3, #8
 800c8c8:	f8c8 1000 	str.w	r1, [r8]
 800c8cc:	4682      	mov	sl, r0
 800c8ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c8d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800cb38 <_printf_float+0x2a8>
 800c8da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c8de:	eeb0 6bc0 	vabs.f64	d6, d0
 800c8e2:	eeb4 6b47 	vcmp.f64	d6, d7
 800c8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ea:	dd24      	ble.n	800c936 <_printf_float+0xa6>
 800c8ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f4:	d502      	bpl.n	800c8fc <_printf_float+0x6c>
 800c8f6:	232d      	movs	r3, #45	; 0x2d
 800c8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8fc:	4b90      	ldr	r3, [pc, #576]	; (800cb40 <_printf_float+0x2b0>)
 800c8fe:	4891      	ldr	r0, [pc, #580]	; (800cb44 <_printf_float+0x2b4>)
 800c900:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c904:	bf94      	ite	ls
 800c906:	4698      	movls	r8, r3
 800c908:	4680      	movhi	r8, r0
 800c90a:	2303      	movs	r3, #3
 800c90c:	6123      	str	r3, [r4, #16]
 800c90e:	f022 0204 	bic.w	r2, r2, #4
 800c912:	2300      	movs	r3, #0
 800c914:	6022      	str	r2, [r4, #0]
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	9700      	str	r7, [sp, #0]
 800c91a:	4633      	mov	r3, r6
 800c91c:	aa09      	add	r2, sp, #36	; 0x24
 800c91e:	4621      	mov	r1, r4
 800c920:	4628      	mov	r0, r5
 800c922:	f000 f9d3 	bl	800cccc <_printf_common>
 800c926:	3001      	adds	r0, #1
 800c928:	f040 808a 	bne.w	800ca40 <_printf_float+0x1b0>
 800c92c:	f04f 30ff 	mov.w	r0, #4294967295
 800c930:	b00b      	add	sp, #44	; 0x2c
 800c932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c936:	eeb4 0b40 	vcmp.f64	d0, d0
 800c93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c93e:	d709      	bvc.n	800c954 <_printf_float+0xc4>
 800c940:	ee10 3a90 	vmov	r3, s1
 800c944:	2b00      	cmp	r3, #0
 800c946:	bfbc      	itt	lt
 800c948:	232d      	movlt	r3, #45	; 0x2d
 800c94a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c94e:	487e      	ldr	r0, [pc, #504]	; (800cb48 <_printf_float+0x2b8>)
 800c950:	4b7e      	ldr	r3, [pc, #504]	; (800cb4c <_printf_float+0x2bc>)
 800c952:	e7d5      	b.n	800c900 <_printf_float+0x70>
 800c954:	6863      	ldr	r3, [r4, #4]
 800c956:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c95a:	9104      	str	r1, [sp, #16]
 800c95c:	1c59      	adds	r1, r3, #1
 800c95e:	d13c      	bne.n	800c9da <_printf_float+0x14a>
 800c960:	2306      	movs	r3, #6
 800c962:	6063      	str	r3, [r4, #4]
 800c964:	2300      	movs	r3, #0
 800c966:	9303      	str	r3, [sp, #12]
 800c968:	ab08      	add	r3, sp, #32
 800c96a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c96e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c972:	ab07      	add	r3, sp, #28
 800c974:	6861      	ldr	r1, [r4, #4]
 800c976:	9300      	str	r3, [sp, #0]
 800c978:	6022      	str	r2, [r4, #0]
 800c97a:	f10d 031b 	add.w	r3, sp, #27
 800c97e:	4628      	mov	r0, r5
 800c980:	f7ff fef4 	bl	800c76c <__cvt>
 800c984:	9b04      	ldr	r3, [sp, #16]
 800c986:	9907      	ldr	r1, [sp, #28]
 800c988:	2b47      	cmp	r3, #71	; 0x47
 800c98a:	4680      	mov	r8, r0
 800c98c:	d108      	bne.n	800c9a0 <_printf_float+0x110>
 800c98e:	1cc8      	adds	r0, r1, #3
 800c990:	db02      	blt.n	800c998 <_printf_float+0x108>
 800c992:	6863      	ldr	r3, [r4, #4]
 800c994:	4299      	cmp	r1, r3
 800c996:	dd41      	ble.n	800ca1c <_printf_float+0x18c>
 800c998:	f1a9 0902 	sub.w	r9, r9, #2
 800c99c:	fa5f f989 	uxtb.w	r9, r9
 800c9a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c9a4:	d820      	bhi.n	800c9e8 <_printf_float+0x158>
 800c9a6:	3901      	subs	r1, #1
 800c9a8:	464a      	mov	r2, r9
 800c9aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c9ae:	9107      	str	r1, [sp, #28]
 800c9b0:	f7ff ff2e 	bl	800c810 <__exponent>
 800c9b4:	9a08      	ldr	r2, [sp, #32]
 800c9b6:	9004      	str	r0, [sp, #16]
 800c9b8:	1813      	adds	r3, r2, r0
 800c9ba:	2a01      	cmp	r2, #1
 800c9bc:	6123      	str	r3, [r4, #16]
 800c9be:	dc02      	bgt.n	800c9c6 <_printf_float+0x136>
 800c9c0:	6822      	ldr	r2, [r4, #0]
 800c9c2:	07d2      	lsls	r2, r2, #31
 800c9c4:	d501      	bpl.n	800c9ca <_printf_float+0x13a>
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	6123      	str	r3, [r4, #16]
 800c9ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0a2      	beq.n	800c918 <_printf_float+0x88>
 800c9d2:	232d      	movs	r3, #45	; 0x2d
 800c9d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9d8:	e79e      	b.n	800c918 <_printf_float+0x88>
 800c9da:	9904      	ldr	r1, [sp, #16]
 800c9dc:	2947      	cmp	r1, #71	; 0x47
 800c9de:	d1c1      	bne.n	800c964 <_printf_float+0xd4>
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1bf      	bne.n	800c964 <_printf_float+0xd4>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e7bc      	b.n	800c962 <_printf_float+0xd2>
 800c9e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c9ec:	d118      	bne.n	800ca20 <_printf_float+0x190>
 800c9ee:	2900      	cmp	r1, #0
 800c9f0:	6863      	ldr	r3, [r4, #4]
 800c9f2:	dd0b      	ble.n	800ca0c <_printf_float+0x17c>
 800c9f4:	6121      	str	r1, [r4, #16]
 800c9f6:	b913      	cbnz	r3, 800c9fe <_printf_float+0x16e>
 800c9f8:	6822      	ldr	r2, [r4, #0]
 800c9fa:	07d0      	lsls	r0, r2, #31
 800c9fc:	d502      	bpl.n	800ca04 <_printf_float+0x174>
 800c9fe:	3301      	adds	r3, #1
 800ca00:	440b      	add	r3, r1
 800ca02:	6123      	str	r3, [r4, #16]
 800ca04:	2300      	movs	r3, #0
 800ca06:	65a1      	str	r1, [r4, #88]	; 0x58
 800ca08:	9304      	str	r3, [sp, #16]
 800ca0a:	e7de      	b.n	800c9ca <_printf_float+0x13a>
 800ca0c:	b913      	cbnz	r3, 800ca14 <_printf_float+0x184>
 800ca0e:	6822      	ldr	r2, [r4, #0]
 800ca10:	07d2      	lsls	r2, r2, #31
 800ca12:	d501      	bpl.n	800ca18 <_printf_float+0x188>
 800ca14:	3302      	adds	r3, #2
 800ca16:	e7f4      	b.n	800ca02 <_printf_float+0x172>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e7f2      	b.n	800ca02 <_printf_float+0x172>
 800ca1c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ca20:	9b08      	ldr	r3, [sp, #32]
 800ca22:	4299      	cmp	r1, r3
 800ca24:	db05      	blt.n	800ca32 <_printf_float+0x1a2>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	6121      	str	r1, [r4, #16]
 800ca2a:	07d8      	lsls	r0, r3, #31
 800ca2c:	d5ea      	bpl.n	800ca04 <_printf_float+0x174>
 800ca2e:	1c4b      	adds	r3, r1, #1
 800ca30:	e7e7      	b.n	800ca02 <_printf_float+0x172>
 800ca32:	2900      	cmp	r1, #0
 800ca34:	bfd4      	ite	le
 800ca36:	f1c1 0202 	rsble	r2, r1, #2
 800ca3a:	2201      	movgt	r2, #1
 800ca3c:	4413      	add	r3, r2
 800ca3e:	e7e0      	b.n	800ca02 <_printf_float+0x172>
 800ca40:	6823      	ldr	r3, [r4, #0]
 800ca42:	055a      	lsls	r2, r3, #21
 800ca44:	d407      	bmi.n	800ca56 <_printf_float+0x1c6>
 800ca46:	6923      	ldr	r3, [r4, #16]
 800ca48:	4642      	mov	r2, r8
 800ca4a:	4631      	mov	r1, r6
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	47b8      	blx	r7
 800ca50:	3001      	adds	r0, #1
 800ca52:	d12a      	bne.n	800caaa <_printf_float+0x21a>
 800ca54:	e76a      	b.n	800c92c <_printf_float+0x9c>
 800ca56:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ca5a:	f240 80e2 	bls.w	800cc22 <_printf_float+0x392>
 800ca5e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ca62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca6a:	d133      	bne.n	800cad4 <_printf_float+0x244>
 800ca6c:	4a38      	ldr	r2, [pc, #224]	; (800cb50 <_printf_float+0x2c0>)
 800ca6e:	2301      	movs	r3, #1
 800ca70:	4631      	mov	r1, r6
 800ca72:	4628      	mov	r0, r5
 800ca74:	47b8      	blx	r7
 800ca76:	3001      	adds	r0, #1
 800ca78:	f43f af58 	beq.w	800c92c <_printf_float+0x9c>
 800ca7c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	db02      	blt.n	800ca8a <_printf_float+0x1fa>
 800ca84:	6823      	ldr	r3, [r4, #0]
 800ca86:	07d8      	lsls	r0, r3, #31
 800ca88:	d50f      	bpl.n	800caaa <_printf_float+0x21a>
 800ca8a:	4653      	mov	r3, sl
 800ca8c:	465a      	mov	r2, fp
 800ca8e:	4631      	mov	r1, r6
 800ca90:	4628      	mov	r0, r5
 800ca92:	47b8      	blx	r7
 800ca94:	3001      	adds	r0, #1
 800ca96:	f43f af49 	beq.w	800c92c <_printf_float+0x9c>
 800ca9a:	f04f 0800 	mov.w	r8, #0
 800ca9e:	f104 091a 	add.w	r9, r4, #26
 800caa2:	9b08      	ldr	r3, [sp, #32]
 800caa4:	3b01      	subs	r3, #1
 800caa6:	4543      	cmp	r3, r8
 800caa8:	dc09      	bgt.n	800cabe <_printf_float+0x22e>
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	079b      	lsls	r3, r3, #30
 800caae:	f100 8108 	bmi.w	800ccc2 <_printf_float+0x432>
 800cab2:	68e0      	ldr	r0, [r4, #12]
 800cab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cab6:	4298      	cmp	r0, r3
 800cab8:	bfb8      	it	lt
 800caba:	4618      	movlt	r0, r3
 800cabc:	e738      	b.n	800c930 <_printf_float+0xa0>
 800cabe:	2301      	movs	r3, #1
 800cac0:	464a      	mov	r2, r9
 800cac2:	4631      	mov	r1, r6
 800cac4:	4628      	mov	r0, r5
 800cac6:	47b8      	blx	r7
 800cac8:	3001      	adds	r0, #1
 800caca:	f43f af2f 	beq.w	800c92c <_printf_float+0x9c>
 800cace:	f108 0801 	add.w	r8, r8, #1
 800cad2:	e7e6      	b.n	800caa2 <_printf_float+0x212>
 800cad4:	9b07      	ldr	r3, [sp, #28]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	dc3c      	bgt.n	800cb54 <_printf_float+0x2c4>
 800cada:	4a1d      	ldr	r2, [pc, #116]	; (800cb50 <_printf_float+0x2c0>)
 800cadc:	2301      	movs	r3, #1
 800cade:	4631      	mov	r1, r6
 800cae0:	4628      	mov	r0, r5
 800cae2:	47b8      	blx	r7
 800cae4:	3001      	adds	r0, #1
 800cae6:	f43f af21 	beq.w	800c92c <_printf_float+0x9c>
 800caea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800caee:	4313      	orrs	r3, r2
 800caf0:	d102      	bne.n	800caf8 <_printf_float+0x268>
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	07d9      	lsls	r1, r3, #31
 800caf6:	d5d8      	bpl.n	800caaa <_printf_float+0x21a>
 800caf8:	4653      	mov	r3, sl
 800cafa:	465a      	mov	r2, fp
 800cafc:	4631      	mov	r1, r6
 800cafe:	4628      	mov	r0, r5
 800cb00:	47b8      	blx	r7
 800cb02:	3001      	adds	r0, #1
 800cb04:	f43f af12 	beq.w	800c92c <_printf_float+0x9c>
 800cb08:	f04f 0900 	mov.w	r9, #0
 800cb0c:	f104 0a1a 	add.w	sl, r4, #26
 800cb10:	9b07      	ldr	r3, [sp, #28]
 800cb12:	425b      	negs	r3, r3
 800cb14:	454b      	cmp	r3, r9
 800cb16:	dc01      	bgt.n	800cb1c <_printf_float+0x28c>
 800cb18:	9b08      	ldr	r3, [sp, #32]
 800cb1a:	e795      	b.n	800ca48 <_printf_float+0x1b8>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	4652      	mov	r2, sl
 800cb20:	4631      	mov	r1, r6
 800cb22:	4628      	mov	r0, r5
 800cb24:	47b8      	blx	r7
 800cb26:	3001      	adds	r0, #1
 800cb28:	f43f af00 	beq.w	800c92c <_printf_float+0x9c>
 800cb2c:	f109 0901 	add.w	r9, r9, #1
 800cb30:	e7ee      	b.n	800cb10 <_printf_float+0x280>
 800cb32:	bf00      	nop
 800cb34:	f3af 8000 	nop.w
 800cb38:	ffffffff 	.word	0xffffffff
 800cb3c:	7fefffff 	.word	0x7fefffff
 800cb40:	0800fa08 	.word	0x0800fa08
 800cb44:	0800fa0c 	.word	0x0800fa0c
 800cb48:	0800fa14 	.word	0x0800fa14
 800cb4c:	0800fa10 	.word	0x0800fa10
 800cb50:	0800fa18 	.word	0x0800fa18
 800cb54:	9a08      	ldr	r2, [sp, #32]
 800cb56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	bfa8      	it	ge
 800cb5c:	461a      	movge	r2, r3
 800cb5e:	2a00      	cmp	r2, #0
 800cb60:	4691      	mov	r9, r2
 800cb62:	dc38      	bgt.n	800cbd6 <_printf_float+0x346>
 800cb64:	2300      	movs	r3, #0
 800cb66:	9305      	str	r3, [sp, #20]
 800cb68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb6c:	f104 021a 	add.w	r2, r4, #26
 800cb70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb72:	9905      	ldr	r1, [sp, #20]
 800cb74:	9304      	str	r3, [sp, #16]
 800cb76:	eba3 0309 	sub.w	r3, r3, r9
 800cb7a:	428b      	cmp	r3, r1
 800cb7c:	dc33      	bgt.n	800cbe6 <_printf_float+0x356>
 800cb7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	db3c      	blt.n	800cc00 <_printf_float+0x370>
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	07da      	lsls	r2, r3, #31
 800cb8a:	d439      	bmi.n	800cc00 <_printf_float+0x370>
 800cb8c:	9a08      	ldr	r2, [sp, #32]
 800cb8e:	9b04      	ldr	r3, [sp, #16]
 800cb90:	9907      	ldr	r1, [sp, #28]
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	eba2 0901 	sub.w	r9, r2, r1
 800cb98:	4599      	cmp	r9, r3
 800cb9a:	bfa8      	it	ge
 800cb9c:	4699      	movge	r9, r3
 800cb9e:	f1b9 0f00 	cmp.w	r9, #0
 800cba2:	dc35      	bgt.n	800cc10 <_printf_float+0x380>
 800cba4:	f04f 0800 	mov.w	r8, #0
 800cba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbac:	f104 0a1a 	add.w	sl, r4, #26
 800cbb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cbb4:	1a9b      	subs	r3, r3, r2
 800cbb6:	eba3 0309 	sub.w	r3, r3, r9
 800cbba:	4543      	cmp	r3, r8
 800cbbc:	f77f af75 	ble.w	800caaa <_printf_float+0x21a>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	4652      	mov	r2, sl
 800cbc4:	4631      	mov	r1, r6
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	47b8      	blx	r7
 800cbca:	3001      	adds	r0, #1
 800cbcc:	f43f aeae 	beq.w	800c92c <_printf_float+0x9c>
 800cbd0:	f108 0801 	add.w	r8, r8, #1
 800cbd4:	e7ec      	b.n	800cbb0 <_printf_float+0x320>
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	4631      	mov	r1, r6
 800cbda:	4642      	mov	r2, r8
 800cbdc:	4628      	mov	r0, r5
 800cbde:	47b8      	blx	r7
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	d1bf      	bne.n	800cb64 <_printf_float+0x2d4>
 800cbe4:	e6a2      	b.n	800c92c <_printf_float+0x9c>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	4631      	mov	r1, r6
 800cbea:	4628      	mov	r0, r5
 800cbec:	9204      	str	r2, [sp, #16]
 800cbee:	47b8      	blx	r7
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	f43f ae9b 	beq.w	800c92c <_printf_float+0x9c>
 800cbf6:	9b05      	ldr	r3, [sp, #20]
 800cbf8:	9a04      	ldr	r2, [sp, #16]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	9305      	str	r3, [sp, #20]
 800cbfe:	e7b7      	b.n	800cb70 <_printf_float+0x2e0>
 800cc00:	4653      	mov	r3, sl
 800cc02:	465a      	mov	r2, fp
 800cc04:	4631      	mov	r1, r6
 800cc06:	4628      	mov	r0, r5
 800cc08:	47b8      	blx	r7
 800cc0a:	3001      	adds	r0, #1
 800cc0c:	d1be      	bne.n	800cb8c <_printf_float+0x2fc>
 800cc0e:	e68d      	b.n	800c92c <_printf_float+0x9c>
 800cc10:	9a04      	ldr	r2, [sp, #16]
 800cc12:	464b      	mov	r3, r9
 800cc14:	4442      	add	r2, r8
 800cc16:	4631      	mov	r1, r6
 800cc18:	4628      	mov	r0, r5
 800cc1a:	47b8      	blx	r7
 800cc1c:	3001      	adds	r0, #1
 800cc1e:	d1c1      	bne.n	800cba4 <_printf_float+0x314>
 800cc20:	e684      	b.n	800c92c <_printf_float+0x9c>
 800cc22:	9a08      	ldr	r2, [sp, #32]
 800cc24:	2a01      	cmp	r2, #1
 800cc26:	dc01      	bgt.n	800cc2c <_printf_float+0x39c>
 800cc28:	07db      	lsls	r3, r3, #31
 800cc2a:	d537      	bpl.n	800cc9c <_printf_float+0x40c>
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	4642      	mov	r2, r8
 800cc30:	4631      	mov	r1, r6
 800cc32:	4628      	mov	r0, r5
 800cc34:	47b8      	blx	r7
 800cc36:	3001      	adds	r0, #1
 800cc38:	f43f ae78 	beq.w	800c92c <_printf_float+0x9c>
 800cc3c:	4653      	mov	r3, sl
 800cc3e:	465a      	mov	r2, fp
 800cc40:	4631      	mov	r1, r6
 800cc42:	4628      	mov	r0, r5
 800cc44:	47b8      	blx	r7
 800cc46:	3001      	adds	r0, #1
 800cc48:	f43f ae70 	beq.w	800c92c <_printf_float+0x9c>
 800cc4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cc50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc58:	d01b      	beq.n	800cc92 <_printf_float+0x402>
 800cc5a:	9b08      	ldr	r3, [sp, #32]
 800cc5c:	f108 0201 	add.w	r2, r8, #1
 800cc60:	3b01      	subs	r3, #1
 800cc62:	4631      	mov	r1, r6
 800cc64:	4628      	mov	r0, r5
 800cc66:	47b8      	blx	r7
 800cc68:	3001      	adds	r0, #1
 800cc6a:	d10e      	bne.n	800cc8a <_printf_float+0x3fa>
 800cc6c:	e65e      	b.n	800c92c <_printf_float+0x9c>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	464a      	mov	r2, r9
 800cc72:	4631      	mov	r1, r6
 800cc74:	4628      	mov	r0, r5
 800cc76:	47b8      	blx	r7
 800cc78:	3001      	adds	r0, #1
 800cc7a:	f43f ae57 	beq.w	800c92c <_printf_float+0x9c>
 800cc7e:	f108 0801 	add.w	r8, r8, #1
 800cc82:	9b08      	ldr	r3, [sp, #32]
 800cc84:	3b01      	subs	r3, #1
 800cc86:	4543      	cmp	r3, r8
 800cc88:	dcf1      	bgt.n	800cc6e <_printf_float+0x3de>
 800cc8a:	9b04      	ldr	r3, [sp, #16]
 800cc8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc90:	e6db      	b.n	800ca4a <_printf_float+0x1ba>
 800cc92:	f04f 0800 	mov.w	r8, #0
 800cc96:	f104 091a 	add.w	r9, r4, #26
 800cc9a:	e7f2      	b.n	800cc82 <_printf_float+0x3f2>
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	4642      	mov	r2, r8
 800cca0:	e7df      	b.n	800cc62 <_printf_float+0x3d2>
 800cca2:	2301      	movs	r3, #1
 800cca4:	464a      	mov	r2, r9
 800cca6:	4631      	mov	r1, r6
 800cca8:	4628      	mov	r0, r5
 800ccaa:	47b8      	blx	r7
 800ccac:	3001      	adds	r0, #1
 800ccae:	f43f ae3d 	beq.w	800c92c <_printf_float+0x9c>
 800ccb2:	f108 0801 	add.w	r8, r8, #1
 800ccb6:	68e3      	ldr	r3, [r4, #12]
 800ccb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccba:	1a5b      	subs	r3, r3, r1
 800ccbc:	4543      	cmp	r3, r8
 800ccbe:	dcf0      	bgt.n	800cca2 <_printf_float+0x412>
 800ccc0:	e6f7      	b.n	800cab2 <_printf_float+0x222>
 800ccc2:	f04f 0800 	mov.w	r8, #0
 800ccc6:	f104 0919 	add.w	r9, r4, #25
 800ccca:	e7f4      	b.n	800ccb6 <_printf_float+0x426>

0800cccc <_printf_common>:
 800cccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccd0:	4616      	mov	r6, r2
 800ccd2:	4699      	mov	r9, r3
 800ccd4:	688a      	ldr	r2, [r1, #8]
 800ccd6:	690b      	ldr	r3, [r1, #16]
 800ccd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	bfb8      	it	lt
 800cce0:	4613      	movlt	r3, r2
 800cce2:	6033      	str	r3, [r6, #0]
 800cce4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cce8:	4607      	mov	r7, r0
 800ccea:	460c      	mov	r4, r1
 800ccec:	b10a      	cbz	r2, 800ccf2 <_printf_common+0x26>
 800ccee:	3301      	adds	r3, #1
 800ccf0:	6033      	str	r3, [r6, #0]
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	0699      	lsls	r1, r3, #26
 800ccf6:	bf42      	ittt	mi
 800ccf8:	6833      	ldrmi	r3, [r6, #0]
 800ccfa:	3302      	addmi	r3, #2
 800ccfc:	6033      	strmi	r3, [r6, #0]
 800ccfe:	6825      	ldr	r5, [r4, #0]
 800cd00:	f015 0506 	ands.w	r5, r5, #6
 800cd04:	d106      	bne.n	800cd14 <_printf_common+0x48>
 800cd06:	f104 0a19 	add.w	sl, r4, #25
 800cd0a:	68e3      	ldr	r3, [r4, #12]
 800cd0c:	6832      	ldr	r2, [r6, #0]
 800cd0e:	1a9b      	subs	r3, r3, r2
 800cd10:	42ab      	cmp	r3, r5
 800cd12:	dc26      	bgt.n	800cd62 <_printf_common+0x96>
 800cd14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd18:	1e13      	subs	r3, r2, #0
 800cd1a:	6822      	ldr	r2, [r4, #0]
 800cd1c:	bf18      	it	ne
 800cd1e:	2301      	movne	r3, #1
 800cd20:	0692      	lsls	r2, r2, #26
 800cd22:	d42b      	bmi.n	800cd7c <_printf_common+0xb0>
 800cd24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd28:	4649      	mov	r1, r9
 800cd2a:	4638      	mov	r0, r7
 800cd2c:	47c0      	blx	r8
 800cd2e:	3001      	adds	r0, #1
 800cd30:	d01e      	beq.n	800cd70 <_printf_common+0xa4>
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	68e5      	ldr	r5, [r4, #12]
 800cd36:	6832      	ldr	r2, [r6, #0]
 800cd38:	f003 0306 	and.w	r3, r3, #6
 800cd3c:	2b04      	cmp	r3, #4
 800cd3e:	bf08      	it	eq
 800cd40:	1aad      	subeq	r5, r5, r2
 800cd42:	68a3      	ldr	r3, [r4, #8]
 800cd44:	6922      	ldr	r2, [r4, #16]
 800cd46:	bf0c      	ite	eq
 800cd48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd4c:	2500      	movne	r5, #0
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	bfc4      	itt	gt
 800cd52:	1a9b      	subgt	r3, r3, r2
 800cd54:	18ed      	addgt	r5, r5, r3
 800cd56:	2600      	movs	r6, #0
 800cd58:	341a      	adds	r4, #26
 800cd5a:	42b5      	cmp	r5, r6
 800cd5c:	d11a      	bne.n	800cd94 <_printf_common+0xc8>
 800cd5e:	2000      	movs	r0, #0
 800cd60:	e008      	b.n	800cd74 <_printf_common+0xa8>
 800cd62:	2301      	movs	r3, #1
 800cd64:	4652      	mov	r2, sl
 800cd66:	4649      	mov	r1, r9
 800cd68:	4638      	mov	r0, r7
 800cd6a:	47c0      	blx	r8
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	d103      	bne.n	800cd78 <_printf_common+0xac>
 800cd70:	f04f 30ff 	mov.w	r0, #4294967295
 800cd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd78:	3501      	adds	r5, #1
 800cd7a:	e7c6      	b.n	800cd0a <_printf_common+0x3e>
 800cd7c:	18e1      	adds	r1, r4, r3
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	2030      	movs	r0, #48	; 0x30
 800cd82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd86:	4422      	add	r2, r4
 800cd88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd90:	3302      	adds	r3, #2
 800cd92:	e7c7      	b.n	800cd24 <_printf_common+0x58>
 800cd94:	2301      	movs	r3, #1
 800cd96:	4622      	mov	r2, r4
 800cd98:	4649      	mov	r1, r9
 800cd9a:	4638      	mov	r0, r7
 800cd9c:	47c0      	blx	r8
 800cd9e:	3001      	adds	r0, #1
 800cda0:	d0e6      	beq.n	800cd70 <_printf_common+0xa4>
 800cda2:	3601      	adds	r6, #1
 800cda4:	e7d9      	b.n	800cd5a <_printf_common+0x8e>
	...

0800cda8 <_printf_i>:
 800cda8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdac:	460c      	mov	r4, r1
 800cdae:	4691      	mov	r9, r2
 800cdb0:	7e27      	ldrb	r7, [r4, #24]
 800cdb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cdb4:	2f78      	cmp	r7, #120	; 0x78
 800cdb6:	4680      	mov	r8, r0
 800cdb8:	469a      	mov	sl, r3
 800cdba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cdbe:	d807      	bhi.n	800cdd0 <_printf_i+0x28>
 800cdc0:	2f62      	cmp	r7, #98	; 0x62
 800cdc2:	d80a      	bhi.n	800cdda <_printf_i+0x32>
 800cdc4:	2f00      	cmp	r7, #0
 800cdc6:	f000 80d8 	beq.w	800cf7a <_printf_i+0x1d2>
 800cdca:	2f58      	cmp	r7, #88	; 0x58
 800cdcc:	f000 80a3 	beq.w	800cf16 <_printf_i+0x16e>
 800cdd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cdd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdd8:	e03a      	b.n	800ce50 <_printf_i+0xa8>
 800cdda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdde:	2b15      	cmp	r3, #21
 800cde0:	d8f6      	bhi.n	800cdd0 <_printf_i+0x28>
 800cde2:	a001      	add	r0, pc, #4	; (adr r0, 800cde8 <_printf_i+0x40>)
 800cde4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cde8:	0800ce41 	.word	0x0800ce41
 800cdec:	0800ce55 	.word	0x0800ce55
 800cdf0:	0800cdd1 	.word	0x0800cdd1
 800cdf4:	0800cdd1 	.word	0x0800cdd1
 800cdf8:	0800cdd1 	.word	0x0800cdd1
 800cdfc:	0800cdd1 	.word	0x0800cdd1
 800ce00:	0800ce55 	.word	0x0800ce55
 800ce04:	0800cdd1 	.word	0x0800cdd1
 800ce08:	0800cdd1 	.word	0x0800cdd1
 800ce0c:	0800cdd1 	.word	0x0800cdd1
 800ce10:	0800cdd1 	.word	0x0800cdd1
 800ce14:	0800cf61 	.word	0x0800cf61
 800ce18:	0800ce85 	.word	0x0800ce85
 800ce1c:	0800cf43 	.word	0x0800cf43
 800ce20:	0800cdd1 	.word	0x0800cdd1
 800ce24:	0800cdd1 	.word	0x0800cdd1
 800ce28:	0800cf83 	.word	0x0800cf83
 800ce2c:	0800cdd1 	.word	0x0800cdd1
 800ce30:	0800ce85 	.word	0x0800ce85
 800ce34:	0800cdd1 	.word	0x0800cdd1
 800ce38:	0800cdd1 	.word	0x0800cdd1
 800ce3c:	0800cf4b 	.word	0x0800cf4b
 800ce40:	680b      	ldr	r3, [r1, #0]
 800ce42:	1d1a      	adds	r2, r3, #4
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	600a      	str	r2, [r1, #0]
 800ce48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ce4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce50:	2301      	movs	r3, #1
 800ce52:	e0a3      	b.n	800cf9c <_printf_i+0x1f4>
 800ce54:	6825      	ldr	r5, [r4, #0]
 800ce56:	6808      	ldr	r0, [r1, #0]
 800ce58:	062e      	lsls	r6, r5, #24
 800ce5a:	f100 0304 	add.w	r3, r0, #4
 800ce5e:	d50a      	bpl.n	800ce76 <_printf_i+0xce>
 800ce60:	6805      	ldr	r5, [r0, #0]
 800ce62:	600b      	str	r3, [r1, #0]
 800ce64:	2d00      	cmp	r5, #0
 800ce66:	da03      	bge.n	800ce70 <_printf_i+0xc8>
 800ce68:	232d      	movs	r3, #45	; 0x2d
 800ce6a:	426d      	negs	r5, r5
 800ce6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce70:	485e      	ldr	r0, [pc, #376]	; (800cfec <_printf_i+0x244>)
 800ce72:	230a      	movs	r3, #10
 800ce74:	e019      	b.n	800ceaa <_printf_i+0x102>
 800ce76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ce7a:	6805      	ldr	r5, [r0, #0]
 800ce7c:	600b      	str	r3, [r1, #0]
 800ce7e:	bf18      	it	ne
 800ce80:	b22d      	sxthne	r5, r5
 800ce82:	e7ef      	b.n	800ce64 <_printf_i+0xbc>
 800ce84:	680b      	ldr	r3, [r1, #0]
 800ce86:	6825      	ldr	r5, [r4, #0]
 800ce88:	1d18      	adds	r0, r3, #4
 800ce8a:	6008      	str	r0, [r1, #0]
 800ce8c:	0628      	lsls	r0, r5, #24
 800ce8e:	d501      	bpl.n	800ce94 <_printf_i+0xec>
 800ce90:	681d      	ldr	r5, [r3, #0]
 800ce92:	e002      	b.n	800ce9a <_printf_i+0xf2>
 800ce94:	0669      	lsls	r1, r5, #25
 800ce96:	d5fb      	bpl.n	800ce90 <_printf_i+0xe8>
 800ce98:	881d      	ldrh	r5, [r3, #0]
 800ce9a:	4854      	ldr	r0, [pc, #336]	; (800cfec <_printf_i+0x244>)
 800ce9c:	2f6f      	cmp	r7, #111	; 0x6f
 800ce9e:	bf0c      	ite	eq
 800cea0:	2308      	moveq	r3, #8
 800cea2:	230a      	movne	r3, #10
 800cea4:	2100      	movs	r1, #0
 800cea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ceaa:	6866      	ldr	r6, [r4, #4]
 800ceac:	60a6      	str	r6, [r4, #8]
 800ceae:	2e00      	cmp	r6, #0
 800ceb0:	bfa2      	ittt	ge
 800ceb2:	6821      	ldrge	r1, [r4, #0]
 800ceb4:	f021 0104 	bicge.w	r1, r1, #4
 800ceb8:	6021      	strge	r1, [r4, #0]
 800ceba:	b90d      	cbnz	r5, 800cec0 <_printf_i+0x118>
 800cebc:	2e00      	cmp	r6, #0
 800cebe:	d04d      	beq.n	800cf5c <_printf_i+0x1b4>
 800cec0:	4616      	mov	r6, r2
 800cec2:	fbb5 f1f3 	udiv	r1, r5, r3
 800cec6:	fb03 5711 	mls	r7, r3, r1, r5
 800ceca:	5dc7      	ldrb	r7, [r0, r7]
 800cecc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ced0:	462f      	mov	r7, r5
 800ced2:	42bb      	cmp	r3, r7
 800ced4:	460d      	mov	r5, r1
 800ced6:	d9f4      	bls.n	800cec2 <_printf_i+0x11a>
 800ced8:	2b08      	cmp	r3, #8
 800ceda:	d10b      	bne.n	800cef4 <_printf_i+0x14c>
 800cedc:	6823      	ldr	r3, [r4, #0]
 800cede:	07df      	lsls	r7, r3, #31
 800cee0:	d508      	bpl.n	800cef4 <_printf_i+0x14c>
 800cee2:	6923      	ldr	r3, [r4, #16]
 800cee4:	6861      	ldr	r1, [r4, #4]
 800cee6:	4299      	cmp	r1, r3
 800cee8:	bfde      	ittt	le
 800ceea:	2330      	movle	r3, #48	; 0x30
 800ceec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cef0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cef4:	1b92      	subs	r2, r2, r6
 800cef6:	6122      	str	r2, [r4, #16]
 800cef8:	f8cd a000 	str.w	sl, [sp]
 800cefc:	464b      	mov	r3, r9
 800cefe:	aa03      	add	r2, sp, #12
 800cf00:	4621      	mov	r1, r4
 800cf02:	4640      	mov	r0, r8
 800cf04:	f7ff fee2 	bl	800cccc <_printf_common>
 800cf08:	3001      	adds	r0, #1
 800cf0a:	d14c      	bne.n	800cfa6 <_printf_i+0x1fe>
 800cf0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf10:	b004      	add	sp, #16
 800cf12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf16:	4835      	ldr	r0, [pc, #212]	; (800cfec <_printf_i+0x244>)
 800cf18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cf1c:	6823      	ldr	r3, [r4, #0]
 800cf1e:	680e      	ldr	r6, [r1, #0]
 800cf20:	061f      	lsls	r7, r3, #24
 800cf22:	f856 5b04 	ldr.w	r5, [r6], #4
 800cf26:	600e      	str	r6, [r1, #0]
 800cf28:	d514      	bpl.n	800cf54 <_printf_i+0x1ac>
 800cf2a:	07d9      	lsls	r1, r3, #31
 800cf2c:	bf44      	itt	mi
 800cf2e:	f043 0320 	orrmi.w	r3, r3, #32
 800cf32:	6023      	strmi	r3, [r4, #0]
 800cf34:	b91d      	cbnz	r5, 800cf3e <_printf_i+0x196>
 800cf36:	6823      	ldr	r3, [r4, #0]
 800cf38:	f023 0320 	bic.w	r3, r3, #32
 800cf3c:	6023      	str	r3, [r4, #0]
 800cf3e:	2310      	movs	r3, #16
 800cf40:	e7b0      	b.n	800cea4 <_printf_i+0xfc>
 800cf42:	6823      	ldr	r3, [r4, #0]
 800cf44:	f043 0320 	orr.w	r3, r3, #32
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	2378      	movs	r3, #120	; 0x78
 800cf4c:	4828      	ldr	r0, [pc, #160]	; (800cff0 <_printf_i+0x248>)
 800cf4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf52:	e7e3      	b.n	800cf1c <_printf_i+0x174>
 800cf54:	065e      	lsls	r6, r3, #25
 800cf56:	bf48      	it	mi
 800cf58:	b2ad      	uxthmi	r5, r5
 800cf5a:	e7e6      	b.n	800cf2a <_printf_i+0x182>
 800cf5c:	4616      	mov	r6, r2
 800cf5e:	e7bb      	b.n	800ced8 <_printf_i+0x130>
 800cf60:	680b      	ldr	r3, [r1, #0]
 800cf62:	6826      	ldr	r6, [r4, #0]
 800cf64:	6960      	ldr	r0, [r4, #20]
 800cf66:	1d1d      	adds	r5, r3, #4
 800cf68:	600d      	str	r5, [r1, #0]
 800cf6a:	0635      	lsls	r5, r6, #24
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	d501      	bpl.n	800cf74 <_printf_i+0x1cc>
 800cf70:	6018      	str	r0, [r3, #0]
 800cf72:	e002      	b.n	800cf7a <_printf_i+0x1d2>
 800cf74:	0671      	lsls	r1, r6, #25
 800cf76:	d5fb      	bpl.n	800cf70 <_printf_i+0x1c8>
 800cf78:	8018      	strh	r0, [r3, #0]
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	6123      	str	r3, [r4, #16]
 800cf7e:	4616      	mov	r6, r2
 800cf80:	e7ba      	b.n	800cef8 <_printf_i+0x150>
 800cf82:	680b      	ldr	r3, [r1, #0]
 800cf84:	1d1a      	adds	r2, r3, #4
 800cf86:	600a      	str	r2, [r1, #0]
 800cf88:	681e      	ldr	r6, [r3, #0]
 800cf8a:	6862      	ldr	r2, [r4, #4]
 800cf8c:	2100      	movs	r1, #0
 800cf8e:	4630      	mov	r0, r6
 800cf90:	f7f3 f9ae 	bl	80002f0 <memchr>
 800cf94:	b108      	cbz	r0, 800cf9a <_printf_i+0x1f2>
 800cf96:	1b80      	subs	r0, r0, r6
 800cf98:	6060      	str	r0, [r4, #4]
 800cf9a:	6863      	ldr	r3, [r4, #4]
 800cf9c:	6123      	str	r3, [r4, #16]
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfa4:	e7a8      	b.n	800cef8 <_printf_i+0x150>
 800cfa6:	6923      	ldr	r3, [r4, #16]
 800cfa8:	4632      	mov	r2, r6
 800cfaa:	4649      	mov	r1, r9
 800cfac:	4640      	mov	r0, r8
 800cfae:	47d0      	blx	sl
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	d0ab      	beq.n	800cf0c <_printf_i+0x164>
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	079b      	lsls	r3, r3, #30
 800cfb8:	d413      	bmi.n	800cfe2 <_printf_i+0x23a>
 800cfba:	68e0      	ldr	r0, [r4, #12]
 800cfbc:	9b03      	ldr	r3, [sp, #12]
 800cfbe:	4298      	cmp	r0, r3
 800cfc0:	bfb8      	it	lt
 800cfc2:	4618      	movlt	r0, r3
 800cfc4:	e7a4      	b.n	800cf10 <_printf_i+0x168>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	4632      	mov	r2, r6
 800cfca:	4649      	mov	r1, r9
 800cfcc:	4640      	mov	r0, r8
 800cfce:	47d0      	blx	sl
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	d09b      	beq.n	800cf0c <_printf_i+0x164>
 800cfd4:	3501      	adds	r5, #1
 800cfd6:	68e3      	ldr	r3, [r4, #12]
 800cfd8:	9903      	ldr	r1, [sp, #12]
 800cfda:	1a5b      	subs	r3, r3, r1
 800cfdc:	42ab      	cmp	r3, r5
 800cfde:	dcf2      	bgt.n	800cfc6 <_printf_i+0x21e>
 800cfe0:	e7eb      	b.n	800cfba <_printf_i+0x212>
 800cfe2:	2500      	movs	r5, #0
 800cfe4:	f104 0619 	add.w	r6, r4, #25
 800cfe8:	e7f5      	b.n	800cfd6 <_printf_i+0x22e>
 800cfea:	bf00      	nop
 800cfec:	0800fa1a 	.word	0x0800fa1a
 800cff0:	0800fa2b 	.word	0x0800fa2b

0800cff4 <iprintf>:
 800cff4:	b40f      	push	{r0, r1, r2, r3}
 800cff6:	4b0a      	ldr	r3, [pc, #40]	; (800d020 <iprintf+0x2c>)
 800cff8:	b513      	push	{r0, r1, r4, lr}
 800cffa:	681c      	ldr	r4, [r3, #0]
 800cffc:	b124      	cbz	r4, 800d008 <iprintf+0x14>
 800cffe:	69a3      	ldr	r3, [r4, #24]
 800d000:	b913      	cbnz	r3, 800d008 <iprintf+0x14>
 800d002:	4620      	mov	r0, r4
 800d004:	f001 f86c 	bl	800e0e0 <__sinit>
 800d008:	ab05      	add	r3, sp, #20
 800d00a:	9a04      	ldr	r2, [sp, #16]
 800d00c:	68a1      	ldr	r1, [r4, #8]
 800d00e:	9301      	str	r3, [sp, #4]
 800d010:	4620      	mov	r0, r4
 800d012:	f001 fde7 	bl	800ebe4 <_vfiprintf_r>
 800d016:	b002      	add	sp, #8
 800d018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d01c:	b004      	add	sp, #16
 800d01e:	4770      	bx	lr
 800d020:	24000020 	.word	0x24000020

0800d024 <_puts_r>:
 800d024:	b570      	push	{r4, r5, r6, lr}
 800d026:	460e      	mov	r6, r1
 800d028:	4605      	mov	r5, r0
 800d02a:	b118      	cbz	r0, 800d034 <_puts_r+0x10>
 800d02c:	6983      	ldr	r3, [r0, #24]
 800d02e:	b90b      	cbnz	r3, 800d034 <_puts_r+0x10>
 800d030:	f001 f856 	bl	800e0e0 <__sinit>
 800d034:	69ab      	ldr	r3, [r5, #24]
 800d036:	68ac      	ldr	r4, [r5, #8]
 800d038:	b913      	cbnz	r3, 800d040 <_puts_r+0x1c>
 800d03a:	4628      	mov	r0, r5
 800d03c:	f001 f850 	bl	800e0e0 <__sinit>
 800d040:	4b2c      	ldr	r3, [pc, #176]	; (800d0f4 <_puts_r+0xd0>)
 800d042:	429c      	cmp	r4, r3
 800d044:	d120      	bne.n	800d088 <_puts_r+0x64>
 800d046:	686c      	ldr	r4, [r5, #4]
 800d048:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d04a:	07db      	lsls	r3, r3, #31
 800d04c:	d405      	bmi.n	800d05a <_puts_r+0x36>
 800d04e:	89a3      	ldrh	r3, [r4, #12]
 800d050:	0598      	lsls	r0, r3, #22
 800d052:	d402      	bmi.n	800d05a <_puts_r+0x36>
 800d054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d056:	f001 f8e6 	bl	800e226 <__retarget_lock_acquire_recursive>
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	0719      	lsls	r1, r3, #28
 800d05e:	d51d      	bpl.n	800d09c <_puts_r+0x78>
 800d060:	6923      	ldr	r3, [r4, #16]
 800d062:	b1db      	cbz	r3, 800d09c <_puts_r+0x78>
 800d064:	3e01      	subs	r6, #1
 800d066:	68a3      	ldr	r3, [r4, #8]
 800d068:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d06c:	3b01      	subs	r3, #1
 800d06e:	60a3      	str	r3, [r4, #8]
 800d070:	bb39      	cbnz	r1, 800d0c2 <_puts_r+0x9e>
 800d072:	2b00      	cmp	r3, #0
 800d074:	da38      	bge.n	800d0e8 <_puts_r+0xc4>
 800d076:	4622      	mov	r2, r4
 800d078:	210a      	movs	r1, #10
 800d07a:	4628      	mov	r0, r5
 800d07c:	f000 f848 	bl	800d110 <__swbuf_r>
 800d080:	3001      	adds	r0, #1
 800d082:	d011      	beq.n	800d0a8 <_puts_r+0x84>
 800d084:	250a      	movs	r5, #10
 800d086:	e011      	b.n	800d0ac <_puts_r+0x88>
 800d088:	4b1b      	ldr	r3, [pc, #108]	; (800d0f8 <_puts_r+0xd4>)
 800d08a:	429c      	cmp	r4, r3
 800d08c:	d101      	bne.n	800d092 <_puts_r+0x6e>
 800d08e:	68ac      	ldr	r4, [r5, #8]
 800d090:	e7da      	b.n	800d048 <_puts_r+0x24>
 800d092:	4b1a      	ldr	r3, [pc, #104]	; (800d0fc <_puts_r+0xd8>)
 800d094:	429c      	cmp	r4, r3
 800d096:	bf08      	it	eq
 800d098:	68ec      	ldreq	r4, [r5, #12]
 800d09a:	e7d5      	b.n	800d048 <_puts_r+0x24>
 800d09c:	4621      	mov	r1, r4
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f000 f888 	bl	800d1b4 <__swsetup_r>
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d0dd      	beq.n	800d064 <_puts_r+0x40>
 800d0a8:	f04f 35ff 	mov.w	r5, #4294967295
 800d0ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0ae:	07da      	lsls	r2, r3, #31
 800d0b0:	d405      	bmi.n	800d0be <_puts_r+0x9a>
 800d0b2:	89a3      	ldrh	r3, [r4, #12]
 800d0b4:	059b      	lsls	r3, r3, #22
 800d0b6:	d402      	bmi.n	800d0be <_puts_r+0x9a>
 800d0b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0ba:	f001 f8b5 	bl	800e228 <__retarget_lock_release_recursive>
 800d0be:	4628      	mov	r0, r5
 800d0c0:	bd70      	pop	{r4, r5, r6, pc}
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	da04      	bge.n	800d0d0 <_puts_r+0xac>
 800d0c6:	69a2      	ldr	r2, [r4, #24]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	dc06      	bgt.n	800d0da <_puts_r+0xb6>
 800d0cc:	290a      	cmp	r1, #10
 800d0ce:	d004      	beq.n	800d0da <_puts_r+0xb6>
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	6022      	str	r2, [r4, #0]
 800d0d6:	7019      	strb	r1, [r3, #0]
 800d0d8:	e7c5      	b.n	800d066 <_puts_r+0x42>
 800d0da:	4622      	mov	r2, r4
 800d0dc:	4628      	mov	r0, r5
 800d0de:	f000 f817 	bl	800d110 <__swbuf_r>
 800d0e2:	3001      	adds	r0, #1
 800d0e4:	d1bf      	bne.n	800d066 <_puts_r+0x42>
 800d0e6:	e7df      	b.n	800d0a8 <_puts_r+0x84>
 800d0e8:	6823      	ldr	r3, [r4, #0]
 800d0ea:	250a      	movs	r5, #10
 800d0ec:	1c5a      	adds	r2, r3, #1
 800d0ee:	6022      	str	r2, [r4, #0]
 800d0f0:	701d      	strb	r5, [r3, #0]
 800d0f2:	e7db      	b.n	800d0ac <_puts_r+0x88>
 800d0f4:	0800faf0 	.word	0x0800faf0
 800d0f8:	0800fb10 	.word	0x0800fb10
 800d0fc:	0800fad0 	.word	0x0800fad0

0800d100 <puts>:
 800d100:	4b02      	ldr	r3, [pc, #8]	; (800d10c <puts+0xc>)
 800d102:	4601      	mov	r1, r0
 800d104:	6818      	ldr	r0, [r3, #0]
 800d106:	f7ff bf8d 	b.w	800d024 <_puts_r>
 800d10a:	bf00      	nop
 800d10c:	24000020 	.word	0x24000020

0800d110 <__swbuf_r>:
 800d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d112:	460e      	mov	r6, r1
 800d114:	4614      	mov	r4, r2
 800d116:	4605      	mov	r5, r0
 800d118:	b118      	cbz	r0, 800d122 <__swbuf_r+0x12>
 800d11a:	6983      	ldr	r3, [r0, #24]
 800d11c:	b90b      	cbnz	r3, 800d122 <__swbuf_r+0x12>
 800d11e:	f000 ffdf 	bl	800e0e0 <__sinit>
 800d122:	4b21      	ldr	r3, [pc, #132]	; (800d1a8 <__swbuf_r+0x98>)
 800d124:	429c      	cmp	r4, r3
 800d126:	d12b      	bne.n	800d180 <__swbuf_r+0x70>
 800d128:	686c      	ldr	r4, [r5, #4]
 800d12a:	69a3      	ldr	r3, [r4, #24]
 800d12c:	60a3      	str	r3, [r4, #8]
 800d12e:	89a3      	ldrh	r3, [r4, #12]
 800d130:	071a      	lsls	r2, r3, #28
 800d132:	d52f      	bpl.n	800d194 <__swbuf_r+0x84>
 800d134:	6923      	ldr	r3, [r4, #16]
 800d136:	b36b      	cbz	r3, 800d194 <__swbuf_r+0x84>
 800d138:	6923      	ldr	r3, [r4, #16]
 800d13a:	6820      	ldr	r0, [r4, #0]
 800d13c:	1ac0      	subs	r0, r0, r3
 800d13e:	6963      	ldr	r3, [r4, #20]
 800d140:	b2f6      	uxtb	r6, r6
 800d142:	4283      	cmp	r3, r0
 800d144:	4637      	mov	r7, r6
 800d146:	dc04      	bgt.n	800d152 <__swbuf_r+0x42>
 800d148:	4621      	mov	r1, r4
 800d14a:	4628      	mov	r0, r5
 800d14c:	f000 ff34 	bl	800dfb8 <_fflush_r>
 800d150:	bb30      	cbnz	r0, 800d1a0 <__swbuf_r+0x90>
 800d152:	68a3      	ldr	r3, [r4, #8]
 800d154:	3b01      	subs	r3, #1
 800d156:	60a3      	str	r3, [r4, #8]
 800d158:	6823      	ldr	r3, [r4, #0]
 800d15a:	1c5a      	adds	r2, r3, #1
 800d15c:	6022      	str	r2, [r4, #0]
 800d15e:	701e      	strb	r6, [r3, #0]
 800d160:	6963      	ldr	r3, [r4, #20]
 800d162:	3001      	adds	r0, #1
 800d164:	4283      	cmp	r3, r0
 800d166:	d004      	beq.n	800d172 <__swbuf_r+0x62>
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	07db      	lsls	r3, r3, #31
 800d16c:	d506      	bpl.n	800d17c <__swbuf_r+0x6c>
 800d16e:	2e0a      	cmp	r6, #10
 800d170:	d104      	bne.n	800d17c <__swbuf_r+0x6c>
 800d172:	4621      	mov	r1, r4
 800d174:	4628      	mov	r0, r5
 800d176:	f000 ff1f 	bl	800dfb8 <_fflush_r>
 800d17a:	b988      	cbnz	r0, 800d1a0 <__swbuf_r+0x90>
 800d17c:	4638      	mov	r0, r7
 800d17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d180:	4b0a      	ldr	r3, [pc, #40]	; (800d1ac <__swbuf_r+0x9c>)
 800d182:	429c      	cmp	r4, r3
 800d184:	d101      	bne.n	800d18a <__swbuf_r+0x7a>
 800d186:	68ac      	ldr	r4, [r5, #8]
 800d188:	e7cf      	b.n	800d12a <__swbuf_r+0x1a>
 800d18a:	4b09      	ldr	r3, [pc, #36]	; (800d1b0 <__swbuf_r+0xa0>)
 800d18c:	429c      	cmp	r4, r3
 800d18e:	bf08      	it	eq
 800d190:	68ec      	ldreq	r4, [r5, #12]
 800d192:	e7ca      	b.n	800d12a <__swbuf_r+0x1a>
 800d194:	4621      	mov	r1, r4
 800d196:	4628      	mov	r0, r5
 800d198:	f000 f80c 	bl	800d1b4 <__swsetup_r>
 800d19c:	2800      	cmp	r0, #0
 800d19e:	d0cb      	beq.n	800d138 <__swbuf_r+0x28>
 800d1a0:	f04f 37ff 	mov.w	r7, #4294967295
 800d1a4:	e7ea      	b.n	800d17c <__swbuf_r+0x6c>
 800d1a6:	bf00      	nop
 800d1a8:	0800faf0 	.word	0x0800faf0
 800d1ac:	0800fb10 	.word	0x0800fb10
 800d1b0:	0800fad0 	.word	0x0800fad0

0800d1b4 <__swsetup_r>:
 800d1b4:	4b32      	ldr	r3, [pc, #200]	; (800d280 <__swsetup_r+0xcc>)
 800d1b6:	b570      	push	{r4, r5, r6, lr}
 800d1b8:	681d      	ldr	r5, [r3, #0]
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	460c      	mov	r4, r1
 800d1be:	b125      	cbz	r5, 800d1ca <__swsetup_r+0x16>
 800d1c0:	69ab      	ldr	r3, [r5, #24]
 800d1c2:	b913      	cbnz	r3, 800d1ca <__swsetup_r+0x16>
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	f000 ff8b 	bl	800e0e0 <__sinit>
 800d1ca:	4b2e      	ldr	r3, [pc, #184]	; (800d284 <__swsetup_r+0xd0>)
 800d1cc:	429c      	cmp	r4, r3
 800d1ce:	d10f      	bne.n	800d1f0 <__swsetup_r+0x3c>
 800d1d0:	686c      	ldr	r4, [r5, #4]
 800d1d2:	89a3      	ldrh	r3, [r4, #12]
 800d1d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1d8:	0719      	lsls	r1, r3, #28
 800d1da:	d42c      	bmi.n	800d236 <__swsetup_r+0x82>
 800d1dc:	06dd      	lsls	r5, r3, #27
 800d1de:	d411      	bmi.n	800d204 <__swsetup_r+0x50>
 800d1e0:	2309      	movs	r3, #9
 800d1e2:	6033      	str	r3, [r6, #0]
 800d1e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1e8:	81a3      	strh	r3, [r4, #12]
 800d1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ee:	e03e      	b.n	800d26e <__swsetup_r+0xba>
 800d1f0:	4b25      	ldr	r3, [pc, #148]	; (800d288 <__swsetup_r+0xd4>)
 800d1f2:	429c      	cmp	r4, r3
 800d1f4:	d101      	bne.n	800d1fa <__swsetup_r+0x46>
 800d1f6:	68ac      	ldr	r4, [r5, #8]
 800d1f8:	e7eb      	b.n	800d1d2 <__swsetup_r+0x1e>
 800d1fa:	4b24      	ldr	r3, [pc, #144]	; (800d28c <__swsetup_r+0xd8>)
 800d1fc:	429c      	cmp	r4, r3
 800d1fe:	bf08      	it	eq
 800d200:	68ec      	ldreq	r4, [r5, #12]
 800d202:	e7e6      	b.n	800d1d2 <__swsetup_r+0x1e>
 800d204:	0758      	lsls	r0, r3, #29
 800d206:	d512      	bpl.n	800d22e <__swsetup_r+0x7a>
 800d208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d20a:	b141      	cbz	r1, 800d21e <__swsetup_r+0x6a>
 800d20c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d210:	4299      	cmp	r1, r3
 800d212:	d002      	beq.n	800d21a <__swsetup_r+0x66>
 800d214:	4630      	mov	r0, r6
 800d216:	f001 fc11 	bl	800ea3c <_free_r>
 800d21a:	2300      	movs	r3, #0
 800d21c:	6363      	str	r3, [r4, #52]	; 0x34
 800d21e:	89a3      	ldrh	r3, [r4, #12]
 800d220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d224:	81a3      	strh	r3, [r4, #12]
 800d226:	2300      	movs	r3, #0
 800d228:	6063      	str	r3, [r4, #4]
 800d22a:	6923      	ldr	r3, [r4, #16]
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	89a3      	ldrh	r3, [r4, #12]
 800d230:	f043 0308 	orr.w	r3, r3, #8
 800d234:	81a3      	strh	r3, [r4, #12]
 800d236:	6923      	ldr	r3, [r4, #16]
 800d238:	b94b      	cbnz	r3, 800d24e <__swsetup_r+0x9a>
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d244:	d003      	beq.n	800d24e <__swsetup_r+0x9a>
 800d246:	4621      	mov	r1, r4
 800d248:	4630      	mov	r0, r6
 800d24a:	f001 f813 	bl	800e274 <__smakebuf_r>
 800d24e:	89a0      	ldrh	r0, [r4, #12]
 800d250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d254:	f010 0301 	ands.w	r3, r0, #1
 800d258:	d00a      	beq.n	800d270 <__swsetup_r+0xbc>
 800d25a:	2300      	movs	r3, #0
 800d25c:	60a3      	str	r3, [r4, #8]
 800d25e:	6963      	ldr	r3, [r4, #20]
 800d260:	425b      	negs	r3, r3
 800d262:	61a3      	str	r3, [r4, #24]
 800d264:	6923      	ldr	r3, [r4, #16]
 800d266:	b943      	cbnz	r3, 800d27a <__swsetup_r+0xc6>
 800d268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d26c:	d1ba      	bne.n	800d1e4 <__swsetup_r+0x30>
 800d26e:	bd70      	pop	{r4, r5, r6, pc}
 800d270:	0781      	lsls	r1, r0, #30
 800d272:	bf58      	it	pl
 800d274:	6963      	ldrpl	r3, [r4, #20]
 800d276:	60a3      	str	r3, [r4, #8]
 800d278:	e7f4      	b.n	800d264 <__swsetup_r+0xb0>
 800d27a:	2000      	movs	r0, #0
 800d27c:	e7f7      	b.n	800d26e <__swsetup_r+0xba>
 800d27e:	bf00      	nop
 800d280:	24000020 	.word	0x24000020
 800d284:	0800faf0 	.word	0x0800faf0
 800d288:	0800fb10 	.word	0x0800fb10
 800d28c:	0800fad0 	.word	0x0800fad0

0800d290 <quorem>:
 800d290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	6903      	ldr	r3, [r0, #16]
 800d296:	690c      	ldr	r4, [r1, #16]
 800d298:	42a3      	cmp	r3, r4
 800d29a:	4607      	mov	r7, r0
 800d29c:	f2c0 8081 	blt.w	800d3a2 <quorem+0x112>
 800d2a0:	3c01      	subs	r4, #1
 800d2a2:	f101 0814 	add.w	r8, r1, #20
 800d2a6:	f100 0514 	add.w	r5, r0, #20
 800d2aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2ae:	9301      	str	r3, [sp, #4]
 800d2b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2c8:	d331      	bcc.n	800d32e <quorem+0x9e>
 800d2ca:	f04f 0e00 	mov.w	lr, #0
 800d2ce:	4640      	mov	r0, r8
 800d2d0:	46ac      	mov	ip, r5
 800d2d2:	46f2      	mov	sl, lr
 800d2d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2d8:	b293      	uxth	r3, r2
 800d2da:	fb06 e303 	mla	r3, r6, r3, lr
 800d2de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	ebaa 0303 	sub.w	r3, sl, r3
 800d2e8:	0c12      	lsrs	r2, r2, #16
 800d2ea:	f8dc a000 	ldr.w	sl, [ip]
 800d2ee:	fb06 e202 	mla	r2, r6, r2, lr
 800d2f2:	fa13 f38a 	uxtah	r3, r3, sl
 800d2f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2fa:	fa1f fa82 	uxth.w	sl, r2
 800d2fe:	f8dc 2000 	ldr.w	r2, [ip]
 800d302:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d306:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d310:	4581      	cmp	r9, r0
 800d312:	f84c 3b04 	str.w	r3, [ip], #4
 800d316:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d31a:	d2db      	bcs.n	800d2d4 <quorem+0x44>
 800d31c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d320:	b92b      	cbnz	r3, 800d32e <quorem+0x9e>
 800d322:	9b01      	ldr	r3, [sp, #4]
 800d324:	3b04      	subs	r3, #4
 800d326:	429d      	cmp	r5, r3
 800d328:	461a      	mov	r2, r3
 800d32a:	d32e      	bcc.n	800d38a <quorem+0xfa>
 800d32c:	613c      	str	r4, [r7, #16]
 800d32e:	4638      	mov	r0, r7
 800d330:	f001 fa74 	bl	800e81c <__mcmp>
 800d334:	2800      	cmp	r0, #0
 800d336:	db24      	blt.n	800d382 <quorem+0xf2>
 800d338:	3601      	adds	r6, #1
 800d33a:	4628      	mov	r0, r5
 800d33c:	f04f 0c00 	mov.w	ip, #0
 800d340:	f858 2b04 	ldr.w	r2, [r8], #4
 800d344:	f8d0 e000 	ldr.w	lr, [r0]
 800d348:	b293      	uxth	r3, r2
 800d34a:	ebac 0303 	sub.w	r3, ip, r3
 800d34e:	0c12      	lsrs	r2, r2, #16
 800d350:	fa13 f38e 	uxtah	r3, r3, lr
 800d354:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d358:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d362:	45c1      	cmp	r9, r8
 800d364:	f840 3b04 	str.w	r3, [r0], #4
 800d368:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d36c:	d2e8      	bcs.n	800d340 <quorem+0xb0>
 800d36e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d372:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d376:	b922      	cbnz	r2, 800d382 <quorem+0xf2>
 800d378:	3b04      	subs	r3, #4
 800d37a:	429d      	cmp	r5, r3
 800d37c:	461a      	mov	r2, r3
 800d37e:	d30a      	bcc.n	800d396 <quorem+0x106>
 800d380:	613c      	str	r4, [r7, #16]
 800d382:	4630      	mov	r0, r6
 800d384:	b003      	add	sp, #12
 800d386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d38a:	6812      	ldr	r2, [r2, #0]
 800d38c:	3b04      	subs	r3, #4
 800d38e:	2a00      	cmp	r2, #0
 800d390:	d1cc      	bne.n	800d32c <quorem+0x9c>
 800d392:	3c01      	subs	r4, #1
 800d394:	e7c7      	b.n	800d326 <quorem+0x96>
 800d396:	6812      	ldr	r2, [r2, #0]
 800d398:	3b04      	subs	r3, #4
 800d39a:	2a00      	cmp	r2, #0
 800d39c:	d1f0      	bne.n	800d380 <quorem+0xf0>
 800d39e:	3c01      	subs	r4, #1
 800d3a0:	e7eb      	b.n	800d37a <quorem+0xea>
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	e7ee      	b.n	800d384 <quorem+0xf4>
	...

0800d3a8 <_dtoa_r>:
 800d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	ec59 8b10 	vmov	r8, r9, d0
 800d3b0:	b095      	sub	sp, #84	; 0x54
 800d3b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d3b4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d3b6:	9107      	str	r1, [sp, #28]
 800d3b8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d3bc:	4606      	mov	r6, r0
 800d3be:	9209      	str	r2, [sp, #36]	; 0x24
 800d3c0:	9310      	str	r3, [sp, #64]	; 0x40
 800d3c2:	b975      	cbnz	r5, 800d3e2 <_dtoa_r+0x3a>
 800d3c4:	2010      	movs	r0, #16
 800d3c6:	f000 ff95 	bl	800e2f4 <malloc>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	6270      	str	r0, [r6, #36]	; 0x24
 800d3ce:	b920      	cbnz	r0, 800d3da <_dtoa_r+0x32>
 800d3d0:	4bab      	ldr	r3, [pc, #684]	; (800d680 <_dtoa_r+0x2d8>)
 800d3d2:	21ea      	movs	r1, #234	; 0xea
 800d3d4:	48ab      	ldr	r0, [pc, #684]	; (800d684 <_dtoa_r+0x2dc>)
 800d3d6:	f001 fd9b 	bl	800ef10 <__assert_func>
 800d3da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3de:	6005      	str	r5, [r0, #0]
 800d3e0:	60c5      	str	r5, [r0, #12]
 800d3e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d3e4:	6819      	ldr	r1, [r3, #0]
 800d3e6:	b151      	cbz	r1, 800d3fe <_dtoa_r+0x56>
 800d3e8:	685a      	ldr	r2, [r3, #4]
 800d3ea:	604a      	str	r2, [r1, #4]
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	4093      	lsls	r3, r2
 800d3f0:	608b      	str	r3, [r1, #8]
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f000 ffd4 	bl	800e3a0 <_Bfree>
 800d3f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	f1b9 0300 	subs.w	r3, r9, #0
 800d402:	bfbb      	ittet	lt
 800d404:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d408:	9303      	strlt	r3, [sp, #12]
 800d40a:	2300      	movge	r3, #0
 800d40c:	2201      	movlt	r2, #1
 800d40e:	bfac      	ite	ge
 800d410:	6023      	strge	r3, [r4, #0]
 800d412:	6022      	strlt	r2, [r4, #0]
 800d414:	4b9c      	ldr	r3, [pc, #624]	; (800d688 <_dtoa_r+0x2e0>)
 800d416:	9c03      	ldr	r4, [sp, #12]
 800d418:	43a3      	bics	r3, r4
 800d41a:	d11a      	bne.n	800d452 <_dtoa_r+0xaa>
 800d41c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d41e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d422:	6013      	str	r3, [r2, #0]
 800d424:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d428:	ea53 0308 	orrs.w	r3, r3, r8
 800d42c:	f000 8512 	beq.w	800de54 <_dtoa_r+0xaac>
 800d430:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d432:	b953      	cbnz	r3, 800d44a <_dtoa_r+0xa2>
 800d434:	4b95      	ldr	r3, [pc, #596]	; (800d68c <_dtoa_r+0x2e4>)
 800d436:	e01f      	b.n	800d478 <_dtoa_r+0xd0>
 800d438:	4b95      	ldr	r3, [pc, #596]	; (800d690 <_dtoa_r+0x2e8>)
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	3308      	adds	r3, #8
 800d43e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d440:	6013      	str	r3, [r2, #0]
 800d442:	9800      	ldr	r0, [sp, #0]
 800d444:	b015      	add	sp, #84	; 0x54
 800d446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44a:	4b90      	ldr	r3, [pc, #576]	; (800d68c <_dtoa_r+0x2e4>)
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	3303      	adds	r3, #3
 800d450:	e7f5      	b.n	800d43e <_dtoa_r+0x96>
 800d452:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d456:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d45e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d462:	d10b      	bne.n	800d47c <_dtoa_r+0xd4>
 800d464:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d466:	2301      	movs	r3, #1
 800d468:	6013      	str	r3, [r2, #0]
 800d46a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 84ee 	beq.w	800de4e <_dtoa_r+0xaa6>
 800d472:	4888      	ldr	r0, [pc, #544]	; (800d694 <_dtoa_r+0x2ec>)
 800d474:	6018      	str	r0, [r3, #0]
 800d476:	1e43      	subs	r3, r0, #1
 800d478:	9300      	str	r3, [sp, #0]
 800d47a:	e7e2      	b.n	800d442 <_dtoa_r+0x9a>
 800d47c:	a913      	add	r1, sp, #76	; 0x4c
 800d47e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d482:	aa12      	add	r2, sp, #72	; 0x48
 800d484:	4630      	mov	r0, r6
 800d486:	f001 fa6d 	bl	800e964 <__d2b>
 800d48a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d48e:	4605      	mov	r5, r0
 800d490:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d492:	2900      	cmp	r1, #0
 800d494:	d047      	beq.n	800d526 <_dtoa_r+0x17e>
 800d496:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d498:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d49c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d4a0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d4a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d4a8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d4ac:	2400      	movs	r4, #0
 800d4ae:	ec43 2b16 	vmov	d6, r2, r3
 800d4b2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d4b6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d668 <_dtoa_r+0x2c0>
 800d4ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d4be:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d670 <_dtoa_r+0x2c8>
 800d4c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d4c6:	eeb0 7b46 	vmov.f64	d7, d6
 800d4ca:	ee06 1a90 	vmov	s13, r1
 800d4ce:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d4d2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d678 <_dtoa_r+0x2d0>
 800d4d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d4da:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d4de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4e6:	ee16 ba90 	vmov	fp, s13
 800d4ea:	9411      	str	r4, [sp, #68]	; 0x44
 800d4ec:	d508      	bpl.n	800d500 <_dtoa_r+0x158>
 800d4ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d4f2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4fa:	bf18      	it	ne
 800d4fc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d500:	f1bb 0f16 	cmp.w	fp, #22
 800d504:	d832      	bhi.n	800d56c <_dtoa_r+0x1c4>
 800d506:	4b64      	ldr	r3, [pc, #400]	; (800d698 <_dtoa_r+0x2f0>)
 800d508:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d50c:	ed93 7b00 	vldr	d7, [r3]
 800d510:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d514:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51c:	d501      	bpl.n	800d522 <_dtoa_r+0x17a>
 800d51e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d522:	2300      	movs	r3, #0
 800d524:	e023      	b.n	800d56e <_dtoa_r+0x1c6>
 800d526:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d528:	4401      	add	r1, r0
 800d52a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d52e:	2b20      	cmp	r3, #32
 800d530:	bfc3      	ittte	gt
 800d532:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d536:	fa04 f303 	lslgt.w	r3, r4, r3
 800d53a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d53e:	f1c3 0320 	rsble	r3, r3, #32
 800d542:	bfc6      	itte	gt
 800d544:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d548:	ea43 0308 	orrgt.w	r3, r3, r8
 800d54c:	fa08 f303 	lslle.w	r3, r8, r3
 800d550:	ee07 3a90 	vmov	s15, r3
 800d554:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d558:	3901      	subs	r1, #1
 800d55a:	ed8d 7b00 	vstr	d7, [sp]
 800d55e:	9c01      	ldr	r4, [sp, #4]
 800d560:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d564:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d568:	2401      	movs	r4, #1
 800d56a:	e7a0      	b.n	800d4ae <_dtoa_r+0x106>
 800d56c:	2301      	movs	r3, #1
 800d56e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d570:	1a43      	subs	r3, r0, r1
 800d572:	1e5a      	subs	r2, r3, #1
 800d574:	bf45      	ittet	mi
 800d576:	f1c3 0301 	rsbmi	r3, r3, #1
 800d57a:	9305      	strmi	r3, [sp, #20]
 800d57c:	2300      	movpl	r3, #0
 800d57e:	2300      	movmi	r3, #0
 800d580:	9206      	str	r2, [sp, #24]
 800d582:	bf54      	ite	pl
 800d584:	9305      	strpl	r3, [sp, #20]
 800d586:	9306      	strmi	r3, [sp, #24]
 800d588:	f1bb 0f00 	cmp.w	fp, #0
 800d58c:	db18      	blt.n	800d5c0 <_dtoa_r+0x218>
 800d58e:	9b06      	ldr	r3, [sp, #24]
 800d590:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d594:	445b      	add	r3, fp
 800d596:	9306      	str	r3, [sp, #24]
 800d598:	2300      	movs	r3, #0
 800d59a:	9a07      	ldr	r2, [sp, #28]
 800d59c:	2a09      	cmp	r2, #9
 800d59e:	d849      	bhi.n	800d634 <_dtoa_r+0x28c>
 800d5a0:	2a05      	cmp	r2, #5
 800d5a2:	bfc4      	itt	gt
 800d5a4:	3a04      	subgt	r2, #4
 800d5a6:	9207      	strgt	r2, [sp, #28]
 800d5a8:	9a07      	ldr	r2, [sp, #28]
 800d5aa:	f1a2 0202 	sub.w	r2, r2, #2
 800d5ae:	bfcc      	ite	gt
 800d5b0:	2400      	movgt	r4, #0
 800d5b2:	2401      	movle	r4, #1
 800d5b4:	2a03      	cmp	r2, #3
 800d5b6:	d848      	bhi.n	800d64a <_dtoa_r+0x2a2>
 800d5b8:	e8df f002 	tbb	[pc, r2]
 800d5bc:	3a2c2e0b 	.word	0x3a2c2e0b
 800d5c0:	9b05      	ldr	r3, [sp, #20]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	eba3 030b 	sub.w	r3, r3, fp
 800d5c8:	9305      	str	r3, [sp, #20]
 800d5ca:	920e      	str	r2, [sp, #56]	; 0x38
 800d5cc:	f1cb 0300 	rsb	r3, fp, #0
 800d5d0:	e7e3      	b.n	800d59a <_dtoa_r+0x1f2>
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	9208      	str	r2, [sp, #32]
 800d5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5d8:	2a00      	cmp	r2, #0
 800d5da:	dc39      	bgt.n	800d650 <_dtoa_r+0x2a8>
 800d5dc:	f04f 0a01 	mov.w	sl, #1
 800d5e0:	46d1      	mov	r9, sl
 800d5e2:	4652      	mov	r2, sl
 800d5e4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d5e8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d5ea:	2100      	movs	r1, #0
 800d5ec:	6079      	str	r1, [r7, #4]
 800d5ee:	2004      	movs	r0, #4
 800d5f0:	f100 0c14 	add.w	ip, r0, #20
 800d5f4:	4594      	cmp	ip, r2
 800d5f6:	6879      	ldr	r1, [r7, #4]
 800d5f8:	d92f      	bls.n	800d65a <_dtoa_r+0x2b2>
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	930c      	str	r3, [sp, #48]	; 0x30
 800d5fe:	f000 fe8f 	bl	800e320 <_Balloc>
 800d602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d604:	9000      	str	r0, [sp, #0]
 800d606:	4602      	mov	r2, r0
 800d608:	2800      	cmp	r0, #0
 800d60a:	d149      	bne.n	800d6a0 <_dtoa_r+0x2f8>
 800d60c:	4b23      	ldr	r3, [pc, #140]	; (800d69c <_dtoa_r+0x2f4>)
 800d60e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d612:	e6df      	b.n	800d3d4 <_dtoa_r+0x2c>
 800d614:	2201      	movs	r2, #1
 800d616:	e7dd      	b.n	800d5d4 <_dtoa_r+0x22c>
 800d618:	2200      	movs	r2, #0
 800d61a:	9208      	str	r2, [sp, #32]
 800d61c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d61e:	eb0b 0a02 	add.w	sl, fp, r2
 800d622:	f10a 0901 	add.w	r9, sl, #1
 800d626:	464a      	mov	r2, r9
 800d628:	2a01      	cmp	r2, #1
 800d62a:	bfb8      	it	lt
 800d62c:	2201      	movlt	r2, #1
 800d62e:	e7db      	b.n	800d5e8 <_dtoa_r+0x240>
 800d630:	2201      	movs	r2, #1
 800d632:	e7f2      	b.n	800d61a <_dtoa_r+0x272>
 800d634:	2401      	movs	r4, #1
 800d636:	2200      	movs	r2, #0
 800d638:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d63c:	f04f 3aff 	mov.w	sl, #4294967295
 800d640:	2100      	movs	r1, #0
 800d642:	46d1      	mov	r9, sl
 800d644:	2212      	movs	r2, #18
 800d646:	9109      	str	r1, [sp, #36]	; 0x24
 800d648:	e7ce      	b.n	800d5e8 <_dtoa_r+0x240>
 800d64a:	2201      	movs	r2, #1
 800d64c:	9208      	str	r2, [sp, #32]
 800d64e:	e7f5      	b.n	800d63c <_dtoa_r+0x294>
 800d650:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d654:	46d1      	mov	r9, sl
 800d656:	4652      	mov	r2, sl
 800d658:	e7c6      	b.n	800d5e8 <_dtoa_r+0x240>
 800d65a:	3101      	adds	r1, #1
 800d65c:	6079      	str	r1, [r7, #4]
 800d65e:	0040      	lsls	r0, r0, #1
 800d660:	e7c6      	b.n	800d5f0 <_dtoa_r+0x248>
 800d662:	bf00      	nop
 800d664:	f3af 8000 	nop.w
 800d668:	636f4361 	.word	0x636f4361
 800d66c:	3fd287a7 	.word	0x3fd287a7
 800d670:	8b60c8b3 	.word	0x8b60c8b3
 800d674:	3fc68a28 	.word	0x3fc68a28
 800d678:	509f79fb 	.word	0x509f79fb
 800d67c:	3fd34413 	.word	0x3fd34413
 800d680:	0800fa49 	.word	0x0800fa49
 800d684:	0800fa60 	.word	0x0800fa60
 800d688:	7ff00000 	.word	0x7ff00000
 800d68c:	0800fa45 	.word	0x0800fa45
 800d690:	0800fa3c 	.word	0x0800fa3c
 800d694:	0800fa19 	.word	0x0800fa19
 800d698:	0800fbb8 	.word	0x0800fbb8
 800d69c:	0800fabf 	.word	0x0800fabf
 800d6a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d6a2:	9900      	ldr	r1, [sp, #0]
 800d6a4:	6011      	str	r1, [r2, #0]
 800d6a6:	f1b9 0f0e 	cmp.w	r9, #14
 800d6aa:	d872      	bhi.n	800d792 <_dtoa_r+0x3ea>
 800d6ac:	2c00      	cmp	r4, #0
 800d6ae:	d070      	beq.n	800d792 <_dtoa_r+0x3ea>
 800d6b0:	f1bb 0f00 	cmp.w	fp, #0
 800d6b4:	f340 80a6 	ble.w	800d804 <_dtoa_r+0x45c>
 800d6b8:	49ca      	ldr	r1, [pc, #808]	; (800d9e4 <_dtoa_r+0x63c>)
 800d6ba:	f00b 020f 	and.w	r2, fp, #15
 800d6be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d6c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d6c6:	ed92 7b00 	vldr	d7, [r2]
 800d6ca:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d6ce:	f000 808d 	beq.w	800d7ec <_dtoa_r+0x444>
 800d6d2:	4ac5      	ldr	r2, [pc, #788]	; (800d9e8 <_dtoa_r+0x640>)
 800d6d4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d6d8:	ed92 6b08 	vldr	d6, [r2, #32]
 800d6dc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d6e0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d6e4:	f001 010f 	and.w	r1, r1, #15
 800d6e8:	2203      	movs	r2, #3
 800d6ea:	48bf      	ldr	r0, [pc, #764]	; (800d9e8 <_dtoa_r+0x640>)
 800d6ec:	2900      	cmp	r1, #0
 800d6ee:	d17f      	bne.n	800d7f0 <_dtoa_r+0x448>
 800d6f0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d6f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d6f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d6fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d6fe:	2900      	cmp	r1, #0
 800d700:	f000 80b2 	beq.w	800d868 <_dtoa_r+0x4c0>
 800d704:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d708:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d70c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d714:	f140 80a8 	bpl.w	800d868 <_dtoa_r+0x4c0>
 800d718:	f1b9 0f00 	cmp.w	r9, #0
 800d71c:	f000 80a4 	beq.w	800d868 <_dtoa_r+0x4c0>
 800d720:	f1ba 0f00 	cmp.w	sl, #0
 800d724:	dd31      	ble.n	800d78a <_dtoa_r+0x3e2>
 800d726:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d72a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d72e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d732:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d736:	3201      	adds	r2, #1
 800d738:	4650      	mov	r0, sl
 800d73a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d73e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d742:	ee07 2a90 	vmov	s15, r2
 800d746:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d74a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d74e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d752:	9c03      	ldr	r4, [sp, #12]
 800d754:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d758:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d75c:	2800      	cmp	r0, #0
 800d75e:	f040 8086 	bne.w	800d86e <_dtoa_r+0x4c6>
 800d762:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d766:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d76a:	ec42 1b17 	vmov	d7, r1, r2
 800d76e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d776:	f300 8272 	bgt.w	800dc5e <_dtoa_r+0x8b6>
 800d77a:	eeb1 7b47 	vneg.f64	d7, d7
 800d77e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d786:	f100 8267 	bmi.w	800dc58 <_dtoa_r+0x8b0>
 800d78a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d78e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d792:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d794:	2a00      	cmp	r2, #0
 800d796:	f2c0 8129 	blt.w	800d9ec <_dtoa_r+0x644>
 800d79a:	f1bb 0f0e 	cmp.w	fp, #14
 800d79e:	f300 8125 	bgt.w	800d9ec <_dtoa_r+0x644>
 800d7a2:	4b90      	ldr	r3, [pc, #576]	; (800d9e4 <_dtoa_r+0x63c>)
 800d7a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d7a8:	ed93 6b00 	vldr	d6, [r3]
 800d7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f280 80c3 	bge.w	800d93a <_dtoa_r+0x592>
 800d7b4:	f1b9 0f00 	cmp.w	r9, #0
 800d7b8:	f300 80bf 	bgt.w	800d93a <_dtoa_r+0x592>
 800d7bc:	f040 824c 	bne.w	800dc58 <_dtoa_r+0x8b0>
 800d7c0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d7c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d7c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d4:	464c      	mov	r4, r9
 800d7d6:	464f      	mov	r7, r9
 800d7d8:	f280 8222 	bge.w	800dc20 <_dtoa_r+0x878>
 800d7dc:	f8dd 8000 	ldr.w	r8, [sp]
 800d7e0:	2331      	movs	r3, #49	; 0x31
 800d7e2:	f808 3b01 	strb.w	r3, [r8], #1
 800d7e6:	f10b 0b01 	add.w	fp, fp, #1
 800d7ea:	e21e      	b.n	800dc2a <_dtoa_r+0x882>
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	e77c      	b.n	800d6ea <_dtoa_r+0x342>
 800d7f0:	07cc      	lsls	r4, r1, #31
 800d7f2:	d504      	bpl.n	800d7fe <_dtoa_r+0x456>
 800d7f4:	ed90 6b00 	vldr	d6, [r0]
 800d7f8:	3201      	adds	r2, #1
 800d7fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d7fe:	1049      	asrs	r1, r1, #1
 800d800:	3008      	adds	r0, #8
 800d802:	e773      	b.n	800d6ec <_dtoa_r+0x344>
 800d804:	d02e      	beq.n	800d864 <_dtoa_r+0x4bc>
 800d806:	f1cb 0100 	rsb	r1, fp, #0
 800d80a:	4a76      	ldr	r2, [pc, #472]	; (800d9e4 <_dtoa_r+0x63c>)
 800d80c:	f001 000f 	and.w	r0, r1, #15
 800d810:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d814:	ed92 7b00 	vldr	d7, [r2]
 800d818:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d81c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d820:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d824:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d828:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d82c:	486e      	ldr	r0, [pc, #440]	; (800d9e8 <_dtoa_r+0x640>)
 800d82e:	1109      	asrs	r1, r1, #4
 800d830:	2400      	movs	r4, #0
 800d832:	2202      	movs	r2, #2
 800d834:	b939      	cbnz	r1, 800d846 <_dtoa_r+0x49e>
 800d836:	2c00      	cmp	r4, #0
 800d838:	f43f af60 	beq.w	800d6fc <_dtoa_r+0x354>
 800d83c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d844:	e75a      	b.n	800d6fc <_dtoa_r+0x354>
 800d846:	07cf      	lsls	r7, r1, #31
 800d848:	d509      	bpl.n	800d85e <_dtoa_r+0x4b6>
 800d84a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d84e:	ed90 7b00 	vldr	d7, [r0]
 800d852:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d856:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d85a:	3201      	adds	r2, #1
 800d85c:	2401      	movs	r4, #1
 800d85e:	1049      	asrs	r1, r1, #1
 800d860:	3008      	adds	r0, #8
 800d862:	e7e7      	b.n	800d834 <_dtoa_r+0x48c>
 800d864:	2202      	movs	r2, #2
 800d866:	e749      	b.n	800d6fc <_dtoa_r+0x354>
 800d868:	465f      	mov	r7, fp
 800d86a:	4648      	mov	r0, r9
 800d86c:	e765      	b.n	800d73a <_dtoa_r+0x392>
 800d86e:	ec42 1b17 	vmov	d7, r1, r2
 800d872:	4a5c      	ldr	r2, [pc, #368]	; (800d9e4 <_dtoa_r+0x63c>)
 800d874:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d878:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d87c:	9a00      	ldr	r2, [sp, #0]
 800d87e:	1814      	adds	r4, r2, r0
 800d880:	9a08      	ldr	r2, [sp, #32]
 800d882:	b352      	cbz	r2, 800d8da <_dtoa_r+0x532>
 800d884:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d888:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d88c:	f8dd 8000 	ldr.w	r8, [sp]
 800d890:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d894:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d898:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d89c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d8a0:	ee14 2a90 	vmov	r2, s9
 800d8a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d8a8:	3230      	adds	r2, #48	; 0x30
 800d8aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d8ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8b6:	f808 2b01 	strb.w	r2, [r8], #1
 800d8ba:	d439      	bmi.n	800d930 <_dtoa_r+0x588>
 800d8bc:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d8c0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c8:	d472      	bmi.n	800d9b0 <_dtoa_r+0x608>
 800d8ca:	45a0      	cmp	r8, r4
 800d8cc:	f43f af5d 	beq.w	800d78a <_dtoa_r+0x3e2>
 800d8d0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d8d4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d8d8:	e7e0      	b.n	800d89c <_dtoa_r+0x4f4>
 800d8da:	f8dd 8000 	ldr.w	r8, [sp]
 800d8de:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d8e2:	4621      	mov	r1, r4
 800d8e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d8e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d8ec:	ee14 2a90 	vmov	r2, s9
 800d8f0:	3230      	adds	r2, #48	; 0x30
 800d8f2:	f808 2b01 	strb.w	r2, [r8], #1
 800d8f6:	45a0      	cmp	r8, r4
 800d8f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d8fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d900:	d118      	bne.n	800d934 <_dtoa_r+0x58c>
 800d902:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d906:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d90a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d90e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d912:	dc4d      	bgt.n	800d9b0 <_dtoa_r+0x608>
 800d914:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d918:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d920:	f57f af33 	bpl.w	800d78a <_dtoa_r+0x3e2>
 800d924:	4688      	mov	r8, r1
 800d926:	3901      	subs	r1, #1
 800d928:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d92c:	2b30      	cmp	r3, #48	; 0x30
 800d92e:	d0f9      	beq.n	800d924 <_dtoa_r+0x57c>
 800d930:	46bb      	mov	fp, r7
 800d932:	e02a      	b.n	800d98a <_dtoa_r+0x5e2>
 800d934:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d938:	e7d6      	b.n	800d8e8 <_dtoa_r+0x540>
 800d93a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d93e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d942:	f8dd 8000 	ldr.w	r8, [sp]
 800d946:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d94a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d94e:	ee15 3a10 	vmov	r3, s10
 800d952:	3330      	adds	r3, #48	; 0x30
 800d954:	f808 3b01 	strb.w	r3, [r8], #1
 800d958:	9b00      	ldr	r3, [sp, #0]
 800d95a:	eba8 0303 	sub.w	r3, r8, r3
 800d95e:	4599      	cmp	r9, r3
 800d960:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d964:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d968:	d133      	bne.n	800d9d2 <_dtoa_r+0x62a>
 800d96a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d96e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d976:	dc1a      	bgt.n	800d9ae <_dtoa_r+0x606>
 800d978:	eeb4 7b46 	vcmp.f64	d7, d6
 800d97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d980:	d103      	bne.n	800d98a <_dtoa_r+0x5e2>
 800d982:	ee15 3a10 	vmov	r3, s10
 800d986:	07d9      	lsls	r1, r3, #31
 800d988:	d411      	bmi.n	800d9ae <_dtoa_r+0x606>
 800d98a:	4629      	mov	r1, r5
 800d98c:	4630      	mov	r0, r6
 800d98e:	f000 fd07 	bl	800e3a0 <_Bfree>
 800d992:	2300      	movs	r3, #0
 800d994:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d996:	f888 3000 	strb.w	r3, [r8]
 800d99a:	f10b 0301 	add.w	r3, fp, #1
 800d99e:	6013      	str	r3, [r2, #0]
 800d9a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f43f ad4d 	beq.w	800d442 <_dtoa_r+0x9a>
 800d9a8:	f8c3 8000 	str.w	r8, [r3]
 800d9ac:	e549      	b.n	800d442 <_dtoa_r+0x9a>
 800d9ae:	465f      	mov	r7, fp
 800d9b0:	4643      	mov	r3, r8
 800d9b2:	4698      	mov	r8, r3
 800d9b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9b8:	2a39      	cmp	r2, #57	; 0x39
 800d9ba:	d106      	bne.n	800d9ca <_dtoa_r+0x622>
 800d9bc:	9a00      	ldr	r2, [sp, #0]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d1f7      	bne.n	800d9b2 <_dtoa_r+0x60a>
 800d9c2:	9900      	ldr	r1, [sp, #0]
 800d9c4:	2230      	movs	r2, #48	; 0x30
 800d9c6:	3701      	adds	r7, #1
 800d9c8:	700a      	strb	r2, [r1, #0]
 800d9ca:	781a      	ldrb	r2, [r3, #0]
 800d9cc:	3201      	adds	r2, #1
 800d9ce:	701a      	strb	r2, [r3, #0]
 800d9d0:	e7ae      	b.n	800d930 <_dtoa_r+0x588>
 800d9d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d9d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9de:	d1b2      	bne.n	800d946 <_dtoa_r+0x59e>
 800d9e0:	e7d3      	b.n	800d98a <_dtoa_r+0x5e2>
 800d9e2:	bf00      	nop
 800d9e4:	0800fbb8 	.word	0x0800fbb8
 800d9e8:	0800fb90 	.word	0x0800fb90
 800d9ec:	9908      	ldr	r1, [sp, #32]
 800d9ee:	2900      	cmp	r1, #0
 800d9f0:	f000 80d1 	beq.w	800db96 <_dtoa_r+0x7ee>
 800d9f4:	9907      	ldr	r1, [sp, #28]
 800d9f6:	2901      	cmp	r1, #1
 800d9f8:	f300 80b4 	bgt.w	800db64 <_dtoa_r+0x7bc>
 800d9fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d9fe:	2900      	cmp	r1, #0
 800da00:	f000 80ac 	beq.w	800db5c <_dtoa_r+0x7b4>
 800da04:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800da08:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800da0c:	461c      	mov	r4, r3
 800da0e:	930a      	str	r3, [sp, #40]	; 0x28
 800da10:	9b05      	ldr	r3, [sp, #20]
 800da12:	4413      	add	r3, r2
 800da14:	9305      	str	r3, [sp, #20]
 800da16:	9b06      	ldr	r3, [sp, #24]
 800da18:	2101      	movs	r1, #1
 800da1a:	4413      	add	r3, r2
 800da1c:	4630      	mov	r0, r6
 800da1e:	9306      	str	r3, [sp, #24]
 800da20:	f000 fd7a 	bl	800e518 <__i2b>
 800da24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da26:	4607      	mov	r7, r0
 800da28:	f1b8 0f00 	cmp.w	r8, #0
 800da2c:	dd0d      	ble.n	800da4a <_dtoa_r+0x6a2>
 800da2e:	9a06      	ldr	r2, [sp, #24]
 800da30:	2a00      	cmp	r2, #0
 800da32:	dd0a      	ble.n	800da4a <_dtoa_r+0x6a2>
 800da34:	4542      	cmp	r2, r8
 800da36:	9905      	ldr	r1, [sp, #20]
 800da38:	bfa8      	it	ge
 800da3a:	4642      	movge	r2, r8
 800da3c:	1a89      	subs	r1, r1, r2
 800da3e:	9105      	str	r1, [sp, #20]
 800da40:	9906      	ldr	r1, [sp, #24]
 800da42:	eba8 0802 	sub.w	r8, r8, r2
 800da46:	1a8a      	subs	r2, r1, r2
 800da48:	9206      	str	r2, [sp, #24]
 800da4a:	b303      	cbz	r3, 800da8e <_dtoa_r+0x6e6>
 800da4c:	9a08      	ldr	r2, [sp, #32]
 800da4e:	2a00      	cmp	r2, #0
 800da50:	f000 80a6 	beq.w	800dba0 <_dtoa_r+0x7f8>
 800da54:	2c00      	cmp	r4, #0
 800da56:	dd13      	ble.n	800da80 <_dtoa_r+0x6d8>
 800da58:	4639      	mov	r1, r7
 800da5a:	4622      	mov	r2, r4
 800da5c:	4630      	mov	r0, r6
 800da5e:	930c      	str	r3, [sp, #48]	; 0x30
 800da60:	f000 fe16 	bl	800e690 <__pow5mult>
 800da64:	462a      	mov	r2, r5
 800da66:	4601      	mov	r1, r0
 800da68:	4607      	mov	r7, r0
 800da6a:	4630      	mov	r0, r6
 800da6c:	f000 fd6a 	bl	800e544 <__multiply>
 800da70:	4629      	mov	r1, r5
 800da72:	900a      	str	r0, [sp, #40]	; 0x28
 800da74:	4630      	mov	r0, r6
 800da76:	f000 fc93 	bl	800e3a0 <_Bfree>
 800da7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da7e:	4615      	mov	r5, r2
 800da80:	1b1a      	subs	r2, r3, r4
 800da82:	d004      	beq.n	800da8e <_dtoa_r+0x6e6>
 800da84:	4629      	mov	r1, r5
 800da86:	4630      	mov	r0, r6
 800da88:	f000 fe02 	bl	800e690 <__pow5mult>
 800da8c:	4605      	mov	r5, r0
 800da8e:	2101      	movs	r1, #1
 800da90:	4630      	mov	r0, r6
 800da92:	f000 fd41 	bl	800e518 <__i2b>
 800da96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da98:	2b00      	cmp	r3, #0
 800da9a:	4604      	mov	r4, r0
 800da9c:	f340 8082 	ble.w	800dba4 <_dtoa_r+0x7fc>
 800daa0:	461a      	mov	r2, r3
 800daa2:	4601      	mov	r1, r0
 800daa4:	4630      	mov	r0, r6
 800daa6:	f000 fdf3 	bl	800e690 <__pow5mult>
 800daaa:	9b07      	ldr	r3, [sp, #28]
 800daac:	2b01      	cmp	r3, #1
 800daae:	4604      	mov	r4, r0
 800dab0:	dd7b      	ble.n	800dbaa <_dtoa_r+0x802>
 800dab2:	2300      	movs	r3, #0
 800dab4:	930a      	str	r3, [sp, #40]	; 0x28
 800dab6:	6922      	ldr	r2, [r4, #16]
 800dab8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800dabc:	6910      	ldr	r0, [r2, #16]
 800dabe:	f000 fcdb 	bl	800e478 <__hi0bits>
 800dac2:	f1c0 0020 	rsb	r0, r0, #32
 800dac6:	9b06      	ldr	r3, [sp, #24]
 800dac8:	4418      	add	r0, r3
 800daca:	f010 001f 	ands.w	r0, r0, #31
 800dace:	f000 808d 	beq.w	800dbec <_dtoa_r+0x844>
 800dad2:	f1c0 0220 	rsb	r2, r0, #32
 800dad6:	2a04      	cmp	r2, #4
 800dad8:	f340 8086 	ble.w	800dbe8 <_dtoa_r+0x840>
 800dadc:	f1c0 001c 	rsb	r0, r0, #28
 800dae0:	9b05      	ldr	r3, [sp, #20]
 800dae2:	4403      	add	r3, r0
 800dae4:	9305      	str	r3, [sp, #20]
 800dae6:	9b06      	ldr	r3, [sp, #24]
 800dae8:	4403      	add	r3, r0
 800daea:	4480      	add	r8, r0
 800daec:	9306      	str	r3, [sp, #24]
 800daee:	9b05      	ldr	r3, [sp, #20]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	dd05      	ble.n	800db00 <_dtoa_r+0x758>
 800daf4:	4629      	mov	r1, r5
 800daf6:	461a      	mov	r2, r3
 800daf8:	4630      	mov	r0, r6
 800dafa:	f000 fe23 	bl	800e744 <__lshift>
 800dafe:	4605      	mov	r5, r0
 800db00:	9b06      	ldr	r3, [sp, #24]
 800db02:	2b00      	cmp	r3, #0
 800db04:	dd05      	ble.n	800db12 <_dtoa_r+0x76a>
 800db06:	4621      	mov	r1, r4
 800db08:	461a      	mov	r2, r3
 800db0a:	4630      	mov	r0, r6
 800db0c:	f000 fe1a 	bl	800e744 <__lshift>
 800db10:	4604      	mov	r4, r0
 800db12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db14:	2b00      	cmp	r3, #0
 800db16:	d06b      	beq.n	800dbf0 <_dtoa_r+0x848>
 800db18:	4621      	mov	r1, r4
 800db1a:	4628      	mov	r0, r5
 800db1c:	f000 fe7e 	bl	800e81c <__mcmp>
 800db20:	2800      	cmp	r0, #0
 800db22:	da65      	bge.n	800dbf0 <_dtoa_r+0x848>
 800db24:	2300      	movs	r3, #0
 800db26:	4629      	mov	r1, r5
 800db28:	220a      	movs	r2, #10
 800db2a:	4630      	mov	r0, r6
 800db2c:	f000 fc5a 	bl	800e3e4 <__multadd>
 800db30:	9b08      	ldr	r3, [sp, #32]
 800db32:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db36:	4605      	mov	r5, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f000 8192 	beq.w	800de62 <_dtoa_r+0xaba>
 800db3e:	4639      	mov	r1, r7
 800db40:	2300      	movs	r3, #0
 800db42:	220a      	movs	r2, #10
 800db44:	4630      	mov	r0, r6
 800db46:	f000 fc4d 	bl	800e3e4 <__multadd>
 800db4a:	f1ba 0f00 	cmp.w	sl, #0
 800db4e:	4607      	mov	r7, r0
 800db50:	f300 808e 	bgt.w	800dc70 <_dtoa_r+0x8c8>
 800db54:	9b07      	ldr	r3, [sp, #28]
 800db56:	2b02      	cmp	r3, #2
 800db58:	dc51      	bgt.n	800dbfe <_dtoa_r+0x856>
 800db5a:	e089      	b.n	800dc70 <_dtoa_r+0x8c8>
 800db5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800db62:	e751      	b.n	800da08 <_dtoa_r+0x660>
 800db64:	f109 34ff 	add.w	r4, r9, #4294967295
 800db68:	42a3      	cmp	r3, r4
 800db6a:	bfbf      	itttt	lt
 800db6c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800db6e:	1ae3      	sublt	r3, r4, r3
 800db70:	18d2      	addlt	r2, r2, r3
 800db72:	4613      	movlt	r3, r2
 800db74:	bfb7      	itett	lt
 800db76:	930e      	strlt	r3, [sp, #56]	; 0x38
 800db78:	1b1c      	subge	r4, r3, r4
 800db7a:	4623      	movlt	r3, r4
 800db7c:	2400      	movlt	r4, #0
 800db7e:	f1b9 0f00 	cmp.w	r9, #0
 800db82:	bfb5      	itete	lt
 800db84:	9a05      	ldrlt	r2, [sp, #20]
 800db86:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800db8a:	eba2 0809 	sublt.w	r8, r2, r9
 800db8e:	464a      	movge	r2, r9
 800db90:	bfb8      	it	lt
 800db92:	2200      	movlt	r2, #0
 800db94:	e73b      	b.n	800da0e <_dtoa_r+0x666>
 800db96:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800db9a:	9f08      	ldr	r7, [sp, #32]
 800db9c:	461c      	mov	r4, r3
 800db9e:	e743      	b.n	800da28 <_dtoa_r+0x680>
 800dba0:	461a      	mov	r2, r3
 800dba2:	e76f      	b.n	800da84 <_dtoa_r+0x6dc>
 800dba4:	9b07      	ldr	r3, [sp, #28]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	dc18      	bgt.n	800dbdc <_dtoa_r+0x834>
 800dbaa:	9b02      	ldr	r3, [sp, #8]
 800dbac:	b9b3      	cbnz	r3, 800dbdc <_dtoa_r+0x834>
 800dbae:	9b03      	ldr	r3, [sp, #12]
 800dbb0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dbb4:	b9a2      	cbnz	r2, 800dbe0 <_dtoa_r+0x838>
 800dbb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dbba:	0d12      	lsrs	r2, r2, #20
 800dbbc:	0512      	lsls	r2, r2, #20
 800dbbe:	b18a      	cbz	r2, 800dbe4 <_dtoa_r+0x83c>
 800dbc0:	9b05      	ldr	r3, [sp, #20]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	9305      	str	r3, [sp, #20]
 800dbc6:	9b06      	ldr	r3, [sp, #24]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	9306      	str	r3, [sp, #24]
 800dbcc:	2301      	movs	r3, #1
 800dbce:	930a      	str	r3, [sp, #40]	; 0x28
 800dbd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f47f af6f 	bne.w	800dab6 <_dtoa_r+0x70e>
 800dbd8:	2001      	movs	r0, #1
 800dbda:	e774      	b.n	800dac6 <_dtoa_r+0x71e>
 800dbdc:	2300      	movs	r3, #0
 800dbde:	e7f6      	b.n	800dbce <_dtoa_r+0x826>
 800dbe0:	9b02      	ldr	r3, [sp, #8]
 800dbe2:	e7f4      	b.n	800dbce <_dtoa_r+0x826>
 800dbe4:	920a      	str	r2, [sp, #40]	; 0x28
 800dbe6:	e7f3      	b.n	800dbd0 <_dtoa_r+0x828>
 800dbe8:	d081      	beq.n	800daee <_dtoa_r+0x746>
 800dbea:	4610      	mov	r0, r2
 800dbec:	301c      	adds	r0, #28
 800dbee:	e777      	b.n	800dae0 <_dtoa_r+0x738>
 800dbf0:	f1b9 0f00 	cmp.w	r9, #0
 800dbf4:	dc37      	bgt.n	800dc66 <_dtoa_r+0x8be>
 800dbf6:	9b07      	ldr	r3, [sp, #28]
 800dbf8:	2b02      	cmp	r3, #2
 800dbfa:	dd34      	ble.n	800dc66 <_dtoa_r+0x8be>
 800dbfc:	46ca      	mov	sl, r9
 800dbfe:	f1ba 0f00 	cmp.w	sl, #0
 800dc02:	d10d      	bne.n	800dc20 <_dtoa_r+0x878>
 800dc04:	4621      	mov	r1, r4
 800dc06:	4653      	mov	r3, sl
 800dc08:	2205      	movs	r2, #5
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	f000 fbea 	bl	800e3e4 <__multadd>
 800dc10:	4601      	mov	r1, r0
 800dc12:	4604      	mov	r4, r0
 800dc14:	4628      	mov	r0, r5
 800dc16:	f000 fe01 	bl	800e81c <__mcmp>
 800dc1a:	2800      	cmp	r0, #0
 800dc1c:	f73f adde 	bgt.w	800d7dc <_dtoa_r+0x434>
 800dc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc22:	f8dd 8000 	ldr.w	r8, [sp]
 800dc26:	ea6f 0b03 	mvn.w	fp, r3
 800dc2a:	f04f 0900 	mov.w	r9, #0
 800dc2e:	4621      	mov	r1, r4
 800dc30:	4630      	mov	r0, r6
 800dc32:	f000 fbb5 	bl	800e3a0 <_Bfree>
 800dc36:	2f00      	cmp	r7, #0
 800dc38:	f43f aea7 	beq.w	800d98a <_dtoa_r+0x5e2>
 800dc3c:	f1b9 0f00 	cmp.w	r9, #0
 800dc40:	d005      	beq.n	800dc4e <_dtoa_r+0x8a6>
 800dc42:	45b9      	cmp	r9, r7
 800dc44:	d003      	beq.n	800dc4e <_dtoa_r+0x8a6>
 800dc46:	4649      	mov	r1, r9
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f000 fba9 	bl	800e3a0 <_Bfree>
 800dc4e:	4639      	mov	r1, r7
 800dc50:	4630      	mov	r0, r6
 800dc52:	f000 fba5 	bl	800e3a0 <_Bfree>
 800dc56:	e698      	b.n	800d98a <_dtoa_r+0x5e2>
 800dc58:	2400      	movs	r4, #0
 800dc5a:	4627      	mov	r7, r4
 800dc5c:	e7e0      	b.n	800dc20 <_dtoa_r+0x878>
 800dc5e:	46bb      	mov	fp, r7
 800dc60:	4604      	mov	r4, r0
 800dc62:	4607      	mov	r7, r0
 800dc64:	e5ba      	b.n	800d7dc <_dtoa_r+0x434>
 800dc66:	9b08      	ldr	r3, [sp, #32]
 800dc68:	46ca      	mov	sl, r9
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f000 8100 	beq.w	800de70 <_dtoa_r+0xac8>
 800dc70:	f1b8 0f00 	cmp.w	r8, #0
 800dc74:	dd05      	ble.n	800dc82 <_dtoa_r+0x8da>
 800dc76:	4639      	mov	r1, r7
 800dc78:	4642      	mov	r2, r8
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	f000 fd62 	bl	800e744 <__lshift>
 800dc80:	4607      	mov	r7, r0
 800dc82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d05d      	beq.n	800dd44 <_dtoa_r+0x99c>
 800dc88:	6879      	ldr	r1, [r7, #4]
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	f000 fb48 	bl	800e320 <_Balloc>
 800dc90:	4680      	mov	r8, r0
 800dc92:	b928      	cbnz	r0, 800dca0 <_dtoa_r+0x8f8>
 800dc94:	4b82      	ldr	r3, [pc, #520]	; (800dea0 <_dtoa_r+0xaf8>)
 800dc96:	4602      	mov	r2, r0
 800dc98:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc9c:	f7ff bb9a 	b.w	800d3d4 <_dtoa_r+0x2c>
 800dca0:	693a      	ldr	r2, [r7, #16]
 800dca2:	3202      	adds	r2, #2
 800dca4:	0092      	lsls	r2, r2, #2
 800dca6:	f107 010c 	add.w	r1, r7, #12
 800dcaa:	300c      	adds	r0, #12
 800dcac:	f000 fb2a 	bl	800e304 <memcpy>
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	4641      	mov	r1, r8
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	f000 fd45 	bl	800e744 <__lshift>
 800dcba:	9b00      	ldr	r3, [sp, #0]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	9305      	str	r3, [sp, #20]
 800dcc0:	9b00      	ldr	r3, [sp, #0]
 800dcc2:	4453      	add	r3, sl
 800dcc4:	9309      	str	r3, [sp, #36]	; 0x24
 800dcc6:	9b02      	ldr	r3, [sp, #8]
 800dcc8:	f003 0301 	and.w	r3, r3, #1
 800dccc:	46b9      	mov	r9, r7
 800dcce:	9308      	str	r3, [sp, #32]
 800dcd0:	4607      	mov	r7, r0
 800dcd2:	9b05      	ldr	r3, [sp, #20]
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	4628      	mov	r0, r5
 800dcda:	9302      	str	r3, [sp, #8]
 800dcdc:	f7ff fad8 	bl	800d290 <quorem>
 800dce0:	4603      	mov	r3, r0
 800dce2:	3330      	adds	r3, #48	; 0x30
 800dce4:	9006      	str	r0, [sp, #24]
 800dce6:	4649      	mov	r1, r9
 800dce8:	4628      	mov	r0, r5
 800dcea:	930a      	str	r3, [sp, #40]	; 0x28
 800dcec:	f000 fd96 	bl	800e81c <__mcmp>
 800dcf0:	463a      	mov	r2, r7
 800dcf2:	4682      	mov	sl, r0
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f000 fdac 	bl	800e854 <__mdiff>
 800dcfc:	68c2      	ldr	r2, [r0, #12]
 800dcfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd00:	4680      	mov	r8, r0
 800dd02:	bb0a      	cbnz	r2, 800dd48 <_dtoa_r+0x9a0>
 800dd04:	4601      	mov	r1, r0
 800dd06:	4628      	mov	r0, r5
 800dd08:	f000 fd88 	bl	800e81c <__mcmp>
 800dd0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd0e:	4602      	mov	r2, r0
 800dd10:	4641      	mov	r1, r8
 800dd12:	4630      	mov	r0, r6
 800dd14:	920e      	str	r2, [sp, #56]	; 0x38
 800dd16:	930a      	str	r3, [sp, #40]	; 0x28
 800dd18:	f000 fb42 	bl	800e3a0 <_Bfree>
 800dd1c:	9b07      	ldr	r3, [sp, #28]
 800dd1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dd20:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dd24:	ea43 0102 	orr.w	r1, r3, r2
 800dd28:	9b08      	ldr	r3, [sp, #32]
 800dd2a:	430b      	orrs	r3, r1
 800dd2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd2e:	d10d      	bne.n	800dd4c <_dtoa_r+0x9a4>
 800dd30:	2b39      	cmp	r3, #57	; 0x39
 800dd32:	d029      	beq.n	800dd88 <_dtoa_r+0x9e0>
 800dd34:	f1ba 0f00 	cmp.w	sl, #0
 800dd38:	dd01      	ble.n	800dd3e <_dtoa_r+0x996>
 800dd3a:	9b06      	ldr	r3, [sp, #24]
 800dd3c:	3331      	adds	r3, #49	; 0x31
 800dd3e:	9a02      	ldr	r2, [sp, #8]
 800dd40:	7013      	strb	r3, [r2, #0]
 800dd42:	e774      	b.n	800dc2e <_dtoa_r+0x886>
 800dd44:	4638      	mov	r0, r7
 800dd46:	e7b8      	b.n	800dcba <_dtoa_r+0x912>
 800dd48:	2201      	movs	r2, #1
 800dd4a:	e7e1      	b.n	800dd10 <_dtoa_r+0x968>
 800dd4c:	f1ba 0f00 	cmp.w	sl, #0
 800dd50:	db06      	blt.n	800dd60 <_dtoa_r+0x9b8>
 800dd52:	9907      	ldr	r1, [sp, #28]
 800dd54:	ea41 0a0a 	orr.w	sl, r1, sl
 800dd58:	9908      	ldr	r1, [sp, #32]
 800dd5a:	ea5a 0101 	orrs.w	r1, sl, r1
 800dd5e:	d120      	bne.n	800dda2 <_dtoa_r+0x9fa>
 800dd60:	2a00      	cmp	r2, #0
 800dd62:	ddec      	ble.n	800dd3e <_dtoa_r+0x996>
 800dd64:	4629      	mov	r1, r5
 800dd66:	2201      	movs	r2, #1
 800dd68:	4630      	mov	r0, r6
 800dd6a:	9305      	str	r3, [sp, #20]
 800dd6c:	f000 fcea 	bl	800e744 <__lshift>
 800dd70:	4621      	mov	r1, r4
 800dd72:	4605      	mov	r5, r0
 800dd74:	f000 fd52 	bl	800e81c <__mcmp>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	9b05      	ldr	r3, [sp, #20]
 800dd7c:	dc02      	bgt.n	800dd84 <_dtoa_r+0x9dc>
 800dd7e:	d1de      	bne.n	800dd3e <_dtoa_r+0x996>
 800dd80:	07da      	lsls	r2, r3, #31
 800dd82:	d5dc      	bpl.n	800dd3e <_dtoa_r+0x996>
 800dd84:	2b39      	cmp	r3, #57	; 0x39
 800dd86:	d1d8      	bne.n	800dd3a <_dtoa_r+0x992>
 800dd88:	9a02      	ldr	r2, [sp, #8]
 800dd8a:	2339      	movs	r3, #57	; 0x39
 800dd8c:	7013      	strb	r3, [r2, #0]
 800dd8e:	4643      	mov	r3, r8
 800dd90:	4698      	mov	r8, r3
 800dd92:	3b01      	subs	r3, #1
 800dd94:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800dd98:	2a39      	cmp	r2, #57	; 0x39
 800dd9a:	d051      	beq.n	800de40 <_dtoa_r+0xa98>
 800dd9c:	3201      	adds	r2, #1
 800dd9e:	701a      	strb	r2, [r3, #0]
 800dda0:	e745      	b.n	800dc2e <_dtoa_r+0x886>
 800dda2:	2a00      	cmp	r2, #0
 800dda4:	dd03      	ble.n	800ddae <_dtoa_r+0xa06>
 800dda6:	2b39      	cmp	r3, #57	; 0x39
 800dda8:	d0ee      	beq.n	800dd88 <_dtoa_r+0x9e0>
 800ddaa:	3301      	adds	r3, #1
 800ddac:	e7c7      	b.n	800dd3e <_dtoa_r+0x996>
 800ddae:	9a05      	ldr	r2, [sp, #20]
 800ddb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ddb2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ddb6:	428a      	cmp	r2, r1
 800ddb8:	d02b      	beq.n	800de12 <_dtoa_r+0xa6a>
 800ddba:	4629      	mov	r1, r5
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	220a      	movs	r2, #10
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	f000 fb0f 	bl	800e3e4 <__multadd>
 800ddc6:	45b9      	cmp	r9, r7
 800ddc8:	4605      	mov	r5, r0
 800ddca:	f04f 0300 	mov.w	r3, #0
 800ddce:	f04f 020a 	mov.w	r2, #10
 800ddd2:	4649      	mov	r1, r9
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	d107      	bne.n	800dde8 <_dtoa_r+0xa40>
 800ddd8:	f000 fb04 	bl	800e3e4 <__multadd>
 800dddc:	4681      	mov	r9, r0
 800ddde:	4607      	mov	r7, r0
 800dde0:	9b05      	ldr	r3, [sp, #20]
 800dde2:	3301      	adds	r3, #1
 800dde4:	9305      	str	r3, [sp, #20]
 800dde6:	e774      	b.n	800dcd2 <_dtoa_r+0x92a>
 800dde8:	f000 fafc 	bl	800e3e4 <__multadd>
 800ddec:	4639      	mov	r1, r7
 800ddee:	4681      	mov	r9, r0
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	220a      	movs	r2, #10
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f000 faf5 	bl	800e3e4 <__multadd>
 800ddfa:	4607      	mov	r7, r0
 800ddfc:	e7f0      	b.n	800dde0 <_dtoa_r+0xa38>
 800ddfe:	f1ba 0f00 	cmp.w	sl, #0
 800de02:	9a00      	ldr	r2, [sp, #0]
 800de04:	bfcc      	ite	gt
 800de06:	46d0      	movgt	r8, sl
 800de08:	f04f 0801 	movle.w	r8, #1
 800de0c:	4490      	add	r8, r2
 800de0e:	f04f 0900 	mov.w	r9, #0
 800de12:	4629      	mov	r1, r5
 800de14:	2201      	movs	r2, #1
 800de16:	4630      	mov	r0, r6
 800de18:	9302      	str	r3, [sp, #8]
 800de1a:	f000 fc93 	bl	800e744 <__lshift>
 800de1e:	4621      	mov	r1, r4
 800de20:	4605      	mov	r5, r0
 800de22:	f000 fcfb 	bl	800e81c <__mcmp>
 800de26:	2800      	cmp	r0, #0
 800de28:	dcb1      	bgt.n	800dd8e <_dtoa_r+0x9e6>
 800de2a:	d102      	bne.n	800de32 <_dtoa_r+0xa8a>
 800de2c:	9b02      	ldr	r3, [sp, #8]
 800de2e:	07db      	lsls	r3, r3, #31
 800de30:	d4ad      	bmi.n	800dd8e <_dtoa_r+0x9e6>
 800de32:	4643      	mov	r3, r8
 800de34:	4698      	mov	r8, r3
 800de36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de3a:	2a30      	cmp	r2, #48	; 0x30
 800de3c:	d0fa      	beq.n	800de34 <_dtoa_r+0xa8c>
 800de3e:	e6f6      	b.n	800dc2e <_dtoa_r+0x886>
 800de40:	9a00      	ldr	r2, [sp, #0]
 800de42:	429a      	cmp	r2, r3
 800de44:	d1a4      	bne.n	800dd90 <_dtoa_r+0x9e8>
 800de46:	f10b 0b01 	add.w	fp, fp, #1
 800de4a:	2331      	movs	r3, #49	; 0x31
 800de4c:	e778      	b.n	800dd40 <_dtoa_r+0x998>
 800de4e:	4b15      	ldr	r3, [pc, #84]	; (800dea4 <_dtoa_r+0xafc>)
 800de50:	f7ff bb12 	b.w	800d478 <_dtoa_r+0xd0>
 800de54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de56:	2b00      	cmp	r3, #0
 800de58:	f47f aaee 	bne.w	800d438 <_dtoa_r+0x90>
 800de5c:	4b12      	ldr	r3, [pc, #72]	; (800dea8 <_dtoa_r+0xb00>)
 800de5e:	f7ff bb0b 	b.w	800d478 <_dtoa_r+0xd0>
 800de62:	f1ba 0f00 	cmp.w	sl, #0
 800de66:	dc03      	bgt.n	800de70 <_dtoa_r+0xac8>
 800de68:	9b07      	ldr	r3, [sp, #28]
 800de6a:	2b02      	cmp	r3, #2
 800de6c:	f73f aec7 	bgt.w	800dbfe <_dtoa_r+0x856>
 800de70:	f8dd 8000 	ldr.w	r8, [sp]
 800de74:	4621      	mov	r1, r4
 800de76:	4628      	mov	r0, r5
 800de78:	f7ff fa0a 	bl	800d290 <quorem>
 800de7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800de80:	f808 3b01 	strb.w	r3, [r8], #1
 800de84:	9a00      	ldr	r2, [sp, #0]
 800de86:	eba8 0202 	sub.w	r2, r8, r2
 800de8a:	4592      	cmp	sl, r2
 800de8c:	ddb7      	ble.n	800ddfe <_dtoa_r+0xa56>
 800de8e:	4629      	mov	r1, r5
 800de90:	2300      	movs	r3, #0
 800de92:	220a      	movs	r2, #10
 800de94:	4630      	mov	r0, r6
 800de96:	f000 faa5 	bl	800e3e4 <__multadd>
 800de9a:	4605      	mov	r5, r0
 800de9c:	e7ea      	b.n	800de74 <_dtoa_r+0xacc>
 800de9e:	bf00      	nop
 800dea0:	0800fabf 	.word	0x0800fabf
 800dea4:	0800fa18 	.word	0x0800fa18
 800dea8:	0800fa3c 	.word	0x0800fa3c

0800deac <__sflush_r>:
 800deac:	898a      	ldrh	r2, [r1, #12]
 800deae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deb2:	4605      	mov	r5, r0
 800deb4:	0710      	lsls	r0, r2, #28
 800deb6:	460c      	mov	r4, r1
 800deb8:	d458      	bmi.n	800df6c <__sflush_r+0xc0>
 800deba:	684b      	ldr	r3, [r1, #4]
 800debc:	2b00      	cmp	r3, #0
 800debe:	dc05      	bgt.n	800decc <__sflush_r+0x20>
 800dec0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	dc02      	bgt.n	800decc <__sflush_r+0x20>
 800dec6:	2000      	movs	r0, #0
 800dec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800decc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dece:	2e00      	cmp	r6, #0
 800ded0:	d0f9      	beq.n	800dec6 <__sflush_r+0x1a>
 800ded2:	2300      	movs	r3, #0
 800ded4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ded8:	682f      	ldr	r7, [r5, #0]
 800deda:	602b      	str	r3, [r5, #0]
 800dedc:	d032      	beq.n	800df44 <__sflush_r+0x98>
 800dede:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dee0:	89a3      	ldrh	r3, [r4, #12]
 800dee2:	075a      	lsls	r2, r3, #29
 800dee4:	d505      	bpl.n	800def2 <__sflush_r+0x46>
 800dee6:	6863      	ldr	r3, [r4, #4]
 800dee8:	1ac0      	subs	r0, r0, r3
 800deea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800deec:	b10b      	cbz	r3, 800def2 <__sflush_r+0x46>
 800deee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800def0:	1ac0      	subs	r0, r0, r3
 800def2:	2300      	movs	r3, #0
 800def4:	4602      	mov	r2, r0
 800def6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800def8:	6a21      	ldr	r1, [r4, #32]
 800defa:	4628      	mov	r0, r5
 800defc:	47b0      	blx	r6
 800defe:	1c43      	adds	r3, r0, #1
 800df00:	89a3      	ldrh	r3, [r4, #12]
 800df02:	d106      	bne.n	800df12 <__sflush_r+0x66>
 800df04:	6829      	ldr	r1, [r5, #0]
 800df06:	291d      	cmp	r1, #29
 800df08:	d82c      	bhi.n	800df64 <__sflush_r+0xb8>
 800df0a:	4a2a      	ldr	r2, [pc, #168]	; (800dfb4 <__sflush_r+0x108>)
 800df0c:	40ca      	lsrs	r2, r1
 800df0e:	07d6      	lsls	r6, r2, #31
 800df10:	d528      	bpl.n	800df64 <__sflush_r+0xb8>
 800df12:	2200      	movs	r2, #0
 800df14:	6062      	str	r2, [r4, #4]
 800df16:	04d9      	lsls	r1, r3, #19
 800df18:	6922      	ldr	r2, [r4, #16]
 800df1a:	6022      	str	r2, [r4, #0]
 800df1c:	d504      	bpl.n	800df28 <__sflush_r+0x7c>
 800df1e:	1c42      	adds	r2, r0, #1
 800df20:	d101      	bne.n	800df26 <__sflush_r+0x7a>
 800df22:	682b      	ldr	r3, [r5, #0]
 800df24:	b903      	cbnz	r3, 800df28 <__sflush_r+0x7c>
 800df26:	6560      	str	r0, [r4, #84]	; 0x54
 800df28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df2a:	602f      	str	r7, [r5, #0]
 800df2c:	2900      	cmp	r1, #0
 800df2e:	d0ca      	beq.n	800dec6 <__sflush_r+0x1a>
 800df30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df34:	4299      	cmp	r1, r3
 800df36:	d002      	beq.n	800df3e <__sflush_r+0x92>
 800df38:	4628      	mov	r0, r5
 800df3a:	f000 fd7f 	bl	800ea3c <_free_r>
 800df3e:	2000      	movs	r0, #0
 800df40:	6360      	str	r0, [r4, #52]	; 0x34
 800df42:	e7c1      	b.n	800dec8 <__sflush_r+0x1c>
 800df44:	6a21      	ldr	r1, [r4, #32]
 800df46:	2301      	movs	r3, #1
 800df48:	4628      	mov	r0, r5
 800df4a:	47b0      	blx	r6
 800df4c:	1c41      	adds	r1, r0, #1
 800df4e:	d1c7      	bne.n	800dee0 <__sflush_r+0x34>
 800df50:	682b      	ldr	r3, [r5, #0]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d0c4      	beq.n	800dee0 <__sflush_r+0x34>
 800df56:	2b1d      	cmp	r3, #29
 800df58:	d001      	beq.n	800df5e <__sflush_r+0xb2>
 800df5a:	2b16      	cmp	r3, #22
 800df5c:	d101      	bne.n	800df62 <__sflush_r+0xb6>
 800df5e:	602f      	str	r7, [r5, #0]
 800df60:	e7b1      	b.n	800dec6 <__sflush_r+0x1a>
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df68:	81a3      	strh	r3, [r4, #12]
 800df6a:	e7ad      	b.n	800dec8 <__sflush_r+0x1c>
 800df6c:	690f      	ldr	r7, [r1, #16]
 800df6e:	2f00      	cmp	r7, #0
 800df70:	d0a9      	beq.n	800dec6 <__sflush_r+0x1a>
 800df72:	0793      	lsls	r3, r2, #30
 800df74:	680e      	ldr	r6, [r1, #0]
 800df76:	bf08      	it	eq
 800df78:	694b      	ldreq	r3, [r1, #20]
 800df7a:	600f      	str	r7, [r1, #0]
 800df7c:	bf18      	it	ne
 800df7e:	2300      	movne	r3, #0
 800df80:	eba6 0807 	sub.w	r8, r6, r7
 800df84:	608b      	str	r3, [r1, #8]
 800df86:	f1b8 0f00 	cmp.w	r8, #0
 800df8a:	dd9c      	ble.n	800dec6 <__sflush_r+0x1a>
 800df8c:	6a21      	ldr	r1, [r4, #32]
 800df8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df90:	4643      	mov	r3, r8
 800df92:	463a      	mov	r2, r7
 800df94:	4628      	mov	r0, r5
 800df96:	47b0      	blx	r6
 800df98:	2800      	cmp	r0, #0
 800df9a:	dc06      	bgt.n	800dfaa <__sflush_r+0xfe>
 800df9c:	89a3      	ldrh	r3, [r4, #12]
 800df9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfa2:	81a3      	strh	r3, [r4, #12]
 800dfa4:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa8:	e78e      	b.n	800dec8 <__sflush_r+0x1c>
 800dfaa:	4407      	add	r7, r0
 800dfac:	eba8 0800 	sub.w	r8, r8, r0
 800dfb0:	e7e9      	b.n	800df86 <__sflush_r+0xda>
 800dfb2:	bf00      	nop
 800dfb4:	20400001 	.word	0x20400001

0800dfb8 <_fflush_r>:
 800dfb8:	b538      	push	{r3, r4, r5, lr}
 800dfba:	690b      	ldr	r3, [r1, #16]
 800dfbc:	4605      	mov	r5, r0
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	b913      	cbnz	r3, 800dfc8 <_fflush_r+0x10>
 800dfc2:	2500      	movs	r5, #0
 800dfc4:	4628      	mov	r0, r5
 800dfc6:	bd38      	pop	{r3, r4, r5, pc}
 800dfc8:	b118      	cbz	r0, 800dfd2 <_fflush_r+0x1a>
 800dfca:	6983      	ldr	r3, [r0, #24]
 800dfcc:	b90b      	cbnz	r3, 800dfd2 <_fflush_r+0x1a>
 800dfce:	f000 f887 	bl	800e0e0 <__sinit>
 800dfd2:	4b14      	ldr	r3, [pc, #80]	; (800e024 <_fflush_r+0x6c>)
 800dfd4:	429c      	cmp	r4, r3
 800dfd6:	d11b      	bne.n	800e010 <_fflush_r+0x58>
 800dfd8:	686c      	ldr	r4, [r5, #4]
 800dfda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d0ef      	beq.n	800dfc2 <_fflush_r+0xa>
 800dfe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfe4:	07d0      	lsls	r0, r2, #31
 800dfe6:	d404      	bmi.n	800dff2 <_fflush_r+0x3a>
 800dfe8:	0599      	lsls	r1, r3, #22
 800dfea:	d402      	bmi.n	800dff2 <_fflush_r+0x3a>
 800dfec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfee:	f000 f91a 	bl	800e226 <__retarget_lock_acquire_recursive>
 800dff2:	4628      	mov	r0, r5
 800dff4:	4621      	mov	r1, r4
 800dff6:	f7ff ff59 	bl	800deac <__sflush_r>
 800dffa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dffc:	07da      	lsls	r2, r3, #31
 800dffe:	4605      	mov	r5, r0
 800e000:	d4e0      	bmi.n	800dfc4 <_fflush_r+0xc>
 800e002:	89a3      	ldrh	r3, [r4, #12]
 800e004:	059b      	lsls	r3, r3, #22
 800e006:	d4dd      	bmi.n	800dfc4 <_fflush_r+0xc>
 800e008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e00a:	f000 f90d 	bl	800e228 <__retarget_lock_release_recursive>
 800e00e:	e7d9      	b.n	800dfc4 <_fflush_r+0xc>
 800e010:	4b05      	ldr	r3, [pc, #20]	; (800e028 <_fflush_r+0x70>)
 800e012:	429c      	cmp	r4, r3
 800e014:	d101      	bne.n	800e01a <_fflush_r+0x62>
 800e016:	68ac      	ldr	r4, [r5, #8]
 800e018:	e7df      	b.n	800dfda <_fflush_r+0x22>
 800e01a:	4b04      	ldr	r3, [pc, #16]	; (800e02c <_fflush_r+0x74>)
 800e01c:	429c      	cmp	r4, r3
 800e01e:	bf08      	it	eq
 800e020:	68ec      	ldreq	r4, [r5, #12]
 800e022:	e7da      	b.n	800dfda <_fflush_r+0x22>
 800e024:	0800faf0 	.word	0x0800faf0
 800e028:	0800fb10 	.word	0x0800fb10
 800e02c:	0800fad0 	.word	0x0800fad0

0800e030 <std>:
 800e030:	2300      	movs	r3, #0
 800e032:	b510      	push	{r4, lr}
 800e034:	4604      	mov	r4, r0
 800e036:	e9c0 3300 	strd	r3, r3, [r0]
 800e03a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e03e:	6083      	str	r3, [r0, #8]
 800e040:	8181      	strh	r1, [r0, #12]
 800e042:	6643      	str	r3, [r0, #100]	; 0x64
 800e044:	81c2      	strh	r2, [r0, #14]
 800e046:	6183      	str	r3, [r0, #24]
 800e048:	4619      	mov	r1, r3
 800e04a:	2208      	movs	r2, #8
 800e04c:	305c      	adds	r0, #92	; 0x5c
 800e04e:	f7fe fb85 	bl	800c75c <memset>
 800e052:	4b05      	ldr	r3, [pc, #20]	; (800e068 <std+0x38>)
 800e054:	6263      	str	r3, [r4, #36]	; 0x24
 800e056:	4b05      	ldr	r3, [pc, #20]	; (800e06c <std+0x3c>)
 800e058:	62a3      	str	r3, [r4, #40]	; 0x28
 800e05a:	4b05      	ldr	r3, [pc, #20]	; (800e070 <std+0x40>)
 800e05c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e05e:	4b05      	ldr	r3, [pc, #20]	; (800e074 <std+0x44>)
 800e060:	6224      	str	r4, [r4, #32]
 800e062:	6323      	str	r3, [r4, #48]	; 0x30
 800e064:	bd10      	pop	{r4, pc}
 800e066:	bf00      	nop
 800e068:	0800ee65 	.word	0x0800ee65
 800e06c:	0800ee87 	.word	0x0800ee87
 800e070:	0800eebf 	.word	0x0800eebf
 800e074:	0800eee3 	.word	0x0800eee3

0800e078 <_cleanup_r>:
 800e078:	4901      	ldr	r1, [pc, #4]	; (800e080 <_cleanup_r+0x8>)
 800e07a:	f000 b8af 	b.w	800e1dc <_fwalk_reent>
 800e07e:	bf00      	nop
 800e080:	0800dfb9 	.word	0x0800dfb9

0800e084 <__sfmoreglue>:
 800e084:	b570      	push	{r4, r5, r6, lr}
 800e086:	1e4a      	subs	r2, r1, #1
 800e088:	2568      	movs	r5, #104	; 0x68
 800e08a:	4355      	muls	r5, r2
 800e08c:	460e      	mov	r6, r1
 800e08e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e092:	f000 fd23 	bl	800eadc <_malloc_r>
 800e096:	4604      	mov	r4, r0
 800e098:	b140      	cbz	r0, 800e0ac <__sfmoreglue+0x28>
 800e09a:	2100      	movs	r1, #0
 800e09c:	e9c0 1600 	strd	r1, r6, [r0]
 800e0a0:	300c      	adds	r0, #12
 800e0a2:	60a0      	str	r0, [r4, #8]
 800e0a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e0a8:	f7fe fb58 	bl	800c75c <memset>
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	bd70      	pop	{r4, r5, r6, pc}

0800e0b0 <__sfp_lock_acquire>:
 800e0b0:	4801      	ldr	r0, [pc, #4]	; (800e0b8 <__sfp_lock_acquire+0x8>)
 800e0b2:	f000 b8b8 	b.w	800e226 <__retarget_lock_acquire_recursive>
 800e0b6:	bf00      	nop
 800e0b8:	2400052c 	.word	0x2400052c

0800e0bc <__sfp_lock_release>:
 800e0bc:	4801      	ldr	r0, [pc, #4]	; (800e0c4 <__sfp_lock_release+0x8>)
 800e0be:	f000 b8b3 	b.w	800e228 <__retarget_lock_release_recursive>
 800e0c2:	bf00      	nop
 800e0c4:	2400052c 	.word	0x2400052c

0800e0c8 <__sinit_lock_acquire>:
 800e0c8:	4801      	ldr	r0, [pc, #4]	; (800e0d0 <__sinit_lock_acquire+0x8>)
 800e0ca:	f000 b8ac 	b.w	800e226 <__retarget_lock_acquire_recursive>
 800e0ce:	bf00      	nop
 800e0d0:	24000527 	.word	0x24000527

0800e0d4 <__sinit_lock_release>:
 800e0d4:	4801      	ldr	r0, [pc, #4]	; (800e0dc <__sinit_lock_release+0x8>)
 800e0d6:	f000 b8a7 	b.w	800e228 <__retarget_lock_release_recursive>
 800e0da:	bf00      	nop
 800e0dc:	24000527 	.word	0x24000527

0800e0e0 <__sinit>:
 800e0e0:	b510      	push	{r4, lr}
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	f7ff fff0 	bl	800e0c8 <__sinit_lock_acquire>
 800e0e8:	69a3      	ldr	r3, [r4, #24]
 800e0ea:	b11b      	cbz	r3, 800e0f4 <__sinit+0x14>
 800e0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0f0:	f7ff bff0 	b.w	800e0d4 <__sinit_lock_release>
 800e0f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0f8:	6523      	str	r3, [r4, #80]	; 0x50
 800e0fa:	4b13      	ldr	r3, [pc, #76]	; (800e148 <__sinit+0x68>)
 800e0fc:	4a13      	ldr	r2, [pc, #76]	; (800e14c <__sinit+0x6c>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	62a2      	str	r2, [r4, #40]	; 0x28
 800e102:	42a3      	cmp	r3, r4
 800e104:	bf04      	itt	eq
 800e106:	2301      	moveq	r3, #1
 800e108:	61a3      	streq	r3, [r4, #24]
 800e10a:	4620      	mov	r0, r4
 800e10c:	f000 f820 	bl	800e150 <__sfp>
 800e110:	6060      	str	r0, [r4, #4]
 800e112:	4620      	mov	r0, r4
 800e114:	f000 f81c 	bl	800e150 <__sfp>
 800e118:	60a0      	str	r0, [r4, #8]
 800e11a:	4620      	mov	r0, r4
 800e11c:	f000 f818 	bl	800e150 <__sfp>
 800e120:	2200      	movs	r2, #0
 800e122:	60e0      	str	r0, [r4, #12]
 800e124:	2104      	movs	r1, #4
 800e126:	6860      	ldr	r0, [r4, #4]
 800e128:	f7ff ff82 	bl	800e030 <std>
 800e12c:	68a0      	ldr	r0, [r4, #8]
 800e12e:	2201      	movs	r2, #1
 800e130:	2109      	movs	r1, #9
 800e132:	f7ff ff7d 	bl	800e030 <std>
 800e136:	68e0      	ldr	r0, [r4, #12]
 800e138:	2202      	movs	r2, #2
 800e13a:	2112      	movs	r1, #18
 800e13c:	f7ff ff78 	bl	800e030 <std>
 800e140:	2301      	movs	r3, #1
 800e142:	61a3      	str	r3, [r4, #24]
 800e144:	e7d2      	b.n	800e0ec <__sinit+0xc>
 800e146:	bf00      	nop
 800e148:	0800fa04 	.word	0x0800fa04
 800e14c:	0800e079 	.word	0x0800e079

0800e150 <__sfp>:
 800e150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e152:	4607      	mov	r7, r0
 800e154:	f7ff ffac 	bl	800e0b0 <__sfp_lock_acquire>
 800e158:	4b1e      	ldr	r3, [pc, #120]	; (800e1d4 <__sfp+0x84>)
 800e15a:	681e      	ldr	r6, [r3, #0]
 800e15c:	69b3      	ldr	r3, [r6, #24]
 800e15e:	b913      	cbnz	r3, 800e166 <__sfp+0x16>
 800e160:	4630      	mov	r0, r6
 800e162:	f7ff ffbd 	bl	800e0e0 <__sinit>
 800e166:	3648      	adds	r6, #72	; 0x48
 800e168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e16c:	3b01      	subs	r3, #1
 800e16e:	d503      	bpl.n	800e178 <__sfp+0x28>
 800e170:	6833      	ldr	r3, [r6, #0]
 800e172:	b30b      	cbz	r3, 800e1b8 <__sfp+0x68>
 800e174:	6836      	ldr	r6, [r6, #0]
 800e176:	e7f7      	b.n	800e168 <__sfp+0x18>
 800e178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e17c:	b9d5      	cbnz	r5, 800e1b4 <__sfp+0x64>
 800e17e:	4b16      	ldr	r3, [pc, #88]	; (800e1d8 <__sfp+0x88>)
 800e180:	60e3      	str	r3, [r4, #12]
 800e182:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e186:	6665      	str	r5, [r4, #100]	; 0x64
 800e188:	f000 f84c 	bl	800e224 <__retarget_lock_init_recursive>
 800e18c:	f7ff ff96 	bl	800e0bc <__sfp_lock_release>
 800e190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e198:	6025      	str	r5, [r4, #0]
 800e19a:	61a5      	str	r5, [r4, #24]
 800e19c:	2208      	movs	r2, #8
 800e19e:	4629      	mov	r1, r5
 800e1a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e1a4:	f7fe fada 	bl	800c75c <memset>
 800e1a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e1ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1b4:	3468      	adds	r4, #104	; 0x68
 800e1b6:	e7d9      	b.n	800e16c <__sfp+0x1c>
 800e1b8:	2104      	movs	r1, #4
 800e1ba:	4638      	mov	r0, r7
 800e1bc:	f7ff ff62 	bl	800e084 <__sfmoreglue>
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	6030      	str	r0, [r6, #0]
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d1d5      	bne.n	800e174 <__sfp+0x24>
 800e1c8:	f7ff ff78 	bl	800e0bc <__sfp_lock_release>
 800e1cc:	230c      	movs	r3, #12
 800e1ce:	603b      	str	r3, [r7, #0]
 800e1d0:	e7ee      	b.n	800e1b0 <__sfp+0x60>
 800e1d2:	bf00      	nop
 800e1d4:	0800fa04 	.word	0x0800fa04
 800e1d8:	ffff0001 	.word	0xffff0001

0800e1dc <_fwalk_reent>:
 800e1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e0:	4606      	mov	r6, r0
 800e1e2:	4688      	mov	r8, r1
 800e1e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1e8:	2700      	movs	r7, #0
 800e1ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1ee:	f1b9 0901 	subs.w	r9, r9, #1
 800e1f2:	d505      	bpl.n	800e200 <_fwalk_reent+0x24>
 800e1f4:	6824      	ldr	r4, [r4, #0]
 800e1f6:	2c00      	cmp	r4, #0
 800e1f8:	d1f7      	bne.n	800e1ea <_fwalk_reent+0xe>
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e200:	89ab      	ldrh	r3, [r5, #12]
 800e202:	2b01      	cmp	r3, #1
 800e204:	d907      	bls.n	800e216 <_fwalk_reent+0x3a>
 800e206:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e20a:	3301      	adds	r3, #1
 800e20c:	d003      	beq.n	800e216 <_fwalk_reent+0x3a>
 800e20e:	4629      	mov	r1, r5
 800e210:	4630      	mov	r0, r6
 800e212:	47c0      	blx	r8
 800e214:	4307      	orrs	r7, r0
 800e216:	3568      	adds	r5, #104	; 0x68
 800e218:	e7e9      	b.n	800e1ee <_fwalk_reent+0x12>
	...

0800e21c <_localeconv_r>:
 800e21c:	4800      	ldr	r0, [pc, #0]	; (800e220 <_localeconv_r+0x4>)
 800e21e:	4770      	bx	lr
 800e220:	24000174 	.word	0x24000174

0800e224 <__retarget_lock_init_recursive>:
 800e224:	4770      	bx	lr

0800e226 <__retarget_lock_acquire_recursive>:
 800e226:	4770      	bx	lr

0800e228 <__retarget_lock_release_recursive>:
 800e228:	4770      	bx	lr

0800e22a <__swhatbuf_r>:
 800e22a:	b570      	push	{r4, r5, r6, lr}
 800e22c:	460e      	mov	r6, r1
 800e22e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e232:	2900      	cmp	r1, #0
 800e234:	b096      	sub	sp, #88	; 0x58
 800e236:	4614      	mov	r4, r2
 800e238:	461d      	mov	r5, r3
 800e23a:	da07      	bge.n	800e24c <__swhatbuf_r+0x22>
 800e23c:	2300      	movs	r3, #0
 800e23e:	602b      	str	r3, [r5, #0]
 800e240:	89b3      	ldrh	r3, [r6, #12]
 800e242:	061a      	lsls	r2, r3, #24
 800e244:	d410      	bmi.n	800e268 <__swhatbuf_r+0x3e>
 800e246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e24a:	e00e      	b.n	800e26a <__swhatbuf_r+0x40>
 800e24c:	466a      	mov	r2, sp
 800e24e:	f000 fe9f 	bl	800ef90 <_fstat_r>
 800e252:	2800      	cmp	r0, #0
 800e254:	dbf2      	blt.n	800e23c <__swhatbuf_r+0x12>
 800e256:	9a01      	ldr	r2, [sp, #4]
 800e258:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e25c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e260:	425a      	negs	r2, r3
 800e262:	415a      	adcs	r2, r3
 800e264:	602a      	str	r2, [r5, #0]
 800e266:	e7ee      	b.n	800e246 <__swhatbuf_r+0x1c>
 800e268:	2340      	movs	r3, #64	; 0x40
 800e26a:	2000      	movs	r0, #0
 800e26c:	6023      	str	r3, [r4, #0]
 800e26e:	b016      	add	sp, #88	; 0x58
 800e270:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e274 <__smakebuf_r>:
 800e274:	898b      	ldrh	r3, [r1, #12]
 800e276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e278:	079d      	lsls	r5, r3, #30
 800e27a:	4606      	mov	r6, r0
 800e27c:	460c      	mov	r4, r1
 800e27e:	d507      	bpl.n	800e290 <__smakebuf_r+0x1c>
 800e280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	6123      	str	r3, [r4, #16]
 800e288:	2301      	movs	r3, #1
 800e28a:	6163      	str	r3, [r4, #20]
 800e28c:	b002      	add	sp, #8
 800e28e:	bd70      	pop	{r4, r5, r6, pc}
 800e290:	ab01      	add	r3, sp, #4
 800e292:	466a      	mov	r2, sp
 800e294:	f7ff ffc9 	bl	800e22a <__swhatbuf_r>
 800e298:	9900      	ldr	r1, [sp, #0]
 800e29a:	4605      	mov	r5, r0
 800e29c:	4630      	mov	r0, r6
 800e29e:	f000 fc1d 	bl	800eadc <_malloc_r>
 800e2a2:	b948      	cbnz	r0, 800e2b8 <__smakebuf_r+0x44>
 800e2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2a8:	059a      	lsls	r2, r3, #22
 800e2aa:	d4ef      	bmi.n	800e28c <__smakebuf_r+0x18>
 800e2ac:	f023 0303 	bic.w	r3, r3, #3
 800e2b0:	f043 0302 	orr.w	r3, r3, #2
 800e2b4:	81a3      	strh	r3, [r4, #12]
 800e2b6:	e7e3      	b.n	800e280 <__smakebuf_r+0xc>
 800e2b8:	4b0d      	ldr	r3, [pc, #52]	; (800e2f0 <__smakebuf_r+0x7c>)
 800e2ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800e2bc:	89a3      	ldrh	r3, [r4, #12]
 800e2be:	6020      	str	r0, [r4, #0]
 800e2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2c4:	81a3      	strh	r3, [r4, #12]
 800e2c6:	9b00      	ldr	r3, [sp, #0]
 800e2c8:	6163      	str	r3, [r4, #20]
 800e2ca:	9b01      	ldr	r3, [sp, #4]
 800e2cc:	6120      	str	r0, [r4, #16]
 800e2ce:	b15b      	cbz	r3, 800e2e8 <__smakebuf_r+0x74>
 800e2d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	f000 fe6d 	bl	800efb4 <_isatty_r>
 800e2da:	b128      	cbz	r0, 800e2e8 <__smakebuf_r+0x74>
 800e2dc:	89a3      	ldrh	r3, [r4, #12]
 800e2de:	f023 0303 	bic.w	r3, r3, #3
 800e2e2:	f043 0301 	orr.w	r3, r3, #1
 800e2e6:	81a3      	strh	r3, [r4, #12]
 800e2e8:	89a0      	ldrh	r0, [r4, #12]
 800e2ea:	4305      	orrs	r5, r0
 800e2ec:	81a5      	strh	r5, [r4, #12]
 800e2ee:	e7cd      	b.n	800e28c <__smakebuf_r+0x18>
 800e2f0:	0800e079 	.word	0x0800e079

0800e2f4 <malloc>:
 800e2f4:	4b02      	ldr	r3, [pc, #8]	; (800e300 <malloc+0xc>)
 800e2f6:	4601      	mov	r1, r0
 800e2f8:	6818      	ldr	r0, [r3, #0]
 800e2fa:	f000 bbef 	b.w	800eadc <_malloc_r>
 800e2fe:	bf00      	nop
 800e300:	24000020 	.word	0x24000020

0800e304 <memcpy>:
 800e304:	440a      	add	r2, r1
 800e306:	4291      	cmp	r1, r2
 800e308:	f100 33ff 	add.w	r3, r0, #4294967295
 800e30c:	d100      	bne.n	800e310 <memcpy+0xc>
 800e30e:	4770      	bx	lr
 800e310:	b510      	push	{r4, lr}
 800e312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e31a:	4291      	cmp	r1, r2
 800e31c:	d1f9      	bne.n	800e312 <memcpy+0xe>
 800e31e:	bd10      	pop	{r4, pc}

0800e320 <_Balloc>:
 800e320:	b570      	push	{r4, r5, r6, lr}
 800e322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e324:	4604      	mov	r4, r0
 800e326:	460d      	mov	r5, r1
 800e328:	b976      	cbnz	r6, 800e348 <_Balloc+0x28>
 800e32a:	2010      	movs	r0, #16
 800e32c:	f7ff ffe2 	bl	800e2f4 <malloc>
 800e330:	4602      	mov	r2, r0
 800e332:	6260      	str	r0, [r4, #36]	; 0x24
 800e334:	b920      	cbnz	r0, 800e340 <_Balloc+0x20>
 800e336:	4b18      	ldr	r3, [pc, #96]	; (800e398 <_Balloc+0x78>)
 800e338:	4818      	ldr	r0, [pc, #96]	; (800e39c <_Balloc+0x7c>)
 800e33a:	2166      	movs	r1, #102	; 0x66
 800e33c:	f000 fde8 	bl	800ef10 <__assert_func>
 800e340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e344:	6006      	str	r6, [r0, #0]
 800e346:	60c6      	str	r6, [r0, #12]
 800e348:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e34a:	68f3      	ldr	r3, [r6, #12]
 800e34c:	b183      	cbz	r3, 800e370 <_Balloc+0x50>
 800e34e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e356:	b9b8      	cbnz	r0, 800e388 <_Balloc+0x68>
 800e358:	2101      	movs	r1, #1
 800e35a:	fa01 f605 	lsl.w	r6, r1, r5
 800e35e:	1d72      	adds	r2, r6, #5
 800e360:	0092      	lsls	r2, r2, #2
 800e362:	4620      	mov	r0, r4
 800e364:	f000 fb5a 	bl	800ea1c <_calloc_r>
 800e368:	b160      	cbz	r0, 800e384 <_Balloc+0x64>
 800e36a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e36e:	e00e      	b.n	800e38e <_Balloc+0x6e>
 800e370:	2221      	movs	r2, #33	; 0x21
 800e372:	2104      	movs	r1, #4
 800e374:	4620      	mov	r0, r4
 800e376:	f000 fb51 	bl	800ea1c <_calloc_r>
 800e37a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e37c:	60f0      	str	r0, [r6, #12]
 800e37e:	68db      	ldr	r3, [r3, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d1e4      	bne.n	800e34e <_Balloc+0x2e>
 800e384:	2000      	movs	r0, #0
 800e386:	bd70      	pop	{r4, r5, r6, pc}
 800e388:	6802      	ldr	r2, [r0, #0]
 800e38a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e38e:	2300      	movs	r3, #0
 800e390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e394:	e7f7      	b.n	800e386 <_Balloc+0x66>
 800e396:	bf00      	nop
 800e398:	0800fa49 	.word	0x0800fa49
 800e39c:	0800fb30 	.word	0x0800fb30

0800e3a0 <_Bfree>:
 800e3a0:	b570      	push	{r4, r5, r6, lr}
 800e3a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e3a4:	4605      	mov	r5, r0
 800e3a6:	460c      	mov	r4, r1
 800e3a8:	b976      	cbnz	r6, 800e3c8 <_Bfree+0x28>
 800e3aa:	2010      	movs	r0, #16
 800e3ac:	f7ff ffa2 	bl	800e2f4 <malloc>
 800e3b0:	4602      	mov	r2, r0
 800e3b2:	6268      	str	r0, [r5, #36]	; 0x24
 800e3b4:	b920      	cbnz	r0, 800e3c0 <_Bfree+0x20>
 800e3b6:	4b09      	ldr	r3, [pc, #36]	; (800e3dc <_Bfree+0x3c>)
 800e3b8:	4809      	ldr	r0, [pc, #36]	; (800e3e0 <_Bfree+0x40>)
 800e3ba:	218a      	movs	r1, #138	; 0x8a
 800e3bc:	f000 fda8 	bl	800ef10 <__assert_func>
 800e3c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e3c4:	6006      	str	r6, [r0, #0]
 800e3c6:	60c6      	str	r6, [r0, #12]
 800e3c8:	b13c      	cbz	r4, 800e3da <_Bfree+0x3a>
 800e3ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e3cc:	6862      	ldr	r2, [r4, #4]
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3d4:	6021      	str	r1, [r4, #0]
 800e3d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e3da:	bd70      	pop	{r4, r5, r6, pc}
 800e3dc:	0800fa49 	.word	0x0800fa49
 800e3e0:	0800fb30 	.word	0x0800fb30

0800e3e4 <__multadd>:
 800e3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3e8:	690e      	ldr	r6, [r1, #16]
 800e3ea:	4607      	mov	r7, r0
 800e3ec:	4698      	mov	r8, r3
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	f101 0014 	add.w	r0, r1, #20
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	6805      	ldr	r5, [r0, #0]
 800e3f8:	b2a9      	uxth	r1, r5
 800e3fa:	fb02 8101 	mla	r1, r2, r1, r8
 800e3fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e402:	0c2d      	lsrs	r5, r5, #16
 800e404:	fb02 c505 	mla	r5, r2, r5, ip
 800e408:	b289      	uxth	r1, r1
 800e40a:	3301      	adds	r3, #1
 800e40c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e410:	429e      	cmp	r6, r3
 800e412:	f840 1b04 	str.w	r1, [r0], #4
 800e416:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e41a:	dcec      	bgt.n	800e3f6 <__multadd+0x12>
 800e41c:	f1b8 0f00 	cmp.w	r8, #0
 800e420:	d022      	beq.n	800e468 <__multadd+0x84>
 800e422:	68a3      	ldr	r3, [r4, #8]
 800e424:	42b3      	cmp	r3, r6
 800e426:	dc19      	bgt.n	800e45c <__multadd+0x78>
 800e428:	6861      	ldr	r1, [r4, #4]
 800e42a:	4638      	mov	r0, r7
 800e42c:	3101      	adds	r1, #1
 800e42e:	f7ff ff77 	bl	800e320 <_Balloc>
 800e432:	4605      	mov	r5, r0
 800e434:	b928      	cbnz	r0, 800e442 <__multadd+0x5e>
 800e436:	4602      	mov	r2, r0
 800e438:	4b0d      	ldr	r3, [pc, #52]	; (800e470 <__multadd+0x8c>)
 800e43a:	480e      	ldr	r0, [pc, #56]	; (800e474 <__multadd+0x90>)
 800e43c:	21b5      	movs	r1, #181	; 0xb5
 800e43e:	f000 fd67 	bl	800ef10 <__assert_func>
 800e442:	6922      	ldr	r2, [r4, #16]
 800e444:	3202      	adds	r2, #2
 800e446:	f104 010c 	add.w	r1, r4, #12
 800e44a:	0092      	lsls	r2, r2, #2
 800e44c:	300c      	adds	r0, #12
 800e44e:	f7ff ff59 	bl	800e304 <memcpy>
 800e452:	4621      	mov	r1, r4
 800e454:	4638      	mov	r0, r7
 800e456:	f7ff ffa3 	bl	800e3a0 <_Bfree>
 800e45a:	462c      	mov	r4, r5
 800e45c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e460:	3601      	adds	r6, #1
 800e462:	f8c3 8014 	str.w	r8, [r3, #20]
 800e466:	6126      	str	r6, [r4, #16]
 800e468:	4620      	mov	r0, r4
 800e46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e46e:	bf00      	nop
 800e470:	0800fabf 	.word	0x0800fabf
 800e474:	0800fb30 	.word	0x0800fb30

0800e478 <__hi0bits>:
 800e478:	0c03      	lsrs	r3, r0, #16
 800e47a:	041b      	lsls	r3, r3, #16
 800e47c:	b9d3      	cbnz	r3, 800e4b4 <__hi0bits+0x3c>
 800e47e:	0400      	lsls	r0, r0, #16
 800e480:	2310      	movs	r3, #16
 800e482:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e486:	bf04      	itt	eq
 800e488:	0200      	lsleq	r0, r0, #8
 800e48a:	3308      	addeq	r3, #8
 800e48c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e490:	bf04      	itt	eq
 800e492:	0100      	lsleq	r0, r0, #4
 800e494:	3304      	addeq	r3, #4
 800e496:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e49a:	bf04      	itt	eq
 800e49c:	0080      	lsleq	r0, r0, #2
 800e49e:	3302      	addeq	r3, #2
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	db05      	blt.n	800e4b0 <__hi0bits+0x38>
 800e4a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e4a8:	f103 0301 	add.w	r3, r3, #1
 800e4ac:	bf08      	it	eq
 800e4ae:	2320      	moveq	r3, #32
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	4770      	bx	lr
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	e7e4      	b.n	800e482 <__hi0bits+0xa>

0800e4b8 <__lo0bits>:
 800e4b8:	6803      	ldr	r3, [r0, #0]
 800e4ba:	f013 0207 	ands.w	r2, r3, #7
 800e4be:	4601      	mov	r1, r0
 800e4c0:	d00b      	beq.n	800e4da <__lo0bits+0x22>
 800e4c2:	07da      	lsls	r2, r3, #31
 800e4c4:	d424      	bmi.n	800e510 <__lo0bits+0x58>
 800e4c6:	0798      	lsls	r0, r3, #30
 800e4c8:	bf49      	itett	mi
 800e4ca:	085b      	lsrmi	r3, r3, #1
 800e4cc:	089b      	lsrpl	r3, r3, #2
 800e4ce:	2001      	movmi	r0, #1
 800e4d0:	600b      	strmi	r3, [r1, #0]
 800e4d2:	bf5c      	itt	pl
 800e4d4:	600b      	strpl	r3, [r1, #0]
 800e4d6:	2002      	movpl	r0, #2
 800e4d8:	4770      	bx	lr
 800e4da:	b298      	uxth	r0, r3
 800e4dc:	b9b0      	cbnz	r0, 800e50c <__lo0bits+0x54>
 800e4de:	0c1b      	lsrs	r3, r3, #16
 800e4e0:	2010      	movs	r0, #16
 800e4e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e4e6:	bf04      	itt	eq
 800e4e8:	0a1b      	lsreq	r3, r3, #8
 800e4ea:	3008      	addeq	r0, #8
 800e4ec:	071a      	lsls	r2, r3, #28
 800e4ee:	bf04      	itt	eq
 800e4f0:	091b      	lsreq	r3, r3, #4
 800e4f2:	3004      	addeq	r0, #4
 800e4f4:	079a      	lsls	r2, r3, #30
 800e4f6:	bf04      	itt	eq
 800e4f8:	089b      	lsreq	r3, r3, #2
 800e4fa:	3002      	addeq	r0, #2
 800e4fc:	07da      	lsls	r2, r3, #31
 800e4fe:	d403      	bmi.n	800e508 <__lo0bits+0x50>
 800e500:	085b      	lsrs	r3, r3, #1
 800e502:	f100 0001 	add.w	r0, r0, #1
 800e506:	d005      	beq.n	800e514 <__lo0bits+0x5c>
 800e508:	600b      	str	r3, [r1, #0]
 800e50a:	4770      	bx	lr
 800e50c:	4610      	mov	r0, r2
 800e50e:	e7e8      	b.n	800e4e2 <__lo0bits+0x2a>
 800e510:	2000      	movs	r0, #0
 800e512:	4770      	bx	lr
 800e514:	2020      	movs	r0, #32
 800e516:	4770      	bx	lr

0800e518 <__i2b>:
 800e518:	b510      	push	{r4, lr}
 800e51a:	460c      	mov	r4, r1
 800e51c:	2101      	movs	r1, #1
 800e51e:	f7ff feff 	bl	800e320 <_Balloc>
 800e522:	4602      	mov	r2, r0
 800e524:	b928      	cbnz	r0, 800e532 <__i2b+0x1a>
 800e526:	4b05      	ldr	r3, [pc, #20]	; (800e53c <__i2b+0x24>)
 800e528:	4805      	ldr	r0, [pc, #20]	; (800e540 <__i2b+0x28>)
 800e52a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e52e:	f000 fcef 	bl	800ef10 <__assert_func>
 800e532:	2301      	movs	r3, #1
 800e534:	6144      	str	r4, [r0, #20]
 800e536:	6103      	str	r3, [r0, #16]
 800e538:	bd10      	pop	{r4, pc}
 800e53a:	bf00      	nop
 800e53c:	0800fabf 	.word	0x0800fabf
 800e540:	0800fb30 	.word	0x0800fb30

0800e544 <__multiply>:
 800e544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e548:	4614      	mov	r4, r2
 800e54a:	690a      	ldr	r2, [r1, #16]
 800e54c:	6923      	ldr	r3, [r4, #16]
 800e54e:	429a      	cmp	r2, r3
 800e550:	bfb8      	it	lt
 800e552:	460b      	movlt	r3, r1
 800e554:	460d      	mov	r5, r1
 800e556:	bfbc      	itt	lt
 800e558:	4625      	movlt	r5, r4
 800e55a:	461c      	movlt	r4, r3
 800e55c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e560:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e564:	68ab      	ldr	r3, [r5, #8]
 800e566:	6869      	ldr	r1, [r5, #4]
 800e568:	eb0a 0709 	add.w	r7, sl, r9
 800e56c:	42bb      	cmp	r3, r7
 800e56e:	b085      	sub	sp, #20
 800e570:	bfb8      	it	lt
 800e572:	3101      	addlt	r1, #1
 800e574:	f7ff fed4 	bl	800e320 <_Balloc>
 800e578:	b930      	cbnz	r0, 800e588 <__multiply+0x44>
 800e57a:	4602      	mov	r2, r0
 800e57c:	4b42      	ldr	r3, [pc, #264]	; (800e688 <__multiply+0x144>)
 800e57e:	4843      	ldr	r0, [pc, #268]	; (800e68c <__multiply+0x148>)
 800e580:	f240 115d 	movw	r1, #349	; 0x15d
 800e584:	f000 fcc4 	bl	800ef10 <__assert_func>
 800e588:	f100 0614 	add.w	r6, r0, #20
 800e58c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e590:	4633      	mov	r3, r6
 800e592:	2200      	movs	r2, #0
 800e594:	4543      	cmp	r3, r8
 800e596:	d31e      	bcc.n	800e5d6 <__multiply+0x92>
 800e598:	f105 0c14 	add.w	ip, r5, #20
 800e59c:	f104 0314 	add.w	r3, r4, #20
 800e5a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e5a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e5a8:	9202      	str	r2, [sp, #8]
 800e5aa:	ebac 0205 	sub.w	r2, ip, r5
 800e5ae:	3a15      	subs	r2, #21
 800e5b0:	f022 0203 	bic.w	r2, r2, #3
 800e5b4:	3204      	adds	r2, #4
 800e5b6:	f105 0115 	add.w	r1, r5, #21
 800e5ba:	458c      	cmp	ip, r1
 800e5bc:	bf38      	it	cc
 800e5be:	2204      	movcc	r2, #4
 800e5c0:	9201      	str	r2, [sp, #4]
 800e5c2:	9a02      	ldr	r2, [sp, #8]
 800e5c4:	9303      	str	r3, [sp, #12]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d808      	bhi.n	800e5dc <__multiply+0x98>
 800e5ca:	2f00      	cmp	r7, #0
 800e5cc:	dc55      	bgt.n	800e67a <__multiply+0x136>
 800e5ce:	6107      	str	r7, [r0, #16]
 800e5d0:	b005      	add	sp, #20
 800e5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5d6:	f843 2b04 	str.w	r2, [r3], #4
 800e5da:	e7db      	b.n	800e594 <__multiply+0x50>
 800e5dc:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5e0:	f1ba 0f00 	cmp.w	sl, #0
 800e5e4:	d020      	beq.n	800e628 <__multiply+0xe4>
 800e5e6:	f105 0e14 	add.w	lr, r5, #20
 800e5ea:	46b1      	mov	r9, r6
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e5f2:	f8d9 b000 	ldr.w	fp, [r9]
 800e5f6:	b2a1      	uxth	r1, r4
 800e5f8:	fa1f fb8b 	uxth.w	fp, fp
 800e5fc:	fb0a b101 	mla	r1, sl, r1, fp
 800e600:	4411      	add	r1, r2
 800e602:	f8d9 2000 	ldr.w	r2, [r9]
 800e606:	0c24      	lsrs	r4, r4, #16
 800e608:	0c12      	lsrs	r2, r2, #16
 800e60a:	fb0a 2404 	mla	r4, sl, r4, r2
 800e60e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e612:	b289      	uxth	r1, r1
 800e614:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e618:	45f4      	cmp	ip, lr
 800e61a:	f849 1b04 	str.w	r1, [r9], #4
 800e61e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e622:	d8e4      	bhi.n	800e5ee <__multiply+0xaa>
 800e624:	9901      	ldr	r1, [sp, #4]
 800e626:	5072      	str	r2, [r6, r1]
 800e628:	9a03      	ldr	r2, [sp, #12]
 800e62a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e62e:	3304      	adds	r3, #4
 800e630:	f1b9 0f00 	cmp.w	r9, #0
 800e634:	d01f      	beq.n	800e676 <__multiply+0x132>
 800e636:	6834      	ldr	r4, [r6, #0]
 800e638:	f105 0114 	add.w	r1, r5, #20
 800e63c:	46b6      	mov	lr, r6
 800e63e:	f04f 0a00 	mov.w	sl, #0
 800e642:	880a      	ldrh	r2, [r1, #0]
 800e644:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e648:	fb09 b202 	mla	r2, r9, r2, fp
 800e64c:	4492      	add	sl, r2
 800e64e:	b2a4      	uxth	r4, r4
 800e650:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e654:	f84e 4b04 	str.w	r4, [lr], #4
 800e658:	f851 4b04 	ldr.w	r4, [r1], #4
 800e65c:	f8be 2000 	ldrh.w	r2, [lr]
 800e660:	0c24      	lsrs	r4, r4, #16
 800e662:	fb09 2404 	mla	r4, r9, r4, r2
 800e666:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e66a:	458c      	cmp	ip, r1
 800e66c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e670:	d8e7      	bhi.n	800e642 <__multiply+0xfe>
 800e672:	9a01      	ldr	r2, [sp, #4]
 800e674:	50b4      	str	r4, [r6, r2]
 800e676:	3604      	adds	r6, #4
 800e678:	e7a3      	b.n	800e5c2 <__multiply+0x7e>
 800e67a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1a5      	bne.n	800e5ce <__multiply+0x8a>
 800e682:	3f01      	subs	r7, #1
 800e684:	e7a1      	b.n	800e5ca <__multiply+0x86>
 800e686:	bf00      	nop
 800e688:	0800fabf 	.word	0x0800fabf
 800e68c:	0800fb30 	.word	0x0800fb30

0800e690 <__pow5mult>:
 800e690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e694:	4615      	mov	r5, r2
 800e696:	f012 0203 	ands.w	r2, r2, #3
 800e69a:	4606      	mov	r6, r0
 800e69c:	460f      	mov	r7, r1
 800e69e:	d007      	beq.n	800e6b0 <__pow5mult+0x20>
 800e6a0:	4c25      	ldr	r4, [pc, #148]	; (800e738 <__pow5mult+0xa8>)
 800e6a2:	3a01      	subs	r2, #1
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e6aa:	f7ff fe9b 	bl	800e3e4 <__multadd>
 800e6ae:	4607      	mov	r7, r0
 800e6b0:	10ad      	asrs	r5, r5, #2
 800e6b2:	d03d      	beq.n	800e730 <__pow5mult+0xa0>
 800e6b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e6b6:	b97c      	cbnz	r4, 800e6d8 <__pow5mult+0x48>
 800e6b8:	2010      	movs	r0, #16
 800e6ba:	f7ff fe1b 	bl	800e2f4 <malloc>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	6270      	str	r0, [r6, #36]	; 0x24
 800e6c2:	b928      	cbnz	r0, 800e6d0 <__pow5mult+0x40>
 800e6c4:	4b1d      	ldr	r3, [pc, #116]	; (800e73c <__pow5mult+0xac>)
 800e6c6:	481e      	ldr	r0, [pc, #120]	; (800e740 <__pow5mult+0xb0>)
 800e6c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e6cc:	f000 fc20 	bl	800ef10 <__assert_func>
 800e6d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6d4:	6004      	str	r4, [r0, #0]
 800e6d6:	60c4      	str	r4, [r0, #12]
 800e6d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e6dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6e0:	b94c      	cbnz	r4, 800e6f6 <__pow5mult+0x66>
 800e6e2:	f240 2171 	movw	r1, #625	; 0x271
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f7ff ff16 	bl	800e518 <__i2b>
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6f2:	4604      	mov	r4, r0
 800e6f4:	6003      	str	r3, [r0, #0]
 800e6f6:	f04f 0900 	mov.w	r9, #0
 800e6fa:	07eb      	lsls	r3, r5, #31
 800e6fc:	d50a      	bpl.n	800e714 <__pow5mult+0x84>
 800e6fe:	4639      	mov	r1, r7
 800e700:	4622      	mov	r2, r4
 800e702:	4630      	mov	r0, r6
 800e704:	f7ff ff1e 	bl	800e544 <__multiply>
 800e708:	4639      	mov	r1, r7
 800e70a:	4680      	mov	r8, r0
 800e70c:	4630      	mov	r0, r6
 800e70e:	f7ff fe47 	bl	800e3a0 <_Bfree>
 800e712:	4647      	mov	r7, r8
 800e714:	106d      	asrs	r5, r5, #1
 800e716:	d00b      	beq.n	800e730 <__pow5mult+0xa0>
 800e718:	6820      	ldr	r0, [r4, #0]
 800e71a:	b938      	cbnz	r0, 800e72c <__pow5mult+0x9c>
 800e71c:	4622      	mov	r2, r4
 800e71e:	4621      	mov	r1, r4
 800e720:	4630      	mov	r0, r6
 800e722:	f7ff ff0f 	bl	800e544 <__multiply>
 800e726:	6020      	str	r0, [r4, #0]
 800e728:	f8c0 9000 	str.w	r9, [r0]
 800e72c:	4604      	mov	r4, r0
 800e72e:	e7e4      	b.n	800e6fa <__pow5mult+0x6a>
 800e730:	4638      	mov	r0, r7
 800e732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e736:	bf00      	nop
 800e738:	0800fc80 	.word	0x0800fc80
 800e73c:	0800fa49 	.word	0x0800fa49
 800e740:	0800fb30 	.word	0x0800fb30

0800e744 <__lshift>:
 800e744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e748:	460c      	mov	r4, r1
 800e74a:	6849      	ldr	r1, [r1, #4]
 800e74c:	6923      	ldr	r3, [r4, #16]
 800e74e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e752:	68a3      	ldr	r3, [r4, #8]
 800e754:	4607      	mov	r7, r0
 800e756:	4691      	mov	r9, r2
 800e758:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e75c:	f108 0601 	add.w	r6, r8, #1
 800e760:	42b3      	cmp	r3, r6
 800e762:	db0b      	blt.n	800e77c <__lshift+0x38>
 800e764:	4638      	mov	r0, r7
 800e766:	f7ff fddb 	bl	800e320 <_Balloc>
 800e76a:	4605      	mov	r5, r0
 800e76c:	b948      	cbnz	r0, 800e782 <__lshift+0x3e>
 800e76e:	4602      	mov	r2, r0
 800e770:	4b28      	ldr	r3, [pc, #160]	; (800e814 <__lshift+0xd0>)
 800e772:	4829      	ldr	r0, [pc, #164]	; (800e818 <__lshift+0xd4>)
 800e774:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e778:	f000 fbca 	bl	800ef10 <__assert_func>
 800e77c:	3101      	adds	r1, #1
 800e77e:	005b      	lsls	r3, r3, #1
 800e780:	e7ee      	b.n	800e760 <__lshift+0x1c>
 800e782:	2300      	movs	r3, #0
 800e784:	f100 0114 	add.w	r1, r0, #20
 800e788:	f100 0210 	add.w	r2, r0, #16
 800e78c:	4618      	mov	r0, r3
 800e78e:	4553      	cmp	r3, sl
 800e790:	db33      	blt.n	800e7fa <__lshift+0xb6>
 800e792:	6920      	ldr	r0, [r4, #16]
 800e794:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e798:	f104 0314 	add.w	r3, r4, #20
 800e79c:	f019 091f 	ands.w	r9, r9, #31
 800e7a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e7a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e7a8:	d02b      	beq.n	800e802 <__lshift+0xbe>
 800e7aa:	f1c9 0e20 	rsb	lr, r9, #32
 800e7ae:	468a      	mov	sl, r1
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	6818      	ldr	r0, [r3, #0]
 800e7b4:	fa00 f009 	lsl.w	r0, r0, r9
 800e7b8:	4302      	orrs	r2, r0
 800e7ba:	f84a 2b04 	str.w	r2, [sl], #4
 800e7be:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7c2:	459c      	cmp	ip, r3
 800e7c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e7c8:	d8f3      	bhi.n	800e7b2 <__lshift+0x6e>
 800e7ca:	ebac 0304 	sub.w	r3, ip, r4
 800e7ce:	3b15      	subs	r3, #21
 800e7d0:	f023 0303 	bic.w	r3, r3, #3
 800e7d4:	3304      	adds	r3, #4
 800e7d6:	f104 0015 	add.w	r0, r4, #21
 800e7da:	4584      	cmp	ip, r0
 800e7dc:	bf38      	it	cc
 800e7de:	2304      	movcc	r3, #4
 800e7e0:	50ca      	str	r2, [r1, r3]
 800e7e2:	b10a      	cbz	r2, 800e7e8 <__lshift+0xa4>
 800e7e4:	f108 0602 	add.w	r6, r8, #2
 800e7e8:	3e01      	subs	r6, #1
 800e7ea:	4638      	mov	r0, r7
 800e7ec:	612e      	str	r6, [r5, #16]
 800e7ee:	4621      	mov	r1, r4
 800e7f0:	f7ff fdd6 	bl	800e3a0 <_Bfree>
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7fe:	3301      	adds	r3, #1
 800e800:	e7c5      	b.n	800e78e <__lshift+0x4a>
 800e802:	3904      	subs	r1, #4
 800e804:	f853 2b04 	ldr.w	r2, [r3], #4
 800e808:	f841 2f04 	str.w	r2, [r1, #4]!
 800e80c:	459c      	cmp	ip, r3
 800e80e:	d8f9      	bhi.n	800e804 <__lshift+0xc0>
 800e810:	e7ea      	b.n	800e7e8 <__lshift+0xa4>
 800e812:	bf00      	nop
 800e814:	0800fabf 	.word	0x0800fabf
 800e818:	0800fb30 	.word	0x0800fb30

0800e81c <__mcmp>:
 800e81c:	b530      	push	{r4, r5, lr}
 800e81e:	6902      	ldr	r2, [r0, #16]
 800e820:	690c      	ldr	r4, [r1, #16]
 800e822:	1b12      	subs	r2, r2, r4
 800e824:	d10e      	bne.n	800e844 <__mcmp+0x28>
 800e826:	f100 0314 	add.w	r3, r0, #20
 800e82a:	3114      	adds	r1, #20
 800e82c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e830:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e834:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e838:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e83c:	42a5      	cmp	r5, r4
 800e83e:	d003      	beq.n	800e848 <__mcmp+0x2c>
 800e840:	d305      	bcc.n	800e84e <__mcmp+0x32>
 800e842:	2201      	movs	r2, #1
 800e844:	4610      	mov	r0, r2
 800e846:	bd30      	pop	{r4, r5, pc}
 800e848:	4283      	cmp	r3, r0
 800e84a:	d3f3      	bcc.n	800e834 <__mcmp+0x18>
 800e84c:	e7fa      	b.n	800e844 <__mcmp+0x28>
 800e84e:	f04f 32ff 	mov.w	r2, #4294967295
 800e852:	e7f7      	b.n	800e844 <__mcmp+0x28>

0800e854 <__mdiff>:
 800e854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e858:	460c      	mov	r4, r1
 800e85a:	4606      	mov	r6, r0
 800e85c:	4611      	mov	r1, r2
 800e85e:	4620      	mov	r0, r4
 800e860:	4617      	mov	r7, r2
 800e862:	f7ff ffdb 	bl	800e81c <__mcmp>
 800e866:	1e05      	subs	r5, r0, #0
 800e868:	d110      	bne.n	800e88c <__mdiff+0x38>
 800e86a:	4629      	mov	r1, r5
 800e86c:	4630      	mov	r0, r6
 800e86e:	f7ff fd57 	bl	800e320 <_Balloc>
 800e872:	b930      	cbnz	r0, 800e882 <__mdiff+0x2e>
 800e874:	4b39      	ldr	r3, [pc, #228]	; (800e95c <__mdiff+0x108>)
 800e876:	4602      	mov	r2, r0
 800e878:	f240 2132 	movw	r1, #562	; 0x232
 800e87c:	4838      	ldr	r0, [pc, #224]	; (800e960 <__mdiff+0x10c>)
 800e87e:	f000 fb47 	bl	800ef10 <__assert_func>
 800e882:	2301      	movs	r3, #1
 800e884:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88c:	bfa4      	itt	ge
 800e88e:	463b      	movge	r3, r7
 800e890:	4627      	movge	r7, r4
 800e892:	4630      	mov	r0, r6
 800e894:	6879      	ldr	r1, [r7, #4]
 800e896:	bfa6      	itte	ge
 800e898:	461c      	movge	r4, r3
 800e89a:	2500      	movge	r5, #0
 800e89c:	2501      	movlt	r5, #1
 800e89e:	f7ff fd3f 	bl	800e320 <_Balloc>
 800e8a2:	b920      	cbnz	r0, 800e8ae <__mdiff+0x5a>
 800e8a4:	4b2d      	ldr	r3, [pc, #180]	; (800e95c <__mdiff+0x108>)
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e8ac:	e7e6      	b.n	800e87c <__mdiff+0x28>
 800e8ae:	693e      	ldr	r6, [r7, #16]
 800e8b0:	60c5      	str	r5, [r0, #12]
 800e8b2:	6925      	ldr	r5, [r4, #16]
 800e8b4:	f107 0114 	add.w	r1, r7, #20
 800e8b8:	f104 0914 	add.w	r9, r4, #20
 800e8bc:	f100 0e14 	add.w	lr, r0, #20
 800e8c0:	f107 0210 	add.w	r2, r7, #16
 800e8c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e8c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e8cc:	46f2      	mov	sl, lr
 800e8ce:	2700      	movs	r7, #0
 800e8d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8d8:	fa1f f883 	uxth.w	r8, r3
 800e8dc:	fa17 f78b 	uxtah	r7, r7, fp
 800e8e0:	0c1b      	lsrs	r3, r3, #16
 800e8e2:	eba7 0808 	sub.w	r8, r7, r8
 800e8e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e8ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e8ee:	fa1f f888 	uxth.w	r8, r8
 800e8f2:	141f      	asrs	r7, r3, #16
 800e8f4:	454d      	cmp	r5, r9
 800e8f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e8fa:	f84a 3b04 	str.w	r3, [sl], #4
 800e8fe:	d8e7      	bhi.n	800e8d0 <__mdiff+0x7c>
 800e900:	1b2b      	subs	r3, r5, r4
 800e902:	3b15      	subs	r3, #21
 800e904:	f023 0303 	bic.w	r3, r3, #3
 800e908:	3304      	adds	r3, #4
 800e90a:	3415      	adds	r4, #21
 800e90c:	42a5      	cmp	r5, r4
 800e90e:	bf38      	it	cc
 800e910:	2304      	movcc	r3, #4
 800e912:	4419      	add	r1, r3
 800e914:	4473      	add	r3, lr
 800e916:	469e      	mov	lr, r3
 800e918:	460d      	mov	r5, r1
 800e91a:	4565      	cmp	r5, ip
 800e91c:	d30e      	bcc.n	800e93c <__mdiff+0xe8>
 800e91e:	f10c 0203 	add.w	r2, ip, #3
 800e922:	1a52      	subs	r2, r2, r1
 800e924:	f022 0203 	bic.w	r2, r2, #3
 800e928:	3903      	subs	r1, #3
 800e92a:	458c      	cmp	ip, r1
 800e92c:	bf38      	it	cc
 800e92e:	2200      	movcc	r2, #0
 800e930:	441a      	add	r2, r3
 800e932:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e936:	b17b      	cbz	r3, 800e958 <__mdiff+0x104>
 800e938:	6106      	str	r6, [r0, #16]
 800e93a:	e7a5      	b.n	800e888 <__mdiff+0x34>
 800e93c:	f855 8b04 	ldr.w	r8, [r5], #4
 800e940:	fa17 f488 	uxtah	r4, r7, r8
 800e944:	1422      	asrs	r2, r4, #16
 800e946:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e94a:	b2a4      	uxth	r4, r4
 800e94c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e950:	f84e 4b04 	str.w	r4, [lr], #4
 800e954:	1417      	asrs	r7, r2, #16
 800e956:	e7e0      	b.n	800e91a <__mdiff+0xc6>
 800e958:	3e01      	subs	r6, #1
 800e95a:	e7ea      	b.n	800e932 <__mdiff+0xde>
 800e95c:	0800fabf 	.word	0x0800fabf
 800e960:	0800fb30 	.word	0x0800fb30

0800e964 <__d2b>:
 800e964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e968:	4689      	mov	r9, r1
 800e96a:	2101      	movs	r1, #1
 800e96c:	ec57 6b10 	vmov	r6, r7, d0
 800e970:	4690      	mov	r8, r2
 800e972:	f7ff fcd5 	bl	800e320 <_Balloc>
 800e976:	4604      	mov	r4, r0
 800e978:	b930      	cbnz	r0, 800e988 <__d2b+0x24>
 800e97a:	4602      	mov	r2, r0
 800e97c:	4b25      	ldr	r3, [pc, #148]	; (800ea14 <__d2b+0xb0>)
 800e97e:	4826      	ldr	r0, [pc, #152]	; (800ea18 <__d2b+0xb4>)
 800e980:	f240 310a 	movw	r1, #778	; 0x30a
 800e984:	f000 fac4 	bl	800ef10 <__assert_func>
 800e988:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e98c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e990:	bb35      	cbnz	r5, 800e9e0 <__d2b+0x7c>
 800e992:	2e00      	cmp	r6, #0
 800e994:	9301      	str	r3, [sp, #4]
 800e996:	d028      	beq.n	800e9ea <__d2b+0x86>
 800e998:	4668      	mov	r0, sp
 800e99a:	9600      	str	r6, [sp, #0]
 800e99c:	f7ff fd8c 	bl	800e4b8 <__lo0bits>
 800e9a0:	9900      	ldr	r1, [sp, #0]
 800e9a2:	b300      	cbz	r0, 800e9e6 <__d2b+0x82>
 800e9a4:	9a01      	ldr	r2, [sp, #4]
 800e9a6:	f1c0 0320 	rsb	r3, r0, #32
 800e9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800e9ae:	430b      	orrs	r3, r1
 800e9b0:	40c2      	lsrs	r2, r0
 800e9b2:	6163      	str	r3, [r4, #20]
 800e9b4:	9201      	str	r2, [sp, #4]
 800e9b6:	9b01      	ldr	r3, [sp, #4]
 800e9b8:	61a3      	str	r3, [r4, #24]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	bf14      	ite	ne
 800e9be:	2202      	movne	r2, #2
 800e9c0:	2201      	moveq	r2, #1
 800e9c2:	6122      	str	r2, [r4, #16]
 800e9c4:	b1d5      	cbz	r5, 800e9fc <__d2b+0x98>
 800e9c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e9ca:	4405      	add	r5, r0
 800e9cc:	f8c9 5000 	str.w	r5, [r9]
 800e9d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e9d4:	f8c8 0000 	str.w	r0, [r8]
 800e9d8:	4620      	mov	r0, r4
 800e9da:	b003      	add	sp, #12
 800e9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e9e4:	e7d5      	b.n	800e992 <__d2b+0x2e>
 800e9e6:	6161      	str	r1, [r4, #20]
 800e9e8:	e7e5      	b.n	800e9b6 <__d2b+0x52>
 800e9ea:	a801      	add	r0, sp, #4
 800e9ec:	f7ff fd64 	bl	800e4b8 <__lo0bits>
 800e9f0:	9b01      	ldr	r3, [sp, #4]
 800e9f2:	6163      	str	r3, [r4, #20]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	6122      	str	r2, [r4, #16]
 800e9f8:	3020      	adds	r0, #32
 800e9fa:	e7e3      	b.n	800e9c4 <__d2b+0x60>
 800e9fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ea00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea04:	f8c9 0000 	str.w	r0, [r9]
 800ea08:	6918      	ldr	r0, [r3, #16]
 800ea0a:	f7ff fd35 	bl	800e478 <__hi0bits>
 800ea0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ea12:	e7df      	b.n	800e9d4 <__d2b+0x70>
 800ea14:	0800fabf 	.word	0x0800fabf
 800ea18:	0800fb30 	.word	0x0800fb30

0800ea1c <_calloc_r>:
 800ea1c:	b513      	push	{r0, r1, r4, lr}
 800ea1e:	434a      	muls	r2, r1
 800ea20:	4611      	mov	r1, r2
 800ea22:	9201      	str	r2, [sp, #4]
 800ea24:	f000 f85a 	bl	800eadc <_malloc_r>
 800ea28:	4604      	mov	r4, r0
 800ea2a:	b118      	cbz	r0, 800ea34 <_calloc_r+0x18>
 800ea2c:	9a01      	ldr	r2, [sp, #4]
 800ea2e:	2100      	movs	r1, #0
 800ea30:	f7fd fe94 	bl	800c75c <memset>
 800ea34:	4620      	mov	r0, r4
 800ea36:	b002      	add	sp, #8
 800ea38:	bd10      	pop	{r4, pc}
	...

0800ea3c <_free_r>:
 800ea3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea3e:	2900      	cmp	r1, #0
 800ea40:	d048      	beq.n	800ead4 <_free_r+0x98>
 800ea42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea46:	9001      	str	r0, [sp, #4]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ea4e:	bfb8      	it	lt
 800ea50:	18e4      	addlt	r4, r4, r3
 800ea52:	f000 fae3 	bl	800f01c <__malloc_lock>
 800ea56:	4a20      	ldr	r2, [pc, #128]	; (800ead8 <_free_r+0x9c>)
 800ea58:	9801      	ldr	r0, [sp, #4]
 800ea5a:	6813      	ldr	r3, [r2, #0]
 800ea5c:	4615      	mov	r5, r2
 800ea5e:	b933      	cbnz	r3, 800ea6e <_free_r+0x32>
 800ea60:	6063      	str	r3, [r4, #4]
 800ea62:	6014      	str	r4, [r2, #0]
 800ea64:	b003      	add	sp, #12
 800ea66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea6a:	f000 badd 	b.w	800f028 <__malloc_unlock>
 800ea6e:	42a3      	cmp	r3, r4
 800ea70:	d90b      	bls.n	800ea8a <_free_r+0x4e>
 800ea72:	6821      	ldr	r1, [r4, #0]
 800ea74:	1862      	adds	r2, r4, r1
 800ea76:	4293      	cmp	r3, r2
 800ea78:	bf04      	itt	eq
 800ea7a:	681a      	ldreq	r2, [r3, #0]
 800ea7c:	685b      	ldreq	r3, [r3, #4]
 800ea7e:	6063      	str	r3, [r4, #4]
 800ea80:	bf04      	itt	eq
 800ea82:	1852      	addeq	r2, r2, r1
 800ea84:	6022      	streq	r2, [r4, #0]
 800ea86:	602c      	str	r4, [r5, #0]
 800ea88:	e7ec      	b.n	800ea64 <_free_r+0x28>
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	b10b      	cbz	r3, 800ea94 <_free_r+0x58>
 800ea90:	42a3      	cmp	r3, r4
 800ea92:	d9fa      	bls.n	800ea8a <_free_r+0x4e>
 800ea94:	6811      	ldr	r1, [r2, #0]
 800ea96:	1855      	adds	r5, r2, r1
 800ea98:	42a5      	cmp	r5, r4
 800ea9a:	d10b      	bne.n	800eab4 <_free_r+0x78>
 800ea9c:	6824      	ldr	r4, [r4, #0]
 800ea9e:	4421      	add	r1, r4
 800eaa0:	1854      	adds	r4, r2, r1
 800eaa2:	42a3      	cmp	r3, r4
 800eaa4:	6011      	str	r1, [r2, #0]
 800eaa6:	d1dd      	bne.n	800ea64 <_free_r+0x28>
 800eaa8:	681c      	ldr	r4, [r3, #0]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	6053      	str	r3, [r2, #4]
 800eaae:	4421      	add	r1, r4
 800eab0:	6011      	str	r1, [r2, #0]
 800eab2:	e7d7      	b.n	800ea64 <_free_r+0x28>
 800eab4:	d902      	bls.n	800eabc <_free_r+0x80>
 800eab6:	230c      	movs	r3, #12
 800eab8:	6003      	str	r3, [r0, #0]
 800eaba:	e7d3      	b.n	800ea64 <_free_r+0x28>
 800eabc:	6825      	ldr	r5, [r4, #0]
 800eabe:	1961      	adds	r1, r4, r5
 800eac0:	428b      	cmp	r3, r1
 800eac2:	bf04      	itt	eq
 800eac4:	6819      	ldreq	r1, [r3, #0]
 800eac6:	685b      	ldreq	r3, [r3, #4]
 800eac8:	6063      	str	r3, [r4, #4]
 800eaca:	bf04      	itt	eq
 800eacc:	1949      	addeq	r1, r1, r5
 800eace:	6021      	streq	r1, [r4, #0]
 800ead0:	6054      	str	r4, [r2, #4]
 800ead2:	e7c7      	b.n	800ea64 <_free_r+0x28>
 800ead4:	b003      	add	sp, #12
 800ead6:	bd30      	pop	{r4, r5, pc}
 800ead8:	2400021c 	.word	0x2400021c

0800eadc <_malloc_r>:
 800eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eade:	1ccd      	adds	r5, r1, #3
 800eae0:	f025 0503 	bic.w	r5, r5, #3
 800eae4:	3508      	adds	r5, #8
 800eae6:	2d0c      	cmp	r5, #12
 800eae8:	bf38      	it	cc
 800eaea:	250c      	movcc	r5, #12
 800eaec:	2d00      	cmp	r5, #0
 800eaee:	4606      	mov	r6, r0
 800eaf0:	db01      	blt.n	800eaf6 <_malloc_r+0x1a>
 800eaf2:	42a9      	cmp	r1, r5
 800eaf4:	d903      	bls.n	800eafe <_malloc_r+0x22>
 800eaf6:	230c      	movs	r3, #12
 800eaf8:	6033      	str	r3, [r6, #0]
 800eafa:	2000      	movs	r0, #0
 800eafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eafe:	f000 fa8d 	bl	800f01c <__malloc_lock>
 800eb02:	4921      	ldr	r1, [pc, #132]	; (800eb88 <_malloc_r+0xac>)
 800eb04:	680a      	ldr	r2, [r1, #0]
 800eb06:	4614      	mov	r4, r2
 800eb08:	b99c      	cbnz	r4, 800eb32 <_malloc_r+0x56>
 800eb0a:	4f20      	ldr	r7, [pc, #128]	; (800eb8c <_malloc_r+0xb0>)
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	b923      	cbnz	r3, 800eb1a <_malloc_r+0x3e>
 800eb10:	4621      	mov	r1, r4
 800eb12:	4630      	mov	r0, r6
 800eb14:	f000 f996 	bl	800ee44 <_sbrk_r>
 800eb18:	6038      	str	r0, [r7, #0]
 800eb1a:	4629      	mov	r1, r5
 800eb1c:	4630      	mov	r0, r6
 800eb1e:	f000 f991 	bl	800ee44 <_sbrk_r>
 800eb22:	1c43      	adds	r3, r0, #1
 800eb24:	d123      	bne.n	800eb6e <_malloc_r+0x92>
 800eb26:	230c      	movs	r3, #12
 800eb28:	6033      	str	r3, [r6, #0]
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	f000 fa7c 	bl	800f028 <__malloc_unlock>
 800eb30:	e7e3      	b.n	800eafa <_malloc_r+0x1e>
 800eb32:	6823      	ldr	r3, [r4, #0]
 800eb34:	1b5b      	subs	r3, r3, r5
 800eb36:	d417      	bmi.n	800eb68 <_malloc_r+0x8c>
 800eb38:	2b0b      	cmp	r3, #11
 800eb3a:	d903      	bls.n	800eb44 <_malloc_r+0x68>
 800eb3c:	6023      	str	r3, [r4, #0]
 800eb3e:	441c      	add	r4, r3
 800eb40:	6025      	str	r5, [r4, #0]
 800eb42:	e004      	b.n	800eb4e <_malloc_r+0x72>
 800eb44:	6863      	ldr	r3, [r4, #4]
 800eb46:	42a2      	cmp	r2, r4
 800eb48:	bf0c      	ite	eq
 800eb4a:	600b      	streq	r3, [r1, #0]
 800eb4c:	6053      	strne	r3, [r2, #4]
 800eb4e:	4630      	mov	r0, r6
 800eb50:	f000 fa6a 	bl	800f028 <__malloc_unlock>
 800eb54:	f104 000b 	add.w	r0, r4, #11
 800eb58:	1d23      	adds	r3, r4, #4
 800eb5a:	f020 0007 	bic.w	r0, r0, #7
 800eb5e:	1ac2      	subs	r2, r0, r3
 800eb60:	d0cc      	beq.n	800eafc <_malloc_r+0x20>
 800eb62:	1a1b      	subs	r3, r3, r0
 800eb64:	50a3      	str	r3, [r4, r2]
 800eb66:	e7c9      	b.n	800eafc <_malloc_r+0x20>
 800eb68:	4622      	mov	r2, r4
 800eb6a:	6864      	ldr	r4, [r4, #4]
 800eb6c:	e7cc      	b.n	800eb08 <_malloc_r+0x2c>
 800eb6e:	1cc4      	adds	r4, r0, #3
 800eb70:	f024 0403 	bic.w	r4, r4, #3
 800eb74:	42a0      	cmp	r0, r4
 800eb76:	d0e3      	beq.n	800eb40 <_malloc_r+0x64>
 800eb78:	1a21      	subs	r1, r4, r0
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	f000 f962 	bl	800ee44 <_sbrk_r>
 800eb80:	3001      	adds	r0, #1
 800eb82:	d1dd      	bne.n	800eb40 <_malloc_r+0x64>
 800eb84:	e7cf      	b.n	800eb26 <_malloc_r+0x4a>
 800eb86:	bf00      	nop
 800eb88:	2400021c 	.word	0x2400021c
 800eb8c:	24000220 	.word	0x24000220

0800eb90 <__sfputc_r>:
 800eb90:	6893      	ldr	r3, [r2, #8]
 800eb92:	3b01      	subs	r3, #1
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	b410      	push	{r4}
 800eb98:	6093      	str	r3, [r2, #8]
 800eb9a:	da08      	bge.n	800ebae <__sfputc_r+0x1e>
 800eb9c:	6994      	ldr	r4, [r2, #24]
 800eb9e:	42a3      	cmp	r3, r4
 800eba0:	db01      	blt.n	800eba6 <__sfputc_r+0x16>
 800eba2:	290a      	cmp	r1, #10
 800eba4:	d103      	bne.n	800ebae <__sfputc_r+0x1e>
 800eba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebaa:	f7fe bab1 	b.w	800d110 <__swbuf_r>
 800ebae:	6813      	ldr	r3, [r2, #0]
 800ebb0:	1c58      	adds	r0, r3, #1
 800ebb2:	6010      	str	r0, [r2, #0]
 800ebb4:	7019      	strb	r1, [r3, #0]
 800ebb6:	4608      	mov	r0, r1
 800ebb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ebbc:	4770      	bx	lr

0800ebbe <__sfputs_r>:
 800ebbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	460f      	mov	r7, r1
 800ebc4:	4614      	mov	r4, r2
 800ebc6:	18d5      	adds	r5, r2, r3
 800ebc8:	42ac      	cmp	r4, r5
 800ebca:	d101      	bne.n	800ebd0 <__sfputs_r+0x12>
 800ebcc:	2000      	movs	r0, #0
 800ebce:	e007      	b.n	800ebe0 <__sfputs_r+0x22>
 800ebd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebd4:	463a      	mov	r2, r7
 800ebd6:	4630      	mov	r0, r6
 800ebd8:	f7ff ffda 	bl	800eb90 <__sfputc_r>
 800ebdc:	1c43      	adds	r3, r0, #1
 800ebde:	d1f3      	bne.n	800ebc8 <__sfputs_r+0xa>
 800ebe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebe4 <_vfiprintf_r>:
 800ebe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe8:	460d      	mov	r5, r1
 800ebea:	b09d      	sub	sp, #116	; 0x74
 800ebec:	4614      	mov	r4, r2
 800ebee:	4698      	mov	r8, r3
 800ebf0:	4606      	mov	r6, r0
 800ebf2:	b118      	cbz	r0, 800ebfc <_vfiprintf_r+0x18>
 800ebf4:	6983      	ldr	r3, [r0, #24]
 800ebf6:	b90b      	cbnz	r3, 800ebfc <_vfiprintf_r+0x18>
 800ebf8:	f7ff fa72 	bl	800e0e0 <__sinit>
 800ebfc:	4b89      	ldr	r3, [pc, #548]	; (800ee24 <_vfiprintf_r+0x240>)
 800ebfe:	429d      	cmp	r5, r3
 800ec00:	d11b      	bne.n	800ec3a <_vfiprintf_r+0x56>
 800ec02:	6875      	ldr	r5, [r6, #4]
 800ec04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec06:	07d9      	lsls	r1, r3, #31
 800ec08:	d405      	bmi.n	800ec16 <_vfiprintf_r+0x32>
 800ec0a:	89ab      	ldrh	r3, [r5, #12]
 800ec0c:	059a      	lsls	r2, r3, #22
 800ec0e:	d402      	bmi.n	800ec16 <_vfiprintf_r+0x32>
 800ec10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec12:	f7ff fb08 	bl	800e226 <__retarget_lock_acquire_recursive>
 800ec16:	89ab      	ldrh	r3, [r5, #12]
 800ec18:	071b      	lsls	r3, r3, #28
 800ec1a:	d501      	bpl.n	800ec20 <_vfiprintf_r+0x3c>
 800ec1c:	692b      	ldr	r3, [r5, #16]
 800ec1e:	b9eb      	cbnz	r3, 800ec5c <_vfiprintf_r+0x78>
 800ec20:	4629      	mov	r1, r5
 800ec22:	4630      	mov	r0, r6
 800ec24:	f7fe fac6 	bl	800d1b4 <__swsetup_r>
 800ec28:	b1c0      	cbz	r0, 800ec5c <_vfiprintf_r+0x78>
 800ec2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec2c:	07dc      	lsls	r4, r3, #31
 800ec2e:	d50e      	bpl.n	800ec4e <_vfiprintf_r+0x6a>
 800ec30:	f04f 30ff 	mov.w	r0, #4294967295
 800ec34:	b01d      	add	sp, #116	; 0x74
 800ec36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec3a:	4b7b      	ldr	r3, [pc, #492]	; (800ee28 <_vfiprintf_r+0x244>)
 800ec3c:	429d      	cmp	r5, r3
 800ec3e:	d101      	bne.n	800ec44 <_vfiprintf_r+0x60>
 800ec40:	68b5      	ldr	r5, [r6, #8]
 800ec42:	e7df      	b.n	800ec04 <_vfiprintf_r+0x20>
 800ec44:	4b79      	ldr	r3, [pc, #484]	; (800ee2c <_vfiprintf_r+0x248>)
 800ec46:	429d      	cmp	r5, r3
 800ec48:	bf08      	it	eq
 800ec4a:	68f5      	ldreq	r5, [r6, #12]
 800ec4c:	e7da      	b.n	800ec04 <_vfiprintf_r+0x20>
 800ec4e:	89ab      	ldrh	r3, [r5, #12]
 800ec50:	0598      	lsls	r0, r3, #22
 800ec52:	d4ed      	bmi.n	800ec30 <_vfiprintf_r+0x4c>
 800ec54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec56:	f7ff fae7 	bl	800e228 <__retarget_lock_release_recursive>
 800ec5a:	e7e9      	b.n	800ec30 <_vfiprintf_r+0x4c>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ec60:	2320      	movs	r3, #32
 800ec62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec6a:	2330      	movs	r3, #48	; 0x30
 800ec6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ee30 <_vfiprintf_r+0x24c>
 800ec70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec74:	f04f 0901 	mov.w	r9, #1
 800ec78:	4623      	mov	r3, r4
 800ec7a:	469a      	mov	sl, r3
 800ec7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec80:	b10a      	cbz	r2, 800ec86 <_vfiprintf_r+0xa2>
 800ec82:	2a25      	cmp	r2, #37	; 0x25
 800ec84:	d1f9      	bne.n	800ec7a <_vfiprintf_r+0x96>
 800ec86:	ebba 0b04 	subs.w	fp, sl, r4
 800ec8a:	d00b      	beq.n	800eca4 <_vfiprintf_r+0xc0>
 800ec8c:	465b      	mov	r3, fp
 800ec8e:	4622      	mov	r2, r4
 800ec90:	4629      	mov	r1, r5
 800ec92:	4630      	mov	r0, r6
 800ec94:	f7ff ff93 	bl	800ebbe <__sfputs_r>
 800ec98:	3001      	adds	r0, #1
 800ec9a:	f000 80aa 	beq.w	800edf2 <_vfiprintf_r+0x20e>
 800ec9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eca0:	445a      	add	r2, fp
 800eca2:	9209      	str	r2, [sp, #36]	; 0x24
 800eca4:	f89a 3000 	ldrb.w	r3, [sl]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f000 80a2 	beq.w	800edf2 <_vfiprintf_r+0x20e>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ecb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecb8:	f10a 0a01 	add.w	sl, sl, #1
 800ecbc:	9304      	str	r3, [sp, #16]
 800ecbe:	9307      	str	r3, [sp, #28]
 800ecc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecc4:	931a      	str	r3, [sp, #104]	; 0x68
 800ecc6:	4654      	mov	r4, sl
 800ecc8:	2205      	movs	r2, #5
 800ecca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecce:	4858      	ldr	r0, [pc, #352]	; (800ee30 <_vfiprintf_r+0x24c>)
 800ecd0:	f7f1 fb0e 	bl	80002f0 <memchr>
 800ecd4:	9a04      	ldr	r2, [sp, #16]
 800ecd6:	b9d8      	cbnz	r0, 800ed10 <_vfiprintf_r+0x12c>
 800ecd8:	06d1      	lsls	r1, r2, #27
 800ecda:	bf44      	itt	mi
 800ecdc:	2320      	movmi	r3, #32
 800ecde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ece2:	0713      	lsls	r3, r2, #28
 800ece4:	bf44      	itt	mi
 800ece6:	232b      	movmi	r3, #43	; 0x2b
 800ece8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecec:	f89a 3000 	ldrb.w	r3, [sl]
 800ecf0:	2b2a      	cmp	r3, #42	; 0x2a
 800ecf2:	d015      	beq.n	800ed20 <_vfiprintf_r+0x13c>
 800ecf4:	9a07      	ldr	r2, [sp, #28]
 800ecf6:	4654      	mov	r4, sl
 800ecf8:	2000      	movs	r0, #0
 800ecfa:	f04f 0c0a 	mov.w	ip, #10
 800ecfe:	4621      	mov	r1, r4
 800ed00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed04:	3b30      	subs	r3, #48	; 0x30
 800ed06:	2b09      	cmp	r3, #9
 800ed08:	d94e      	bls.n	800eda8 <_vfiprintf_r+0x1c4>
 800ed0a:	b1b0      	cbz	r0, 800ed3a <_vfiprintf_r+0x156>
 800ed0c:	9207      	str	r2, [sp, #28]
 800ed0e:	e014      	b.n	800ed3a <_vfiprintf_r+0x156>
 800ed10:	eba0 0308 	sub.w	r3, r0, r8
 800ed14:	fa09 f303 	lsl.w	r3, r9, r3
 800ed18:	4313      	orrs	r3, r2
 800ed1a:	9304      	str	r3, [sp, #16]
 800ed1c:	46a2      	mov	sl, r4
 800ed1e:	e7d2      	b.n	800ecc6 <_vfiprintf_r+0xe2>
 800ed20:	9b03      	ldr	r3, [sp, #12]
 800ed22:	1d19      	adds	r1, r3, #4
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	9103      	str	r1, [sp, #12]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	bfbb      	ittet	lt
 800ed2c:	425b      	neglt	r3, r3
 800ed2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ed32:	9307      	strge	r3, [sp, #28]
 800ed34:	9307      	strlt	r3, [sp, #28]
 800ed36:	bfb8      	it	lt
 800ed38:	9204      	strlt	r2, [sp, #16]
 800ed3a:	7823      	ldrb	r3, [r4, #0]
 800ed3c:	2b2e      	cmp	r3, #46	; 0x2e
 800ed3e:	d10c      	bne.n	800ed5a <_vfiprintf_r+0x176>
 800ed40:	7863      	ldrb	r3, [r4, #1]
 800ed42:	2b2a      	cmp	r3, #42	; 0x2a
 800ed44:	d135      	bne.n	800edb2 <_vfiprintf_r+0x1ce>
 800ed46:	9b03      	ldr	r3, [sp, #12]
 800ed48:	1d1a      	adds	r2, r3, #4
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	9203      	str	r2, [sp, #12]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	bfb8      	it	lt
 800ed52:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed56:	3402      	adds	r4, #2
 800ed58:	9305      	str	r3, [sp, #20]
 800ed5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee40 <_vfiprintf_r+0x25c>
 800ed5e:	7821      	ldrb	r1, [r4, #0]
 800ed60:	2203      	movs	r2, #3
 800ed62:	4650      	mov	r0, sl
 800ed64:	f7f1 fac4 	bl	80002f0 <memchr>
 800ed68:	b140      	cbz	r0, 800ed7c <_vfiprintf_r+0x198>
 800ed6a:	2340      	movs	r3, #64	; 0x40
 800ed6c:	eba0 000a 	sub.w	r0, r0, sl
 800ed70:	fa03 f000 	lsl.w	r0, r3, r0
 800ed74:	9b04      	ldr	r3, [sp, #16]
 800ed76:	4303      	orrs	r3, r0
 800ed78:	3401      	adds	r4, #1
 800ed7a:	9304      	str	r3, [sp, #16]
 800ed7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed80:	482c      	ldr	r0, [pc, #176]	; (800ee34 <_vfiprintf_r+0x250>)
 800ed82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed86:	2206      	movs	r2, #6
 800ed88:	f7f1 fab2 	bl	80002f0 <memchr>
 800ed8c:	2800      	cmp	r0, #0
 800ed8e:	d03f      	beq.n	800ee10 <_vfiprintf_r+0x22c>
 800ed90:	4b29      	ldr	r3, [pc, #164]	; (800ee38 <_vfiprintf_r+0x254>)
 800ed92:	bb1b      	cbnz	r3, 800eddc <_vfiprintf_r+0x1f8>
 800ed94:	9b03      	ldr	r3, [sp, #12]
 800ed96:	3307      	adds	r3, #7
 800ed98:	f023 0307 	bic.w	r3, r3, #7
 800ed9c:	3308      	adds	r3, #8
 800ed9e:	9303      	str	r3, [sp, #12]
 800eda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eda2:	443b      	add	r3, r7
 800eda4:	9309      	str	r3, [sp, #36]	; 0x24
 800eda6:	e767      	b.n	800ec78 <_vfiprintf_r+0x94>
 800eda8:	fb0c 3202 	mla	r2, ip, r2, r3
 800edac:	460c      	mov	r4, r1
 800edae:	2001      	movs	r0, #1
 800edb0:	e7a5      	b.n	800ecfe <_vfiprintf_r+0x11a>
 800edb2:	2300      	movs	r3, #0
 800edb4:	3401      	adds	r4, #1
 800edb6:	9305      	str	r3, [sp, #20]
 800edb8:	4619      	mov	r1, r3
 800edba:	f04f 0c0a 	mov.w	ip, #10
 800edbe:	4620      	mov	r0, r4
 800edc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edc4:	3a30      	subs	r2, #48	; 0x30
 800edc6:	2a09      	cmp	r2, #9
 800edc8:	d903      	bls.n	800edd2 <_vfiprintf_r+0x1ee>
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d0c5      	beq.n	800ed5a <_vfiprintf_r+0x176>
 800edce:	9105      	str	r1, [sp, #20]
 800edd0:	e7c3      	b.n	800ed5a <_vfiprintf_r+0x176>
 800edd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800edd6:	4604      	mov	r4, r0
 800edd8:	2301      	movs	r3, #1
 800edda:	e7f0      	b.n	800edbe <_vfiprintf_r+0x1da>
 800eddc:	ab03      	add	r3, sp, #12
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	462a      	mov	r2, r5
 800ede2:	4b16      	ldr	r3, [pc, #88]	; (800ee3c <_vfiprintf_r+0x258>)
 800ede4:	a904      	add	r1, sp, #16
 800ede6:	4630      	mov	r0, r6
 800ede8:	f7fd fd52 	bl	800c890 <_printf_float>
 800edec:	4607      	mov	r7, r0
 800edee:	1c78      	adds	r0, r7, #1
 800edf0:	d1d6      	bne.n	800eda0 <_vfiprintf_r+0x1bc>
 800edf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edf4:	07d9      	lsls	r1, r3, #31
 800edf6:	d405      	bmi.n	800ee04 <_vfiprintf_r+0x220>
 800edf8:	89ab      	ldrh	r3, [r5, #12]
 800edfa:	059a      	lsls	r2, r3, #22
 800edfc:	d402      	bmi.n	800ee04 <_vfiprintf_r+0x220>
 800edfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee00:	f7ff fa12 	bl	800e228 <__retarget_lock_release_recursive>
 800ee04:	89ab      	ldrh	r3, [r5, #12]
 800ee06:	065b      	lsls	r3, r3, #25
 800ee08:	f53f af12 	bmi.w	800ec30 <_vfiprintf_r+0x4c>
 800ee0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee0e:	e711      	b.n	800ec34 <_vfiprintf_r+0x50>
 800ee10:	ab03      	add	r3, sp, #12
 800ee12:	9300      	str	r3, [sp, #0]
 800ee14:	462a      	mov	r2, r5
 800ee16:	4b09      	ldr	r3, [pc, #36]	; (800ee3c <_vfiprintf_r+0x258>)
 800ee18:	a904      	add	r1, sp, #16
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	f7fd ffc4 	bl	800cda8 <_printf_i>
 800ee20:	e7e4      	b.n	800edec <_vfiprintf_r+0x208>
 800ee22:	bf00      	nop
 800ee24:	0800faf0 	.word	0x0800faf0
 800ee28:	0800fb10 	.word	0x0800fb10
 800ee2c:	0800fad0 	.word	0x0800fad0
 800ee30:	0800fc8c 	.word	0x0800fc8c
 800ee34:	0800fc96 	.word	0x0800fc96
 800ee38:	0800c891 	.word	0x0800c891
 800ee3c:	0800ebbf 	.word	0x0800ebbf
 800ee40:	0800fc92 	.word	0x0800fc92

0800ee44 <_sbrk_r>:
 800ee44:	b538      	push	{r3, r4, r5, lr}
 800ee46:	4d06      	ldr	r5, [pc, #24]	; (800ee60 <_sbrk_r+0x1c>)
 800ee48:	2300      	movs	r3, #0
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	4608      	mov	r0, r1
 800ee4e:	602b      	str	r3, [r5, #0]
 800ee50:	f7f2 fe02 	bl	8001a58 <_sbrk>
 800ee54:	1c43      	adds	r3, r0, #1
 800ee56:	d102      	bne.n	800ee5e <_sbrk_r+0x1a>
 800ee58:	682b      	ldr	r3, [r5, #0]
 800ee5a:	b103      	cbz	r3, 800ee5e <_sbrk_r+0x1a>
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}
 800ee60:	24000530 	.word	0x24000530

0800ee64 <__sread>:
 800ee64:	b510      	push	{r4, lr}
 800ee66:	460c      	mov	r4, r1
 800ee68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee6c:	f000 f8e2 	bl	800f034 <_read_r>
 800ee70:	2800      	cmp	r0, #0
 800ee72:	bfab      	itete	ge
 800ee74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee76:	89a3      	ldrhlt	r3, [r4, #12]
 800ee78:	181b      	addge	r3, r3, r0
 800ee7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee7e:	bfac      	ite	ge
 800ee80:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee82:	81a3      	strhlt	r3, [r4, #12]
 800ee84:	bd10      	pop	{r4, pc}

0800ee86 <__swrite>:
 800ee86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee8a:	461f      	mov	r7, r3
 800ee8c:	898b      	ldrh	r3, [r1, #12]
 800ee8e:	05db      	lsls	r3, r3, #23
 800ee90:	4605      	mov	r5, r0
 800ee92:	460c      	mov	r4, r1
 800ee94:	4616      	mov	r6, r2
 800ee96:	d505      	bpl.n	800eea4 <__swrite+0x1e>
 800ee98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee9c:	2302      	movs	r3, #2
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f000 f898 	bl	800efd4 <_lseek_r>
 800eea4:	89a3      	ldrh	r3, [r4, #12]
 800eea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eeae:	81a3      	strh	r3, [r4, #12]
 800eeb0:	4632      	mov	r2, r6
 800eeb2:	463b      	mov	r3, r7
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeba:	f000 b817 	b.w	800eeec <_write_r>

0800eebe <__sseek>:
 800eebe:	b510      	push	{r4, lr}
 800eec0:	460c      	mov	r4, r1
 800eec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec6:	f000 f885 	bl	800efd4 <_lseek_r>
 800eeca:	1c43      	adds	r3, r0, #1
 800eecc:	89a3      	ldrh	r3, [r4, #12]
 800eece:	bf15      	itete	ne
 800eed0:	6560      	strne	r0, [r4, #84]	; 0x54
 800eed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eeda:	81a3      	strheq	r3, [r4, #12]
 800eedc:	bf18      	it	ne
 800eede:	81a3      	strhne	r3, [r4, #12]
 800eee0:	bd10      	pop	{r4, pc}

0800eee2 <__sclose>:
 800eee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eee6:	f000 b831 	b.w	800ef4c <_close_r>
	...

0800eeec <_write_r>:
 800eeec:	b538      	push	{r3, r4, r5, lr}
 800eeee:	4d07      	ldr	r5, [pc, #28]	; (800ef0c <_write_r+0x20>)
 800eef0:	4604      	mov	r4, r0
 800eef2:	4608      	mov	r0, r1
 800eef4:	4611      	mov	r1, r2
 800eef6:	2200      	movs	r2, #0
 800eef8:	602a      	str	r2, [r5, #0]
 800eefa:	461a      	mov	r2, r3
 800eefc:	f7f1 ff84 	bl	8000e08 <_write>
 800ef00:	1c43      	adds	r3, r0, #1
 800ef02:	d102      	bne.n	800ef0a <_write_r+0x1e>
 800ef04:	682b      	ldr	r3, [r5, #0]
 800ef06:	b103      	cbz	r3, 800ef0a <_write_r+0x1e>
 800ef08:	6023      	str	r3, [r4, #0]
 800ef0a:	bd38      	pop	{r3, r4, r5, pc}
 800ef0c:	24000530 	.word	0x24000530

0800ef10 <__assert_func>:
 800ef10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef12:	4614      	mov	r4, r2
 800ef14:	461a      	mov	r2, r3
 800ef16:	4b09      	ldr	r3, [pc, #36]	; (800ef3c <__assert_func+0x2c>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	4605      	mov	r5, r0
 800ef1c:	68d8      	ldr	r0, [r3, #12]
 800ef1e:	b14c      	cbz	r4, 800ef34 <__assert_func+0x24>
 800ef20:	4b07      	ldr	r3, [pc, #28]	; (800ef40 <__assert_func+0x30>)
 800ef22:	9100      	str	r1, [sp, #0]
 800ef24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef28:	4906      	ldr	r1, [pc, #24]	; (800ef44 <__assert_func+0x34>)
 800ef2a:	462b      	mov	r3, r5
 800ef2c:	f000 f81e 	bl	800ef6c <fiprintf>
 800ef30:	f000 f89f 	bl	800f072 <abort>
 800ef34:	4b04      	ldr	r3, [pc, #16]	; (800ef48 <__assert_func+0x38>)
 800ef36:	461c      	mov	r4, r3
 800ef38:	e7f3      	b.n	800ef22 <__assert_func+0x12>
 800ef3a:	bf00      	nop
 800ef3c:	24000020 	.word	0x24000020
 800ef40:	0800fc9d 	.word	0x0800fc9d
 800ef44:	0800fcaa 	.word	0x0800fcaa
 800ef48:	0800fcd8 	.word	0x0800fcd8

0800ef4c <_close_r>:
 800ef4c:	b538      	push	{r3, r4, r5, lr}
 800ef4e:	4d06      	ldr	r5, [pc, #24]	; (800ef68 <_close_r+0x1c>)
 800ef50:	2300      	movs	r3, #0
 800ef52:	4604      	mov	r4, r0
 800ef54:	4608      	mov	r0, r1
 800ef56:	602b      	str	r3, [r5, #0]
 800ef58:	f7f2 fd49 	bl	80019ee <_close>
 800ef5c:	1c43      	adds	r3, r0, #1
 800ef5e:	d102      	bne.n	800ef66 <_close_r+0x1a>
 800ef60:	682b      	ldr	r3, [r5, #0]
 800ef62:	b103      	cbz	r3, 800ef66 <_close_r+0x1a>
 800ef64:	6023      	str	r3, [r4, #0]
 800ef66:	bd38      	pop	{r3, r4, r5, pc}
 800ef68:	24000530 	.word	0x24000530

0800ef6c <fiprintf>:
 800ef6c:	b40e      	push	{r1, r2, r3}
 800ef6e:	b503      	push	{r0, r1, lr}
 800ef70:	4601      	mov	r1, r0
 800ef72:	ab03      	add	r3, sp, #12
 800ef74:	4805      	ldr	r0, [pc, #20]	; (800ef8c <fiprintf+0x20>)
 800ef76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef7a:	6800      	ldr	r0, [r0, #0]
 800ef7c:	9301      	str	r3, [sp, #4]
 800ef7e:	f7ff fe31 	bl	800ebe4 <_vfiprintf_r>
 800ef82:	b002      	add	sp, #8
 800ef84:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef88:	b003      	add	sp, #12
 800ef8a:	4770      	bx	lr
 800ef8c:	24000020 	.word	0x24000020

0800ef90 <_fstat_r>:
 800ef90:	b538      	push	{r3, r4, r5, lr}
 800ef92:	4d07      	ldr	r5, [pc, #28]	; (800efb0 <_fstat_r+0x20>)
 800ef94:	2300      	movs	r3, #0
 800ef96:	4604      	mov	r4, r0
 800ef98:	4608      	mov	r0, r1
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	602b      	str	r3, [r5, #0]
 800ef9e:	f7f2 fd32 	bl	8001a06 <_fstat>
 800efa2:	1c43      	adds	r3, r0, #1
 800efa4:	d102      	bne.n	800efac <_fstat_r+0x1c>
 800efa6:	682b      	ldr	r3, [r5, #0]
 800efa8:	b103      	cbz	r3, 800efac <_fstat_r+0x1c>
 800efaa:	6023      	str	r3, [r4, #0]
 800efac:	bd38      	pop	{r3, r4, r5, pc}
 800efae:	bf00      	nop
 800efb0:	24000530 	.word	0x24000530

0800efb4 <_isatty_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	4d06      	ldr	r5, [pc, #24]	; (800efd0 <_isatty_r+0x1c>)
 800efb8:	2300      	movs	r3, #0
 800efba:	4604      	mov	r4, r0
 800efbc:	4608      	mov	r0, r1
 800efbe:	602b      	str	r3, [r5, #0]
 800efc0:	f7f2 fd31 	bl	8001a26 <_isatty>
 800efc4:	1c43      	adds	r3, r0, #1
 800efc6:	d102      	bne.n	800efce <_isatty_r+0x1a>
 800efc8:	682b      	ldr	r3, [r5, #0]
 800efca:	b103      	cbz	r3, 800efce <_isatty_r+0x1a>
 800efcc:	6023      	str	r3, [r4, #0]
 800efce:	bd38      	pop	{r3, r4, r5, pc}
 800efd0:	24000530 	.word	0x24000530

0800efd4 <_lseek_r>:
 800efd4:	b538      	push	{r3, r4, r5, lr}
 800efd6:	4d07      	ldr	r5, [pc, #28]	; (800eff4 <_lseek_r+0x20>)
 800efd8:	4604      	mov	r4, r0
 800efda:	4608      	mov	r0, r1
 800efdc:	4611      	mov	r1, r2
 800efde:	2200      	movs	r2, #0
 800efe0:	602a      	str	r2, [r5, #0]
 800efe2:	461a      	mov	r2, r3
 800efe4:	f7f2 fd2a 	bl	8001a3c <_lseek>
 800efe8:	1c43      	adds	r3, r0, #1
 800efea:	d102      	bne.n	800eff2 <_lseek_r+0x1e>
 800efec:	682b      	ldr	r3, [r5, #0]
 800efee:	b103      	cbz	r3, 800eff2 <_lseek_r+0x1e>
 800eff0:	6023      	str	r3, [r4, #0]
 800eff2:	bd38      	pop	{r3, r4, r5, pc}
 800eff4:	24000530 	.word	0x24000530

0800eff8 <__ascii_mbtowc>:
 800eff8:	b082      	sub	sp, #8
 800effa:	b901      	cbnz	r1, 800effe <__ascii_mbtowc+0x6>
 800effc:	a901      	add	r1, sp, #4
 800effe:	b142      	cbz	r2, 800f012 <__ascii_mbtowc+0x1a>
 800f000:	b14b      	cbz	r3, 800f016 <__ascii_mbtowc+0x1e>
 800f002:	7813      	ldrb	r3, [r2, #0]
 800f004:	600b      	str	r3, [r1, #0]
 800f006:	7812      	ldrb	r2, [r2, #0]
 800f008:	1e10      	subs	r0, r2, #0
 800f00a:	bf18      	it	ne
 800f00c:	2001      	movne	r0, #1
 800f00e:	b002      	add	sp, #8
 800f010:	4770      	bx	lr
 800f012:	4610      	mov	r0, r2
 800f014:	e7fb      	b.n	800f00e <__ascii_mbtowc+0x16>
 800f016:	f06f 0001 	mvn.w	r0, #1
 800f01a:	e7f8      	b.n	800f00e <__ascii_mbtowc+0x16>

0800f01c <__malloc_lock>:
 800f01c:	4801      	ldr	r0, [pc, #4]	; (800f024 <__malloc_lock+0x8>)
 800f01e:	f7ff b902 	b.w	800e226 <__retarget_lock_acquire_recursive>
 800f022:	bf00      	nop
 800f024:	24000528 	.word	0x24000528

0800f028 <__malloc_unlock>:
 800f028:	4801      	ldr	r0, [pc, #4]	; (800f030 <__malloc_unlock+0x8>)
 800f02a:	f7ff b8fd 	b.w	800e228 <__retarget_lock_release_recursive>
 800f02e:	bf00      	nop
 800f030:	24000528 	.word	0x24000528

0800f034 <_read_r>:
 800f034:	b538      	push	{r3, r4, r5, lr}
 800f036:	4d07      	ldr	r5, [pc, #28]	; (800f054 <_read_r+0x20>)
 800f038:	4604      	mov	r4, r0
 800f03a:	4608      	mov	r0, r1
 800f03c:	4611      	mov	r1, r2
 800f03e:	2200      	movs	r2, #0
 800f040:	602a      	str	r2, [r5, #0]
 800f042:	461a      	mov	r2, r3
 800f044:	f7f2 fcb6 	bl	80019b4 <_read>
 800f048:	1c43      	adds	r3, r0, #1
 800f04a:	d102      	bne.n	800f052 <_read_r+0x1e>
 800f04c:	682b      	ldr	r3, [r5, #0]
 800f04e:	b103      	cbz	r3, 800f052 <_read_r+0x1e>
 800f050:	6023      	str	r3, [r4, #0]
 800f052:	bd38      	pop	{r3, r4, r5, pc}
 800f054:	24000530 	.word	0x24000530

0800f058 <__ascii_wctomb>:
 800f058:	b149      	cbz	r1, 800f06e <__ascii_wctomb+0x16>
 800f05a:	2aff      	cmp	r2, #255	; 0xff
 800f05c:	bf85      	ittet	hi
 800f05e:	238a      	movhi	r3, #138	; 0x8a
 800f060:	6003      	strhi	r3, [r0, #0]
 800f062:	700a      	strbls	r2, [r1, #0]
 800f064:	f04f 30ff 	movhi.w	r0, #4294967295
 800f068:	bf98      	it	ls
 800f06a:	2001      	movls	r0, #1
 800f06c:	4770      	bx	lr
 800f06e:	4608      	mov	r0, r1
 800f070:	4770      	bx	lr

0800f072 <abort>:
 800f072:	b508      	push	{r3, lr}
 800f074:	2006      	movs	r0, #6
 800f076:	f000 f82b 	bl	800f0d0 <raise>
 800f07a:	2001      	movs	r0, #1
 800f07c:	f7f2 fc90 	bl	80019a0 <_exit>

0800f080 <_raise_r>:
 800f080:	291f      	cmp	r1, #31
 800f082:	b538      	push	{r3, r4, r5, lr}
 800f084:	4604      	mov	r4, r0
 800f086:	460d      	mov	r5, r1
 800f088:	d904      	bls.n	800f094 <_raise_r+0x14>
 800f08a:	2316      	movs	r3, #22
 800f08c:	6003      	str	r3, [r0, #0]
 800f08e:	f04f 30ff 	mov.w	r0, #4294967295
 800f092:	bd38      	pop	{r3, r4, r5, pc}
 800f094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f096:	b112      	cbz	r2, 800f09e <_raise_r+0x1e>
 800f098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f09c:	b94b      	cbnz	r3, 800f0b2 <_raise_r+0x32>
 800f09e:	4620      	mov	r0, r4
 800f0a0:	f000 f830 	bl	800f104 <_getpid_r>
 800f0a4:	462a      	mov	r2, r5
 800f0a6:	4601      	mov	r1, r0
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0ae:	f000 b817 	b.w	800f0e0 <_kill_r>
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d00a      	beq.n	800f0cc <_raise_r+0x4c>
 800f0b6:	1c59      	adds	r1, r3, #1
 800f0b8:	d103      	bne.n	800f0c2 <_raise_r+0x42>
 800f0ba:	2316      	movs	r3, #22
 800f0bc:	6003      	str	r3, [r0, #0]
 800f0be:	2001      	movs	r0, #1
 800f0c0:	e7e7      	b.n	800f092 <_raise_r+0x12>
 800f0c2:	2400      	movs	r4, #0
 800f0c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f0c8:	4628      	mov	r0, r5
 800f0ca:	4798      	blx	r3
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	e7e0      	b.n	800f092 <_raise_r+0x12>

0800f0d0 <raise>:
 800f0d0:	4b02      	ldr	r3, [pc, #8]	; (800f0dc <raise+0xc>)
 800f0d2:	4601      	mov	r1, r0
 800f0d4:	6818      	ldr	r0, [r3, #0]
 800f0d6:	f7ff bfd3 	b.w	800f080 <_raise_r>
 800f0da:	bf00      	nop
 800f0dc:	24000020 	.word	0x24000020

0800f0e0 <_kill_r>:
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	4d07      	ldr	r5, [pc, #28]	; (800f100 <_kill_r+0x20>)
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	4608      	mov	r0, r1
 800f0ea:	4611      	mov	r1, r2
 800f0ec:	602b      	str	r3, [r5, #0]
 800f0ee:	f7f2 fc47 	bl	8001980 <_kill>
 800f0f2:	1c43      	adds	r3, r0, #1
 800f0f4:	d102      	bne.n	800f0fc <_kill_r+0x1c>
 800f0f6:	682b      	ldr	r3, [r5, #0]
 800f0f8:	b103      	cbz	r3, 800f0fc <_kill_r+0x1c>
 800f0fa:	6023      	str	r3, [r4, #0]
 800f0fc:	bd38      	pop	{r3, r4, r5, pc}
 800f0fe:	bf00      	nop
 800f100:	24000530 	.word	0x24000530

0800f104 <_getpid_r>:
 800f104:	f7f2 bc34 	b.w	8001970 <_getpid>

0800f108 <_init>:
 800f108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10a:	bf00      	nop
 800f10c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f10e:	bc08      	pop	{r3}
 800f110:	469e      	mov	lr, r3
 800f112:	4770      	bx	lr

0800f114 <_fini>:
 800f114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f116:	bf00      	nop
 800f118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f11a:	bc08      	pop	{r3}
 800f11c:	469e      	mov	lr, r3
 800f11e:	4770      	bx	lr
