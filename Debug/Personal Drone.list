
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ce4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08012f88  08012f88  00022f88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080134a8  080134a8  000234a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080134b0  080134b0  000234b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080134b4  080134b4  000234b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  24000000  080134b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003d8  240001fc  080136b4  000301fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240005d4  080136b4  000305d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a71a  00000000  00000000  0003022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004220  00000000  00000000  0005a944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001760  00000000  00000000  0005eb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001678  00000000  00000000  000602c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000391e3  00000000  00000000  00061940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e7cf  00000000  00000000  0009ab23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016835e  00000000  00000000  000b92f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00221650  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000074fc  00000000  00000000  002216a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001fc 	.word	0x240001fc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012f6c 	.word	0x08012f6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000200 	.word	0x24000200
 80002dc:	08012f6c 	.word	0x08012f6c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	4608      	mov	r0, r1
 8000692:	4611      	mov	r1, r2
 8000694:	461a      	mov	r2, r3
 8000696:	4603      	mov	r3, r0
 8000698:	70fb      	strb	r3, [r7, #3]
 800069a:	460b      	mov	r3, r1
 800069c:	70bb      	strb	r3, [r7, #2]
 800069e:	4613      	mov	r3, r2
 80006a0:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d81b      	bhi.n	80006e0 <MPU9250_Init+0x58>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <MPU9250_Init+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d1 	.word	0x080006d1
 80006bc:	080006d9 	.word	0x080006d9
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80006c0:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <MPU9250_Init+0x1b0>)
 80006c2:	4a5e      	ldr	r2, [pc, #376]	; (800083c <MPU9250_Init+0x1b4>)
 80006c4:	601a      	str	r2, [r3, #0]
		break;
 80006c6:	e00c      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <MPU9250_Init+0x1b0>)
 80006ca:	4a5d      	ldr	r2, [pc, #372]	; (8000840 <MPU9250_Init+0x1b8>)
 80006cc:	601a      	str	r2, [r3, #0]
		break;
 80006ce:	e008      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80006d0:	4b59      	ldr	r3, [pc, #356]	; (8000838 <MPU9250_Init+0x1b0>)
 80006d2:	4a5c      	ldr	r2, [pc, #368]	; (8000844 <MPU9250_Init+0x1bc>)
 80006d4:	601a      	str	r2, [r3, #0]
		break;
 80006d6:	e004      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80006d8:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MPU9250_Init+0x1b0>)
 80006da:	4a5b      	ldr	r2, [pc, #364]	; (8000848 <MPU9250_Init+0x1c0>)
 80006dc:	601a      	str	r2, [r3, #0]
		break;
 80006de:	e000      	b.n	80006e2 <MPU9250_Init+0x5a>
	default:
		break;
 80006e0:	bf00      	nop
	}

	switch(Acc_FS)
 80006e2:	78bb      	ldrb	r3, [r7, #2]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81f      	bhi.n	8000728 <MPU9250_Init+0xa0>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MPU9250_Init+0x68>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	08000715 	.word	0x08000715
 80006fc:	0800071f 	.word	0x0800071f
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000700:	4b52      	ldr	r3, [pc, #328]	; (800084c <MPU9250_Init+0x1c4>)
 8000702:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000706:	601a      	str	r2, [r3, #0]
		break;
 8000708:	e00f      	b.n	800072a <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <MPU9250_Init+0x1c4>)
 800070c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000710:	601a      	str	r2, [r3, #0]
		break;
 8000712:	e00a      	b.n	800072a <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 8000714:	4b4d      	ldr	r3, [pc, #308]	; (800084c <MPU9250_Init+0x1c4>)
 8000716:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800071a:	601a      	str	r2, [r3, #0]
		break;
 800071c:	e005      	b.n	800072a <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <MPU9250_Init+0x1c4>)
 8000720:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000724:	601a      	str	r2, [r3, #0]
		break;
 8000726:	e000      	b.n	800072a <MPU9250_Init+0xa2>
	default:
		break;
 8000728:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <MPU9250_Init+0x1c8>)
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	2275      	movs	r2, #117	; 0x75
 800073a:	21d0      	movs	r1, #208	; 0xd0
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f007 fa03 	bl	8007b48 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 8000742:	4b43      	ldr	r3, [pc, #268]	; (8000850 <MPU9250_Init+0x1c8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b71      	cmp	r3, #113	; 0x71
 8000748:	d171      	bne.n	800082e <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <MPU9250_Init+0x1cc>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <MPU9250_Init+0x1cc>)
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	2219      	movs	r2, #25
 8000760:	21d0      	movs	r1, #208	; 0xd0
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f007 f8dc 	bl	8007920 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000768:	200a      	movs	r0, #10
 800076a:	f003 feeb 	bl	8004544 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 800076e:	4a39      	ldr	r2, [pc, #228]	; (8000854 <MPU9250_Init+0x1cc>)
 8000770:	787b      	ldrb	r3, [r7, #1]
 8000772:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <MPU9250_Init+0x1cc>)
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	221a      	movs	r2, #26
 8000784:	21d0      	movs	r1, #208	; 0xd0
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f007 f8ca 	bl	8007920 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f003 fed9 	bl	8004544 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MPU9250_Init+0x1cc>)
 800079a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MPU9250_Init+0x1cc>)
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	221b      	movs	r2, #27
 80007ac:	21d0      	movs	r1, #208	; 0xd0
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f007 f8b6 	bl	8007920 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007b4:	200a      	movs	r0, #10
 80007b6:	f003 fec5 	bl	8004544 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80007ba:	78bb      	ldrb	r3, [r7, #2]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MPU9250_Init+0x1cc>)
 80007c2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	2301      	movs	r3, #1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MPU9250_Init+0x1cc>)
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	221c      	movs	r2, #28
 80007d4:	21d0      	movs	r1, #208	; 0xd0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f007 f8a2 	bl	8007920 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007dc:	200a      	movs	r0, #10
 80007de:	f003 feb1 	bl	8004544 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MPU9250_Init+0x1cc>)
 80007e4:	7c3b      	ldrb	r3, [r7, #16]
 80007e6:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MPU9250_Init+0x1cc>)
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	221d      	movs	r2, #29
 80007f8:	21d0      	movs	r1, #208	; 0xd0
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f007 f890 	bl	8007920 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f003 fe9f 	bl	8004544 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MPU9250_Init+0x1cc>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MPU9250_Init+0x1cc>)
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	226b      	movs	r2, #107	; 0x6b
 800081c:	21d0      	movs	r1, #208	; 0xd0
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f007 f87e 	bl	8007920 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000824:	200a      	movs	r0, #10
 8000826:	f003 fe8d 	bl	8004544 <HAL_Delay>

		return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <MPU9250_Init+0x1a8>
	}
	else
	{
		return 0;
 800082e:	2300      	movs	r3, #0
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000004 	.word	0x24000004
 800083c:	43030000 	.word	0x43030000
 8000840:	42830000 	.word	0x42830000
 8000844:	42033333 	.word	0x42033333
 8000848:	41833333 	.word	0x41833333
 800084c:	24000008 	.word	0x24000008
 8000850:	240002c5 	.word	0x240002c5
 8000854:	2400024d 	.word	0x2400024d

08000858 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af04      	add	r7, sp, #16
 800085e:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2301      	movs	r3, #1
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	226a      	movs	r2, #106	; 0x6a
 8000876:	21d0      	movs	r1, #208	; 0xd0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f007 f851 	bl	8007920 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800087e:	200a      	movs	r0, #10
 8000880:	f003 fe60 	bl	8004544 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000886:	2202      	movs	r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	2237      	movs	r2, #55	; 0x37
 800089a:	21d0      	movs	r1, #208	; 0xd0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f007 f83f 	bl	8007920 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f003 fe4e 	bl	8004544 <HAL_Delay>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2400024d 	.word	0x2400024d

080008b4 <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af04      	add	r7, sp, #16
 80008ba:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MPU9250_Master+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	2301      	movs	r3, #1
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MPU9250_Master+0xa0>)
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2237      	movs	r2, #55	; 0x37
 80008d2:	21d0      	movs	r1, #208	; 0xd0
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f007 f823 	bl	8007920 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008da:	200a      	movs	r0, #10
 80008dc:	f003 fe32 	bl	8004544 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MPU9250_Master+0xa0>)
 80008e2:	2220      	movs	r2, #32
 80008e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 80008e6:	2364      	movs	r3, #100	; 0x64
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2301      	movs	r3, #1
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MPU9250_Master+0xa0>)
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	226a      	movs	r2, #106	; 0x6a
 80008f6:	21d0      	movs	r1, #208	; 0xd0
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f007 f811 	bl	8007920 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008fe:	200a      	movs	r0, #10
 8000900:	f003 fe20 	bl	8004544 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MPU9250_Master+0xa0>)
 8000906:	220d      	movs	r2, #13
 8000908:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	9302      	str	r3, [sp, #8]
 800090e:	2301      	movs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MPU9250_Master+0xa0>)
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2301      	movs	r3, #1
 8000918:	2224      	movs	r2, #36	; 0x24
 800091a:	21d0      	movs	r1, #208	; 0xd0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f006 ffff 	bl	8007920 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000922:	200a      	movs	r0, #10
 8000924:	f003 fe0e 	bl	8004544 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MPU9250_Master+0xa0>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	2301      	movs	r3, #1
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MPU9250_Master+0xa0>)
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	226b      	movs	r2, #107	; 0x6b
 800093e:	21d0      	movs	r1, #208	; 0xd0
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f006 ffed 	bl	8007920 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f003 fdfc 	bl	8004544 <HAL_Delay>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2400024d 	.word	0x2400024d

08000958 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000962:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <MPU9250_AK8963_Setup+0xbc>)
 8000964:	2216      	movs	r2, #22
 8000966:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <MPU9250_AK8963_Setup+0xbc>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	220a      	movs	r2, #10
 8000978:	2118      	movs	r1, #24
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f006 ffd0 	bl	8007920 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000980:	200a      	movs	r0, #10
 8000982:	f003 fddf 	bl	8004544 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_MPU9250_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	2303      	movs	r3, #3
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MPU9250_AK8963_Setup+0xc0>)
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	2210      	movs	r2, #16
 8000996:	2118      	movs	r1, #24
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f007 f8d5 	bl	8007b48 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 800099e:	200a      	movs	r0, #10
 80009a0:	f003 fdd0 	bl	8004544 <HAL_Delay>

	DataStruct->ASAX = MPU9250_rx_buf[0];
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MPU9250_AK8963_Setup+0xc0>)
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	DataStruct->ASAY = MPU9250_rx_buf[1];
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MPU9250_AK8963_Setup+0xc0>)
 80009b0:	785a      	ldrb	r2, [r3, #1]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	DataStruct->ASAZ = MPU9250_rx_buf[2];
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MPU9250_AK8963_Setup+0xc0>)
 80009ba:	789a      	ldrb	r2, [r3, #2]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	MPU9250_ASAX = DataStruct->ASAX;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MPU9250_AK8963_Setup+0xc4>)
 80009ca:	701a      	strb	r2, [r3, #0]
	MPU9250_ASAY = DataStruct->ASAY;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MPU9250_AK8963_Setup+0xc8>)
 80009d4:	701a      	strb	r2, [r3, #0]
	MPU9250_ASAZ = DataStruct->ASAZ;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MPU9250_AK8963_Setup+0xcc>)
 80009de:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 80009e0:	2364      	movs	r3, #100	; 0x64
 80009e2:	9302      	str	r3, [sp, #8]
 80009e4:	2303      	movs	r3, #3
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MPU9250_AK8963_Setup+0xd0>)
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2301      	movs	r3, #1
 80009ee:	2200      	movs	r2, #0
 80009f0:	2118      	movs	r1, #24
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f007 f8a8 	bl	8007b48 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80009f8:	200a      	movs	r0, #10
 80009fa:	f003 fda3 	bl	8004544 <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MPU9250_AK8963_Setup+0xd0>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b48      	cmp	r3, #72	; 0x48
 8000a04:	d101      	bne.n	8000a0a <MPU9250_AK8963_Setup+0xb2>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <MPU9250_AK8963_Setup+0xb4>
	else return 0;
 8000a0a:	2300      	movs	r3, #0
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2400024d 	.word	0x2400024d
 8000a18:	240002c8 	.word	0x240002c8
 8000a1c:	24000000 	.word	0x24000000
 8000a20:	24000001 	.word	0x24000001
 8000a24:	24000002 	.word	0x24000002
 8000a28:	240002c4 	.word	0x240002c4

08000a2c <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af04      	add	r7, sp, #16
 8000a32:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MPU9250_Slave0_Enable+0x7c>)
 8000a36:	228c      	movs	r2, #140	; 0x8c
 8000a38:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	9302      	str	r3, [sp, #8]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MPU9250_Slave0_Enable+0x7c>)
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2301      	movs	r3, #1
 8000a48:	2225      	movs	r2, #37	; 0x25
 8000a4a:	21d0      	movs	r1, #208	; 0xd0
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f006 ff67 	bl	8007920 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a52:	200a      	movs	r0, #10
 8000a54:	f003 fd76 	bl	8004544 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MPU9250_Slave0_Enable+0x7c>)
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000a5e:	2364      	movs	r3, #100	; 0x64
 8000a60:	9302      	str	r3, [sp, #8]
 8000a62:	2301      	movs	r3, #1
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MPU9250_Slave0_Enable+0x7c>)
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	2226      	movs	r2, #38	; 0x26
 8000a6e:	21d0      	movs	r1, #208	; 0xd0
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f006 ff55 	bl	8007920 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a76:	200a      	movs	r0, #10
 8000a78:	f003 fd64 	bl	8004544 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MPU9250_Slave0_Enable+0x7c>)
 8000a7e:	2287      	movs	r2, #135	; 0x87
 8000a80:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000a82:	2364      	movs	r3, #100	; 0x64
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	2301      	movs	r3, #1
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MPU9250_Slave0_Enable+0x7c>)
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	2227      	movs	r2, #39	; 0x27
 8000a92:	21d0      	movs	r1, #208	; 0xd0
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f006 ff43 	bl	8007920 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a9a:	200a      	movs	r0, #10
 8000a9c:	f003 fd52 	bl	8004544 <HAL_Delay>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2400024d 	.word	0x2400024d

08000aac <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000ab4:	2314      	movs	r3, #20
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <MPU9250_Read_All+0x24>)
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	223b      	movs	r2, #59	; 0x3b
 8000ac0:	21d0      	movs	r1, #208	; 0xd0
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f007 f95a 	bl	8007d7c <HAL_I2C_Mem_Read_DMA>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	240002c8 	.word	0x240002c8
 8000ad4:	00000000 	.word	0x00000000

08000ad8 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000ae0:	4bb9      	ldr	r3, [pc, #740]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	4bb7      	ldr	r3, [pc, #732]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000aea:	785b      	ldrb	r3, [r3, #1]
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	425b      	negs	r3, r3
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	b21a      	sxth	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000afe:	4bb2      	ldr	r3, [pc, #712]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b00:	789b      	ldrb	r3, [r3, #2]
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	4bb0      	ldr	r3, [pc, #704]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b08:	78db      	ldrb	r3, [r3, #3]
 8000b0a:	b21b      	sxth	r3, r3
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000b14:	4bac      	ldr	r3, [pc, #688]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b16:	791b      	ldrb	r3, [r3, #4]
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	4baa      	ldr	r3, [pc, #680]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b1e:	795b      	ldrb	r3, [r3, #5]
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	4313      	orrs	r3, r2
 8000b24:	b21a      	sxth	r2, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000b2a:	4ba7      	ldr	r3, [pc, #668]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b2c:	7a1b      	ldrb	r3, [r3, #8]
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	4ba5      	ldr	r3, [pc, #660]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b34:	7a5b      	ldrb	r3, [r3, #9]
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b21a      	sxth	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000b40:	4ba1      	ldr	r3, [pc, #644]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b42:	7a9b      	ldrb	r3, [r3, #10]
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	b21a      	sxth	r2, r3
 8000b48:	4b9f      	ldr	r3, [pc, #636]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b4a:	7adb      	ldrb	r3, [r3, #11]
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	425b      	negs	r3, r3
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000b5e:	4b9a      	ldr	r3, [pc, #616]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b60:	7b1b      	ldrb	r3, [r3, #12]
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	b21a      	sxth	r2, r3
 8000b66:	4b98      	ldr	r3, [pc, #608]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b68:	7b5b      	ldrb	r3, [r3, #13]
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	425b      	negs	r3, r3
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000b7c:	4b92      	ldr	r3, [pc, #584]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b7e:	7bdb      	ldrb	r3, [r3, #15]
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	4b90      	ldr	r3, [pc, #576]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b86:	7b9b      	ldrb	r3, [r3, #14]
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b21b      	sxth	r3, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	425b      	negs	r3, r3
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b21a      	sxth	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000b9a:	4b8b      	ldr	r3, [pc, #556]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000b9c:	7c5b      	ldrb	r3, [r3, #17]
 8000b9e:	021b      	lsls	r3, r3, #8
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	4b89      	ldr	r3, [pc, #548]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000ba4:	7c1b      	ldrb	r3, [r3, #16]
 8000ba6:	b21b      	sxth	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000bb0:	4b85      	ldr	r3, [pc, #532]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000bb2:	7cdb      	ldrb	r3, [r3, #19]
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	4b83      	ldr	r3, [pc, #524]	; (8000dc8 <MPU9250_Parsing+0x2f0>)
 8000bba:	7c9b      	ldrb	r3, [r3, #18]
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b21a      	sxth	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bcc:	ee07 3a90 	vmov	s15, r3
 8000bd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bd4:	4b7d      	ldr	r3, [pc, #500]	; (8000dcc <MPU9250_Parsing+0x2f4>)
 8000bd6:	ed93 7a00 	vldr	s14, [r3]
 8000bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bf2:	4b76      	ldr	r3, [pc, #472]	; (8000dcc <MPU9250_Parsing+0x2f4>)
 8000bf4:	ed93 7a00 	vldr	s14, [r3]
 8000bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c10:	4b6e      	ldr	r3, [pc, #440]	; (8000dcc <MPU9250_Parsing+0x2f4>)
 8000c12:	ed93 7a00 	vldr	s14, [r3]
 8000c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c26:	ee07 3a90 	vmov	s15, r3
 8000c2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c2e:	4b68      	ldr	r3, [pc, #416]	; (8000dd0 <MPU9250_Parsing+0x2f8>)
 8000c30:	ed93 7a00 	vldr	s14, [r3]
 8000c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c4c:	4b60      	ldr	r3, [pc, #384]	; (8000dd0 <MPU9250_Parsing+0x2f8>)
 8000c4e:	ed93 7a00 	vldr	s14, [r3]
 8000c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c62:	ee07 3a90 	vmov	s15, r3
 8000c66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c6a:	4b59      	ldr	r3, [pc, #356]	; (8000dd0 <MPU9250_Parsing+0x2f8>)
 8000c6c:	ed93 7a00 	vldr	s14, [r3]
 8000c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c78:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8000db8 <MPU9250_Parsing+0x2e0>
 8000c7c:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000c80:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8000dc0 <MPU9250_Parsing+0x2e8>
 8000c84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000c98:	461a      	mov	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000ca0:	3b80      	subs	r3, #128	; 0x80
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	da00      	bge.n	8000ca8 <MPU9250_Parsing+0x1d0>
 8000ca6:	33ff      	adds	r3, #255	; 0xff
 8000ca8:	121b      	asrs	r3, r3, #8
 8000caa:	3301      	adds	r3, #1
 8000cac:	fb03 f302 	mul.w	r3, r3, r2
 8000cb0:	ee07 3a90 	vmov	s15, r3
 8000cb4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cb8:	4b46      	ldr	r3, [pc, #280]	; (8000dd4 <MPU9250_Parsing+0x2fc>)
 8000cba:	ed93 7a00 	vldr	s14, [r3]
 8000cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000cd6:	3b80      	subs	r3, #128	; 0x80
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	da00      	bge.n	8000cde <MPU9250_Parsing+0x206>
 8000cdc:	33ff      	adds	r3, #255	; 0xff
 8000cde:	121b      	asrs	r3, r3, #8
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	fb03 f302 	mul.w	r3, r3, r2
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cee:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <MPU9250_Parsing+0x2fc>)
 8000cf0:	ed93 7a00 	vldr	s14, [r3]
 8000cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8000d04:	461a      	mov	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d0c:	3b80      	subs	r3, #128	; 0x80
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	da00      	bge.n	8000d14 <MPU9250_Parsing+0x23c>
 8000d12:	33ff      	adds	r3, #255	; 0xff
 8000d14:	121b      	asrs	r3, r3, #8
 8000d16:	3301      	adds	r3, #1
 8000d18:	fb03 f302 	mul.w	r3, r3, r2
 8000d1c:	ee07 3a90 	vmov	s15, r3
 8000d20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d24:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <MPU9250_Parsing+0x2fc>)
 8000d26:	ed93 7a00 	vldr	s14, [r3]
 8000d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	ed93 7a08 	vldr	s14, [r3, #32]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000d40:	ee07 3a90 	vmov	s15, r3
 8000d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000d5e:	ee07 3a90 	vmov	s15, r3
 8000d62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000d7c:	ee07 3a90 	vmov	s15, r3
 8000d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d94:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000dd8 <MPU9250_Parsing+0x300>
 8000d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000da8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000dd8 <MPU9250_Parsing+0x300>
 8000dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000db0:	e014      	b.n	8000ddc <MPU9250_Parsing+0x304>
 8000db2:	bf00      	nop
 8000db4:	f3af 8000 	nop.w
 8000db8:	33333333 	.word	0x33333333
 8000dbc:	3fc33333 	.word	0x3fc33333
 8000dc0:	147ae148 	.word	0x147ae148
 8000dc4:	3ff147ae 	.word	0x3ff147ae
 8000dc8:	240002c8 	.word	0x240002c8
 8000dcc:	24000004 	.word	0x24000004
 8000dd0:	24000008 	.word	0x24000008
 8000dd4:	2400000c 	.word	0x2400000c
 8000dd8:	3c8efa35 	.word	0x3c8efa35
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000de8:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8000dd8 <MPU9250_Parsing+0x300>
 8000dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My -= DataStruct->My_Offset;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8000e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	0000      	movs	r0, r0
	...

08000e48 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000e50:	4baf      	ldr	r3, [pc, #700]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	4bad      	ldr	r3, [pc, #692]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000e5a:	785b      	ldrb	r3, [r3, #1]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	425b      	negs	r3, r3
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b21a      	sxth	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000e6e:	4ba8      	ldr	r3, [pc, #672]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000e70:	789b      	ldrb	r3, [r3, #2]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	b21a      	sxth	r2, r3
 8000e76:	4ba6      	ldr	r3, [pc, #664]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000e78:	78db      	ldrb	r3, [r3, #3]
 8000e7a:	b21b      	sxth	r3, r3
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	b21a      	sxth	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000e84:	4ba2      	ldr	r3, [pc, #648]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000e86:	791b      	ldrb	r3, [r3, #4]
 8000e88:	021b      	lsls	r3, r3, #8
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	4ba0      	ldr	r3, [pc, #640]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000e8e:	795b      	ldrb	r3, [r3, #5]
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000e9a:	4b9d      	ldr	r3, [pc, #628]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000e9c:	7a1b      	ldrb	r3, [r3, #8]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	4b9b      	ldr	r3, [pc, #620]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000ea4:	7a5b      	ldrb	r3, [r3, #9]
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b21a      	sxth	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000eb0:	4b97      	ldr	r3, [pc, #604]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000eb2:	7a9b      	ldrb	r3, [r3, #10]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	b21a      	sxth	r2, r3
 8000eb8:	4b95      	ldr	r3, [pc, #596]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000eba:	7adb      	ldrb	r3, [r3, #11]
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	425b      	negs	r3, r3
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000ece:	4b90      	ldr	r3, [pc, #576]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000ed0:	7b1b      	ldrb	r3, [r3, #12]
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	b21a      	sxth	r2, r3
 8000ed6:	4b8e      	ldr	r3, [pc, #568]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000ed8:	7b5b      	ldrb	r3, [r3, #13]
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000eec:	4b88      	ldr	r3, [pc, #544]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000eee:	7bdb      	ldrb	r3, [r3, #15]
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	4b86      	ldr	r3, [pc, #536]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000ef6:	7b9b      	ldrb	r3, [r3, #14]
 8000ef8:	b21b      	sxth	r3, r3
 8000efa:	4313      	orrs	r3, r2
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	425b      	negs	r3, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000f0a:	4b81      	ldr	r3, [pc, #516]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000f0c:	7c5b      	ldrb	r3, [r3, #17]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21a      	sxth	r2, r3
 8000f12:	4b7f      	ldr	r3, [pc, #508]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000f14:	7c1b      	ldrb	r3, [r3, #16]
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000f20:	4b7b      	ldr	r3, [pc, #492]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000f22:	7cdb      	ldrb	r3, [r3, #19]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	4b79      	ldr	r3, [pc, #484]	; (8001110 <MPU9250_Parsing_NoOffset+0x2c8>)
 8000f2a:	7c9b      	ldrb	r3, [r3, #18]
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f44:	4b73      	ldr	r3, [pc, #460]	; (8001114 <MPU9250_Parsing_NoOffset+0x2cc>)
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f4e:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001118 <MPU9250_Parsing_NoOffset+0x2d0>
 8000f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f6a:	4b6a      	ldr	r3, [pc, #424]	; (8001114 <MPU9250_Parsing_NoOffset+0x2cc>)
 8000f6c:	ed93 7a00 	vldr	s14, [r3]
 8000f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f74:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001118 <MPU9250_Parsing_NoOffset+0x2d0>
 8000f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f90:	4b60      	ldr	r3, [pc, #384]	; (8001114 <MPU9250_Parsing_NoOffset+0x2cc>)
 8000f92:	ed93 7a00 	vldr	s14, [r3]
 8000f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f9a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001118 <MPU9250_Parsing_NoOffset+0x2d0>
 8000f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fae:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001118 <MPU9250_Parsing_NoOffset+0x2d0>
 8000fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fc2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001118 <MPU9250_Parsing_NoOffset+0x2d0>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000fd6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001118 <MPU9250_Parsing_NoOffset+0x2d0>
 8000fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fea:	ee07 3a90 	vmov	s15, r3
 8000fee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ff2:	4b4a      	ldr	r3, [pc, #296]	; (800111c <MPU9250_Parsing_NoOffset+0x2d4>)
 8000ff4:	ed93 7a00 	vldr	s14, [r3]
 8000ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001010:	4b42      	ldr	r3, [pc, #264]	; (800111c <MPU9250_Parsing_NoOffset+0x2d4>)
 8001012:	ed93 7a00 	vldr	s14, [r3]
 8001016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800102e:	4b3b      	ldr	r3, [pc, #236]	; (800111c <MPU9250_Parsing_NoOffset+0x2d4>)
 8001030:	ed93 7a00 	vldr	s14, [r3]
 8001034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001038:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800103c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8001100 <MPU9250_Parsing_NoOffset+0x2b8>
 8001040:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001044:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8001108 <MPU9250_Parsing_NoOffset+0x2c0>
 8001048:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800104c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((MPU9250_ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800105c:	461a      	mov	r2, r3
 800105e:	4b30      	ldr	r3, [pc, #192]	; (8001120 <MPU9250_Parsing_NoOffset+0x2d8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	3b80      	subs	r3, #128	; 0x80
 8001064:	2b00      	cmp	r3, #0
 8001066:	da00      	bge.n	800106a <MPU9250_Parsing_NoOffset+0x222>
 8001068:	33ff      	adds	r3, #255	; 0xff
 800106a:	121b      	asrs	r3, r3, #8
 800106c:	3301      	adds	r3, #1
 800106e:	fb03 f302 	mul.w	r3, r3, r2
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <MPU9250_Parsing_NoOffset+0x2dc>)
 800107c:	ed93 7a00 	vldr	s14, [r3]
 8001080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((MPU9250_ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001090:	461a      	mov	r2, r3
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <MPU9250_Parsing_NoOffset+0x2e0>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	3b80      	subs	r3, #128	; 0x80
 8001098:	2b00      	cmp	r3, #0
 800109a:	da00      	bge.n	800109e <MPU9250_Parsing_NoOffset+0x256>
 800109c:	33ff      	adds	r3, #255	; 0xff
 800109e:	121b      	asrs	r3, r3, #8
 80010a0:	3301      	adds	r3, #1
 80010a2:	fb03 f302 	mul.w	r3, r3, r2
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MPU9250_Parsing_NoOffset+0x2dc>)
 80010b0:	ed93 7a00 	vldr	s14, [r3]
 80010b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((MPU9250_ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b19      	ldr	r3, [pc, #100]	; (800112c <MPU9250_Parsing_NoOffset+0x2e4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	3b80      	subs	r3, #128	; 0x80
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	da00      	bge.n	80010d2 <MPU9250_Parsing_NoOffset+0x28a>
 80010d0:	33ff      	adds	r3, #255	; 0xff
 80010d2:	121b      	asrs	r3, r3, #8
 80010d4:	3301      	adds	r3, #1
 80010d6:	fb03 f302 	mul.w	r3, r3, r2
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <MPU9250_Parsing_NoOffset+0x2dc>)
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	33333333 	.word	0x33333333
 8001104:	3fc33333 	.word	0x3fc33333
 8001108:	147ae148 	.word	0x147ae148
 800110c:	3ff147ae 	.word	0x3ff147ae
 8001110:	240002c8 	.word	0x240002c8
 8001114:	24000004 	.word	0x24000004
 8001118:	3c8efa35 	.word	0x3c8efa35
 800111c:	24000008 	.word	0x24000008
 8001120:	24000000 	.word	0x24000000
 8001124:	2400000c 	.word	0x2400000c
 8001128:	24000001 	.word	0x24000001
 800112c:	24000002 	.word	0x24000002

08001130 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ae      	sub	sp, #184	; 0xb8
 8001134:	af00      	add	r7, sp, #0
 8001136:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800113a:	edc7 0a08 	vstr	s1, [r7, #32]
 800113e:	ed87 1a07 	vstr	s2, [r7, #28]
 8001142:	edc7 1a06 	vstr	s3, [r7, #24]
 8001146:	ed87 2a05 	vstr	s4, [r7, #20]
 800114a:	edc7 2a04 	vstr	s5, [r7, #16]
 800114e:	ed87 3a03 	vstr	s6, [r7, #12]
 8001152:	edc7 3a02 	vstr	s7, [r7, #8]
 8001156:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800115a:	edd7 7a03 	vldr	s15, [r7, #12]
 800115e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	d11d      	bne.n	80011a4 <MadgwickAHRSupdate+0x74>
 8001168:	edd7 7a02 	vldr	s15, [r7, #8]
 800116c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	d116      	bne.n	80011a4 <MadgwickAHRSupdate+0x74>
 8001176:	edd7 7a01 	vldr	s15, [r7, #4]
 800117a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	d10f      	bne.n	80011a4 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001184:	edd7 2a04 	vldr	s5, [r7, #16]
 8001188:	ed97 2a05 	vldr	s4, [r7, #20]
 800118c:	edd7 1a06 	vldr	s3, [r7, #24]
 8001190:	ed97 1a07 	vldr	s2, [r7, #28]
 8001194:	edd7 0a08 	vldr	s1, [r7, #32]
 8001198:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800119c:	f000 ffd6 	bl	800214c <MadgwickAHRSupdateIMU>
		return;
 80011a0:	f000 bfb4 	b.w	800210c <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80011a4:	4be6      	ldr	r3, [pc, #920]	; (8001540 <MadgwickAHRSupdate+0x410>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	eeb1 7a67 	vneg.f32	s14, s15
 80011ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011b6:	4be3      	ldr	r3, [pc, #908]	; (8001544 <MadgwickAHRSupdate+0x414>)
 80011b8:	edd3 6a00 	vldr	s13, [r3]
 80011bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80011c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011c8:	4bdf      	ldr	r3, [pc, #892]	; (8001548 <MadgwickAHRSupdate+0x418>)
 80011ca:	edd3 6a00 	vldr	s13, [r3]
 80011ce:	edd7 7a07 	vldr	s15, [r7, #28]
 80011d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80011e6:	4bd9      	ldr	r3, [pc, #868]	; (800154c <MadgwickAHRSupdate+0x41c>)
 80011e8:	ed93 7a00 	vldr	s14, [r3]
 80011ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f4:	4bd3      	ldr	r3, [pc, #844]	; (8001544 <MadgwickAHRSupdate+0x414>)
 80011f6:	edd3 6a00 	vldr	s13, [r3]
 80011fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80011fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001206:	4bd0      	ldr	r3, [pc, #832]	; (8001548 <MadgwickAHRSupdate+0x418>)
 8001208:	edd3 6a00 	vldr	s13, [r3]
 800120c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001214:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001218:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800121c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001220:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001224:	4bc9      	ldr	r3, [pc, #804]	; (800154c <MadgwickAHRSupdate+0x41c>)
 8001226:	ed93 7a00 	vldr	s14, [r3]
 800122a:	edd7 7a08 	vldr	s15, [r7, #32]
 800122e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001232:	4bc3      	ldr	r3, [pc, #780]	; (8001540 <MadgwickAHRSupdate+0x410>)
 8001234:	edd3 6a00 	vldr	s13, [r3]
 8001238:	edd7 7a07 	vldr	s15, [r7, #28]
 800123c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001240:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001244:	4bc0      	ldr	r3, [pc, #768]	; (8001548 <MadgwickAHRSupdate+0x418>)
 8001246:	edd3 6a00 	vldr	s13, [r3]
 800124a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800124e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001256:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800125a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001262:	4bba      	ldr	r3, [pc, #744]	; (800154c <MadgwickAHRSupdate+0x41c>)
 8001264:	ed93 7a00 	vldr	s14, [r3]
 8001268:	edd7 7a07 	vldr	s15, [r7, #28]
 800126c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001270:	4bb3      	ldr	r3, [pc, #716]	; (8001540 <MadgwickAHRSupdate+0x410>)
 8001272:	edd3 6a00 	vldr	s13, [r3]
 8001276:	edd7 7a08 	vldr	s15, [r7, #32]
 800127a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001282:	4bb0      	ldr	r3, [pc, #704]	; (8001544 <MadgwickAHRSupdate+0x414>)
 8001284:	edd3 6a00 	vldr	s13, [r3]
 8001288:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800128c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001294:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80012a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80012a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	d10e      	bne.n	80012cc <MadgwickAHRSupdate+0x19c>
 80012ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80012b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d107      	bne.n	80012cc <MadgwickAHRSupdate+0x19c>
 80012bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	f000 85a6 	beq.w	8001e18 <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80012cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80012d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	f001 fb5a 	bl	80029a8 <invSqrt>
 80012f4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80012f8:	ed97 7a06 	vldr	s14, [r7, #24]
 80012fc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001308:	ed97 7a05 	vldr	s14, [r7, #20]
 800130c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001314:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001318:	ed97 7a04 	vldr	s14, [r7, #16]
 800131c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001324:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001328:	edd7 7a03 	vldr	s15, [r7, #12]
 800132c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001330:	edd7 7a02 	vldr	s15, [r7, #8]
 8001334:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001338:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001340:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	f001 fb2c 	bl	80029a8 <invSqrt>
 8001350:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001354:	ed97 7a03 	vldr	s14, [r7, #12]
 8001358:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800135c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001360:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001364:	ed97 7a02 	vldr	s14, [r7, #8]
 8001368:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800136c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001370:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001374:	ed97 7a01 	vldr	s14, [r7, #4]
 8001378:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800137c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001380:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001384:	4b71      	ldr	r3, [pc, #452]	; (800154c <MadgwickAHRSupdate+0x41c>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800138e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001396:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 800139a:	4b6c      	ldr	r3, [pc, #432]	; (800154c <MadgwickAHRSupdate+0x41c>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 80013b0:	4b66      	ldr	r3, [pc, #408]	; (800154c <MadgwickAHRSupdate+0x41c>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80013be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 80013c6:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <MadgwickAHRSupdate+0x410>)
 80013c8:	edd3 7a00 	vldr	s15, [r3]
 80013cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80013d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 80013dc:	4b5b      	ldr	r3, [pc, #364]	; (800154c <MadgwickAHRSupdate+0x41c>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013e6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 80013ea:	4b55      	ldr	r3, [pc, #340]	; (8001540 <MadgwickAHRSupdate+0x410>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013f4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80013f8:	4b52      	ldr	r3, [pc, #328]	; (8001544 <MadgwickAHRSupdate+0x414>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001402:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 8001406:	4b50      	ldr	r3, [pc, #320]	; (8001548 <MadgwickAHRSupdate+0x418>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001410:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <MadgwickAHRSupdate+0x41c>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800141e:	4b49      	ldr	r3, [pc, #292]	; (8001544 <MadgwickAHRSupdate+0x414>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001428:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 800142c:	4b45      	ldr	r3, [pc, #276]	; (8001544 <MadgwickAHRSupdate+0x414>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001436:	4b44      	ldr	r3, [pc, #272]	; (8001548 <MadgwickAHRSupdate+0x418>)
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001440:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 8001444:	4b41      	ldr	r3, [pc, #260]	; (800154c <MadgwickAHRSupdate+0x41c>)
 8001446:	ed93 7a00 	vldr	s14, [r3]
 800144a:	4b40      	ldr	r3, [pc, #256]	; (800154c <MadgwickAHRSupdate+0x41c>)
 800144c:	edd3 7a00 	vldr	s15, [r3]
 8001450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001454:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001458:	4b3c      	ldr	r3, [pc, #240]	; (800154c <MadgwickAHRSupdate+0x41c>)
 800145a:	ed93 7a00 	vldr	s14, [r3]
 800145e:	4b38      	ldr	r3, [pc, #224]	; (8001540 <MadgwickAHRSupdate+0x410>)
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 800146c:	4b37      	ldr	r3, [pc, #220]	; (800154c <MadgwickAHRSupdate+0x41c>)
 800146e:	ed93 7a00 	vldr	s14, [r3]
 8001472:	4b34      	ldr	r3, [pc, #208]	; (8001544 <MadgwickAHRSupdate+0x414>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <MadgwickAHRSupdate+0x41c>)
 8001482:	ed93 7a00 	vldr	s14, [r3]
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <MadgwickAHRSupdate+0x418>)
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001490:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <MadgwickAHRSupdate+0x410>)
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	4b29      	ldr	r3, [pc, #164]	; (8001540 <MadgwickAHRSupdate+0x410>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <MadgwickAHRSupdate+0x410>)
 80014aa:	ed93 7a00 	vldr	s14, [r3]
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <MadgwickAHRSupdate+0x414>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 80014bc:	4b20      	ldr	r3, [pc, #128]	; (8001540 <MadgwickAHRSupdate+0x410>)
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <MadgwickAHRSupdate+0x418>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014cc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 80014d0:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MadgwickAHRSupdate+0x414>)
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <MadgwickAHRSupdate+0x414>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MadgwickAHRSupdate+0x414>)
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MadgwickAHRSupdate+0x418>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MadgwickAHRSupdate+0x418>)
 80014fa:	ed93 7a00 	vldr	s14, [r3]
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MadgwickAHRSupdate+0x418>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001508:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800150c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001510:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MadgwickAHRSupdate+0x418>)
 800151a:	edd3 6a00 	vldr	s13, [r3]
 800151e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MadgwickAHRSupdate+0x414>)
 800152c:	edd3 6a00 	vldr	s13, [r3]
 8001530:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001538:	ee37 7a27 	vadd.f32	s14, s14, s15
 800153c:	e008      	b.n	8001550 <MadgwickAHRSupdate+0x420>
 800153e:	bf00      	nop
 8001540:	24000218 	.word	0x24000218
 8001544:	2400021c 	.word	0x2400021c
 8001548:	24000220 	.word	0x24000220
 800154c:	24000014 	.word	0x24000014
 8001550:	edd7 6a03 	vldr	s13, [r7, #12]
 8001554:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001560:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001564:	edd7 7a02 	vldr	s15, [r7, #8]
 8001568:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800156c:	4bf5      	ldr	r3, [pc, #980]	; (8001944 <MadgwickAHRSupdate+0x814>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001576:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800157e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001582:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001586:	4bf0      	ldr	r3, [pc, #960]	; (8001948 <MadgwickAHRSupdate+0x818>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001594:	edd7 6a03 	vldr	s13, [r7, #12]
 8001598:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800159c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a4:	edd7 6a03 	vldr	s13, [r7, #12]
 80015a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80015ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80015b8:	4be3      	ldr	r3, [pc, #908]	; (8001948 <MadgwickAHRSupdate+0x818>)
 80015ba:	ed93 7a00 	vldr	s14, [r3]
 80015be:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80015c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c6:	edd7 6a02 	vldr	s13, [r7, #8]
 80015ca:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80015ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d6:	4bdd      	ldr	r3, [pc, #884]	; (800194c <MadgwickAHRSupdate+0x81c>)
 80015d8:	edd3 6a00 	vldr	s13, [r3]
 80015dc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80015e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015e8:	4bd6      	ldr	r3, [pc, #856]	; (8001944 <MadgwickAHRSupdate+0x814>)
 80015ea:	edd3 6a00 	vldr	s13, [r3]
 80015ee:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80015f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015fa:	edd7 6a02 	vldr	s13, [r7, #8]
 80015fe:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800160a:	edd7 6a02 	vldr	s13, [r7, #8]
 800160e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800161e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001622:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001626:	4bc8      	ldr	r3, [pc, #800]	; (8001948 <MadgwickAHRSupdate+0x818>)
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001630:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001634:	edd7 6a02 	vldr	s13, [r7, #8]
 8001638:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800163c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001644:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001648:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800164c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001650:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001654:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800165c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001660:	eeb0 0b47 	vmov.f64	d0, d7
 8001664:	f010 ffe0 	bl	8012628 <sqrt>
 8001668:	eeb0 7b40 	vmov.f64	d7, d0
 800166c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001670:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001674:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001678:	eeb1 7a67 	vneg.f32	s14, s15
 800167c:	4bb1      	ldr	r3, [pc, #708]	; (8001944 <MadgwickAHRSupdate+0x814>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001686:	4bb1      	ldr	r3, [pc, #708]	; (800194c <MadgwickAHRSupdate+0x81c>)
 8001688:	edd3 6a00 	vldr	s13, [r3]
 800168c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001694:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001698:	edd7 6a01 	vldr	s13, [r7, #4]
 800169c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a8:	4ba7      	ldr	r3, [pc, #668]	; (8001948 <MadgwickAHRSupdate+0x818>)
 80016aa:	edd3 6a00 	vldr	s13, [r3]
 80016ae:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80016b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ba:	edd7 6a01 	vldr	s13, [r7, #4]
 80016be:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80016c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ca:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80016ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80016d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016d6:	4b9c      	ldr	r3, [pc, #624]	; (8001948 <MadgwickAHRSupdate+0x818>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e4:	edd7 6a01 	vldr	s13, [r7, #4]
 80016e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f4:	edd7 6a01 	vldr	s13, [r7, #4]
 80016f8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80016fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001700:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001704:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001708:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800170c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001710:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001714:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001718:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800171c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001720:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001724:	eeb1 7a67 	vneg.f32	s14, s15
 8001728:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800172c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001730:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001734:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001738:	edd7 7a06 	vldr	s15, [r7, #24]
 800173c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001748:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800174c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001750:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001754:	edd7 7a05 	vldr	s15, [r7, #20]
 8001758:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800175c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001768:	4b76      	ldr	r3, [pc, #472]	; (8001944 <MadgwickAHRSupdate+0x814>)
 800176a:	edd3 6a00 	vldr	s13, [r3]
 800176e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001772:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001776:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800177a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800177e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001782:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001786:	ee36 6a67 	vsub.f32	s12, s12, s15
 800178a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800178e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001792:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001796:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800179a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800179e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017a2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017a6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ba:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017be:	eef1 6a67 	vneg.f32	s13, s15
 80017c2:	4b61      	ldr	r3, [pc, #388]	; (8001948 <MadgwickAHRSupdate+0x818>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017cc:	4b5f      	ldr	r3, [pc, #380]	; (800194c <MadgwickAHRSupdate+0x81c>)
 80017ce:	ed93 6a00 	vldr	s12, [r3]
 80017d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017de:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80017e2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80017e6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017ea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017ee:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017f2:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80017f6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80017fa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80017fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001802:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001806:	ee36 6a27 	vadd.f32	s12, s12, s15
 800180a:	edd7 7a02 	vldr	s15, [r7, #8]
 800180e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800181a:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <MadgwickAHRSupdate+0x814>)
 800181c:	edd3 6a00 	vldr	s13, [r3]
 8001820:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001824:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001828:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800182c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001830:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001834:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001838:	ee26 6a27 	vmul.f32	s12, s12, s15
 800183c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001840:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001844:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001848:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800184c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001850:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001854:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001858:	ee36 6a27 	vadd.f32	s12, s12, s15
 800185c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001860:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001864:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001870:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001874:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001878:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800187c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001880:	edd7 7a06 	vldr	s15, [r7, #24]
 8001884:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001888:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800188c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001890:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001894:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001898:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800189c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80018a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018a8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80018ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <MadgwickAHRSupdate+0x81c>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80018be:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80018c2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80018c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018ca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80018ce:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018da:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018de:	edd7 7a04 	vldr	s15, [r7, #16]
 80018e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <MadgwickAHRSupdate+0x818>)
 80018f0:	edd3 6a00 	vldr	s13, [r3]
 80018f4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018fc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001900:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001904:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001908:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800190c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001910:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001914:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001918:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800191c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001920:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001924:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001928:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800192c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001930:	edd7 7a03 	vldr	s15, [r7, #12]
 8001934:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001940:	e006      	b.n	8001950 <MadgwickAHRSupdate+0x820>
 8001942:	bf00      	nop
 8001944:	2400021c 	.word	0x2400021c
 8001948:	24000220 	.word	0x24000220
 800194c:	24000218 	.word	0x24000218
 8001950:	4bf6      	ldr	r3, [pc, #984]	; (8001d2c <MadgwickAHRSupdate+0xbfc>)
 8001952:	edd3 6a00 	vldr	s13, [r3]
 8001956:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800195a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800195e:	4bf4      	ldr	r3, [pc, #976]	; (8001d30 <MadgwickAHRSupdate+0xc00>)
 8001960:	ed93 6a00 	vldr	s12, [r3]
 8001964:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001968:	ee66 7a27 	vmul.f32	s15, s12, s15
 800196c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001970:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001974:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001978:	ee36 6a67 	vsub.f32	s12, s12, s15
 800197c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001980:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001984:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001988:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800198c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001990:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001994:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001998:	ee36 6a27 	vadd.f32	s12, s12, s15
 800199c:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ac:	4be1      	ldr	r3, [pc, #900]	; (8001d34 <MadgwickAHRSupdate+0xc04>)
 80019ae:	edd3 6a00 	vldr	s13, [r3]
 80019b2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019ba:	4bdf      	ldr	r3, [pc, #892]	; (8001d38 <MadgwickAHRSupdate+0xc08>)
 80019bc:	ed93 6a00 	vldr	s12, [r3]
 80019c0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019cc:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80019d0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019d8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019dc:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019e0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80019e4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019e8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019ec:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019f0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019f4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019fc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a04:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a10:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001a14:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a18:	eeb1 7a67 	vneg.f32	s14, s15
 8001a1c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a20:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a24:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a28:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a30:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a38:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a3c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a40:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a44:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a50:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5c:	4bb3      	ldr	r3, [pc, #716]	; (8001d2c <MadgwickAHRSupdate+0xbfc>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a66:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a6a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a72:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a76:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a7a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a82:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a86:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a8a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a96:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a9a:	eef1 6a67 	vneg.f32	s13, s15
 8001a9e:	4ba3      	ldr	r3, [pc, #652]	; (8001d2c <MadgwickAHRSupdate+0xbfc>)
 8001aa0:	edd3 7a00 	vldr	s15, [r3]
 8001aa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001aa8:	4ba1      	ldr	r3, [pc, #644]	; (8001d30 <MadgwickAHRSupdate+0xc00>)
 8001aaa:	ed93 6a00 	vldr	s12, [r3]
 8001aae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ab2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ab6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001aba:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001abe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ac2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ac6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001aca:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ace:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ad2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ad6:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001ada:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ade:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ae2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ae6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001aea:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001aee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001af2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001afe:	4b8e      	ldr	r3, [pc, #568]	; (8001d38 <MadgwickAHRSupdate+0xc08>)
 8001b00:	edd3 6a00 	vldr	s13, [r3]
 8001b04:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b0c:	4b89      	ldr	r3, [pc, #548]	; (8001d34 <MadgwickAHRSupdate+0xc04>)
 8001b0e:	ed93 6a00 	vldr	s12, [r3]
 8001b12:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b16:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b1a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b1e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001b22:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b26:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b2a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b2e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b32:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001b36:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b3a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001b3e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b42:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b46:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b4e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b5a:	4b75      	ldr	r3, [pc, #468]	; (8001d30 <MadgwickAHRSupdate+0xc00>)
 8001b5c:	edd3 6a00 	vldr	s13, [r3]
 8001b60:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b64:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b68:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <MadgwickAHRSupdate+0xbfc>)
 8001b6a:	ed93 6a00 	vldr	s12, [r3]
 8001b6e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b76:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b7a:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b7e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b82:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b86:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b8a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b8e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b92:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b96:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b9a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b9e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ba2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ba6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001baa:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001bc2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bc6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001bca:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001bce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bd2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bda:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001bde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001be6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bea:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001bee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bf2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bfa:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c06:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c0a:	eef1 6a67 	vneg.f32	s13, s15
 8001c0e:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <MadgwickAHRSupdate+0xc04>)
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c18:	4b47      	ldr	r3, [pc, #284]	; (8001d38 <MadgwickAHRSupdate+0xc08>)
 8001c1a:	ed93 6a00 	vldr	s12, [r3]
 8001c1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c22:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c26:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c2a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c2e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c32:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c36:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c3a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c3e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c42:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c46:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c4a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c4e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c52:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c56:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c5a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c62:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c6e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c72:	eef1 6a67 	vneg.f32	s13, s15
 8001c76:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <MadgwickAHRSupdate+0xc00>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <MadgwickAHRSupdate+0xbfc>)
 8001c82:	ed93 6a00 	vldr	s12, [r3]
 8001c86:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c8e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c92:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c96:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c9a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c9e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ca2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ca6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001caa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001cae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001cb2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cb6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cba:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <MadgwickAHRSupdate+0xc08>)
 8001cd0:	edd3 6a00 	vldr	s13, [r3]
 8001cd4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cdc:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001ce0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ce4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ce8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cf0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001cf4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cf8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cfc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d00:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d04:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d08:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d0c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d14:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d20:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001d24:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d28:	e008      	b.n	8001d3c <MadgwickAHRSupdate+0xc0c>
 8001d2a:	bf00      	nop
 8001d2c:	2400021c 	.word	0x2400021c
 8001d30:	24000014 	.word	0x24000014
 8001d34:	24000220 	.word	0x24000220
 8001d38:	24000218 	.word	0x24000218
 8001d3c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d40:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d4c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001d50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001d5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d64:	eeb0 0a67 	vmov.f32	s0, s15
 8001d68:	f000 fe1e 	bl	80029a8 <invSqrt>
 8001d6c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001d70:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001d74:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001d80:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001d84:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001d90:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001d94:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001da0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001da4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001db0:	4bd8      	ldr	r3, [pc, #864]	; (8002114 <MadgwickAHRSupdate+0xfe4>)
 8001db2:	ed93 7a00 	vldr	s14, [r3]
 8001db6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001dca:	4bd2      	ldr	r3, [pc, #840]	; (8002114 <MadgwickAHRSupdate+0xfe4>)
 8001dcc:	ed93 7a00 	vldr	s14, [r3]
 8001dd0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001de4:	4bcb      	ldr	r3, [pc, #812]	; (8002114 <MadgwickAHRSupdate+0xfe4>)
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df2:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfa:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001dfe:	4bc5      	ldr	r3, [pc, #788]	; (8002114 <MadgwickAHRSupdate+0xfe4>)
 8001e00:	ed93 7a00 	vldr	s14, [r3]
 8001e04:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0c:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e14:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001e18:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001e1c:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8002118 <MadgwickAHRSupdate+0xfe8>
 8001e20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e24:	4bbd      	ldr	r3, [pc, #756]	; (800211c <MadgwickAHRSupdate+0xfec>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2e:	4bbb      	ldr	r3, [pc, #748]	; (800211c <MadgwickAHRSupdate+0xfec>)
 8001e30:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001e34:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001e38:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8002118 <MadgwickAHRSupdate+0xfe8>
 8001e3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e40:	4bb7      	ldr	r3, [pc, #732]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4a:	4bb5      	ldr	r3, [pc, #724]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8001e4c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001e50:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001e54:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8002118 <MadgwickAHRSupdate+0xfe8>
 8001e58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e5c:	4bb1      	ldr	r3, [pc, #708]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e66:	4baf      	ldr	r3, [pc, #700]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8001e68:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001e6c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001e70:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002118 <MadgwickAHRSupdate+0xfe8>
 8001e74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e78:	4bab      	ldr	r3, [pc, #684]	; (8002128 <MadgwickAHRSupdate+0xff8>)
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e82:	4ba9      	ldr	r3, [pc, #676]	; (8002128 <MadgwickAHRSupdate+0xff8>)
 8001e84:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001e88:	4ba4      	ldr	r3, [pc, #656]	; (800211c <MadgwickAHRSupdate+0xfec>)
 8001e8a:	ed93 7a00 	vldr	s14, [r3]
 8001e8e:	4ba3      	ldr	r3, [pc, #652]	; (800211c <MadgwickAHRSupdate+0xfec>)
 8001e90:	edd3 7a00 	vldr	s15, [r3]
 8001e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e98:	4ba1      	ldr	r3, [pc, #644]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8001e9a:	edd3 6a00 	vldr	s13, [r3]
 8001e9e:	4ba0      	ldr	r3, [pc, #640]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eac:	4b9d      	ldr	r3, [pc, #628]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8001eae:	edd3 6a00 	vldr	s13, [r3]
 8001eb2:	4b9c      	ldr	r3, [pc, #624]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec0:	4b99      	ldr	r3, [pc, #612]	; (8002128 <MadgwickAHRSupdate+0xff8>)
 8001ec2:	edd3 6a00 	vldr	s13, [r3]
 8001ec6:	4b98      	ldr	r3, [pc, #608]	; (8002128 <MadgwickAHRSupdate+0xff8>)
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed8:	f000 fd66 	bl	80029a8 <invSqrt>
 8001edc:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001ee0:	4b8e      	ldr	r3, [pc, #568]	; (800211c <MadgwickAHRSupdate+0xfec>)
 8001ee2:	ed93 7a00 	vldr	s14, [r3]
 8001ee6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eee:	4b8b      	ldr	r3, [pc, #556]	; (800211c <MadgwickAHRSupdate+0xfec>)
 8001ef0:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001ef4:	4b8a      	ldr	r3, [pc, #552]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8001ef6:	ed93 7a00 	vldr	s14, [r3]
 8001efa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f02:	4b87      	ldr	r3, [pc, #540]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8001f04:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001f08:	4b86      	ldr	r3, [pc, #536]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f16:	4b83      	ldr	r3, [pc, #524]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8001f18:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001f1c:	4b82      	ldr	r3, [pc, #520]	; (8002128 <MadgwickAHRSupdate+0xff8>)
 8001f1e:	ed93 7a00 	vldr	s14, [r3]
 8001f22:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2a:	4b7f      	ldr	r3, [pc, #508]	; (8002128 <MadgwickAHRSupdate+0xff8>)
 8001f2c:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8001f30:	4b7a      	ldr	r3, [pc, #488]	; (800211c <MadgwickAHRSupdate+0xfec>)
 8001f32:	ed93 7a00 	vldr	s14, [r3]
 8001f36:	4b7a      	ldr	r3, [pc, #488]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f40:	4b78      	ldr	r3, [pc, #480]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8001f42:	edd3 6a00 	vldr	s13, [r3]
 8001f46:	4b78      	ldr	r3, [pc, #480]	; (8002128 <MadgwickAHRSupdate+0xff8>)
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f50:	ee37 6a27 	vadd.f32	s12, s14, s15
 8001f54:	4b72      	ldr	r3, [pc, #456]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8001f56:	ed93 7a00 	vldr	s14, [r3]
 8001f5a:	4b71      	ldr	r3, [pc, #452]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f6c:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8001f6e:	edd3 6a00 	vldr	s13, [r3]
 8001f72:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f80:	eef0 0a67 	vmov.f32	s1, s15
 8001f84:	eeb0 0a46 	vmov.f32	s0, s12
 8001f88:	f010 fbaa 	bl	80126e0 <atan2f>
 8001f8c:	eef0 7a40 	vmov.f32	s15, s0
 8001f90:	4b66      	ldr	r3, [pc, #408]	; (800212c <MadgwickAHRSupdate+0xffc>)
 8001f92:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 8001f96:	4b62      	ldr	r3, [pc, #392]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8001f98:	ed93 7a00 	vldr	s14, [r3]
 8001f9c:	4b62      	ldr	r3, [pc, #392]	; (8002128 <MadgwickAHRSupdate+0xff8>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <MadgwickAHRSupdate+0xfec>)
 8001fa8:	edd3 6a00 	vldr	s13, [r3]
 8001fac:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fba:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc6:	f010 fb59 	bl	801267c <asinf>
 8001fca:	eef0 7a40 	vmov.f32	s15, s0
 8001fce:	4b58      	ldr	r3, [pc, #352]	; (8002130 <MadgwickAHRSupdate+0x1000>)
 8001fd0:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8001fd4:	4b52      	ldr	r3, [pc, #328]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8001fd6:	ed93 7a00 	vldr	s14, [r3]
 8001fda:	4b52      	ldr	r3, [pc, #328]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe4:	4b4d      	ldr	r3, [pc, #308]	; (800211c <MadgwickAHRSupdate+0xfec>)
 8001fe6:	edd3 6a00 	vldr	s13, [r3]
 8001fea:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <MadgwickAHRSupdate+0xff8>)
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ffc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002000:	4b46      	ldr	r3, [pc, #280]	; (800211c <MadgwickAHRSupdate+0xfec>)
 8002002:	ed93 6a00 	vldr	s12, [r3]
 8002006:	4b45      	ldr	r3, [pc, #276]	; (800211c <MadgwickAHRSupdate+0xfec>)
 8002008:	edd3 6a00 	vldr	s13, [r3]
 800200c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002010:	4b43      	ldr	r3, [pc, #268]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8002012:	edd3 5a00 	vldr	s11, [r3]
 8002016:	4b42      	ldr	r3, [pc, #264]	; (8002120 <MadgwickAHRSupdate+0xff0>)
 8002018:	edd3 6a00 	vldr	s13, [r3]
 800201c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002020:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002024:	4b3f      	ldr	r3, [pc, #252]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 8002026:	edd3 5a00 	vldr	s11, [r3]
 800202a:	4b3e      	ldr	r3, [pc, #248]	; (8002124 <MadgwickAHRSupdate+0xff4>)
 800202c:	edd3 6a00 	vldr	s13, [r3]
 8002030:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002034:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002038:	4b3b      	ldr	r3, [pc, #236]	; (8002128 <MadgwickAHRSupdate+0xff8>)
 800203a:	edd3 5a00 	vldr	s11, [r3]
 800203e:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <MadgwickAHRSupdate+0xff8>)
 8002040:	edd3 6a00 	vldr	s13, [r3]
 8002044:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002048:	ee76 6a66 	vsub.f32	s13, s12, s13
 800204c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002050:	eeb0 1b46 	vmov.f64	d1, d6
 8002054:	eeb0 0b47 	vmov.f64	d0, d7
 8002058:	f010 fae2 	bl	8012620 <atan2>
 800205c:	eeb0 7b40 	vmov.f64	d7, d0
 8002060:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002064:	4b33      	ldr	r3, [pc, #204]	; (8002134 <MadgwickAHRSupdate+0x1004>)
 8002066:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 800206a:	4b30      	ldr	r3, [pc, #192]	; (800212c <MadgwickAHRSupdate+0xffc>)
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002138 <MadgwickAHRSupdate+0x1008>
 8002074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002078:	4b2c      	ldr	r3, [pc, #176]	; (800212c <MadgwickAHRSupdate+0xffc>)
 800207a:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 800207e:	4b2c      	ldr	r3, [pc, #176]	; (8002130 <MadgwickAHRSupdate+0x1000>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002138 <MadgwickAHRSupdate+0x1008>
 8002088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800208c:	4b28      	ldr	r3, [pc, #160]	; (8002130 <MadgwickAHRSupdate+0x1000>)
 800208e:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002092:	4b28      	ldr	r3, [pc, #160]	; (8002134 <MadgwickAHRSupdate+0x1004>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002138 <MadgwickAHRSupdate+0x1008>
 800209c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <MadgwickAHRSupdate+0x1004>)
 80020a2:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 80020a6:	4b21      	ldr	r3, [pc, #132]	; (800212c <MadgwickAHRSupdate+0xffc>)
 80020a8:	ed93 7a00 	vldr	s14, [r3]
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <MadgwickAHRSupdate+0x100c>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <MadgwickAHRSupdate+0xffc>)
 80020b8:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 80020bc:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <MadgwickAHRSupdate+0x1000>)
 80020be:	ed93 7a00 	vldr	s14, [r3]
 80020c2:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <MadgwickAHRSupdate+0x1010>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <MadgwickAHRSupdate+0x1000>)
 80020ce:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MadgwickAHRSupdate+0x1004>)
 80020d4:	ed93 7a00 	vldr	s14, [r3]
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <MadgwickAHRSupdate+0x1014>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MadgwickAHRSupdate+0x1004>)
 80020e4:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MadgwickAHRSupdate+0x1004>)
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f6:	d509      	bpl.n	800210c <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MadgwickAHRSupdate+0x1004>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002148 <MadgwickAHRSupdate+0x1018>
 8002102:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <MadgwickAHRSupdate+0x1004>)
 8002108:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800210c:	37b8      	adds	r7, #184	; 0xb8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	24000010 	.word	0x24000010
 8002118:	3b03126f 	.word	0x3b03126f
 800211c:	24000014 	.word	0x24000014
 8002120:	24000218 	.word	0x24000218
 8002124:	2400021c 	.word	0x2400021c
 8002128:	24000220 	.word	0x24000220
 800212c:	240002e0 	.word	0x240002e0
 8002130:	240002e4 	.word	0x240002e4
 8002134:	240002dc 	.word	0x240002dc
 8002138:	42652ee1 	.word	0x42652ee1
 800213c:	24000224 	.word	0x24000224
 8002140:	24000228 	.word	0x24000228
 8002144:	2400022c 	.word	0x2400022c
 8002148:	43b40000 	.word	0x43b40000

0800214c <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b09c      	sub	sp, #112	; 0x70
 8002150:	af00      	add	r7, sp, #0
 8002152:	ed87 0a05 	vstr	s0, [r7, #20]
 8002156:	edc7 0a04 	vstr	s1, [r7, #16]
 800215a:	ed87 1a03 	vstr	s2, [r7, #12]
 800215e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002162:	ed87 2a01 	vstr	s4, [r7, #4]
 8002166:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800216a:	4bee      	ldr	r3, [pc, #952]	; (8002524 <MadgwickAHRSupdateIMU+0x3d8>)
 800216c:	edd3 7a00 	vldr	s15, [r3]
 8002170:	eeb1 7a67 	vneg.f32	s14, s15
 8002174:	edd7 7a05 	vldr	s15, [r7, #20]
 8002178:	ee27 7a27 	vmul.f32	s14, s14, s15
 800217c:	4bea      	ldr	r3, [pc, #936]	; (8002528 <MadgwickAHRSupdateIMU+0x3dc>)
 800217e:	edd3 6a00 	vldr	s13, [r3]
 8002182:	edd7 7a04 	vldr	s15, [r7, #16]
 8002186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800218a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800218e:	4be7      	ldr	r3, [pc, #924]	; (800252c <MadgwickAHRSupdateIMU+0x3e0>)
 8002190:	edd3 6a00 	vldr	s13, [r3]
 8002194:	edd7 7a03 	vldr	s15, [r7, #12]
 8002198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80021ac:	4be0      	ldr	r3, [pc, #896]	; (8002530 <MadgwickAHRSupdateIMU+0x3e4>)
 80021ae:	ed93 7a00 	vldr	s14, [r3]
 80021b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80021b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ba:	4bdb      	ldr	r3, [pc, #876]	; (8002528 <MadgwickAHRSupdateIMU+0x3dc>)
 80021bc:	edd3 6a00 	vldr	s13, [r3]
 80021c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021cc:	4bd7      	ldr	r3, [pc, #860]	; (800252c <MadgwickAHRSupdateIMU+0x3e0>)
 80021ce:	edd3 6a00 	vldr	s13, [r3]
 80021d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80021d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80021ea:	4bd1      	ldr	r3, [pc, #836]	; (8002530 <MadgwickAHRSupdateIMU+0x3e4>)
 80021ec:	ed93 7a00 	vldr	s14, [r3]
 80021f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80021f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f8:	4bca      	ldr	r3, [pc, #808]	; (8002524 <MadgwickAHRSupdateIMU+0x3d8>)
 80021fa:	edd3 6a00 	vldr	s13, [r3]
 80021fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800220a:	4bc8      	ldr	r3, [pc, #800]	; (800252c <MadgwickAHRSupdateIMU+0x3e0>)
 800220c:	edd3 6a00 	vldr	s13, [r3]
 8002210:	edd7 7a05 	vldr	s15, [r7, #20]
 8002214:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002224:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002228:	4bc1      	ldr	r3, [pc, #772]	; (8002530 <MadgwickAHRSupdateIMU+0x3e4>)
 800222a:	ed93 7a00 	vldr	s14, [r3]
 800222e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002232:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002236:	4bbb      	ldr	r3, [pc, #748]	; (8002524 <MadgwickAHRSupdateIMU+0x3d8>)
 8002238:	edd3 6a00 	vldr	s13, [r3]
 800223c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002248:	4bb7      	ldr	r3, [pc, #732]	; (8002528 <MadgwickAHRSupdateIMU+0x3dc>)
 800224a:	edd3 6a00 	vldr	s13, [r3]
 800224e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800225e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002262:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002266:	edd7 7a02 	vldr	s15, [r7, #8]
 800226a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	d10e      	bne.n	8002292 <MadgwickAHRSupdateIMU+0x146>
 8002274:	edd7 7a01 	vldr	s15, [r7, #4]
 8002278:	eef5 7a40 	vcmp.f32	s15, #0.0
 800227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002280:	d107      	bne.n	8002292 <MadgwickAHRSupdateIMU+0x146>
 8002282:	edd7 7a00 	vldr	s15, [r7]
 8002286:	eef5 7a40 	vcmp.f32	s15, #0.0
 800228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228e:	f000 81e5 	beq.w	800265c <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002292:	edd7 7a02 	vldr	s15, [r7, #8]
 8002296:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800229a:	edd7 7a01 	vldr	s15, [r7, #4]
 800229e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a6:	edd7 7a00 	vldr	s15, [r7]
 80022aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b2:	eeb0 0a67 	vmov.f32	s0, s15
 80022b6:	f000 fb77 	bl	80029a8 <invSqrt>
 80022ba:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 80022be:	ed97 7a02 	vldr	s14, [r7, #8]
 80022c2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80022ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80022d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022da:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 80022de:	ed97 7a00 	vldr	s14, [r7]
 80022e2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ea:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80022ee:	4b90      	ldr	r3, [pc, #576]	; (8002530 <MadgwickAHRSupdateIMU+0x3e4>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022f8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 80022fc:	4b89      	ldr	r3, [pc, #548]	; (8002524 <MadgwickAHRSupdateIMU+0x3d8>)
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002306:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 800230a:	4b87      	ldr	r3, [pc, #540]	; (8002528 <MadgwickAHRSupdateIMU+0x3dc>)
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002314:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 8002318:	4b84      	ldr	r3, [pc, #528]	; (800252c <MadgwickAHRSupdateIMU+0x3e0>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002322:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 8002326:	4b82      	ldr	r3, [pc, #520]	; (8002530 <MadgwickAHRSupdateIMU+0x3e4>)
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002334:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8002338:	4b7a      	ldr	r3, [pc, #488]	; (8002524 <MadgwickAHRSupdateIMU+0x3d8>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002346:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 800234a:	4b77      	ldr	r3, [pc, #476]	; (8002528 <MadgwickAHRSupdateIMU+0x3dc>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002358:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 800235c:	4b71      	ldr	r3, [pc, #452]	; (8002524 <MadgwickAHRSupdateIMU+0x3d8>)
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 800236e:	4b6e      	ldr	r3, [pc, #440]	; (8002528 <MadgwickAHRSupdateIMU+0x3dc>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8002380:	4b6b      	ldr	r3, [pc, #428]	; (8002530 <MadgwickAHRSupdateIMU+0x3e4>)
 8002382:	ed93 7a00 	vldr	s14, [r3]
 8002386:	4b6a      	ldr	r3, [pc, #424]	; (8002530 <MadgwickAHRSupdateIMU+0x3e4>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002390:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8002394:	4b63      	ldr	r3, [pc, #396]	; (8002524 <MadgwickAHRSupdateIMU+0x3d8>)
 8002396:	ed93 7a00 	vldr	s14, [r3]
 800239a:	4b62      	ldr	r3, [pc, #392]	; (8002524 <MadgwickAHRSupdateIMU+0x3d8>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 80023a8:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <MadgwickAHRSupdateIMU+0x3dc>)
 80023aa:	ed93 7a00 	vldr	s14, [r3]
 80023ae:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <MadgwickAHRSupdateIMU+0x3dc>)
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 80023bc:	4b5b      	ldr	r3, [pc, #364]	; (800252c <MadgwickAHRSupdateIMU+0x3e0>)
 80023be:	ed93 7a00 	vldr	s14, [r3]
 80023c2:	4b5a      	ldr	r3, [pc, #360]	; (800252c <MadgwickAHRSupdateIMU+0x3e0>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023cc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80023d0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80023d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80023d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023dc:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80023e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ec:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80023f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fc:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002400:	edd7 7a01 	vldr	s15, [r7, #4]
 8002404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002410:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8002414:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002418:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002420:	edd7 7a02 	vldr	s15, [r7, #8]
 8002424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002428:	ee37 7a67 	vsub.f32	s14, s14, s15
 800242c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002430:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002434:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002438:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <MadgwickAHRSupdateIMU+0x3d8>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002442:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002446:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800244a:	edd7 7a01 	vldr	s15, [r7, #4]
 800244e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002452:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002456:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800245a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800245e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002462:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800246a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800246e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002472:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002476:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800247a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002482:	edd7 7a00 	vldr	s15, [r7]
 8002486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800248a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248e:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002492:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002496:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800249a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <MadgwickAHRSupdateIMU+0x3dc>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024a8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80024ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80024b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80024bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024c8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80024cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80024dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024e0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80024e4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80024f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002500:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002504:	edd7 7a00 	vldr	s15, [r7]
 8002508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800250c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002510:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002514:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002518:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800251c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002520:	e008      	b.n	8002534 <MadgwickAHRSupdateIMU+0x3e8>
 8002522:	bf00      	nop
 8002524:	24000218 	.word	0x24000218
 8002528:	2400021c 	.word	0x2400021c
 800252c:	24000220 	.word	0x24000220
 8002530:	24000014 	.word	0x24000014
 8002534:	4be0      	ldr	r3, [pc, #896]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800253e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002542:	edd7 7a02 	vldr	s15, [r7, #8]
 8002546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800254a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800254e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002552:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002556:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800255a:	4bd7      	ldr	r3, [pc, #860]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 800255c:	edd3 7a00 	vldr	s15, [r3]
 8002560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002564:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002568:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800256c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002570:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002578:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800257c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002580:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002584:	edd7 7a08 	vldr	s15, [r7, #32]
 8002588:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800258c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002590:	edd7 7a07 	vldr	s15, [r7, #28]
 8002594:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002598:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259c:	edd7 7a06 	vldr	s15, [r7, #24]
 80025a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	eeb0 0a67 	vmov.f32	s0, s15
 80025ac:	f000 f9fc 	bl	80029a8 <invSqrt>
 80025b0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 80025b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80025b8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 80025c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80025c8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d0:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80025d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80025d8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e0:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 80025e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80025e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80025ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f0:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 80025f4:	4bb1      	ldr	r3, [pc, #708]	; (80028bc <MadgwickAHRSupdateIMU+0x770>)
 80025f6:	ed93 7a00 	vldr	s14, [r3]
 80025fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800260a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 800260e:	4bab      	ldr	r3, [pc, #684]	; (80028bc <MadgwickAHRSupdateIMU+0x770>)
 8002610:	ed93 7a00 	vldr	s14, [r3]
 8002614:	edd7 7a08 	vldr	s15, [r7, #32]
 8002618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002624:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002628:	4ba4      	ldr	r3, [pc, #656]	; (80028bc <MadgwickAHRSupdateIMU+0x770>)
 800262a:	ed93 7a00 	vldr	s14, [r3]
 800262e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002636:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800263a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8002642:	4b9e      	ldr	r3, [pc, #632]	; (80028bc <MadgwickAHRSupdateIMU+0x770>)
 8002644:	ed93 7a00 	vldr	s14, [r3]
 8002648:	edd7 7a06 	vldr	s15, [r7, #24]
 800264c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002650:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002658:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 800265c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002660:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80028c0 <MadgwickAHRSupdateIMU+0x774>
 8002664:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002668:	4b96      	ldr	r3, [pc, #600]	; (80028c4 <MadgwickAHRSupdateIMU+0x778>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002672:	4b94      	ldr	r3, [pc, #592]	; (80028c4 <MadgwickAHRSupdateIMU+0x778>)
 8002674:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002678:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800267c:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80028c0 <MadgwickAHRSupdateIMU+0x774>
 8002680:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002684:	4b90      	ldr	r3, [pc, #576]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 8002686:	edd3 7a00 	vldr	s15, [r3]
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	4b8e      	ldr	r3, [pc, #568]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 8002690:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002694:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002698:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80028c0 <MadgwickAHRSupdateIMU+0x774>
 800269c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026a0:	4b8a      	ldr	r3, [pc, #552]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 80026a2:	edd3 7a00 	vldr	s15, [r3]
 80026a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026aa:	4b88      	ldr	r3, [pc, #544]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 80026ac:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80026b0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80026b4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80028c0 <MadgwickAHRSupdateIMU+0x774>
 80026b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026bc:	4b7e      	ldr	r3, [pc, #504]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c6:	4b7c      	ldr	r3, [pc, #496]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 80026c8:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80026cc:	4b7d      	ldr	r3, [pc, #500]	; (80028c4 <MadgwickAHRSupdateIMU+0x778>)
 80026ce:	ed93 7a00 	vldr	s14, [r3]
 80026d2:	4b7c      	ldr	r3, [pc, #496]	; (80028c4 <MadgwickAHRSupdateIMU+0x778>)
 80026d4:	edd3 7a00 	vldr	s15, [r3]
 80026d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026dc:	4b7a      	ldr	r3, [pc, #488]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 80026de:	edd3 6a00 	vldr	s13, [r3]
 80026e2:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f0:	4b76      	ldr	r3, [pc, #472]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 80026f2:	edd3 6a00 	vldr	s13, [r3]
 80026f6:	4b75      	ldr	r3, [pc, #468]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002700:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002704:	4b6c      	ldr	r3, [pc, #432]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 8002706:	edd3 6a00 	vldr	s13, [r3]
 800270a:	4b6b      	ldr	r3, [pc, #428]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002718:	eeb0 0a67 	vmov.f32	s0, s15
 800271c:	f000 f944 	bl	80029a8 <invSqrt>
 8002720:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 8002724:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <MadgwickAHRSupdateIMU+0x778>)
 8002726:	ed93 7a00 	vldr	s14, [r3]
 800272a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002732:	4b64      	ldr	r3, [pc, #400]	; (80028c4 <MadgwickAHRSupdateIMU+0x778>)
 8002734:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002738:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 800273a:	ed93 7a00 	vldr	s14, [r3]
 800273e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002746:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 8002748:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 800274c:	4b5f      	ldr	r3, [pc, #380]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 800274e:	ed93 7a00 	vldr	s14, [r3]
 8002752:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	4b5c      	ldr	r3, [pc, #368]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 800275c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002760:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 8002762:	ed93 7a00 	vldr	s14, [r3]
 8002766:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800276a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800276e:	4b52      	ldr	r3, [pc, #328]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 8002770:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002774:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <MadgwickAHRSupdateIMU+0x778>)
 8002776:	ed93 7a00 	vldr	s14, [r3]
 800277a:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002784:	4b51      	ldr	r3, [pc, #324]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 8002786:	edd3 6a00 	vldr	s13, [r3]
 800278a:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002794:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002798:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 800279a:	ed93 7a00 	vldr	s14, [r3]
 800279e:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027b0:	4b46      	ldr	r3, [pc, #280]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 80027b2:	edd3 6a00 	vldr	s13, [r3]
 80027b6:	4b45      	ldr	r3, [pc, #276]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c4:	eef0 0a67 	vmov.f32	s1, s15
 80027c8:	eeb0 0a46 	vmov.f32	s0, s12
 80027cc:	f00f ff88 	bl	80126e0 <atan2f>
 80027d0:	eef0 7a40 	vmov.f32	s15, s0
 80027d4:	4b3e      	ldr	r3, [pc, #248]	; (80028d0 <MadgwickAHRSupdateIMU+0x784>)
 80027d6:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 80027da:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 80027dc:	ed93 7a00 	vldr	s14, [r3]
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <MadgwickAHRSupdateIMU+0x778>)
 80027ec:	edd3 6a00 	vldr	s13, [r3]
 80027f0:	4b36      	ldr	r3, [pc, #216]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fe:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002806:	eeb0 0a67 	vmov.f32	s0, s15
 800280a:	f00f ff37 	bl	801267c <asinf>
 800280e:	eef0 7a40 	vmov.f32	s15, s0
 8002812:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <MadgwickAHRSupdateIMU+0x788>)
 8002814:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 800281a:	ed93 7a00 	vldr	s14, [r3]
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 8002820:	edd3 7a00 	vldr	s15, [r3]
 8002824:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002828:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <MadgwickAHRSupdateIMU+0x778>)
 800282a:	edd3 6a00 	vldr	s13, [r3]
 800282e:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <MadgwickAHRSupdateIMU+0x778>)
 8002846:	ed93 6a00 	vldr	s12, [r3]
 800284a:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <MadgwickAHRSupdateIMU+0x778>)
 800284c:	edd3 6a00 	vldr	s13, [r3]
 8002850:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002854:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 8002856:	edd3 5a00 	vldr	s11, [r3]
 800285a:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <MadgwickAHRSupdateIMU+0x77c>)
 800285c:	edd3 6a00 	vldr	s13, [r3]
 8002860:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002864:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002868:	4b18      	ldr	r3, [pc, #96]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 800286a:	edd3 5a00 	vldr	s11, [r3]
 800286e:	4b17      	ldr	r3, [pc, #92]	; (80028cc <MadgwickAHRSupdateIMU+0x780>)
 8002870:	edd3 6a00 	vldr	s13, [r3]
 8002874:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002878:	ee36 6a66 	vsub.f32	s12, s12, s13
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 800287e:	edd3 5a00 	vldr	s11, [r3]
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <MadgwickAHRSupdateIMU+0x76c>)
 8002884:	edd3 6a00 	vldr	s13, [r3]
 8002888:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800288c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002890:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002894:	eeb0 1b46 	vmov.f64	d1, d6
 8002898:	eeb0 0b47 	vmov.f64	d0, d7
 800289c:	f00f fec0 	bl	8012620 <atan2>
 80028a0:	eeb0 7b40 	vmov.f64	d7, d0
 80028a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <MadgwickAHRSupdateIMU+0x78c>)
 80028aa:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <MadgwickAHRSupdateIMU+0x784>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	e014      	b.n	80028e0 <MadgwickAHRSupdateIMU+0x794>
 80028b6:	bf00      	nop
 80028b8:	24000220 	.word	0x24000220
 80028bc:	24000010 	.word	0x24000010
 80028c0:	3b03126f 	.word	0x3b03126f
 80028c4:	24000014 	.word	0x24000014
 80028c8:	24000218 	.word	0x24000218
 80028cc:	2400021c 	.word	0x2400021c
 80028d0:	240002e0 	.word	0x240002e0
 80028d4:	240002e4 	.word	0x240002e4
 80028d8:	240002dc 	.word	0x240002dc
 80028dc:	42652ee1 	.word	0x42652ee1
 80028e0:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80028dc <MadgwickAHRSupdateIMU+0x790>
 80028e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028e8:	4b27      	ldr	r3, [pc, #156]	; (8002988 <MadgwickAHRSupdateIMU+0x83c>)
 80028ea:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 80028ee:	4b27      	ldr	r3, [pc, #156]	; (800298c <MadgwickAHRSupdateIMU+0x840>)
 80028f0:	edd3 7a00 	vldr	s15, [r3]
 80028f4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002990 <MadgwickAHRSupdateIMU+0x844>
 80028f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028fc:	4b23      	ldr	r3, [pc, #140]	; (800298c <MadgwickAHRSupdateIMU+0x840>)
 80028fe:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <MadgwickAHRSupdateIMU+0x848>)
 8002904:	edd3 7a00 	vldr	s15, [r3]
 8002908:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002990 <MadgwickAHRSupdateIMU+0x844>
 800290c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002910:	4b20      	ldr	r3, [pc, #128]	; (8002994 <MadgwickAHRSupdateIMU+0x848>)
 8002912:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <MadgwickAHRSupdateIMU+0x83c>)
 8002918:	ed93 7a00 	vldr	s14, [r3]
 800291c:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <MadgwickAHRSupdateIMU+0x84c>)
 800291e:	edd3 7a00 	vldr	s15, [r3]
 8002922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <MadgwickAHRSupdateIMU+0x83c>)
 8002928:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 800292c:	4b17      	ldr	r3, [pc, #92]	; (800298c <MadgwickAHRSupdateIMU+0x840>)
 800292e:	ed93 7a00 	vldr	s14, [r3]
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <MadgwickAHRSupdateIMU+0x850>)
 8002934:	edd3 7a00 	vldr	s15, [r3]
 8002938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293c:	4b13      	ldr	r3, [pc, #76]	; (800298c <MadgwickAHRSupdateIMU+0x840>)
 800293e:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002942:	4b14      	ldr	r3, [pc, #80]	; (8002994 <MadgwickAHRSupdateIMU+0x848>)
 8002944:	ed93 7a00 	vldr	s14, [r3]
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <MadgwickAHRSupdateIMU+0x854>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <MadgwickAHRSupdateIMU+0x848>)
 8002954:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <MadgwickAHRSupdateIMU+0x848>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	d400      	bmi.n	800296a <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002968:	e009      	b.n	800297e <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <MadgwickAHRSupdateIMU+0x848>)
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80029a4 <MadgwickAHRSupdateIMU+0x858>
 8002974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <MadgwickAHRSupdateIMU+0x848>)
 800297a:	edc3 7a00 	vstr	s15, [r3]
}
 800297e:	bf00      	nop
 8002980:	3770      	adds	r7, #112	; 0x70
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	240002e0 	.word	0x240002e0
 800298c:	240002e4 	.word	0x240002e4
 8002990:	42652ee1 	.word	0x42652ee1
 8002994:	240002dc 	.word	0x240002dc
 8002998:	24000224 	.word	0x24000224
 800299c:	24000228 	.word	0x24000228
 80029a0:	2400022c 	.word	0x2400022c
 80029a4:	43b40000 	.word	0x43b40000

080029a8 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80029b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029be:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80029c6:	f107 0310 	add.w	r3, r7, #16
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	105a      	asrs	r2, r3, #1
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <invSqrt+0x74>)
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80029e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80029e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80029f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80029f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a04:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	ee07 3a90 	vmov	s15, r3
}
 8002a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a12:	371c      	adds	r7, #28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	5f3759df 	.word	0x5f3759df

08002a20 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	4803      	ldr	r0, [pc, #12]	; (8002a44 <_write+0x24>)
 8002a36:	f00b f90f 	bl	800dc58 <HAL_UART_Transmit_DMA>
}
 8002a3a:	bf00      	nop
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	240003ac 	.word	0x240003ac

08002a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a4e:	f001 fce7 	bl	8004420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a52:	f000 fa45 	bl	8002ee0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002a56:	f000 fac1 	bl	8002fdc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a5a:	f000 fc1b 	bl	8003294 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a5e:	f000 fbf1 	bl	8003244 <MX_DMA_Init>
  MX_TIM7_Init();
 8002a62:	f000 fb6d 	bl	8003140 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002a66:	f000 fba1 	bl	80031ac <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002a6a:	f000 fad3 	bl	8003014 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002a6e:	f000 fb11 	bl	8003094 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8002a72:	4870      	ldr	r0, [pc, #448]	; (8002c34 <main+0x1ec>)
 8002a74:	f00a fd62 	bl	800d53c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8002a78:	2201      	movs	r2, #1
 8002a7a:	496f      	ldr	r1, [pc, #444]	; (8002c38 <main+0x1f0>)
 8002a7c:	486f      	ldr	r0, [pc, #444]	; (8002c3c <main+0x1f4>)
 8002a7e:	f00b f8a5 	bl	800dbcc <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002a82:	e009      	b.n	8002a98 <main+0x50>
	{
		if(tim1_20ms_flag == 1)
 8002a84:	4b6e      	ldr	r3, [pc, #440]	; (8002c40 <main+0x1f8>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <main+0x50>
		{
			tim1_20ms_flag = 0;
 8002a8c:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <main+0x1f8>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8002a92:	486c      	ldr	r0, [pc, #432]	; (8002c44 <main+0x1fc>)
 8002a94:	f00d fdc0 	bl	8010618 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002a98:	2303      	movs	r3, #3
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	2103      	movs	r1, #3
 8002aa2:	4869      	ldr	r0, [pc, #420]	; (8002c48 <main+0x200>)
 8002aa4:	f7fd fdf0 	bl	8000688 <MPU9250_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ea      	beq.n	8002a84 <main+0x3c>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8002aae:	4866      	ldr	r0, [pc, #408]	; (8002c48 <main+0x200>)
 8002ab0:	f7fd fed2 	bl	8000858 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002ab4:	e009      	b.n	8002aca <main+0x82>
	{
		if(tim1_20ms_flag == 1)
 8002ab6:	4b62      	ldr	r3, [pc, #392]	; (8002c40 <main+0x1f8>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <main+0x82>
		{
			tim1_20ms_flag = 0;
 8002abe:	4b60      	ldr	r3, [pc, #384]	; (8002c40 <main+0x1f8>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 8002ac4:	4861      	ldr	r0, [pc, #388]	; (8002c4c <main+0x204>)
 8002ac6:	f00d fda7 	bl	8010618 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002aca:	4961      	ldr	r1, [pc, #388]	; (8002c50 <main+0x208>)
 8002acc:	485e      	ldr	r0, [pc, #376]	; (8002c48 <main+0x200>)
 8002ace:	f7fd ff43 	bl	8000958 <MPU9250_AK8963_Setup>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ee      	beq.n	8002ab6 <main+0x6e>
		}
	}
//	MPU9250_ASAX = MPU9250.ASAX;
//	MPU9250_ASAY = MPU9250.ASAY;
//	MPU9250_ASAZ = MPU9250.ASAZ;
	MPU9250_Master(&hi2c1);
 8002ad8:	485b      	ldr	r0, [pc, #364]	; (8002c48 <main+0x200>)
 8002ada:	f7fd feeb 	bl	80008b4 <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8002ade:	485a      	ldr	r0, [pc, #360]	; (8002c48 <main+0x200>)
 8002ae0:	f7fd ffa4 	bl	8000a2c <MPU9250_Slave0_Enable>


	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8002ae4:	f001 f96c 	bl	8003dc0 <W25qxx_Init>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 8002ae8:	230c      	movs	r3, #12
 8002aea:	2200      	movs	r2, #0
 8002aec:	2100      	movs	r1, #0
 8002aee:	4859      	ldr	r0, [pc, #356]	; (8002c54 <main+0x20c>)
 8002af0:	f001 fc0a 	bl	8004308 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 8002af4:	4b57      	ldr	r3, [pc, #348]	; (8002c54 <main+0x20c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a55      	ldr	r2, [pc, #340]	; (8002c50 <main+0x208>)
 8002afa:	65d3      	str	r3, [r2, #92]	; 0x5c
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 8002afc:	4b56      	ldr	r3, [pc, #344]	; (8002c58 <main+0x210>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a53      	ldr	r2, [pc, #332]	; (8002c50 <main+0x208>)
 8002b02:	6613      	str	r3, [r2, #96]	; 0x60
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 8002b04:	4b55      	ldr	r3, [pc, #340]	; (8002c5c <main+0x214>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a51      	ldr	r2, [pc, #324]	; (8002c50 <main+0x208>)
 8002b0a:	6653      	str	r3, [r2, #100]	; 0x64

	while (1)
	{
		Receive_Command();
 8002b0c:	f000 fec6 	bl	800389c <Receive_Command>

		// Compass Calibration //
		if(mag_calibration_enable == 1)
 8002b10:	4b53      	ldr	r3, [pc, #332]	; (8002c60 <main+0x218>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	f040 80f0 	bne.w	8002cfa <main+0x2b2>
		{
			for(int i =0;i<5;i++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	e00b      	b.n	8002b38 <main+0xf0>
			{
				MPU9250_Read_All(&hi2c1);
 8002b20:	4849      	ldr	r0, [pc, #292]	; (8002c48 <main+0x200>)
 8002b22:	f7fd ffc3 	bl	8000aac <MPU9250_Read_All>
				HAL_Delay(1);
 8002b26:	2001      	movs	r0, #1
 8002b28:	f001 fd0c 	bl	8004544 <HAL_Delay>
				MPU9250_Parsing_NoOffset(&MPU9250);
 8002b2c:	4848      	ldr	r0, [pc, #288]	; (8002c50 <main+0x208>)
 8002b2e:	f7fe f98b 	bl	8000e48 <MPU9250_Parsing_NoOffset>
			for(int i =0;i<5;i++)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3301      	adds	r3, #1
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	ddf0      	ble.n	8002b20 <main+0xd8>
			}
			MPU9250.Mx_Max = MPU9250.Mx;
 8002b3e:	4b44      	ldr	r3, [pc, #272]	; (8002c50 <main+0x208>)
 8002b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b42:	4a43      	ldr	r2, [pc, #268]	; (8002c50 <main+0x208>)
 8002b44:	6513      	str	r3, [r2, #80]	; 0x50
			MPU9250.Mx_Min = MPU9250.Mx;
 8002b46:	4b42      	ldr	r3, [pc, #264]	; (8002c50 <main+0x208>)
 8002b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b4a:	4a41      	ldr	r2, [pc, #260]	; (8002c50 <main+0x208>)
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
			MPU9250.My_Max = MPU9250.My;
 8002b4e:	4b40      	ldr	r3, [pc, #256]	; (8002c50 <main+0x208>)
 8002b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b52:	4a3f      	ldr	r2, [pc, #252]	; (8002c50 <main+0x208>)
 8002b54:	6553      	str	r3, [r2, #84]	; 0x54
			MPU9250.My_Min = MPU9250.My;
 8002b56:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <main+0x208>)
 8002b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b5a:	4a3d      	ldr	r2, [pc, #244]	; (8002c50 <main+0x208>)
 8002b5c:	6493      	str	r3, [r2, #72]	; 0x48
			MPU9250.Mz_Max = MPU9250.Mz;
 8002b5e:	4b3c      	ldr	r3, [pc, #240]	; (8002c50 <main+0x208>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <main+0x208>)
 8002b64:	6593      	str	r3, [r2, #88]	; 0x58
			MPU9250.Mz_Min = MPU9250.Mz;
 8002b66:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <main+0x208>)
 8002b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6a:	4a39      	ldr	r2, [pc, #228]	; (8002c50 <main+0x208>)
 8002b6c:	64d3      	str	r3, [r2, #76]	; 0x4c

			while(mag_calibration_enable != 0)
 8002b6e:	e07d      	b.n	8002c6c <main+0x224>
			{
				Receive_Command();
 8002b70:	f000 fe94 	bl	800389c <Receive_Command>
				MPU9250_Read_All(&hi2c1);
 8002b74:	4834      	ldr	r0, [pc, #208]	; (8002c48 <main+0x200>)
 8002b76:	f7fd ff99 	bl	8000aac <MPU9250_Read_All>
				HAL_Delay(1);
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	f001 fce2 	bl	8004544 <HAL_Delay>
				MPU9250_Parsing_NoOffset(&MPU9250);
 8002b80:	4833      	ldr	r0, [pc, #204]	; (8002c50 <main+0x208>)
 8002b82:	f7fe f961 	bl	8000e48 <MPU9250_Parsing_NoOffset>
				if(MPU9250.Mx > MPU9250.Mx_Max) MPU9250.Mx_Max = MPU9250.Mx;
 8002b86:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <main+0x208>)
 8002b88:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002b8c:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <main+0x208>)
 8002b8e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9a:	dd03      	ble.n	8002ba4 <main+0x15c>
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <main+0x208>)
 8002b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba0:	4a2b      	ldr	r2, [pc, #172]	; (8002c50 <main+0x208>)
 8002ba2:	6513      	str	r3, [r2, #80]	; 0x50
				if(MPU9250.Mx < MPU9250.Mx_Min) MPU9250.Mx_Min = MPU9250.Mx;
 8002ba4:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <main+0x208>)
 8002ba6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002baa:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <main+0x208>)
 8002bac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb8:	d503      	bpl.n	8002bc2 <main+0x17a>
 8002bba:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <main+0x208>)
 8002bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bbe:	4a24      	ldr	r2, [pc, #144]	; (8002c50 <main+0x208>)
 8002bc0:	6453      	str	r3, [r2, #68]	; 0x44

				if(MPU9250.My > MPU9250.My_Max) MPU9250.My_Max = MPU9250.My;
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <main+0x208>)
 8002bc4:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <main+0x208>)
 8002bca:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd6:	dd03      	ble.n	8002be0 <main+0x198>
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <main+0x208>)
 8002bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bdc:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <main+0x208>)
 8002bde:	6553      	str	r3, [r2, #84]	; 0x54
				if(MPU9250.My < MPU9250.My_Min) MPU9250.My_Min = MPU9250.My;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <main+0x208>)
 8002be2:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <main+0x208>)
 8002be8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	d503      	bpl.n	8002bfe <main+0x1b6>
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <main+0x208>)
 8002bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfa:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <main+0x208>)
 8002bfc:	6493      	str	r3, [r2, #72]	; 0x48

				if(MPU9250.Mz > MPU9250.Mz_Max) MPU9250.Mz_Max = MPU9250.Mz;
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <main+0x208>)
 8002c00:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <main+0x208>)
 8002c06:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002c0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c12:	dd03      	ble.n	8002c1c <main+0x1d4>
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <main+0x208>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <main+0x208>)
 8002c1a:	6593      	str	r3, [r2, #88]	; 0x58
				if(MPU9250.Mz < MPU9250.Mz_Min) MPU9250.Mz_Min = MPU9250.Mz;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <main+0x208>)
 8002c1e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <main+0x208>)
 8002c24:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002c28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	d418      	bmi.n	8002c64 <main+0x21c>
 8002c32:	e01b      	b.n	8002c6c <main+0x224>
 8002c34:	24000548 	.word	0x24000548
 8002c38:	24000235 	.word	0x24000235
 8002c3c:	240003ac 	.word	0x240003ac
 8002c40:	24000233 	.word	0x24000233
 8002c44:	08012f88 	.word	0x08012f88
 8002c48:	240002e8 	.word	0x240002e8
 8002c4c:	08012f9c 	.word	0x08012f9c
 8002c50:	24000250 	.word	0x24000250
 8002c54:	2400053c 	.word	0x2400053c
 8002c58:	24000540 	.word	0x24000540
 8002c5c:	24000544 	.word	0x24000544
 8002c60:	24000231 	.word	0x24000231
 8002c64:	4b90      	ldr	r3, [pc, #576]	; (8002ea8 <main+0x460>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a8f      	ldr	r2, [pc, #572]	; (8002ea8 <main+0x460>)
 8002c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
			while(mag_calibration_enable != 0)
 8002c6c:	4b8f      	ldr	r3, [pc, #572]	; (8002eac <main+0x464>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f47f af7d 	bne.w	8002b70 <main+0x128>
			}
			MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 8002c76:	4b8c      	ldr	r3, [pc, #560]	; (8002ea8 <main+0x460>)
 8002c78:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002c7c:	4b8a      	ldr	r3, [pc, #552]	; (8002ea8 <main+0x460>)
 8002c7e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002c82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c86:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c8e:	4b86      	ldr	r3, [pc, #536]	; (8002ea8 <main+0x460>)
 8002c90:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 8002c94:	4b84      	ldr	r3, [pc, #528]	; (8002ea8 <main+0x460>)
 8002c96:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8002c9a:	4b83      	ldr	r3, [pc, #524]	; (8002ea8 <main+0x460>)
 8002c9c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cac:	4b7e      	ldr	r3, [pc, #504]	; (8002ea8 <main+0x460>)
 8002cae:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 8002cb2:	4b7d      	ldr	r3, [pc, #500]	; (8002ea8 <main+0x460>)
 8002cb4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	; (8002ea8 <main+0x460>)
 8002cba:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cca:	4b77      	ldr	r3, [pc, #476]	; (8002ea8 <main+0x460>)
 8002ccc:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

			*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8002cd0:	4a77      	ldr	r2, [pc, #476]	; (8002eb0 <main+0x468>)
 8002cd2:	4b75      	ldr	r3, [pc, #468]	; (8002ea8 <main+0x460>)
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	6013      	str	r3, [r2, #0]
			*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 8002cd8:	4a76      	ldr	r2, [pc, #472]	; (8002eb4 <main+0x46c>)
 8002cda:	4b73      	ldr	r3, [pc, #460]	; (8002ea8 <main+0x460>)
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cde:	6013      	str	r3, [r2, #0]
			*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 8002ce0:	4a75      	ldr	r2, [pc, #468]	; (8002eb8 <main+0x470>)
 8002ce2:	4b71      	ldr	r3, [pc, #452]	; (8002ea8 <main+0x460>)
 8002ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce6:	6013      	str	r3, [r2, #0]

			W25qxx_EraseSector(0);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f001 f93b 	bl	8003f64 <W25qxx_EraseSector>
			W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 8002cee:	230c      	movs	r3, #12
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	486e      	ldr	r0, [pc, #440]	; (8002eb0 <main+0x468>)
 8002cf6:	f001 fa27 	bl	8004148 <W25qxx_WriteSector>
		}
		// Compass Calibration //

		if(tim1_2ms_flag == 1)
 8002cfa:	4b70      	ldr	r3, [pc, #448]	; (8002ebc <main+0x474>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d133      	bne.n	8002d6a <main+0x322>
		{
			tim1_2ms_flag = 0;
 8002d02:	4b6e      	ldr	r3, [pc, #440]	; (8002ebc <main+0x474>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8002d08:	486d      	ldr	r0, [pc, #436]	; (8002ec0 <main+0x478>)
 8002d0a:	f7fd fecf 	bl	8000aac <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8002d0e:	4866      	ldr	r0, [pc, #408]	; (8002ea8 <main+0x460>)
 8002d10:	f7fd fee2 	bl	8000ad8 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8002d14:	4b64      	ldr	r3, [pc, #400]	; (8002ea8 <main+0x460>)
 8002d16:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d1a:	4b63      	ldr	r3, [pc, #396]	; (8002ea8 <main+0x460>)
 8002d1c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d20:	4b61      	ldr	r3, [pc, #388]	; (8002ea8 <main+0x460>)
 8002d22:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002d26:	4b60      	ldr	r3, [pc, #384]	; (8002ea8 <main+0x460>)
 8002d28:	ed93 6a02 	vldr	s12, [r3, #8]
 8002d2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ea8 <main+0x460>)
 8002d2e:	edd3 5a03 	vldr	s11, [r3, #12]
 8002d32:	4b5d      	ldr	r3, [pc, #372]	; (8002ea8 <main+0x460>)
 8002d34:	ed93 5a04 	vldr	s10, [r3, #16]
 8002d38:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <main+0x460>)
 8002d3a:	edd3 4a1a 	vldr	s9, [r3, #104]	; 0x68
 8002d3e:	4b5a      	ldr	r3, [pc, #360]	; (8002ea8 <main+0x460>)
 8002d40:	edd3 3a1b 	vldr	s7, [r3, #108]	; 0x6c
 8002d44:	4b58      	ldr	r3, [pc, #352]	; (8002ea8 <main+0x460>)
 8002d46:	ed93 4a1c 	vldr	s8, [r3, #112]	; 0x70
 8002d4a:	eeb0 3a64 	vmov.f32	s6, s9
 8002d4e:	eef0 2a45 	vmov.f32	s5, s10
 8002d52:	eeb0 2a65 	vmov.f32	s4, s11
 8002d56:	eef0 1a46 	vmov.f32	s3, s12
 8002d5a:	eeb0 1a66 	vmov.f32	s2, s13
 8002d5e:	eef0 0a47 	vmov.f32	s1, s14
 8002d62:	eeb0 0a67 	vmov.f32	s0, s15
 8002d66:	f7fe f9e3 	bl	8001130 <MadgwickAHRSupdate>
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 8002d6a:	4b56      	ldr	r3, [pc, #344]	; (8002ec4 <main+0x47c>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	f040 8095 	bne.w	8002e9e <main+0x456>
		{
			tim1_20ms_flag = 0;
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <main+0x47c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]

			switch(print_mode)
 8002d7a:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <main+0x480>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	f200 808e 	bhi.w	8002ea2 <main+0x45a>
 8002d86:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <main+0x344>)
 8002d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8c:	08002da5 	.word	0x08002da5
 8002d90:	08002ea3 	.word	0x08002ea3
 8002d94:	08002dd7 	.word	0x08002dd7
 8002d98:	08002e09 	.word	0x08002e09
 8002d9c:	08002e3b 	.word	0x08002e3b
 8002da0:	08002e6d 	.word	0x08002e6d
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 8002da4:	4b49      	ldr	r3, [pc, #292]	; (8002ecc <main+0x484>)
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002dae:	4b48      	ldr	r3, [pc, #288]	; (8002ed0 <main+0x488>)
 8002db0:	edd3 7a00 	vldr	s15, [r3]
 8002db4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002db8:	4b46      	ldr	r3, [pc, #280]	; (8002ed4 <main+0x48c>)
 8002dba:	edd3 6a00 	vldr	s13, [r3]
 8002dbe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002dc2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002dc6:	ed8d 7b00 	vstr	d7, [sp]
 8002dca:	ec53 2b15 	vmov	r2, r3, d5
 8002dce:	4842      	ldr	r0, [pc, #264]	; (8002ed8 <main+0x490>)
 8002dd0:	f00d fb9c 	bl	801050c <iprintf>
 8002dd4:	e066      	b.n	8002ea4 <main+0x45c>
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 8002dd6:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <main+0x460>)
 8002dd8:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ddc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002de0:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <main+0x460>)
 8002de2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002de6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dea:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <main+0x460>)
 8002dec:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002df0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002df4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002df8:	ed8d 7b00 	vstr	d7, [sp]
 8002dfc:	ec53 2b15 	vmov	r2, r3, d5
 8002e00:	4835      	ldr	r0, [pc, #212]	; (8002ed8 <main+0x490>)
 8002e02:	f00d fb83 	bl	801050c <iprintf>
 8002e06:	e04d      	b.n	8002ea4 <main+0x45c>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 8002e08:	4b27      	ldr	r3, [pc, #156]	; (8002ea8 <main+0x460>)
 8002e0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e0e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e12:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <main+0x460>)
 8002e14:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e1c:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <main+0x460>)
 8002e1e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002e22:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e26:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e2a:	ed8d 7b00 	vstr	d7, [sp]
 8002e2e:	ec53 2b15 	vmov	r2, r3, d5
 8002e32:	4829      	ldr	r0, [pc, #164]	; (8002ed8 <main+0x490>)
 8002e34:	f00d fb6a 	bl	801050c <iprintf>
 8002e38:	e034      	b.n	8002ea4 <main+0x45c>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <main+0x460>)
 8002e3c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002e40:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e44:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <main+0x460>)
 8002e46:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002e4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e4e:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <main+0x460>)
 8002e50:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002e54:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e58:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e5c:	ed8d 7b00 	vstr	d7, [sp]
 8002e60:	ec53 2b15 	vmov	r2, r3, d5
 8002e64:	481c      	ldr	r0, [pc, #112]	; (8002ed8 <main+0x490>)
 8002e66:	f00d fb51 	bl	801050c <iprintf>
 8002e6a:	e01b      	b.n	8002ea4 <main+0x45c>
			case 6: printf("%f \t %f \t %f \t \n", MPU9250.Mx_Offset, MPU9250.My_Offset, MPU9250.Mz_Offset); break; //Mag
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <main+0x460>)
 8002e6e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002e72:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <main+0x460>)
 8002e78:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002e7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <main+0x460>)
 8002e82:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8002e86:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e8a:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e8e:	ed8d 7b00 	vstr	d7, [sp]
 8002e92:	ec53 2b15 	vmov	r2, r3, d5
 8002e96:	4811      	ldr	r0, [pc, #68]	; (8002edc <main+0x494>)
 8002e98:	f00d fb38 	bl	801050c <iprintf>
 8002e9c:	e002      	b.n	8002ea4 <main+0x45c>
			default: break;
			}
		}
 8002e9e:	bf00      	nop
 8002ea0:	e634      	b.n	8002b0c <main+0xc4>
			default: break;
 8002ea2:	bf00      	nop
	{
 8002ea4:	e632      	b.n	8002b0c <main+0xc4>
 8002ea6:	bf00      	nop
 8002ea8:	24000250 	.word	0x24000250
 8002eac:	24000231 	.word	0x24000231
 8002eb0:	2400053c 	.word	0x2400053c
 8002eb4:	24000540 	.word	0x24000540
 8002eb8:	24000544 	.word	0x24000544
 8002ebc:	24000232 	.word	0x24000232
 8002ec0:	240002e8 	.word	0x240002e8
 8002ec4:	24000233 	.word	0x24000233
 8002ec8:	24000230 	.word	0x24000230
 8002ecc:	240002e0 	.word	0x240002e0
 8002ed0:	240002e4 	.word	0x240002e4
 8002ed4:	240002dc 	.word	0x240002dc
 8002ed8:	08012fb0 	.word	0x08012fb0
 8002edc:	08012fc8 	.word	0x08012fc8

08002ee0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b09c      	sub	sp, #112	; 0x70
 8002ee4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eea:	224c      	movs	r2, #76	; 0x4c
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f00c fec0 	bl	800fc74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f00c feba 	bl	800fc74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002f00:	2002      	movs	r0, #2
 8002f02:	f006 fed1 	bl	8009ca8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002f06:	2300      	movs	r3, #0
 8002f08:	603b      	str	r3, [r7, #0]
 8002f0a:	4b32      	ldr	r3, [pc, #200]	; (8002fd4 <SystemClock_Config+0xf4>)
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	4a31      	ldr	r2, [pc, #196]	; (8002fd4 <SystemClock_Config+0xf4>)
 8002f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f14:	6193      	str	r3, [r2, #24]
 8002f16:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <SystemClock_Config+0xf4>)
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <SystemClock_Config+0xf8>)
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	4a2c      	ldr	r2, [pc, #176]	; (8002fd8 <SystemClock_Config+0xf8>)
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f2c:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <SystemClock_Config+0xf8>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002f38:	bf00      	nop
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <SystemClock_Config+0xf4>)
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f46:	d1f8      	bne.n	8002f3a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f56:	2340      	movs	r3, #64	; 0x40
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002f62:	2305      	movs	r3, #5
 8002f64:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002f66:	23c0      	movs	r3, #192	; 0xc0
 8002f68:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002f72:	2302      	movs	r3, #2
 8002f74:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8002f76:	2308      	movs	r3, #8
 8002f78:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f86:	4618      	mov	r0, r3
 8002f88:	f006 fec8 	bl	8009d1c <HAL_RCC_OscConfig>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002f92:	f000 f9e7 	bl	8003364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f96:	233f      	movs	r3, #63	; 0x3f
 8002f98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002fa6:	2340      	movs	r3, #64	; 0x40
 8002fa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002faa:	2340      	movs	r3, #64	; 0x40
 8002fac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002fb4:	2340      	movs	r3, #64	; 0x40
 8002fb6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	2104      	movs	r1, #4
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f007 fabd 	bl	800a53c <HAL_RCC_ClockConfig>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <SystemClock_Config+0xec>
  {
    Error_Handler();
 8002fc8:	f000 f9cc 	bl	8003364 <Error_Handler>
  }
}
 8002fcc:	bf00      	nop
 8002fce:	3770      	adds	r7, #112	; 0x70
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	58024800 	.word	0x58024800
 8002fd8:	58000400 	.word	0x58000400

08002fdc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b0b0      	sub	sp, #192	; 0xc0
 8002fe0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	22bc      	movs	r2, #188	; 0xbc
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f00c fe43 	bl	800fc74 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8002fee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ff2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ff8:	1d3b      	adds	r3, r7, #4
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f007 fe2a 	bl	800ac54 <HAL_RCCEx_PeriphCLKConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8003006:	f000 f9ad 	bl	8003364 <Error_Handler>
  }
}
 800300a:	bf00      	nop
 800300c:	37c0      	adds	r7, #192	; 0xc0
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
	...

08003014 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003018:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <MX_I2C1_Init+0x74>)
 800301a:	4a1c      	ldr	r2, [pc, #112]	; (800308c <MX_I2C1_Init+0x78>)
 800301c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 800301e:	4b1a      	ldr	r3, [pc, #104]	; (8003088 <MX_I2C1_Init+0x74>)
 8003020:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <MX_I2C1_Init+0x7c>)
 8003022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003024:	4b18      	ldr	r3, [pc, #96]	; (8003088 <MX_I2C1_Init+0x74>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800302a:	4b17      	ldr	r3, [pc, #92]	; (8003088 <MX_I2C1_Init+0x74>)
 800302c:	2201      	movs	r2, #1
 800302e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <MX_I2C1_Init+0x74>)
 8003032:	2200      	movs	r2, #0
 8003034:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <MX_I2C1_Init+0x74>)
 8003038:	2200      	movs	r2, #0
 800303a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <MX_I2C1_Init+0x74>)
 800303e:	2200      	movs	r2, #0
 8003040:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <MX_I2C1_Init+0x74>)
 8003044:	2200      	movs	r2, #0
 8003046:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <MX_I2C1_Init+0x74>)
 800304a:	2200      	movs	r2, #0
 800304c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800304e:	480e      	ldr	r0, [pc, #56]	; (8003088 <MX_I2C1_Init+0x74>)
 8003050:	f004 fbd6 	bl	8007800 <HAL_I2C_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800305a:	f000 f983 	bl	8003364 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800305e:	2100      	movs	r1, #0
 8003060:	4809      	ldr	r0, [pc, #36]	; (8003088 <MX_I2C1_Init+0x74>)
 8003062:	f006 fd89 	bl	8009b78 <HAL_I2CEx_ConfigAnalogFilter>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800306c:	f000 f97a 	bl	8003364 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003070:	2100      	movs	r1, #0
 8003072:	4805      	ldr	r0, [pc, #20]	; (8003088 <MX_I2C1_Init+0x74>)
 8003074:	f006 fdcb 	bl	8009c0e <HAL_I2CEx_ConfigDigitalFilter>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800307e:	f000 f971 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	240002e8 	.word	0x240002e8
 800308c:	40005400 	.word	0x40005400
 8003090:	00b03fdb 	.word	0x00b03fdb

08003094 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <MX_SPI1_Init+0xa4>)
 800309a:	4a28      	ldr	r2, [pc, #160]	; (800313c <MX_SPI1_Init+0xa8>)
 800309c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80030a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030ac:	4b22      	ldr	r3, [pc, #136]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030ae:	2207      	movs	r2, #7
 80030b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b2:	4b21      	ldr	r3, [pc, #132]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030b8:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030be:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80030c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030c8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80030cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030ce:	4b1a      	ldr	r3, [pc, #104]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030d4:	4b18      	ldr	r3, [pc, #96]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030da:	4b17      	ldr	r3, [pc, #92]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030dc:	2200      	movs	r2, #0
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80030e0:	4b15      	ldr	r3, [pc, #84]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <MX_SPI1_Init+0xa4>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <MX_SPI1_Init+0xa4>)
 8003102:	2200      	movs	r2, #0
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <MX_SPI1_Init+0xa4>)
 8003108:	2200      	movs	r2, #0
 800310a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <MX_SPI1_Init+0xa4>)
 800310e:	2200      	movs	r2, #0
 8003110:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <MX_SPI1_Init+0xa4>)
 8003114:	2200      	movs	r2, #0
 8003116:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003118:	4b07      	ldr	r3, [pc, #28]	; (8003138 <MX_SPI1_Init+0xa4>)
 800311a:	2200      	movs	r2, #0
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <MX_SPI1_Init+0xa4>)
 8003120:	2200      	movs	r2, #0
 8003122:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003124:	4804      	ldr	r0, [pc, #16]	; (8003138 <MX_SPI1_Init+0xa4>)
 8003126:	f009 f8f7 	bl	800c318 <HAL_SPI_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003130:	f000 f918 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}
 8003138:	240004b4 	.word	0x240004b4
 800313c:	40013000 	.word	0x40013000

08003140 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <MX_TIM7_Init+0x64>)
 8003152:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <MX_TIM7_Init+0x68>)
 8003154:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <MX_TIM7_Init+0x64>)
 8003158:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800315c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <MX_TIM7_Init+0x64>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <MX_TIM7_Init+0x64>)
 8003166:	2205      	movs	r2, #5
 8003168:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <MX_TIM7_Init+0x64>)
 800316c:	2280      	movs	r2, #128	; 0x80
 800316e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003170:	480c      	ldr	r0, [pc, #48]	; (80031a4 <MX_TIM7_Init+0x64>)
 8003172:	f00a f98c 	bl	800d48e <HAL_TIM_Base_Init>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800317c:	f000 f8f2 	bl	8003364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003180:	2300      	movs	r3, #0
 8003182:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	4619      	mov	r1, r3
 800318c:	4805      	ldr	r0, [pc, #20]	; (80031a4 <MX_TIM7_Init+0x64>)
 800318e:	f00a fc27 	bl	800d9e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003198:	f000 f8e4 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	24000548 	.word	0x24000548
 80031a8:	40001400 	.word	0x40001400

080031ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031b0:	4b22      	ldr	r3, [pc, #136]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031b2:	4a23      	ldr	r2, [pc, #140]	; (8003240 <MX_USART1_UART_Init+0x94>)
 80031b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031b6:	4b21      	ldr	r3, [pc, #132]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031be:	4b1f      	ldr	r3, [pc, #124]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031d0:	4b1a      	ldr	r3, [pc, #104]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031d2:	220c      	movs	r2, #12
 80031d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d6:	4b19      	ldr	r3, [pc, #100]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031dc:	4b17      	ldr	r3, [pc, #92]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031e8:	4b14      	ldr	r3, [pc, #80]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031f4:	4811      	ldr	r0, [pc, #68]	; (800323c <MX_USART1_UART_Init+0x90>)
 80031f6:	f00a fc99 	bl	800db2c <HAL_UART_Init>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003200:	f000 f8b0 	bl	8003364 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003204:	2100      	movs	r1, #0
 8003206:	480d      	ldr	r0, [pc, #52]	; (800323c <MX_USART1_UART_Init+0x90>)
 8003208:	f00c fc3f 	bl	800fa8a <HAL_UARTEx_SetTxFifoThreshold>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003212:	f000 f8a7 	bl	8003364 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003216:	2100      	movs	r1, #0
 8003218:	4808      	ldr	r0, [pc, #32]	; (800323c <MX_USART1_UART_Init+0x90>)
 800321a:	f00c fc74 	bl	800fb06 <HAL_UARTEx_SetRxFifoThreshold>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003224:	f000 f89e 	bl	8003364 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003228:	4804      	ldr	r0, [pc, #16]	; (800323c <MX_USART1_UART_Init+0x90>)
 800322a:	f00c fbf5 	bl	800fa18 <HAL_UARTEx_DisableFifoMode>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003234:	f000 f896 	bl	8003364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003238:	bf00      	nop
 800323a:	bd80      	pop	{r7, pc}
 800323c:	240003ac 	.word	0x240003ac
 8003240:	40011000 	.word	0x40011000

08003244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <MX_DMA_Init+0x4c>)
 800324c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003250:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <MX_DMA_Init+0x4c>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <MX_DMA_Init+0x4c>)
 800325c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003268:	2200      	movs	r2, #0
 800326a:	2100      	movs	r1, #0
 800326c:	200b      	movs	r0, #11
 800326e:	f001 fa74 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003272:	200b      	movs	r0, #11
 8003274:	f001 fa8b 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003278:	2200      	movs	r2, #0
 800327a:	2100      	movs	r1, #0
 800327c:	200c      	movs	r0, #12
 800327e:	f001 fa6c 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003282:	200c      	movs	r0, #12
 8003284:	f001 fa83 	bl	800478e <HAL_NVIC_EnableIRQ>

}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	58024400 	.word	0x58024400

08003294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329a:	f107 030c 	add.w	r3, r7, #12
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	609a      	str	r2, [r3, #8]
 80032a6:	60da      	str	r2, [r3, #12]
 80032a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80032aa:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <MX_GPIO_Init+0xc4>)
 80032ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <MX_GPIO_Init+0xc4>)
 80032b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ba:	4b27      	ldr	r3, [pc, #156]	; (8003358 <MX_GPIO_Init+0xc4>)
 80032bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c8:	4b23      	ldr	r3, [pc, #140]	; (8003358 <MX_GPIO_Init+0xc4>)
 80032ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ce:	4a22      	ldr	r2, [pc, #136]	; (8003358 <MX_GPIO_Init+0xc4>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032d8:	4b1f      	ldr	r3, [pc, #124]	; (8003358 <MX_GPIO_Init+0xc4>)
 80032da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <MX_GPIO_Init+0xc4>)
 80032e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ec:	4a1a      	ldr	r2, [pc, #104]	; (8003358 <MX_GPIO_Init+0xc4>)
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <MX_GPIO_Init+0xc4>)
 80032f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003304:	2200      	movs	r2, #0
 8003306:	2102      	movs	r1, #2
 8003308:	4814      	ldr	r0, [pc, #80]	; (800335c <MX_GPIO_Init+0xc8>)
 800330a:	f004 fa5f 	bl	80077cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800330e:	2200      	movs	r2, #0
 8003310:	2140      	movs	r1, #64	; 0x40
 8003312:	4813      	ldr	r0, [pc, #76]	; (8003360 <MX_GPIO_Init+0xcc>)
 8003314:	f004 fa5a 	bl	80077cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003318:	2302      	movs	r3, #2
 800331a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800331c:	2301      	movs	r3, #1
 800331e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003324:	2300      	movs	r3, #0
 8003326:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003328:	f107 030c 	add.w	r3, r7, #12
 800332c:	4619      	mov	r1, r3
 800332e:	480b      	ldr	r0, [pc, #44]	; (800335c <MX_GPIO_Init+0xc8>)
 8003330:	f004 f89c 	bl	800746c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003334:	2340      	movs	r3, #64	; 0x40
 8003336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003338:	2301      	movs	r3, #1
 800333a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	4619      	mov	r1, r3
 800334a:	4805      	ldr	r0, [pc, #20]	; (8003360 <MX_GPIO_Init+0xcc>)
 800334c:	f004 f88e 	bl	800746c <HAL_GPIO_Init>

}
 8003350:	bf00      	nop
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	58024400 	.word	0x58024400
 800335c:	58020000 	.word	0x58020000
 8003360:	58020400 	.word	0x58020400

08003364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003368:	b672      	cpsid	i
}
 800336a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800336c:	e7fe      	b.n	800336c <Error_Handler+0x8>
	...

08003370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_MspInit+0x30>)
 8003378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800337c:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <HAL_MspInit+0x30>)
 800337e:	f043 0302 	orr.w	r3, r3, #2
 8003382:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_MspInit+0x30>)
 8003388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	58024400 	.word	0x58024400

080033a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b0b8      	sub	sp, #224	; 0xe0
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033bc:	f107 0310 	add.w	r3, r7, #16
 80033c0:	22bc      	movs	r2, #188	; 0xbc
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f00c fc55 	bl	800fc74 <memset>
  if(hi2c->Instance==I2C1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a3f      	ldr	r2, [pc, #252]	; (80034cc <HAL_I2C_MspInit+0x128>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d177      	bne.n	80034c4 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033d4:	2308      	movs	r3, #8
 80033d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033de:	f107 0310 	add.w	r3, r7, #16
 80033e2:	4618      	mov	r0, r3
 80033e4:	f007 fc36 	bl	800ac54 <HAL_RCCEx_PeriphCLKConfig>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80033ee:	f7ff ffb9 	bl	8003364 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f2:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_I2C_MspInit+0x12c>)
 80033f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f8:	4a35      	ldr	r2, [pc, #212]	; (80034d0 <HAL_I2C_MspInit+0x12c>)
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003402:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <HAL_I2C_MspInit+0x12c>)
 8003404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003410:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003414:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003418:	2312      	movs	r3, #18
 800341a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800342a:	2304      	movs	r3, #4
 800342c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003430:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003434:	4619      	mov	r1, r3
 8003436:	4827      	ldr	r0, [pc, #156]	; (80034d4 <HAL_I2C_MspInit+0x130>)
 8003438:	f004 f818 	bl	800746c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800343c:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <HAL_I2C_MspInit+0x12c>)
 800343e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003442:	4a23      	ldr	r2, [pc, #140]	; (80034d0 <HAL_I2C_MspInit+0x12c>)
 8003444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003448:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_I2C_MspInit+0x12c>)
 800344e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 800345a:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 800345c:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <HAL_I2C_MspInit+0x138>)
 800345e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 8003462:	2221      	movs	r2, #33	; 0x21
 8003464:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003466:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 8003468:	2200      	movs	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800346c:	4b1a      	ldr	r3, [pc, #104]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 800346e:	2200      	movs	r2, #0
 8003470:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003472:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 8003474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003478:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800347a:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 800347c:	2200      	movs	r2, #0
 800347e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003480:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 8003482:	2200      	movs	r2, #0
 8003484:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 8003488:	2200      	movs	r2, #0
 800348a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 800348e:	2200      	movs	r2, #0
 8003490:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 8003494:	2200      	movs	r2, #0
 8003496:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003498:	480f      	ldr	r0, [pc, #60]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 800349a:	f001 f993 	bl	80047c4 <HAL_DMA_Init>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 80034a4:	f7ff ff5e 	bl	8003364 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0b      	ldr	r2, [pc, #44]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 80034ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80034ae:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <HAL_I2C_MspInit+0x134>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80034b4:	2200      	movs	r2, #0
 80034b6:	2100      	movs	r1, #0
 80034b8:	201f      	movs	r0, #31
 80034ba:	f001 f94e 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80034be:	201f      	movs	r0, #31
 80034c0:	f001 f965 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80034c4:	bf00      	nop
 80034c6:	37e0      	adds	r7, #224	; 0xe0
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40005400 	.word	0x40005400
 80034d0:	58024400 	.word	0x58024400
 80034d4:	58020400 	.word	0x58020400
 80034d8:	2400043c 	.word	0x2400043c
 80034dc:	40020028 	.word	0x40020028

080034e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b0b8      	sub	sp, #224	; 0xe0
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034f8:	f107 0310 	add.w	r3, r7, #16
 80034fc:	22bc      	movs	r2, #188	; 0xbc
 80034fe:	2100      	movs	r1, #0
 8003500:	4618      	mov	r0, r3
 8003502:	f00c fbb7 	bl	800fc74 <memset>
  if(hspi->Instance==SPI1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <HAL_SPI_MspInit+0xc0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d142      	bne.n	8003596 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003514:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003516:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800351a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800351c:	f107 0310 	add.w	r3, r7, #16
 8003520:	4618      	mov	r0, r3
 8003522:	f007 fb97 	bl	800ac54 <HAL_RCCEx_PeriphCLKConfig>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800352c:	f7ff ff1a 	bl	8003364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003530:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003536:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800353c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003540:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354e:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003554:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800356c:	23e0      	movs	r3, #224	; 0xe0
 800356e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003572:	2302      	movs	r3, #2
 8003574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	2300      	movs	r3, #0
 8003580:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003584:	2305      	movs	r3, #5
 8003586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800358e:	4619      	mov	r1, r3
 8003590:	4805      	ldr	r0, [pc, #20]	; (80035a8 <HAL_SPI_MspInit+0xc8>)
 8003592:	f003 ff6b 	bl	800746c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003596:	bf00      	nop
 8003598:	37e0      	adds	r7, #224	; 0xe0
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40013000 	.word	0x40013000
 80035a4:	58024400 	.word	0x58024400
 80035a8:	58020000 	.word	0x58020000

080035ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <HAL_TIM_Base_MspInit+0x48>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d116      	bne.n	80035ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80035be:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <HAL_TIM_Base_MspInit+0x4c>)
 80035c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <HAL_TIM_Base_MspInit+0x4c>)
 80035c6:	f043 0320 	orr.w	r3, r3, #32
 80035ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <HAL_TIM_Base_MspInit+0x4c>)
 80035d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80035dc:	2200      	movs	r2, #0
 80035de:	2100      	movs	r1, #0
 80035e0:	2037      	movs	r0, #55	; 0x37
 80035e2:	f001 f8ba 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80035e6:	2037      	movs	r0, #55	; 0x37
 80035e8:	f001 f8d1 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40001400 	.word	0x40001400
 80035f8:	58024400 	.word	0x58024400

080035fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b0b8      	sub	sp, #224	; 0xe0
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003614:	f107 0310 	add.w	r3, r7, #16
 8003618:	22bc      	movs	r2, #188	; 0xbc
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f00c fb29 	bl	800fc74 <memset>
  if(huart->Instance==USART1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a3f      	ldr	r2, [pc, #252]	; (8003724 <HAL_UART_MspInit+0x128>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d177      	bne.n	800371c <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800362c:	2301      	movs	r3, #1
 800362e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003630:	2300      	movs	r3, #0
 8003632:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003636:	f107 0310 	add.w	r3, r7, #16
 800363a:	4618      	mov	r0, r3
 800363c:	f007 fb0a 	bl	800ac54 <HAL_RCCEx_PeriphCLKConfig>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003646:	f7ff fe8d 	bl	8003364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800364a:	4b37      	ldr	r3, [pc, #220]	; (8003728 <HAL_UART_MspInit+0x12c>)
 800364c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003650:	4a35      	ldr	r2, [pc, #212]	; (8003728 <HAL_UART_MspInit+0x12c>)
 8003652:	f043 0310 	orr.w	r3, r3, #16
 8003656:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800365a:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_UART_MspInit+0x12c>)
 800365c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003668:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <HAL_UART_MspInit+0x12c>)
 800366a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800366e:	4a2e      	ldr	r2, [pc, #184]	; (8003728 <HAL_UART_MspInit+0x12c>)
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003678:	4b2b      	ldr	r3, [pc, #172]	; (8003728 <HAL_UART_MspInit+0x12c>)
 800367a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003686:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800368a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368e:	2302      	movs	r3, #2
 8003690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003694:	2300      	movs	r3, #0
 8003696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80036a0:	2304      	movs	r3, #4
 80036a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036a6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80036aa:	4619      	mov	r1, r3
 80036ac:	481f      	ldr	r0, [pc, #124]	; (800372c <HAL_UART_MspInit+0x130>)
 80036ae:	f003 fedd 	bl	800746c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_UART_MspInit+0x134>)
 80036b4:	4a1f      	ldr	r2, [pc, #124]	; (8003734 <HAL_UART_MspInit+0x138>)
 80036b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80036b8:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <HAL_UART_MspInit+0x134>)
 80036ba:	222a      	movs	r2, #42	; 0x2a
 80036bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036be:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <HAL_UART_MspInit+0x134>)
 80036c0:	2240      	movs	r2, #64	; 0x40
 80036c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036c4:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HAL_UART_MspInit+0x134>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036ca:	4b19      	ldr	r3, [pc, #100]	; (8003730 <HAL_UART_MspInit+0x134>)
 80036cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036d2:	4b17      	ldr	r3, [pc, #92]	; (8003730 <HAL_UART_MspInit+0x134>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036d8:	4b15      	ldr	r3, [pc, #84]	; (8003730 <HAL_UART_MspInit+0x134>)
 80036da:	2200      	movs	r2, #0
 80036dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <HAL_UART_MspInit+0x134>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_UART_MspInit+0x134>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_UART_MspInit+0x134>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80036f0:	480f      	ldr	r0, [pc, #60]	; (8003730 <HAL_UART_MspInit+0x134>)
 80036f2:	f001 f867 	bl	80047c4 <HAL_DMA_Init>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 80036fc:	f7ff fe32 	bl	8003364 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <HAL_UART_MspInit+0x134>)
 8003704:	679a      	str	r2, [r3, #120]	; 0x78
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <HAL_UART_MspInit+0x134>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800370c:	2200      	movs	r2, #0
 800370e:	2100      	movs	r1, #0
 8003710:	2025      	movs	r0, #37	; 0x25
 8003712:	f001 f822 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003716:	2025      	movs	r0, #37	; 0x25
 8003718:	f001 f839 	bl	800478e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800371c:	bf00      	nop
 800371e:	37e0      	adds	r7, #224	; 0xe0
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40011000 	.word	0x40011000
 8003728:	58024400 	.word	0x58024400
 800372c:	58020400 	.word	0x58020400
 8003730:	24000334 	.word	0x24000334
 8003734:	40020010 	.word	0x40020010

08003738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800373c:	e7fe      	b.n	800373c <NMI_Handler+0x4>

0800373e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800373e:	b480      	push	{r7}
 8003740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003742:	e7fe      	b.n	8003742 <HardFault_Handler+0x4>

08003744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003748:	e7fe      	b.n	8003748 <MemManage_Handler+0x4>

0800374a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800374a:	b480      	push	{r7}
 800374c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800374e:	e7fe      	b.n	800374e <BusFault_Handler+0x4>

08003750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003754:	e7fe      	b.n	8003754 <UsageFault_Handler+0x4>

08003756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003756:	b480      	push	{r7}
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800375a:	bf00      	nop
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003784:	f000 febe 	bl	8004504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003788:	bf00      	nop
 800378a:	bd80      	pop	{r7, pc}

0800378c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <DMA1_Stream0_IRQHandler+0x10>)
 8003792:	f002 fb3f 	bl	8005e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	24000334 	.word	0x24000334

080037a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <DMA1_Stream1_IRQHandler+0x10>)
 80037a6:	f002 fb35 	bl	8005e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	2400043c 	.word	0x2400043c

080037b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80037b8:	4802      	ldr	r0, [pc, #8]	; (80037c4 <I2C1_EV_IRQHandler+0x10>)
 80037ba:	f004 fbd7 	bl	8007f6c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	240002e8 	.word	0x240002e8

080037c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037cc:	4802      	ldr	r0, [pc, #8]	; (80037d8 <USART1_IRQHandler+0x10>)
 80037ce:	f00a fac3 	bl	800dd58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	240003ac 	.word	0x240003ac

080037dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80037e0:	4802      	ldr	r0, [pc, #8]	; (80037ec <TIM7_IRQHandler+0x10>)
 80037e2:	f009 ff1b 	bl	800d61c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	24000548 	.word	0x24000548

080037f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	static unsigned int tim1_2ms_count = 0;
	static unsigned int tim1_20ms_count = 0;

	if(htim->Instance == TIM7)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a13      	ldr	r2, [pc, #76]	; (800384c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d11d      	bne.n	800383e <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		tim1_2ms_count++;
 8003802:	4b13      	ldr	r3, [pc, #76]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	4a11      	ldr	r2, [pc, #68]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800380a:	6013      	str	r3, [r2, #0]
		if(tim1_2ms_count == 2)
 800380c:	4b10      	ldr	r3, [pc, #64]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d105      	bne.n	8003820 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			tim1_2ms_count = 0;
 8003814:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
			tim1_2ms_flag = 1;
 800381a:	4b0e      	ldr	r3, [pc, #56]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	4a0c      	ldr	r2, [pc, #48]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003828:	6013      	str	r3, [r2, #0]
		if(tim1_20ms_count == 20)
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b14      	cmp	r3, #20
 8003830:	d105      	bne.n	800383e <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			tim1_20ms_count = 0;
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
			tim1_20ms_flag = 1;
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40001400 	.word	0x40001400
 8003850:	24000238 	.word	0x24000238
 8003854:	24000232 	.word	0x24000232
 8003858:	2400023c 	.word	0x2400023c
 800385c:	24000233 	.word	0x24000233

08003860 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a07      	ldr	r2, [pc, #28]	; (800388c <HAL_UART_RxCpltCallback+0x2c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d107      	bne.n	8003882 <HAL_UART_RxCpltCallback+0x22>
	{
		uart1_rx_flag = 1;
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <HAL_UART_RxCpltCallback+0x30>)
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8003878:	2201      	movs	r2, #1
 800387a:	4906      	ldr	r1, [pc, #24]	; (8003894 <HAL_UART_RxCpltCallback+0x34>)
 800387c:	4806      	ldr	r0, [pc, #24]	; (8003898 <HAL_UART_RxCpltCallback+0x38>)
 800387e:	f00a f9a5 	bl	800dbcc <HAL_UART_Receive_IT>
	}
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40011000 	.word	0x40011000
 8003890:	24000234 	.word	0x24000234
 8003894:	24000235 	.word	0x24000235
 8003898:	240003ac 	.word	0x240003ac

0800389c <Receive_Command>:

void Receive_Command(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
	if(uart1_rx_flag == 1)
 80038a0:	4b24      	ldr	r3, [pc, #144]	; (8003934 <Receive_Command+0x98>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d13e      	bne.n	8003926 <Receive_Command+0x8a>
	{
		uart1_rx_flag = 0;
 80038a8:	4b22      	ldr	r3, [pc, #136]	; (8003934 <Receive_Command+0x98>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]

		switch(uart1_rx_data)
 80038ae:	4b22      	ldr	r3, [pc, #136]	; (8003938 <Receive_Command+0x9c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	3b31      	subs	r3, #49	; 0x31
 80038b4:	2b07      	cmp	r3, #7
 80038b6:	d82f      	bhi.n	8003918 <Receive_Command+0x7c>
 80038b8:	a201      	add	r2, pc, #4	; (adr r2, 80038c0 <Receive_Command+0x24>)
 80038ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038be:	bf00      	nop
 80038c0:	080038e1 	.word	0x080038e1
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	080038f9 	.word	0x080038f9
 80038d0:	08003901 	.word	0x08003901
 80038d4:	08003909 	.word	0x08003909
 80038d8:	08003919 	.word	0x08003919
 80038dc:	08003911 	.word	0x08003911
		{
		case '1': print_mode = 1; break; //Roll, Pitch, Yaw
 80038e0:	4b16      	ldr	r3, [pc, #88]	; (800393c <Receive_Command+0xa0>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e01f      	b.n	8003928 <Receive_Command+0x8c>
		case '2': print_mode = 2; break; //Alt Raw, Alt Filt
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <Receive_Command+0xa0>)
 80038ea:	2202      	movs	r2, #2
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e01b      	b.n	8003928 <Receive_Command+0x8c>
		case '3': print_mode = 3; break; //Gyro
 80038f0:	4b12      	ldr	r3, [pc, #72]	; (800393c <Receive_Command+0xa0>)
 80038f2:	2203      	movs	r2, #3
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e017      	b.n	8003928 <Receive_Command+0x8c>
		case '4': print_mode = 4; break; //Accel
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <Receive_Command+0xa0>)
 80038fa:	2204      	movs	r2, #4
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	e013      	b.n	8003928 <Receive_Command+0x8c>
		case '5': print_mode = 5; break; //Mag
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <Receive_Command+0xa0>)
 8003902:	2205      	movs	r2, #5
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e00f      	b.n	8003928 <Receive_Command+0x8c>
		case '6': print_mode = 6; break; //Mag
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <Receive_Command+0xa0>)
 800390a:	2206      	movs	r2, #6
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e00b      	b.n	8003928 <Receive_Command+0x8c>
		case '8': mag_calibration_enable = 1; break; //Mag_Raw
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <Receive_Command+0xa4>)
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e007      	b.n	8003928 <Receive_Command+0x8c>
		default: print_mode = 0; mag_calibration_enable = 0; break; // Stop Printing
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <Receive_Command+0xa0>)
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <Receive_Command+0xa4>)
 8003920:	2200      	movs	r2, #0
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e000      	b.n	8003928 <Receive_Command+0x8c>
		}
	}
 8003926:	bf00      	nop
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	24000234 	.word	0x24000234
 8003938:	24000235 	.word	0x24000235
 800393c:	24000230 	.word	0x24000230
 8003940:	24000231 	.word	0x24000231

08003944 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
	return 1;
 8003948:	2301      	movs	r3, #1
}
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <_kill>:

int _kill(int pid, int sig)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800395e:	f00c f95f 	bl	800fc20 <__errno>
 8003962:	4603      	mov	r3, r0
 8003964:	2216      	movs	r2, #22
 8003966:	601a      	str	r2, [r3, #0]
	return -1;
 8003968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <_exit>:

void _exit (int status)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800397c:	f04f 31ff 	mov.w	r1, #4294967295
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff ffe7 	bl	8003954 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003986:	e7fe      	b.n	8003986 <_exit+0x12>

08003988 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e00a      	b.n	80039b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800399a:	f3af 8000 	nop.w
 800399e:	4601      	mov	r1, r0
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	60ba      	str	r2, [r7, #8]
 80039a6:	b2ca      	uxtb	r2, r1
 80039a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	3301      	adds	r3, #1
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	dbf0      	blt.n	800399a <_read+0x12>
	}

return len;
 80039b8:	687b      	ldr	r3, [r7, #4]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
	return -1;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039ea:	605a      	str	r2, [r3, #4]
	return 0;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <_isatty>:

int _isatty(int file)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
	return 1;
 8003a02:	2301      	movs	r3, #1
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
	return 0;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a34:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <_sbrk+0x5c>)
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <_sbrk+0x60>)
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <_sbrk+0x64>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <_sbrk+0x64>)
 8003a4a:	4a12      	ldr	r2, [pc, #72]	; (8003a94 <_sbrk+0x68>)
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <_sbrk+0x64>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d207      	bcs.n	8003a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a5c:	f00c f8e0 	bl	800fc20 <__errno>
 8003a60:	4603      	mov	r3, r0
 8003a62:	220c      	movs	r2, #12
 8003a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	e009      	b.n	8003a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <_sbrk+0x64>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <_sbrk+0x64>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <_sbrk+0x64>)
 8003a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	24080000 	.word	0x24080000
 8003a8c:	00000400 	.word	0x00000400
 8003a90:	24000240 	.word	0x24000240
 8003a94:	240005d8 	.word	0x240005d8

08003a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a9c:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <SystemInit+0xec>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	4a38      	ldr	r2, [pc, #224]	; (8003b84 <SystemInit+0xec>)
 8003aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003aac:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <SystemInit+0xf0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	2b06      	cmp	r3, #6
 8003ab6:	d807      	bhi.n	8003ac8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ab8:	4b33      	ldr	r3, [pc, #204]	; (8003b88 <SystemInit+0xf0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 030f 	bic.w	r3, r3, #15
 8003ac0:	4a31      	ldr	r2, [pc, #196]	; (8003b88 <SystemInit+0xf0>)
 8003ac2:	f043 0307 	orr.w	r3, r3, #7
 8003ac6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ac8:	4b30      	ldr	r3, [pc, #192]	; (8003b8c <SystemInit+0xf4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2f      	ldr	r2, [pc, #188]	; (8003b8c <SystemInit+0xf4>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ad4:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <SystemInit+0xf4>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ada:	4b2c      	ldr	r3, [pc, #176]	; (8003b8c <SystemInit+0xf4>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	492b      	ldr	r1, [pc, #172]	; (8003b8c <SystemInit+0xf4>)
 8003ae0:	4b2b      	ldr	r3, [pc, #172]	; (8003b90 <SystemInit+0xf8>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ae6:	4b28      	ldr	r3, [pc, #160]	; (8003b88 <SystemInit+0xf0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003af2:	4b25      	ldr	r3, [pc, #148]	; (8003b88 <SystemInit+0xf0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f023 030f 	bic.w	r3, r3, #15
 8003afa:	4a23      	ldr	r2, [pc, #140]	; (8003b88 <SystemInit+0xf0>)
 8003afc:	f043 0307 	orr.w	r3, r3, #7
 8003b00:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b02:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <SystemInit+0xf4>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b08:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <SystemInit+0xf4>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <SystemInit+0xf4>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <SystemInit+0xf4>)
 8003b16:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <SystemInit+0xfc>)
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <SystemInit+0xf4>)
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <SystemInit+0x100>)
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b20:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <SystemInit+0xf4>)
 8003b22:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <SystemInit+0x104>)
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b26:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <SystemInit+0xf4>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b2c:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <SystemInit+0xf4>)
 8003b2e:	4a1b      	ldr	r2, [pc, #108]	; (8003b9c <SystemInit+0x104>)
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <SystemInit+0xf4>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b38:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <SystemInit+0xf4>)
 8003b3a:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <SystemInit+0x104>)
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <SystemInit+0xf4>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <SystemInit+0xf4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a10      	ldr	r2, [pc, #64]	; (8003b8c <SystemInit+0xf4>)
 8003b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b50:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <SystemInit+0xf4>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <SystemInit+0x108>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <SystemInit+0x10c>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b62:	d202      	bcs.n	8003b6a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <SystemInit+0x110>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <SystemInit+0x114>)
 8003b6c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b70:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <SystemInit+0xec>)
 8003b74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b78:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003b7a:	bf00      	nop
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000ed00 	.word	0xe000ed00
 8003b88:	52002000 	.word	0x52002000
 8003b8c:	58024400 	.word	0x58024400
 8003b90:	eaf6ed7f 	.word	0xeaf6ed7f
 8003b94:	02020200 	.word	0x02020200
 8003b98:	01ff0000 	.word	0x01ff0000
 8003b9c:	01010280 	.word	0x01010280
 8003ba0:	5c001000 	.word	0x5c001000
 8003ba4:	ffff0000 	.word	0xffff0000
 8003ba8:	51008108 	.word	0x51008108
 8003bac:	52004000 	.word	0x52004000

08003bb0 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003bba:	f107 020f 	add.w	r2, r7, #15
 8003bbe:	1df9      	adds	r1, r7, #7
 8003bc0:	2364      	movs	r3, #100	; 0x64
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	4804      	ldr	r0, [pc, #16]	; (8003bd8 <W25qxx_Spi+0x28>)
 8003bc8:	f009 f88c 	bl	800cce4 <HAL_SPI_TransmitReceive>
	return ret;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	240004b4 	.word	0x240004b4

08003bdc <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2140      	movs	r1, #64	; 0x40
 8003bf6:	4813      	ldr	r0, [pc, #76]	; (8003c44 <W25qxx_ReadID+0x68>)
 8003bf8:	f003 fde8 	bl	80077cc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003bfc:	209f      	movs	r0, #159	; 0x9f
 8003bfe:	f7ff ffd7 	bl	8003bb0 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c02:	20a5      	movs	r0, #165	; 0xa5
 8003c04:	f7ff ffd4 	bl	8003bb0 <W25qxx_Spi>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c0c:	20a5      	movs	r0, #165	; 0xa5
 8003c0e:	f7ff ffcf 	bl	8003bb0 <W25qxx_Spi>
 8003c12:	4603      	mov	r3, r0
 8003c14:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c16:	20a5      	movs	r0, #165	; 0xa5
 8003c18:	f7ff ffca 	bl	8003bb0 <W25qxx_Spi>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c20:	2201      	movs	r2, #1
 8003c22:	2140      	movs	r1, #64	; 0x40
 8003c24:	4807      	ldr	r0, [pc, #28]	; (8003c44 <W25qxx_ReadID+0x68>)
 8003c26:	f003 fdd1 	bl	80077cc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	041a      	lsls	r2, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	4313      	orrs	r3, r2
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	58020400 	.word	0x58020400

08003c48 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2140      	movs	r1, #64	; 0x40
 8003c52:	4816      	ldr	r0, [pc, #88]	; (8003cac <W25qxx_ReadUniqID+0x64>)
 8003c54:	f003 fdba 	bl	80077cc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003c58:	204b      	movs	r0, #75	; 0x4b
 8003c5a:	f7ff ffa9 	bl	8003bb0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	71fb      	strb	r3, [r7, #7]
 8003c62:	e005      	b.n	8003c70 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c64:	20a5      	movs	r0, #165	; 0xa5
 8003c66:	f7ff ffa3 	bl	8003bb0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	71fb      	strb	r3, [r7, #7]
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d9f6      	bls.n	8003c64 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	71bb      	strb	r3, [r7, #6]
 8003c7a:	e00b      	b.n	8003c94 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c7c:	79bc      	ldrb	r4, [r7, #6]
 8003c7e:	20a5      	movs	r0, #165	; 0xa5
 8003c80:	f7ff ff96 	bl	8003bb0 <W25qxx_Spi>
 8003c84:	4603      	mov	r3, r0
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <W25qxx_ReadUniqID+0x68>)
 8003c8a:	4423      	add	r3, r4
 8003c8c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003c8e:	79bb      	ldrb	r3, [r7, #6]
 8003c90:	3301      	adds	r3, #1
 8003c92:	71bb      	strb	r3, [r7, #6]
 8003c94:	79bb      	ldrb	r3, [r7, #6]
 8003c96:	2b07      	cmp	r3, #7
 8003c98:	d9f0      	bls.n	8003c7c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	2140      	movs	r1, #64	; 0x40
 8003c9e:	4803      	ldr	r0, [pc, #12]	; (8003cac <W25qxx_ReadUniqID+0x64>)
 8003ca0:	f003 fd94 	bl	80077cc <HAL_GPIO_WritePin>
}
 8003ca4:	bf00      	nop
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd90      	pop	{r4, r7, pc}
 8003cac:	58020400 	.word	0x58020400
 8003cb0:	24000598 	.word	0x24000598

08003cb4 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2140      	movs	r1, #64	; 0x40
 8003cbc:	4807      	ldr	r0, [pc, #28]	; (8003cdc <W25qxx_WriteEnable+0x28>)
 8003cbe:	f003 fd85 	bl	80077cc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003cc2:	2006      	movs	r0, #6
 8003cc4:	f7ff ff74 	bl	8003bb0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003cc8:	2201      	movs	r2, #1
 8003cca:	2140      	movs	r1, #64	; 0x40
 8003ccc:	4803      	ldr	r0, [pc, #12]	; (8003cdc <W25qxx_WriteEnable+0x28>)
 8003cce:	f003 fd7d 	bl	80077cc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	f000 fc36 	bl	8004544 <HAL_Delay>
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	58020400 	.word	0x58020400

08003ce0 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2140      	movs	r1, #64	; 0x40
 8003cf2:	481c      	ldr	r0, [pc, #112]	; (8003d64 <W25qxx_ReadStatusRegister+0x84>)
 8003cf4:	f003 fd6a 	bl	80077cc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d10c      	bne.n	8003d18 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003cfe:	2005      	movs	r0, #5
 8003d00:	f7ff ff56 	bl	8003bb0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d04:	20a5      	movs	r0, #165	; 0xa5
 8003d06:	f7ff ff53 	bl	8003bb0 <W25qxx_Spi>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003d0e:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <W25qxx_ReadStatusRegister+0x88>)
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003d16:	e01b      	b.n	8003d50 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d10c      	bne.n	8003d38 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003d1e:	2035      	movs	r0, #53	; 0x35
 8003d20:	f7ff ff46 	bl	8003bb0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d24:	20a5      	movs	r0, #165	; 0xa5
 8003d26:	f7ff ff43 	bl	8003bb0 <W25qxx_Spi>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003d2e:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <W25qxx_ReadStatusRegister+0x88>)
 8003d30:	7bfb      	ldrb	r3, [r7, #15]
 8003d32:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003d36:	e00b      	b.n	8003d50 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003d38:	2015      	movs	r0, #21
 8003d3a:	f7ff ff39 	bl	8003bb0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d3e:	20a5      	movs	r0, #165	; 0xa5
 8003d40:	f7ff ff36 	bl	8003bb0 <W25qxx_Spi>
 8003d44:	4603      	mov	r3, r0
 8003d46:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003d48:	4a07      	ldr	r2, [pc, #28]	; (8003d68 <W25qxx_ReadStatusRegister+0x88>)
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003d50:	2201      	movs	r2, #1
 8003d52:	2140      	movs	r1, #64	; 0x40
 8003d54:	4803      	ldr	r0, [pc, #12]	; (8003d64 <W25qxx_ReadStatusRegister+0x84>)
 8003d56:	f003 fd39 	bl	80077cc <HAL_GPIO_WritePin>
	return status;
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	58020400 	.word	0x58020400
 8003d68:	24000598 	.word	0x24000598

08003d6c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003d70:	2001      	movs	r0, #1
 8003d72:	f000 fbe7 	bl	8004544 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003d76:	2200      	movs	r2, #0
 8003d78:	2140      	movs	r1, #64	; 0x40
 8003d7a:	480f      	ldr	r0, [pc, #60]	; (8003db8 <W25qxx_WaitForWriteEnd+0x4c>)
 8003d7c:	f003 fd26 	bl	80077cc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003d80:	2005      	movs	r0, #5
 8003d82:	f7ff ff15 	bl	8003bb0 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d86:	20a5      	movs	r0, #165	; 0xa5
 8003d88:	f7ff ff12 	bl	8003bb0 <W25qxx_Spi>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	461a      	mov	r2, r3
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <W25qxx_WaitForWriteEnd+0x50>)
 8003d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003d96:	2001      	movs	r0, #1
 8003d98:	f000 fbd4 	bl	8004544 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003d9c:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <W25qxx_WaitForWriteEnd+0x50>)
 8003d9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1ed      	bne.n	8003d86 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003daa:	2201      	movs	r2, #1
 8003dac:	2140      	movs	r1, #64	; 0x40
 8003dae:	4802      	ldr	r0, [pc, #8]	; (8003db8 <W25qxx_WaitForWriteEnd+0x4c>)
 8003db0:	f003 fd0c 	bl	80077cc <HAL_GPIO_WritePin>
}
 8003db4:	bf00      	nop
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	58020400 	.word	0x58020400
 8003dbc:	24000598 	.word	0x24000598

08003dc0 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003dc6:	4b65      	ldr	r3, [pc, #404]	; (8003f5c <W25qxx_Init+0x19c>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003dce:	e002      	b.n	8003dd6 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	f000 fbb7 	bl	8004544 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8003dd6:	f000 fba9 	bl	800452c <HAL_GetTick>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b63      	cmp	r3, #99	; 0x63
 8003dde:	d9f7      	bls.n	8003dd0 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003de0:	2201      	movs	r2, #1
 8003de2:	2140      	movs	r1, #64	; 0x40
 8003de4:	485e      	ldr	r0, [pc, #376]	; (8003f60 <W25qxx_Init+0x1a0>)
 8003de6:	f003 fcf1 	bl	80077cc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003dea:	2064      	movs	r0, #100	; 0x64
 8003dec:	f000 fbaa 	bl	8004544 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8003df0:	f7ff fef4 	bl	8003bdc <W25qxx_ReadID>
 8003df4:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	3b11      	subs	r3, #17
 8003dfc:	2b0f      	cmp	r3, #15
 8003dfe:	d86c      	bhi.n	8003eda <W25qxx_Init+0x11a>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <W25qxx_Init+0x48>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003ecd 	.word	0x08003ecd
 8003e0c:	08003ebf 	.word	0x08003ebf
 8003e10:	08003eb1 	.word	0x08003eb1
 8003e14:	08003ea3 	.word	0x08003ea3
 8003e18:	08003e95 	.word	0x08003e95
 8003e1c:	08003e87 	.word	0x08003e87
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e69 	.word	0x08003e69
 8003e28:	08003e59 	.word	0x08003e59
 8003e2c:	08003edb 	.word	0x08003edb
 8003e30:	08003edb 	.word	0x08003edb
 8003e34:	08003edb 	.word	0x08003edb
 8003e38:	08003edb 	.word	0x08003edb
 8003e3c:	08003edb 	.word	0x08003edb
 8003e40:	08003edb 	.word	0x08003edb
 8003e44:	08003e49 	.word	0x08003e49
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003e48:	4b44      	ldr	r3, [pc, #272]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e4a:	220a      	movs	r2, #10
 8003e4c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003e4e:	4b43      	ldr	r3, [pc, #268]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e54:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8003e56:	e046      	b.n	8003ee6 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003e58:	4b40      	ldr	r3, [pc, #256]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e5a:	2209      	movs	r2, #9
 8003e5c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003e5e:	4b3f      	ldr	r3, [pc, #252]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e64:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8003e66:	e03e      	b.n	8003ee6 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003e68:	4b3c      	ldr	r3, [pc, #240]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003e6e:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8003e76:	e036      	b.n	8003ee6 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003e78:	4b38      	ldr	r3, [pc, #224]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e7a:	2207      	movs	r2, #7
 8003e7c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003e7e:	4b37      	ldr	r3, [pc, #220]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e80:	2280      	movs	r2, #128	; 0x80
 8003e82:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8003e84:	e02f      	b.n	8003ee6 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003e86:	4b35      	ldr	r3, [pc, #212]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e88:	2206      	movs	r2, #6
 8003e8a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003e8c:	4b33      	ldr	r3, [pc, #204]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e8e:	2240      	movs	r2, #64	; 0x40
 8003e90:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8003e92:	e028      	b.n	8003ee6 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003e94:	4b31      	ldr	r3, [pc, #196]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e96:	2205      	movs	r2, #5
 8003e98:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003e9a:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <W25qxx_Init+0x19c>)
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8003ea0:	e021      	b.n	8003ee6 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003ea2:	4b2e      	ldr	r3, [pc, #184]	; (8003f5c <W25qxx_Init+0x19c>)
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003ea8:	4b2c      	ldr	r3, [pc, #176]	; (8003f5c <W25qxx_Init+0x19c>)
 8003eaa:	2210      	movs	r2, #16
 8003eac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8003eae:	e01a      	b.n	8003ee6 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003eb0:	4b2a      	ldr	r3, [pc, #168]	; (8003f5c <W25qxx_Init+0x19c>)
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003eb6:	4b29      	ldr	r3, [pc, #164]	; (8003f5c <W25qxx_Init+0x19c>)
 8003eb8:	2208      	movs	r2, #8
 8003eba:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8003ebc:	e013      	b.n	8003ee6 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003ebe:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <W25qxx_Init+0x19c>)
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003ec4:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <W25qxx_Init+0x19c>)
 8003ec6:	2204      	movs	r2, #4
 8003ec8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8003eca:	e00c      	b.n	8003ee6 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003ecc:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <W25qxx_Init+0x19c>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003ed2:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <W25qxx_Init+0x19c>)
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8003ed8:	e005      	b.n	8003ee6 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <W25qxx_Init+0x19c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	e036      	b.n	8003f54 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <W25qxx_Init+0x19c>)
 8003ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eec:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003eee:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <W25qxx_Init+0x19c>)
 8003ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ef4:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003ef6:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <W25qxx_Init+0x19c>)
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <W25qxx_Init+0x19c>)
 8003efe:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <W25qxx_Init+0x19c>)
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <W25qxx_Init+0x19c>)
 8003f06:	6912      	ldr	r2, [r2, #16]
 8003f08:	fb02 f303 	mul.w	r3, r2, r3
 8003f0c:	4a13      	ldr	r2, [pc, #76]	; (8003f5c <W25qxx_Init+0x19c>)
 8003f0e:	8952      	ldrh	r2, [r2, #10]
 8003f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <W25qxx_Init+0x19c>)
 8003f16:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <W25qxx_Init+0x19c>)
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	4a0f      	ldr	r2, [pc, #60]	; (8003f5c <W25qxx_Init+0x19c>)
 8003f20:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003f22:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <W25qxx_Init+0x19c>)
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <W25qxx_Init+0x19c>)
 8003f28:	6912      	ldr	r2, [r2, #16]
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	0a9b      	lsrs	r3, r3, #10
 8003f30:	4a0a      	ldr	r2, [pc, #40]	; (8003f5c <W25qxx_Init+0x19c>)
 8003f32:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003f34:	f7ff fe88 	bl	8003c48 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003f38:	2001      	movs	r0, #1
 8003f3a:	f7ff fed1 	bl	8003ce0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003f3e:	2002      	movs	r0, #2
 8003f40:	f7ff fece 	bl	8003ce0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003f44:	2003      	movs	r0, #3
 8003f46:	f7ff fecb 	bl	8003ce0 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <W25qxx_Init+0x19c>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003f52:	2301      	movs	r3, #1
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3708      	adds	r7, #8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	24000598 	.word	0x24000598
 8003f60:	58020400 	.word	0x58020400

08003f64 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8003f6c:	e002      	b.n	8003f74 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f000 fae8 	bl	8004544 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8003f74:	4b25      	ldr	r3, [pc, #148]	; (800400c <W25qxx_EraseSector+0xa8>)
 8003f76:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d0f7      	beq.n	8003f6e <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8003f7e:	4b23      	ldr	r3, [pc, #140]	; (800400c <W25qxx_EraseSector+0xa8>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8003f86:	f7ff fef1 	bl	8003d6c <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8003f8a:	4b20      	ldr	r3, [pc, #128]	; (800400c <W25qxx_EraseSector+0xa8>)
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	fb02 f303 	mul.w	r3, r2, r3
 8003f94:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8003f96:	f7ff fe8d 	bl	8003cb4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2140      	movs	r1, #64	; 0x40
 8003f9e:	481c      	ldr	r0, [pc, #112]	; (8004010 <W25qxx_EraseSector+0xac>)
 8003fa0:	f003 fc14 	bl	80077cc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <W25qxx_EraseSector+0xa8>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d909      	bls.n	8003fc0 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8003fac:	2021      	movs	r0, #33	; 0x21
 8003fae:	f7ff fdff 	bl	8003bb0 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	0e1b      	lsrs	r3, r3, #24
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fdf9 	bl	8003bb0 <W25qxx_Spi>
 8003fbe:	e002      	b.n	8003fc6 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8003fc0:	2020      	movs	r0, #32
 8003fc2:	f7ff fdf5 	bl	8003bb0 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fdef 	bl	8003bb0 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fde9 	bl	8003bb0 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fde4 	bl	8003bb0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003fe8:	2201      	movs	r2, #1
 8003fea:	2140      	movs	r1, #64	; 0x40
 8003fec:	4808      	ldr	r0, [pc, #32]	; (8004010 <W25qxx_EraseSector+0xac>)
 8003fee:	f003 fbed 	bl	80077cc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8003ff2:	f7ff febb 	bl	8003d6c <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	f000 faa4 	bl	8004544 <HAL_Delay>
	w25qxx.Lock = 0;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <W25qxx_EraseSector+0xa8>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	24000598 	.word	0x24000598
 8004010:	58020400 	.word	0x58020400

08004014 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 800401c:	4b07      	ldr	r3, [pc, #28]	; (800403c <W25qxx_SectorToPage+0x28>)
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	4a05      	ldr	r2, [pc, #20]	; (800403c <W25qxx_SectorToPage+0x28>)
 8004028:	8952      	ldrh	r2, [r2, #10]
 800402a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	24000598 	.word	0x24000598

08004040 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800404e:	e002      	b.n	8004056 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004050:	2001      	movs	r0, #1
 8004052:	f000 fa77 	bl	8004544 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004056:	4b39      	ldr	r3, [pc, #228]	; (800413c <W25qxx_WritePage+0xfc>)
 8004058:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800405c:	2b01      	cmp	r3, #1
 800405e:	d0f7      	beq.n	8004050 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004060:	4b36      	ldr	r3, [pc, #216]	; (800413c <W25qxx_WritePage+0xfc>)
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	4a33      	ldr	r2, [pc, #204]	; (800413c <W25qxx_WritePage+0xfc>)
 8004070:	8952      	ldrh	r2, [r2, #10]
 8004072:	4293      	cmp	r3, r2
 8004074:	d802      	bhi.n	800407c <W25qxx_WritePage+0x3c>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d105      	bne.n	8004088 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800407c:	4b2f      	ldr	r3, [pc, #188]	; (800413c <W25qxx_WritePage+0xfc>)
 800407e:	895b      	ldrh	r3, [r3, #10]
 8004080:	461a      	mov	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	4413      	add	r3, r2
 800408e:	4a2b      	ldr	r2, [pc, #172]	; (800413c <W25qxx_WritePage+0xfc>)
 8004090:	8952      	ldrh	r2, [r2, #10]
 8004092:	4293      	cmp	r3, r2
 8004094:	d905      	bls.n	80040a2 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004096:	4b29      	ldr	r3, [pc, #164]	; (800413c <W25qxx_WritePage+0xfc>)
 8004098:	895b      	ldrh	r3, [r3, #10]
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80040a2:	f7ff fe63 	bl	8003d6c <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80040a6:	f7ff fe05 	bl	8003cb4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80040aa:	2200      	movs	r2, #0
 80040ac:	2140      	movs	r1, #64	; 0x40
 80040ae:	4824      	ldr	r0, [pc, #144]	; (8004140 <W25qxx_WritePage+0x100>)
 80040b0:	f003 fb8c 	bl	80077cc <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80040b4:	4b21      	ldr	r3, [pc, #132]	; (800413c <W25qxx_WritePage+0xfc>)
 80040b6:	895b      	ldrh	r3, [r3, #10]
 80040b8:	461a      	mov	r2, r3
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	fb03 f302 	mul.w	r3, r3, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	4413      	add	r3, r2
 80040c4:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <W25qxx_WritePage+0xfc>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d909      	bls.n	80040e2 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80040ce:	2012      	movs	r0, #18
 80040d0:	f7ff fd6e 	bl	8003bb0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	0e1b      	lsrs	r3, r3, #24
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff fd68 	bl	8003bb0 <W25qxx_Spi>
 80040e0:	e002      	b.n	80040e8 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80040e2:	2002      	movs	r0, #2
 80040e4:	f7ff fd64 	bl	8003bb0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	0c1b      	lsrs	r3, r3, #16
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fd5e 	bl	8003bb0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff fd58 	bl	8003bb0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fd53 	bl	8003bb0 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	b29a      	uxth	r2, r3
 800410e:	2364      	movs	r3, #100	; 0x64
 8004110:	68f9      	ldr	r1, [r7, #12]
 8004112:	480c      	ldr	r0, [pc, #48]	; (8004144 <W25qxx_WritePage+0x104>)
 8004114:	f008 fa02 	bl	800c51c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004118:	2201      	movs	r2, #1
 800411a:	2140      	movs	r1, #64	; 0x40
 800411c:	4808      	ldr	r0, [pc, #32]	; (8004140 <W25qxx_WritePage+0x100>)
 800411e:	f003 fb55 	bl	80077cc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004122:	f7ff fe23 	bl	8003d6c <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004126:	2001      	movs	r0, #1
 8004128:	f000 fa0c 	bl	8004544 <HAL_Delay>
	w25qxx.Lock = 0;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <W25qxx_WritePage+0xfc>)
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	24000598 	.word	0x24000598
 8004140:	58020400 	.word	0x58020400
 8004144:	240004b4 	.word	0x240004b4

08004148 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
 8004154:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004156:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <W25qxx_WriteSector+0xc0>)
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	429a      	cmp	r2, r3
 800415e:	d802      	bhi.n	8004166 <W25qxx_WriteSector+0x1e>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d102      	bne.n	800416c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004166:	4b28      	ldr	r3, [pc, #160]	; (8004208 <W25qxx_WriteSector+0xc0>)
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800416c:	4b26      	ldr	r3, [pc, #152]	; (8004208 <W25qxx_WriteSector+0xc0>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	429a      	cmp	r2, r3
 8004174:	d243      	bcs.n	80041fe <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	441a      	add	r2, r3
 800417c:	4b22      	ldr	r3, [pc, #136]	; (8004208 <W25qxx_WriteSector+0xc0>)
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	429a      	cmp	r2, r3
 8004182:	d905      	bls.n	8004190 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004184:	4b20      	ldr	r3, [pc, #128]	; (8004208 <W25qxx_WriteSector+0xc0>)
 8004186:	691a      	ldr	r2, [r3, #16]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e001      	b.n	8004194 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004194:	68b8      	ldr	r0, [r7, #8]
 8004196:	f7ff ff3d 	bl	8004014 <W25qxx_SectorToPage>
 800419a:	4602      	mov	r2, r0
 800419c:	4b1a      	ldr	r3, [pc, #104]	; (8004208 <W25qxx_WriteSector+0xc0>)
 800419e:	895b      	ldrh	r3, [r3, #10]
 80041a0:	4619      	mov	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80041a8:	4413      	add	r3, r2
 80041aa:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80041ac:	4b16      	ldr	r3, [pc, #88]	; (8004208 <W25qxx_WriteSector+0xc0>)
 80041ae:	895b      	ldrh	r3, [r3, #10]
 80041b0:	461a      	mov	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80041b8:	fb02 f201 	mul.w	r2, r2, r1
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	69f9      	ldr	r1, [r7, #28]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f7ff ff3a 	bl	8004040 <W25qxx_WritePage>
		StartPage++;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	3301      	adds	r3, #1
 80041d0:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80041d2:	4b0d      	ldr	r3, [pc, #52]	; (8004208 <W25qxx_WriteSector+0xc0>)
 80041d4:	895b      	ldrh	r3, [r3, #10]
 80041d6:	461a      	mov	r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1a9a      	subs	r2, r3, r2
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4413      	add	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <W25qxx_WriteSector+0xc0>)
 80041e4:	895b      	ldrh	r3, [r3, #10]
 80041e6:	461a      	mov	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	dce1      	bgt.n	80041c0 <W25qxx_WriteSector+0x78>
 80041fc:	e000      	b.n	8004200 <W25qxx_WriteSector+0xb8>
		return;
 80041fe:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	24000598 	.word	0x24000598

0800420c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800421a:	e002      	b.n	8004222 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800421c:	2001      	movs	r0, #1
 800421e:	f000 f991 	bl	8004544 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004222:	4b36      	ldr	r3, [pc, #216]	; (80042fc <W25qxx_ReadPage+0xf0>)
 8004224:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004228:	2b01      	cmp	r3, #1
 800422a:	d0f7      	beq.n	800421c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800422c:	4b33      	ldr	r3, [pc, #204]	; (80042fc <W25qxx_ReadPage+0xf0>)
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004234:	4b31      	ldr	r3, [pc, #196]	; (80042fc <W25qxx_ReadPage+0xf0>)
 8004236:	895b      	ldrh	r3, [r3, #10]
 8004238:	461a      	mov	r2, r3
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	4293      	cmp	r3, r2
 800423e:	d802      	bhi.n	8004246 <W25qxx_ReadPage+0x3a>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d102      	bne.n	800424c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004246:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <W25qxx_ReadPage+0xf0>)
 8004248:	895b      	ldrh	r3, [r3, #10]
 800424a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	4413      	add	r3, r2
 8004252:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <W25qxx_ReadPage+0xf0>)
 8004254:	8952      	ldrh	r2, [r2, #10]
 8004256:	4293      	cmp	r3, r2
 8004258:	d905      	bls.n	8004266 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800425a:	4b28      	ldr	r3, [pc, #160]	; (80042fc <W25qxx_ReadPage+0xf0>)
 800425c:	895b      	ldrh	r3, [r3, #10]
 800425e:	461a      	mov	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004266:	4b25      	ldr	r3, [pc, #148]	; (80042fc <W25qxx_ReadPage+0xf0>)
 8004268:	895b      	ldrh	r3, [r3, #10]
 800426a:	461a      	mov	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	fb03 f302 	mul.w	r3, r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004278:	2200      	movs	r2, #0
 800427a:	2140      	movs	r1, #64	; 0x40
 800427c:	4820      	ldr	r0, [pc, #128]	; (8004300 <W25qxx_ReadPage+0xf4>)
 800427e:	f003 faa5 	bl	80077cc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004282:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <W25qxx_ReadPage+0xf0>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b08      	cmp	r3, #8
 8004288:	d909      	bls.n	800429e <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 800428a:	200c      	movs	r0, #12
 800428c:	f7ff fc90 	bl	8003bb0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	0e1b      	lsrs	r3, r3, #24
 8004294:	b2db      	uxtb	r3, r3
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fc8a 	bl	8003bb0 <W25qxx_Spi>
 800429c:	e002      	b.n	80042a4 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800429e:	200b      	movs	r0, #11
 80042a0:	f7ff fc86 	bl	8003bb0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	0c1b      	lsrs	r3, r3, #16
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fc80 	bl	8003bb0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fc7a 	bl	8003bb0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff fc75 	bl	8003bb0 <W25qxx_Spi>
	W25qxx_Spi(0);
 80042c6:	2000      	movs	r0, #0
 80042c8:	f7ff fc72 	bl	8003bb0 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	2364      	movs	r3, #100	; 0x64
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	480b      	ldr	r0, [pc, #44]	; (8004304 <W25qxx_ReadPage+0xf8>)
 80042d6:	f008 fb13 	bl	800c900 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042da:	2201      	movs	r2, #1
 80042dc:	2140      	movs	r1, #64	; 0x40
 80042de:	4808      	ldr	r0, [pc, #32]	; (8004300 <W25qxx_ReadPage+0xf4>)
 80042e0:	f003 fa74 	bl	80077cc <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80042e4:	2001      	movs	r0, #1
 80042e6:	f000 f92d 	bl	8004544 <HAL_Delay>
	w25qxx.Lock = 0;
 80042ea:	4b04      	ldr	r3, [pc, #16]	; (80042fc <W25qxx_ReadPage+0xf0>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	24000598 	.word	0x24000598
 8004300:	58020400 	.word	0x58020400
 8004304:	240004b4 	.word	0x240004b4

08004308 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004316:	4b2c      	ldr	r3, [pc, #176]	; (80043c8 <W25qxx_ReadSector+0xc0>)
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d802      	bhi.n	8004326 <W25qxx_ReadSector+0x1e>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d102      	bne.n	800432c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004326:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <W25qxx_ReadSector+0xc0>)
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800432c:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <W25qxx_ReadSector+0xc0>)
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	d243      	bcs.n	80043be <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	441a      	add	r2, r3
 800433c:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <W25qxx_ReadSector+0xc0>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	429a      	cmp	r2, r3
 8004342:	d905      	bls.n	8004350 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004344:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <W25qxx_ReadSector+0xc0>)
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	e001      	b.n	8004354 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004354:	68b8      	ldr	r0, [r7, #8]
 8004356:	f7ff fe5d 	bl	8004014 <W25qxx_SectorToPage>
 800435a:	4602      	mov	r2, r0
 800435c:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <W25qxx_ReadSector+0xc0>)
 800435e:	895b      	ldrh	r3, [r3, #10]
 8004360:	4619      	mov	r1, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	fbb3 f3f1 	udiv	r3, r3, r1
 8004368:	4413      	add	r3, r2
 800436a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 800436c:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <W25qxx_ReadSector+0xc0>)
 800436e:	895b      	ldrh	r3, [r3, #10]
 8004370:	461a      	mov	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	fbb3 f1f2 	udiv	r1, r3, r2
 8004378:	fb02 f201 	mul.w	r2, r2, r1
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	69f9      	ldr	r1, [r7, #28]
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f7ff ff40 	bl	800420c <W25qxx_ReadPage>
		StartPage++;
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	3301      	adds	r3, #1
 8004390:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <W25qxx_ReadSector+0xc0>)
 8004394:	895b      	ldrh	r3, [r3, #10]
 8004396:	461a      	mov	r2, r3
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	1a9a      	subs	r2, r3, r2
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	4413      	add	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <W25qxx_ReadSector+0xc0>)
 80043a4:	895b      	ldrh	r3, [r3, #10]
 80043a6:	461a      	mov	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	dce1      	bgt.n	8004380 <W25qxx_ReadSector+0x78>
 80043bc:	e000      	b.n	80043c0 <W25qxx_ReadSector+0xb8>
		return;
 80043be:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80043c0:	3720      	adds	r7, #32
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	24000598 	.word	0x24000598

080043cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80043cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004404 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043d0:	f7ff fb62 	bl	8003a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043d4:	480c      	ldr	r0, [pc, #48]	; (8004408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043d6:	490d      	ldr	r1, [pc, #52]	; (800440c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043d8:	4a0d      	ldr	r2, [pc, #52]	; (8004410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043dc:	e002      	b.n	80043e4 <LoopCopyDataInit>

080043de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043e2:	3304      	adds	r3, #4

080043e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043e8:	d3f9      	bcc.n	80043de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ea:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043ec:	4c0a      	ldr	r4, [pc, #40]	; (8004418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80043ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f0:	e001      	b.n	80043f6 <LoopFillZerobss>

080043f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043f4:	3204      	adds	r2, #4

080043f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043f8:	d3fb      	bcc.n	80043f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043fa:	f00b fc17 	bl	800fc2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043fe:	f7fe fb23 	bl	8002a48 <main>
  bx  lr
 8004402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004404:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004408:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800440c:	240001fc 	.word	0x240001fc
  ldr r2, =_sidata
 8004410:	080134b8 	.word	0x080134b8
  ldr r2, =_sbss
 8004414:	240001fc 	.word	0x240001fc
  ldr r4, =_ebss
 8004418:	240005d4 	.word	0x240005d4

0800441c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800441c:	e7fe      	b.n	800441c <ADC3_IRQHandler>
	...

08004420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004426:	2003      	movs	r0, #3
 8004428:	f000 f98c 	bl	8004744 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800442c:	f006 fa3c 	bl	800a8a8 <HAL_RCC_GetSysClockFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b15      	ldr	r3, [pc, #84]	; (8004488 <HAL_Init+0x68>)
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	4913      	ldr	r1, [pc, #76]	; (800448c <HAL_Init+0x6c>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	f003 031f 	and.w	r3, r3, #31
 8004444:	fa22 f303 	lsr.w	r3, r2, r3
 8004448:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <HAL_Init+0x68>)
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	4a0e      	ldr	r2, [pc, #56]	; (800448c <HAL_Init+0x6c>)
 8004454:	5cd3      	ldrb	r3, [r2, r3]
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
 8004460:	4a0b      	ldr	r2, [pc, #44]	; (8004490 <HAL_Init+0x70>)
 8004462:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004464:	4a0b      	ldr	r2, [pc, #44]	; (8004494 <HAL_Init+0x74>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800446a:	200f      	movs	r0, #15
 800446c:	f000 f814 	bl	8004498 <HAL_InitTick>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e002      	b.n	8004480 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800447a:	f7fe ff79 	bl	8003370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	58024400 	.word	0x58024400
 800448c:	08012fdc 	.word	0x08012fdc
 8004490:	2400001c 	.word	0x2400001c
 8004494:	24000018 	.word	0x24000018

08004498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80044a0:	4b15      	ldr	r3, [pc, #84]	; (80044f8 <HAL_InitTick+0x60>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e021      	b.n	80044f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80044ac:	4b13      	ldr	r3, [pc, #76]	; (80044fc <HAL_InitTick+0x64>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <HAL_InitTick+0x60>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	4619      	mov	r1, r3
 80044b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80044be:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 f971 	bl	80047aa <HAL_SYSTICK_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e00e      	b.n	80044f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b0f      	cmp	r3, #15
 80044d6:	d80a      	bhi.n	80044ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044d8:	2200      	movs	r2, #0
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	f000 f93b 	bl	800475a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044e4:	4a06      	ldr	r2, [pc, #24]	; (8004500 <HAL_InitTick+0x68>)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	e000      	b.n	80044f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	24000024 	.word	0x24000024
 80044fc:	24000018 	.word	0x24000018
 8004500:	24000020 	.word	0x24000020

08004504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_IncTick+0x20>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_IncTick+0x24>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4413      	add	r3, r2
 8004514:	4a04      	ldr	r2, [pc, #16]	; (8004528 <HAL_IncTick+0x24>)
 8004516:	6013      	str	r3, [r2, #0]
}
 8004518:	bf00      	nop
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	24000024 	.word	0x24000024
 8004528:	240005c0 	.word	0x240005c0

0800452c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return uwTick;
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <HAL_GetTick+0x14>)
 8004532:	681b      	ldr	r3, [r3, #0]
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	240005c0 	.word	0x240005c0

08004544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800454c:	f7ff ffee 	bl	800452c <HAL_GetTick>
 8004550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d005      	beq.n	800456a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <HAL_Delay+0x44>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4413      	add	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800456a:	bf00      	nop
 800456c:	f7ff ffde 	bl	800452c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	429a      	cmp	r2, r3
 800457a:	d8f7      	bhi.n	800456c <HAL_Delay+0x28>
  {
  }
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	24000024 	.word	0x24000024

0800458c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <HAL_GetREVID+0x14>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	0c1b      	lsrs	r3, r3, #16
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	5c001000 	.word	0x5c001000

080045a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045b4:	4b0b      	ldr	r3, [pc, #44]	; (80045e4 <__NVIC_SetPriorityGrouping+0x40>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045c0:	4013      	ands	r3, r2
 80045c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <__NVIC_SetPriorityGrouping+0x44>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045d2:	4a04      	ldr	r2, [pc, #16]	; (80045e4 <__NVIC_SetPriorityGrouping+0x40>)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	60d3      	str	r3, [r2, #12]
}
 80045d8:	bf00      	nop
 80045da:	3714      	adds	r7, #20
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	e000ed00 	.word	0xe000ed00
 80045e8:	05fa0000 	.word	0x05fa0000

080045ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <__NVIC_GetPriorityGrouping+0x18>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	f003 0307 	and.w	r3, r3, #7
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004616:	2b00      	cmp	r3, #0
 8004618:	db0b      	blt.n	8004632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	f003 021f 	and.w	r2, r3, #31
 8004620:	4907      	ldr	r1, [pc, #28]	; (8004640 <__NVIC_EnableIRQ+0x38>)
 8004622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	2001      	movs	r0, #1
 800462a:	fa00 f202 	lsl.w	r2, r0, r2
 800462e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	e000e100 	.word	0xe000e100

08004644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	6039      	str	r1, [r7, #0]
 800464e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004654:	2b00      	cmp	r3, #0
 8004656:	db0a      	blt.n	800466e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	490c      	ldr	r1, [pc, #48]	; (8004690 <__NVIC_SetPriority+0x4c>)
 800465e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004662:	0112      	lsls	r2, r2, #4
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	440b      	add	r3, r1
 8004668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800466c:	e00a      	b.n	8004684 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	4908      	ldr	r1, [pc, #32]	; (8004694 <__NVIC_SetPriority+0x50>)
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	3b04      	subs	r3, #4
 800467c:	0112      	lsls	r2, r2, #4
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	440b      	add	r3, r1
 8004682:	761a      	strb	r2, [r3, #24]
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000e100 	.word	0xe000e100
 8004694:	e000ed00 	.word	0xe000ed00

08004698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004698:	b480      	push	{r7}
 800469a:	b089      	sub	sp, #36	; 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f1c3 0307 	rsb	r3, r3, #7
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	bf28      	it	cs
 80046b6:	2304      	movcs	r3, #4
 80046b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3304      	adds	r3, #4
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d902      	bls.n	80046c8 <NVIC_EncodePriority+0x30>
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	3b03      	subs	r3, #3
 80046c6:	e000      	b.n	80046ca <NVIC_EncodePriority+0x32>
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43da      	mvns	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	401a      	ands	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e0:	f04f 31ff 	mov.w	r1, #4294967295
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	43d9      	mvns	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f0:	4313      	orrs	r3, r2
         );
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3724      	adds	r7, #36	; 0x24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3b01      	subs	r3, #1
 800470c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004710:	d301      	bcc.n	8004716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004712:	2301      	movs	r3, #1
 8004714:	e00f      	b.n	8004736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004716:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <SysTick_Config+0x40>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3b01      	subs	r3, #1
 800471c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800471e:	210f      	movs	r1, #15
 8004720:	f04f 30ff 	mov.w	r0, #4294967295
 8004724:	f7ff ff8e 	bl	8004644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <SysTick_Config+0x40>)
 800472a:	2200      	movs	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800472e:	4b04      	ldr	r3, [pc, #16]	; (8004740 <SysTick_Config+0x40>)
 8004730:	2207      	movs	r2, #7
 8004732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	e000e010 	.word	0xe000e010

08004744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff ff29 	bl	80045a4 <__NVIC_SetPriorityGrouping>
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b086      	sub	sp, #24
 800475e:	af00      	add	r7, sp, #0
 8004760:	4603      	mov	r3, r0
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004768:	f7ff ff40 	bl	80045ec <__NVIC_GetPriorityGrouping>
 800476c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	6978      	ldr	r0, [r7, #20]
 8004774:	f7ff ff90 	bl	8004698 <NVIC_EncodePriority>
 8004778:	4602      	mov	r2, r0
 800477a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff5f 	bl	8004644 <__NVIC_SetPriority>
}
 8004786:	bf00      	nop
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
 8004794:	4603      	mov	r3, r0
 8004796:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004798:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff ff33 	bl	8004608 <__NVIC_EnableIRQ>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff ffa4 	bl	8004700 <SysTick_Config>
 80047b8:	4603      	mov	r3, r0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80047cc:	f7ff feae 	bl	800452c <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e316      	b.n	8004e0a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a66      	ldr	r2, [pc, #408]	; (800497c <HAL_DMA_Init+0x1b8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d04a      	beq.n	800487c <HAL_DMA_Init+0xb8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a65      	ldr	r2, [pc, #404]	; (8004980 <HAL_DMA_Init+0x1bc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d045      	beq.n	800487c <HAL_DMA_Init+0xb8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a63      	ldr	r2, [pc, #396]	; (8004984 <HAL_DMA_Init+0x1c0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d040      	beq.n	800487c <HAL_DMA_Init+0xb8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a62      	ldr	r2, [pc, #392]	; (8004988 <HAL_DMA_Init+0x1c4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d03b      	beq.n	800487c <HAL_DMA_Init+0xb8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a60      	ldr	r2, [pc, #384]	; (800498c <HAL_DMA_Init+0x1c8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d036      	beq.n	800487c <HAL_DMA_Init+0xb8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a5f      	ldr	r2, [pc, #380]	; (8004990 <HAL_DMA_Init+0x1cc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d031      	beq.n	800487c <HAL_DMA_Init+0xb8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a5d      	ldr	r2, [pc, #372]	; (8004994 <HAL_DMA_Init+0x1d0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d02c      	beq.n	800487c <HAL_DMA_Init+0xb8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a5c      	ldr	r2, [pc, #368]	; (8004998 <HAL_DMA_Init+0x1d4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d027      	beq.n	800487c <HAL_DMA_Init+0xb8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a5a      	ldr	r2, [pc, #360]	; (800499c <HAL_DMA_Init+0x1d8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d022      	beq.n	800487c <HAL_DMA_Init+0xb8>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a59      	ldr	r2, [pc, #356]	; (80049a0 <HAL_DMA_Init+0x1dc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d01d      	beq.n	800487c <HAL_DMA_Init+0xb8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a57      	ldr	r2, [pc, #348]	; (80049a4 <HAL_DMA_Init+0x1e0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d018      	beq.n	800487c <HAL_DMA_Init+0xb8>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a56      	ldr	r2, [pc, #344]	; (80049a8 <HAL_DMA_Init+0x1e4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d013      	beq.n	800487c <HAL_DMA_Init+0xb8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a54      	ldr	r2, [pc, #336]	; (80049ac <HAL_DMA_Init+0x1e8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00e      	beq.n	800487c <HAL_DMA_Init+0xb8>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a53      	ldr	r2, [pc, #332]	; (80049b0 <HAL_DMA_Init+0x1ec>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d009      	beq.n	800487c <HAL_DMA_Init+0xb8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a51      	ldr	r2, [pc, #324]	; (80049b4 <HAL_DMA_Init+0x1f0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <HAL_DMA_Init+0xb8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a50      	ldr	r2, [pc, #320]	; (80049b8 <HAL_DMA_Init+0x1f4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d101      	bne.n	8004880 <HAL_DMA_Init+0xbc>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <HAL_DMA_Init+0xbe>
 8004880:	2300      	movs	r3, #0
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 813b 	beq.w	8004afe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a37      	ldr	r2, [pc, #220]	; (800497c <HAL_DMA_Init+0x1b8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d04a      	beq.n	8004938 <HAL_DMA_Init+0x174>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a36      	ldr	r2, [pc, #216]	; (8004980 <HAL_DMA_Init+0x1bc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d045      	beq.n	8004938 <HAL_DMA_Init+0x174>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a34      	ldr	r2, [pc, #208]	; (8004984 <HAL_DMA_Init+0x1c0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d040      	beq.n	8004938 <HAL_DMA_Init+0x174>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a33      	ldr	r2, [pc, #204]	; (8004988 <HAL_DMA_Init+0x1c4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d03b      	beq.n	8004938 <HAL_DMA_Init+0x174>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a31      	ldr	r2, [pc, #196]	; (800498c <HAL_DMA_Init+0x1c8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d036      	beq.n	8004938 <HAL_DMA_Init+0x174>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a30      	ldr	r2, [pc, #192]	; (8004990 <HAL_DMA_Init+0x1cc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d031      	beq.n	8004938 <HAL_DMA_Init+0x174>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2e      	ldr	r2, [pc, #184]	; (8004994 <HAL_DMA_Init+0x1d0>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d02c      	beq.n	8004938 <HAL_DMA_Init+0x174>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a2d      	ldr	r2, [pc, #180]	; (8004998 <HAL_DMA_Init+0x1d4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d027      	beq.n	8004938 <HAL_DMA_Init+0x174>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a2b      	ldr	r2, [pc, #172]	; (800499c <HAL_DMA_Init+0x1d8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d022      	beq.n	8004938 <HAL_DMA_Init+0x174>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a2a      	ldr	r2, [pc, #168]	; (80049a0 <HAL_DMA_Init+0x1dc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d01d      	beq.n	8004938 <HAL_DMA_Init+0x174>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <HAL_DMA_Init+0x1e0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d018      	beq.n	8004938 <HAL_DMA_Init+0x174>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <HAL_DMA_Init+0x1e4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d013      	beq.n	8004938 <HAL_DMA_Init+0x174>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a25      	ldr	r2, [pc, #148]	; (80049ac <HAL_DMA_Init+0x1e8>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00e      	beq.n	8004938 <HAL_DMA_Init+0x174>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a24      	ldr	r2, [pc, #144]	; (80049b0 <HAL_DMA_Init+0x1ec>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d009      	beq.n	8004938 <HAL_DMA_Init+0x174>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <HAL_DMA_Init+0x1f0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d004      	beq.n	8004938 <HAL_DMA_Init+0x174>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_DMA_Init+0x1f4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <HAL_DMA_Init+0x186>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e007      	b.n	800495a <HAL_DMA_Init+0x196>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800495a:	e02f      	b.n	80049bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800495c:	f7ff fde6 	bl	800452c <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b05      	cmp	r3, #5
 8004968:	d928      	bls.n	80049bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2203      	movs	r2, #3
 8004974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e246      	b.n	8004e0a <HAL_DMA_Init+0x646>
 800497c:	40020010 	.word	0x40020010
 8004980:	40020028 	.word	0x40020028
 8004984:	40020040 	.word	0x40020040
 8004988:	40020058 	.word	0x40020058
 800498c:	40020070 	.word	0x40020070
 8004990:	40020088 	.word	0x40020088
 8004994:	400200a0 	.word	0x400200a0
 8004998:	400200b8 	.word	0x400200b8
 800499c:	40020410 	.word	0x40020410
 80049a0:	40020428 	.word	0x40020428
 80049a4:	40020440 	.word	0x40020440
 80049a8:	40020458 	.word	0x40020458
 80049ac:	40020470 	.word	0x40020470
 80049b0:	40020488 	.word	0x40020488
 80049b4:	400204a0 	.word	0x400204a0
 80049b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1c8      	bne.n	800495c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4b83      	ldr	r3, [pc, #524]	; (8004be4 <HAL_DMA_Init+0x420>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80049e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d107      	bne.n	8004a20 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004a20:	4b71      	ldr	r3, [pc, #452]	; (8004be8 <HAL_DMA_Init+0x424>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b71      	ldr	r3, [pc, #452]	; (8004bec <HAL_DMA_Init+0x428>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a2c:	d328      	bcc.n	8004a80 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b28      	cmp	r3, #40	; 0x28
 8004a34:	d903      	bls.n	8004a3e <HAL_DMA_Init+0x27a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a3c:	d917      	bls.n	8004a6e <HAL_DMA_Init+0x2aa>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b3e      	cmp	r3, #62	; 0x3e
 8004a44:	d903      	bls.n	8004a4e <HAL_DMA_Init+0x28a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b42      	cmp	r3, #66	; 0x42
 8004a4c:	d90f      	bls.n	8004a6e <HAL_DMA_Init+0x2aa>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b46      	cmp	r3, #70	; 0x46
 8004a54:	d903      	bls.n	8004a5e <HAL_DMA_Init+0x29a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b48      	cmp	r3, #72	; 0x48
 8004a5c:	d907      	bls.n	8004a6e <HAL_DMA_Init+0x2aa>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b4e      	cmp	r3, #78	; 0x4e
 8004a64:	d905      	bls.n	8004a72 <HAL_DMA_Init+0x2ae>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b52      	cmp	r3, #82	; 0x52
 8004a6c:	d801      	bhi.n	8004a72 <HAL_DMA_Init+0x2ae>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <HAL_DMA_Init+0x2b0>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a7e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 0307 	bic.w	r3, r3, #7
 8004a96:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d117      	bne.n	8004ada <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00e      	beq.n	8004ada <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f002 fb4b 	bl	8007158 <DMA_CheckFifoParam>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d008      	beq.n	8004ada <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2240      	movs	r2, #64	; 0x40
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e197      	b.n	8004e0a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f002 fa86 	bl	8006ff4 <DMA_CalcBaseAndBitshift>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	223f      	movs	r2, #63	; 0x3f
 8004af6:	409a      	lsls	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	e0cd      	b.n	8004c9a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a3b      	ldr	r2, [pc, #236]	; (8004bf0 <HAL_DMA_Init+0x42c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d022      	beq.n	8004b4e <HAL_DMA_Init+0x38a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a39      	ldr	r2, [pc, #228]	; (8004bf4 <HAL_DMA_Init+0x430>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d01d      	beq.n	8004b4e <HAL_DMA_Init+0x38a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a38      	ldr	r2, [pc, #224]	; (8004bf8 <HAL_DMA_Init+0x434>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d018      	beq.n	8004b4e <HAL_DMA_Init+0x38a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a36      	ldr	r2, [pc, #216]	; (8004bfc <HAL_DMA_Init+0x438>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <HAL_DMA_Init+0x38a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a35      	ldr	r2, [pc, #212]	; (8004c00 <HAL_DMA_Init+0x43c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d00e      	beq.n	8004b4e <HAL_DMA_Init+0x38a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a33      	ldr	r2, [pc, #204]	; (8004c04 <HAL_DMA_Init+0x440>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d009      	beq.n	8004b4e <HAL_DMA_Init+0x38a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a32      	ldr	r2, [pc, #200]	; (8004c08 <HAL_DMA_Init+0x444>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d004      	beq.n	8004b4e <HAL_DMA_Init+0x38a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a30      	ldr	r2, [pc, #192]	; (8004c0c <HAL_DMA_Init+0x448>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d101      	bne.n	8004b52 <HAL_DMA_Init+0x38e>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <HAL_DMA_Init+0x390>
 8004b52:	2300      	movs	r3, #0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8097 	beq.w	8004c88 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a24      	ldr	r2, [pc, #144]	; (8004bf0 <HAL_DMA_Init+0x42c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d021      	beq.n	8004ba8 <HAL_DMA_Init+0x3e4>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a22      	ldr	r2, [pc, #136]	; (8004bf4 <HAL_DMA_Init+0x430>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01c      	beq.n	8004ba8 <HAL_DMA_Init+0x3e4>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a21      	ldr	r2, [pc, #132]	; (8004bf8 <HAL_DMA_Init+0x434>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d017      	beq.n	8004ba8 <HAL_DMA_Init+0x3e4>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1f      	ldr	r2, [pc, #124]	; (8004bfc <HAL_DMA_Init+0x438>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d012      	beq.n	8004ba8 <HAL_DMA_Init+0x3e4>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1e      	ldr	r2, [pc, #120]	; (8004c00 <HAL_DMA_Init+0x43c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00d      	beq.n	8004ba8 <HAL_DMA_Init+0x3e4>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <HAL_DMA_Init+0x440>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d008      	beq.n	8004ba8 <HAL_DMA_Init+0x3e4>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <HAL_DMA_Init+0x444>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <HAL_DMA_Init+0x3e4>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <HAL_DMA_Init+0x448>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <HAL_DMA_Init+0x44c>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d020      	beq.n	8004c14 <HAL_DMA_Init+0x450>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b80      	cmp	r3, #128	; 0x80
 8004bd8:	d102      	bne.n	8004be0 <HAL_DMA_Init+0x41c>
 8004bda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bde:	e01a      	b.n	8004c16 <HAL_DMA_Init+0x452>
 8004be0:	2300      	movs	r3, #0
 8004be2:	e018      	b.n	8004c16 <HAL_DMA_Init+0x452>
 8004be4:	fe10803f 	.word	0xfe10803f
 8004be8:	5c001000 	.word	0x5c001000
 8004bec:	ffff0000 	.word	0xffff0000
 8004bf0:	58025408 	.word	0x58025408
 8004bf4:	5802541c 	.word	0x5802541c
 8004bf8:	58025430 	.word	0x58025430
 8004bfc:	58025444 	.word	0x58025444
 8004c00:	58025458 	.word	0x58025458
 8004c04:	5802546c 	.word	0x5802546c
 8004c08:	58025480 	.word	0x58025480
 8004c0c:	58025494 	.word	0x58025494
 8004c10:	fffe000f 	.word	0xfffe000f
 8004c14:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68d2      	ldr	r2, [r2, #12]
 8004c1a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c44:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4b6e      	ldr	r3, [pc, #440]	; (8004e14 <HAL_DMA_Init+0x650>)
 8004c5c:	4413      	add	r3, r2
 8004c5e:	4a6e      	ldr	r2, [pc, #440]	; (8004e18 <HAL_DMA_Init+0x654>)
 8004c60:	fba2 2303 	umull	r2, r3, r2, r3
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	009a      	lsls	r2, r3, #2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f002 f9c1 	bl	8006ff4 <DMA_CalcBaseAndBitshift>
 8004c72:	4603      	mov	r3, r0
 8004c74:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7a:	f003 031f 	and.w	r3, r3, #31
 8004c7e:	2201      	movs	r2, #1
 8004c80:	409a      	lsls	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	e008      	b.n	8004c9a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2240      	movs	r2, #64	; 0x40
 8004c8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2203      	movs	r2, #3
 8004c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e0b7      	b.n	8004e0a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a5f      	ldr	r2, [pc, #380]	; (8004e1c <HAL_DMA_Init+0x658>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d072      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5d      	ldr	r2, [pc, #372]	; (8004e20 <HAL_DMA_Init+0x65c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d06d      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a5c      	ldr	r2, [pc, #368]	; (8004e24 <HAL_DMA_Init+0x660>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d068      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a5a      	ldr	r2, [pc, #360]	; (8004e28 <HAL_DMA_Init+0x664>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d063      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a59      	ldr	r2, [pc, #356]	; (8004e2c <HAL_DMA_Init+0x668>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d05e      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a57      	ldr	r2, [pc, #348]	; (8004e30 <HAL_DMA_Init+0x66c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d059      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a56      	ldr	r2, [pc, #344]	; (8004e34 <HAL_DMA_Init+0x670>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d054      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a54      	ldr	r2, [pc, #336]	; (8004e38 <HAL_DMA_Init+0x674>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d04f      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a53      	ldr	r2, [pc, #332]	; (8004e3c <HAL_DMA_Init+0x678>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d04a      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a51      	ldr	r2, [pc, #324]	; (8004e40 <HAL_DMA_Init+0x67c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d045      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a50      	ldr	r2, [pc, #320]	; (8004e44 <HAL_DMA_Init+0x680>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d040      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a4e      	ldr	r2, [pc, #312]	; (8004e48 <HAL_DMA_Init+0x684>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d03b      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a4d      	ldr	r2, [pc, #308]	; (8004e4c <HAL_DMA_Init+0x688>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d036      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a4b      	ldr	r2, [pc, #300]	; (8004e50 <HAL_DMA_Init+0x68c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d031      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a4a      	ldr	r2, [pc, #296]	; (8004e54 <HAL_DMA_Init+0x690>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d02c      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a48      	ldr	r2, [pc, #288]	; (8004e58 <HAL_DMA_Init+0x694>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d027      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a47      	ldr	r2, [pc, #284]	; (8004e5c <HAL_DMA_Init+0x698>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d022      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a45      	ldr	r2, [pc, #276]	; (8004e60 <HAL_DMA_Init+0x69c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d01d      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a44      	ldr	r2, [pc, #272]	; (8004e64 <HAL_DMA_Init+0x6a0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d018      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a42      	ldr	r2, [pc, #264]	; (8004e68 <HAL_DMA_Init+0x6a4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a41      	ldr	r2, [pc, #260]	; (8004e6c <HAL_DMA_Init+0x6a8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00e      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a3f      	ldr	r2, [pc, #252]	; (8004e70 <HAL_DMA_Init+0x6ac>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a3e      	ldr	r2, [pc, #248]	; (8004e74 <HAL_DMA_Init+0x6b0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_DMA_Init+0x5c6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a3c      	ldr	r2, [pc, #240]	; (8004e78 <HAL_DMA_Init+0x6b4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d101      	bne.n	8004d8e <HAL_DMA_Init+0x5ca>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <HAL_DMA_Init+0x5cc>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d032      	beq.n	8004dfa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f002 fa5b 	bl	8007250 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b80      	cmp	r3, #128	; 0x80
 8004da0:	d102      	bne.n	8004da8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004dbc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d010      	beq.n	8004de8 <HAL_DMA_Init+0x624>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d80c      	bhi.n	8004de8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f002 fad8 	bl	8007384 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004de4:	605a      	str	r2, [r3, #4]
 8004de6:	e008      	b.n	8004dfa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	a7fdabf8 	.word	0xa7fdabf8
 8004e18:	cccccccd 	.word	0xcccccccd
 8004e1c:	40020010 	.word	0x40020010
 8004e20:	40020028 	.word	0x40020028
 8004e24:	40020040 	.word	0x40020040
 8004e28:	40020058 	.word	0x40020058
 8004e2c:	40020070 	.word	0x40020070
 8004e30:	40020088 	.word	0x40020088
 8004e34:	400200a0 	.word	0x400200a0
 8004e38:	400200b8 	.word	0x400200b8
 8004e3c:	40020410 	.word	0x40020410
 8004e40:	40020428 	.word	0x40020428
 8004e44:	40020440 	.word	0x40020440
 8004e48:	40020458 	.word	0x40020458
 8004e4c:	40020470 	.word	0x40020470
 8004e50:	40020488 	.word	0x40020488
 8004e54:	400204a0 	.word	0x400204a0
 8004e58:	400204b8 	.word	0x400204b8
 8004e5c:	58025408 	.word	0x58025408
 8004e60:	5802541c 	.word	0x5802541c
 8004e64:	58025430 	.word	0x58025430
 8004e68:	58025444 	.word	0x58025444
 8004e6c:	58025458 	.word	0x58025458
 8004e70:	5802546c 	.word	0x5802546c
 8004e74:	58025480 	.word	0x58025480
 8004e78:	58025494 	.word	0x58025494

08004e7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e226      	b.n	80052e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_DMA_Start_IT+0x2a>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e21f      	b.n	80052e6 <HAL_DMA_Start_IT+0x46a>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	f040 820a 	bne.w	80052d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a68      	ldr	r2, [pc, #416]	; (8005070 <HAL_DMA_Start_IT+0x1f4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d04a      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a66      	ldr	r2, [pc, #408]	; (8005074 <HAL_DMA_Start_IT+0x1f8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d045      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a65      	ldr	r2, [pc, #404]	; (8005078 <HAL_DMA_Start_IT+0x1fc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d040      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a63      	ldr	r2, [pc, #396]	; (800507c <HAL_DMA_Start_IT+0x200>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d03b      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a62      	ldr	r2, [pc, #392]	; (8005080 <HAL_DMA_Start_IT+0x204>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d036      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a60      	ldr	r2, [pc, #384]	; (8005084 <HAL_DMA_Start_IT+0x208>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d031      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a5f      	ldr	r2, [pc, #380]	; (8005088 <HAL_DMA_Start_IT+0x20c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d02c      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a5d      	ldr	r2, [pc, #372]	; (800508c <HAL_DMA_Start_IT+0x210>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d027      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a5c      	ldr	r2, [pc, #368]	; (8005090 <HAL_DMA_Start_IT+0x214>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d022      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a5a      	ldr	r2, [pc, #360]	; (8005094 <HAL_DMA_Start_IT+0x218>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01d      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a59      	ldr	r2, [pc, #356]	; (8005098 <HAL_DMA_Start_IT+0x21c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d018      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a57      	ldr	r2, [pc, #348]	; (800509c <HAL_DMA_Start_IT+0x220>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a56      	ldr	r2, [pc, #344]	; (80050a0 <HAL_DMA_Start_IT+0x224>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a54      	ldr	r2, [pc, #336]	; (80050a4 <HAL_DMA_Start_IT+0x228>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d009      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a53      	ldr	r2, [pc, #332]	; (80050a8 <HAL_DMA_Start_IT+0x22c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_DMA_Start_IT+0xee>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a51      	ldr	r2, [pc, #324]	; (80050ac <HAL_DMA_Start_IT+0x230>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d108      	bne.n	8004f7c <HAL_DMA_Start_IT+0x100>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e007      	b.n	8004f8c <HAL_DMA_Start_IT+0x110>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0201 	bic.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f001 fe82 	bl	8006c9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a34      	ldr	r2, [pc, #208]	; (8005070 <HAL_DMA_Start_IT+0x1f4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d04a      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a33      	ldr	r2, [pc, #204]	; (8005074 <HAL_DMA_Start_IT+0x1f8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d045      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a31      	ldr	r2, [pc, #196]	; (8005078 <HAL_DMA_Start_IT+0x1fc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d040      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a30      	ldr	r2, [pc, #192]	; (800507c <HAL_DMA_Start_IT+0x200>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d03b      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2e      	ldr	r2, [pc, #184]	; (8005080 <HAL_DMA_Start_IT+0x204>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d036      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a2d      	ldr	r2, [pc, #180]	; (8005084 <HAL_DMA_Start_IT+0x208>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d031      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a2b      	ldr	r2, [pc, #172]	; (8005088 <HAL_DMA_Start_IT+0x20c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d02c      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2a      	ldr	r2, [pc, #168]	; (800508c <HAL_DMA_Start_IT+0x210>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d027      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a28      	ldr	r2, [pc, #160]	; (8005090 <HAL_DMA_Start_IT+0x214>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d022      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a27      	ldr	r2, [pc, #156]	; (8005094 <HAL_DMA_Start_IT+0x218>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d01d      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a25      	ldr	r2, [pc, #148]	; (8005098 <HAL_DMA_Start_IT+0x21c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d018      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a24      	ldr	r2, [pc, #144]	; (800509c <HAL_DMA_Start_IT+0x220>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d013      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a22      	ldr	r2, [pc, #136]	; (80050a0 <HAL_DMA_Start_IT+0x224>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00e      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a21      	ldr	r2, [pc, #132]	; (80050a4 <HAL_DMA_Start_IT+0x228>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d009      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <HAL_DMA_Start_IT+0x22c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_DMA_Start_IT+0x1bc>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <HAL_DMA_Start_IT+0x230>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d101      	bne.n	800503c <HAL_DMA_Start_IT+0x1c0>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <HAL_DMA_Start_IT+0x1c2>
 800503c:	2300      	movs	r3, #0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d036      	beq.n	80050b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 021e 	bic.w	r2, r3, #30
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0216 	orr.w	r2, r2, #22
 8005054:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d03e      	beq.n	80050dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0208 	orr.w	r2, r2, #8
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	e035      	b.n	80050dc <HAL_DMA_Start_IT+0x260>
 8005070:	40020010 	.word	0x40020010
 8005074:	40020028 	.word	0x40020028
 8005078:	40020040 	.word	0x40020040
 800507c:	40020058 	.word	0x40020058
 8005080:	40020070 	.word	0x40020070
 8005084:	40020088 	.word	0x40020088
 8005088:	400200a0 	.word	0x400200a0
 800508c:	400200b8 	.word	0x400200b8
 8005090:	40020410 	.word	0x40020410
 8005094:	40020428 	.word	0x40020428
 8005098:	40020440 	.word	0x40020440
 800509c:	40020458 	.word	0x40020458
 80050a0:	40020470 	.word	0x40020470
 80050a4:	40020488 	.word	0x40020488
 80050a8:	400204a0 	.word	0x400204a0
 80050ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 020e 	bic.w	r2, r3, #14
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 020a 	orr.w	r2, r2, #10
 80050c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0204 	orr.w	r2, r2, #4
 80050da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a83      	ldr	r2, [pc, #524]	; (80052f0 <HAL_DMA_Start_IT+0x474>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d072      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a82      	ldr	r2, [pc, #520]	; (80052f4 <HAL_DMA_Start_IT+0x478>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d06d      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a80      	ldr	r2, [pc, #512]	; (80052f8 <HAL_DMA_Start_IT+0x47c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d068      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a7f      	ldr	r2, [pc, #508]	; (80052fc <HAL_DMA_Start_IT+0x480>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d063      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a7d      	ldr	r2, [pc, #500]	; (8005300 <HAL_DMA_Start_IT+0x484>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d05e      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a7c      	ldr	r2, [pc, #496]	; (8005304 <HAL_DMA_Start_IT+0x488>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d059      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a7a      	ldr	r2, [pc, #488]	; (8005308 <HAL_DMA_Start_IT+0x48c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d054      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a79      	ldr	r2, [pc, #484]	; (800530c <HAL_DMA_Start_IT+0x490>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d04f      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a77      	ldr	r2, [pc, #476]	; (8005310 <HAL_DMA_Start_IT+0x494>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d04a      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a76      	ldr	r2, [pc, #472]	; (8005314 <HAL_DMA_Start_IT+0x498>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d045      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a74      	ldr	r2, [pc, #464]	; (8005318 <HAL_DMA_Start_IT+0x49c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d040      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a73      	ldr	r2, [pc, #460]	; (800531c <HAL_DMA_Start_IT+0x4a0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d03b      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a71      	ldr	r2, [pc, #452]	; (8005320 <HAL_DMA_Start_IT+0x4a4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d036      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a70      	ldr	r2, [pc, #448]	; (8005324 <HAL_DMA_Start_IT+0x4a8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d031      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a6e      	ldr	r2, [pc, #440]	; (8005328 <HAL_DMA_Start_IT+0x4ac>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d02c      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a6d      	ldr	r2, [pc, #436]	; (800532c <HAL_DMA_Start_IT+0x4b0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d027      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a6b      	ldr	r2, [pc, #428]	; (8005330 <HAL_DMA_Start_IT+0x4b4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d022      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a6a      	ldr	r2, [pc, #424]	; (8005334 <HAL_DMA_Start_IT+0x4b8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d01d      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a68      	ldr	r2, [pc, #416]	; (8005338 <HAL_DMA_Start_IT+0x4bc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d018      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a67      	ldr	r2, [pc, #412]	; (800533c <HAL_DMA_Start_IT+0x4c0>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a65      	ldr	r2, [pc, #404]	; (8005340 <HAL_DMA_Start_IT+0x4c4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00e      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a64      	ldr	r2, [pc, #400]	; (8005344 <HAL_DMA_Start_IT+0x4c8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d009      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a62      	ldr	r2, [pc, #392]	; (8005348 <HAL_DMA_Start_IT+0x4cc>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_DMA_Start_IT+0x350>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a61      	ldr	r2, [pc, #388]	; (800534c <HAL_DMA_Start_IT+0x4d0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d101      	bne.n	80051d0 <HAL_DMA_Start_IT+0x354>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <HAL_DMA_Start_IT+0x356>
 80051d0:	2300      	movs	r3, #0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01a      	beq.n	800520c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a37      	ldr	r2, [pc, #220]	; (80052f0 <HAL_DMA_Start_IT+0x474>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d04a      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a36      	ldr	r2, [pc, #216]	; (80052f4 <HAL_DMA_Start_IT+0x478>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d045      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a34      	ldr	r2, [pc, #208]	; (80052f8 <HAL_DMA_Start_IT+0x47c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d040      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a33      	ldr	r2, [pc, #204]	; (80052fc <HAL_DMA_Start_IT+0x480>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d03b      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a31      	ldr	r2, [pc, #196]	; (8005300 <HAL_DMA_Start_IT+0x484>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d036      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a30      	ldr	r2, [pc, #192]	; (8005304 <HAL_DMA_Start_IT+0x488>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d031      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2e      	ldr	r2, [pc, #184]	; (8005308 <HAL_DMA_Start_IT+0x48c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d02c      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2d      	ldr	r2, [pc, #180]	; (800530c <HAL_DMA_Start_IT+0x490>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d027      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2b      	ldr	r2, [pc, #172]	; (8005310 <HAL_DMA_Start_IT+0x494>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d022      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a2a      	ldr	r2, [pc, #168]	; (8005314 <HAL_DMA_Start_IT+0x498>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d01d      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a28      	ldr	r2, [pc, #160]	; (8005318 <HAL_DMA_Start_IT+0x49c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d018      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a27      	ldr	r2, [pc, #156]	; (800531c <HAL_DMA_Start_IT+0x4a0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d013      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a25      	ldr	r2, [pc, #148]	; (8005320 <HAL_DMA_Start_IT+0x4a4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00e      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a24      	ldr	r2, [pc, #144]	; (8005324 <HAL_DMA_Start_IT+0x4a8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d009      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a22      	ldr	r2, [pc, #136]	; (8005328 <HAL_DMA_Start_IT+0x4ac>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <HAL_DMA_Start_IT+0x430>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a21      	ldr	r2, [pc, #132]	; (800532c <HAL_DMA_Start_IT+0x4b0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d108      	bne.n	80052be <HAL_DMA_Start_IT+0x442>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	e012      	b.n	80052e4 <HAL_DMA_Start_IT+0x468>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0201 	orr.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	e009      	b.n	80052e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40020010 	.word	0x40020010
 80052f4:	40020028 	.word	0x40020028
 80052f8:	40020040 	.word	0x40020040
 80052fc:	40020058 	.word	0x40020058
 8005300:	40020070 	.word	0x40020070
 8005304:	40020088 	.word	0x40020088
 8005308:	400200a0 	.word	0x400200a0
 800530c:	400200b8 	.word	0x400200b8
 8005310:	40020410 	.word	0x40020410
 8005314:	40020428 	.word	0x40020428
 8005318:	40020440 	.word	0x40020440
 800531c:	40020458 	.word	0x40020458
 8005320:	40020470 	.word	0x40020470
 8005324:	40020488 	.word	0x40020488
 8005328:	400204a0 	.word	0x400204a0
 800532c:	400204b8 	.word	0x400204b8
 8005330:	58025408 	.word	0x58025408
 8005334:	5802541c 	.word	0x5802541c
 8005338:	58025430 	.word	0x58025430
 800533c:	58025444 	.word	0x58025444
 8005340:	58025458 	.word	0x58025458
 8005344:	5802546c 	.word	0x5802546c
 8005348:	58025480 	.word	0x58025480
 800534c:	58025494 	.word	0x58025494

08005350 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005358:	f7ff f8e8 	bl	800452c <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e2dc      	b.n	8005922 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d008      	beq.n	8005386 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2280      	movs	r2, #128	; 0x80
 8005378:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e2cd      	b.n	8005922 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a76      	ldr	r2, [pc, #472]	; (8005564 <HAL_DMA_Abort+0x214>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d04a      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a74      	ldr	r2, [pc, #464]	; (8005568 <HAL_DMA_Abort+0x218>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d045      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a73      	ldr	r2, [pc, #460]	; (800556c <HAL_DMA_Abort+0x21c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d040      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a71      	ldr	r2, [pc, #452]	; (8005570 <HAL_DMA_Abort+0x220>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d03b      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a70      	ldr	r2, [pc, #448]	; (8005574 <HAL_DMA_Abort+0x224>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d036      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a6e      	ldr	r2, [pc, #440]	; (8005578 <HAL_DMA_Abort+0x228>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d031      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a6d      	ldr	r2, [pc, #436]	; (800557c <HAL_DMA_Abort+0x22c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d02c      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a6b      	ldr	r2, [pc, #428]	; (8005580 <HAL_DMA_Abort+0x230>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d027      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a6a      	ldr	r2, [pc, #424]	; (8005584 <HAL_DMA_Abort+0x234>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d022      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a68      	ldr	r2, [pc, #416]	; (8005588 <HAL_DMA_Abort+0x238>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01d      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a67      	ldr	r2, [pc, #412]	; (800558c <HAL_DMA_Abort+0x23c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d018      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a65      	ldr	r2, [pc, #404]	; (8005590 <HAL_DMA_Abort+0x240>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a64      	ldr	r2, [pc, #400]	; (8005594 <HAL_DMA_Abort+0x244>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a62      	ldr	r2, [pc, #392]	; (8005598 <HAL_DMA_Abort+0x248>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d009      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a61      	ldr	r2, [pc, #388]	; (800559c <HAL_DMA_Abort+0x24c>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_DMA_Abort+0xd6>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a5f      	ldr	r2, [pc, #380]	; (80055a0 <HAL_DMA_Abort+0x250>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d101      	bne.n	800542a <HAL_DMA_Abort+0xda>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <HAL_DMA_Abort+0xdc>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d013      	beq.n	8005458 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 021e 	bic.w	r2, r2, #30
 800543e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695a      	ldr	r2, [r3, #20]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800544e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	e00a      	b.n	800546e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 020e 	bic.w	r2, r2, #14
 8005466:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a3c      	ldr	r2, [pc, #240]	; (8005564 <HAL_DMA_Abort+0x214>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d072      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a3a      	ldr	r2, [pc, #232]	; (8005568 <HAL_DMA_Abort+0x218>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d06d      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a39      	ldr	r2, [pc, #228]	; (800556c <HAL_DMA_Abort+0x21c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d068      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a37      	ldr	r2, [pc, #220]	; (8005570 <HAL_DMA_Abort+0x220>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d063      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a36      	ldr	r2, [pc, #216]	; (8005574 <HAL_DMA_Abort+0x224>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d05e      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a34      	ldr	r2, [pc, #208]	; (8005578 <HAL_DMA_Abort+0x228>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d059      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a33      	ldr	r2, [pc, #204]	; (800557c <HAL_DMA_Abort+0x22c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d054      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a31      	ldr	r2, [pc, #196]	; (8005580 <HAL_DMA_Abort+0x230>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d04f      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a30      	ldr	r2, [pc, #192]	; (8005584 <HAL_DMA_Abort+0x234>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d04a      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a2e      	ldr	r2, [pc, #184]	; (8005588 <HAL_DMA_Abort+0x238>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d045      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a2d      	ldr	r2, [pc, #180]	; (800558c <HAL_DMA_Abort+0x23c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d040      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2b      	ldr	r2, [pc, #172]	; (8005590 <HAL_DMA_Abort+0x240>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d03b      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a2a      	ldr	r2, [pc, #168]	; (8005594 <HAL_DMA_Abort+0x244>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d036      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a28      	ldr	r2, [pc, #160]	; (8005598 <HAL_DMA_Abort+0x248>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d031      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a27      	ldr	r2, [pc, #156]	; (800559c <HAL_DMA_Abort+0x24c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d02c      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a25      	ldr	r2, [pc, #148]	; (80055a0 <HAL_DMA_Abort+0x250>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d027      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a24      	ldr	r2, [pc, #144]	; (80055a4 <HAL_DMA_Abort+0x254>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d022      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <HAL_DMA_Abort+0x258>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01d      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a21      	ldr	r2, [pc, #132]	; (80055ac <HAL_DMA_Abort+0x25c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d018      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1f      	ldr	r2, [pc, #124]	; (80055b0 <HAL_DMA_Abort+0x260>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1e      	ldr	r2, [pc, #120]	; (80055b4 <HAL_DMA_Abort+0x264>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00e      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a1c      	ldr	r2, [pc, #112]	; (80055b8 <HAL_DMA_Abort+0x268>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d009      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a1b      	ldr	r2, [pc, #108]	; (80055bc <HAL_DMA_Abort+0x26c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d004      	beq.n	800555e <HAL_DMA_Abort+0x20e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <HAL_DMA_Abort+0x270>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d132      	bne.n	80055c4 <HAL_DMA_Abort+0x274>
 800555e:	2301      	movs	r3, #1
 8005560:	e031      	b.n	80055c6 <HAL_DMA_Abort+0x276>
 8005562:	bf00      	nop
 8005564:	40020010 	.word	0x40020010
 8005568:	40020028 	.word	0x40020028
 800556c:	40020040 	.word	0x40020040
 8005570:	40020058 	.word	0x40020058
 8005574:	40020070 	.word	0x40020070
 8005578:	40020088 	.word	0x40020088
 800557c:	400200a0 	.word	0x400200a0
 8005580:	400200b8 	.word	0x400200b8
 8005584:	40020410 	.word	0x40020410
 8005588:	40020428 	.word	0x40020428
 800558c:	40020440 	.word	0x40020440
 8005590:	40020458 	.word	0x40020458
 8005594:	40020470 	.word	0x40020470
 8005598:	40020488 	.word	0x40020488
 800559c:	400204a0 	.word	0x400204a0
 80055a0:	400204b8 	.word	0x400204b8
 80055a4:	58025408 	.word	0x58025408
 80055a8:	5802541c 	.word	0x5802541c
 80055ac:	58025430 	.word	0x58025430
 80055b0:	58025444 	.word	0x58025444
 80055b4:	58025458 	.word	0x58025458
 80055b8:	5802546c 	.word	0x5802546c
 80055bc:	58025480 	.word	0x58025480
 80055c0:	58025494 	.word	0x58025494
 80055c4:	2300      	movs	r3, #0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a6d      	ldr	r2, [pc, #436]	; (8005794 <HAL_DMA_Abort+0x444>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d04a      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a6b      	ldr	r2, [pc, #428]	; (8005798 <HAL_DMA_Abort+0x448>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d045      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a6a      	ldr	r2, [pc, #424]	; (800579c <HAL_DMA_Abort+0x44c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d040      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a68      	ldr	r2, [pc, #416]	; (80057a0 <HAL_DMA_Abort+0x450>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d03b      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a67      	ldr	r2, [pc, #412]	; (80057a4 <HAL_DMA_Abort+0x454>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d036      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a65      	ldr	r2, [pc, #404]	; (80057a8 <HAL_DMA_Abort+0x458>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d031      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a64      	ldr	r2, [pc, #400]	; (80057ac <HAL_DMA_Abort+0x45c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d02c      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a62      	ldr	r2, [pc, #392]	; (80057b0 <HAL_DMA_Abort+0x460>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d027      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a61      	ldr	r2, [pc, #388]	; (80057b4 <HAL_DMA_Abort+0x464>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d022      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a5f      	ldr	r2, [pc, #380]	; (80057b8 <HAL_DMA_Abort+0x468>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d01d      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a5e      	ldr	r2, [pc, #376]	; (80057bc <HAL_DMA_Abort+0x46c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d018      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a5c      	ldr	r2, [pc, #368]	; (80057c0 <HAL_DMA_Abort+0x470>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a5b      	ldr	r2, [pc, #364]	; (80057c4 <HAL_DMA_Abort+0x474>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00e      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a59      	ldr	r2, [pc, #356]	; (80057c8 <HAL_DMA_Abort+0x478>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d009      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a58      	ldr	r2, [pc, #352]	; (80057cc <HAL_DMA_Abort+0x47c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d004      	beq.n	800567a <HAL_DMA_Abort+0x32a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a56      	ldr	r2, [pc, #344]	; (80057d0 <HAL_DMA_Abort+0x480>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d108      	bne.n	800568c <HAL_DMA_Abort+0x33c>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0201 	bic.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	e007      	b.n	800569c <HAL_DMA_Abort+0x34c>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800569c:	e013      	b.n	80056c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800569e:	f7fe ff45 	bl	800452c <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b05      	cmp	r3, #5
 80056aa:	d90c      	bls.n	80056c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2203      	movs	r2, #3
 80056be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e12d      	b.n	8005922 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0301 	and.w	r3, r3, #1
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e5      	bne.n	800569e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a2f      	ldr	r2, [pc, #188]	; (8005794 <HAL_DMA_Abort+0x444>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d04a      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a2d      	ldr	r2, [pc, #180]	; (8005798 <HAL_DMA_Abort+0x448>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d045      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2c      	ldr	r2, [pc, #176]	; (800579c <HAL_DMA_Abort+0x44c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d040      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2a      	ldr	r2, [pc, #168]	; (80057a0 <HAL_DMA_Abort+0x450>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d03b      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a29      	ldr	r2, [pc, #164]	; (80057a4 <HAL_DMA_Abort+0x454>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d036      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a27      	ldr	r2, [pc, #156]	; (80057a8 <HAL_DMA_Abort+0x458>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d031      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a26      	ldr	r2, [pc, #152]	; (80057ac <HAL_DMA_Abort+0x45c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d02c      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a24      	ldr	r2, [pc, #144]	; (80057b0 <HAL_DMA_Abort+0x460>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d027      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a23      	ldr	r2, [pc, #140]	; (80057b4 <HAL_DMA_Abort+0x464>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d022      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <HAL_DMA_Abort+0x468>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01d      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a20      	ldr	r2, [pc, #128]	; (80057bc <HAL_DMA_Abort+0x46c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d018      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a1e      	ldr	r2, [pc, #120]	; (80057c0 <HAL_DMA_Abort+0x470>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <HAL_DMA_Abort+0x474>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d00e      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <HAL_DMA_Abort+0x478>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d009      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a1a      	ldr	r2, [pc, #104]	; (80057cc <HAL_DMA_Abort+0x47c>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d004      	beq.n	8005772 <HAL_DMA_Abort+0x422>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <HAL_DMA_Abort+0x480>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d101      	bne.n	8005776 <HAL_DMA_Abort+0x426>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <HAL_DMA_Abort+0x428>
 8005776:	2300      	movs	r3, #0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d02b      	beq.n	80057d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005780:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	223f      	movs	r2, #63	; 0x3f
 800578c:	409a      	lsls	r2, r3
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	609a      	str	r2, [r3, #8]
 8005792:	e02a      	b.n	80057ea <HAL_DMA_Abort+0x49a>
 8005794:	40020010 	.word	0x40020010
 8005798:	40020028 	.word	0x40020028
 800579c:	40020040 	.word	0x40020040
 80057a0:	40020058 	.word	0x40020058
 80057a4:	40020070 	.word	0x40020070
 80057a8:	40020088 	.word	0x40020088
 80057ac:	400200a0 	.word	0x400200a0
 80057b0:	400200b8 	.word	0x400200b8
 80057b4:	40020410 	.word	0x40020410
 80057b8:	40020428 	.word	0x40020428
 80057bc:	40020440 	.word	0x40020440
 80057c0:	40020458 	.word	0x40020458
 80057c4:	40020470 	.word	0x40020470
 80057c8:	40020488 	.word	0x40020488
 80057cc:	400204a0 	.word	0x400204a0
 80057d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	2201      	movs	r2, #1
 80057e4:	409a      	lsls	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a4f      	ldr	r2, [pc, #316]	; (800592c <HAL_DMA_Abort+0x5dc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d072      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a4d      	ldr	r2, [pc, #308]	; (8005930 <HAL_DMA_Abort+0x5e0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d06d      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a4c      	ldr	r2, [pc, #304]	; (8005934 <HAL_DMA_Abort+0x5e4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d068      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a4a      	ldr	r2, [pc, #296]	; (8005938 <HAL_DMA_Abort+0x5e8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d063      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a49      	ldr	r2, [pc, #292]	; (800593c <HAL_DMA_Abort+0x5ec>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d05e      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a47      	ldr	r2, [pc, #284]	; (8005940 <HAL_DMA_Abort+0x5f0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d059      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a46      	ldr	r2, [pc, #280]	; (8005944 <HAL_DMA_Abort+0x5f4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d054      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a44      	ldr	r2, [pc, #272]	; (8005948 <HAL_DMA_Abort+0x5f8>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d04f      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a43      	ldr	r2, [pc, #268]	; (800594c <HAL_DMA_Abort+0x5fc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d04a      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a41      	ldr	r2, [pc, #260]	; (8005950 <HAL_DMA_Abort+0x600>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d045      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a40      	ldr	r2, [pc, #256]	; (8005954 <HAL_DMA_Abort+0x604>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d040      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a3e      	ldr	r2, [pc, #248]	; (8005958 <HAL_DMA_Abort+0x608>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d03b      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a3d      	ldr	r2, [pc, #244]	; (800595c <HAL_DMA_Abort+0x60c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d036      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a3b      	ldr	r2, [pc, #236]	; (8005960 <HAL_DMA_Abort+0x610>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d031      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a3a      	ldr	r2, [pc, #232]	; (8005964 <HAL_DMA_Abort+0x614>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d02c      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a38      	ldr	r2, [pc, #224]	; (8005968 <HAL_DMA_Abort+0x618>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d027      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a37      	ldr	r2, [pc, #220]	; (800596c <HAL_DMA_Abort+0x61c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d022      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a35      	ldr	r2, [pc, #212]	; (8005970 <HAL_DMA_Abort+0x620>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d01d      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a34      	ldr	r2, [pc, #208]	; (8005974 <HAL_DMA_Abort+0x624>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d018      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a32      	ldr	r2, [pc, #200]	; (8005978 <HAL_DMA_Abort+0x628>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a31      	ldr	r2, [pc, #196]	; (800597c <HAL_DMA_Abort+0x62c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d00e      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2f      	ldr	r2, [pc, #188]	; (8005980 <HAL_DMA_Abort+0x630>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d009      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2e      	ldr	r2, [pc, #184]	; (8005984 <HAL_DMA_Abort+0x634>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d004      	beq.n	80058da <HAL_DMA_Abort+0x58a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a2c      	ldr	r2, [pc, #176]	; (8005988 <HAL_DMA_Abort+0x638>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d101      	bne.n	80058de <HAL_DMA_Abort+0x58e>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_DMA_Abort+0x590>
 80058de:	2300      	movs	r3, #0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d015      	beq.n	8005910 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00c      	beq.n	8005910 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005904:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800590e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	40020010 	.word	0x40020010
 8005930:	40020028 	.word	0x40020028
 8005934:	40020040 	.word	0x40020040
 8005938:	40020058 	.word	0x40020058
 800593c:	40020070 	.word	0x40020070
 8005940:	40020088 	.word	0x40020088
 8005944:	400200a0 	.word	0x400200a0
 8005948:	400200b8 	.word	0x400200b8
 800594c:	40020410 	.word	0x40020410
 8005950:	40020428 	.word	0x40020428
 8005954:	40020440 	.word	0x40020440
 8005958:	40020458 	.word	0x40020458
 800595c:	40020470 	.word	0x40020470
 8005960:	40020488 	.word	0x40020488
 8005964:	400204a0 	.word	0x400204a0
 8005968:	400204b8 	.word	0x400204b8
 800596c:	58025408 	.word	0x58025408
 8005970:	5802541c 	.word	0x5802541c
 8005974:	58025430 	.word	0x58025430
 8005978:	58025444 	.word	0x58025444
 800597c:	58025458 	.word	0x58025458
 8005980:	5802546c 	.word	0x5802546c
 8005984:	58025480 	.word	0x58025480
 8005988:	58025494 	.word	0x58025494

0800598c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e205      	b.n	8005daa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d004      	beq.n	80059b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2280      	movs	r2, #128	; 0x80
 80059ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e1fa      	b.n	8005daa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a8c      	ldr	r2, [pc, #560]	; (8005bec <HAL_DMA_Abort_IT+0x260>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d04a      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a8b      	ldr	r2, [pc, #556]	; (8005bf0 <HAL_DMA_Abort_IT+0x264>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d045      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a89      	ldr	r2, [pc, #548]	; (8005bf4 <HAL_DMA_Abort_IT+0x268>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d040      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a88      	ldr	r2, [pc, #544]	; (8005bf8 <HAL_DMA_Abort_IT+0x26c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d03b      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a86      	ldr	r2, [pc, #536]	; (8005bfc <HAL_DMA_Abort_IT+0x270>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d036      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a85      	ldr	r2, [pc, #532]	; (8005c00 <HAL_DMA_Abort_IT+0x274>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d031      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a83      	ldr	r2, [pc, #524]	; (8005c04 <HAL_DMA_Abort_IT+0x278>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d02c      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a82      	ldr	r2, [pc, #520]	; (8005c08 <HAL_DMA_Abort_IT+0x27c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d027      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a80      	ldr	r2, [pc, #512]	; (8005c0c <HAL_DMA_Abort_IT+0x280>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d022      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a7f      	ldr	r2, [pc, #508]	; (8005c10 <HAL_DMA_Abort_IT+0x284>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d01d      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a7d      	ldr	r2, [pc, #500]	; (8005c14 <HAL_DMA_Abort_IT+0x288>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d018      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a7c      	ldr	r2, [pc, #496]	; (8005c18 <HAL_DMA_Abort_IT+0x28c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d013      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a7a      	ldr	r2, [pc, #488]	; (8005c1c <HAL_DMA_Abort_IT+0x290>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00e      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a79      	ldr	r2, [pc, #484]	; (8005c20 <HAL_DMA_Abort_IT+0x294>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d009      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a77      	ldr	r2, [pc, #476]	; (8005c24 <HAL_DMA_Abort_IT+0x298>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d004      	beq.n	8005a54 <HAL_DMA_Abort_IT+0xc8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a76      	ldr	r2, [pc, #472]	; (8005c28 <HAL_DMA_Abort_IT+0x29c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d101      	bne.n	8005a58 <HAL_DMA_Abort_IT+0xcc>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <HAL_DMA_Abort_IT+0xce>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d065      	beq.n	8005b2a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2204      	movs	r2, #4
 8005a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a60      	ldr	r2, [pc, #384]	; (8005bec <HAL_DMA_Abort_IT+0x260>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d04a      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a5e      	ldr	r2, [pc, #376]	; (8005bf0 <HAL_DMA_Abort_IT+0x264>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d045      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a5d      	ldr	r2, [pc, #372]	; (8005bf4 <HAL_DMA_Abort_IT+0x268>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d040      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a5b      	ldr	r2, [pc, #364]	; (8005bf8 <HAL_DMA_Abort_IT+0x26c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d03b      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a5a      	ldr	r2, [pc, #360]	; (8005bfc <HAL_DMA_Abort_IT+0x270>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d036      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a58      	ldr	r2, [pc, #352]	; (8005c00 <HAL_DMA_Abort_IT+0x274>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d031      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a57      	ldr	r2, [pc, #348]	; (8005c04 <HAL_DMA_Abort_IT+0x278>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d02c      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a55      	ldr	r2, [pc, #340]	; (8005c08 <HAL_DMA_Abort_IT+0x27c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d027      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a54      	ldr	r2, [pc, #336]	; (8005c0c <HAL_DMA_Abort_IT+0x280>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d022      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a52      	ldr	r2, [pc, #328]	; (8005c10 <HAL_DMA_Abort_IT+0x284>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d01d      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a51      	ldr	r2, [pc, #324]	; (8005c14 <HAL_DMA_Abort_IT+0x288>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d018      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a4f      	ldr	r2, [pc, #316]	; (8005c18 <HAL_DMA_Abort_IT+0x28c>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a4e      	ldr	r2, [pc, #312]	; (8005c1c <HAL_DMA_Abort_IT+0x290>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00e      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a4c      	ldr	r2, [pc, #304]	; (8005c20 <HAL_DMA_Abort_IT+0x294>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d009      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a4b      	ldr	r2, [pc, #300]	; (8005c24 <HAL_DMA_Abort_IT+0x298>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x17a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a49      	ldr	r2, [pc, #292]	; (8005c28 <HAL_DMA_Abort_IT+0x29c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d108      	bne.n	8005b18 <HAL_DMA_Abort_IT+0x18c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0201 	bic.w	r2, r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e147      	b.n	8005da8 <HAL_DMA_Abort_IT+0x41c>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0201 	bic.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	e13e      	b.n	8005da8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 020e 	bic.w	r2, r2, #14
 8005b38:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2b      	ldr	r2, [pc, #172]	; (8005bec <HAL_DMA_Abort_IT+0x260>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d04a      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a29      	ldr	r2, [pc, #164]	; (8005bf0 <HAL_DMA_Abort_IT+0x264>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d045      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a28      	ldr	r2, [pc, #160]	; (8005bf4 <HAL_DMA_Abort_IT+0x268>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d040      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a26      	ldr	r2, [pc, #152]	; (8005bf8 <HAL_DMA_Abort_IT+0x26c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d03b      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a25      	ldr	r2, [pc, #148]	; (8005bfc <HAL_DMA_Abort_IT+0x270>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d036      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a23      	ldr	r2, [pc, #140]	; (8005c00 <HAL_DMA_Abort_IT+0x274>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d031      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a22      	ldr	r2, [pc, #136]	; (8005c04 <HAL_DMA_Abort_IT+0x278>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d02c      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a20      	ldr	r2, [pc, #128]	; (8005c08 <HAL_DMA_Abort_IT+0x27c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d027      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a1f      	ldr	r2, [pc, #124]	; (8005c0c <HAL_DMA_Abort_IT+0x280>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d022      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1d      	ldr	r2, [pc, #116]	; (8005c10 <HAL_DMA_Abort_IT+0x284>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d01d      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <HAL_DMA_Abort_IT+0x288>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d018      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <HAL_DMA_Abort_IT+0x28c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a19      	ldr	r2, [pc, #100]	; (8005c1c <HAL_DMA_Abort_IT+0x290>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <HAL_DMA_Abort_IT+0x294>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a16      	ldr	r2, [pc, #88]	; (8005c24 <HAL_DMA_Abort_IT+0x298>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <HAL_DMA_Abort_IT+0x24e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <HAL_DMA_Abort_IT+0x29c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d128      	bne.n	8005c2c <HAL_DMA_Abort_IT+0x2a0>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0201 	bic.w	r2, r2, #1
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e027      	b.n	8005c3c <HAL_DMA_Abort_IT+0x2b0>
 8005bec:	40020010 	.word	0x40020010
 8005bf0:	40020028 	.word	0x40020028
 8005bf4:	40020040 	.word	0x40020040
 8005bf8:	40020058 	.word	0x40020058
 8005bfc:	40020070 	.word	0x40020070
 8005c00:	40020088 	.word	0x40020088
 8005c04:	400200a0 	.word	0x400200a0
 8005c08:	400200b8 	.word	0x400200b8
 8005c0c:	40020410 	.word	0x40020410
 8005c10:	40020428 	.word	0x40020428
 8005c14:	40020440 	.word	0x40020440
 8005c18:	40020458 	.word	0x40020458
 8005c1c:	40020470 	.word	0x40020470
 8005c20:	40020488 	.word	0x40020488
 8005c24:	400204a0 	.word	0x400204a0
 8005c28:	400204b8 	.word	0x400204b8
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a5c      	ldr	r2, [pc, #368]	; (8005db4 <HAL_DMA_Abort_IT+0x428>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d072      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a5b      	ldr	r2, [pc, #364]	; (8005db8 <HAL_DMA_Abort_IT+0x42c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d06d      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a59      	ldr	r2, [pc, #356]	; (8005dbc <HAL_DMA_Abort_IT+0x430>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d068      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a58      	ldr	r2, [pc, #352]	; (8005dc0 <HAL_DMA_Abort_IT+0x434>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d063      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a56      	ldr	r2, [pc, #344]	; (8005dc4 <HAL_DMA_Abort_IT+0x438>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d05e      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a55      	ldr	r2, [pc, #340]	; (8005dc8 <HAL_DMA_Abort_IT+0x43c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d059      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a53      	ldr	r2, [pc, #332]	; (8005dcc <HAL_DMA_Abort_IT+0x440>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d054      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a52      	ldr	r2, [pc, #328]	; (8005dd0 <HAL_DMA_Abort_IT+0x444>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d04f      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a50      	ldr	r2, [pc, #320]	; (8005dd4 <HAL_DMA_Abort_IT+0x448>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d04a      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a4f      	ldr	r2, [pc, #316]	; (8005dd8 <HAL_DMA_Abort_IT+0x44c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d045      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a4d      	ldr	r2, [pc, #308]	; (8005ddc <HAL_DMA_Abort_IT+0x450>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d040      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a4c      	ldr	r2, [pc, #304]	; (8005de0 <HAL_DMA_Abort_IT+0x454>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d03b      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a4a      	ldr	r2, [pc, #296]	; (8005de4 <HAL_DMA_Abort_IT+0x458>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d036      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a49      	ldr	r2, [pc, #292]	; (8005de8 <HAL_DMA_Abort_IT+0x45c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d031      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a47      	ldr	r2, [pc, #284]	; (8005dec <HAL_DMA_Abort_IT+0x460>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d02c      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a46      	ldr	r2, [pc, #280]	; (8005df0 <HAL_DMA_Abort_IT+0x464>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d027      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a44      	ldr	r2, [pc, #272]	; (8005df4 <HAL_DMA_Abort_IT+0x468>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d022      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a43      	ldr	r2, [pc, #268]	; (8005df8 <HAL_DMA_Abort_IT+0x46c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d01d      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a41      	ldr	r2, [pc, #260]	; (8005dfc <HAL_DMA_Abort_IT+0x470>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d018      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a40      	ldr	r2, [pc, #256]	; (8005e00 <HAL_DMA_Abort_IT+0x474>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d013      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a3e      	ldr	r2, [pc, #248]	; (8005e04 <HAL_DMA_Abort_IT+0x478>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00e      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a3d      	ldr	r2, [pc, #244]	; (8005e08 <HAL_DMA_Abort_IT+0x47c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d009      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a3b      	ldr	r2, [pc, #236]	; (8005e0c <HAL_DMA_Abort_IT+0x480>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <HAL_DMA_Abort_IT+0x3a0>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a3a      	ldr	r2, [pc, #232]	; (8005e10 <HAL_DMA_Abort_IT+0x484>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d101      	bne.n	8005d30 <HAL_DMA_Abort_IT+0x3a4>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <HAL_DMA_Abort_IT+0x3a6>
 8005d30:	2300      	movs	r3, #0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d028      	beq.n	8005d88 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d44:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	2201      	movs	r2, #1
 8005d56:	409a      	lsls	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d64:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00c      	beq.n	8005d88 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d7c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d86:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40020010 	.word	0x40020010
 8005db8:	40020028 	.word	0x40020028
 8005dbc:	40020040 	.word	0x40020040
 8005dc0:	40020058 	.word	0x40020058
 8005dc4:	40020070 	.word	0x40020070
 8005dc8:	40020088 	.word	0x40020088
 8005dcc:	400200a0 	.word	0x400200a0
 8005dd0:	400200b8 	.word	0x400200b8
 8005dd4:	40020410 	.word	0x40020410
 8005dd8:	40020428 	.word	0x40020428
 8005ddc:	40020440 	.word	0x40020440
 8005de0:	40020458 	.word	0x40020458
 8005de4:	40020470 	.word	0x40020470
 8005de8:	40020488 	.word	0x40020488
 8005dec:	400204a0 	.word	0x400204a0
 8005df0:	400204b8 	.word	0x400204b8
 8005df4:	58025408 	.word	0x58025408
 8005df8:	5802541c 	.word	0x5802541c
 8005dfc:	58025430 	.word	0x58025430
 8005e00:	58025444 	.word	0x58025444
 8005e04:	58025458 	.word	0x58025458
 8005e08:	5802546c 	.word	0x5802546c
 8005e0c:	58025480 	.word	0x58025480
 8005e10:	58025494 	.word	0x58025494

08005e14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08a      	sub	sp, #40	; 0x28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e20:	4b67      	ldr	r3, [pc, #412]	; (8005fc0 <HAL_DMA_IRQHandler+0x1ac>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a67      	ldr	r2, [pc, #412]	; (8005fc4 <HAL_DMA_IRQHandler+0x1b0>)
 8005e26:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2a:	0a9b      	lsrs	r3, r3, #10
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e32:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e38:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a5f      	ldr	r2, [pc, #380]	; (8005fc8 <HAL_DMA_IRQHandler+0x1b4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d04a      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a5d      	ldr	r2, [pc, #372]	; (8005fcc <HAL_DMA_IRQHandler+0x1b8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d045      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a5c      	ldr	r2, [pc, #368]	; (8005fd0 <HAL_DMA_IRQHandler+0x1bc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d040      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a5a      	ldr	r2, [pc, #360]	; (8005fd4 <HAL_DMA_IRQHandler+0x1c0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d03b      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a59      	ldr	r2, [pc, #356]	; (8005fd8 <HAL_DMA_IRQHandler+0x1c4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d036      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a57      	ldr	r2, [pc, #348]	; (8005fdc <HAL_DMA_IRQHandler+0x1c8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d031      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a56      	ldr	r2, [pc, #344]	; (8005fe0 <HAL_DMA_IRQHandler+0x1cc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d02c      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a54      	ldr	r2, [pc, #336]	; (8005fe4 <HAL_DMA_IRQHandler+0x1d0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d027      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a53      	ldr	r2, [pc, #332]	; (8005fe8 <HAL_DMA_IRQHandler+0x1d4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d022      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a51      	ldr	r2, [pc, #324]	; (8005fec <HAL_DMA_IRQHandler+0x1d8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01d      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a50      	ldr	r2, [pc, #320]	; (8005ff0 <HAL_DMA_IRQHandler+0x1dc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a4e      	ldr	r2, [pc, #312]	; (8005ff4 <HAL_DMA_IRQHandler+0x1e0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a4d      	ldr	r2, [pc, #308]	; (8005ff8 <HAL_DMA_IRQHandler+0x1e4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a4b      	ldr	r2, [pc, #300]	; (8005ffc <HAL_DMA_IRQHandler+0x1e8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a4a      	ldr	r2, [pc, #296]	; (8006000 <HAL_DMA_IRQHandler+0x1ec>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xd2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a48      	ldr	r2, [pc, #288]	; (8006004 <HAL_DMA_IRQHandler+0x1f0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <HAL_DMA_IRQHandler+0xd6>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <HAL_DMA_IRQHandler+0xd8>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 842b 	beq.w	8006748 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	2208      	movs	r2, #8
 8005efc:	409a      	lsls	r2, r3
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	4013      	ands	r3, r2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 80a2 	beq.w	800604c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a2e      	ldr	r2, [pc, #184]	; (8005fc8 <HAL_DMA_IRQHandler+0x1b4>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d04a      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a2d      	ldr	r2, [pc, #180]	; (8005fcc <HAL_DMA_IRQHandler+0x1b8>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d045      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a2b      	ldr	r2, [pc, #172]	; (8005fd0 <HAL_DMA_IRQHandler+0x1bc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d040      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2a      	ldr	r2, [pc, #168]	; (8005fd4 <HAL_DMA_IRQHandler+0x1c0>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d03b      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a28      	ldr	r2, [pc, #160]	; (8005fd8 <HAL_DMA_IRQHandler+0x1c4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d036      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a27      	ldr	r2, [pc, #156]	; (8005fdc <HAL_DMA_IRQHandler+0x1c8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d031      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a25      	ldr	r2, [pc, #148]	; (8005fe0 <HAL_DMA_IRQHandler+0x1cc>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d02c      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a24      	ldr	r2, [pc, #144]	; (8005fe4 <HAL_DMA_IRQHandler+0x1d0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d027      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a22      	ldr	r2, [pc, #136]	; (8005fe8 <HAL_DMA_IRQHandler+0x1d4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d022      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a21      	ldr	r2, [pc, #132]	; (8005fec <HAL_DMA_IRQHandler+0x1d8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d01d      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <HAL_DMA_IRQHandler+0x1dc>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d018      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a1e      	ldr	r2, [pc, #120]	; (8005ff4 <HAL_DMA_IRQHandler+0x1e0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d013      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a1c      	ldr	r2, [pc, #112]	; (8005ff8 <HAL_DMA_IRQHandler+0x1e4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00e      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a1b      	ldr	r2, [pc, #108]	; (8005ffc <HAL_DMA_IRQHandler+0x1e8>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d009      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a19      	ldr	r2, [pc, #100]	; (8006000 <HAL_DMA_IRQHandler+0x1ec>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x194>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a18      	ldr	r2, [pc, #96]	; (8006004 <HAL_DMA_IRQHandler+0x1f0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d12f      	bne.n	8006008 <HAL_DMA_IRQHandler+0x1f4>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bf14      	ite	ne
 8005fb6:	2301      	movne	r3, #1
 8005fb8:	2300      	moveq	r3, #0
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	e02e      	b.n	800601c <HAL_DMA_IRQHandler+0x208>
 8005fbe:	bf00      	nop
 8005fc0:	24000018 	.word	0x24000018
 8005fc4:	1b4e81b5 	.word	0x1b4e81b5
 8005fc8:	40020010 	.word	0x40020010
 8005fcc:	40020028 	.word	0x40020028
 8005fd0:	40020040 	.word	0x40020040
 8005fd4:	40020058 	.word	0x40020058
 8005fd8:	40020070 	.word	0x40020070
 8005fdc:	40020088 	.word	0x40020088
 8005fe0:	400200a0 	.word	0x400200a0
 8005fe4:	400200b8 	.word	0x400200b8
 8005fe8:	40020410 	.word	0x40020410
 8005fec:	40020428 	.word	0x40020428
 8005ff0:	40020440 	.word	0x40020440
 8005ff4:	40020458 	.word	0x40020458
 8005ff8:	40020470 	.word	0x40020470
 8005ffc:	40020488 	.word	0x40020488
 8006000:	400204a0 	.word	0x400204a0
 8006004:	400204b8 	.word	0x400204b8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	bf14      	ite	ne
 8006016:	2301      	movne	r3, #1
 8006018:	2300      	moveq	r3, #0
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d015      	beq.n	800604c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0204 	bic.w	r2, r2, #4
 800602e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006034:	f003 031f 	and.w	r3, r3, #31
 8006038:	2208      	movs	r2, #8
 800603a:	409a      	lsls	r2, r3
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006044:	f043 0201 	orr.w	r2, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006050:	f003 031f 	and.w	r3, r3, #31
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	fa22 f303 	lsr.w	r3, r2, r3
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d06e      	beq.n	8006140 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a69      	ldr	r2, [pc, #420]	; (800620c <HAL_DMA_IRQHandler+0x3f8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d04a      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a67      	ldr	r2, [pc, #412]	; (8006210 <HAL_DMA_IRQHandler+0x3fc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d045      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a66      	ldr	r2, [pc, #408]	; (8006214 <HAL_DMA_IRQHandler+0x400>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d040      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a64      	ldr	r2, [pc, #400]	; (8006218 <HAL_DMA_IRQHandler+0x404>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d03b      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a63      	ldr	r2, [pc, #396]	; (800621c <HAL_DMA_IRQHandler+0x408>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d036      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a61      	ldr	r2, [pc, #388]	; (8006220 <HAL_DMA_IRQHandler+0x40c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d031      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a60      	ldr	r2, [pc, #384]	; (8006224 <HAL_DMA_IRQHandler+0x410>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d02c      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a5e      	ldr	r2, [pc, #376]	; (8006228 <HAL_DMA_IRQHandler+0x414>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d027      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a5d      	ldr	r2, [pc, #372]	; (800622c <HAL_DMA_IRQHandler+0x418>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d022      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a5b      	ldr	r2, [pc, #364]	; (8006230 <HAL_DMA_IRQHandler+0x41c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d01d      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a5a      	ldr	r2, [pc, #360]	; (8006234 <HAL_DMA_IRQHandler+0x420>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d018      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a58      	ldr	r2, [pc, #352]	; (8006238 <HAL_DMA_IRQHandler+0x424>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d013      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a57      	ldr	r2, [pc, #348]	; (800623c <HAL_DMA_IRQHandler+0x428>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00e      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a55      	ldr	r2, [pc, #340]	; (8006240 <HAL_DMA_IRQHandler+0x42c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d009      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a54      	ldr	r2, [pc, #336]	; (8006244 <HAL_DMA_IRQHandler+0x430>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d004      	beq.n	8006102 <HAL_DMA_IRQHandler+0x2ee>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a52      	ldr	r2, [pc, #328]	; (8006248 <HAL_DMA_IRQHandler+0x434>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d10a      	bne.n	8006118 <HAL_DMA_IRQHandler+0x304>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610c:	2b00      	cmp	r3, #0
 800610e:	bf14      	ite	ne
 8006110:	2301      	movne	r3, #1
 8006112:	2300      	moveq	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e003      	b.n	8006120 <HAL_DMA_IRQHandler+0x30c>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00d      	beq.n	8006140 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	2201      	movs	r2, #1
 800612e:	409a      	lsls	r2, r3
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006138:	f043 0202 	orr.w	r2, r3, #2
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006144:	f003 031f 	and.w	r3, r3, #31
 8006148:	2204      	movs	r2, #4
 800614a:	409a      	lsls	r2, r3
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	4013      	ands	r3, r2
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 808f 	beq.w	8006274 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2c      	ldr	r2, [pc, #176]	; (800620c <HAL_DMA_IRQHandler+0x3f8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d04a      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2a      	ldr	r2, [pc, #168]	; (8006210 <HAL_DMA_IRQHandler+0x3fc>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d045      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a29      	ldr	r2, [pc, #164]	; (8006214 <HAL_DMA_IRQHandler+0x400>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d040      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a27      	ldr	r2, [pc, #156]	; (8006218 <HAL_DMA_IRQHandler+0x404>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d03b      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a26      	ldr	r2, [pc, #152]	; (800621c <HAL_DMA_IRQHandler+0x408>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d036      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a24      	ldr	r2, [pc, #144]	; (8006220 <HAL_DMA_IRQHandler+0x40c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d031      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a23      	ldr	r2, [pc, #140]	; (8006224 <HAL_DMA_IRQHandler+0x410>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d02c      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a21      	ldr	r2, [pc, #132]	; (8006228 <HAL_DMA_IRQHandler+0x414>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d027      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a20      	ldr	r2, [pc, #128]	; (800622c <HAL_DMA_IRQHandler+0x418>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d022      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1e      	ldr	r2, [pc, #120]	; (8006230 <HAL_DMA_IRQHandler+0x41c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01d      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1d      	ldr	r2, [pc, #116]	; (8006234 <HAL_DMA_IRQHandler+0x420>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d018      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1b      	ldr	r2, [pc, #108]	; (8006238 <HAL_DMA_IRQHandler+0x424>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d013      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1a      	ldr	r2, [pc, #104]	; (800623c <HAL_DMA_IRQHandler+0x428>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00e      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a18      	ldr	r2, [pc, #96]	; (8006240 <HAL_DMA_IRQHandler+0x42c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d009      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a17      	ldr	r2, [pc, #92]	; (8006244 <HAL_DMA_IRQHandler+0x430>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_DMA_IRQHandler+0x3e2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a15      	ldr	r2, [pc, #84]	; (8006248 <HAL_DMA_IRQHandler+0x434>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d12a      	bne.n	800624c <HAL_DMA_IRQHandler+0x438>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0302 	and.w	r3, r3, #2
 8006200:	2b00      	cmp	r3, #0
 8006202:	bf14      	ite	ne
 8006204:	2301      	movne	r3, #1
 8006206:	2300      	moveq	r3, #0
 8006208:	b2db      	uxtb	r3, r3
 800620a:	e023      	b.n	8006254 <HAL_DMA_IRQHandler+0x440>
 800620c:	40020010 	.word	0x40020010
 8006210:	40020028 	.word	0x40020028
 8006214:	40020040 	.word	0x40020040
 8006218:	40020058 	.word	0x40020058
 800621c:	40020070 	.word	0x40020070
 8006220:	40020088 	.word	0x40020088
 8006224:	400200a0 	.word	0x400200a0
 8006228:	400200b8 	.word	0x400200b8
 800622c:	40020410 	.word	0x40020410
 8006230:	40020428 	.word	0x40020428
 8006234:	40020440 	.word	0x40020440
 8006238:	40020458 	.word	0x40020458
 800623c:	40020470 	.word	0x40020470
 8006240:	40020488 	.word	0x40020488
 8006244:	400204a0 	.word	0x400204a0
 8006248:	400204b8 	.word	0x400204b8
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2300      	movs	r3, #0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00d      	beq.n	8006274 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625c:	f003 031f 	and.w	r3, r3, #31
 8006260:	2204      	movs	r2, #4
 8006262:	409a      	lsls	r2, r3
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626c:	f043 0204 	orr.w	r2, r3, #4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006278:	f003 031f 	and.w	r3, r3, #31
 800627c:	2210      	movs	r2, #16
 800627e:	409a      	lsls	r2, r3
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	4013      	ands	r3, r2
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 80a6 	beq.w	80063d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a85      	ldr	r2, [pc, #532]	; (80064a4 <HAL_DMA_IRQHandler+0x690>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d04a      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a83      	ldr	r2, [pc, #524]	; (80064a8 <HAL_DMA_IRQHandler+0x694>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d045      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a82      	ldr	r2, [pc, #520]	; (80064ac <HAL_DMA_IRQHandler+0x698>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d040      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a80      	ldr	r2, [pc, #512]	; (80064b0 <HAL_DMA_IRQHandler+0x69c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d03b      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a7f      	ldr	r2, [pc, #508]	; (80064b4 <HAL_DMA_IRQHandler+0x6a0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d036      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a7d      	ldr	r2, [pc, #500]	; (80064b8 <HAL_DMA_IRQHandler+0x6a4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d031      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a7c      	ldr	r2, [pc, #496]	; (80064bc <HAL_DMA_IRQHandler+0x6a8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d02c      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a7a      	ldr	r2, [pc, #488]	; (80064c0 <HAL_DMA_IRQHandler+0x6ac>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d027      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a79      	ldr	r2, [pc, #484]	; (80064c4 <HAL_DMA_IRQHandler+0x6b0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d022      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a77      	ldr	r2, [pc, #476]	; (80064c8 <HAL_DMA_IRQHandler+0x6b4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d01d      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a76      	ldr	r2, [pc, #472]	; (80064cc <HAL_DMA_IRQHandler+0x6b8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d018      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a74      	ldr	r2, [pc, #464]	; (80064d0 <HAL_DMA_IRQHandler+0x6bc>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d013      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a73      	ldr	r2, [pc, #460]	; (80064d4 <HAL_DMA_IRQHandler+0x6c0>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00e      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a71      	ldr	r2, [pc, #452]	; (80064d8 <HAL_DMA_IRQHandler+0x6c4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d009      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a70      	ldr	r2, [pc, #448]	; (80064dc <HAL_DMA_IRQHandler+0x6c8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d004      	beq.n	800632a <HAL_DMA_IRQHandler+0x516>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a6e      	ldr	r2, [pc, #440]	; (80064e0 <HAL_DMA_IRQHandler+0x6cc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d10a      	bne.n	8006340 <HAL_DMA_IRQHandler+0x52c>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	bf14      	ite	ne
 8006338:	2301      	movne	r3, #1
 800633a:	2300      	moveq	r3, #0
 800633c:	b2db      	uxtb	r3, r3
 800633e:	e009      	b.n	8006354 <HAL_DMA_IRQHandler+0x540>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0304 	and.w	r3, r3, #4
 800634a:	2b00      	cmp	r3, #0
 800634c:	bf14      	ite	ne
 800634e:	2301      	movne	r3, #1
 8006350:	2300      	moveq	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d03e      	beq.n	80063d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800635c:	f003 031f 	and.w	r3, r3, #31
 8006360:	2210      	movs	r2, #16
 8006362:	409a      	lsls	r2, r3
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d018      	beq.n	80063a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d108      	bne.n	8006396 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d024      	beq.n	80063d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
 8006394:	e01f      	b.n	80063d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639a:	2b00      	cmp	r3, #0
 800639c:	d01b      	beq.n	80063d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
 80063a6:	e016      	b.n	80063d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d107      	bne.n	80063c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0208 	bic.w	r2, r2, #8
 80063c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2220      	movs	r2, #32
 80063e0:	409a      	lsls	r2, r3
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	4013      	ands	r3, r2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8110 	beq.w	800660c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a2c      	ldr	r2, [pc, #176]	; (80064a4 <HAL_DMA_IRQHandler+0x690>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d04a      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2b      	ldr	r2, [pc, #172]	; (80064a8 <HAL_DMA_IRQHandler+0x694>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d045      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a29      	ldr	r2, [pc, #164]	; (80064ac <HAL_DMA_IRQHandler+0x698>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d040      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a28      	ldr	r2, [pc, #160]	; (80064b0 <HAL_DMA_IRQHandler+0x69c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d03b      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a26      	ldr	r2, [pc, #152]	; (80064b4 <HAL_DMA_IRQHandler+0x6a0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d036      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a25      	ldr	r2, [pc, #148]	; (80064b8 <HAL_DMA_IRQHandler+0x6a4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d031      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a23      	ldr	r2, [pc, #140]	; (80064bc <HAL_DMA_IRQHandler+0x6a8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d02c      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a22      	ldr	r2, [pc, #136]	; (80064c0 <HAL_DMA_IRQHandler+0x6ac>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d027      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a20      	ldr	r2, [pc, #128]	; (80064c4 <HAL_DMA_IRQHandler+0x6b0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d022      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1f      	ldr	r2, [pc, #124]	; (80064c8 <HAL_DMA_IRQHandler+0x6b4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d01d      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a1d      	ldr	r2, [pc, #116]	; (80064cc <HAL_DMA_IRQHandler+0x6b8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d018      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1c      	ldr	r2, [pc, #112]	; (80064d0 <HAL_DMA_IRQHandler+0x6bc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <HAL_DMA_IRQHandler+0x6c0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00e      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a19      	ldr	r2, [pc, #100]	; (80064d8 <HAL_DMA_IRQHandler+0x6c4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d009      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a17      	ldr	r2, [pc, #92]	; (80064dc <HAL_DMA_IRQHandler+0x6c8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_DMA_IRQHandler+0x678>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a16      	ldr	r2, [pc, #88]	; (80064e0 <HAL_DMA_IRQHandler+0x6cc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d12b      	bne.n	80064e4 <HAL_DMA_IRQHandler+0x6d0>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0310 	and.w	r3, r3, #16
 8006496:	2b00      	cmp	r3, #0
 8006498:	bf14      	ite	ne
 800649a:	2301      	movne	r3, #1
 800649c:	2300      	moveq	r3, #0
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	e02a      	b.n	80064f8 <HAL_DMA_IRQHandler+0x6e4>
 80064a2:	bf00      	nop
 80064a4:	40020010 	.word	0x40020010
 80064a8:	40020028 	.word	0x40020028
 80064ac:	40020040 	.word	0x40020040
 80064b0:	40020058 	.word	0x40020058
 80064b4:	40020070 	.word	0x40020070
 80064b8:	40020088 	.word	0x40020088
 80064bc:	400200a0 	.word	0x400200a0
 80064c0:	400200b8 	.word	0x400200b8
 80064c4:	40020410 	.word	0x40020410
 80064c8:	40020428 	.word	0x40020428
 80064cc:	40020440 	.word	0x40020440
 80064d0:	40020458 	.word	0x40020458
 80064d4:	40020470 	.word	0x40020470
 80064d8:	40020488 	.word	0x40020488
 80064dc:	400204a0 	.word	0x400204a0
 80064e0:	400204b8 	.word	0x400204b8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bf14      	ite	ne
 80064f2:	2301      	movne	r3, #1
 80064f4:	2300      	moveq	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 8087 	beq.w	800660c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2220      	movs	r2, #32
 8006508:	409a      	lsls	r2, r3
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b04      	cmp	r3, #4
 8006518:	d139      	bne.n	800658e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0216 	bic.w	r2, r2, #22
 8006528:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695a      	ldr	r2, [r3, #20]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006538:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d103      	bne.n	800654a <HAL_DMA_IRQHandler+0x736>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006546:	2b00      	cmp	r3, #0
 8006548:	d007      	beq.n	800655a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0208 	bic.w	r2, r2, #8
 8006558:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655e:	f003 031f 	and.w	r3, r3, #31
 8006562:	223f      	movs	r2, #63	; 0x3f
 8006564:	409a      	lsls	r2, r3
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 834a 	beq.w	8006c18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	4798      	blx	r3
          }
          return;
 800658c:	e344      	b.n	8006c18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d018      	beq.n	80065ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d108      	bne.n	80065bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d02c      	beq.n	800660c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
 80065ba:	e027      	b.n	800660c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d023      	beq.n	800660c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	4798      	blx	r3
 80065cc:	e01e      	b.n	800660c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10f      	bne.n	80065fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0210 	bic.w	r2, r2, #16
 80065ea:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8306 	beq.w	8006c22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 8088 	beq.w	8006734 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2204      	movs	r2, #4
 8006628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a7a      	ldr	r2, [pc, #488]	; (800681c <HAL_DMA_IRQHandler+0xa08>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d04a      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a79      	ldr	r2, [pc, #484]	; (8006820 <HAL_DMA_IRQHandler+0xa0c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d045      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a77      	ldr	r2, [pc, #476]	; (8006824 <HAL_DMA_IRQHandler+0xa10>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d040      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a76      	ldr	r2, [pc, #472]	; (8006828 <HAL_DMA_IRQHandler+0xa14>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d03b      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a74      	ldr	r2, [pc, #464]	; (800682c <HAL_DMA_IRQHandler+0xa18>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d036      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a73      	ldr	r2, [pc, #460]	; (8006830 <HAL_DMA_IRQHandler+0xa1c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d031      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a71      	ldr	r2, [pc, #452]	; (8006834 <HAL_DMA_IRQHandler+0xa20>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d02c      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a70      	ldr	r2, [pc, #448]	; (8006838 <HAL_DMA_IRQHandler+0xa24>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d027      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a6e      	ldr	r2, [pc, #440]	; (800683c <HAL_DMA_IRQHandler+0xa28>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d022      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a6d      	ldr	r2, [pc, #436]	; (8006840 <HAL_DMA_IRQHandler+0xa2c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d01d      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a6b      	ldr	r2, [pc, #428]	; (8006844 <HAL_DMA_IRQHandler+0xa30>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d018      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a6a      	ldr	r2, [pc, #424]	; (8006848 <HAL_DMA_IRQHandler+0xa34>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a68      	ldr	r2, [pc, #416]	; (800684c <HAL_DMA_IRQHandler+0xa38>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00e      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a67      	ldr	r2, [pc, #412]	; (8006850 <HAL_DMA_IRQHandler+0xa3c>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d009      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a65      	ldr	r2, [pc, #404]	; (8006854 <HAL_DMA_IRQHandler+0xa40>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_DMA_IRQHandler+0x8b8>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a64      	ldr	r2, [pc, #400]	; (8006858 <HAL_DMA_IRQHandler+0xa44>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d108      	bne.n	80066de <HAL_DMA_IRQHandler+0x8ca>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0201 	bic.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	e007      	b.n	80066ee <HAL_DMA_IRQHandler+0x8da>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0201 	bic.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3301      	adds	r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d307      	bcc.n	800670a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1f2      	bne.n	80066ee <HAL_DMA_IRQHandler+0x8da>
 8006708:	e000      	b.n	800670c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800670a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d004      	beq.n	800672c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2203      	movs	r2, #3
 8006726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800672a:	e003      	b.n	8006734 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 8272 	beq.w	8006c22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	4798      	blx	r3
 8006746:	e26c      	b.n	8006c22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a43      	ldr	r2, [pc, #268]	; (800685c <HAL_DMA_IRQHandler+0xa48>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d022      	beq.n	8006798 <HAL_DMA_IRQHandler+0x984>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a42      	ldr	r2, [pc, #264]	; (8006860 <HAL_DMA_IRQHandler+0xa4c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d01d      	beq.n	8006798 <HAL_DMA_IRQHandler+0x984>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a40      	ldr	r2, [pc, #256]	; (8006864 <HAL_DMA_IRQHandler+0xa50>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d018      	beq.n	8006798 <HAL_DMA_IRQHandler+0x984>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a3f      	ldr	r2, [pc, #252]	; (8006868 <HAL_DMA_IRQHandler+0xa54>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d013      	beq.n	8006798 <HAL_DMA_IRQHandler+0x984>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a3d      	ldr	r2, [pc, #244]	; (800686c <HAL_DMA_IRQHandler+0xa58>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00e      	beq.n	8006798 <HAL_DMA_IRQHandler+0x984>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a3c      	ldr	r2, [pc, #240]	; (8006870 <HAL_DMA_IRQHandler+0xa5c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d009      	beq.n	8006798 <HAL_DMA_IRQHandler+0x984>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a3a      	ldr	r2, [pc, #232]	; (8006874 <HAL_DMA_IRQHandler+0xa60>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d004      	beq.n	8006798 <HAL_DMA_IRQHandler+0x984>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a39      	ldr	r2, [pc, #228]	; (8006878 <HAL_DMA_IRQHandler+0xa64>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d101      	bne.n	800679c <HAL_DMA_IRQHandler+0x988>
 8006798:	2301      	movs	r3, #1
 800679a:	e000      	b.n	800679e <HAL_DMA_IRQHandler+0x98a>
 800679c:	2300      	movs	r3, #0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 823f 	beq.w	8006c22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b0:	f003 031f 	and.w	r3, r3, #31
 80067b4:	2204      	movs	r2, #4
 80067b6:	409a      	lsls	r2, r3
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	4013      	ands	r3, r2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 80cd 	beq.w	800695c <HAL_DMA_IRQHandler+0xb48>
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f003 0304 	and.w	r3, r3, #4
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80c7 	beq.w	800695c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	2204      	movs	r2, #4
 80067d8:	409a      	lsls	r2, r3
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d049      	beq.n	800687c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d109      	bne.n	8006806 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 8210 	beq.w	8006c1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006804:	e20a      	b.n	8006c1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 8206 	beq.w	8006c1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006818:	e200      	b.n	8006c1c <HAL_DMA_IRQHandler+0xe08>
 800681a:	bf00      	nop
 800681c:	40020010 	.word	0x40020010
 8006820:	40020028 	.word	0x40020028
 8006824:	40020040 	.word	0x40020040
 8006828:	40020058 	.word	0x40020058
 800682c:	40020070 	.word	0x40020070
 8006830:	40020088 	.word	0x40020088
 8006834:	400200a0 	.word	0x400200a0
 8006838:	400200b8 	.word	0x400200b8
 800683c:	40020410 	.word	0x40020410
 8006840:	40020428 	.word	0x40020428
 8006844:	40020440 	.word	0x40020440
 8006848:	40020458 	.word	0x40020458
 800684c:	40020470 	.word	0x40020470
 8006850:	40020488 	.word	0x40020488
 8006854:	400204a0 	.word	0x400204a0
 8006858:	400204b8 	.word	0x400204b8
 800685c:	58025408 	.word	0x58025408
 8006860:	5802541c 	.word	0x5802541c
 8006864:	58025430 	.word	0x58025430
 8006868:	58025444 	.word	0x58025444
 800686c:	58025458 	.word	0x58025458
 8006870:	5802546c 	.word	0x5802546c
 8006874:	58025480 	.word	0x58025480
 8006878:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f003 0320 	and.w	r3, r3, #32
 8006882:	2b00      	cmp	r3, #0
 8006884:	d160      	bne.n	8006948 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a8c      	ldr	r2, [pc, #560]	; (8006abc <HAL_DMA_IRQHandler+0xca8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d04a      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a8a      	ldr	r2, [pc, #552]	; (8006ac0 <HAL_DMA_IRQHandler+0xcac>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d045      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a89      	ldr	r2, [pc, #548]	; (8006ac4 <HAL_DMA_IRQHandler+0xcb0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d040      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a87      	ldr	r2, [pc, #540]	; (8006ac8 <HAL_DMA_IRQHandler+0xcb4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d03b      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a86      	ldr	r2, [pc, #536]	; (8006acc <HAL_DMA_IRQHandler+0xcb8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d036      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a84      	ldr	r2, [pc, #528]	; (8006ad0 <HAL_DMA_IRQHandler+0xcbc>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d031      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a83      	ldr	r2, [pc, #524]	; (8006ad4 <HAL_DMA_IRQHandler+0xcc0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d02c      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a81      	ldr	r2, [pc, #516]	; (8006ad8 <HAL_DMA_IRQHandler+0xcc4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d027      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a80      	ldr	r2, [pc, #512]	; (8006adc <HAL_DMA_IRQHandler+0xcc8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d022      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a7e      	ldr	r2, [pc, #504]	; (8006ae0 <HAL_DMA_IRQHandler+0xccc>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d01d      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a7d      	ldr	r2, [pc, #500]	; (8006ae4 <HAL_DMA_IRQHandler+0xcd0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d018      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a7b      	ldr	r2, [pc, #492]	; (8006ae8 <HAL_DMA_IRQHandler+0xcd4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d013      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a7a      	ldr	r2, [pc, #488]	; (8006aec <HAL_DMA_IRQHandler+0xcd8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d00e      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a78      	ldr	r2, [pc, #480]	; (8006af0 <HAL_DMA_IRQHandler+0xcdc>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d009      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a77      	ldr	r2, [pc, #476]	; (8006af4 <HAL_DMA_IRQHandler+0xce0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d004      	beq.n	8006926 <HAL_DMA_IRQHandler+0xb12>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a75      	ldr	r2, [pc, #468]	; (8006af8 <HAL_DMA_IRQHandler+0xce4>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d108      	bne.n	8006938 <HAL_DMA_IRQHandler+0xb24>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0208 	bic.w	r2, r2, #8
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	e007      	b.n	8006948 <HAL_DMA_IRQHandler+0xb34>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0204 	bic.w	r2, r2, #4
 8006946:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8165 	beq.w	8006c1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800695a:	e15f      	b.n	8006c1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006960:	f003 031f 	and.w	r3, r3, #31
 8006964:	2202      	movs	r2, #2
 8006966:	409a      	lsls	r2, r3
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 80c5 	beq.w	8006afc <HAL_DMA_IRQHandler+0xce8>
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 80bf 	beq.w	8006afc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006982:	f003 031f 	and.w	r3, r3, #31
 8006986:	2202      	movs	r2, #2
 8006988:	409a      	lsls	r2, r3
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d018      	beq.n	80069ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 813a 	beq.w	8006c20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069b4:	e134      	b.n	8006c20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8130 	beq.w	8006c20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069c8:	e12a      	b.n	8006c20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d168      	bne.n	8006aa6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a38      	ldr	r2, [pc, #224]	; (8006abc <HAL_DMA_IRQHandler+0xca8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d04a      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a37      	ldr	r2, [pc, #220]	; (8006ac0 <HAL_DMA_IRQHandler+0xcac>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d045      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a35      	ldr	r2, [pc, #212]	; (8006ac4 <HAL_DMA_IRQHandler+0xcb0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d040      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a34      	ldr	r2, [pc, #208]	; (8006ac8 <HAL_DMA_IRQHandler+0xcb4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d03b      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a32      	ldr	r2, [pc, #200]	; (8006acc <HAL_DMA_IRQHandler+0xcb8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d036      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a31      	ldr	r2, [pc, #196]	; (8006ad0 <HAL_DMA_IRQHandler+0xcbc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d031      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a2f      	ldr	r2, [pc, #188]	; (8006ad4 <HAL_DMA_IRQHandler+0xcc0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d02c      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a2e      	ldr	r2, [pc, #184]	; (8006ad8 <HAL_DMA_IRQHandler+0xcc4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d027      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a2c      	ldr	r2, [pc, #176]	; (8006adc <HAL_DMA_IRQHandler+0xcc8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d022      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a2b      	ldr	r2, [pc, #172]	; (8006ae0 <HAL_DMA_IRQHandler+0xccc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d01d      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a29      	ldr	r2, [pc, #164]	; (8006ae4 <HAL_DMA_IRQHandler+0xcd0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d018      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a28      	ldr	r2, [pc, #160]	; (8006ae8 <HAL_DMA_IRQHandler+0xcd4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a26      	ldr	r2, [pc, #152]	; (8006aec <HAL_DMA_IRQHandler+0xcd8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00e      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a25      	ldr	r2, [pc, #148]	; (8006af0 <HAL_DMA_IRQHandler+0xcdc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d009      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a23      	ldr	r2, [pc, #140]	; (8006af4 <HAL_DMA_IRQHandler+0xce0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_DMA_IRQHandler+0xc60>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a22      	ldr	r2, [pc, #136]	; (8006af8 <HAL_DMA_IRQHandler+0xce4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d108      	bne.n	8006a86 <HAL_DMA_IRQHandler+0xc72>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0214 	bic.w	r2, r2, #20
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	e007      	b.n	8006a96 <HAL_DMA_IRQHandler+0xc82>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 020a 	bic.w	r2, r2, #10
 8006a94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 80b8 	beq.w	8006c20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ab8:	e0b2      	b.n	8006c20 <HAL_DMA_IRQHandler+0xe0c>
 8006aba:	bf00      	nop
 8006abc:	40020010 	.word	0x40020010
 8006ac0:	40020028 	.word	0x40020028
 8006ac4:	40020040 	.word	0x40020040
 8006ac8:	40020058 	.word	0x40020058
 8006acc:	40020070 	.word	0x40020070
 8006ad0:	40020088 	.word	0x40020088
 8006ad4:	400200a0 	.word	0x400200a0
 8006ad8:	400200b8 	.word	0x400200b8
 8006adc:	40020410 	.word	0x40020410
 8006ae0:	40020428 	.word	0x40020428
 8006ae4:	40020440 	.word	0x40020440
 8006ae8:	40020458 	.word	0x40020458
 8006aec:	40020470 	.word	0x40020470
 8006af0:	40020488 	.word	0x40020488
 8006af4:	400204a0 	.word	0x400204a0
 8006af8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b00:	f003 031f 	and.w	r3, r3, #31
 8006b04:	2208      	movs	r2, #8
 8006b06:	409a      	lsls	r2, r3
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8088 	beq.w	8006c22 <HAL_DMA_IRQHandler+0xe0e>
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8082 	beq.w	8006c22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a41      	ldr	r2, [pc, #260]	; (8006c28 <HAL_DMA_IRQHandler+0xe14>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d04a      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a3f      	ldr	r2, [pc, #252]	; (8006c2c <HAL_DMA_IRQHandler+0xe18>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d045      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a3e      	ldr	r2, [pc, #248]	; (8006c30 <HAL_DMA_IRQHandler+0xe1c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d040      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a3c      	ldr	r2, [pc, #240]	; (8006c34 <HAL_DMA_IRQHandler+0xe20>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d03b      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a3b      	ldr	r2, [pc, #236]	; (8006c38 <HAL_DMA_IRQHandler+0xe24>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d036      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a39      	ldr	r2, [pc, #228]	; (8006c3c <HAL_DMA_IRQHandler+0xe28>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d031      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a38      	ldr	r2, [pc, #224]	; (8006c40 <HAL_DMA_IRQHandler+0xe2c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d02c      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a36      	ldr	r2, [pc, #216]	; (8006c44 <HAL_DMA_IRQHandler+0xe30>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d027      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a35      	ldr	r2, [pc, #212]	; (8006c48 <HAL_DMA_IRQHandler+0xe34>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d022      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a33      	ldr	r2, [pc, #204]	; (8006c4c <HAL_DMA_IRQHandler+0xe38>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01d      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a32      	ldr	r2, [pc, #200]	; (8006c50 <HAL_DMA_IRQHandler+0xe3c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d018      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a30      	ldr	r2, [pc, #192]	; (8006c54 <HAL_DMA_IRQHandler+0xe40>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a2f      	ldr	r2, [pc, #188]	; (8006c58 <HAL_DMA_IRQHandler+0xe44>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a2d      	ldr	r2, [pc, #180]	; (8006c5c <HAL_DMA_IRQHandler+0xe48>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2c      	ldr	r2, [pc, #176]	; (8006c60 <HAL_DMA_IRQHandler+0xe4c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xdaa>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2a      	ldr	r2, [pc, #168]	; (8006c64 <HAL_DMA_IRQHandler+0xe50>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d108      	bne.n	8006bd0 <HAL_DMA_IRQHandler+0xdbc>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 021c 	bic.w	r2, r2, #28
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e007      	b.n	8006be0 <HAL_DMA_IRQHandler+0xdcc>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 020e 	bic.w	r2, r2, #14
 8006bde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be4:	f003 031f 	and.w	r3, r3, #31
 8006be8:	2201      	movs	r2, #1
 8006bea:	409a      	lsls	r2, r3
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
 8006c16:	e004      	b.n	8006c22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006c18:	bf00      	nop
 8006c1a:	e002      	b.n	8006c22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c1c:	bf00      	nop
 8006c1e:	e000      	b.n	8006c22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c22:	3728      	adds	r7, #40	; 0x28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40020010 	.word	0x40020010
 8006c2c:	40020028 	.word	0x40020028
 8006c30:	40020040 	.word	0x40020040
 8006c34:	40020058 	.word	0x40020058
 8006c38:	40020070 	.word	0x40020070
 8006c3c:	40020088 	.word	0x40020088
 8006c40:	400200a0 	.word	0x400200a0
 8006c44:	400200b8 	.word	0x400200b8
 8006c48:	40020410 	.word	0x40020410
 8006c4c:	40020428 	.word	0x40020428
 8006c50:	40020440 	.word	0x40020440
 8006c54:	40020458 	.word	0x40020458
 8006c58:	40020470 	.word	0x40020470
 8006c5c:	40020488 	.word	0x40020488
 8006c60:	400204a0 	.word	0x400204a0
 8006c64:	400204b8 	.word	0x400204b8

08006c68 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c76:	b2db      	uxtb	r3, r3
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a84      	ldr	r2, [pc, #528]	; (8006ecc <DMA_SetConfig+0x230>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d072      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a82      	ldr	r2, [pc, #520]	; (8006ed0 <DMA_SetConfig+0x234>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d06d      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a81      	ldr	r2, [pc, #516]	; (8006ed4 <DMA_SetConfig+0x238>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d068      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a7f      	ldr	r2, [pc, #508]	; (8006ed8 <DMA_SetConfig+0x23c>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d063      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a7e      	ldr	r2, [pc, #504]	; (8006edc <DMA_SetConfig+0x240>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d05e      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a7c      	ldr	r2, [pc, #496]	; (8006ee0 <DMA_SetConfig+0x244>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d059      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a7b      	ldr	r2, [pc, #492]	; (8006ee4 <DMA_SetConfig+0x248>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d054      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a79      	ldr	r2, [pc, #484]	; (8006ee8 <DMA_SetConfig+0x24c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d04f      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a78      	ldr	r2, [pc, #480]	; (8006eec <DMA_SetConfig+0x250>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d04a      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a76      	ldr	r2, [pc, #472]	; (8006ef0 <DMA_SetConfig+0x254>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d045      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a75      	ldr	r2, [pc, #468]	; (8006ef4 <DMA_SetConfig+0x258>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d040      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a73      	ldr	r2, [pc, #460]	; (8006ef8 <DMA_SetConfig+0x25c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d03b      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a72      	ldr	r2, [pc, #456]	; (8006efc <DMA_SetConfig+0x260>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d036      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a70      	ldr	r2, [pc, #448]	; (8006f00 <DMA_SetConfig+0x264>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d031      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a6f      	ldr	r2, [pc, #444]	; (8006f04 <DMA_SetConfig+0x268>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d02c      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a6d      	ldr	r2, [pc, #436]	; (8006f08 <DMA_SetConfig+0x26c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d027      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a6c      	ldr	r2, [pc, #432]	; (8006f0c <DMA_SetConfig+0x270>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d022      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a6a      	ldr	r2, [pc, #424]	; (8006f10 <DMA_SetConfig+0x274>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d01d      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a69      	ldr	r2, [pc, #420]	; (8006f14 <DMA_SetConfig+0x278>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d018      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a67      	ldr	r2, [pc, #412]	; (8006f18 <DMA_SetConfig+0x27c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d013      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a66      	ldr	r2, [pc, #408]	; (8006f1c <DMA_SetConfig+0x280>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00e      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a64      	ldr	r2, [pc, #400]	; (8006f20 <DMA_SetConfig+0x284>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d009      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a63      	ldr	r2, [pc, #396]	; (8006f24 <DMA_SetConfig+0x288>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d004      	beq.n	8006da6 <DMA_SetConfig+0x10a>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a61      	ldr	r2, [pc, #388]	; (8006f28 <DMA_SetConfig+0x28c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d101      	bne.n	8006daa <DMA_SetConfig+0x10e>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e000      	b.n	8006dac <DMA_SetConfig+0x110>
 8006daa:	2300      	movs	r3, #0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00d      	beq.n	8006dcc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006db8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006dca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a3e      	ldr	r2, [pc, #248]	; (8006ecc <DMA_SetConfig+0x230>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d04a      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a3d      	ldr	r2, [pc, #244]	; (8006ed0 <DMA_SetConfig+0x234>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d045      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a3b      	ldr	r2, [pc, #236]	; (8006ed4 <DMA_SetConfig+0x238>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d040      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a3a      	ldr	r2, [pc, #232]	; (8006ed8 <DMA_SetConfig+0x23c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d03b      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a38      	ldr	r2, [pc, #224]	; (8006edc <DMA_SetConfig+0x240>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d036      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a37      	ldr	r2, [pc, #220]	; (8006ee0 <DMA_SetConfig+0x244>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d031      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a35      	ldr	r2, [pc, #212]	; (8006ee4 <DMA_SetConfig+0x248>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d02c      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a34      	ldr	r2, [pc, #208]	; (8006ee8 <DMA_SetConfig+0x24c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d027      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a32      	ldr	r2, [pc, #200]	; (8006eec <DMA_SetConfig+0x250>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d022      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a31      	ldr	r2, [pc, #196]	; (8006ef0 <DMA_SetConfig+0x254>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d01d      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a2f      	ldr	r2, [pc, #188]	; (8006ef4 <DMA_SetConfig+0x258>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d018      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a2e      	ldr	r2, [pc, #184]	; (8006ef8 <DMA_SetConfig+0x25c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d013      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a2c      	ldr	r2, [pc, #176]	; (8006efc <DMA_SetConfig+0x260>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00e      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a2b      	ldr	r2, [pc, #172]	; (8006f00 <DMA_SetConfig+0x264>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d009      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a29      	ldr	r2, [pc, #164]	; (8006f04 <DMA_SetConfig+0x268>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <DMA_SetConfig+0x1d0>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a28      	ldr	r2, [pc, #160]	; (8006f08 <DMA_SetConfig+0x26c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d101      	bne.n	8006e70 <DMA_SetConfig+0x1d4>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <DMA_SetConfig+0x1d6>
 8006e70:	2300      	movs	r3, #0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d05a      	beq.n	8006f2c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7a:	f003 031f 	and.w	r3, r3, #31
 8006e7e:	223f      	movs	r2, #63	; 0x3f
 8006e80:	409a      	lsls	r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e94:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	2b40      	cmp	r3, #64	; 0x40
 8006ea4:	d108      	bne.n	8006eb8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006eb6:	e087      	b.n	8006fc8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	60da      	str	r2, [r3, #12]
}
 8006ec8:	e07e      	b.n	8006fc8 <DMA_SetConfig+0x32c>
 8006eca:	bf00      	nop
 8006ecc:	40020010 	.word	0x40020010
 8006ed0:	40020028 	.word	0x40020028
 8006ed4:	40020040 	.word	0x40020040
 8006ed8:	40020058 	.word	0x40020058
 8006edc:	40020070 	.word	0x40020070
 8006ee0:	40020088 	.word	0x40020088
 8006ee4:	400200a0 	.word	0x400200a0
 8006ee8:	400200b8 	.word	0x400200b8
 8006eec:	40020410 	.word	0x40020410
 8006ef0:	40020428 	.word	0x40020428
 8006ef4:	40020440 	.word	0x40020440
 8006ef8:	40020458 	.word	0x40020458
 8006efc:	40020470 	.word	0x40020470
 8006f00:	40020488 	.word	0x40020488
 8006f04:	400204a0 	.word	0x400204a0
 8006f08:	400204b8 	.word	0x400204b8
 8006f0c:	58025408 	.word	0x58025408
 8006f10:	5802541c 	.word	0x5802541c
 8006f14:	58025430 	.word	0x58025430
 8006f18:	58025444 	.word	0x58025444
 8006f1c:	58025458 	.word	0x58025458
 8006f20:	5802546c 	.word	0x5802546c
 8006f24:	58025480 	.word	0x58025480
 8006f28:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a28      	ldr	r2, [pc, #160]	; (8006fd4 <DMA_SetConfig+0x338>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d022      	beq.n	8006f7c <DMA_SetConfig+0x2e0>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a27      	ldr	r2, [pc, #156]	; (8006fd8 <DMA_SetConfig+0x33c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d01d      	beq.n	8006f7c <DMA_SetConfig+0x2e0>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a25      	ldr	r2, [pc, #148]	; (8006fdc <DMA_SetConfig+0x340>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d018      	beq.n	8006f7c <DMA_SetConfig+0x2e0>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a24      	ldr	r2, [pc, #144]	; (8006fe0 <DMA_SetConfig+0x344>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d013      	beq.n	8006f7c <DMA_SetConfig+0x2e0>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a22      	ldr	r2, [pc, #136]	; (8006fe4 <DMA_SetConfig+0x348>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00e      	beq.n	8006f7c <DMA_SetConfig+0x2e0>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a21      	ldr	r2, [pc, #132]	; (8006fe8 <DMA_SetConfig+0x34c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d009      	beq.n	8006f7c <DMA_SetConfig+0x2e0>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1f      	ldr	r2, [pc, #124]	; (8006fec <DMA_SetConfig+0x350>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d004      	beq.n	8006f7c <DMA_SetConfig+0x2e0>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1e      	ldr	r2, [pc, #120]	; (8006ff0 <DMA_SetConfig+0x354>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d101      	bne.n	8006f80 <DMA_SetConfig+0x2e4>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e000      	b.n	8006f82 <DMA_SetConfig+0x2e6>
 8006f80:	2300      	movs	r3, #0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d020      	beq.n	8006fc8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f8a:	f003 031f 	and.w	r3, r3, #31
 8006f8e:	2201      	movs	r2, #1
 8006f90:	409a      	lsls	r2, r3
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b40      	cmp	r3, #64	; 0x40
 8006fa4:	d108      	bne.n	8006fb8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	60da      	str	r2, [r3, #12]
}
 8006fb6:	e007      	b.n	8006fc8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	60da      	str	r2, [r3, #12]
}
 8006fc8:	bf00      	nop
 8006fca:	371c      	adds	r7, #28
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	58025408 	.word	0x58025408
 8006fd8:	5802541c 	.word	0x5802541c
 8006fdc:	58025430 	.word	0x58025430
 8006fe0:	58025444 	.word	0x58025444
 8006fe4:	58025458 	.word	0x58025458
 8006fe8:	5802546c 	.word	0x5802546c
 8006fec:	58025480 	.word	0x58025480
 8006ff0:	58025494 	.word	0x58025494

08006ff4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a42      	ldr	r2, [pc, #264]	; (800710c <DMA_CalcBaseAndBitshift+0x118>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d04a      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a41      	ldr	r2, [pc, #260]	; (8007110 <DMA_CalcBaseAndBitshift+0x11c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d045      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a3f      	ldr	r2, [pc, #252]	; (8007114 <DMA_CalcBaseAndBitshift+0x120>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d040      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a3e      	ldr	r2, [pc, #248]	; (8007118 <DMA_CalcBaseAndBitshift+0x124>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d03b      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a3c      	ldr	r2, [pc, #240]	; (800711c <DMA_CalcBaseAndBitshift+0x128>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d036      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a3b      	ldr	r2, [pc, #236]	; (8007120 <DMA_CalcBaseAndBitshift+0x12c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d031      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a39      	ldr	r2, [pc, #228]	; (8007124 <DMA_CalcBaseAndBitshift+0x130>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d02c      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a38      	ldr	r2, [pc, #224]	; (8007128 <DMA_CalcBaseAndBitshift+0x134>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d027      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a36      	ldr	r2, [pc, #216]	; (800712c <DMA_CalcBaseAndBitshift+0x138>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d022      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a35      	ldr	r2, [pc, #212]	; (8007130 <DMA_CalcBaseAndBitshift+0x13c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d01d      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a33      	ldr	r2, [pc, #204]	; (8007134 <DMA_CalcBaseAndBitshift+0x140>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d018      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a32      	ldr	r2, [pc, #200]	; (8007138 <DMA_CalcBaseAndBitshift+0x144>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d013      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a30      	ldr	r2, [pc, #192]	; (800713c <DMA_CalcBaseAndBitshift+0x148>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00e      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a2f      	ldr	r2, [pc, #188]	; (8007140 <DMA_CalcBaseAndBitshift+0x14c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d009      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a2d      	ldr	r2, [pc, #180]	; (8007144 <DMA_CalcBaseAndBitshift+0x150>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d004      	beq.n	800709c <DMA_CalcBaseAndBitshift+0xa8>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a2c      	ldr	r2, [pc, #176]	; (8007148 <DMA_CalcBaseAndBitshift+0x154>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d101      	bne.n	80070a0 <DMA_CalcBaseAndBitshift+0xac>
 800709c:	2301      	movs	r3, #1
 800709e:	e000      	b.n	80070a2 <DMA_CalcBaseAndBitshift+0xae>
 80070a0:	2300      	movs	r3, #0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d024      	beq.n	80070f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	3b10      	subs	r3, #16
 80070ae:	4a27      	ldr	r2, [pc, #156]	; (800714c <DMA_CalcBaseAndBitshift+0x158>)
 80070b0:	fba2 2303 	umull	r2, r3, r2, r3
 80070b4:	091b      	lsrs	r3, r3, #4
 80070b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	4a24      	ldr	r2, [pc, #144]	; (8007150 <DMA_CalcBaseAndBitshift+0x15c>)
 80070c0:	5cd3      	ldrb	r3, [r2, r3]
 80070c2:	461a      	mov	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d908      	bls.n	80070e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	4b1f      	ldr	r3, [pc, #124]	; (8007154 <DMA_CalcBaseAndBitshift+0x160>)
 80070d6:	4013      	ands	r3, r2
 80070d8:	1d1a      	adds	r2, r3, #4
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	659a      	str	r2, [r3, #88]	; 0x58
 80070de:	e00d      	b.n	80070fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	4b1b      	ldr	r3, [pc, #108]	; (8007154 <DMA_CalcBaseAndBitshift+0x160>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6593      	str	r3, [r2, #88]	; 0x58
 80070ee:	e005      	b.n	80070fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	40020010 	.word	0x40020010
 8007110:	40020028 	.word	0x40020028
 8007114:	40020040 	.word	0x40020040
 8007118:	40020058 	.word	0x40020058
 800711c:	40020070 	.word	0x40020070
 8007120:	40020088 	.word	0x40020088
 8007124:	400200a0 	.word	0x400200a0
 8007128:	400200b8 	.word	0x400200b8
 800712c:	40020410 	.word	0x40020410
 8007130:	40020428 	.word	0x40020428
 8007134:	40020440 	.word	0x40020440
 8007138:	40020458 	.word	0x40020458
 800713c:	40020470 	.word	0x40020470
 8007140:	40020488 	.word	0x40020488
 8007144:	400204a0 	.word	0x400204a0
 8007148:	400204b8 	.word	0x400204b8
 800714c:	aaaaaaab 	.word	0xaaaaaaab
 8007150:	08012fec 	.word	0x08012fec
 8007154:	fffffc00 	.word	0xfffffc00

08007158 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d120      	bne.n	80071ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007170:	2b03      	cmp	r3, #3
 8007172:	d858      	bhi.n	8007226 <DMA_CheckFifoParam+0xce>
 8007174:	a201      	add	r2, pc, #4	; (adr r2, 800717c <DMA_CheckFifoParam+0x24>)
 8007176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717a:	bf00      	nop
 800717c:	0800718d 	.word	0x0800718d
 8007180:	0800719f 	.word	0x0800719f
 8007184:	0800718d 	.word	0x0800718d
 8007188:	08007227 	.word	0x08007227
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d048      	beq.n	800722a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800719c:	e045      	b.n	800722a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071a6:	d142      	bne.n	800722e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071ac:	e03f      	b.n	800722e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b6:	d123      	bne.n	8007200 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d838      	bhi.n	8007232 <DMA_CheckFifoParam+0xda>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <DMA_CheckFifoParam+0x70>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071d9 	.word	0x080071d9
 80071cc:	080071df 	.word	0x080071df
 80071d0:	080071d9 	.word	0x080071d9
 80071d4:	080071f1 	.word	0x080071f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	73fb      	strb	r3, [r7, #15]
        break;
 80071dc:	e030      	b.n	8007240 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d025      	beq.n	8007236 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071ee:	e022      	b.n	8007236 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071f8:	d11f      	bne.n	800723a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80071fe:	e01c      	b.n	800723a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	2b02      	cmp	r3, #2
 8007206:	d902      	bls.n	800720e <DMA_CheckFifoParam+0xb6>
 8007208:	2b03      	cmp	r3, #3
 800720a:	d003      	beq.n	8007214 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800720c:	e018      	b.n	8007240 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	73fb      	strb	r3, [r7, #15]
        break;
 8007212:	e015      	b.n	8007240 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00e      	beq.n	800723e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	73fb      	strb	r3, [r7, #15]
    break;
 8007224:	e00b      	b.n	800723e <DMA_CheckFifoParam+0xe6>
        break;
 8007226:	bf00      	nop
 8007228:	e00a      	b.n	8007240 <DMA_CheckFifoParam+0xe8>
        break;
 800722a:	bf00      	nop
 800722c:	e008      	b.n	8007240 <DMA_CheckFifoParam+0xe8>
        break;
 800722e:	bf00      	nop
 8007230:	e006      	b.n	8007240 <DMA_CheckFifoParam+0xe8>
        break;
 8007232:	bf00      	nop
 8007234:	e004      	b.n	8007240 <DMA_CheckFifoParam+0xe8>
        break;
 8007236:	bf00      	nop
 8007238:	e002      	b.n	8007240 <DMA_CheckFifoParam+0xe8>
        break;
 800723a:	bf00      	nop
 800723c:	e000      	b.n	8007240 <DMA_CheckFifoParam+0xe8>
    break;
 800723e:	bf00      	nop
    }
  }

  return status;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3714      	adds	r7, #20
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop

08007250 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a38      	ldr	r2, [pc, #224]	; (8007344 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d022      	beq.n	80072ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a36      	ldr	r2, [pc, #216]	; (8007348 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01d      	beq.n	80072ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a35      	ldr	r2, [pc, #212]	; (800734c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d018      	beq.n	80072ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a33      	ldr	r2, [pc, #204]	; (8007350 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d013      	beq.n	80072ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a32      	ldr	r2, [pc, #200]	; (8007354 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00e      	beq.n	80072ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a30      	ldr	r2, [pc, #192]	; (8007358 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d009      	beq.n	80072ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a2f      	ldr	r2, [pc, #188]	; (800735c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d004      	beq.n	80072ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a2d      	ldr	r2, [pc, #180]	; (8007360 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d101      	bne.n	80072b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d01a      	beq.n	80072ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	3b08      	subs	r3, #8
 80072c0:	4a28      	ldr	r2, [pc, #160]	; (8007364 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	091b      	lsrs	r3, r3, #4
 80072c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4b26      	ldr	r3, [pc, #152]	; (8007368 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	461a      	mov	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a24      	ldr	r2, [pc, #144]	; (800736c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80072dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	2201      	movs	r2, #1
 80072e6:	409a      	lsls	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80072ec:	e024      	b.n	8007338 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	3b10      	subs	r3, #16
 80072f6:	4a1e      	ldr	r2, [pc, #120]	; (8007370 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80072f8:	fba2 2303 	umull	r2, r3, r2, r3
 80072fc:	091b      	lsrs	r3, r3, #4
 80072fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d806      	bhi.n	8007316 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4a1b      	ldr	r2, [pc, #108]	; (8007378 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d902      	bls.n	8007316 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3308      	adds	r3, #8
 8007314:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	4b18      	ldr	r3, [pc, #96]	; (800737c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800731a:	4413      	add	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	461a      	mov	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a16      	ldr	r2, [pc, #88]	; (8007380 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007328:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	2201      	movs	r2, #1
 8007332:	409a      	lsls	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007338:	bf00      	nop
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr
 8007344:	58025408 	.word	0x58025408
 8007348:	5802541c 	.word	0x5802541c
 800734c:	58025430 	.word	0x58025430
 8007350:	58025444 	.word	0x58025444
 8007354:	58025458 	.word	0x58025458
 8007358:	5802546c 	.word	0x5802546c
 800735c:	58025480 	.word	0x58025480
 8007360:	58025494 	.word	0x58025494
 8007364:	cccccccd 	.word	0xcccccccd
 8007368:	16009600 	.word	0x16009600
 800736c:	58025880 	.word	0x58025880
 8007370:	aaaaaaab 	.word	0xaaaaaaab
 8007374:	400204b8 	.word	0x400204b8
 8007378:	4002040f 	.word	0x4002040f
 800737c:	10008200 	.word	0x10008200
 8007380:	40020880 	.word	0x40020880

08007384 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d04a      	beq.n	8007430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b08      	cmp	r3, #8
 800739e:	d847      	bhi.n	8007430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a25      	ldr	r2, [pc, #148]	; (800743c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d022      	beq.n	80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a24      	ldr	r2, [pc, #144]	; (8007440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d01d      	beq.n	80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a22      	ldr	r2, [pc, #136]	; (8007444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d018      	beq.n	80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a21      	ldr	r2, [pc, #132]	; (8007448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d013      	beq.n	80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a1f      	ldr	r2, [pc, #124]	; (800744c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d00e      	beq.n	80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1e      	ldr	r2, [pc, #120]	; (8007450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d009      	beq.n	80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1c      	ldr	r2, [pc, #112]	; (8007454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d004      	beq.n	80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1b      	ldr	r2, [pc, #108]	; (8007458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d101      	bne.n	80073f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80073f0:	2301      	movs	r3, #1
 80073f2:	e000      	b.n	80073f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80073f4:	2300      	movs	r3, #0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4b17      	ldr	r3, [pc, #92]	; (800745c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	461a      	mov	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a15      	ldr	r2, [pc, #84]	; (8007460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800740c:	671a      	str	r2, [r3, #112]	; 0x70
 800740e:	e009      	b.n	8007424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4b14      	ldr	r3, [pc, #80]	; (8007464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007414:	4413      	add	r3, r2
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	461a      	mov	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a11      	ldr	r2, [pc, #68]	; (8007468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007422:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3b01      	subs	r3, #1
 8007428:	2201      	movs	r2, #1
 800742a:	409a      	lsls	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007430:	bf00      	nop
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	58025408 	.word	0x58025408
 8007440:	5802541c 	.word	0x5802541c
 8007444:	58025430 	.word	0x58025430
 8007448:	58025444 	.word	0x58025444
 800744c:	58025458 	.word	0x58025458
 8007450:	5802546c 	.word	0x5802546c
 8007454:	58025480 	.word	0x58025480
 8007458:	58025494 	.word	0x58025494
 800745c:	1600963f 	.word	0x1600963f
 8007460:	58025940 	.word	0x58025940
 8007464:	1000823f 	.word	0x1000823f
 8007468:	40020940 	.word	0x40020940

0800746c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800746c:	b480      	push	{r7}
 800746e:	b089      	sub	sp, #36	; 0x24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007476:	2300      	movs	r3, #0
 8007478:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800747a:	4b89      	ldr	r3, [pc, #548]	; (80076a0 <HAL_GPIO_Init+0x234>)
 800747c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800747e:	e194      	b.n	80077aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	2101      	movs	r1, #1
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	fa01 f303 	lsl.w	r3, r1, r3
 800748c:	4013      	ands	r3, r2
 800748e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	f000 8186 	beq.w	80077a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d00b      	beq.n	80074b8 <HAL_GPIO_Init+0x4c>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d007      	beq.n	80074b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80074ac:	2b11      	cmp	r3, #17
 80074ae:	d003      	beq.n	80074b8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	2b12      	cmp	r3, #18
 80074b6:	d130      	bne.n	800751a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	2203      	movs	r2, #3
 80074c4:	fa02 f303 	lsl.w	r3, r2, r3
 80074c8:	43db      	mvns	r3, r3
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	4013      	ands	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4313      	orrs	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074ee:	2201      	movs	r2, #1
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	43db      	mvns	r3, r3
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	4013      	ands	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	091b      	lsrs	r3, r3, #4
 8007504:	f003 0201 	and.w	r2, r3, #1
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	fa02 f303 	lsl.w	r3, r2, r3
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4313      	orrs	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69ba      	ldr	r2, [r7, #24]
 8007518:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	2203      	movs	r2, #3
 8007526:	fa02 f303 	lsl.w	r3, r2, r3
 800752a:	43db      	mvns	r3, r3
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	4013      	ands	r3, r2
 8007530:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	4313      	orrs	r3, r2
 8007542:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d003      	beq.n	800755a <HAL_GPIO_Init+0xee>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2b12      	cmp	r3, #18
 8007558:	d123      	bne.n	80075a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	08da      	lsrs	r2, r3, #3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3208      	adds	r2, #8
 8007562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	220f      	movs	r2, #15
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	43db      	mvns	r3, r3
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	4013      	ands	r3, r2
 800757c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	f003 0307 	and.w	r3, r3, #7
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4313      	orrs	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	08da      	lsrs	r2, r3, #3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3208      	adds	r2, #8
 800759c:	69b9      	ldr	r1, [r7, #24]
 800759e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	2203      	movs	r2, #3
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	43db      	mvns	r3, r3
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	4013      	ands	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f003 0203 	and.w	r2, r3, #3
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 80e0 	beq.w	80077a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075e4:	4b2f      	ldr	r3, [pc, #188]	; (80076a4 <HAL_GPIO_Init+0x238>)
 80075e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075ea:	4a2e      	ldr	r2, [pc, #184]	; (80076a4 <HAL_GPIO_Init+0x238>)
 80075ec:	f043 0302 	orr.w	r3, r3, #2
 80075f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80075f4:	4b2b      	ldr	r3, [pc, #172]	; (80076a4 <HAL_GPIO_Init+0x238>)
 80075f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075fa:	f003 0302 	and.w	r3, r3, #2
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007602:	4a29      	ldr	r2, [pc, #164]	; (80076a8 <HAL_GPIO_Init+0x23c>)
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	089b      	lsrs	r3, r3, #2
 8007608:	3302      	adds	r3, #2
 800760a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800760e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f003 0303 	and.w	r3, r3, #3
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	220f      	movs	r2, #15
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	43db      	mvns	r3, r3
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	4013      	ands	r3, r2
 8007624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a20      	ldr	r2, [pc, #128]	; (80076ac <HAL_GPIO_Init+0x240>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d052      	beq.n	80076d4 <HAL_GPIO_Init+0x268>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <HAL_GPIO_Init+0x244>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d031      	beq.n	800769a <HAL_GPIO_Init+0x22e>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a1e      	ldr	r2, [pc, #120]	; (80076b4 <HAL_GPIO_Init+0x248>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d02b      	beq.n	8007696 <HAL_GPIO_Init+0x22a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a1d      	ldr	r2, [pc, #116]	; (80076b8 <HAL_GPIO_Init+0x24c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d025      	beq.n	8007692 <HAL_GPIO_Init+0x226>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a1c      	ldr	r2, [pc, #112]	; (80076bc <HAL_GPIO_Init+0x250>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d01f      	beq.n	800768e <HAL_GPIO_Init+0x222>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <HAL_GPIO_Init+0x254>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d019      	beq.n	800768a <HAL_GPIO_Init+0x21e>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a1a      	ldr	r2, [pc, #104]	; (80076c4 <HAL_GPIO_Init+0x258>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d013      	beq.n	8007686 <HAL_GPIO_Init+0x21a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a19      	ldr	r2, [pc, #100]	; (80076c8 <HAL_GPIO_Init+0x25c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00d      	beq.n	8007682 <HAL_GPIO_Init+0x216>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a18      	ldr	r2, [pc, #96]	; (80076cc <HAL_GPIO_Init+0x260>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d007      	beq.n	800767e <HAL_GPIO_Init+0x212>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a17      	ldr	r2, [pc, #92]	; (80076d0 <HAL_GPIO_Init+0x264>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d101      	bne.n	800767a <HAL_GPIO_Init+0x20e>
 8007676:	2309      	movs	r3, #9
 8007678:	e02d      	b.n	80076d6 <HAL_GPIO_Init+0x26a>
 800767a:	230a      	movs	r3, #10
 800767c:	e02b      	b.n	80076d6 <HAL_GPIO_Init+0x26a>
 800767e:	2308      	movs	r3, #8
 8007680:	e029      	b.n	80076d6 <HAL_GPIO_Init+0x26a>
 8007682:	2307      	movs	r3, #7
 8007684:	e027      	b.n	80076d6 <HAL_GPIO_Init+0x26a>
 8007686:	2306      	movs	r3, #6
 8007688:	e025      	b.n	80076d6 <HAL_GPIO_Init+0x26a>
 800768a:	2305      	movs	r3, #5
 800768c:	e023      	b.n	80076d6 <HAL_GPIO_Init+0x26a>
 800768e:	2304      	movs	r3, #4
 8007690:	e021      	b.n	80076d6 <HAL_GPIO_Init+0x26a>
 8007692:	2303      	movs	r3, #3
 8007694:	e01f      	b.n	80076d6 <HAL_GPIO_Init+0x26a>
 8007696:	2302      	movs	r3, #2
 8007698:	e01d      	b.n	80076d6 <HAL_GPIO_Init+0x26a>
 800769a:	2301      	movs	r3, #1
 800769c:	e01b      	b.n	80076d6 <HAL_GPIO_Init+0x26a>
 800769e:	bf00      	nop
 80076a0:	58000080 	.word	0x58000080
 80076a4:	58024400 	.word	0x58024400
 80076a8:	58000400 	.word	0x58000400
 80076ac:	58020000 	.word	0x58020000
 80076b0:	58020400 	.word	0x58020400
 80076b4:	58020800 	.word	0x58020800
 80076b8:	58020c00 	.word	0x58020c00
 80076bc:	58021000 	.word	0x58021000
 80076c0:	58021400 	.word	0x58021400
 80076c4:	58021800 	.word	0x58021800
 80076c8:	58021c00 	.word	0x58021c00
 80076cc:	58022000 	.word	0x58022000
 80076d0:	58022400 	.word	0x58022400
 80076d4:	2300      	movs	r3, #0
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	f002 0203 	and.w	r2, r2, #3
 80076dc:	0092      	lsls	r2, r2, #2
 80076de:	4093      	lsls	r3, r2
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076e6:	4938      	ldr	r1, [pc, #224]	; (80077c8 <HAL_GPIO_Init+0x35c>)
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	089b      	lsrs	r3, r3, #2
 80076ec:	3302      	adds	r3, #2
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	43db      	mvns	r3, r3
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	4013      	ands	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	4313      	orrs	r3, r2
 8007716:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	43db      	mvns	r3, r3
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	4013      	ands	r3, r2
 800772c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	43db      	mvns	r3, r3
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	4013      	ands	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800776e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	43db      	mvns	r3, r3
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	4013      	ands	r3, r2
 8007786:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d003      	beq.n	800779c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800779c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	3301      	adds	r3, #1
 80077a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	fa22 f303 	lsr.w	r3, r2, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f47f ae63 	bne.w	8007480 <HAL_GPIO_Init+0x14>
  }
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	3724      	adds	r7, #36	; 0x24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	58000400 	.word	0x58000400

080077cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	460b      	mov	r3, r1
 80077d6:	807b      	strh	r3, [r7, #2]
 80077d8:	4613      	mov	r3, r2
 80077da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077dc:	787b      	ldrb	r3, [r7, #1]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077e2:	887a      	ldrh	r2, [r7, #2]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80077e8:	e003      	b.n	80077f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077ea:	887b      	ldrh	r3, [r7, #2]
 80077ec:	041a      	lsls	r2, r3, #16
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	619a      	str	r2, [r3, #24]
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
	...

08007800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e07f      	b.n	8007912 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d106      	bne.n	800782c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7fb fdbc 	bl	80033a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2224      	movs	r2, #36	; 0x24
 8007830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0201 	bic.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007850:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007860:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d107      	bne.n	800787a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007876:	609a      	str	r2, [r3, #8]
 8007878:	e006      	b.n	8007888 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689a      	ldr	r2, [r3, #8]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007886:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	2b02      	cmp	r3, #2
 800788e:	d104      	bne.n	800789a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007898:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6859      	ldr	r1, [r3, #4]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	4b1d      	ldr	r3, [pc, #116]	; (800791c <HAL_I2C_Init+0x11c>)
 80078a6:	430b      	orrs	r3, r1
 80078a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68da      	ldr	r2, [r3, #12]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	ea42 0103 	orr.w	r1, r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	021a      	lsls	r2, r3, #8
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	430a      	orrs	r2, r1
 80078d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	69d9      	ldr	r1, [r3, #28]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1a      	ldr	r2, [r3, #32]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f042 0201 	orr.w	r2, r2, #1
 80078f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2220      	movs	r2, #32
 80078fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	02008000 	.word	0x02008000

08007920 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af02      	add	r7, sp, #8
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	461a      	mov	r2, r3
 800792e:	4603      	mov	r3, r0
 8007930:	817b      	strh	r3, [r7, #10]
 8007932:	460b      	mov	r3, r1
 8007934:	813b      	strh	r3, [r7, #8]
 8007936:	4613      	mov	r3, r2
 8007938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b20      	cmp	r3, #32
 8007944:	f040 80f9 	bne.w	8007b3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <HAL_I2C_Mem_Write+0x34>
 800794e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800795a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e0ed      	b.n	8007b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <HAL_I2C_Mem_Write+0x4e>
 800796a:	2302      	movs	r3, #2
 800796c:	e0e6      	b.n	8007b3c <HAL_I2C_Mem_Write+0x21c>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007976:	f7fc fdd9 	bl	800452c <HAL_GetTick>
 800797a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2319      	movs	r3, #25
 8007982:	2201      	movs	r2, #1
 8007984:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f001 fee3 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e0d1      	b.n	8007b3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2221      	movs	r2, #33	; 0x21
 800799c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2240      	movs	r2, #64	; 0x40
 80079a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6a3a      	ldr	r2, [r7, #32]
 80079b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079c0:	88f8      	ldrh	r0, [r7, #6]
 80079c2:	893a      	ldrh	r2, [r7, #8]
 80079c4:	8979      	ldrh	r1, [r7, #10]
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	4603      	mov	r3, r0
 80079d0:	68f8      	ldr	r0, [r7, #12]
 80079d2:	f000 ff23 	bl	800881c <I2C_RequestMemoryWrite>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e0a9      	b.n	8007b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2bff      	cmp	r3, #255	; 0xff
 80079f0:	d90e      	bls.n	8007a10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	22ff      	movs	r2, #255	; 0xff
 80079f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	8979      	ldrh	r1, [r7, #10]
 8007a00:	2300      	movs	r3, #0
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f001 ffc5 	bl	8009998 <I2C_TransferConfig>
 8007a0e:	e00f      	b.n	8007a30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	8979      	ldrh	r1, [r7, #10]
 8007a22:	2300      	movs	r3, #0
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f001 ffb4 	bl	8009998 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f001 fecd 	bl	80097d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e07b      	b.n	8007b3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	781a      	ldrb	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d034      	beq.n	8007ae8 <HAL_I2C_Mem_Write+0x1c8>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d130      	bne.n	8007ae8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2180      	movs	r1, #128	; 0x80
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f001 fe5f 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e04d      	b.n	8007b3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2bff      	cmp	r3, #255	; 0xff
 8007aa8:	d90e      	bls.n	8007ac8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	22ff      	movs	r2, #255	; 0xff
 8007aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	8979      	ldrh	r1, [r7, #10]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f001 ff69 	bl	8009998 <I2C_TransferConfig>
 8007ac6:	e00f      	b.n	8007ae8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	8979      	ldrh	r1, [r7, #10]
 8007ada:	2300      	movs	r3, #0
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f001 ff58 	bl	8009998 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d19e      	bne.n	8007a30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f001 feac 	bl	8009854 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e01a      	b.n	8007b3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6859      	ldr	r1, [r3, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4b0a      	ldr	r3, [pc, #40]	; (8007b44 <HAL_I2C_Mem_Write+0x224>)
 8007b1a:	400b      	ands	r3, r1
 8007b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	e000      	b.n	8007b3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007b3a:	2302      	movs	r3, #2
  }
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	fe00e800 	.word	0xfe00e800

08007b48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b088      	sub	sp, #32
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	4608      	mov	r0, r1
 8007b52:	4611      	mov	r1, r2
 8007b54:	461a      	mov	r2, r3
 8007b56:	4603      	mov	r3, r0
 8007b58:	817b      	strh	r3, [r7, #10]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	813b      	strh	r3, [r7, #8]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	f040 80fd 	bne.w	8007d6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <HAL_I2C_Mem_Read+0x34>
 8007b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d105      	bne.n	8007b88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e0f1      	b.n	8007d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d101      	bne.n	8007b96 <HAL_I2C_Mem_Read+0x4e>
 8007b92:	2302      	movs	r3, #2
 8007b94:	e0ea      	b.n	8007d6c <HAL_I2C_Mem_Read+0x224>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b9e:	f7fc fcc5 	bl	800452c <HAL_GetTick>
 8007ba2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	2319      	movs	r3, #25
 8007baa:	2201      	movs	r2, #1
 8007bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f001 fdcf 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e0d5      	b.n	8007d6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2222      	movs	r2, #34	; 0x22
 8007bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2240      	movs	r2, #64	; 0x40
 8007bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a3a      	ldr	r2, [r7, #32]
 8007bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007be8:	88f8      	ldrh	r0, [r7, #6]
 8007bea:	893a      	ldrh	r2, [r7, #8]
 8007bec:	8979      	ldrh	r1, [r7, #10]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	9301      	str	r3, [sp, #4]
 8007bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 fe63 	bl	80088c4 <I2C_RequestMemoryRead>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e0ad      	b.n	8007d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2bff      	cmp	r3, #255	; 0xff
 8007c18:	d90e      	bls.n	8007c38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	22ff      	movs	r2, #255	; 0xff
 8007c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	8979      	ldrh	r1, [r7, #10]
 8007c28:	4b52      	ldr	r3, [pc, #328]	; (8007d74 <HAL_I2C_Mem_Read+0x22c>)
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f001 feb1 	bl	8009998 <I2C_TransferConfig>
 8007c36:	e00f      	b.n	8007c58 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	8979      	ldrh	r1, [r7, #10]
 8007c4a:	4b4a      	ldr	r3, [pc, #296]	; (8007d74 <HAL_I2C_Mem_Read+0x22c>)
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f001 fea0 	bl	8009998 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2104      	movs	r1, #4
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f001 fd76 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e07c      	b.n	8007d6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	b2d2      	uxtb	r2, r2
 8007c7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d034      	beq.n	8007d18 <HAL_I2C_Mem_Read+0x1d0>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d130      	bne.n	8007d18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2180      	movs	r1, #128	; 0x80
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f001 fd47 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e04d      	b.n	8007d6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2bff      	cmp	r3, #255	; 0xff
 8007cd8:	d90e      	bls.n	8007cf8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	22ff      	movs	r2, #255	; 0xff
 8007cde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	8979      	ldrh	r1, [r7, #10]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f001 fe51 	bl	8009998 <I2C_TransferConfig>
 8007cf6:	e00f      	b.n	8007d18 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	8979      	ldrh	r1, [r7, #10]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f001 fe40 	bl	8009998 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d19a      	bne.n	8007c58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f001 fd94 	bl	8009854 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e01a      	b.n	8007d6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6859      	ldr	r1, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <HAL_I2C_Mem_Read+0x230>)
 8007d4a:	400b      	ands	r3, r1
 8007d4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	e000      	b.n	8007d6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007d6a:	2302      	movs	r3, #2
  }
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	80002400 	.word	0x80002400
 8007d78:	fe00e800 	.word	0xfe00e800

08007d7c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b08a      	sub	sp, #40	; 0x28
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	4608      	mov	r0, r1
 8007d86:	4611      	mov	r1, r2
 8007d88:	461a      	mov	r2, r3
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	817b      	strh	r3, [r7, #10]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	813b      	strh	r3, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	f040 80d5 	bne.w	8007f4e <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HAL_I2C_Mem_Read_DMA+0x34>
 8007daa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d105      	bne.n	8007dbc <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007db6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e0c9      	b.n	8007f50 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dca:	d101      	bne.n	8007dd0 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8007dcc:	2302      	movs	r3, #2
 8007dce:	e0bf      	b.n	8007f50 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_I2C_Mem_Read_DMA+0x62>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e0b8      	b.n	8007f50 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007de6:	f7fc fba1 	bl	800452c <HAL_GetTick>
 8007dea:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2222      	movs	r2, #34	; 0x22
 8007df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2240      	movs	r2, #64	; 0x40
 8007df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	4a51      	ldr	r2, [pc, #324]	; (8007f58 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8007e12:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4a51      	ldr	r2, [pc, #324]	; (8007f5c <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8007e18:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	2bff      	cmp	r3, #255	; 0xff
 8007e22:	d906      	bls.n	8007e32 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	22ff      	movs	r2, #255	; 0xff
 8007e28:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8007e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	e007      	b.n	8007e42 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e36:	b29a      	uxth	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e40:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8007e42:	88f8      	ldrh	r0, [r7, #6]
 8007e44:	893a      	ldrh	r2, [r7, #8]
 8007e46:	8979      	ldrh	r1, [r7, #10]
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	2319      	movs	r3, #25
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	4603      	mov	r3, r0
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 fd36 	bl	80088c4 <I2C_RequestMemoryRead>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e072      	b.n	8007f50 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d020      	beq.n	8007eb4 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e76:	4a3a      	ldr	r2, [pc, #232]	; (8007f60 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8007e78:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7e:	4a39      	ldr	r2, [pc, #228]	; (8007f64 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8007e80:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e86:	2200      	movs	r2, #0
 8007e88:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8e:	2200      	movs	r2, #0
 8007e90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3324      	adds	r3, #36	; 0x24
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea4:	f7fc ffea 	bl	8004e7c <HAL_DMA_Start_IT>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8007eac:	7dfb      	ldrb	r3, [r7, #23]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d139      	bne.n	8007f26 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8007eb2:	e013      	b.n	8007edc <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e039      	b.n	8007f50 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	8979      	ldrh	r1, [r7, #10]
 8007ee4:	4b20      	ldr	r3, [pc, #128]	; (8007f68 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f001 fd54 	bl	8009998 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007efa:	1ad3      	subs	r3, r2, r3
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007f0a:	2110      	movs	r1, #16
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f001 fd71 	bl	80099f4 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f20:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	e014      	b.n	8007f50 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f3a:	f043 0210 	orr.w	r2, r3, #16
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8007f4e:	2302      	movs	r3, #2
  }
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3720      	adds	r7, #32
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	ffff0000 	.word	0xffff0000
 8007f5c:	08008277 	.word	0x08008277
 8007f60:	08009413 	.word	0x08009413
 8007f64:	080094a9 	.word	0x080094a9
 8007f68:	80002400 	.word	0x80002400

08007f6c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699b      	ldr	r3, [r3, #24]
 8007f7a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d005      	beq.n	8007f98 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	68f9      	ldr	r1, [r7, #12]
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	4798      	blx	r3
  }
}
 8007f98:	bf00      	nop
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <I2C_Slave_ISR_IT+0x24>
 8008090:	2302      	movs	r3, #2
 8008092:	e0ec      	b.n	800826e <I2C_Slave_ISR_IT+0x1fe>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	095b      	lsrs	r3, r3, #5
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d009      	beq.n	80080bc <I2C_Slave_ISR_IT+0x4c>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	095b      	lsrs	r3, r3, #5
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d003      	beq.n	80080bc <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80080b4:	6939      	ldr	r1, [r7, #16]
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f000 fe42 	bl	8008d40 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	091b      	lsrs	r3, r3, #4
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d04d      	beq.n	8008164 <I2C_Slave_ISR_IT+0xf4>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	091b      	lsrs	r3, r3, #4
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d047      	beq.n	8008164 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d128      	bne.n	8008130 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b28      	cmp	r3, #40	; 0x28
 80080e8:	d108      	bne.n	80080fc <I2C_Slave_ISR_IT+0x8c>
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080f0:	d104      	bne.n	80080fc <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80080f2:	6939      	ldr	r1, [r7, #16]
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f001 f81b 	bl	8009130 <I2C_ITListenCplt>
 80080fa:	e032      	b.n	8008162 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b29      	cmp	r3, #41	; 0x29
 8008106:	d10e      	bne.n	8008126 <I2C_Slave_ISR_IT+0xb6>
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800810e:	d00a      	beq.n	8008126 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2210      	movs	r2, #16
 8008116:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f001 f956 	bl	80093ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fce5 	bl	8008aee <I2C_ITSlaveSeqCplt>
 8008124:	e01d      	b.n	8008162 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2210      	movs	r2, #16
 800812c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800812e:	e096      	b.n	800825e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2210      	movs	r2, #16
 8008136:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813c:	f043 0204 	orr.w	r2, r3, #4
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d004      	beq.n	8008154 <I2C_Slave_ISR_IT+0xe4>
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008150:	f040 8085 	bne.w	800825e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008158:	4619      	mov	r1, r3
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f001 f83e 	bl	80091dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008160:	e07d      	b.n	800825e <I2C_Slave_ISR_IT+0x1ee>
 8008162:	e07c      	b.n	800825e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	089b      	lsrs	r3, r3, #2
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d030      	beq.n	80081d2 <I2C_Slave_ISR_IT+0x162>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	089b      	lsrs	r3, r3, #2
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	2b00      	cmp	r3, #0
 800817a:	d02a      	beq.n	80081d2 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008180:	b29b      	uxth	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d018      	beq.n	80081b8 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	b2d2      	uxtb	r2, r2
 8008192:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081bc:	b29b      	uxth	r3, r3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d14f      	bne.n	8008262 <I2C_Slave_ISR_IT+0x1f2>
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081c8:	d04b      	beq.n	8008262 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 fc8f 	bl	8008aee <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80081d0:	e047      	b.n	8008262 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	08db      	lsrs	r3, r3, #3
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	08db      	lsrs	r3, r3, #3
 80081e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d004      	beq.n	80081f4 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80081ea:	6939      	ldr	r1, [r7, #16]
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 fbbd 	bl	800896c <I2C_ITAddrCplt>
 80081f2:	e037      	b.n	8008264 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	085b      	lsrs	r3, r3, #1
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d031      	beq.n	8008264 <I2C_Slave_ISR_IT+0x1f4>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	085b      	lsrs	r3, r3, #1
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d02b      	beq.n	8008264 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008210:	b29b      	uxth	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d018      	beq.n	8008248 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	781a      	ldrb	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800823e:	3b01      	subs	r3, #1
 8008240:	b29a      	uxth	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	851a      	strh	r2, [r3, #40]	; 0x28
 8008246:	e00d      	b.n	8008264 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800824e:	d002      	beq.n	8008256 <I2C_Slave_ISR_IT+0x1e6>
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d106      	bne.n	8008264 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 fc49 	bl	8008aee <I2C_ITSlaveSeqCplt>
 800825c:	e002      	b.n	8008264 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800825e:	bf00      	nop
 8008260:	e000      	b.n	8008264 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008262:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b088      	sub	sp, #32
 800827a:	af02      	add	r7, sp, #8
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008288:	2b01      	cmp	r3, #1
 800828a:	d101      	bne.n	8008290 <I2C_Master_ISR_DMA+0x1a>
 800828c:	2302      	movs	r3, #2
 800828e:	e0e1      	b.n	8008454 <I2C_Master_ISR_DMA+0x1de>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	091b      	lsrs	r3, r3, #4
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d017      	beq.n	80082d4 <I2C_Master_ISR_DMA+0x5e>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	091b      	lsrs	r3, r3, #4
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d011      	beq.n	80082d4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2210      	movs	r2, #16
 80082b6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082bc:	f043 0204 	orr.w	r2, r3, #4
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80082c4:	2120      	movs	r1, #32
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f001 fb94 	bl	80099f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f001 f87c 	bl	80093ca <I2C_Flush_TXDR>
 80082d2:	e0ba      	b.n	800844a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	09db      	lsrs	r3, r3, #7
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d072      	beq.n	80083c6 <I2C_Master_ISR_DMA+0x150>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	099b      	lsrs	r3, r3, #6
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d06c      	beq.n	80083c6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082fa:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008300:	b29b      	uxth	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d04e      	beq.n	80083a4 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	b29b      	uxth	r3, r3
 800830e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008312:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008318:	b29b      	uxth	r3, r3
 800831a:	2bff      	cmp	r3, #255	; 0xff
 800831c:	d906      	bls.n	800832c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	22ff      	movs	r2, #255	; 0xff
 8008322:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008328:	617b      	str	r3, [r7, #20]
 800832a:	e010      	b.n	800834e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008330:	b29a      	uxth	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800833e:	d003      	beq.n	8008348 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	617b      	str	r3, [r7, #20]
 8008346:	e002      	b.n	800834e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008348:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800834c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008352:	b2da      	uxtb	r2, r3
 8008354:	8a79      	ldrh	r1, [r7, #18]
 8008356:	2300      	movs	r3, #0
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f001 fb1b 	bl	8009998 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008366:	b29a      	uxth	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800837a:	b2db      	uxtb	r3, r3
 800837c:	2b22      	cmp	r3, #34	; 0x22
 800837e:	d108      	bne.n	8008392 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800838e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008390:	e05b      	b.n	800844a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083a0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80083a2:	e052      	b.n	800844a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083b2:	d003      	beq.n	80083bc <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fb5d 	bl	8008a74 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80083ba:	e046      	b.n	800844a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80083bc:	2140      	movs	r1, #64	; 0x40
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 ff0c 	bl	80091dc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80083c4:	e041      	b.n	800844a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	099b      	lsrs	r3, r3, #6
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d029      	beq.n	8008426 <I2C_Master_ISR_DMA+0x1b0>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	099b      	lsrs	r3, r3, #6
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d023      	beq.n	8008426 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d119      	bne.n	800841c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083f6:	d027      	beq.n	8008448 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008400:	d108      	bne.n	8008414 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008410:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008412:	e019      	b.n	8008448 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 fb2d 	bl	8008a74 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800841a:	e015      	b.n	8008448 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800841c:	2140      	movs	r1, #64	; 0x40
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f000 fedc 	bl	80091dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008424:	e010      	b.n	8008448 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00b      	beq.n	800844a <I2C_Master_ISR_DMA+0x1d4>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	095b      	lsrs	r3, r3, #5
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	d005      	beq.n	800844a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800843e:	68b9      	ldr	r1, [r7, #8]
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 fbb3 	bl	8008bac <I2C_ITMasterCplt>
 8008446:	e000      	b.n	800844a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008448:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008478:	2b01      	cmp	r3, #1
 800847a:	d101      	bne.n	8008480 <I2C_Slave_ISR_DMA+0x24>
 800847c:	2302      	movs	r3, #2
 800847e:	e1c8      	b.n	8008812 <I2C_Slave_ISR_DMA+0x3b6>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	095b      	lsrs	r3, r3, #5
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d009      	beq.n	80084a8 <I2C_Slave_ISR_DMA+0x4c>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	095b      	lsrs	r3, r3, #5
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fc4c 	bl	8008d40 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	091b      	lsrs	r3, r3, #4
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 8199 	beq.w	80087e8 <I2C_Slave_ISR_DMA+0x38c>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	091b      	lsrs	r3, r3, #4
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8192 	beq.w	80087e8 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	0b9b      	lsrs	r3, r3, #14
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d106      	bne.n	80084de <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	0bdb      	lsrs	r3, r3, #15
 80084d4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 817e 	beq.w	80087da <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d07c      	beq.n	80085e0 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	0bdb      	lsrs	r3, r3, #15
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d076      	beq.n	80085e0 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a8d      	ldr	r2, [pc, #564]	; (8008730 <I2C_Slave_ISR_DMA+0x2d4>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d059      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a8b      	ldr	r2, [pc, #556]	; (8008734 <I2C_Slave_ISR_DMA+0x2d8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d053      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a89      	ldr	r2, [pc, #548]	; (8008738 <I2C_Slave_ISR_DMA+0x2dc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d04d      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a87      	ldr	r2, [pc, #540]	; (800873c <I2C_Slave_ISR_DMA+0x2e0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d047      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a85      	ldr	r2, [pc, #532]	; (8008740 <I2C_Slave_ISR_DMA+0x2e4>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d041      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a83      	ldr	r2, [pc, #524]	; (8008744 <I2C_Slave_ISR_DMA+0x2e8>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d03b      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a81      	ldr	r2, [pc, #516]	; (8008748 <I2C_Slave_ISR_DMA+0x2ec>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d035      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a7f      	ldr	r2, [pc, #508]	; (800874c <I2C_Slave_ISR_DMA+0x2f0>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d02f      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a7d      	ldr	r2, [pc, #500]	; (8008750 <I2C_Slave_ISR_DMA+0x2f4>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d029      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a7b      	ldr	r2, [pc, #492]	; (8008754 <I2C_Slave_ISR_DMA+0x2f8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d023      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a79      	ldr	r2, [pc, #484]	; (8008758 <I2C_Slave_ISR_DMA+0x2fc>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d01d      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a77      	ldr	r2, [pc, #476]	; (800875c <I2C_Slave_ISR_DMA+0x300>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d017      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a75      	ldr	r2, [pc, #468]	; (8008760 <I2C_Slave_ISR_DMA+0x304>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d011      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a73      	ldr	r2, [pc, #460]	; (8008764 <I2C_Slave_ISR_DMA+0x308>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00b      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a71      	ldr	r2, [pc, #452]	; (8008768 <I2C_Slave_ISR_DMA+0x30c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d005      	beq.n	80085b2 <I2C_Slave_ISR_DMA+0x156>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a6f      	ldr	r2, [pc, #444]	; (800876c <I2C_Slave_ISR_DMA+0x310>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d109      	bne.n	80085c6 <I2C_Slave_ISR_DMA+0x16a>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	bf0c      	ite	eq
 80085be:	2301      	moveq	r3, #1
 80085c0:	2300      	movne	r3, #0
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	e008      	b.n	80085d8 <I2C_Slave_ISR_DMA+0x17c>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bf0c      	ite	eq
 80085d2:	2301      	moveq	r3, #1
 80085d4:	2300      	movne	r3, #0
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 80085dc:	2301      	movs	r3, #1
 80085de:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d07c      	beq.n	80086e2 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	0b9b      	lsrs	r3, r3, #14
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d076      	beq.n	80086e2 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a4d      	ldr	r2, [pc, #308]	; (8008730 <I2C_Slave_ISR_DMA+0x2d4>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d059      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a4b      	ldr	r2, [pc, #300]	; (8008734 <I2C_Slave_ISR_DMA+0x2d8>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d053      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a49      	ldr	r2, [pc, #292]	; (8008738 <I2C_Slave_ISR_DMA+0x2dc>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d04d      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a47      	ldr	r2, [pc, #284]	; (800873c <I2C_Slave_ISR_DMA+0x2e0>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d047      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a45      	ldr	r2, [pc, #276]	; (8008740 <I2C_Slave_ISR_DMA+0x2e4>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d041      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a43      	ldr	r2, [pc, #268]	; (8008744 <I2C_Slave_ISR_DMA+0x2e8>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d03b      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a41      	ldr	r2, [pc, #260]	; (8008748 <I2C_Slave_ISR_DMA+0x2ec>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d035      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a3f      	ldr	r2, [pc, #252]	; (800874c <I2C_Slave_ISR_DMA+0x2f0>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d02f      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a3d      	ldr	r2, [pc, #244]	; (8008750 <I2C_Slave_ISR_DMA+0x2f4>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d029      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a3b      	ldr	r2, [pc, #236]	; (8008754 <I2C_Slave_ISR_DMA+0x2f8>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d023      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a39      	ldr	r2, [pc, #228]	; (8008758 <I2C_Slave_ISR_DMA+0x2fc>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d01d      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a37      	ldr	r2, [pc, #220]	; (800875c <I2C_Slave_ISR_DMA+0x300>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d017      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a35      	ldr	r2, [pc, #212]	; (8008760 <I2C_Slave_ISR_DMA+0x304>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d011      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a33      	ldr	r2, [pc, #204]	; (8008764 <I2C_Slave_ISR_DMA+0x308>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d00b      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a31      	ldr	r2, [pc, #196]	; (8008768 <I2C_Slave_ISR_DMA+0x30c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d005      	beq.n	80086b4 <I2C_Slave_ISR_DMA+0x258>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a2f      	ldr	r2, [pc, #188]	; (800876c <I2C_Slave_ISR_DMA+0x310>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d109      	bne.n	80086c8 <I2C_Slave_ISR_DMA+0x26c>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	bf0c      	ite	eq
 80086c0:	2301      	moveq	r3, #1
 80086c2:	2300      	movne	r3, #0
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	e008      	b.n	80086da <I2C_Slave_ISR_DMA+0x27e>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	bf0c      	ite	eq
 80086d4:	2301      	moveq	r3, #1
 80086d6:	2300      	movne	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 80086de:	2301      	movs	r3, #1
 80086e0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d148      	bne.n	800877a <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b28      	cmp	r3, #40	; 0x28
 80086f2:	d108      	bne.n	8008706 <I2C_Slave_ISR_DMA+0x2aa>
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086fa:	d104      	bne.n	8008706 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80086fc:	68b9      	ldr	r1, [r7, #8]
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 fd16 	bl	8009130 <I2C_ITListenCplt>
 8008704:	e068      	b.n	80087d8 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b29      	cmp	r3, #41	; 0x29
 8008710:	d12e      	bne.n	8008770 <I2C_Slave_ISR_DMA+0x314>
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008718:	d02a      	beq.n	8008770 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2210      	movs	r2, #16
 8008720:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 fe51 	bl	80093ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 f9e0 	bl	8008aee <I2C_ITSlaveSeqCplt>
 800872e:	e053      	b.n	80087d8 <I2C_Slave_ISR_DMA+0x37c>
 8008730:	40020010 	.word	0x40020010
 8008734:	40020028 	.word	0x40020028
 8008738:	40020040 	.word	0x40020040
 800873c:	40020058 	.word	0x40020058
 8008740:	40020070 	.word	0x40020070
 8008744:	40020088 	.word	0x40020088
 8008748:	400200a0 	.word	0x400200a0
 800874c:	400200b8 	.word	0x400200b8
 8008750:	40020410 	.word	0x40020410
 8008754:	40020428 	.word	0x40020428
 8008758:	40020440 	.word	0x40020440
 800875c:	40020458 	.word	0x40020458
 8008760:	40020470 	.word	0x40020470
 8008764:	40020488 	.word	0x40020488
 8008768:	400204a0 	.word	0x400204a0
 800876c:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2210      	movs	r2, #16
 8008776:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008778:	e034      	b.n	80087e4 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2210      	movs	r2, #16
 8008780:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008786:	f043 0204 	orr.w	r2, r3, #4
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008794:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <I2C_Slave_ISR_DMA+0x348>
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80087a2:	d11f      	bne.n	80087e4 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	2b21      	cmp	r3, #33	; 0x21
 80087a8:	d002      	beq.n	80087b0 <I2C_Slave_ISR_DMA+0x354>
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	2b29      	cmp	r3, #41	; 0x29
 80087ae:	d103      	bne.n	80087b8 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2221      	movs	r2, #33	; 0x21
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30
 80087b6:	e008      	b.n	80087ca <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80087b8:	7dfb      	ldrb	r3, [r7, #23]
 80087ba:	2b22      	cmp	r3, #34	; 0x22
 80087bc:	d002      	beq.n	80087c4 <I2C_Slave_ISR_DMA+0x368>
 80087be:	7dfb      	ldrb	r3, [r7, #23]
 80087c0:	2b2a      	cmp	r3, #42	; 0x2a
 80087c2:	d102      	bne.n	80087ca <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2222      	movs	r2, #34	; 0x22
 80087c8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ce:	4619      	mov	r1, r3
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 fd03 	bl	80091dc <I2C_ITError>
      if (treatdmanack == 1U)
 80087d6:	e005      	b.n	80087e4 <I2C_Slave_ISR_DMA+0x388>
 80087d8:	e004      	b.n	80087e4 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2210      	movs	r2, #16
 80087e0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80087e2:	e011      	b.n	8008808 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 80087e4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80087e6:	e00f      	b.n	8008808 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	08db      	lsrs	r3, r3, #3
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d009      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x3ac>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	08db      	lsrs	r3, r3, #3
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008800:	68b9      	ldr	r1, [r7, #8]
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 f8b2 	bl	800896c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop

0800881c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af02      	add	r7, sp, #8
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	4608      	mov	r0, r1
 8008826:	4611      	mov	r1, r2
 8008828:	461a      	mov	r2, r3
 800882a:	4603      	mov	r3, r0
 800882c:	817b      	strh	r3, [r7, #10]
 800882e:	460b      	mov	r3, r1
 8008830:	813b      	strh	r3, [r7, #8]
 8008832:	4613      	mov	r3, r2
 8008834:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008836:	88fb      	ldrh	r3, [r7, #6]
 8008838:	b2da      	uxtb	r2, r3
 800883a:	8979      	ldrh	r1, [r7, #10]
 800883c:	4b20      	ldr	r3, [pc, #128]	; (80088c0 <I2C_RequestMemoryWrite+0xa4>)
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f001 f8a7 	bl	8009998 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800884a:	69fa      	ldr	r2, [r7, #28]
 800884c:	69b9      	ldr	r1, [r7, #24]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 ffc0 	bl	80097d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e02c      	b.n	80088b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d105      	bne.n	8008870 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008864:	893b      	ldrh	r3, [r7, #8]
 8008866:	b2da      	uxtb	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	629a      	str	r2, [r3, #40]	; 0x28
 800886e:	e015      	b.n	800889c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008870:	893b      	ldrh	r3, [r7, #8]
 8008872:	0a1b      	lsrs	r3, r3, #8
 8008874:	b29b      	uxth	r3, r3
 8008876:	b2da      	uxtb	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	69b9      	ldr	r1, [r7, #24]
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 ffa6 	bl	80097d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e012      	b.n	80088b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008892:	893b      	ldrh	r3, [r7, #8]
 8008894:	b2da      	uxtb	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2200      	movs	r2, #0
 80088a4:	2180      	movs	r1, #128	; 0x80
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 ff54 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e000      	b.n	80088b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	80002000 	.word	0x80002000

080088c4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	4608      	mov	r0, r1
 80088ce:	4611      	mov	r1, r2
 80088d0:	461a      	mov	r2, r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	817b      	strh	r3, [r7, #10]
 80088d6:	460b      	mov	r3, r1
 80088d8:	813b      	strh	r3, [r7, #8]
 80088da:	4613      	mov	r3, r2
 80088dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80088de:	88fb      	ldrh	r3, [r7, #6]
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	8979      	ldrh	r1, [r7, #10]
 80088e4:	4b20      	ldr	r3, [pc, #128]	; (8008968 <I2C_RequestMemoryRead+0xa4>)
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	2300      	movs	r3, #0
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f001 f854 	bl	8009998 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	69b9      	ldr	r1, [r7, #24]
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 ff6d 	bl	80097d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d001      	beq.n	8008904 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e02c      	b.n	800895e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008904:	88fb      	ldrh	r3, [r7, #6]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d105      	bne.n	8008916 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800890a:	893b      	ldrh	r3, [r7, #8]
 800890c:	b2da      	uxtb	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	629a      	str	r2, [r3, #40]	; 0x28
 8008914:	e015      	b.n	8008942 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008916:	893b      	ldrh	r3, [r7, #8]
 8008918:	0a1b      	lsrs	r3, r3, #8
 800891a:	b29b      	uxth	r3, r3
 800891c:	b2da      	uxtb	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	69b9      	ldr	r1, [r7, #24]
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 ff53 	bl	80097d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e012      	b.n	800895e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008938:	893b      	ldrh	r3, [r7, #8]
 800893a:	b2da      	uxtb	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2200      	movs	r2, #0
 800894a:	2140      	movs	r1, #64	; 0x40
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 ff01 	bl	8009754 <I2C_WaitOnFlagUntilTimeout>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e000      	b.n	800895e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	80002000 	.word	0x80002000

0800896c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800897c:	b2db      	uxtb	r3, r3
 800897e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008982:	2b28      	cmp	r3, #40	; 0x28
 8008984:	d16a      	bne.n	8008a5c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	0c1b      	lsrs	r3, r3, #16
 800898e:	b2db      	uxtb	r3, r3
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	0c1b      	lsrs	r3, r3, #16
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80089a4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089b2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80089c0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d138      	bne.n	8008a3c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80089ca:	897b      	ldrh	r3, [r7, #10]
 80089cc:	09db      	lsrs	r3, r3, #7
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	89bb      	ldrh	r3, [r7, #12]
 80089d2:	4053      	eors	r3, r2
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	f003 0306 	and.w	r3, r3, #6
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d11c      	bne.n	8008a18 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80089de:	897b      	ldrh	r3, [r7, #10]
 80089e0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d13b      	bne.n	8008a6c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2208      	movs	r2, #8
 8008a00:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008a0a:	89ba      	ldrh	r2, [r7, #12]
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff faed 	bl	8007ff0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008a16:	e029      	b.n	8008a6c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008a18:	893b      	ldrh	r3, [r7, #8]
 8008a1a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 f84b 	bl	8009abc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008a2e:	89ba      	ldrh	r2, [r7, #12]
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff fadb 	bl	8007ff0 <HAL_I2C_AddrCallback>
}
 8008a3a:	e017      	b.n	8008a6c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008a3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 f83b 	bl	8009abc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008a4e:	89ba      	ldrh	r2, [r7, #12]
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff facb 	bl	8007ff0 <HAL_I2C_AddrCallback>
}
 8008a5a:	e007      	b.n	8008a6c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2208      	movs	r2, #8
 8008a62:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008a6c:	bf00      	nop
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b21      	cmp	r3, #33	; 0x21
 8008a8e:	d115      	bne.n	8008abc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2211      	movs	r2, #17
 8008a9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 f808 	bl	8009abc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff fa73 	bl	8007fa0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008aba:	e014      	b.n	8008ae6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2212      	movs	r2, #18
 8008ac8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008ad0:	2102      	movs	r1, #2
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fff2 	bl	8009abc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7ff fa67 	bl	8007fb4 <HAL_I2C_MasterRxCpltCallback>
}
 8008ae6:	bf00      	nop
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	0b9b      	lsrs	r3, r3, #14
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d008      	beq.n	8008b24 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	e00d      	b.n	8008b40 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	0bdb      	lsrs	r3, r3, #15
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d007      	beq.n	8008b40 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b3e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b29      	cmp	r3, #41	; 0x29
 8008b4a:	d112      	bne.n	8008b72 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2228      	movs	r2, #40	; 0x28
 8008b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2221      	movs	r2, #33	; 0x21
 8008b58:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 ffad 	bl	8009abc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f7ff fa2c 	bl	8007fc8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b70:	e017      	b.n	8008ba2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b7c:	d111      	bne.n	8008ba2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2228      	movs	r2, #40	; 0x28
 8008b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2222      	movs	r2, #34	; 0x22
 8008b8a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008b8c:	2102      	movs	r1, #2
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 ff94 	bl	8009abc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff fa1d 	bl	8007fdc <HAL_I2C_SlaveRxCpltCallback>
}
 8008ba2:	bf00      	nop
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
	...

08008bac <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b21      	cmp	r3, #33	; 0x21
 8008bcc:	d107      	bne.n	8008bde <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008bce:	2101      	movs	r1, #1
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 ff73 	bl	8009abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2211      	movs	r2, #17
 8008bda:	631a      	str	r2, [r3, #48]	; 0x30
 8008bdc:	e00c      	b.n	8008bf8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b22      	cmp	r3, #34	; 0x22
 8008be8:	d106      	bne.n	8008bf8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008bea:	2102      	movs	r1, #2
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 ff65 	bl	8009abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2212      	movs	r2, #18
 8008bf6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6859      	ldr	r1, [r3, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	4b4d      	ldr	r3, [pc, #308]	; (8008d38 <I2C_ITMasterCplt+0x18c>)
 8008c04:	400b      	ands	r3, r1
 8008c06:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a4a      	ldr	r2, [pc, #296]	; (8008d3c <I2C_ITMasterCplt+0x190>)
 8008c12:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	091b      	lsrs	r3, r3, #4
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d009      	beq.n	8008c34 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2210      	movs	r2, #16
 8008c26:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2c:	f043 0204 	orr.w	r2, r3, #4
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b60      	cmp	r3, #96	; 0x60
 8008c3e:	d10b      	bne.n	8008c58 <I2C_ITMasterCplt+0xac>
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	089b      	lsrs	r3, r3, #2
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008c56:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fbb6 	bl	80093ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c62:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b60      	cmp	r3, #96	; 0x60
 8008c6e:	d002      	beq.n	8008c76 <I2C_ITMasterCplt+0xca>
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d006      	beq.n	8008c84 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 faad 	bl	80091dc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c82:	e054      	b.n	8008d2e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b21      	cmp	r3, #33	; 0x21
 8008c8e:	d124      	bne.n	8008cda <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	2b40      	cmp	r3, #64	; 0x40
 8008ca8:	d10b      	bne.n	8008cc2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff f9b0 	bl	8008020 <HAL_I2C_MemTxCpltCallback>
}
 8008cc0:	e035      	b.n	8008d2e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f7ff f964 	bl	8007fa0 <HAL_I2C_MasterTxCpltCallback>
}
 8008cd8:	e029      	b.n	8008d2e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b22      	cmp	r3, #34	; 0x22
 8008ce4:	d123      	bne.n	8008d2e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b40      	cmp	r3, #64	; 0x40
 8008cfe:	d10b      	bne.n	8008d18 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff f98f 	bl	8008034 <HAL_I2C_MemRxCpltCallback>
}
 8008d16:	e00a      	b.n	8008d2e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff f943 	bl	8007fb4 <HAL_I2C_MasterRxCpltCallback>
}
 8008d2e:	bf00      	nop
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	fe00e800 	.word	0xfe00e800
 8008d3c:	ffff0000 	.word	0xffff0000

08008d40 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d5c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2220      	movs	r2, #32
 8008d64:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	2b21      	cmp	r3, #33	; 0x21
 8008d6a:	d002      	beq.n	8008d72 <I2C_ITSlaveCplt+0x32>
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	2b29      	cmp	r3, #41	; 0x29
 8008d70:	d108      	bne.n	8008d84 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008d72:	f248 0101 	movw	r1, #32769	; 0x8001
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fea0 	bl	8009abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2221      	movs	r2, #33	; 0x21
 8008d80:	631a      	str	r2, [r3, #48]	; 0x30
 8008d82:	e00d      	b.n	8008da0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	2b22      	cmp	r3, #34	; 0x22
 8008d88:	d002      	beq.n	8008d90 <I2C_ITSlaveCplt+0x50>
 8008d8a:	7bfb      	ldrb	r3, [r7, #15]
 8008d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d8e:	d107      	bne.n	8008da0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008d90:	f248 0102 	movw	r1, #32770	; 0x8002
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fe91 	bl	8009abc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2222      	movs	r2, #34	; 0x22
 8008d9e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dae:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6859      	ldr	r1, [r3, #4]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	4b80      	ldr	r3, [pc, #512]	; (8008fbc <I2C_ITSlaveCplt+0x27c>)
 8008dbc:	400b      	ands	r3, r1
 8008dbe:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fb02 	bl	80093ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	0b9b      	lsrs	r3, r3, #14
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d07a      	beq.n	8008ec8 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008de0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 8111 	beq.w	800900e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a73      	ldr	r2, [pc, #460]	; (8008fc0 <I2C_ITSlaveCplt+0x280>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d059      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a71      	ldr	r2, [pc, #452]	; (8008fc4 <I2C_ITSlaveCplt+0x284>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d053      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a6f      	ldr	r2, [pc, #444]	; (8008fc8 <I2C_ITSlaveCplt+0x288>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d04d      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a6d      	ldr	r2, [pc, #436]	; (8008fcc <I2C_ITSlaveCplt+0x28c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d047      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a6b      	ldr	r2, [pc, #428]	; (8008fd0 <I2C_ITSlaveCplt+0x290>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d041      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a69      	ldr	r2, [pc, #420]	; (8008fd4 <I2C_ITSlaveCplt+0x294>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d03b      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a67      	ldr	r2, [pc, #412]	; (8008fd8 <I2C_ITSlaveCplt+0x298>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d035      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a65      	ldr	r2, [pc, #404]	; (8008fdc <I2C_ITSlaveCplt+0x29c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d02f      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a63      	ldr	r2, [pc, #396]	; (8008fe0 <I2C_ITSlaveCplt+0x2a0>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d029      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a61      	ldr	r2, [pc, #388]	; (8008fe4 <I2C_ITSlaveCplt+0x2a4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d023      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a5f      	ldr	r2, [pc, #380]	; (8008fe8 <I2C_ITSlaveCplt+0x2a8>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d01d      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a5d      	ldr	r2, [pc, #372]	; (8008fec <I2C_ITSlaveCplt+0x2ac>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d017      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a5b      	ldr	r2, [pc, #364]	; (8008ff0 <I2C_ITSlaveCplt+0x2b0>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d011      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a59      	ldr	r2, [pc, #356]	; (8008ff4 <I2C_ITSlaveCplt+0x2b4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d00b      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a57      	ldr	r2, [pc, #348]	; (8008ff8 <I2C_ITSlaveCplt+0x2b8>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d005      	beq.n	8008eac <I2C_ITSlaveCplt+0x16c>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a55      	ldr	r2, [pc, #340]	; (8008ffc <I2C_ITSlaveCplt+0x2bc>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d105      	bne.n	8008eb8 <I2C_ITSlaveCplt+0x178>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	e004      	b.n	8008ec2 <I2C_ITSlaveCplt+0x182>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	8553      	strh	r3, [r2, #42]	; 0x2a
 8008ec6:	e0a2      	b.n	800900e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	0bdb      	lsrs	r3, r3, #15
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 809c 	beq.w	800900e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ee4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 808f 	beq.w	800900e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a32      	ldr	r2, [pc, #200]	; (8008fc0 <I2C_ITSlaveCplt+0x280>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d059      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a30      	ldr	r2, [pc, #192]	; (8008fc4 <I2C_ITSlaveCplt+0x284>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d053      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a2e      	ldr	r2, [pc, #184]	; (8008fc8 <I2C_ITSlaveCplt+0x288>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d04d      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a2c      	ldr	r2, [pc, #176]	; (8008fcc <I2C_ITSlaveCplt+0x28c>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d047      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a2a      	ldr	r2, [pc, #168]	; (8008fd0 <I2C_ITSlaveCplt+0x290>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d041      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a28      	ldr	r2, [pc, #160]	; (8008fd4 <I2C_ITSlaveCplt+0x294>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d03b      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a26      	ldr	r2, [pc, #152]	; (8008fd8 <I2C_ITSlaveCplt+0x298>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d035      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a24      	ldr	r2, [pc, #144]	; (8008fdc <I2C_ITSlaveCplt+0x29c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d02f      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a22      	ldr	r2, [pc, #136]	; (8008fe0 <I2C_ITSlaveCplt+0x2a0>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d029      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a20      	ldr	r2, [pc, #128]	; (8008fe4 <I2C_ITSlaveCplt+0x2a4>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d023      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a1e      	ldr	r2, [pc, #120]	; (8008fe8 <I2C_ITSlaveCplt+0x2a8>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d01d      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a1c      	ldr	r2, [pc, #112]	; (8008fec <I2C_ITSlaveCplt+0x2ac>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d017      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a1a      	ldr	r2, [pc, #104]	; (8008ff0 <I2C_ITSlaveCplt+0x2b0>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d011      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a18      	ldr	r2, [pc, #96]	; (8008ff4 <I2C_ITSlaveCplt+0x2b4>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00b      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a16      	ldr	r2, [pc, #88]	; (8008ff8 <I2C_ITSlaveCplt+0x2b8>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d005      	beq.n	8008fb0 <I2C_ITSlaveCplt+0x270>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a14      	ldr	r2, [pc, #80]	; (8008ffc <I2C_ITSlaveCplt+0x2bc>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d127      	bne.n	8009000 <I2C_ITSlaveCplt+0x2c0>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	e026      	b.n	800900a <I2C_ITSlaveCplt+0x2ca>
 8008fbc:	fe00e800 	.word	0xfe00e800
 8008fc0:	40020010 	.word	0x40020010
 8008fc4:	40020028 	.word	0x40020028
 8008fc8:	40020040 	.word	0x40020040
 8008fcc:	40020058 	.word	0x40020058
 8008fd0:	40020070 	.word	0x40020070
 8008fd4:	40020088 	.word	0x40020088
 8008fd8:	400200a0 	.word	0x400200a0
 8008fdc:	400200b8 	.word	0x400200b8
 8008fe0:	40020410 	.word	0x40020410
 8008fe4:	40020428 	.word	0x40020428
 8008fe8:	40020440 	.word	0x40020440
 8008fec:	40020458 	.word	0x40020458
 8008ff0:	40020470 	.word	0x40020470
 8008ff4:	40020488 	.word	0x40020488
 8008ff8:	400204a0 	.word	0x400204a0
 8008ffc:	400204b8 	.word	0x400204b8
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	b29b      	uxth	r3, r3
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	089b      	lsrs	r3, r3, #2
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d020      	beq.n	800905c <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f023 0304 	bic.w	r3, r3, #4
 8009020:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	b2d2      	uxtb	r2, r2
 800902e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	1c5a      	adds	r2, r3, #1
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00c      	beq.n	800905c <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009046:	3b01      	subs	r3, #1
 8009048:	b29a      	uxth	r2, r3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009052:	b29b      	uxth	r3, r3
 8009054:	3b01      	subs	r3, #1
 8009056:	b29a      	uxth	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009060:	b29b      	uxth	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906a:	f043 0204 	orr.w	r2, r3, #4
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009084:	2b00      	cmp	r3, #0
 8009086:	d010      	beq.n	80090aa <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f8a4 	bl	80091dc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b28      	cmp	r3, #40	; 0x28
 800909e:	d141      	bne.n	8009124 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80090a0:	6979      	ldr	r1, [r7, #20]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f844 	bl	8009130 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80090a8:	e03c      	b.n	8009124 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090b2:	d014      	beq.n	80090de <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff fd1a 	bl	8008aee <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a1b      	ldr	r2, [pc, #108]	; (800912c <I2C_ITSlaveCplt+0x3ec>)
 80090be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7fe ff98 	bl	800800c <HAL_I2C_ListenCpltCallback>
}
 80090dc:	e022      	b.n	8009124 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b22      	cmp	r3, #34	; 0x22
 80090e8:	d10e      	bne.n	8009108 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2220      	movs	r2, #32
 80090ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7fe ff6b 	bl	8007fdc <HAL_I2C_SlaveRxCpltCallback>
}
 8009106:	e00d      	b.n	8009124 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7fe ff52 	bl	8007fc8 <HAL_I2C_SlaveTxCpltCallback>
}
 8009124:	bf00      	nop
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	ffff0000 	.word	0xffff0000

08009130 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a26      	ldr	r2, [pc, #152]	; (80091d8 <I2C_ITListenCplt+0xa8>)
 800913e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2220      	movs	r2, #32
 800914a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	089b      	lsrs	r3, r3, #2
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	d022      	beq.n	80091ae <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	b2d2      	uxtb	r2, r2
 8009174:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009184:	2b00      	cmp	r3, #0
 8009186:	d012      	beq.n	80091ae <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800918c:	3b01      	subs	r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009198:	b29b      	uxth	r3, r3
 800919a:	3b01      	subs	r3, #1
 800919c:	b29a      	uxth	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091a6:	f043 0204 	orr.w	r2, r3, #4
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80091ae:	f248 0103 	movw	r1, #32771	; 0x8003
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fc82 	bl	8009abc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2210      	movs	r2, #16
 80091be:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7fe ff1f 	bl	800800c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	ffff0000 	.word	0xffff0000

080091dc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a5d      	ldr	r2, [pc, #372]	; (8009370 <I2C_ITError+0x194>)
 80091fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	431a      	orrs	r2, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	2b28      	cmp	r3, #40	; 0x28
 8009212:	d005      	beq.n	8009220 <I2C_ITError+0x44>
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	2b29      	cmp	r3, #41	; 0x29
 8009218:	d002      	beq.n	8009220 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	2b2a      	cmp	r3, #42	; 0x2a
 800921e:	d10b      	bne.n	8009238 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009220:	2103      	movs	r1, #3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fc4a 	bl	8009abc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2228      	movs	r2, #40	; 0x28
 800922c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a50      	ldr	r2, [pc, #320]	; (8009374 <I2C_ITError+0x198>)
 8009234:	635a      	str	r2, [r3, #52]	; 0x34
 8009236:	e011      	b.n	800925c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009238:	f248 0103 	movw	r1, #32771	; 0x8003
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fc3d 	bl	8009abc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b60      	cmp	r3, #96	; 0x60
 800924c:	d003      	beq.n	8009256 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2220      	movs	r2, #32
 8009252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009260:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009266:	2b00      	cmp	r3, #0
 8009268:	d039      	beq.n	80092de <I2C_ITError+0x102>
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	2b11      	cmp	r3, #17
 800926e:	d002      	beq.n	8009276 <I2C_ITError+0x9a>
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b21      	cmp	r3, #33	; 0x21
 8009274:	d133      	bne.n	80092de <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009284:	d107      	bne.n	8009296 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009294:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929a:	4618      	mov	r0, r3
 800929c:	f7fd fce4 	bl	8006c68 <HAL_DMA_GetState>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d017      	beq.n	80092d6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	4a33      	ldr	r2, [pc, #204]	; (8009378 <I2C_ITError+0x19c>)
 80092ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fc fb66 	bl	800598c <HAL_DMA_Abort_IT>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d04d      	beq.n	8009362 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80092d0:	4610      	mov	r0, r2
 80092d2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80092d4:	e045      	b.n	8009362 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f850 	bl	800937c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80092dc:	e041      	b.n	8009362 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d039      	beq.n	800935a <I2C_ITError+0x17e>
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b12      	cmp	r3, #18
 80092ea:	d002      	beq.n	80092f2 <I2C_ITError+0x116>
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b22      	cmp	r3, #34	; 0x22
 80092f0:	d133      	bne.n	800935a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009300:	d107      	bne.n	8009312 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009310:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009316:	4618      	mov	r0, r3
 8009318:	f7fd fca6 	bl	8006c68 <HAL_DMA_GetState>
 800931c:	4603      	mov	r3, r0
 800931e:	2b01      	cmp	r3, #1
 8009320:	d017      	beq.n	8009352 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009326:	4a14      	ldr	r2, [pc, #80]	; (8009378 <I2C_ITError+0x19c>)
 8009328:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009336:	4618      	mov	r0, r3
 8009338:	f7fc fb28 	bl	800598c <HAL_DMA_Abort_IT>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d011      	beq.n	8009366 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009350:	e009      	b.n	8009366 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f812 	bl	800937c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009358:	e005      	b.n	8009366 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f80e 	bl	800937c <I2C_TreatErrorCallback>
  }
}
 8009360:	e002      	b.n	8009368 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009362:	bf00      	nop
 8009364:	e000      	b.n	8009368 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009366:	bf00      	nop
}
 8009368:	bf00      	nop
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	ffff0000 	.word	0xffff0000
 8009374:	08008071 	.word	0x08008071
 8009378:	08009719 	.word	0x08009719

0800937c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b60      	cmp	r3, #96	; 0x60
 800938e:	d10e      	bne.n	80093ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7fe fe58 	bl	800805c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80093ac:	e009      	b.n	80093c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7fe fe43 	bl	8008048 <HAL_I2C_ErrorCallback>
}
 80093c2:	bf00      	nop
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d103      	bne.n	80093e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2200      	movs	r2, #0
 80093e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d007      	beq.n	8009406 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	699a      	ldr	r2, [r3, #24]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0201 	orr.w	r2, r2, #1
 8009404:	619a      	str	r2, [r3, #24]
  }
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800942e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009434:	b29b      	uxth	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d104      	bne.n	8009444 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800943a:	2120      	movs	r1, #32
 800943c:	68f8      	ldr	r0, [r7, #12]
 800943e:	f000 fad9 	bl	80099f4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009442:	e02d      	b.n	80094a0 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800944c:	441a      	add	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009456:	b29b      	uxth	r3, r3
 8009458:	2bff      	cmp	r3, #255	; 0xff
 800945a:	d903      	bls.n	8009464 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	22ff      	movs	r2, #255	; 0xff
 8009460:	851a      	strh	r2, [r3, #40]	; 0x28
 8009462:	e004      	b.n	800946e <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009468:	b29a      	uxth	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3324      	adds	r3, #36	; 0x24
 8009478:	4619      	mov	r1, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947e:	461a      	mov	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009484:	f7fb fcfa 	bl	8004e7c <HAL_DMA_Start_IT>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d004      	beq.n	8009498 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800948e:	2110      	movs	r1, #16
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f7ff fea3 	bl	80091dc <I2C_ITError>
}
 8009496:	e003      	b.n	80094a0 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009498:	2140      	movs	r1, #64	; 0x40
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 faaa 	bl	80099f4 <I2C_Enable_IRQ>
}
 80094a0:	bf00      	nop
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d076      	beq.n	80095b0 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a83      	ldr	r2, [pc, #524]	; (80096d8 <I2C_DMAError+0x230>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d059      	beq.n	8009582 <I2C_DMAError+0xda>
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a81      	ldr	r2, [pc, #516]	; (80096dc <I2C_DMAError+0x234>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d053      	beq.n	8009582 <I2C_DMAError+0xda>
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a7f      	ldr	r2, [pc, #508]	; (80096e0 <I2C_DMAError+0x238>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d04d      	beq.n	8009582 <I2C_DMAError+0xda>
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a7d      	ldr	r2, [pc, #500]	; (80096e4 <I2C_DMAError+0x23c>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d047      	beq.n	8009582 <I2C_DMAError+0xda>
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a7b      	ldr	r2, [pc, #492]	; (80096e8 <I2C_DMAError+0x240>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d041      	beq.n	8009582 <I2C_DMAError+0xda>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a79      	ldr	r2, [pc, #484]	; (80096ec <I2C_DMAError+0x244>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d03b      	beq.n	8009582 <I2C_DMAError+0xda>
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a77      	ldr	r2, [pc, #476]	; (80096f0 <I2C_DMAError+0x248>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d035      	beq.n	8009582 <I2C_DMAError+0xda>
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a75      	ldr	r2, [pc, #468]	; (80096f4 <I2C_DMAError+0x24c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d02f      	beq.n	8009582 <I2C_DMAError+0xda>
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a73      	ldr	r2, [pc, #460]	; (80096f8 <I2C_DMAError+0x250>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d029      	beq.n	8009582 <I2C_DMAError+0xda>
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a71      	ldr	r2, [pc, #452]	; (80096fc <I2C_DMAError+0x254>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d023      	beq.n	8009582 <I2C_DMAError+0xda>
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a6f      	ldr	r2, [pc, #444]	; (8009700 <I2C_DMAError+0x258>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d01d      	beq.n	8009582 <I2C_DMAError+0xda>
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a6d      	ldr	r2, [pc, #436]	; (8009704 <I2C_DMAError+0x25c>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d017      	beq.n	8009582 <I2C_DMAError+0xda>
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a6b      	ldr	r2, [pc, #428]	; (8009708 <I2C_DMAError+0x260>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d011      	beq.n	8009582 <I2C_DMAError+0xda>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a69      	ldr	r2, [pc, #420]	; (800970c <I2C_DMAError+0x264>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d00b      	beq.n	8009582 <I2C_DMAError+0xda>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a67      	ldr	r2, [pc, #412]	; (8009710 <I2C_DMAError+0x268>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d005      	beq.n	8009582 <I2C_DMAError+0xda>
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a65      	ldr	r2, [pc, #404]	; (8009714 <I2C_DMAError+0x26c>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d109      	bne.n	8009596 <I2C_DMAError+0xee>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	bf0c      	ite	eq
 800958e:	2301      	moveq	r3, #1
 8009590:	2300      	movne	r3, #0
 8009592:	b2db      	uxtb	r3, r3
 8009594:	e008      	b.n	80095a8 <I2C_DMAError+0x100>
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	bf0c      	ite	eq
 80095a2:	2301      	moveq	r3, #1
 80095a4:	2300      	movne	r3, #0
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80095ac:	2301      	movs	r3, #1
 80095ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d076      	beq.n	80096a6 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a46      	ldr	r2, [pc, #280]	; (80096d8 <I2C_DMAError+0x230>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d059      	beq.n	8009678 <I2C_DMAError+0x1d0>
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a44      	ldr	r2, [pc, #272]	; (80096dc <I2C_DMAError+0x234>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d053      	beq.n	8009678 <I2C_DMAError+0x1d0>
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a42      	ldr	r2, [pc, #264]	; (80096e0 <I2C_DMAError+0x238>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d04d      	beq.n	8009678 <I2C_DMAError+0x1d0>
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a40      	ldr	r2, [pc, #256]	; (80096e4 <I2C_DMAError+0x23c>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d047      	beq.n	8009678 <I2C_DMAError+0x1d0>
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a3e      	ldr	r2, [pc, #248]	; (80096e8 <I2C_DMAError+0x240>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d041      	beq.n	8009678 <I2C_DMAError+0x1d0>
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a3c      	ldr	r2, [pc, #240]	; (80096ec <I2C_DMAError+0x244>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d03b      	beq.n	8009678 <I2C_DMAError+0x1d0>
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a3a      	ldr	r2, [pc, #232]	; (80096f0 <I2C_DMAError+0x248>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d035      	beq.n	8009678 <I2C_DMAError+0x1d0>
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a38      	ldr	r2, [pc, #224]	; (80096f4 <I2C_DMAError+0x24c>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d02f      	beq.n	8009678 <I2C_DMAError+0x1d0>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a36      	ldr	r2, [pc, #216]	; (80096f8 <I2C_DMAError+0x250>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d029      	beq.n	8009678 <I2C_DMAError+0x1d0>
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a34      	ldr	r2, [pc, #208]	; (80096fc <I2C_DMAError+0x254>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d023      	beq.n	8009678 <I2C_DMAError+0x1d0>
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a32      	ldr	r2, [pc, #200]	; (8009700 <I2C_DMAError+0x258>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d01d      	beq.n	8009678 <I2C_DMAError+0x1d0>
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a30      	ldr	r2, [pc, #192]	; (8009704 <I2C_DMAError+0x25c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d017      	beq.n	8009678 <I2C_DMAError+0x1d0>
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a2e      	ldr	r2, [pc, #184]	; (8009708 <I2C_DMAError+0x260>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d011      	beq.n	8009678 <I2C_DMAError+0x1d0>
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a2c      	ldr	r2, [pc, #176]	; (800970c <I2C_DMAError+0x264>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00b      	beq.n	8009678 <I2C_DMAError+0x1d0>
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a2a      	ldr	r2, [pc, #168]	; (8009710 <I2C_DMAError+0x268>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d005      	beq.n	8009678 <I2C_DMAError+0x1d0>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a28      	ldr	r2, [pc, #160]	; (8009714 <I2C_DMAError+0x26c>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d109      	bne.n	800968c <I2C_DMAError+0x1e4>
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	bf0c      	ite	eq
 8009684:	2301      	moveq	r3, #1
 8009686:	2300      	movne	r3, #0
 8009688:	b2db      	uxtb	r3, r3
 800968a:	e008      	b.n	800969e <I2C_DMAError+0x1f6>
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	bf0c      	ite	eq
 8009698:	2301      	moveq	r3, #1
 800969a:	2300      	movne	r3, #0
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 80096a2:	2301      	movs	r3, #1
 80096a4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7fd faec 	bl	8006c84 <HAL_DMA_GetError>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d00e      	beq.n	80096d0 <I2C_DMAError+0x228>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00b      	beq.n	80096d0 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096c6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80096c8:	2110      	movs	r1, #16
 80096ca:	68b8      	ldr	r0, [r7, #8]
 80096cc:	f7ff fd86 	bl	80091dc <I2C_ITError>
  }
}
 80096d0:	bf00      	nop
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	40020010 	.word	0x40020010
 80096dc:	40020028 	.word	0x40020028
 80096e0:	40020040 	.word	0x40020040
 80096e4:	40020058 	.word	0x40020058
 80096e8:	40020070 	.word	0x40020070
 80096ec:	40020088 	.word	0x40020088
 80096f0:	400200a0 	.word	0x400200a0
 80096f4:	400200b8 	.word	0x400200b8
 80096f8:	40020410 	.word	0x40020410
 80096fc:	40020428 	.word	0x40020428
 8009700:	40020440 	.word	0x40020440
 8009704:	40020458 	.word	0x40020458
 8009708:	40020470 	.word	0x40020470
 800970c:	40020488 	.word	0x40020488
 8009710:	400204a0 	.word	0x400204a0
 8009714:	400204b8 	.word	0x400204b8

08009718 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009724:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972a:	2b00      	cmp	r3, #0
 800972c:	d003      	beq.n	8009736 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	2200      	movs	r2, #0
 8009734:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009742:	2200      	movs	r2, #0
 8009744:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7ff fe18 	bl	800937c <I2C_TreatErrorCallback>
}
 800974c:	bf00      	nop
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	603b      	str	r3, [r7, #0]
 8009760:	4613      	mov	r3, r2
 8009762:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009764:	e022      	b.n	80097ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976c:	d01e      	beq.n	80097ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800976e:	f7fa fedd 	bl	800452c <HAL_GetTick>
 8009772:	4602      	mov	r2, r0
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	429a      	cmp	r2, r3
 800977c:	d302      	bcc.n	8009784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d113      	bne.n	80097ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009788:	f043 0220 	orr.w	r2, r3, #32
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2220      	movs	r2, #32
 8009794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e00f      	b.n	80097cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	699a      	ldr	r2, [r3, #24]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	4013      	ands	r3, r2
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	bf0c      	ite	eq
 80097bc:	2301      	moveq	r3, #1
 80097be:	2300      	movne	r3, #0
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	461a      	mov	r2, r3
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d0cd      	beq.n	8009766 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80097e0:	e02c      	b.n	800983c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	68b9      	ldr	r1, [r7, #8]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f870 	bl	80098cc <I2C_IsAcknowledgeFailed>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e02a      	b.n	800984c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fc:	d01e      	beq.n	800983c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097fe:	f7fa fe95 	bl	800452c <HAL_GetTick>
 8009802:	4602      	mov	r2, r0
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	1ad3      	subs	r3, r2, r3
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	429a      	cmp	r2, r3
 800980c:	d302      	bcc.n	8009814 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d113      	bne.n	800983c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009818:	f043 0220 	orr.w	r2, r3, #32
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2220      	movs	r2, #32
 8009824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e007      	b.n	800984c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b02      	cmp	r3, #2
 8009848:	d1cb      	bne.n	80097e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009860:	e028      	b.n	80098b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	68b9      	ldr	r1, [r7, #8]
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f000 f830 	bl	80098cc <I2C_IsAcknowledgeFailed>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e026      	b.n	80098c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009876:	f7fa fe59 	bl	800452c <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	429a      	cmp	r2, r3
 8009884:	d302      	bcc.n	800988c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d113      	bne.n	80098b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009890:	f043 0220 	orr.w	r2, r3, #32
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2220      	movs	r2, #32
 800989c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e007      	b.n	80098c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	f003 0320 	and.w	r3, r3, #32
 80098be:	2b20      	cmp	r3, #32
 80098c0:	d1cf      	bne.n	8009862 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	f003 0310 	and.w	r3, r3, #16
 80098e2:	2b10      	cmp	r3, #16
 80098e4:	d151      	bne.n	800998a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098e6:	e022      	b.n	800992e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ee:	d01e      	beq.n	800992e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098f0:	f7fa fe1c 	bl	800452c <HAL_GetTick>
 80098f4:	4602      	mov	r2, r0
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d302      	bcc.n	8009906 <I2C_IsAcknowledgeFailed+0x3a>
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d113      	bne.n	800992e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990a:	f043 0220 	orr.w	r2, r3, #32
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2220      	movs	r2, #32
 8009916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e02e      	b.n	800998c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	f003 0320 	and.w	r3, r3, #32
 8009938:	2b20      	cmp	r3, #32
 800993a:	d1d5      	bne.n	80098e8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2210      	movs	r2, #16
 8009942:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2220      	movs	r2, #32
 800994a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f7ff fd3c 	bl	80093ca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6859      	ldr	r1, [r3, #4]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <I2C_IsAcknowledgeFailed+0xc8>)
 800995e:	400b      	ands	r3, r1
 8009960:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009966:	f043 0204 	orr.w	r2, r3, #4
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2220      	movs	r2, #32
 8009972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e000      	b.n	800998c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	fe00e800 	.word	0xfe00e800

08009998 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	607b      	str	r3, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	817b      	strh	r3, [r7, #10]
 80099a6:	4613      	mov	r3, r2
 80099a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	0d5b      	lsrs	r3, r3, #21
 80099b4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80099b8:	4b0d      	ldr	r3, [pc, #52]	; (80099f0 <I2C_TransferConfig+0x58>)
 80099ba:	430b      	orrs	r3, r1
 80099bc:	43db      	mvns	r3, r3
 80099be:	ea02 0103 	and.w	r1, r2, r3
 80099c2:	897b      	ldrh	r3, [r7, #10]
 80099c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80099c8:	7a7b      	ldrb	r3, [r7, #9]
 80099ca:	041b      	lsls	r3, r3, #16
 80099cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80099d0:	431a      	orrs	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	431a      	orrs	r2, r3
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	431a      	orrs	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80099e2:	bf00      	nop
 80099e4:	3714      	adds	r7, #20
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	03ff63ff 	.word	0x03ff63ff

080099f4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a08:	4a2a      	ldr	r2, [pc, #168]	; (8009ab4 <I2C_Enable_IRQ+0xc0>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d004      	beq.n	8009a18 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009a12:	4a29      	ldr	r2, [pc, #164]	; (8009ab8 <I2C_Enable_IRQ+0xc4>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d11d      	bne.n	8009a54 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009a18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	da03      	bge.n	8009a28 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009a26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009a28:	887b      	ldrh	r3, [r7, #2]
 8009a2a:	2b10      	cmp	r3, #16
 8009a2c:	d103      	bne.n	8009a36 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009a34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a36:	887b      	ldrh	r3, [r7, #2]
 8009a38:	2b20      	cmp	r3, #32
 8009a3a:	d103      	bne.n	8009a44 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009a42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009a44:	887b      	ldrh	r3, [r7, #2]
 8009a46:	2b40      	cmp	r3, #64	; 0x40
 8009a48:	d125      	bne.n	8009a96 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a50:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009a52:	e020      	b.n	8009a96 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009a54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	da03      	bge.n	8009a64 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009a62:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009a64:	887b      	ldrh	r3, [r7, #2]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d003      	beq.n	8009a76 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009a74:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009a76:	887b      	ldrh	r3, [r7, #2]
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009a86:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009a88:	887b      	ldrh	r3, [r7, #2]
 8009a8a:	2b20      	cmp	r3, #32
 8009a8c:	d103      	bne.n	8009a96 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f043 0320 	orr.w	r3, r3, #32
 8009a94:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6819      	ldr	r1, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68fa      	ldr	r2, [r7, #12]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	601a      	str	r2, [r3, #0]
}
 8009aa6:	bf00      	nop
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	08008277 	.word	0x08008277
 8009ab8:	0800845d 	.word	0x0800845d

08009abc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009acc:	887b      	ldrh	r3, [r7, #2]
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00f      	beq.n	8009af6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009adc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009aea:	2b28      	cmp	r3, #40	; 0x28
 8009aec:	d003      	beq.n	8009af6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009af4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009af6:	887b      	ldrh	r3, [r7, #2]
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00f      	beq.n	8009b20 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009b06:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009b14:	2b28      	cmp	r3, #40	; 0x28
 8009b16:	d003      	beq.n	8009b20 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009b1e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	da03      	bge.n	8009b30 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009b2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009b30:	887b      	ldrh	r3, [r7, #2]
 8009b32:	2b10      	cmp	r3, #16
 8009b34:	d103      	bne.n	8009b3e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009b3c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009b3e:	887b      	ldrh	r3, [r7, #2]
 8009b40:	2b20      	cmp	r3, #32
 8009b42:	d103      	bne.n	8009b4c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f043 0320 	orr.w	r3, r3, #32
 8009b4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009b4c:	887b      	ldrh	r3, [r7, #2]
 8009b4e:	2b40      	cmp	r3, #64	; 0x40
 8009b50:	d103      	bne.n	8009b5a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b58:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	6819      	ldr	r1, [r3, #0]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	43da      	mvns	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	400a      	ands	r2, r1
 8009b6a:	601a      	str	r2, [r3, #0]
}
 8009b6c:	bf00      	nop
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	d138      	bne.n	8009c00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d101      	bne.n	8009b9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	e032      	b.n	8009c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2224      	movs	r2, #36	; 0x24
 8009ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f022 0201 	bic.w	r2, r2, #1
 8009bba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009bca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6819      	ldr	r1, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f042 0201 	orr.w	r2, r2, #1
 8009bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	e000      	b.n	8009c02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c00:	2302      	movs	r3, #2
  }
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b085      	sub	sp, #20
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
 8009c16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b20      	cmp	r3, #32
 8009c22:	d139      	bne.n	8009c98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d101      	bne.n	8009c32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c2e:	2302      	movs	r3, #2
 8009c30:	e033      	b.n	8009c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2224      	movs	r2, #36	; 0x24
 8009c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f022 0201 	bic.w	r2, r2, #1
 8009c50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009c60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	021b      	lsls	r3, r3, #8
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f042 0201 	orr.w	r2, r2, #1
 8009c82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2220      	movs	r2, #32
 8009c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	e000      	b.n	8009c9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c98:	2302      	movs	r3, #2
  }
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3714      	adds	r7, #20
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
	...

08009ca8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009cb0:	4b19      	ldr	r3, [pc, #100]	; (8009d18 <HAL_PWREx_ConfigSupply+0x70>)
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f003 0304 	and.w	r3, r3, #4
 8009cb8:	2b04      	cmp	r3, #4
 8009cba:	d00a      	beq.n	8009cd2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009cbc:	4b16      	ldr	r3, [pc, #88]	; (8009d18 <HAL_PWREx_ConfigSupply+0x70>)
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	f003 0307 	and.w	r3, r3, #7
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d001      	beq.n	8009cce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e01f      	b.n	8009d0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e01d      	b.n	8009d0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009cd2:	4b11      	ldr	r3, [pc, #68]	; (8009d18 <HAL_PWREx_ConfigSupply+0x70>)
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	f023 0207 	bic.w	r2, r3, #7
 8009cda:	490f      	ldr	r1, [pc, #60]	; (8009d18 <HAL_PWREx_ConfigSupply+0x70>)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009ce2:	f7fa fc23 	bl	800452c <HAL_GetTick>
 8009ce6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ce8:	e009      	b.n	8009cfe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009cea:	f7fa fc1f 	bl	800452c <HAL_GetTick>
 8009cee:	4602      	mov	r2, r0
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cf8:	d901      	bls.n	8009cfe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e007      	b.n	8009d0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009cfe:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <HAL_PWREx_ConfigSupply+0x70>)
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d0a:	d1ee      	bne.n	8009cea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	58024800 	.word	0x58024800

08009d1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b08c      	sub	sp, #48	; 0x30
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	e3ff      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f000 8087 	beq.w	8009e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d3c:	4b99      	ldr	r3, [pc, #612]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d46:	4b97      	ldr	r3, [pc, #604]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4e:	2b10      	cmp	r3, #16
 8009d50:	d007      	beq.n	8009d62 <HAL_RCC_OscConfig+0x46>
 8009d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d54:	2b18      	cmp	r3, #24
 8009d56:	d110      	bne.n	8009d7a <HAL_RCC_OscConfig+0x5e>
 8009d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5a:	f003 0303 	and.w	r3, r3, #3
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d10b      	bne.n	8009d7a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d62:	4b90      	ldr	r3, [pc, #576]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d06c      	beq.n	8009e48 <HAL_RCC_OscConfig+0x12c>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d168      	bne.n	8009e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e3d9      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d82:	d106      	bne.n	8009d92 <HAL_RCC_OscConfig+0x76>
 8009d84:	4b87      	ldr	r3, [pc, #540]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a86      	ldr	r2, [pc, #536]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	e02e      	b.n	8009df0 <HAL_RCC_OscConfig+0xd4>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10c      	bne.n	8009db4 <HAL_RCC_OscConfig+0x98>
 8009d9a:	4b82      	ldr	r3, [pc, #520]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a81      	ldr	r2, [pc, #516]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	4b7f      	ldr	r3, [pc, #508]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a7e      	ldr	r2, [pc, #504]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009dac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	e01d      	b.n	8009df0 <HAL_RCC_OscConfig+0xd4>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009dbc:	d10c      	bne.n	8009dd8 <HAL_RCC_OscConfig+0xbc>
 8009dbe:	4b79      	ldr	r3, [pc, #484]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a78      	ldr	r2, [pc, #480]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	4b76      	ldr	r3, [pc, #472]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a75      	ldr	r2, [pc, #468]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	e00b      	b.n	8009df0 <HAL_RCC_OscConfig+0xd4>
 8009dd8:	4b72      	ldr	r3, [pc, #456]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a71      	ldr	r2, [pc, #452]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009de2:	6013      	str	r3, [r2, #0]
 8009de4:	4b6f      	ldr	r3, [pc, #444]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a6e      	ldr	r2, [pc, #440]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d013      	beq.n	8009e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df8:	f7fa fb98 	bl	800452c <HAL_GetTick>
 8009dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009dfe:	e008      	b.n	8009e12 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e00:	f7fa fb94 	bl	800452c <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	2b64      	cmp	r3, #100	; 0x64
 8009e0c:	d901      	bls.n	8009e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e38d      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009e12:	4b64      	ldr	r3, [pc, #400]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0f0      	beq.n	8009e00 <HAL_RCC_OscConfig+0xe4>
 8009e1e:	e014      	b.n	8009e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e20:	f7fa fb84 	bl	800452c <HAL_GetTick>
 8009e24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e26:	e008      	b.n	8009e3a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e28:	f7fa fb80 	bl	800452c <HAL_GetTick>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	2b64      	cmp	r3, #100	; 0x64
 8009e34:	d901      	bls.n	8009e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e379      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e3a:	4b5a      	ldr	r3, [pc, #360]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1f0      	bne.n	8009e28 <HAL_RCC_OscConfig+0x10c>
 8009e46:	e000      	b.n	8009e4a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0302 	and.w	r3, r3, #2
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f000 80ae 	beq.w	8009fb4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e58:	4b52      	ldr	r3, [pc, #328]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e62:	4b50      	ldr	r3, [pc, #320]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e66:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d007      	beq.n	8009e7e <HAL_RCC_OscConfig+0x162>
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	2b18      	cmp	r3, #24
 8009e72:	d13a      	bne.n	8009eea <HAL_RCC_OscConfig+0x1ce>
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	f003 0303 	and.w	r3, r3, #3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d135      	bne.n	8009eea <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e7e:	4b49      	ldr	r3, [pc, #292]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d005      	beq.n	8009e96 <HAL_RCC_OscConfig+0x17a>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e34b      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e96:	f7fa fb79 	bl	800458c <HAL_GetREVID>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d817      	bhi.n	8009ed4 <HAL_RCC_OscConfig+0x1b8>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	2b40      	cmp	r3, #64	; 0x40
 8009eaa:	d108      	bne.n	8009ebe <HAL_RCC_OscConfig+0x1a2>
 8009eac:	4b3d      	ldr	r3, [pc, #244]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009eb4:	4a3b      	ldr	r2, [pc, #236]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ebc:	e07a      	b.n	8009fb4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ebe:	4b39      	ldr	r3, [pc, #228]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	031b      	lsls	r3, r3, #12
 8009ecc:	4935      	ldr	r1, [pc, #212]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ed2:	e06f      	b.n	8009fb4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ed4:	4b33      	ldr	r3, [pc, #204]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	061b      	lsls	r3, r3, #24
 8009ee2:	4930      	ldr	r1, [pc, #192]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ee8:	e064      	b.n	8009fb4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d045      	beq.n	8009f7e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ef2:	4b2c      	ldr	r3, [pc, #176]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f023 0219 	bic.w	r2, r3, #25
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	4929      	ldr	r1, [pc, #164]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009f00:	4313      	orrs	r3, r2
 8009f02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f04:	f7fa fb12 	bl	800452c <HAL_GetTick>
 8009f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f0a:	e008      	b.n	8009f1e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f0c:	f7fa fb0e 	bl	800452c <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d901      	bls.n	8009f1e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e307      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f1e:	4b21      	ldr	r3, [pc, #132]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0304 	and.w	r3, r3, #4
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0f0      	beq.n	8009f0c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f2a:	f7fa fb2f 	bl	800458c <HAL_GetREVID>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d817      	bhi.n	8009f68 <HAL_RCC_OscConfig+0x24c>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	2b40      	cmp	r3, #64	; 0x40
 8009f3e:	d108      	bne.n	8009f52 <HAL_RCC_OscConfig+0x236>
 8009f40:	4b18      	ldr	r3, [pc, #96]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009f48:	4a16      	ldr	r2, [pc, #88]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f4e:	6053      	str	r3, [r2, #4]
 8009f50:	e030      	b.n	8009fb4 <HAL_RCC_OscConfig+0x298>
 8009f52:	4b14      	ldr	r3, [pc, #80]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	031b      	lsls	r3, r3, #12
 8009f60:	4910      	ldr	r1, [pc, #64]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	604b      	str	r3, [r1, #4]
 8009f66:	e025      	b.n	8009fb4 <HAL_RCC_OscConfig+0x298>
 8009f68:	4b0e      	ldr	r3, [pc, #56]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	061b      	lsls	r3, r3, #24
 8009f76:	490b      	ldr	r1, [pc, #44]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	604b      	str	r3, [r1, #4]
 8009f7c:	e01a      	b.n	8009fb4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f7e:	4b09      	ldr	r3, [pc, #36]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a08      	ldr	r2, [pc, #32]	; (8009fa4 <HAL_RCC_OscConfig+0x288>)
 8009f84:	f023 0301 	bic.w	r3, r3, #1
 8009f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f8a:	f7fa facf 	bl	800452c <HAL_GetTick>
 8009f8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f90:	e00a      	b.n	8009fa8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f92:	f7fa facb 	bl	800452c <HAL_GetTick>
 8009f96:	4602      	mov	r2, r0
 8009f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d903      	bls.n	8009fa8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e2c4      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
 8009fa4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009fa8:	4ba4      	ldr	r3, [pc, #656]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1ee      	bne.n	8009f92 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 0310 	and.w	r3, r3, #16
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 80a9 	beq.w	800a114 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fc2:	4b9e      	ldr	r3, [pc, #632]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fcc:	4b9b      	ldr	r3, [pc, #620]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 8009fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	2b08      	cmp	r3, #8
 8009fd6:	d007      	beq.n	8009fe8 <HAL_RCC_OscConfig+0x2cc>
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	2b18      	cmp	r3, #24
 8009fdc:	d13a      	bne.n	800a054 <HAL_RCC_OscConfig+0x338>
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f003 0303 	and.w	r3, r3, #3
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d135      	bne.n	800a054 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009fe8:	4b94      	ldr	r3, [pc, #592]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d005      	beq.n	800a000 <HAL_RCC_OscConfig+0x2e4>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	2b80      	cmp	r3, #128	; 0x80
 8009ffa:	d001      	beq.n	800a000 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e296      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a000:	f7fa fac4 	bl	800458c <HAL_GetREVID>
 800a004:	4603      	mov	r3, r0
 800a006:	f241 0203 	movw	r2, #4099	; 0x1003
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d817      	bhi.n	800a03e <HAL_RCC_OscConfig+0x322>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	2b20      	cmp	r3, #32
 800a014:	d108      	bne.n	800a028 <HAL_RCC_OscConfig+0x30c>
 800a016:	4b89      	ldr	r3, [pc, #548]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a01e:	4a87      	ldr	r2, [pc, #540]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a020:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a024:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a026:	e075      	b.n	800a114 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a028:	4b84      	ldr	r3, [pc, #528]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	069b      	lsls	r3, r3, #26
 800a036:	4981      	ldr	r1, [pc, #516]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a038:	4313      	orrs	r3, r2
 800a03a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a03c:	e06a      	b.n	800a114 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a03e:	4b7f      	ldr	r3, [pc, #508]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	061b      	lsls	r3, r3, #24
 800a04c:	497b      	ldr	r1, [pc, #492]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a052:	e05f      	b.n	800a114 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	69db      	ldr	r3, [r3, #28]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d042      	beq.n	800a0e2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a05c:	4b77      	ldr	r3, [pc, #476]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a76      	ldr	r2, [pc, #472]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a068:	f7fa fa60 	bl	800452c <HAL_GetTick>
 800a06c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a06e:	e008      	b.n	800a082 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a070:	f7fa fa5c 	bl	800452c <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d901      	bls.n	800a082 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e255      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a082:	4b6e      	ldr	r3, [pc, #440]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0f0      	beq.n	800a070 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a08e:	f7fa fa7d 	bl	800458c <HAL_GetREVID>
 800a092:	4603      	mov	r3, r0
 800a094:	f241 0203 	movw	r2, #4099	; 0x1003
 800a098:	4293      	cmp	r3, r2
 800a09a:	d817      	bhi.n	800a0cc <HAL_RCC_OscConfig+0x3b0>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	d108      	bne.n	800a0b6 <HAL_RCC_OscConfig+0x39a>
 800a0a4:	4b65      	ldr	r3, [pc, #404]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a0ac:	4a63      	ldr	r2, [pc, #396]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a0ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0b2:	6053      	str	r3, [r2, #4]
 800a0b4:	e02e      	b.n	800a114 <HAL_RCC_OscConfig+0x3f8>
 800a0b6:	4b61      	ldr	r3, [pc, #388]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	069b      	lsls	r3, r3, #26
 800a0c4:	495d      	ldr	r1, [pc, #372]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	604b      	str	r3, [r1, #4]
 800a0ca:	e023      	b.n	800a114 <HAL_RCC_OscConfig+0x3f8>
 800a0cc:	4b5b      	ldr	r3, [pc, #364]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a1b      	ldr	r3, [r3, #32]
 800a0d8:	061b      	lsls	r3, r3, #24
 800a0da:	4958      	ldr	r1, [pc, #352]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	60cb      	str	r3, [r1, #12]
 800a0e0:	e018      	b.n	800a114 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a0e2:	4b56      	ldr	r3, [pc, #344]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a55      	ldr	r2, [pc, #340]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a0e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ee:	f7fa fa1d 	bl	800452c <HAL_GetTick>
 800a0f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0f4:	e008      	b.n	800a108 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a0f6:	f7fa fa19 	bl	800452c <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	2b02      	cmp	r3, #2
 800a102:	d901      	bls.n	800a108 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e212      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a108:	4b4c      	ldr	r3, [pc, #304]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1f0      	bne.n	800a0f6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0308 	and.w	r3, r3, #8
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d036      	beq.n	800a18e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	695b      	ldr	r3, [r3, #20]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d019      	beq.n	800a15c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a128:	4b44      	ldr	r3, [pc, #272]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a12a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a12c:	4a43      	ldr	r2, [pc, #268]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a12e:	f043 0301 	orr.w	r3, r3, #1
 800a132:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a134:	f7fa f9fa 	bl	800452c <HAL_GetTick>
 800a138:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a13a:	e008      	b.n	800a14e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a13c:	f7fa f9f6 	bl	800452c <HAL_GetTick>
 800a140:	4602      	mov	r2, r0
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	2b02      	cmp	r3, #2
 800a148:	d901      	bls.n	800a14e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e1ef      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a14e:	4b3b      	ldr	r3, [pc, #236]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a152:	f003 0302 	and.w	r3, r3, #2
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0f0      	beq.n	800a13c <HAL_RCC_OscConfig+0x420>
 800a15a:	e018      	b.n	800a18e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a15c:	4b37      	ldr	r3, [pc, #220]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a15e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a160:	4a36      	ldr	r2, [pc, #216]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a162:	f023 0301 	bic.w	r3, r3, #1
 800a166:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a168:	f7fa f9e0 	bl	800452c <HAL_GetTick>
 800a16c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a16e:	e008      	b.n	800a182 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a170:	f7fa f9dc 	bl	800452c <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d901      	bls.n	800a182 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e1d5      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a182:	4b2e      	ldr	r3, [pc, #184]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a186:	f003 0302 	and.w	r3, r3, #2
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1f0      	bne.n	800a170 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0320 	and.w	r3, r3, #32
 800a196:	2b00      	cmp	r3, #0
 800a198:	d036      	beq.n	800a208 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d019      	beq.n	800a1d6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a1a2:	4b26      	ldr	r3, [pc, #152]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a25      	ldr	r2, [pc, #148]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a1a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a1ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1ae:	f7fa f9bd 	bl	800452c <HAL_GetTick>
 800a1b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1b4:	e008      	b.n	800a1c8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a1b6:	f7fa f9b9 	bl	800452c <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d901      	bls.n	800a1c8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e1b2      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1c8:	4b1c      	ldr	r3, [pc, #112]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d0f0      	beq.n	800a1b6 <HAL_RCC_OscConfig+0x49a>
 800a1d4:	e018      	b.n	800a208 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a1d6:	4b19      	ldr	r3, [pc, #100]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a18      	ldr	r2, [pc, #96]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a1dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1e2:	f7fa f9a3 	bl	800452c <HAL_GetTick>
 800a1e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1e8:	e008      	b.n	800a1fc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a1ea:	f7fa f99f 	bl	800452c <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d901      	bls.n	800a1fc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e198      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1fc:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <HAL_RCC_OscConfig+0x520>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1f0      	bne.n	800a1ea <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0304 	and.w	r3, r3, #4
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 8085 	beq.w	800a320 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a216:	4b0a      	ldr	r3, [pc, #40]	; (800a240 <HAL_RCC_OscConfig+0x524>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a09      	ldr	r2, [pc, #36]	; (800a240 <HAL_RCC_OscConfig+0x524>)
 800a21c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a220:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a222:	f7fa f983 	bl	800452c <HAL_GetTick>
 800a226:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a228:	e00c      	b.n	800a244 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a22a:	f7fa f97f 	bl	800452c <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	2b64      	cmp	r3, #100	; 0x64
 800a236:	d905      	bls.n	800a244 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e178      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
 800a23c:	58024400 	.word	0x58024400
 800a240:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a244:	4b96      	ldr	r3, [pc, #600]	; (800a4a0 <HAL_RCC_OscConfig+0x784>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d0ec      	beq.n	800a22a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d106      	bne.n	800a266 <HAL_RCC_OscConfig+0x54a>
 800a258:	4b92      	ldr	r3, [pc, #584]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25c:	4a91      	ldr	r2, [pc, #580]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a25e:	f043 0301 	orr.w	r3, r3, #1
 800a262:	6713      	str	r3, [r2, #112]	; 0x70
 800a264:	e02d      	b.n	800a2c2 <HAL_RCC_OscConfig+0x5a6>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10c      	bne.n	800a288 <HAL_RCC_OscConfig+0x56c>
 800a26e:	4b8d      	ldr	r3, [pc, #564]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a272:	4a8c      	ldr	r2, [pc, #560]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a274:	f023 0301 	bic.w	r3, r3, #1
 800a278:	6713      	str	r3, [r2, #112]	; 0x70
 800a27a:	4b8a      	ldr	r3, [pc, #552]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27e:	4a89      	ldr	r2, [pc, #548]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a280:	f023 0304 	bic.w	r3, r3, #4
 800a284:	6713      	str	r3, [r2, #112]	; 0x70
 800a286:	e01c      	b.n	800a2c2 <HAL_RCC_OscConfig+0x5a6>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	2b05      	cmp	r3, #5
 800a28e:	d10c      	bne.n	800a2aa <HAL_RCC_OscConfig+0x58e>
 800a290:	4b84      	ldr	r3, [pc, #528]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a294:	4a83      	ldr	r2, [pc, #524]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a296:	f043 0304 	orr.w	r3, r3, #4
 800a29a:	6713      	str	r3, [r2, #112]	; 0x70
 800a29c:	4b81      	ldr	r3, [pc, #516]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a29e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a0:	4a80      	ldr	r2, [pc, #512]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a2a2:	f043 0301 	orr.w	r3, r3, #1
 800a2a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a2a8:	e00b      	b.n	800a2c2 <HAL_RCC_OscConfig+0x5a6>
 800a2aa:	4b7e      	ldr	r3, [pc, #504]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ae:	4a7d      	ldr	r2, [pc, #500]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a2b0:	f023 0301 	bic.w	r3, r3, #1
 800a2b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a2b6:	4b7b      	ldr	r3, [pc, #492]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ba:	4a7a      	ldr	r2, [pc, #488]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a2bc:	f023 0304 	bic.w	r3, r3, #4
 800a2c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d015      	beq.n	800a2f6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2ca:	f7fa f92f 	bl	800452c <HAL_GetTick>
 800a2ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2d0:	e00a      	b.n	800a2e8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2d2:	f7fa f92b 	bl	800452c <HAL_GetTick>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	1ad3      	subs	r3, r2, r3
 800a2dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d901      	bls.n	800a2e8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e122      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2e8:	4b6e      	ldr	r3, [pc, #440]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a2ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0ee      	beq.n	800a2d2 <HAL_RCC_OscConfig+0x5b6>
 800a2f4:	e014      	b.n	800a320 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2f6:	f7fa f919 	bl	800452c <HAL_GetTick>
 800a2fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2fc:	e00a      	b.n	800a314 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2fe:	f7fa f915 	bl	800452c <HAL_GetTick>
 800a302:	4602      	mov	r2, r0
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	f241 3288 	movw	r2, #5000	; 0x1388
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d901      	bls.n	800a314 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a310:	2303      	movs	r3, #3
 800a312:	e10c      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a314:	4b63      	ldr	r3, [pc, #396]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a318:	f003 0302 	and.w	r3, r3, #2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1ee      	bne.n	800a2fe <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 8101 	beq.w	800a52c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a32a:	4b5e      	ldr	r3, [pc, #376]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a32c:	691b      	ldr	r3, [r3, #16]
 800a32e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a332:	2b18      	cmp	r3, #24
 800a334:	f000 80bc 	beq.w	800a4b0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	f040 8095 	bne.w	800a46c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a342:	4b58      	ldr	r3, [pc, #352]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a57      	ldr	r2, [pc, #348]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a348:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a34c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a34e:	f7fa f8ed 	bl	800452c <HAL_GetTick>
 800a352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a354:	e008      	b.n	800a368 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a356:	f7fa f8e9 	bl	800452c <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	2b02      	cmp	r3, #2
 800a362:	d901      	bls.n	800a368 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e0e2      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a368:	4b4e      	ldr	r3, [pc, #312]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d1f0      	bne.n	800a356 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a374:	4b4b      	ldr	r3, [pc, #300]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a378:	4b4b      	ldr	r3, [pc, #300]	; (800a4a8 <HAL_RCC_OscConfig+0x78c>)
 800a37a:	4013      	ands	r3, r2
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a384:	0112      	lsls	r2, r2, #4
 800a386:	430a      	orrs	r2, r1
 800a388:	4946      	ldr	r1, [pc, #280]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	628b      	str	r3, [r1, #40]	; 0x28
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a392:	3b01      	subs	r3, #1
 800a394:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39c:	3b01      	subs	r3, #1
 800a39e:	025b      	lsls	r3, r3, #9
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	041b      	lsls	r3, r3, #16
 800a3ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3b0:	431a      	orrs	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	061b      	lsls	r3, r3, #24
 800a3ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3be:	4939      	ldr	r1, [pc, #228]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a3c4:	4b37      	ldr	r3, [pc, #220]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c8:	4a36      	ldr	r2, [pc, #216]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a3ca:	f023 0301 	bic.w	r3, r3, #1
 800a3ce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a3d0:	4b34      	ldr	r3, [pc, #208]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a3d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3d4:	4b35      	ldr	r3, [pc, #212]	; (800a4ac <HAL_RCC_OscConfig+0x790>)
 800a3d6:	4013      	ands	r3, r2
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a3dc:	00d2      	lsls	r2, r2, #3
 800a3de:	4931      	ldr	r1, [pc, #196]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a3e4:	4b2f      	ldr	r3, [pc, #188]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e8:	f023 020c 	bic.w	r2, r3, #12
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f0:	492c      	ldr	r1, [pc, #176]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a3f6:	4b2b      	ldr	r3, [pc, #172]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fa:	f023 0202 	bic.w	r2, r3, #2
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a402:	4928      	ldr	r1, [pc, #160]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a404:	4313      	orrs	r3, r2
 800a406:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a408:	4b26      	ldr	r3, [pc, #152]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	4a25      	ldr	r2, [pc, #148]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a40e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a414:	4b23      	ldr	r3, [pc, #140]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	4a22      	ldr	r2, [pc, #136]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a41a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a41e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a420:	4b20      	ldr	r3, [pc, #128]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	4a1f      	ldr	r2, [pc, #124]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a426:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a42a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a42c:	4b1d      	ldr	r3, [pc, #116]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a430:	4a1c      	ldr	r2, [pc, #112]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a432:	f043 0301 	orr.w	r3, r3, #1
 800a436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a438:	4b1a      	ldr	r3, [pc, #104]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a19      	ldr	r2, [pc, #100]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a43e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a444:	f7fa f872 	bl	800452c <HAL_GetTick>
 800a448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a44a:	e008      	b.n	800a45e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a44c:	f7fa f86e 	bl	800452c <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	2b02      	cmp	r3, #2
 800a458:	d901      	bls.n	800a45e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e067      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a45e:	4b11      	ldr	r3, [pc, #68]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0f0      	beq.n	800a44c <HAL_RCC_OscConfig+0x730>
 800a46a:	e05f      	b.n	800a52c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a46c:	4b0d      	ldr	r3, [pc, #52]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a0c      	ldr	r2, [pc, #48]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a478:	f7fa f858 	bl	800452c <HAL_GetTick>
 800a47c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a47e:	e008      	b.n	800a492 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a480:	f7fa f854 	bl	800452c <HAL_GetTick>
 800a484:	4602      	mov	r2, r0
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d901      	bls.n	800a492 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e04d      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a492:	4b04      	ldr	r3, [pc, #16]	; (800a4a4 <HAL_RCC_OscConfig+0x788>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1f0      	bne.n	800a480 <HAL_RCC_OscConfig+0x764>
 800a49e:	e045      	b.n	800a52c <HAL_RCC_OscConfig+0x810>
 800a4a0:	58024800 	.word	0x58024800
 800a4a4:	58024400 	.word	0x58024400
 800a4a8:	fffffc0c 	.word	0xfffffc0c
 800a4ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a4b0:	4b21      	ldr	r3, [pc, #132]	; (800a538 <HAL_RCC_OscConfig+0x81c>)
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a4b6:	4b20      	ldr	r3, [pc, #128]	; (800a538 <HAL_RCC_OscConfig+0x81c>)
 800a4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d031      	beq.n	800a528 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	f003 0203 	and.w	r2, r3, #3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d12a      	bne.n	800a528 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	091b      	lsrs	r3, r3, #4
 800a4d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d122      	bne.n	800a528 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d11a      	bne.n	800a528 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	0a5b      	lsrs	r3, r3, #9
 800a4f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a500:	429a      	cmp	r2, r3
 800a502:	d111      	bne.n	800a528 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	0c1b      	lsrs	r3, r3, #16
 800a508:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a510:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a512:	429a      	cmp	r2, r3
 800a514:	d108      	bne.n	800a528 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	0e1b      	lsrs	r3, r3, #24
 800a51a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a522:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a524:	429a      	cmp	r2, r3
 800a526:	d001      	beq.n	800a52c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	e000      	b.n	800a52e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3730      	adds	r7, #48	; 0x30
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	58024400 	.word	0x58024400

0800a53c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e19c      	b.n	800a88a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a550:	4b8a      	ldr	r3, [pc, #552]	; (800a77c <HAL_RCC_ClockConfig+0x240>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	683a      	ldr	r2, [r7, #0]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d910      	bls.n	800a580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a55e:	4b87      	ldr	r3, [pc, #540]	; (800a77c <HAL_RCC_ClockConfig+0x240>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f023 020f 	bic.w	r2, r3, #15
 800a566:	4985      	ldr	r1, [pc, #532]	; (800a77c <HAL_RCC_ClockConfig+0x240>)
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a56e:	4b83      	ldr	r3, [pc, #524]	; (800a77c <HAL_RCC_ClockConfig+0x240>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 030f 	and.w	r3, r3, #15
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d001      	beq.n	800a580 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e184      	b.n	800a88a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 0304 	and.w	r3, r3, #4
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d010      	beq.n	800a5ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	691a      	ldr	r2, [r3, #16]
 800a590:	4b7b      	ldr	r3, [pc, #492]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a598:	429a      	cmp	r2, r3
 800a59a:	d908      	bls.n	800a5ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a59c:	4b78      	ldr	r3, [pc, #480]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a59e:	699b      	ldr	r3, [r3, #24]
 800a5a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	4975      	ldr	r1, [pc, #468]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 0308 	and.w	r3, r3, #8
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d010      	beq.n	800a5dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	695a      	ldr	r2, [r3, #20]
 800a5be:	4b70      	ldr	r3, [pc, #448]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a5c0:	69db      	ldr	r3, [r3, #28]
 800a5c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d908      	bls.n	800a5dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a5ca:	4b6d      	ldr	r3, [pc, #436]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a5cc:	69db      	ldr	r3, [r3, #28]
 800a5ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	695b      	ldr	r3, [r3, #20]
 800a5d6:	496a      	ldr	r1, [pc, #424]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 0310 	and.w	r3, r3, #16
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d010      	beq.n	800a60a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	699a      	ldr	r2, [r3, #24]
 800a5ec:	4b64      	ldr	r3, [pc, #400]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a5ee:	69db      	ldr	r3, [r3, #28]
 800a5f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d908      	bls.n	800a60a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a5f8:	4b61      	ldr	r3, [pc, #388]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	495e      	ldr	r1, [pc, #376]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a606:	4313      	orrs	r3, r2
 800a608:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 0320 	and.w	r3, r3, #32
 800a612:	2b00      	cmp	r3, #0
 800a614:	d010      	beq.n	800a638 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	69da      	ldr	r2, [r3, #28]
 800a61a:	4b59      	ldr	r3, [pc, #356]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a61c:	6a1b      	ldr	r3, [r3, #32]
 800a61e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a622:	429a      	cmp	r2, r3
 800a624:	d908      	bls.n	800a638 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a626:	4b56      	ldr	r3, [pc, #344]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	4953      	ldr	r1, [pc, #332]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a634:	4313      	orrs	r3, r2
 800a636:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b00      	cmp	r3, #0
 800a642:	d010      	beq.n	800a666 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	68da      	ldr	r2, [r3, #12]
 800a648:	4b4d      	ldr	r3, [pc, #308]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	f003 030f 	and.w	r3, r3, #15
 800a650:	429a      	cmp	r2, r3
 800a652:	d908      	bls.n	800a666 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a654:	4b4a      	ldr	r3, [pc, #296]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	f023 020f 	bic.w	r2, r3, #15
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	4947      	ldr	r1, [pc, #284]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a662:	4313      	orrs	r3, r2
 800a664:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d055      	beq.n	800a71e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a672:	4b43      	ldr	r3, [pc, #268]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	4940      	ldr	r1, [pc, #256]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a680:	4313      	orrs	r3, r2
 800a682:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d107      	bne.n	800a69c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a68c:	4b3c      	ldr	r3, [pc, #240]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d121      	bne.n	800a6dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e0f6      	b.n	800a88a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	2b03      	cmp	r3, #3
 800a6a2:	d107      	bne.n	800a6b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6a4:	4b36      	ldr	r3, [pc, #216]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d115      	bne.n	800a6dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	e0ea      	b.n	800a88a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d107      	bne.n	800a6cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6bc:	4b30      	ldr	r3, [pc, #192]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d109      	bne.n	800a6dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e0de      	b.n	800a88a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6cc:	4b2c      	ldr	r3, [pc, #176]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 0304 	and.w	r3, r3, #4
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d101      	bne.n	800a6dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e0d6      	b.n	800a88a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a6dc:	4b28      	ldr	r3, [pc, #160]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a6de:	691b      	ldr	r3, [r3, #16]
 800a6e0:	f023 0207 	bic.w	r2, r3, #7
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	4925      	ldr	r1, [pc, #148]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6ee:	f7f9 ff1d 	bl	800452c <HAL_GetTick>
 800a6f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6f4:	e00a      	b.n	800a70c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6f6:	f7f9 ff19 	bl	800452c <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	f241 3288 	movw	r2, #5000	; 0x1388
 800a704:	4293      	cmp	r3, r2
 800a706:	d901      	bls.n	800a70c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	e0be      	b.n	800a88a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a70c:	4b1c      	ldr	r3, [pc, #112]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	00db      	lsls	r3, r3, #3
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d1eb      	bne.n	800a6f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0302 	and.w	r3, r3, #2
 800a726:	2b00      	cmp	r3, #0
 800a728:	d010      	beq.n	800a74c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68da      	ldr	r2, [r3, #12]
 800a72e:	4b14      	ldr	r3, [pc, #80]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	f003 030f 	and.w	r3, r3, #15
 800a736:	429a      	cmp	r2, r3
 800a738:	d208      	bcs.n	800a74c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a73a:	4b11      	ldr	r3, [pc, #68]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	f023 020f 	bic.w	r2, r3, #15
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	490e      	ldr	r1, [pc, #56]	; (800a780 <HAL_RCC_ClockConfig+0x244>)
 800a748:	4313      	orrs	r3, r2
 800a74a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a74c:	4b0b      	ldr	r3, [pc, #44]	; (800a77c <HAL_RCC_ClockConfig+0x240>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 030f 	and.w	r3, r3, #15
 800a754:	683a      	ldr	r2, [r7, #0]
 800a756:	429a      	cmp	r2, r3
 800a758:	d214      	bcs.n	800a784 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a75a:	4b08      	ldr	r3, [pc, #32]	; (800a77c <HAL_RCC_ClockConfig+0x240>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f023 020f 	bic.w	r2, r3, #15
 800a762:	4906      	ldr	r1, [pc, #24]	; (800a77c <HAL_RCC_ClockConfig+0x240>)
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	4313      	orrs	r3, r2
 800a768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a76a:	4b04      	ldr	r3, [pc, #16]	; (800a77c <HAL_RCC_ClockConfig+0x240>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 030f 	and.w	r3, r3, #15
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	429a      	cmp	r2, r3
 800a776:	d005      	beq.n	800a784 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e086      	b.n	800a88a <HAL_RCC_ClockConfig+0x34e>
 800a77c:	52002000 	.word	0x52002000
 800a780:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0304 	and.w	r3, r3, #4
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d010      	beq.n	800a7b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	691a      	ldr	r2, [r3, #16]
 800a794:	4b3f      	ldr	r3, [pc, #252]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d208      	bcs.n	800a7b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7a0:	4b3c      	ldr	r3, [pc, #240]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a7a2:	699b      	ldr	r3, [r3, #24]
 800a7a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	4939      	ldr	r1, [pc, #228]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d010      	beq.n	800a7e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	695a      	ldr	r2, [r3, #20]
 800a7c2:	4b34      	ldr	r3, [pc, #208]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d208      	bcs.n	800a7e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a7ce:	4b31      	ldr	r3, [pc, #196]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a7d0:	69db      	ldr	r3, [r3, #28]
 800a7d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	492e      	ldr	r1, [pc, #184]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 0310 	and.w	r3, r3, #16
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d010      	beq.n	800a80e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	699a      	ldr	r2, [r3, #24]
 800a7f0:	4b28      	ldr	r3, [pc, #160]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a7f2:	69db      	ldr	r3, [r3, #28]
 800a7f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d208      	bcs.n	800a80e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a7fc:	4b25      	ldr	r3, [pc, #148]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a7fe:	69db      	ldr	r3, [r3, #28]
 800a800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	4922      	ldr	r1, [pc, #136]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a80a:	4313      	orrs	r3, r2
 800a80c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0320 	and.w	r3, r3, #32
 800a816:	2b00      	cmp	r3, #0
 800a818:	d010      	beq.n	800a83c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	69da      	ldr	r2, [r3, #28]
 800a81e:	4b1d      	ldr	r3, [pc, #116]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a826:	429a      	cmp	r2, r3
 800a828:	d208      	bcs.n	800a83c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a82a:	4b1a      	ldr	r3, [pc, #104]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	69db      	ldr	r3, [r3, #28]
 800a836:	4917      	ldr	r1, [pc, #92]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a838:	4313      	orrs	r3, r2
 800a83a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a83c:	f000 f834 	bl	800a8a8 <HAL_RCC_GetSysClockFreq>
 800a840:	4602      	mov	r2, r0
 800a842:	4b14      	ldr	r3, [pc, #80]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	0a1b      	lsrs	r3, r3, #8
 800a848:	f003 030f 	and.w	r3, r3, #15
 800a84c:	4912      	ldr	r1, [pc, #72]	; (800a898 <HAL_RCC_ClockConfig+0x35c>)
 800a84e:	5ccb      	ldrb	r3, [r1, r3]
 800a850:	f003 031f 	and.w	r3, r3, #31
 800a854:	fa22 f303 	lsr.w	r3, r2, r3
 800a858:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a85a:	4b0e      	ldr	r3, [pc, #56]	; (800a894 <HAL_RCC_ClockConfig+0x358>)
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	4a0d      	ldr	r2, [pc, #52]	; (800a898 <HAL_RCC_ClockConfig+0x35c>)
 800a864:	5cd3      	ldrb	r3, [r2, r3]
 800a866:	f003 031f 	and.w	r3, r3, #31
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	fa22 f303 	lsr.w	r3, r2, r3
 800a870:	4a0a      	ldr	r2, [pc, #40]	; (800a89c <HAL_RCC_ClockConfig+0x360>)
 800a872:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a874:	4a0a      	ldr	r2, [pc, #40]	; (800a8a0 <HAL_RCC_ClockConfig+0x364>)
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a87a:	4b0a      	ldr	r3, [pc, #40]	; (800a8a4 <HAL_RCC_ClockConfig+0x368>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4618      	mov	r0, r3
 800a880:	f7f9 fe0a 	bl	8004498 <HAL_InitTick>
 800a884:	4603      	mov	r3, r0
 800a886:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a888:	7bfb      	ldrb	r3, [r7, #15]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	58024400 	.word	0x58024400
 800a898:	08012fdc 	.word	0x08012fdc
 800a89c:	2400001c 	.word	0x2400001c
 800a8a0:	24000018 	.word	0x24000018
 800a8a4:	24000020 	.word	0x24000020

0800a8a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b089      	sub	sp, #36	; 0x24
 800a8ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8ae:	4bb3      	ldr	r3, [pc, #716]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8b6:	2b18      	cmp	r3, #24
 800a8b8:	f200 8155 	bhi.w	800ab66 <HAL_RCC_GetSysClockFreq+0x2be>
 800a8bc:	a201      	add	r2, pc, #4	; (adr r2, 800a8c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c2:	bf00      	nop
 800a8c4:	0800a929 	.word	0x0800a929
 800a8c8:	0800ab67 	.word	0x0800ab67
 800a8cc:	0800ab67 	.word	0x0800ab67
 800a8d0:	0800ab67 	.word	0x0800ab67
 800a8d4:	0800ab67 	.word	0x0800ab67
 800a8d8:	0800ab67 	.word	0x0800ab67
 800a8dc:	0800ab67 	.word	0x0800ab67
 800a8e0:	0800ab67 	.word	0x0800ab67
 800a8e4:	0800a94f 	.word	0x0800a94f
 800a8e8:	0800ab67 	.word	0x0800ab67
 800a8ec:	0800ab67 	.word	0x0800ab67
 800a8f0:	0800ab67 	.word	0x0800ab67
 800a8f4:	0800ab67 	.word	0x0800ab67
 800a8f8:	0800ab67 	.word	0x0800ab67
 800a8fc:	0800ab67 	.word	0x0800ab67
 800a900:	0800ab67 	.word	0x0800ab67
 800a904:	0800a955 	.word	0x0800a955
 800a908:	0800ab67 	.word	0x0800ab67
 800a90c:	0800ab67 	.word	0x0800ab67
 800a910:	0800ab67 	.word	0x0800ab67
 800a914:	0800ab67 	.word	0x0800ab67
 800a918:	0800ab67 	.word	0x0800ab67
 800a91c:	0800ab67 	.word	0x0800ab67
 800a920:	0800ab67 	.word	0x0800ab67
 800a924:	0800a95b 	.word	0x0800a95b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a928:	4b94      	ldr	r3, [pc, #592]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 0320 	and.w	r3, r3, #32
 800a930:	2b00      	cmp	r3, #0
 800a932:	d009      	beq.n	800a948 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a934:	4b91      	ldr	r3, [pc, #580]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	08db      	lsrs	r3, r3, #3
 800a93a:	f003 0303 	and.w	r3, r3, #3
 800a93e:	4a90      	ldr	r2, [pc, #576]	; (800ab80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a940:	fa22 f303 	lsr.w	r3, r2, r3
 800a944:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a946:	e111      	b.n	800ab6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a948:	4b8d      	ldr	r3, [pc, #564]	; (800ab80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a94a:	61bb      	str	r3, [r7, #24]
    break;
 800a94c:	e10e      	b.n	800ab6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a94e:	4b8d      	ldr	r3, [pc, #564]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a950:	61bb      	str	r3, [r7, #24]
    break;
 800a952:	e10b      	b.n	800ab6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a954:	4b8c      	ldr	r3, [pc, #560]	; (800ab88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a956:	61bb      	str	r3, [r7, #24]
    break;
 800a958:	e108      	b.n	800ab6c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a95a:	4b88      	ldr	r3, [pc, #544]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95e:	f003 0303 	and.w	r3, r3, #3
 800a962:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a964:	4b85      	ldr	r3, [pc, #532]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a968:	091b      	lsrs	r3, r3, #4
 800a96a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a96e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a970:	4b82      	ldr	r3, [pc, #520]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a974:	f003 0301 	and.w	r3, r3, #1
 800a978:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a97a:	4b80      	ldr	r3, [pc, #512]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97e:	08db      	lsrs	r3, r3, #3
 800a980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	fb02 f303 	mul.w	r3, r2, r3
 800a98a:	ee07 3a90 	vmov	s15, r3
 800a98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a992:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 80e1 	beq.w	800ab60 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	f000 8083 	beq.w	800aaac <HAL_RCC_GetSysClockFreq+0x204>
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	2b02      	cmp	r3, #2
 800a9aa:	f200 80a1 	bhi.w	800aaf0 <HAL_RCC_GetSysClockFreq+0x248>
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <HAL_RCC_GetSysClockFreq+0x114>
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d056      	beq.n	800aa68 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a9ba:	e099      	b.n	800aaf0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9bc:	4b6f      	ldr	r3, [pc, #444]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0320 	and.w	r3, r3, #32
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d02d      	beq.n	800aa24 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9c8:	4b6c      	ldr	r3, [pc, #432]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	08db      	lsrs	r3, r3, #3
 800a9ce:	f003 0303 	and.w	r3, r3, #3
 800a9d2:	4a6b      	ldr	r2, [pc, #428]	; (800ab80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a9d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	ee07 3a90 	vmov	s15, r3
 800a9e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9f2:	4b62      	ldr	r3, [pc, #392]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa02:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa06:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ab8c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800aa22:	e087      	b.n	800ab34 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ab90 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa36:	4b51      	ldr	r3, [pc, #324]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa3e:	ee07 3a90 	vmov	s15, r3
 800aa42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa46:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ab8c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa66:	e065      	b.n	800ab34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa72:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa7a:	4b40      	ldr	r3, [pc, #256]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa82:	ee07 3a90 	vmov	s15, r3
 800aa86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa8a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ab8c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaaa:	e043      	b.n	800ab34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	ee07 3a90 	vmov	s15, r3
 800aab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ab98 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aaba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aabe:	4b2f      	ldr	r3, [pc, #188]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aace:	ed97 6a02 	vldr	s12, [r7, #8]
 800aad2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ab8c <HAL_RCC_GetSysClockFreq+0x2e4>
 800aad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaee:	e021      	b.n	800ab34 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	ee07 3a90 	vmov	s15, r3
 800aaf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafa:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ab94 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aafe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab02:	4b1e      	ldr	r3, [pc, #120]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab0a:	ee07 3a90 	vmov	s15, r3
 800ab0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab12:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ab8c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab32:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ab34:	4b11      	ldr	r3, [pc, #68]	; (800ab7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab38:	0a5b      	lsrs	r3, r3, #9
 800ab3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab3e:	3301      	adds	r3, #1
 800ab40:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	ee07 3a90 	vmov	s15, r3
 800ab48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab58:	ee17 3a90 	vmov	r3, s15
 800ab5c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ab5e:	e005      	b.n	800ab6c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ab60:	2300      	movs	r3, #0
 800ab62:	61bb      	str	r3, [r7, #24]
    break;
 800ab64:	e002      	b.n	800ab6c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ab66:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab68:	61bb      	str	r3, [r7, #24]
    break;
 800ab6a:	bf00      	nop
  }

  return sysclockfreq;
 800ab6c:	69bb      	ldr	r3, [r7, #24]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3724      	adds	r7, #36	; 0x24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	58024400 	.word	0x58024400
 800ab80:	03d09000 	.word	0x03d09000
 800ab84:	003d0900 	.word	0x003d0900
 800ab88:	017d7840 	.word	0x017d7840
 800ab8c:	46000000 	.word	0x46000000
 800ab90:	4c742400 	.word	0x4c742400
 800ab94:	4a742400 	.word	0x4a742400
 800ab98:	4bbebc20 	.word	0x4bbebc20

0800ab9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aba2:	f7ff fe81 	bl	800a8a8 <HAL_RCC_GetSysClockFreq>
 800aba6:	4602      	mov	r2, r0
 800aba8:	4b10      	ldr	r3, [pc, #64]	; (800abec <HAL_RCC_GetHCLKFreq+0x50>)
 800abaa:	699b      	ldr	r3, [r3, #24]
 800abac:	0a1b      	lsrs	r3, r3, #8
 800abae:	f003 030f 	and.w	r3, r3, #15
 800abb2:	490f      	ldr	r1, [pc, #60]	; (800abf0 <HAL_RCC_GetHCLKFreq+0x54>)
 800abb4:	5ccb      	ldrb	r3, [r1, r3]
 800abb6:	f003 031f 	and.w	r3, r3, #31
 800abba:	fa22 f303 	lsr.w	r3, r2, r3
 800abbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abc0:	4b0a      	ldr	r3, [pc, #40]	; (800abec <HAL_RCC_GetHCLKFreq+0x50>)
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	f003 030f 	and.w	r3, r3, #15
 800abc8:	4a09      	ldr	r2, [pc, #36]	; (800abf0 <HAL_RCC_GetHCLKFreq+0x54>)
 800abca:	5cd3      	ldrb	r3, [r2, r3]
 800abcc:	f003 031f 	and.w	r3, r3, #31
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	fa22 f303 	lsr.w	r3, r2, r3
 800abd6:	4a07      	ldr	r2, [pc, #28]	; (800abf4 <HAL_RCC_GetHCLKFreq+0x58>)
 800abd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abda:	4a07      	ldr	r2, [pc, #28]	; (800abf8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800abe0:	4b04      	ldr	r3, [pc, #16]	; (800abf4 <HAL_RCC_GetHCLKFreq+0x58>)
 800abe2:	681b      	ldr	r3, [r3, #0]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	58024400 	.word	0x58024400
 800abf0:	08012fdc 	.word	0x08012fdc
 800abf4:	2400001c 	.word	0x2400001c
 800abf8:	24000018 	.word	0x24000018

0800abfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac00:	f7ff ffcc 	bl	800ab9c <HAL_RCC_GetHCLKFreq>
 800ac04:	4602      	mov	r2, r0
 800ac06:	4b06      	ldr	r3, [pc, #24]	; (800ac20 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac08:	69db      	ldr	r3, [r3, #28]
 800ac0a:	091b      	lsrs	r3, r3, #4
 800ac0c:	f003 0307 	and.w	r3, r3, #7
 800ac10:	4904      	ldr	r1, [pc, #16]	; (800ac24 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac12:	5ccb      	ldrb	r3, [r1, r3]
 800ac14:	f003 031f 	and.w	r3, r3, #31
 800ac18:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	58024400 	.word	0x58024400
 800ac24:	08012fdc 	.word	0x08012fdc

0800ac28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac2c:	f7ff ffb6 	bl	800ab9c <HAL_RCC_GetHCLKFreq>
 800ac30:	4602      	mov	r2, r0
 800ac32:	4b06      	ldr	r3, [pc, #24]	; (800ac4c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac34:	69db      	ldr	r3, [r3, #28]
 800ac36:	0a1b      	lsrs	r3, r3, #8
 800ac38:	f003 0307 	and.w	r3, r3, #7
 800ac3c:	4904      	ldr	r1, [pc, #16]	; (800ac50 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac3e:	5ccb      	ldrb	r3, [r1, r3]
 800ac40:	f003 031f 	and.w	r3, r3, #31
 800ac44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	58024400 	.word	0x58024400
 800ac50:	08012fdc 	.word	0x08012fdc

0800ac54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac60:	2300      	movs	r3, #0
 800ac62:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d03f      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac78:	d02a      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ac7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac7e:	d824      	bhi.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ac80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac84:	d018      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ac86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac8a:	d81e      	bhi.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d003      	beq.n	800ac98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ac90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac94:	d007      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ac96:	e018      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac98:	4bab      	ldr	r3, [pc, #684]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9c:	4aaa      	ldr	r2, [pc, #680]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ac9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800aca4:	e015      	b.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	3304      	adds	r3, #4
 800acaa:	2102      	movs	r1, #2
 800acac:	4618      	mov	r0, r3
 800acae:	f001 f9cf 	bl	800c050 <RCCEx_PLL2_Config>
 800acb2:	4603      	mov	r3, r0
 800acb4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800acb6:	e00c      	b.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	3324      	adds	r3, #36	; 0x24
 800acbc:	2102      	movs	r1, #2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f001 fa78 	bl	800c1b4 <RCCEx_PLL3_Config>
 800acc4:	4603      	mov	r3, r0
 800acc6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800acc8:	e003      	b.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	75fb      	strb	r3, [r7, #23]
      break;
 800acce:	e000      	b.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800acd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acd2:	7dfb      	ldrb	r3, [r7, #23]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d109      	bne.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800acd8:	4b9b      	ldr	r3, [pc, #620]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800acda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ace4:	4998      	ldr	r1, [pc, #608]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	650b      	str	r3, [r1, #80]	; 0x50
 800acea:	e001      	b.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acec:	7dfb      	ldrb	r3, [r7, #23]
 800acee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d03d      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad00:	2b04      	cmp	r3, #4
 800ad02:	d826      	bhi.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ad04:	a201      	add	r2, pc, #4	; (adr r2, 800ad0c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800ad06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0a:	bf00      	nop
 800ad0c:	0800ad21 	.word	0x0800ad21
 800ad10:	0800ad2f 	.word	0x0800ad2f
 800ad14:	0800ad41 	.word	0x0800ad41
 800ad18:	0800ad59 	.word	0x0800ad59
 800ad1c:	0800ad59 	.word	0x0800ad59
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad20:	4b89      	ldr	r3, [pc, #548]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad24:	4a88      	ldr	r2, [pc, #544]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad2c:	e015      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	3304      	adds	r3, #4
 800ad32:	2100      	movs	r1, #0
 800ad34:	4618      	mov	r0, r3
 800ad36:	f001 f98b 	bl	800c050 <RCCEx_PLL2_Config>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad3e:	e00c      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3324      	adds	r3, #36	; 0x24
 800ad44:	2100      	movs	r1, #0
 800ad46:	4618      	mov	r0, r3
 800ad48:	f001 fa34 	bl	800c1b4 <RCCEx_PLL3_Config>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad50:	e003      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	75fb      	strb	r3, [r7, #23]
      break;
 800ad56:	e000      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ad58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d109      	bne.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad60:	4b79      	ldr	r3, [pc, #484]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad64:	f023 0207 	bic.w	r2, r3, #7
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad6c:	4976      	ldr	r1, [pc, #472]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	650b      	str	r3, [r1, #80]	; 0x50
 800ad72:	e001      	b.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d042      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad8c:	d02b      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ad8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad92:	d825      	bhi.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ad94:	2bc0      	cmp	r3, #192	; 0xc0
 800ad96:	d028      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ad98:	2bc0      	cmp	r3, #192	; 0xc0
 800ad9a:	d821      	bhi.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ad9c:	2b80      	cmp	r3, #128	; 0x80
 800ad9e:	d016      	beq.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ada0:	2b80      	cmp	r3, #128	; 0x80
 800ada2:	d81d      	bhi.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ada8:	2b40      	cmp	r3, #64	; 0x40
 800adaa:	d007      	beq.n	800adbc <HAL_RCCEx_PeriphCLKConfig+0x168>
 800adac:	e018      	b.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adae:	4b66      	ldr	r3, [pc, #408]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb2:	4a65      	ldr	r2, [pc, #404]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800adba:	e017      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3304      	adds	r3, #4
 800adc0:	2100      	movs	r1, #0
 800adc2:	4618      	mov	r0, r3
 800adc4:	f001 f944 	bl	800c050 <RCCEx_PLL2_Config>
 800adc8:	4603      	mov	r3, r0
 800adca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800adcc:	e00e      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	3324      	adds	r3, #36	; 0x24
 800add2:	2100      	movs	r1, #0
 800add4:	4618      	mov	r0, r3
 800add6:	f001 f9ed 	bl	800c1b4 <RCCEx_PLL3_Config>
 800adda:	4603      	mov	r3, r0
 800addc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800adde:	e005      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	75fb      	strb	r3, [r7, #23]
      break;
 800ade4:	e002      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ade6:	bf00      	nop
 800ade8:	e000      	b.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800adea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d109      	bne.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800adf2:	4b55      	ldr	r3, [pc, #340]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800adf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adf6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adfe:	4952      	ldr	r1, [pc, #328]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae00:	4313      	orrs	r3, r2
 800ae02:	650b      	str	r3, [r1, #80]	; 0x50
 800ae04:	e001      	b.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae06:	7dfb      	ldrb	r3, [r7, #23]
 800ae08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d049      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae20:	d030      	beq.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ae22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae26:	d82a      	bhi.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ae28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae2c:	d02c      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ae2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae32:	d824      	bhi.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ae34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae38:	d018      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ae3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae3e:	d81e      	bhi.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d003      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ae44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae48:	d007      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ae4a:	e018      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae4c:	4b3e      	ldr	r3, [pc, #248]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae50:	4a3d      	ldr	r2, [pc, #244]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae58:	e017      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	2100      	movs	r1, #0
 800ae60:	4618      	mov	r0, r3
 800ae62:	f001 f8f5 	bl	800c050 <RCCEx_PLL2_Config>
 800ae66:	4603      	mov	r3, r0
 800ae68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ae6a:	e00e      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	3324      	adds	r3, #36	; 0x24
 800ae70:	2100      	movs	r1, #0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f001 f99e 	bl	800c1b4 <RCCEx_PLL3_Config>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae7c:	e005      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	75fb      	strb	r3, [r7, #23]
      break;
 800ae82:	e002      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ae84:	bf00      	nop
 800ae86:	e000      	b.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800ae88:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae8a:	7dfb      	ldrb	r3, [r7, #23]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ae90:	4b2d      	ldr	r3, [pc, #180]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ae92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae94:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae9e:	492a      	ldr	r1, [pc, #168]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	658b      	str	r3, [r1, #88]	; 0x58
 800aea4:	e001      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea6:	7dfb      	ldrb	r3, [r7, #23]
 800aea8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d04c      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aebc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aec0:	d030      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800aec2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aec6:	d82a      	bhi.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aec8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aecc:	d02c      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800aece:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aed2:	d824      	bhi.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aed4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aed8:	d018      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800aeda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aede:	d81e      	bhi.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d003      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aee8:	d007      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aeea:	e018      	b.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeec:	4b16      	ldr	r3, [pc, #88]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef0:	4a15      	ldr	r2, [pc, #84]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aef6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aef8:	e017      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	3304      	adds	r3, #4
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f001 f8a5 	bl	800c050 <RCCEx_PLL2_Config>
 800af06:	4603      	mov	r3, r0
 800af08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800af0a:	e00e      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	3324      	adds	r3, #36	; 0x24
 800af10:	2100      	movs	r1, #0
 800af12:	4618      	mov	r0, r3
 800af14:	f001 f94e 	bl	800c1b4 <RCCEx_PLL3_Config>
 800af18:	4603      	mov	r3, r0
 800af1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af1c:	e005      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	75fb      	strb	r3, [r7, #23]
      break;
 800af22:	e002      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800af24:	bf00      	nop
 800af26:	e000      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800af28:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af2a:	7dfb      	ldrb	r3, [r7, #23]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10d      	bne.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800af30:	4b05      	ldr	r3, [pc, #20]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af3e:	4902      	ldr	r1, [pc, #8]	; (800af48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800af40:	4313      	orrs	r3, r2
 800af42:	658b      	str	r3, [r1, #88]	; 0x58
 800af44:	e004      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800af46:	bf00      	nop
 800af48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
 800af4e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d032      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af60:	2b30      	cmp	r3, #48	; 0x30
 800af62:	d01c      	beq.n	800af9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800af64:	2b30      	cmp	r3, #48	; 0x30
 800af66:	d817      	bhi.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800af68:	2b20      	cmp	r3, #32
 800af6a:	d00c      	beq.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800af6c:	2b20      	cmp	r3, #32
 800af6e:	d813      	bhi.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800af70:	2b00      	cmp	r3, #0
 800af72:	d016      	beq.n	800afa2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800af74:	2b10      	cmp	r3, #16
 800af76:	d10f      	bne.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af78:	4baf      	ldr	r3, [pc, #700]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	4aae      	ldr	r2, [pc, #696]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800af7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800af84:	e00e      	b.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3304      	adds	r3, #4
 800af8a:	2102      	movs	r1, #2
 800af8c:	4618      	mov	r0, r3
 800af8e:	f001 f85f 	bl	800c050 <RCCEx_PLL2_Config>
 800af92:	4603      	mov	r3, r0
 800af94:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800af96:	e005      	b.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	75fb      	strb	r3, [r7, #23]
      break;
 800af9c:	e002      	b.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800af9e:	bf00      	nop
 800afa0:	e000      	b.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800afa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afa4:	7dfb      	ldrb	r3, [r7, #23]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d109      	bne.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800afaa:	4ba3      	ldr	r3, [pc, #652]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800afac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afb6:	49a0      	ldr	r1, [pc, #640]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800afb8:	4313      	orrs	r3, r2
 800afba:	64cb      	str	r3, [r1, #76]	; 0x4c
 800afbc:	e001      	b.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afbe:	7dfb      	ldrb	r3, [r7, #23]
 800afc0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d047      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afd6:	d030      	beq.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800afd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afdc:	d82a      	bhi.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800afde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800afe2:	d02c      	beq.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800afe4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800afe8:	d824      	bhi.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800afea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afee:	d018      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800aff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aff4:	d81e      	bhi.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800affa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800affe:	d007      	beq.n	800b010 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b000:	e018      	b.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b002:	4b8d      	ldr	r3, [pc, #564]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b006:	4a8c      	ldr	r2, [pc, #560]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b00c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b00e:	e017      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3304      	adds	r3, #4
 800b014:	2100      	movs	r1, #0
 800b016:	4618      	mov	r0, r3
 800b018:	f001 f81a 	bl	800c050 <RCCEx_PLL2_Config>
 800b01c:	4603      	mov	r3, r0
 800b01e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b020:	e00e      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	3324      	adds	r3, #36	; 0x24
 800b026:	2100      	movs	r1, #0
 800b028:	4618      	mov	r0, r3
 800b02a:	f001 f8c3 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b02e:	4603      	mov	r3, r0
 800b030:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b032:	e005      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	75fb      	strb	r3, [r7, #23]
      break;
 800b038:	e002      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b03a:	bf00      	nop
 800b03c:	e000      	b.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b03e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b040:	7dfb      	ldrb	r3, [r7, #23]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d109      	bne.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b046:	4b7c      	ldr	r3, [pc, #496]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b04a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b052:	4979      	ldr	r1, [pc, #484]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b054:	4313      	orrs	r3, r2
 800b056:	650b      	str	r3, [r1, #80]	; 0x50
 800b058:	e001      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b05a:	7dfb      	ldrb	r3, [r7, #23]
 800b05c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b066:	2b00      	cmp	r3, #0
 800b068:	d049      	beq.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b06e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b072:	d02e      	beq.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b074:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b078:	d828      	bhi.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b07a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b07e:	d02a      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b080:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b084:	d822      	bhi.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b086:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b08a:	d026      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b08c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b090:	d81c      	bhi.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b096:	d010      	beq.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x466>
 800b098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b09c:	d816      	bhi.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d01d      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800b0a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0a6:	d111      	bne.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	3304      	adds	r3, #4
 800b0ac:	2101      	movs	r1, #1
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f000 ffce 	bl	800c050 <RCCEx_PLL2_Config>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b0b8:	e012      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3324      	adds	r3, #36	; 0x24
 800b0be:	2101      	movs	r1, #1
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f001 f877 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b0ca:	e009      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b0d0:	e006      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b0d2:	bf00      	nop
 800b0d4:	e004      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b0d6:	bf00      	nop
 800b0d8:	e002      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b0da:	bf00      	nop
 800b0dc:	e000      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b0de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d109      	bne.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b0e6:	4b54      	ldr	r3, [pc, #336]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0f2:	4951      	ldr	r1, [pc, #324]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	650b      	str	r3, [r1, #80]	; 0x50
 800b0f8:	e001      	b.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d04b      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b114:	d02e      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b11a:	d828      	bhi.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b120:	d02a      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b126:	d822      	bhi.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b128:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b12c:	d026      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b12e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b132:	d81c      	bhi.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b138:	d010      	beq.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b13a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b13e:	d816      	bhi.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b140:	2b00      	cmp	r3, #0
 800b142:	d01d      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b148:	d111      	bne.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	3304      	adds	r3, #4
 800b14e:	2101      	movs	r1, #1
 800b150:	4618      	mov	r0, r3
 800b152:	f000 ff7d 	bl	800c050 <RCCEx_PLL2_Config>
 800b156:	4603      	mov	r3, r0
 800b158:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b15a:	e012      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	3324      	adds	r3, #36	; 0x24
 800b160:	2101      	movs	r1, #1
 800b162:	4618      	mov	r0, r3
 800b164:	f001 f826 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b168:	4603      	mov	r3, r0
 800b16a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b16c:	e009      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	75fb      	strb	r3, [r7, #23]
      break;
 800b172:	e006      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b174:	bf00      	nop
 800b176:	e004      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b178:	bf00      	nop
 800b17a:	e002      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b17c:	bf00      	nop
 800b17e:	e000      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b180:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b182:	7dfb      	ldrb	r3, [r7, #23]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d10a      	bne.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b188:	4b2b      	ldr	r3, [pc, #172]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b18a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b18c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b196:	4928      	ldr	r1, [pc, #160]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b198:	4313      	orrs	r3, r2
 800b19a:	658b      	str	r3, [r1, #88]	; 0x58
 800b19c:	e001      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b19e:	7dfb      	ldrb	r3, [r7, #23]
 800b1a0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d02f      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1b6:	d00e      	beq.n	800b1d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b1b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1bc:	d814      	bhi.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d015      	beq.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b1c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1c6:	d10f      	bne.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1c8:	4b1b      	ldr	r3, [pc, #108]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1cc:	4a1a      	ldr	r2, [pc, #104]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b1ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b1d4:	e00c      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	2101      	movs	r1, #1
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 ff37 	bl	800c050 <RCCEx_PLL2_Config>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b1e6:	e003      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b1ec:	e000      	b.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b1ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1f0:	7dfb      	ldrb	r3, [r7, #23]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d109      	bne.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b1f6:	4b10      	ldr	r3, [pc, #64]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b202:	490d      	ldr	r1, [pc, #52]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b204:	4313      	orrs	r3, r2
 800b206:	650b      	str	r3, [r1, #80]	; 0x50
 800b208:	e001      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b20a:	7dfb      	ldrb	r3, [r7, #23]
 800b20c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b216:	2b00      	cmp	r3, #0
 800b218:	d033      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d81c      	bhi.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b222:	a201      	add	r2, pc, #4	; (adr r2, 800b228 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b228:	0800b263 	.word	0x0800b263
 800b22c:	0800b23d 	.word	0x0800b23d
 800b230:	0800b24b 	.word	0x0800b24b
 800b234:	0800b263 	.word	0x0800b263
 800b238:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b23c:	4bb8      	ldr	r3, [pc, #736]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b240:	4ab7      	ldr	r2, [pc, #732]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b248:	e00c      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	3304      	adds	r3, #4
 800b24e:	2102      	movs	r1, #2
 800b250:	4618      	mov	r0, r3
 800b252:	f000 fefd 	bl	800c050 <RCCEx_PLL2_Config>
 800b256:	4603      	mov	r3, r0
 800b258:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b25a:	e003      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	75fb      	strb	r3, [r7, #23]
      break;
 800b260:	e000      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b262:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b264:	7dfb      	ldrb	r3, [r7, #23]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d109      	bne.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b26a:	4bad      	ldr	r3, [pc, #692]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b26e:	f023 0203 	bic.w	r2, r3, #3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b276:	49aa      	ldr	r1, [pc, #680]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b278:	4313      	orrs	r3, r2
 800b27a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b27c:	e001      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
 800b280:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f000 8086 	beq.w	800b39c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b290:	4ba4      	ldr	r3, [pc, #656]	; (800b524 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4aa3      	ldr	r2, [pc, #652]	; (800b524 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b29a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b29c:	f7f9 f946 	bl	800452c <HAL_GetTick>
 800b2a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2a2:	e009      	b.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2a4:	f7f9 f942 	bl	800452c <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	2b64      	cmp	r3, #100	; 0x64
 800b2b0:	d902      	bls.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	75fb      	strb	r3, [r7, #23]
        break;
 800b2b6:	e005      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2b8:	4b9a      	ldr	r3, [pc, #616]	; (800b524 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d0ef      	beq.n	800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b2c4:	7dfb      	ldrb	r3, [r7, #23]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d166      	bne.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b2ca:	4b95      	ldr	r3, [pc, #596]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2d4:	4053      	eors	r3, r2
 800b2d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d013      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b2de:	4b90      	ldr	r3, [pc, #576]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2e8:	4b8d      	ldr	r3, [pc, #564]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ec:	4a8c      	ldr	r2, [pc, #560]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b2f4:	4b8a      	ldr	r3, [pc, #552]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f8:	4a89      	ldr	r2, [pc, #548]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b2fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b300:	4a87      	ldr	r2, [pc, #540]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b30c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b310:	d115      	bne.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b312:	f7f9 f90b 	bl	800452c <HAL_GetTick>
 800b316:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b318:	e00b      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b31a:	f7f9 f907 	bl	800452c <HAL_GetTick>
 800b31e:	4602      	mov	r2, r0
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	1ad3      	subs	r3, r2, r3
 800b324:	f241 3288 	movw	r2, #5000	; 0x1388
 800b328:	4293      	cmp	r3, r2
 800b32a:	d902      	bls.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b32c:	2303      	movs	r3, #3
 800b32e:	75fb      	strb	r3, [r7, #23]
            break;
 800b330:	e005      	b.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b332:	4b7b      	ldr	r3, [pc, #492]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b336:	f003 0302 	and.w	r3, r3, #2
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0ed      	beq.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d126      	bne.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b34a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b34e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b352:	d10d      	bne.n	800b370 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b354:	4b72      	ldr	r3, [pc, #456]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b362:	0919      	lsrs	r1, r3, #4
 800b364:	4b70      	ldr	r3, [pc, #448]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b366:	400b      	ands	r3, r1
 800b368:	496d      	ldr	r1, [pc, #436]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b36a:	4313      	orrs	r3, r2
 800b36c:	610b      	str	r3, [r1, #16]
 800b36e:	e005      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b370:	4b6b      	ldr	r3, [pc, #428]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	4a6a      	ldr	r2, [pc, #424]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b376:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b37a:	6113      	str	r3, [r2, #16]
 800b37c:	4b68      	ldr	r3, [pc, #416]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b37e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b38a:	4965      	ldr	r1, [pc, #404]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b38c:	4313      	orrs	r3, r2
 800b38e:	670b      	str	r3, [r1, #112]	; 0x70
 800b390:	e004      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b392:	7dfb      	ldrb	r3, [r7, #23]
 800b394:	75bb      	strb	r3, [r7, #22]
 800b396:	e001      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b398:	7dfb      	ldrb	r3, [r7, #23]
 800b39a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d07e      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3ac:	2b28      	cmp	r3, #40	; 0x28
 800b3ae:	d867      	bhi.n	800b480 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b3b0:	a201      	add	r2, pc, #4	; (adr r2, 800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b6:	bf00      	nop
 800b3b8:	0800b487 	.word	0x0800b487
 800b3bc:	0800b481 	.word	0x0800b481
 800b3c0:	0800b481 	.word	0x0800b481
 800b3c4:	0800b481 	.word	0x0800b481
 800b3c8:	0800b481 	.word	0x0800b481
 800b3cc:	0800b481 	.word	0x0800b481
 800b3d0:	0800b481 	.word	0x0800b481
 800b3d4:	0800b481 	.word	0x0800b481
 800b3d8:	0800b45d 	.word	0x0800b45d
 800b3dc:	0800b481 	.word	0x0800b481
 800b3e0:	0800b481 	.word	0x0800b481
 800b3e4:	0800b481 	.word	0x0800b481
 800b3e8:	0800b481 	.word	0x0800b481
 800b3ec:	0800b481 	.word	0x0800b481
 800b3f0:	0800b481 	.word	0x0800b481
 800b3f4:	0800b481 	.word	0x0800b481
 800b3f8:	0800b46f 	.word	0x0800b46f
 800b3fc:	0800b481 	.word	0x0800b481
 800b400:	0800b481 	.word	0x0800b481
 800b404:	0800b481 	.word	0x0800b481
 800b408:	0800b481 	.word	0x0800b481
 800b40c:	0800b481 	.word	0x0800b481
 800b410:	0800b481 	.word	0x0800b481
 800b414:	0800b481 	.word	0x0800b481
 800b418:	0800b487 	.word	0x0800b487
 800b41c:	0800b481 	.word	0x0800b481
 800b420:	0800b481 	.word	0x0800b481
 800b424:	0800b481 	.word	0x0800b481
 800b428:	0800b481 	.word	0x0800b481
 800b42c:	0800b481 	.word	0x0800b481
 800b430:	0800b481 	.word	0x0800b481
 800b434:	0800b481 	.word	0x0800b481
 800b438:	0800b487 	.word	0x0800b487
 800b43c:	0800b481 	.word	0x0800b481
 800b440:	0800b481 	.word	0x0800b481
 800b444:	0800b481 	.word	0x0800b481
 800b448:	0800b481 	.word	0x0800b481
 800b44c:	0800b481 	.word	0x0800b481
 800b450:	0800b481 	.word	0x0800b481
 800b454:	0800b481 	.word	0x0800b481
 800b458:	0800b487 	.word	0x0800b487
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3304      	adds	r3, #4
 800b460:	2101      	movs	r1, #1
 800b462:	4618      	mov	r0, r3
 800b464:	f000 fdf4 	bl	800c050 <RCCEx_PLL2_Config>
 800b468:	4603      	mov	r3, r0
 800b46a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b46c:	e00c      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	3324      	adds	r3, #36	; 0x24
 800b472:	2101      	movs	r1, #1
 800b474:	4618      	mov	r0, r3
 800b476:	f000 fe9d 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b47a:	4603      	mov	r3, r0
 800b47c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b47e:	e003      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	75fb      	strb	r3, [r7, #23]
      break;
 800b484:	e000      	b.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b486:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b488:	7dfb      	ldrb	r3, [r7, #23]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d109      	bne.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b48e:	4b24      	ldr	r3, [pc, #144]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b492:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b49a:	4921      	ldr	r1, [pc, #132]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b49c:	4313      	orrs	r3, r2
 800b49e:	654b      	str	r3, [r1, #84]	; 0x54
 800b4a0:	e001      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
 800b4a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 0302 	and.w	r3, r3, #2
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d03e      	beq.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4b6:	2b05      	cmp	r3, #5
 800b4b8:	d820      	bhi.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b4ba:	a201      	add	r2, pc, #4	; (adr r2, 800b4c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c0:	0800b503 	.word	0x0800b503
 800b4c4:	0800b4d9 	.word	0x0800b4d9
 800b4c8:	0800b4eb 	.word	0x0800b4eb
 800b4cc:	0800b503 	.word	0x0800b503
 800b4d0:	0800b503 	.word	0x0800b503
 800b4d4:	0800b503 	.word	0x0800b503
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3304      	adds	r3, #4
 800b4dc:	2101      	movs	r1, #1
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f000 fdb6 	bl	800c050 <RCCEx_PLL2_Config>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b4e8:	e00c      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	3324      	adds	r3, #36	; 0x24
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 fe5f 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b4fa:	e003      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b500:	e000      	b.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800b502:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b504:	7dfb      	ldrb	r3, [r7, #23]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d110      	bne.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b50a:	4b05      	ldr	r3, [pc, #20]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b50c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b50e:	f023 0207 	bic.w	r2, r3, #7
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b516:	4902      	ldr	r1, [pc, #8]	; (800b520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b518:	4313      	orrs	r3, r2
 800b51a:	654b      	str	r3, [r1, #84]	; 0x54
 800b51c:	e008      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b51e:	bf00      	nop
 800b520:	58024400 	.word	0x58024400
 800b524:	58024800 	.word	0x58024800
 800b528:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b52c:	7dfb      	ldrb	r3, [r7, #23]
 800b52e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f003 0304 	and.w	r3, r3, #4
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d039      	beq.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b542:	2b05      	cmp	r3, #5
 800b544:	d820      	bhi.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800b546:	a201      	add	r2, pc, #4	; (adr r2, 800b54c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800b548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54c:	0800b58f 	.word	0x0800b58f
 800b550:	0800b565 	.word	0x0800b565
 800b554:	0800b577 	.word	0x0800b577
 800b558:	0800b58f 	.word	0x0800b58f
 800b55c:	0800b58f 	.word	0x0800b58f
 800b560:	0800b58f 	.word	0x0800b58f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3304      	adds	r3, #4
 800b568:	2101      	movs	r1, #1
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 fd70 	bl	800c050 <RCCEx_PLL2_Config>
 800b570:	4603      	mov	r3, r0
 800b572:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b574:	e00c      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	3324      	adds	r3, #36	; 0x24
 800b57a:	2101      	movs	r1, #1
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 fe19 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b582:	4603      	mov	r3, r0
 800b584:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b586:	e003      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	75fb      	strb	r3, [r7, #23]
      break;
 800b58c:	e000      	b.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800b58e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b590:	7dfb      	ldrb	r3, [r7, #23]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10a      	bne.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b596:	4bb7      	ldr	r3, [pc, #732]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b59a:	f023 0207 	bic.w	r2, r3, #7
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5a4:	49b3      	ldr	r1, [pc, #716]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	658b      	str	r3, [r1, #88]	; 0x58
 800b5aa:	e001      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ac:	7dfb      	ldrb	r3, [r7, #23]
 800b5ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f003 0320 	and.w	r3, r3, #32
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d04b      	beq.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5c6:	d02e      	beq.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b5c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5cc:	d828      	bhi.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5d2:	d02a      	beq.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b5d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5d8:	d822      	bhi.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b5da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5de:	d026      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b5e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5e4:	d81c      	bhi.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b5e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5ea:	d010      	beq.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800b5ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5f0:	d816      	bhi.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d01d      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b5f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5fa:	d111      	bne.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3304      	adds	r3, #4
 800b600:	2100      	movs	r1, #0
 800b602:	4618      	mov	r0, r3
 800b604:	f000 fd24 	bl	800c050 <RCCEx_PLL2_Config>
 800b608:	4603      	mov	r3, r0
 800b60a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b60c:	e012      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	3324      	adds	r3, #36	; 0x24
 800b612:	2102      	movs	r1, #2
 800b614:	4618      	mov	r0, r3
 800b616:	f000 fdcd 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b61a:	4603      	mov	r3, r0
 800b61c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b61e:	e009      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	75fb      	strb	r3, [r7, #23]
      break;
 800b624:	e006      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b626:	bf00      	nop
 800b628:	e004      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b62a:	bf00      	nop
 800b62c:	e002      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b62e:	bf00      	nop
 800b630:	e000      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800b632:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10a      	bne.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b63a:	4b8e      	ldr	r3, [pc, #568]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b63e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b648:	498a      	ldr	r1, [pc, #552]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b64a:	4313      	orrs	r3, r2
 800b64c:	654b      	str	r3, [r1, #84]	; 0x54
 800b64e:	e001      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b650:	7dfb      	ldrb	r3, [r7, #23]
 800b652:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d04b      	beq.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b666:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b66a:	d02e      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800b66c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b670:	d828      	bhi.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b676:	d02a      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b67c:	d822      	bhi.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b67e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b682:	d026      	beq.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b684:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b688:	d81c      	bhi.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b68a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b68e:	d010      	beq.n	800b6b2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800b690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b694:	d816      	bhi.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800b696:	2b00      	cmp	r3, #0
 800b698:	d01d      	beq.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b69a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b69e:	d111      	bne.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 fcd2 	bl	800c050 <RCCEx_PLL2_Config>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b6b0:	e012      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	3324      	adds	r3, #36	; 0x24
 800b6b6:	2102      	movs	r1, #2
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 fd7b 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b6c2:	e009      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b6c8:	e006      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b6ca:	bf00      	nop
 800b6cc:	e004      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b6ce:	bf00      	nop
 800b6d0:	e002      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b6d2:	bf00      	nop
 800b6d4:	e000      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800b6d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6d8:	7dfb      	ldrb	r3, [r7, #23]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10a      	bne.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b6de:	4b65      	ldr	r3, [pc, #404]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6ec:	4961      	ldr	r1, [pc, #388]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	658b      	str	r3, [r1, #88]	; 0x58
 800b6f2:	e001      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6f4:	7dfb      	ldrb	r3, [r7, #23]
 800b6f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b700:	2b00      	cmp	r3, #0
 800b702:	d04b      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b70a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b70e:	d02e      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800b710:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b714:	d828      	bhi.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b71a:	d02a      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800b71c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b720:	d822      	bhi.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b722:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b726:	d026      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b728:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b72c:	d81c      	bhi.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b72e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b732:	d010      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800b734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b738:	d816      	bhi.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d01d      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b73e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b742:	d111      	bne.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	3304      	adds	r3, #4
 800b748:	2100      	movs	r1, #0
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 fc80 	bl	800c050 <RCCEx_PLL2_Config>
 800b750:	4603      	mov	r3, r0
 800b752:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b754:	e012      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	3324      	adds	r3, #36	; 0x24
 800b75a:	2102      	movs	r1, #2
 800b75c:	4618      	mov	r0, r3
 800b75e:	f000 fd29 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b762:	4603      	mov	r3, r0
 800b764:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b766:	e009      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	75fb      	strb	r3, [r7, #23]
      break;
 800b76c:	e006      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b76e:	bf00      	nop
 800b770:	e004      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b772:	bf00      	nop
 800b774:	e002      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b776:	bf00      	nop
 800b778:	e000      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800b77a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b77c:	7dfb      	ldrb	r3, [r7, #23]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10a      	bne.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b782:	4b3c      	ldr	r3, [pc, #240]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b790:	4938      	ldr	r1, [pc, #224]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b792:	4313      	orrs	r3, r2
 800b794:	658b      	str	r3, [r1, #88]	; 0x58
 800b796:	e001      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b798:	7dfb      	ldrb	r3, [r7, #23]
 800b79a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f003 0308 	and.w	r3, r3, #8
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d01a      	beq.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7b2:	d10a      	bne.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3324      	adds	r3, #36	; 0x24
 800b7b8:	2102      	movs	r1, #2
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 fcfa 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b7ca:	4b2a      	ldr	r3, [pc, #168]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b7cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7d8:	4926      	ldr	r1, [pc, #152]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 0310 	and.w	r3, r3, #16
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d01a      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7f4:	d10a      	bne.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	3324      	adds	r3, #36	; 0x24
 800b7fa:	2102      	movs	r1, #2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f000 fcd9 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b80c:	4b19      	ldr	r3, [pc, #100]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b80e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b81a:	4916      	ldr	r1, [pc, #88]	; (800b874 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800b81c:	4313      	orrs	r3, r2
 800b81e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d036      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b836:	d01f      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b83c:	d817      	bhi.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d003      	beq.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b846:	d009      	beq.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800b848:	e011      	b.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	3304      	adds	r3, #4
 800b84e:	2100      	movs	r1, #0
 800b850:	4618      	mov	r0, r3
 800b852:	f000 fbfd 	bl	800c050 <RCCEx_PLL2_Config>
 800b856:	4603      	mov	r3, r0
 800b858:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b85a:	e00e      	b.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3324      	adds	r3, #36	; 0x24
 800b860:	2102      	movs	r1, #2
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fca6 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b868:	4603      	mov	r3, r0
 800b86a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b86c:	e005      	b.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	75fb      	strb	r3, [r7, #23]
      break;
 800b872:	e002      	b.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800b874:	58024400 	.word	0x58024400
      break;
 800b878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b87a:	7dfb      	ldrb	r3, [r7, #23]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10a      	bne.n	800b896 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b880:	4b93      	ldr	r3, [pc, #588]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b884:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b88e:	4990      	ldr	r1, [pc, #576]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b890:	4313      	orrs	r3, r2
 800b892:	658b      	str	r3, [r1, #88]	; 0x58
 800b894:	e001      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b896:	7dfb      	ldrb	r3, [r7, #23]
 800b898:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d033      	beq.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8b0:	d01c      	beq.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800b8b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8b6:	d816      	bhi.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800b8b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8bc:	d003      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800b8be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8c2:	d007      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800b8c4:	e00f      	b.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8c6:	4b82      	ldr	r3, [pc, #520]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ca:	4a81      	ldr	r2, [pc, #516]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b8d2:	e00c      	b.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3324      	adds	r3, #36	; 0x24
 800b8d8:	2101      	movs	r1, #1
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 fc6a 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b8e4:	e003      	b.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b8ea:	e000      	b.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800b8ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10a      	bne.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b8f4:	4b76      	ldr	r3, [pc, #472]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b8f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b902:	4973      	ldr	r1, [pc, #460]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b904:	4313      	orrs	r3, r2
 800b906:	654b      	str	r3, [r1, #84]	; 0x54
 800b908:	e001      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b916:	2b00      	cmp	r3, #0
 800b918:	d029      	beq.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d003      	beq.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800b922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b926:	d007      	beq.n	800b938 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800b928:	e00f      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b92a:	4b69      	ldr	r3, [pc, #420]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92e:	4a68      	ldr	r2, [pc, #416]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b934:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b936:	e00b      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	3304      	adds	r3, #4
 800b93c:	2102      	movs	r1, #2
 800b93e:	4618      	mov	r0, r3
 800b940:	f000 fb86 	bl	800c050 <RCCEx_PLL2_Config>
 800b944:	4603      	mov	r3, r0
 800b946:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b948:	e002      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	75fb      	strb	r3, [r7, #23]
      break;
 800b94e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b950:	7dfb      	ldrb	r3, [r7, #23]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d109      	bne.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b956:	4b5e      	ldr	r3, [pc, #376]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b95a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b962:	495b      	ldr	r1, [pc, #364]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b964:	4313      	orrs	r3, r2
 800b966:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b968:	e001      	b.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b96a:	7dfb      	ldrb	r3, [r7, #23]
 800b96c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00a      	beq.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	3324      	adds	r3, #36	; 0x24
 800b97e:	2102      	movs	r1, #2
 800b980:	4618      	mov	r0, r3
 800b982:	f000 fc17 	bl	800c1b4 <RCCEx_PLL3_Config>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d001      	beq.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d030      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9a4:	d017      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800b9a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9aa:	d811      	bhi.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b9ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9b0:	d013      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b9b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9b6:	d80b      	bhi.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d010      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b9bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9c0:	d106      	bne.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9c2:	4b43      	ldr	r3, [pc, #268]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c6:	4a42      	ldr	r2, [pc, #264]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b9ce:	e007      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	75fb      	strb	r3, [r7, #23]
      break;
 800b9d4:	e004      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b9d6:	bf00      	nop
 800b9d8:	e002      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b9da:	bf00      	nop
 800b9dc:	e000      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800b9de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9e0:	7dfb      	ldrb	r3, [r7, #23]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d109      	bne.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b9e6:	4b3a      	ldr	r3, [pc, #232]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9f2:	4937      	ldr	r1, [pc, #220]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	654b      	str	r3, [r1, #84]	; 0x54
 800b9f8:	e001      	b.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9fa:	7dfb      	ldrb	r3, [r7, #23]
 800b9fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d008      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba0a:	4b31      	ldr	r3, [pc, #196]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba16:	492e      	ldr	r1, [pc, #184]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d009      	beq.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ba28:	4b29      	ldr	r3, [pc, #164]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba36:	4926      	ldr	r1, [pc, #152]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d008      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba48:	4b21      	ldr	r3, [pc, #132]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba54:	491e      	ldr	r1, [pc, #120]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba56:	4313      	orrs	r3, r2
 800ba58:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00d      	beq.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ba66:	4b1a      	ldr	r3, [pc, #104]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	4a19      	ldr	r2, [pc, #100]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba70:	6113      	str	r3, [r2, #16]
 800ba72:	4b17      	ldr	r3, [pc, #92]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba74:	691a      	ldr	r2, [r3, #16]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ba7c:	4914      	ldr	r1, [pc, #80]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	da08      	bge.n	800ba9c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ba8a:	4b11      	ldr	r3, [pc, #68]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba96:	490e      	ldr	r1, [pc, #56]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d009      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800baa8:	4b09      	ldr	r3, [pc, #36]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800baaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bab6:	4906      	ldr	r1, [pc, #24]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bab8:	4313      	orrs	r3, r2
 800baba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800babc:	7dbb      	ldrb	r3, [r7, #22]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	e000      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	58024400 	.word	0x58024400

0800bad4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bad8:	f7ff f860 	bl	800ab9c <HAL_RCC_GetHCLKFreq>
 800badc:	4602      	mov	r2, r0
 800bade:	4b06      	ldr	r3, [pc, #24]	; (800baf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bae0:	6a1b      	ldr	r3, [r3, #32]
 800bae2:	091b      	lsrs	r3, r3, #4
 800bae4:	f003 0307 	and.w	r3, r3, #7
 800bae8:	4904      	ldr	r1, [pc, #16]	; (800bafc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800baea:	5ccb      	ldrb	r3, [r1, r3]
 800baec:	f003 031f 	and.w	r3, r3, #31
 800baf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	58024400 	.word	0x58024400
 800bafc:	08012fdc 	.word	0x08012fdc

0800bb00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b089      	sub	sp, #36	; 0x24
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb08:	4ba1      	ldr	r3, [pc, #644]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0c:	f003 0303 	and.w	r3, r3, #3
 800bb10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800bb12:	4b9f      	ldr	r3, [pc, #636]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb16:	0b1b      	lsrs	r3, r3, #12
 800bb18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bb1e:	4b9c      	ldr	r3, [pc, #624]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb22:	091b      	lsrs	r3, r3, #4
 800bb24:	f003 0301 	and.w	r3, r3, #1
 800bb28:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800bb2a:	4b99      	ldr	r3, [pc, #612]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb2e:	08db      	lsrs	r3, r3, #3
 800bb30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	fb02 f303 	mul.w	r3, r2, r3
 800bb3a:	ee07 3a90 	vmov	s15, r3
 800bb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f000 8111 	beq.w	800bd70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bb4e:	69bb      	ldr	r3, [r7, #24]
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	f000 8083 	beq.w	800bc5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	f200 80a1 	bhi.w	800bca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d056      	beq.n	800bc18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bb6a:	e099      	b.n	800bca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb6c:	4b88      	ldr	r3, [pc, #544]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 0320 	and.w	r3, r3, #32
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d02d      	beq.n	800bbd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb78:	4b85      	ldr	r3, [pc, #532]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	08db      	lsrs	r3, r3, #3
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	4a84      	ldr	r2, [pc, #528]	; (800bd94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bb84:	fa22 f303 	lsr.w	r3, r2, r3
 800bb88:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	ee07 3a90 	vmov	s15, r3
 800bb90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	ee07 3a90 	vmov	s15, r3
 800bb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bba2:	4b7b      	ldr	r3, [pc, #492]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbaa:	ee07 3a90 	vmov	s15, r3
 800bbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbb6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bbd2:	e087      	b.n	800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	ee07 3a90 	vmov	s15, r3
 800bbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bd9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe6:	4b6a      	ldr	r3, [pc, #424]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbee:	ee07 3a90 	vmov	s15, r3
 800bbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc16:	e065      	b.n	800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	ee07 3a90 	vmov	s15, r3
 800bc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bda0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc2a:	4b59      	ldr	r3, [pc, #356]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc32:	ee07 3a90 	vmov	s15, r3
 800bc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc5a:	e043      	b.n	800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	ee07 3a90 	vmov	s15, r3
 800bc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bda4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6e:	4b48      	ldr	r3, [pc, #288]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc76:	ee07 3a90 	vmov	s15, r3
 800bc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bc9e:	e021      	b.n	800bce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	ee07 3a90 	vmov	s15, r3
 800bca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bda0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bcae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcb2:	4b37      	ldr	r3, [pc, #220]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcba:	ee07 3a90 	vmov	s15, r3
 800bcbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bd98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bce2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bce4:	4b2a      	ldr	r3, [pc, #168]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce8:	0a5b      	lsrs	r3, r3, #9
 800bcea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd0a:	ee17 2a90 	vmov	r2, s15
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bd12:	4b1f      	ldr	r3, [pc, #124]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd16:	0c1b      	lsrs	r3, r3, #16
 800bd18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd1c:	ee07 3a90 	vmov	s15, r3
 800bd20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd38:	ee17 2a90 	vmov	r2, s15
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bd40:	4b13      	ldr	r3, [pc, #76]	; (800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd44:	0e1b      	lsrs	r3, r3, #24
 800bd46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4a:	ee07 3a90 	vmov	s15, r3
 800bd4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd66:	ee17 2a90 	vmov	r2, s15
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bd6e:	e008      	b.n	800bd82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	609a      	str	r2, [r3, #8]
}
 800bd82:	bf00      	nop
 800bd84:	3724      	adds	r7, #36	; 0x24
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	58024400 	.word	0x58024400
 800bd94:	03d09000 	.word	0x03d09000
 800bd98:	46000000 	.word	0x46000000
 800bd9c:	4c742400 	.word	0x4c742400
 800bda0:	4a742400 	.word	0x4a742400
 800bda4:	4bbebc20 	.word	0x4bbebc20

0800bda8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b089      	sub	sp, #36	; 0x24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bdb0:	4ba1      	ldr	r3, [pc, #644]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb4:	f003 0303 	and.w	r3, r3, #3
 800bdb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bdba:	4b9f      	ldr	r3, [pc, #636]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdbe:	0d1b      	lsrs	r3, r3, #20
 800bdc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bdc6:	4b9c      	ldr	r3, [pc, #624]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdca:	0a1b      	lsrs	r3, r3, #8
 800bdcc:	f003 0301 	and.w	r3, r3, #1
 800bdd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bdd2:	4b99      	ldr	r3, [pc, #612]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bdd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdd6:	08db      	lsrs	r3, r3, #3
 800bdd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	fb02 f303 	mul.w	r3, r2, r3
 800bde2:	ee07 3a90 	vmov	s15, r3
 800bde6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 8111 	beq.w	800c018 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	f000 8083 	beq.w	800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	2b02      	cmp	r3, #2
 800be02:	f200 80a1 	bhi.w	800bf48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d003      	beq.n	800be14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d056      	beq.n	800bec0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800be12:	e099      	b.n	800bf48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be14:	4b88      	ldr	r3, [pc, #544]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f003 0320 	and.w	r3, r3, #32
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d02d      	beq.n	800be7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be20:	4b85      	ldr	r3, [pc, #532]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	08db      	lsrs	r3, r3, #3
 800be26:	f003 0303 	and.w	r3, r3, #3
 800be2a:	4a84      	ldr	r2, [pc, #528]	; (800c03c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800be2c:	fa22 f303 	lsr.w	r3, r2, r3
 800be30:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	ee07 3a90 	vmov	s15, r3
 800be38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	ee07 3a90 	vmov	s15, r3
 800be42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be4a:	4b7b      	ldr	r3, [pc, #492]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be52:	ee07 3a90 	vmov	s15, r3
 800be56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800be7a:	e087      	b.n	800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	ee07 3a90 	vmov	s15, r3
 800be82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c044 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800be8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be8e:	4b6a      	ldr	r3, [pc, #424]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be96:	ee07 3a90 	vmov	s15, r3
 800be9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bea2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800beae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800beb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bebe:	e065      	b.n	800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	ee07 3a90 	vmov	s15, r3
 800bec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bed2:	4b59      	ldr	r3, [pc, #356]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beda:	ee07 3a90 	vmov	s15, r3
 800bede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bee6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800befa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800befe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf02:	e043      	b.n	800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	ee07 3a90 	vmov	s15, r3
 800bf0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c04c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bf12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf16:	4b48      	ldr	r3, [pc, #288]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf1e:	ee07 3a90 	vmov	s15, r3
 800bf22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf26:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf46:	e021      	b.n	800bf8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	ee07 3a90 	vmov	s15, r3
 800bf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c048 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf5a:	4b37      	ldr	r3, [pc, #220]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf62:	ee07 3a90 	vmov	s15, r3
 800bf66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c040 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bf8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bf8c:	4b2a      	ldr	r3, [pc, #168]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf90:	0a5b      	lsrs	r3, r3, #9
 800bf92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfa6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfb2:	ee17 2a90 	vmov	r2, s15
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bfba:	4b1f      	ldr	r3, [pc, #124]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfbe:	0c1b      	lsrs	r3, r3, #16
 800bfc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfc4:	ee07 3a90 	vmov	s15, r3
 800bfc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfe0:	ee17 2a90 	vmov	r2, s15
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bfe8:	4b13      	ldr	r3, [pc, #76]	; (800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfec:	0e1b      	lsrs	r3, r3, #24
 800bfee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bff2:	ee07 3a90 	vmov	s15, r3
 800bff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c002:	edd7 6a07 	vldr	s13, [r7, #28]
 800c006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c00a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c00e:	ee17 2a90 	vmov	r2, s15
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c016:	e008      	b.n	800c02a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	609a      	str	r2, [r3, #8]
}
 800c02a:	bf00      	nop
 800c02c:	3724      	adds	r7, #36	; 0x24
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	58024400 	.word	0x58024400
 800c03c:	03d09000 	.word	0x03d09000
 800c040:	46000000 	.word	0x46000000
 800c044:	4c742400 	.word	0x4c742400
 800c048:	4a742400 	.word	0x4a742400
 800c04c:	4bbebc20 	.word	0x4bbebc20

0800c050 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c05e:	4b53      	ldr	r3, [pc, #332]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c062:	f003 0303 	and.w	r3, r3, #3
 800c066:	2b03      	cmp	r3, #3
 800c068:	d101      	bne.n	800c06e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e099      	b.n	800c1a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c06e:	4b4f      	ldr	r3, [pc, #316]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a4e      	ldr	r2, [pc, #312]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c074:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c07a:	f7f8 fa57 	bl	800452c <HAL_GetTick>
 800c07e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c080:	e008      	b.n	800c094 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c082:	f7f8 fa53 	bl	800452c <HAL_GetTick>
 800c086:	4602      	mov	r2, r0
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	d901      	bls.n	800c094 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c090:	2303      	movs	r3, #3
 800c092:	e086      	b.n	800c1a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c094:	4b45      	ldr	r3, [pc, #276]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1f0      	bne.n	800c082 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c0a0:	4b42      	ldr	r3, [pc, #264]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	031b      	lsls	r3, r3, #12
 800c0ae:	493f      	ldr	r1, [pc, #252]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	628b      	str	r3, [r1, #40]	; 0x28
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	025b      	lsls	r3, r3, #9
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	431a      	orrs	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	041b      	lsls	r3, r3, #16
 800c0d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c0d6:	431a      	orrs	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	061b      	lsls	r3, r3, #24
 800c0e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c0e4:	4931      	ldr	r1, [pc, #196]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c0ea:	4b30      	ldr	r3, [pc, #192]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	492d      	ldr	r1, [pc, #180]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c0fc:	4b2b      	ldr	r3, [pc, #172]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c100:	f023 0220 	bic.w	r2, r3, #32
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	699b      	ldr	r3, [r3, #24]
 800c108:	4928      	ldr	r1, [pc, #160]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c10a:	4313      	orrs	r3, r2
 800c10c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c10e:	4b27      	ldr	r3, [pc, #156]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c112:	4a26      	ldr	r2, [pc, #152]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c114:	f023 0310 	bic.w	r3, r3, #16
 800c118:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c11a:	4b24      	ldr	r3, [pc, #144]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c11c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c11e:	4b24      	ldr	r3, [pc, #144]	; (800c1b0 <RCCEx_PLL2_Config+0x160>)
 800c120:	4013      	ands	r3, r2
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	69d2      	ldr	r2, [r2, #28]
 800c126:	00d2      	lsls	r2, r2, #3
 800c128:	4920      	ldr	r1, [pc, #128]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c12a:	4313      	orrs	r3, r2
 800c12c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c12e:	4b1f      	ldr	r3, [pc, #124]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c132:	4a1e      	ldr	r2, [pc, #120]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c134:	f043 0310 	orr.w	r3, r3, #16
 800c138:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d106      	bne.n	800c14e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c140:	4b1a      	ldr	r3, [pc, #104]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c144:	4a19      	ldr	r2, [pc, #100]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c146:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c14a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c14c:	e00f      	b.n	800c16e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d106      	bne.n	800c162 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c154:	4b15      	ldr	r3, [pc, #84]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c158:	4a14      	ldr	r2, [pc, #80]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c15a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c15e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c160:	e005      	b.n	800c16e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c162:	4b12      	ldr	r3, [pc, #72]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c166:	4a11      	ldr	r2, [pc, #68]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c168:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c16c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c16e:	4b0f      	ldr	r3, [pc, #60]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	4a0e      	ldr	r2, [pc, #56]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c174:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c17a:	f7f8 f9d7 	bl	800452c <HAL_GetTick>
 800c17e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c180:	e008      	b.n	800c194 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c182:	f7f8 f9d3 	bl	800452c <HAL_GetTick>
 800c186:	4602      	mov	r2, r0
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d901      	bls.n	800c194 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c190:	2303      	movs	r3, #3
 800c192:	e006      	b.n	800c1a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c194:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <RCCEx_PLL2_Config+0x15c>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d0f0      	beq.n	800c182 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	58024400 	.word	0x58024400
 800c1b0:	ffff0007 	.word	0xffff0007

0800c1b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1c2:	4b53      	ldr	r3, [pc, #332]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c6:	f003 0303 	and.w	r3, r3, #3
 800c1ca:	2b03      	cmp	r3, #3
 800c1cc:	d101      	bne.n	800c1d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e099      	b.n	800c306 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c1d2:	4b4f      	ldr	r3, [pc, #316]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a4e      	ldr	r2, [pc, #312]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c1d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1de:	f7f8 f9a5 	bl	800452c <HAL_GetTick>
 800c1e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c1e4:	e008      	b.n	800c1f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c1e6:	f7f8 f9a1 	bl	800452c <HAL_GetTick>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d901      	bls.n	800c1f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e086      	b.n	800c306 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c1f8:	4b45      	ldr	r3, [pc, #276]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1f0      	bne.n	800c1e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c204:	4b42      	ldr	r3, [pc, #264]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c208:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	051b      	lsls	r3, r3, #20
 800c212:	493f      	ldr	r1, [pc, #252]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c214:	4313      	orrs	r3, r2
 800c216:	628b      	str	r3, [r1, #40]	; 0x28
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	3b01      	subs	r3, #1
 800c228:	025b      	lsls	r3, r3, #9
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	431a      	orrs	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	3b01      	subs	r3, #1
 800c234:	041b      	lsls	r3, r3, #16
 800c236:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c23a:	431a      	orrs	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	3b01      	subs	r3, #1
 800c242:	061b      	lsls	r3, r3, #24
 800c244:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c248:	4931      	ldr	r1, [pc, #196]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c24a:	4313      	orrs	r3, r2
 800c24c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c24e:	4b30      	ldr	r3, [pc, #192]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c252:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	492d      	ldr	r1, [pc, #180]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c25c:	4313      	orrs	r3, r2
 800c25e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c260:	4b2b      	ldr	r3, [pc, #172]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c264:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	4928      	ldr	r1, [pc, #160]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c26e:	4313      	orrs	r3, r2
 800c270:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c272:	4b27      	ldr	r3, [pc, #156]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c276:	4a26      	ldr	r2, [pc, #152]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c27c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c27e:	4b24      	ldr	r3, [pc, #144]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c282:	4b24      	ldr	r3, [pc, #144]	; (800c314 <RCCEx_PLL3_Config+0x160>)
 800c284:	4013      	ands	r3, r2
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	69d2      	ldr	r2, [r2, #28]
 800c28a:	00d2      	lsls	r2, r2, #3
 800c28c:	4920      	ldr	r1, [pc, #128]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c28e:	4313      	orrs	r3, r2
 800c290:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c292:	4b1f      	ldr	r3, [pc, #124]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c296:	4a1e      	ldr	r2, [pc, #120]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c29c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c2a4:	4b1a      	ldr	r3, [pc, #104]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a8:	4a19      	ldr	r2, [pc, #100]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c2aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c2ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2b0:	e00f      	b.n	800c2d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d106      	bne.n	800c2c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c2b8:	4b15      	ldr	r3, [pc, #84]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2bc:	4a14      	ldr	r2, [pc, #80]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c2be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c2c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2c4:	e005      	b.n	800c2d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c2c6:	4b12      	ldr	r3, [pc, #72]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ca:	4a11      	ldr	r2, [pc, #68]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c2cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c2d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c2d2:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a0e      	ldr	r2, [pc, #56]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c2d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2de:	f7f8 f925 	bl	800452c <HAL_GetTick>
 800c2e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c2e4:	e008      	b.n	800c2f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c2e6:	f7f8 f921 	bl	800452c <HAL_GetTick>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d901      	bls.n	800c2f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	e006      	b.n	800c306 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c2f8:	4b05      	ldr	r3, [pc, #20]	; (800c310 <RCCEx_PLL3_Config+0x15c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d0f0      	beq.n	800c2e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c304:	7bfb      	ldrb	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	58024400 	.word	0x58024400
 800c314:	ffff0007 	.word	0xffff0007

0800c318 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800c320:	2300      	movs	r3, #0
 800c322:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	e0eb      	b.n	800c506 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2200      	movs	r2, #0
 800c332:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4a75      	ldr	r2, [pc, #468]	; (800c510 <HAL_SPI_Init+0x1f8>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d00f      	beq.n	800c35e <HAL_SPI_Init+0x46>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a74      	ldr	r2, [pc, #464]	; (800c514 <HAL_SPI_Init+0x1fc>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d00a      	beq.n	800c35e <HAL_SPI_Init+0x46>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4a72      	ldr	r2, [pc, #456]	; (800c518 <HAL_SPI_Init+0x200>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d005      	beq.n	800c35e <HAL_SPI_Init+0x46>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	2b0f      	cmp	r3, #15
 800c358:	d901      	bls.n	800c35e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	e0d3      	b.n	800c506 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f001 f87a 	bl	800d458 <SPI_GetPacketSize>
 800c364:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a69      	ldr	r2, [pc, #420]	; (800c510 <HAL_SPI_Init+0x1f8>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d00c      	beq.n	800c38a <HAL_SPI_Init+0x72>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a67      	ldr	r2, [pc, #412]	; (800c514 <HAL_SPI_Init+0x1fc>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d007      	beq.n	800c38a <HAL_SPI_Init+0x72>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a66      	ldr	r2, [pc, #408]	; (800c518 <HAL_SPI_Init+0x200>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d002      	beq.n	800c38a <HAL_SPI_Init+0x72>
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	2b08      	cmp	r3, #8
 800c388:	d811      	bhi.n	800c3ae <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c38e:	4a60      	ldr	r2, [pc, #384]	; (800c510 <HAL_SPI_Init+0x1f8>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d009      	beq.n	800c3a8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a5e      	ldr	r2, [pc, #376]	; (800c514 <HAL_SPI_Init+0x1fc>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d004      	beq.n	800c3a8 <HAL_SPI_Init+0x90>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a5d      	ldr	r2, [pc, #372]	; (800c518 <HAL_SPI_Init+0x200>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d104      	bne.n	800c3b2 <HAL_SPI_Init+0x9a>
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	2b10      	cmp	r3, #16
 800c3ac:	d901      	bls.n	800c3b2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	e0a9      	b.n	800c506 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c3b8:	b2db      	uxtb	r3, r3
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d106      	bne.n	800c3cc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7f7 f88a 	bl	80034e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2202      	movs	r2, #2
 800c3d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f022 0201 	bic.w	r2, r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c3ec:	d119      	bne.n	800c422 <HAL_SPI_Init+0x10a>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3f6:	d103      	bne.n	800c400 <HAL_SPI_Init+0xe8>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d008      	beq.n	800c412 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10c      	bne.n	800c422 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c410:	d107      	bne.n	800c422 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c420:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	69da      	ldr	r2, [r3, #28]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c42a:	431a      	orrs	r2, r3
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	431a      	orrs	r2, r3
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c434:	ea42 0103 	orr.w	r1, r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	68da      	ldr	r2, [r3, #12]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	430a      	orrs	r2, r1
 800c442:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c44c:	431a      	orrs	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c452:	431a      	orrs	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	699b      	ldr	r3, [r3, #24]
 800c458:	431a      	orrs	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	431a      	orrs	r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	695b      	ldr	r3, [r3, #20]
 800c464:	431a      	orrs	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	431a      	orrs	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	431a      	orrs	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c476:	431a      	orrs	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	431a      	orrs	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c482:	ea42 0103 	orr.w	r1, r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	430a      	orrs	r2, r1
 800c490:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d113      	bne.n	800c4c2 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c4ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c4c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f022 0201 	bic.w	r2, r2, #1
 800c4d0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00a      	beq.n	800c4f4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	430a      	orrs	r2, r1
 800c4f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2201      	movs	r2, #1
 800c500:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c504:	2300      	movs	r3, #0
}
 800c506:	4618      	mov	r0, r3
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	40013000 	.word	0x40013000
 800c514:	40003800 	.word	0x40003800
 800c518:	40003c00 	.word	0x40003c00

0800c51c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b08a      	sub	sp, #40	; 0x28
 800c520:	af02      	add	r7, sp, #8
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	603b      	str	r3, [r7, #0]
 800c528:	4613      	mov	r3, r2
 800c52a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	3320      	adds	r3, #32
 800c532:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d101      	bne.n	800c546 <HAL_SPI_Transmit+0x2a>
 800c542:	2302      	movs	r3, #2
 800c544:	e1d7      	b.n	800c8f6 <HAL_SPI_Transmit+0x3da>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2201      	movs	r2, #1
 800c54a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c54e:	f7f7 ffed 	bl	800452c <HAL_GetTick>
 800c552:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d007      	beq.n	800c570 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c560:	2302      	movs	r3, #2
 800c562:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c56c:	7efb      	ldrb	r3, [r7, #27]
 800c56e:	e1c2      	b.n	800c8f6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d002      	beq.n	800c57c <HAL_SPI_Transmit+0x60>
 800c576:	88fb      	ldrh	r3, [r7, #6]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d107      	bne.n	800c58c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2200      	movs	r2, #0
 800c584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c588:	7efb      	ldrb	r3, [r7, #27]
 800c58a:	e1b4      	b.n	800c8f6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2203      	movs	r2, #3
 800c590:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2200      	movs	r2, #0
 800c598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	88fa      	ldrh	r2, [r7, #6]
 800c5a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	88fa      	ldrh	r2, [r7, #6]
 800c5ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c5dc:	d107      	bne.n	800c5ee <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	4b96      	ldr	r3, [pc, #600]	; (800c850 <HAL_SPI_Transmit+0x334>)
 800c5f6:	4013      	ands	r3, r2
 800c5f8:	88f9      	ldrh	r1, [r7, #6]
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	6812      	ldr	r2, [r2, #0]
 800c5fe:	430b      	orrs	r3, r1
 800c600:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f042 0201 	orr.w	r2, r2, #1
 800c610:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c61a:	d107      	bne.n	800c62c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c62a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	2b0f      	cmp	r3, #15
 800c632:	d947      	bls.n	800c6c4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c634:	e03f      	b.n	800c6b6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	695b      	ldr	r3, [r3, #20]
 800c63c:	f003 0302 	and.w	r3, r3, #2
 800c640:	2b02      	cmp	r3, #2
 800c642:	d114      	bne.n	800c66e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	6812      	ldr	r2, [r2, #0]
 800c64e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c654:	1d1a      	adds	r2, r3, #4
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c660:	b29b      	uxth	r3, r3
 800c662:	3b01      	subs	r3, #1
 800c664:	b29a      	uxth	r2, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c66c:	e023      	b.n	800c6b6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c66e:	f7f7 ff5d 	bl	800452c <HAL_GetTick>
 800c672:	4602      	mov	r2, r0
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	1ad3      	subs	r3, r2, r3
 800c678:	683a      	ldr	r2, [r7, #0]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d803      	bhi.n	800c686 <HAL_SPI_Transmit+0x16a>
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c684:	d102      	bne.n	800c68c <HAL_SPI_Transmit+0x170>
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d114      	bne.n	800c6b6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f000 fe15 	bl	800d2bc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2200      	movs	r2, #0
 800c696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e11f      	b.n	800c8f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d1b9      	bne.n	800c636 <HAL_SPI_Transmit+0x11a>
 800c6c2:	e0f2      	b.n	800c8aa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	68db      	ldr	r3, [r3, #12]
 800c6c8:	2b07      	cmp	r3, #7
 800c6ca:	f240 80e7 	bls.w	800c89c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c6ce:	e05d      	b.n	800c78c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	695b      	ldr	r3, [r3, #20]
 800c6d6:	f003 0302 	and.w	r3, r3, #2
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d132      	bne.n	800c744 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d918      	bls.n	800c71c <HAL_SPI_Transmit+0x200>
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d014      	beq.n	800c71c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	6812      	ldr	r2, [r2, #0]
 800c6fc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c702:	1d1a      	adds	r2, r3, #4
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c70e:	b29b      	uxth	r3, r3
 800c710:	3b02      	subs	r3, #2
 800c712:	b29a      	uxth	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c71a:	e037      	b.n	800c78c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c720:	881a      	ldrh	r2, [r3, #0]
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c72a:	1c9a      	adds	r2, r3, #2
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c736:	b29b      	uxth	r3, r3
 800c738:	3b01      	subs	r3, #1
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c742:	e023      	b.n	800c78c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c744:	f7f7 fef2 	bl	800452c <HAL_GetTick>
 800c748:	4602      	mov	r2, r0
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	1ad3      	subs	r3, r2, r3
 800c74e:	683a      	ldr	r2, [r7, #0]
 800c750:	429a      	cmp	r2, r3
 800c752:	d803      	bhi.n	800c75c <HAL_SPI_Transmit+0x240>
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c75a:	d102      	bne.n	800c762 <HAL_SPI_Transmit+0x246>
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d114      	bne.n	800c78c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c762:	68f8      	ldr	r0, [r7, #12]
 800c764:	f000 fdaa 	bl	800d2bc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c776:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c788:	2301      	movs	r3, #1
 800c78a:	e0b4      	b.n	800c8f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c792:	b29b      	uxth	r3, r3
 800c794:	2b00      	cmp	r3, #0
 800c796:	d19b      	bne.n	800c6d0 <HAL_SPI_Transmit+0x1b4>
 800c798:	e087      	b.n	800c8aa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	695b      	ldr	r3, [r3, #20]
 800c7a0:	f003 0302 	and.w	r3, r3, #2
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d155      	bne.n	800c854 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	2b03      	cmp	r3, #3
 800c7b2:	d918      	bls.n	800c7e6 <HAL_SPI_Transmit+0x2ca>
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b8:	2b40      	cmp	r3, #64	; 0x40
 800c7ba:	d914      	bls.n	800c7e6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	6812      	ldr	r2, [r2, #0]
 800c7c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7cc:	1d1a      	adds	r2, r3, #4
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	3b04      	subs	r3, #4
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c7e4:	e05a      	b.n	800c89c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d917      	bls.n	800c822 <HAL_SPI_Transmit+0x306>
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d013      	beq.n	800c822 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7fe:	881a      	ldrh	r2, [r3, #0]
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c808:	1c9a      	adds	r2, r3, #2
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c814:	b29b      	uxth	r3, r3
 800c816:	3b02      	subs	r3, #2
 800c818:	b29a      	uxth	r2, r3
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c820:	e03c      	b.n	800c89c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	3320      	adds	r3, #32
 800c82c:	7812      	ldrb	r2, [r2, #0]
 800c82e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c834:	1c5a      	adds	r2, r3, #1
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c840:	b29b      	uxth	r3, r3
 800c842:	3b01      	subs	r3, #1
 800c844:	b29a      	uxth	r2, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c84c:	e026      	b.n	800c89c <HAL_SPI_Transmit+0x380>
 800c84e:	bf00      	nop
 800c850:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c854:	f7f7 fe6a 	bl	800452c <HAL_GetTick>
 800c858:	4602      	mov	r2, r0
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	1ad3      	subs	r3, r2, r3
 800c85e:	683a      	ldr	r2, [r7, #0]
 800c860:	429a      	cmp	r2, r3
 800c862:	d803      	bhi.n	800c86c <HAL_SPI_Transmit+0x350>
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c86a:	d102      	bne.n	800c872 <HAL_SPI_Transmit+0x356>
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d114      	bne.n	800c89c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f000 fd22 	bl	800d2bc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c886:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	e02c      	b.n	800c8f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f47f af78 	bne.w	800c79a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	2108      	movs	r1, #8
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f000 fda1 	bl	800d3fc <SPI_WaitOnFlagUntilTimeout>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d007      	beq.n	800c8d0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8c6:	f043 0220 	orr.w	r2, r3, #32
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 fcf3 	bl	800d2bc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d001      	beq.n	800c8f4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e000      	b.n	800c8f6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c8f4:	7efb      	ldrb	r3, [r7, #27]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3720      	adds	r7, #32
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop

0800c900 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b08a      	sub	sp, #40	; 0x28
 800c904:	af02      	add	r7, sp, #8
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	603b      	str	r3, [r7, #0]
 800c90c:	4613      	mov	r3, r2
 800c90e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c910:	2300      	movs	r3, #0
 800c912:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	3330      	adds	r3, #48	; 0x30
 800c91a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c924:	d112      	bne.n	800c94c <HAL_SPI_Receive+0x4c>
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10e      	bne.n	800c94c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2204      	movs	r2, #4
 800c932:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c936:	88fa      	ldrh	r2, [r7, #6]
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	4613      	mov	r3, r2
 800c93e:	68ba      	ldr	r2, [r7, #8]
 800c940:	68b9      	ldr	r1, [r7, #8]
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f000 f9ce 	bl	800cce4 <HAL_SPI_TransmitReceive>
 800c948:	4603      	mov	r3, r0
 800c94a:	e1c7      	b.n	800ccdc <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c952:	2b01      	cmp	r3, #1
 800c954:	d101      	bne.n	800c95a <HAL_SPI_Receive+0x5a>
 800c956:	2302      	movs	r3, #2
 800c958:	e1c0      	b.n	800ccdc <HAL_SPI_Receive+0x3dc>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2201      	movs	r2, #1
 800c95e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c962:	f7f7 fde3 	bl	800452c <HAL_GetTick>
 800c966:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	2b01      	cmp	r3, #1
 800c972:	d007      	beq.n	800c984 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800c974:	2302      	movs	r3, #2
 800c976:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c980:	7ffb      	ldrb	r3, [r7, #31]
 800c982:	e1ab      	b.n	800ccdc <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d002      	beq.n	800c990 <HAL_SPI_Receive+0x90>
 800c98a:	88fb      	ldrh	r3, [r7, #6]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d107      	bne.n	800c9a0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800c990:	2301      	movs	r3, #1
 800c992:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2200      	movs	r2, #0
 800c998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c99c:	7ffb      	ldrb	r3, [r7, #31]
 800c99e:	e19d      	b.n	800ccdc <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2204      	movs	r2, #4
 800c9a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	68ba      	ldr	r2, [r7, #8]
 800c9b4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	88fa      	ldrh	r2, [r7, #6]
 800c9ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	88fa      	ldrh	r2, [r7, #6]
 800c9c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c9f0:	d107      	bne.n	800ca02 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681a      	ldr	r2, [r3, #0]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca00:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	4b94      	ldr	r3, [pc, #592]	; (800cc5c <HAL_SPI_Receive+0x35c>)
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	88f9      	ldrh	r1, [r7, #6]
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	6812      	ldr	r2, [r2, #0]
 800ca12:	430b      	orrs	r3, r1
 800ca14:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f042 0201 	orr.w	r2, r2, #1
 800ca24:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca2e:	d107      	bne.n	800ca40 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	68db      	ldr	r3, [r3, #12]
 800ca44:	2b0f      	cmp	r3, #15
 800ca46:	d948      	bls.n	800cada <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ca48:	e040      	b.n	800cacc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	695a      	ldr	r2, [r3, #20]
 800ca50:	f248 0308 	movw	r3, #32776	; 0x8008
 800ca54:	4013      	ands	r3, r2
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d014      	beq.n	800ca84 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca62:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ca64:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca6a:	1d1a      	adds	r2, r3, #4
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ca82:	e023      	b.n	800cacc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca84:	f7f7 fd52 	bl	800452c <HAL_GetTick>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	683a      	ldr	r2, [r7, #0]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d803      	bhi.n	800ca9c <HAL_SPI_Receive+0x19c>
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca9a:	d102      	bne.n	800caa2 <HAL_SPI_Receive+0x1a2>
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d114      	bne.n	800cacc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f000 fc0a 	bl	800d2bc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cab6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cac8:	2301      	movs	r3, #1
 800caca:	e107      	b.n	800ccdc <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1b8      	bne.n	800ca4a <HAL_SPI_Receive+0x14a>
 800cad8:	e0ed      	b.n	800ccb6 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	2b07      	cmp	r3, #7
 800cae0:	f240 80e2 	bls.w	800cca8 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cae4:	e05b      	b.n	800cb9e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	695b      	ldr	r3, [r3, #20]
 800caec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d030      	beq.n	800cb56 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	695b      	ldr	r3, [r3, #20]
 800cafa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d014      	beq.n	800cb2c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cb0c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb12:	1d1a      	adds	r2, r3, #4
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	3b02      	subs	r3, #2
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb2a:	e038      	b.n	800cb9e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb30:	69ba      	ldr	r2, [r7, #24]
 800cb32:	8812      	ldrh	r2, [r2, #0]
 800cb34:	b292      	uxth	r2, r2
 800cb36:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb3c:	1c9a      	adds	r2, r3, #2
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cb54:	e023      	b.n	800cb9e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb56:	f7f7 fce9 	bl	800452c <HAL_GetTick>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	683a      	ldr	r2, [r7, #0]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d803      	bhi.n	800cb6e <HAL_SPI_Receive+0x26e>
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6c:	d102      	bne.n	800cb74 <HAL_SPI_Receive+0x274>
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d114      	bne.n	800cb9e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f000 fba1 	bl	800d2bc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2201      	movs	r2, #1
 800cb96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e09e      	b.n	800ccdc <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d19d      	bne.n	800cae6 <HAL_SPI_Receive+0x1e6>
 800cbaa:	e084      	b.n	800ccb6 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	695b      	ldr	r3, [r3, #20]
 800cbb2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d052      	beq.n	800cc60 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	695b      	ldr	r3, [r3, #20]
 800cbc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d014      	beq.n	800cbf2 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cbd2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbd8:	1d1a      	adds	r2, r3, #4
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	3b04      	subs	r3, #4
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cbf0:	e05a      	b.n	800cca8 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	695b      	ldr	r3, [r3, #20]
 800cbf8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800cbfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc00:	d914      	bls.n	800cc2c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc06:	69ba      	ldr	r2, [r7, #24]
 800cc08:	8812      	ldrh	r2, [r2, #0]
 800cc0a:	b292      	uxth	r2, r2
 800cc0c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc12:	1c9a      	adds	r2, r3, #2
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	3b02      	subs	r3, #2
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cc2a:	e03d      	b.n	800cca8 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc38:	7812      	ldrb	r2, [r2, #0]
 800cc3a:	b2d2      	uxtb	r2, r2
 800cc3c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc42:	1c5a      	adds	r2, r3, #1
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	3b01      	subs	r3, #1
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cc5a:	e025      	b.n	800cca8 <HAL_SPI_Receive+0x3a8>
 800cc5c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc60:	f7f7 fc64 	bl	800452c <HAL_GetTick>
 800cc64:	4602      	mov	r2, r0
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	683a      	ldr	r2, [r7, #0]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d803      	bhi.n	800cc78 <HAL_SPI_Receive+0x378>
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc76:	d102      	bne.n	800cc7e <HAL_SPI_Receive+0x37e>
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d114      	bne.n	800cca8 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	f000 fb1c 	bl	800d2bc <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	e019      	b.n	800ccdc <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f47f af7b 	bne.w	800cbac <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f000 fb00 	bl	800d2bc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d001      	beq.n	800ccda <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e000      	b.n	800ccdc <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800ccda:	7ffb      	ldrb	r3, [r7, #31]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3720      	adds	r7, #32
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b08e      	sub	sp, #56	; 0x38
 800cce8:	af02      	add	r7, sp, #8
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
 800ccf0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	3320      	adds	r3, #32
 800ccfe:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	3330      	adds	r3, #48	; 0x30
 800cd06:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d101      	bne.n	800cd16 <HAL_SPI_TransmitReceive+0x32>
 800cd12:	2302      	movs	r3, #2
 800cd14:	e2ce      	b.n	800d2b4 <HAL_SPI_TransmitReceive+0x5d0>
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cd1e:	f7f7 fc05 	bl	800452c <HAL_GetTick>
 800cd22:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800cd24:	887b      	ldrh	r3, [r7, #2]
 800cd26:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800cd28:	887b      	ldrh	r3, [r7, #2]
 800cd2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cd32:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cd3a:	7efb      	ldrb	r3, [r7, #27]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d014      	beq.n	800cd6a <HAL_SPI_TransmitReceive+0x86>
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cd46:	d106      	bne.n	800cd56 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d102      	bne.n	800cd56 <HAL_SPI_TransmitReceive+0x72>
 800cd50:	7efb      	ldrb	r3, [r7, #27]
 800cd52:	2b04      	cmp	r3, #4
 800cd54:	d009      	beq.n	800cd6a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800cd56:	2302      	movs	r3, #2
 800cd58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cd64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd68:	e2a4      	b.n	800d2b4 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d005      	beq.n	800cd7c <HAL_SPI_TransmitReceive+0x98>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d002      	beq.n	800cd7c <HAL_SPI_TransmitReceive+0x98>
 800cd76:	887b      	ldrh	r3, [r7, #2]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d109      	bne.n	800cd90 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2200      	movs	r2, #0
 800cd86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cd8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd8e:	e291      	b.n	800d2b4 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	2b04      	cmp	r3, #4
 800cd9a:	d003      	beq.n	800cda4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2205      	movs	r2, #5
 800cda0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	887a      	ldrh	r2, [r7, #2]
 800cdb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	887a      	ldrh	r2, [r7, #2]
 800cdbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	887a      	ldrh	r2, [r7, #2]
 800cdcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	887a      	ldrh	r2, [r7, #2]
 800cdd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2200      	movs	r2, #0
 800cddc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2200      	movs	r2, #0
 800cde2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	4b9f      	ldr	r3, [pc, #636]	; (800d068 <HAL_SPI_TransmitReceive+0x384>)
 800cdec:	4013      	ands	r3, r2
 800cdee:	8879      	ldrh	r1, [r7, #2]
 800cdf0:	68fa      	ldr	r2, [r7, #12]
 800cdf2:	6812      	ldr	r2, [r2, #0]
 800cdf4:	430b      	orrs	r3, r1
 800cdf6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f042 0201 	orr.w	r2, r2, #1
 800ce06:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce10:	d107      	bne.n	800ce22 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681a      	ldr	r2, [r3, #0]
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	2b0f      	cmp	r3, #15
 800ce28:	d970      	bls.n	800cf0c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ce2a:	e068      	b.n	800cefe <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	695b      	ldr	r3, [r3, #20]
 800ce32:	f003 0302 	and.w	r3, r3, #2
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d11a      	bne.n	800ce70 <HAL_SPI_TransmitReceive+0x18c>
 800ce3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d017      	beq.n	800ce70 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	6812      	ldr	r2, [r2, #0]
 800ce4a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce50:	1d1a      	adds	r2, r3, #4
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	b29a      	uxth	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	695a      	ldr	r2, [r3, #20]
 800ce76:	f248 0308 	movw	r3, #32776	; 0x8008
 800ce7a:	4013      	ands	r3, r2
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d01a      	beq.n	800ceb6 <HAL_SPI_TransmitReceive+0x1d2>
 800ce80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d017      	beq.n	800ceb6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ce90:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce96:	1d1a      	adds	r2, r3, #4
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	3b01      	subs	r3, #1
 800cea6:	b29a      	uxth	r2, r3
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ceb4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ceb6:	f7f7 fb39 	bl	800452c <HAL_GetTick>
 800ceba:	4602      	mov	r2, r0
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	1ad3      	subs	r3, r2, r3
 800cec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d803      	bhi.n	800cece <HAL_SPI_TransmitReceive+0x1ea>
 800cec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cecc:	d102      	bne.n	800ced4 <HAL_SPI_TransmitReceive+0x1f0>
 800cece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d114      	bne.n	800cefe <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f000 f9f1 	bl	800d2bc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	2200      	movs	r2, #0
 800cede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cee8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2201      	movs	r2, #1
 800cef6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800cefa:	2301      	movs	r3, #1
 800cefc:	e1da      	b.n	800d2b4 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cefe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d193      	bne.n	800ce2c <HAL_SPI_TransmitReceive+0x148>
 800cf04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d190      	bne.n	800ce2c <HAL_SPI_TransmitReceive+0x148>
 800cf0a:	e1ac      	b.n	800d266 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	2b07      	cmp	r3, #7
 800cf12:	f240 81a0 	bls.w	800d256 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cf16:	e0a9      	b.n	800d06c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	695b      	ldr	r3, [r3, #20]
 800cf1e:	f003 0302 	and.w	r3, r3, #2
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d139      	bne.n	800cf9a <HAL_SPI_TransmitReceive+0x2b6>
 800cf26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d036      	beq.n	800cf9a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cf2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d91c      	bls.n	800cf6c <HAL_SPI_TransmitReceive+0x288>
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d018      	beq.n	800cf6c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6812      	ldr	r2, [r2, #0]
 800cf44:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf4a:	1d1a      	adds	r2, r3, #4
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	3b02      	subs	r3, #2
 800cf5a:	b29a      	uxth	r2, r3
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf68:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cf6a:	e016      	b.n	800cf9a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf70:	881a      	ldrh	r2, [r3, #0]
 800cf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf74:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf7a:	1c9a      	adds	r2, r3, #2
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf98:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	695b      	ldr	r3, [r3, #20]
 800cfa0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d03a      	beq.n	800d01e <HAL_SPI_TransmitReceive+0x33a>
 800cfa8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d037      	beq.n	800d01e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	695b      	ldr	r3, [r3, #20]
 800cfb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d018      	beq.n	800cfee <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cfc6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cfcc:	1d1a      	adds	r2, r3, #4
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	3b02      	subs	r3, #2
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cfea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cfec:	e017      	b.n	800d01e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cff2:	6a3a      	ldr	r2, [r7, #32]
 800cff4:	8812      	ldrh	r2, [r2, #0]
 800cff6:	b292      	uxth	r2, r2
 800cff8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cffe:	1c9a      	adds	r2, r3, #2
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	3b01      	subs	r3, #1
 800d00e:	b29a      	uxth	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d01c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d01e:	f7f7 fa85 	bl	800452c <HAL_GetTick>
 800d022:	4602      	mov	r2, r0
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d803      	bhi.n	800d036 <HAL_SPI_TransmitReceive+0x352>
 800d02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d034:	d102      	bne.n	800d03c <HAL_SPI_TransmitReceive+0x358>
 800d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d117      	bne.n	800d06c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	f000 f93d 	bl	800d2bc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d050:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2201      	movs	r2, #1
 800d05e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d062:	2301      	movs	r3, #1
 800d064:	e126      	b.n	800d2b4 <HAL_SPI_TransmitReceive+0x5d0>
 800d066:	bf00      	nop
 800d068:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d06c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f47f af52 	bne.w	800cf18 <HAL_SPI_TransmitReceive+0x234>
 800d074:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d076:	2b00      	cmp	r3, #0
 800d078:	f47f af4e 	bne.w	800cf18 <HAL_SPI_TransmitReceive+0x234>
 800d07c:	e0f3      	b.n	800d266 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	695b      	ldr	r3, [r3, #20]
 800d084:	f003 0302 	and.w	r3, r3, #2
 800d088:	2b02      	cmp	r3, #2
 800d08a:	d15a      	bne.n	800d142 <HAL_SPI_TransmitReceive+0x45e>
 800d08c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d057      	beq.n	800d142 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d092:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d094:	2b03      	cmp	r3, #3
 800d096:	d91c      	bls.n	800d0d2 <HAL_SPI_TransmitReceive+0x3ee>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09c:	2b40      	cmp	r3, #64	; 0x40
 800d09e:	d918      	bls.n	800d0d2 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	6812      	ldr	r2, [r2, #0]
 800d0aa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0b0:	1d1a      	adds	r2, r3, #4
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	3b04      	subs	r3, #4
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d0ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d0d0:	e037      	b.n	800d142 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d0d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d91b      	bls.n	800d110 <HAL_SPI_TransmitReceive+0x42c>
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d017      	beq.n	800d110 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0e4:	881a      	ldrh	r2, [r3, #0]
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0ee:	1c9a      	adds	r2, r3, #2
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	3b02      	subs	r3, #2
 800d0fe:	b29a      	uxth	r2, r3
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d10c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d10e:	e018      	b.n	800d142 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	3320      	adds	r3, #32
 800d11a:	7812      	ldrb	r2, [r2, #0]
 800d11c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d122:	1c5a      	adds	r2, r3, #1
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d12e:	b29b      	uxth	r3, r3
 800d130:	3b01      	subs	r3, #1
 800d132:	b29a      	uxth	r2, r3
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d140:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	695b      	ldr	r3, [r3, #20]
 800d148:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d05e      	beq.n	800d20e <HAL_SPI_TransmitReceive+0x52a>
 800d150:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d152:	2b00      	cmp	r3, #0
 800d154:	d05b      	beq.n	800d20e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	695b      	ldr	r3, [r3, #20]
 800d15c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d160:	2b00      	cmp	r3, #0
 800d162:	d018      	beq.n	800d196 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d16c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d16e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d174:	1d1a      	adds	r2, r3, #4
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d180:	b29b      	uxth	r3, r3
 800d182:	3b04      	subs	r3, #4
 800d184:	b29a      	uxth	r2, r3
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d192:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d194:	e03b      	b.n	800d20e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	695b      	ldr	r3, [r3, #20]
 800d19c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d1a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1a4:	d918      	bls.n	800d1d8 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1aa:	6a3a      	ldr	r2, [r7, #32]
 800d1ac:	8812      	ldrh	r2, [r2, #0]
 800d1ae:	b292      	uxth	r2, r2
 800d1b0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1b6:	1c9a      	adds	r2, r3, #2
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	3b02      	subs	r3, #2
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d1d6:	e01a      	b.n	800d20e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1e4:	7812      	ldrb	r2, [r2, #0]
 800d1e6:	b2d2      	uxtb	r2, r2
 800d1e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1ee:	1c5a      	adds	r2, r3, #1
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d20c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d20e:	f7f7 f98d 	bl	800452c <HAL_GetTick>
 800d212:	4602      	mov	r2, r0
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d803      	bhi.n	800d226 <HAL_SPI_TransmitReceive+0x542>
 800d21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d224:	d102      	bne.n	800d22c <HAL_SPI_TransmitReceive+0x548>
 800d226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d114      	bne.n	800d256 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f000 f845 	bl	800d2bc <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2200      	movs	r2, #0
 800d236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d240:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d252:	2301      	movs	r3, #1
 800d254:	e02e      	b.n	800d2b4 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d256:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f47f af10 	bne.w	800d07e <HAL_SPI_TransmitReceive+0x39a>
 800d25e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d260:	2b00      	cmp	r3, #0
 800d262:	f47f af0c 	bne.w	800d07e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	2200      	movs	r2, #0
 800d26e:	2108      	movs	r1, #8
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f000 f8c3 	bl	800d3fc <SPI_WaitOnFlagUntilTimeout>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d007      	beq.n	800d28c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d282:	f043 0220 	orr.w	r2, r3, #32
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	f000 f815 	bl	800d2bc <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d001      	beq.n	800d2b0 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	e001      	b.n	800d2b4 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800d2b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3730      	adds	r7, #48	; 0x30
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	695b      	ldr	r3, [r3, #20]
 800d2ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	699a      	ldr	r2, [r3, #24]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f042 0208 	orr.w	r2, r2, #8
 800d2da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	699a      	ldr	r2, [r3, #24]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f042 0210 	orr.w	r2, r2, #16
 800d2ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f022 0201 	bic.w	r2, r2, #1
 800d2fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	6919      	ldr	r1, [r3, #16]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	4b3c      	ldr	r3, [pc, #240]	; (800d3f8 <SPI_CloseTransfer+0x13c>)
 800d308:	400b      	ands	r3, r1
 800d30a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	689a      	ldr	r2, [r3, #8]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d31a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b04      	cmp	r3, #4
 800d326:	d014      	beq.n	800d352 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f003 0320 	and.w	r3, r3, #32
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d00f      	beq.n	800d352 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d338:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	699a      	ldr	r2, [r3, #24]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f042 0220 	orr.w	r2, r2, #32
 800d350:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	2b03      	cmp	r3, #3
 800d35c:	d014      	beq.n	800d388 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00f      	beq.n	800d388 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d36e:	f043 0204 	orr.w	r2, r3, #4
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	699a      	ldr	r2, [r3, #24]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d386:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00f      	beq.n	800d3b2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d398:	f043 0201 	orr.w	r2, r3, #1
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	699a      	ldr	r2, [r3, #24]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00f      	beq.n	800d3dc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3c2:	f043 0208 	orr.w	r2, r3, #8
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	699a      	ldr	r2, [r3, #24]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d3ec:	bf00      	nop
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr
 800d3f8:	fffffc90 	.word	0xfffffc90

0800d3fc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	603b      	str	r3, [r7, #0]
 800d408:	4613      	mov	r3, r2
 800d40a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d40c:	e010      	b.n	800d430 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d40e:	f7f7 f88d 	bl	800452c <HAL_GetTick>
 800d412:	4602      	mov	r2, r0
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	69ba      	ldr	r2, [r7, #24]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d803      	bhi.n	800d426 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d424:	d102      	bne.n	800d42c <SPI_WaitOnFlagUntilTimeout+0x30>
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d101      	bne.n	800d430 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d42c:	2303      	movs	r3, #3
 800d42e:	e00f      	b.n	800d450 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	695a      	ldr	r2, [r3, #20]
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	4013      	ands	r3, r2
 800d43a:	68ba      	ldr	r2, [r7, #8]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	bf0c      	ite	eq
 800d440:	2301      	moveq	r3, #1
 800d442:	2300      	movne	r3, #0
 800d444:	b2db      	uxtb	r3, r3
 800d446:	461a      	mov	r2, r3
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d0df      	beq.n	800d40e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d458:	b480      	push	{r7}
 800d45a:	b085      	sub	sp, #20
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d464:	095b      	lsrs	r3, r3, #5
 800d466:	3301      	adds	r3, #1
 800d468:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	3301      	adds	r3, #1
 800d470:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	3307      	adds	r3, #7
 800d476:	08db      	lsrs	r3, r3, #3
 800d478:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	fb02 f303 	mul.w	r3, r2, r3
}
 800d482:	4618      	mov	r0, r3
 800d484:	3714      	adds	r7, #20
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b082      	sub	sp, #8
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d101      	bne.n	800d4a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d49c:	2301      	movs	r3, #1
 800d49e:	e049      	b.n	800d534 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4a6:	b2db      	uxtb	r3, r3
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d106      	bne.n	800d4ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7f6 f879 	bl	80035ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2202      	movs	r2, #2
 800d4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	3304      	adds	r3, #4
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	4610      	mov	r0, r2
 800d4ce:	f000 f9ed 	bl	800d8ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2201      	movs	r2, #1
 800d4de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2201      	movs	r2, #1
 800d506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2201      	movs	r2, #1
 800d50e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2201      	movs	r2, #1
 800d516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2201      	movs	r2, #1
 800d51e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2201      	movs	r2, #1
 800d526:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2201      	movs	r2, #1
 800d52e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d001      	beq.n	800d554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d550:	2301      	movs	r3, #1
 800d552:	e04f      	b.n	800d5f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2202      	movs	r2, #2
 800d558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	68da      	ldr	r2, [r3, #12]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f042 0201 	orr.w	r2, r2, #1
 800d56a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a23      	ldr	r2, [pc, #140]	; (800d600 <HAL_TIM_Base_Start_IT+0xc4>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d01d      	beq.n	800d5b2 <HAL_TIM_Base_Start_IT+0x76>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d57e:	d018      	beq.n	800d5b2 <HAL_TIM_Base_Start_IT+0x76>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a1f      	ldr	r2, [pc, #124]	; (800d604 <HAL_TIM_Base_Start_IT+0xc8>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d013      	beq.n	800d5b2 <HAL_TIM_Base_Start_IT+0x76>
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4a1e      	ldr	r2, [pc, #120]	; (800d608 <HAL_TIM_Base_Start_IT+0xcc>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d00e      	beq.n	800d5b2 <HAL_TIM_Base_Start_IT+0x76>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a1c      	ldr	r2, [pc, #112]	; (800d60c <HAL_TIM_Base_Start_IT+0xd0>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d009      	beq.n	800d5b2 <HAL_TIM_Base_Start_IT+0x76>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4a1b      	ldr	r2, [pc, #108]	; (800d610 <HAL_TIM_Base_Start_IT+0xd4>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d004      	beq.n	800d5b2 <HAL_TIM_Base_Start_IT+0x76>
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	4a19      	ldr	r2, [pc, #100]	; (800d614 <HAL_TIM_Base_Start_IT+0xd8>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d115      	bne.n	800d5de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	689a      	ldr	r2, [r3, #8]
 800d5b8:	4b17      	ldr	r3, [pc, #92]	; (800d618 <HAL_TIM_Base_Start_IT+0xdc>)
 800d5ba:	4013      	ands	r3, r2
 800d5bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2b06      	cmp	r3, #6
 800d5c2:	d015      	beq.n	800d5f0 <HAL_TIM_Base_Start_IT+0xb4>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5ca:	d011      	beq.n	800d5f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f042 0201 	orr.w	r2, r2, #1
 800d5da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5dc:	e008      	b.n	800d5f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f042 0201 	orr.w	r2, r2, #1
 800d5ec:	601a      	str	r2, [r3, #0]
 800d5ee:	e000      	b.n	800d5f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d5f2:	2300      	movs	r3, #0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	40010000 	.word	0x40010000
 800d604:	40000400 	.word	0x40000400
 800d608:	40000800 	.word	0x40000800
 800d60c:	40000c00 	.word	0x40000c00
 800d610:	40010400 	.word	0x40010400
 800d614:	40001800 	.word	0x40001800
 800d618:	00010007 	.word	0x00010007

0800d61c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	f003 0302 	and.w	r3, r3, #2
 800d62e:	2b02      	cmp	r3, #2
 800d630:	d122      	bne.n	800d678 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	f003 0302 	and.w	r3, r3, #2
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d11b      	bne.n	800d678 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f06f 0202 	mvn.w	r2, #2
 800d648:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2201      	movs	r2, #1
 800d64e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	699b      	ldr	r3, [r3, #24]
 800d656:	f003 0303 	and.w	r3, r3, #3
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d003      	beq.n	800d666 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f905 	bl	800d86e <HAL_TIM_IC_CaptureCallback>
 800d664:	e005      	b.n	800d672 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f8f7 	bl	800d85a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 f908 	bl	800d882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	f003 0304 	and.w	r3, r3, #4
 800d682:	2b04      	cmp	r3, #4
 800d684:	d122      	bne.n	800d6cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	68db      	ldr	r3, [r3, #12]
 800d68c:	f003 0304 	and.w	r3, r3, #4
 800d690:	2b04      	cmp	r3, #4
 800d692:	d11b      	bne.n	800d6cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f06f 0204 	mvn.w	r2, #4
 800d69c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2202      	movs	r2, #2
 800d6a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	699b      	ldr	r3, [r3, #24]
 800d6aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d003      	beq.n	800d6ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f8db 	bl	800d86e <HAL_TIM_IC_CaptureCallback>
 800d6b8:	e005      	b.n	800d6c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 f8cd 	bl	800d85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f8de 	bl	800d882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	f003 0308 	and.w	r3, r3, #8
 800d6d6:	2b08      	cmp	r3, #8
 800d6d8:	d122      	bne.n	800d720 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	f003 0308 	and.w	r3, r3, #8
 800d6e4:	2b08      	cmp	r3, #8
 800d6e6:	d11b      	bne.n	800d720 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f06f 0208 	mvn.w	r2, #8
 800d6f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2204      	movs	r2, #4
 800d6f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	69db      	ldr	r3, [r3, #28]
 800d6fe:	f003 0303 	and.w	r3, r3, #3
 800d702:	2b00      	cmp	r3, #0
 800d704:	d003      	beq.n	800d70e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 f8b1 	bl	800d86e <HAL_TIM_IC_CaptureCallback>
 800d70c:	e005      	b.n	800d71a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f8a3 	bl	800d85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 f8b4 	bl	800d882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	f003 0310 	and.w	r3, r3, #16
 800d72a:	2b10      	cmp	r3, #16
 800d72c:	d122      	bne.n	800d774 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	f003 0310 	and.w	r3, r3, #16
 800d738:	2b10      	cmp	r3, #16
 800d73a:	d11b      	bne.n	800d774 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f06f 0210 	mvn.w	r2, #16
 800d744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2208      	movs	r2, #8
 800d74a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	69db      	ldr	r3, [r3, #28]
 800d752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d756:	2b00      	cmp	r3, #0
 800d758:	d003      	beq.n	800d762 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f887 	bl	800d86e <HAL_TIM_IC_CaptureCallback>
 800d760:	e005      	b.n	800d76e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 f879 	bl	800d85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 f88a 	bl	800d882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	f003 0301 	and.w	r3, r3, #1
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d10e      	bne.n	800d7a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	f003 0301 	and.w	r3, r3, #1
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d107      	bne.n	800d7a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f06f 0201 	mvn.w	r2, #1
 800d798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7f6 f828 	bl	80037f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	691b      	ldr	r3, [r3, #16]
 800d7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7aa:	2b80      	cmp	r3, #128	; 0x80
 800d7ac:	d10e      	bne.n	800d7cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7b8:	2b80      	cmp	r3, #128	; 0x80
 800d7ba:	d107      	bne.n	800d7cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d7c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f99c 	bl	800db04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	691b      	ldr	r3, [r3, #16]
 800d7d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7da:	d10e      	bne.n	800d7fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7e6:	2b80      	cmp	r3, #128	; 0x80
 800d7e8:	d107      	bne.n	800d7fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d7f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 f98f 	bl	800db18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d804:	2b40      	cmp	r3, #64	; 0x40
 800d806:	d10e      	bne.n	800d826 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d812:	2b40      	cmp	r3, #64	; 0x40
 800d814:	d107      	bne.n	800d826 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d81e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 f838 	bl	800d896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	691b      	ldr	r3, [r3, #16]
 800d82c:	f003 0320 	and.w	r3, r3, #32
 800d830:	2b20      	cmp	r3, #32
 800d832:	d10e      	bne.n	800d852 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	f003 0320 	and.w	r3, r3, #32
 800d83e:	2b20      	cmp	r3, #32
 800d840:	d107      	bne.n	800d852 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f06f 0220 	mvn.w	r2, #32
 800d84a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 f94f 	bl	800daf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d852:	bf00      	nop
 800d854:	3708      	adds	r7, #8
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d85a:	b480      	push	{r7}
 800d85c:	b083      	sub	sp, #12
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d862:	bf00      	nop
 800d864:	370c      	adds	r7, #12
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d86e:	b480      	push	{r7}
 800d870:	b083      	sub	sp, #12
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d876:	bf00      	nop
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr

0800d882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d882:	b480      	push	{r7}
 800d884:	b083      	sub	sp, #12
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d88a:	bf00      	nop
 800d88c:	370c      	adds	r7, #12
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr

0800d896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d896:	b480      	push	{r7}
 800d898:	b083      	sub	sp, #12
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d89e:	bf00      	nop
 800d8a0:	370c      	adds	r7, #12
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
	...

0800d8ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a40      	ldr	r2, [pc, #256]	; (800d9c0 <TIM_Base_SetConfig+0x114>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d013      	beq.n	800d8ec <TIM_Base_SetConfig+0x40>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8ca:	d00f      	beq.n	800d8ec <TIM_Base_SetConfig+0x40>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a3d      	ldr	r2, [pc, #244]	; (800d9c4 <TIM_Base_SetConfig+0x118>)
 800d8d0:	4293      	cmp	r3, r2
 800d8d2:	d00b      	beq.n	800d8ec <TIM_Base_SetConfig+0x40>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	4a3c      	ldr	r2, [pc, #240]	; (800d9c8 <TIM_Base_SetConfig+0x11c>)
 800d8d8:	4293      	cmp	r3, r2
 800d8da:	d007      	beq.n	800d8ec <TIM_Base_SetConfig+0x40>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	4a3b      	ldr	r2, [pc, #236]	; (800d9cc <TIM_Base_SetConfig+0x120>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d003      	beq.n	800d8ec <TIM_Base_SetConfig+0x40>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	4a3a      	ldr	r2, [pc, #232]	; (800d9d0 <TIM_Base_SetConfig+0x124>)
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	d108      	bne.n	800d8fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	68fa      	ldr	r2, [r7, #12]
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	4a2f      	ldr	r2, [pc, #188]	; (800d9c0 <TIM_Base_SetConfig+0x114>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d01f      	beq.n	800d946 <TIM_Base_SetConfig+0x9a>
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d90c:	d01b      	beq.n	800d946 <TIM_Base_SetConfig+0x9a>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4a2c      	ldr	r2, [pc, #176]	; (800d9c4 <TIM_Base_SetConfig+0x118>)
 800d912:	4293      	cmp	r3, r2
 800d914:	d017      	beq.n	800d946 <TIM_Base_SetConfig+0x9a>
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4a2b      	ldr	r2, [pc, #172]	; (800d9c8 <TIM_Base_SetConfig+0x11c>)
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d013      	beq.n	800d946 <TIM_Base_SetConfig+0x9a>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	4a2a      	ldr	r2, [pc, #168]	; (800d9cc <TIM_Base_SetConfig+0x120>)
 800d922:	4293      	cmp	r3, r2
 800d924:	d00f      	beq.n	800d946 <TIM_Base_SetConfig+0x9a>
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4a29      	ldr	r2, [pc, #164]	; (800d9d0 <TIM_Base_SetConfig+0x124>)
 800d92a:	4293      	cmp	r3, r2
 800d92c:	d00b      	beq.n	800d946 <TIM_Base_SetConfig+0x9a>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4a28      	ldr	r2, [pc, #160]	; (800d9d4 <TIM_Base_SetConfig+0x128>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d007      	beq.n	800d946 <TIM_Base_SetConfig+0x9a>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	4a27      	ldr	r2, [pc, #156]	; (800d9d8 <TIM_Base_SetConfig+0x12c>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d003      	beq.n	800d946 <TIM_Base_SetConfig+0x9a>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4a26      	ldr	r2, [pc, #152]	; (800d9dc <TIM_Base_SetConfig+0x130>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d108      	bne.n	800d958 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d94c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	68db      	ldr	r3, [r3, #12]
 800d952:	68fa      	ldr	r2, [r7, #12]
 800d954:	4313      	orrs	r3, r2
 800d956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	695b      	ldr	r3, [r3, #20]
 800d962:	4313      	orrs	r3, r2
 800d964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	689a      	ldr	r2, [r3, #8]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4a10      	ldr	r2, [pc, #64]	; (800d9c0 <TIM_Base_SetConfig+0x114>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d00f      	beq.n	800d9a4 <TIM_Base_SetConfig+0xf8>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4a12      	ldr	r2, [pc, #72]	; (800d9d0 <TIM_Base_SetConfig+0x124>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d00b      	beq.n	800d9a4 <TIM_Base_SetConfig+0xf8>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	4a11      	ldr	r2, [pc, #68]	; (800d9d4 <TIM_Base_SetConfig+0x128>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d007      	beq.n	800d9a4 <TIM_Base_SetConfig+0xf8>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	4a10      	ldr	r2, [pc, #64]	; (800d9d8 <TIM_Base_SetConfig+0x12c>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d003      	beq.n	800d9a4 <TIM_Base_SetConfig+0xf8>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4a0f      	ldr	r2, [pc, #60]	; (800d9dc <TIM_Base_SetConfig+0x130>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d103      	bne.n	800d9ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	691a      	ldr	r2, [r3, #16]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	615a      	str	r2, [r3, #20]
}
 800d9b2:	bf00      	nop
 800d9b4:	3714      	adds	r7, #20
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	40010000 	.word	0x40010000
 800d9c4:	40000400 	.word	0x40000400
 800d9c8:	40000800 	.word	0x40000800
 800d9cc:	40000c00 	.word	0x40000c00
 800d9d0:	40010400 	.word	0x40010400
 800d9d4:	40014000 	.word	0x40014000
 800d9d8:	40014400 	.word	0x40014400
 800d9dc:	40014800 	.word	0x40014800

0800d9e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d101      	bne.n	800d9f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	e068      	b.n	800daca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2202      	movs	r2, #2
 800da04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a2e      	ldr	r2, [pc, #184]	; (800dad8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d004      	beq.n	800da2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	4a2d      	ldr	r2, [pc, #180]	; (800dadc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d108      	bne.n	800da3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800da32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	4313      	orrs	r3, r2
 800da3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	4313      	orrs	r3, r2
 800da4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4a1e      	ldr	r2, [pc, #120]	; (800dad8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d01d      	beq.n	800da9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da6a:	d018      	beq.n	800da9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a1b      	ldr	r2, [pc, #108]	; (800dae0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d013      	beq.n	800da9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a1a      	ldr	r2, [pc, #104]	; (800dae4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d00e      	beq.n	800da9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a18      	ldr	r2, [pc, #96]	; (800dae8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d009      	beq.n	800da9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a13      	ldr	r2, [pc, #76]	; (800dadc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d004      	beq.n	800da9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	4a14      	ldr	r2, [pc, #80]	; (800daec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d10c      	bne.n	800dab8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800daa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	689b      	ldr	r3, [r3, #8]
 800daaa:	68ba      	ldr	r2, [r7, #8]
 800daac:	4313      	orrs	r3, r2
 800daae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2200      	movs	r2, #0
 800dac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dac8:	2300      	movs	r3, #0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3714      	adds	r7, #20
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	40010000 	.word	0x40010000
 800dadc:	40010400 	.word	0x40010400
 800dae0:	40000400 	.word	0x40000400
 800dae4:	40000800 	.word	0x40000800
 800dae8:	40000c00 	.word	0x40000c00
 800daec:	40001800 	.word	0x40001800

0800daf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d101      	bne.n	800db3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db3a:	2301      	movs	r3, #1
 800db3c:	e042      	b.n	800dbc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db44:	2b00      	cmp	r3, #0
 800db46:	d106      	bne.n	800db56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7f5 fd53 	bl	80035fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2224      	movs	r2, #36	; 0x24
 800db5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f022 0201 	bic.w	r2, r2, #1
 800db6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 fbd6 	bl	800e320 <UART_SetConfig>
 800db74:	4603      	mov	r3, r0
 800db76:	2b01      	cmp	r3, #1
 800db78:	d101      	bne.n	800db7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800db7a:	2301      	movs	r3, #1
 800db7c:	e022      	b.n	800dbc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db82:	2b00      	cmp	r3, #0
 800db84:	d002      	beq.n	800db8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f001 f92a 	bl	800ede0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	685a      	ldr	r2, [r3, #4]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	689a      	ldr	r2, [r3, #8]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dbaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f042 0201 	orr.w	r2, r2, #1
 800dbba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f001 f9b1 	bl	800ef24 <UART_CheckIdleState>
 800dbc2:	4603      	mov	r3, r0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	4613      	mov	r3, r2
 800dbd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbe0:	2b20      	cmp	r3, #32
 800dbe2:	d131      	bne.n	800dc48 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d002      	beq.n	800dbf0 <HAL_UART_Receive_IT+0x24>
 800dbea:	88fb      	ldrh	r3, [r7, #6]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d101      	bne.n	800dbf4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	e02a      	b.n	800dc4a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d101      	bne.n	800dc02 <HAL_UART_Receive_IT+0x36>
 800dbfe:	2302      	movs	r3, #2
 800dc00:	e023      	b.n	800dc4a <HAL_UART_Receive_IT+0x7e>
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2201      	movs	r2, #1
 800dc06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	4a0f      	ldr	r2, [pc, #60]	; (800dc54 <HAL_UART_Receive_IT+0x88>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d00e      	beq.n	800dc38 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d007      	beq.n	800dc38 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800dc36:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dc38:	88fb      	ldrh	r3, [r7, #6]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	68b9      	ldr	r1, [r7, #8]
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f001 fa3c 	bl	800f0bc <UART_Start_Receive_IT>
 800dc44:	4603      	mov	r3, r0
 800dc46:	e000      	b.n	800dc4a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800dc48:	2302      	movs	r3, #2
  }
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	58000c00 	.word	0x58000c00

0800dc58 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	4613      	mov	r3, r2
 800dc64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc6c:	2b20      	cmp	r3, #32
 800dc6e:	d168      	bne.n	800dd42 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d002      	beq.n	800dc7c <HAL_UART_Transmit_DMA+0x24>
 800dc76:	88fb      	ldrh	r3, [r7, #6]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d101      	bne.n	800dc80 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	e061      	b.n	800dd44 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d101      	bne.n	800dc8e <HAL_UART_Transmit_DMA+0x36>
 800dc8a:	2302      	movs	r3, #2
 800dc8c:	e05a      	b.n	800dd44 <HAL_UART_Transmit_DMA+0xec>
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2201      	movs	r2, #1
 800dc92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	68ba      	ldr	r2, [r7, #8]
 800dc9a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	88fa      	ldrh	r2, [r7, #6]
 800dca0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	88fa      	ldrh	r2, [r7, #6]
 800dca8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2221      	movs	r2, #33	; 0x21
 800dcb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d02c      	beq.n	800dd1e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcc8:	4a20      	ldr	r2, [pc, #128]	; (800dd4c <HAL_UART_Transmit_DMA+0xf4>)
 800dcca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcd0:	4a1f      	ldr	r2, [pc, #124]	; (800dd50 <HAL_UART_Transmit_DMA+0xf8>)
 800dcd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcd8:	4a1e      	ldr	r2, [pc, #120]	; (800dd54 <HAL_UART_Transmit_DMA+0xfc>)
 800dcda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dce0:	2200      	movs	r2, #0
 800dce2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcec:	4619      	mov	r1, r3
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	3328      	adds	r3, #40	; 0x28
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	88fb      	ldrh	r3, [r7, #6]
 800dcf8:	f7f7 f8c0 	bl	8004e7c <HAL_DMA_Start_IT>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00d      	beq.n	800dd1e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2210      	movs	r2, #16
 800dd06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2220      	movs	r2, #32
 800dd16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	e012      	b.n	800dd44 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2240      	movs	r2, #64	; 0x40
 800dd24:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	689a      	ldr	r2, [r3, #8]
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dd3c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	e000      	b.n	800dd44 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800dd42:	2302      	movs	r3, #2
  }
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3710      	adds	r7, #16
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	0800f2d9 	.word	0x0800f2d9
 800dd50:	0800f329 	.word	0x0800f329
 800dd54:	0800f345 	.word	0x0800f345

0800dd58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b088      	sub	sp, #32
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	69db      	ldr	r3, [r3, #28]
 800dd66:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dd78:	69fa      	ldr	r2, [r7, #28]
 800dd7a:	f640 030f 	movw	r3, #2063	; 0x80f
 800dd7e:	4013      	ands	r3, r2
 800dd80:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800dd82:	693b      	ldr	r3, [r7, #16]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d118      	bne.n	800ddba <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	f003 0320 	and.w	r3, r3, #32
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d013      	beq.n	800ddba <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	f003 0320 	and.w	r3, r3, #32
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d104      	bne.n	800dda6 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d009      	beq.n	800ddba <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f000 8282 	beq.w	800e2b4 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	4798      	blx	r3
      }
      return;
 800ddb8:	e27c      	b.n	800e2b4 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f000 80ef 	beq.w	800dfa0 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ddc2:	697a      	ldr	r2, [r7, #20]
 800ddc4:	4b73      	ldr	r3, [pc, #460]	; (800df94 <HAL_UART_IRQHandler+0x23c>)
 800ddc6:	4013      	ands	r3, r2
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d105      	bne.n	800ddd8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ddcc:	69ba      	ldr	r2, [r7, #24]
 800ddce:	4b72      	ldr	r3, [pc, #456]	; (800df98 <HAL_UART_IRQHandler+0x240>)
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f000 80e4 	beq.w	800dfa0 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	f003 0301 	and.w	r3, r3, #1
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d010      	beq.n	800de04 <HAL_UART_IRQHandler+0xac>
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d00b      	beq.n	800de04 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddfa:	f043 0201 	orr.w	r2, r3, #1
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	f003 0302 	and.w	r3, r3, #2
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d010      	beq.n	800de30 <HAL_UART_IRQHandler+0xd8>
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	f003 0301 	and.w	r3, r3, #1
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00b      	beq.n	800de30 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2202      	movs	r2, #2
 800de1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de26:	f043 0204 	orr.w	r2, r3, #4
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	f003 0304 	and.w	r3, r3, #4
 800de36:	2b00      	cmp	r3, #0
 800de38:	d010      	beq.n	800de5c <HAL_UART_IRQHandler+0x104>
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	f003 0301 	and.w	r3, r3, #1
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00b      	beq.n	800de5c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2204      	movs	r2, #4
 800de4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de52:	f043 0202 	orr.w	r2, r3, #2
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	f003 0308 	and.w	r3, r3, #8
 800de62:	2b00      	cmp	r3, #0
 800de64:	d015      	beq.n	800de92 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	f003 0320 	and.w	r3, r3, #32
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d104      	bne.n	800de7a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800de70:	697a      	ldr	r2, [r7, #20]
 800de72:	4b48      	ldr	r3, [pc, #288]	; (800df94 <HAL_UART_IRQHandler+0x23c>)
 800de74:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00b      	beq.n	800de92 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2208      	movs	r2, #8
 800de80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de88:	f043 0208 	orr.w	r2, r3, #8
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d011      	beq.n	800dec0 <HAL_UART_IRQHandler+0x168>
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00c      	beq.n	800dec0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800deae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800deb6:	f043 0220 	orr.w	r2, r3, #32
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	f000 81f6 	beq.w	800e2b8 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800decc:	69fb      	ldr	r3, [r7, #28]
 800dece:	f003 0320 	and.w	r3, r3, #32
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d011      	beq.n	800defa <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	f003 0320 	and.w	r3, r3, #32
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d104      	bne.n	800deea <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d007      	beq.n	800defa <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deee:	2b00      	cmp	r3, #0
 800def0:	d003      	beq.n	800defa <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df00:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df0c:	2b40      	cmp	r3, #64	; 0x40
 800df0e:	d004      	beq.n	800df1a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800df16:	2b00      	cmp	r3, #0
 800df18:	d031      	beq.n	800df7e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f001 f9aa 	bl	800f274 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df2a:	2b40      	cmp	r3, #64	; 0x40
 800df2c:	d123      	bne.n	800df76 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	689a      	ldr	r2, [r3, #8]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df3c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df42:	2b00      	cmp	r3, #0
 800df44:	d013      	beq.n	800df6e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df4a:	4a14      	ldr	r2, [pc, #80]	; (800df9c <HAL_UART_IRQHandler+0x244>)
 800df4c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df52:	4618      	mov	r0, r3
 800df54:	f7f7 fd1a 	bl	800598c <HAL_DMA_Abort_IT>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d017      	beq.n	800df8e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800df68:	4610      	mov	r0, r2
 800df6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df6c:	e00f      	b.n	800df8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 f9c0 	bl	800e2f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df74:	e00b      	b.n	800df8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 f9bc 	bl	800e2f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df7c:	e007      	b.n	800df8e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 f9b8 	bl	800e2f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800df8c:	e194      	b.n	800e2b8 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df8e:	bf00      	nop
    return;
 800df90:	e192      	b.n	800e2b8 <HAL_UART_IRQHandler+0x560>
 800df92:	bf00      	nop
 800df94:	10000001 	.word	0x10000001
 800df98:	04000120 	.word	0x04000120
 800df9c:	0800f3c5 	.word	0x0800f3c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	f040 810f 	bne.w	800e1c8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	f003 0310 	and.w	r3, r3, #16
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f000 8109 	beq.w	800e1c8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	f003 0310 	and.w	r3, r3, #16
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	f000 8103 	beq.w	800e1c8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	2210      	movs	r2, #16
 800dfc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfd4:	2b40      	cmp	r3, #64	; 0x40
 800dfd6:	f040 80bb 	bne.w	800e150 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4a96      	ldr	r2, [pc, #600]	; (800e23c <HAL_UART_IRQHandler+0x4e4>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d059      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4a94      	ldr	r2, [pc, #592]	; (800e240 <HAL_UART_IRQHandler+0x4e8>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d053      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a92      	ldr	r2, [pc, #584]	; (800e244 <HAL_UART_IRQHandler+0x4ec>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d04d      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a90      	ldr	r2, [pc, #576]	; (800e248 <HAL_UART_IRQHandler+0x4f0>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d047      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a8e      	ldr	r2, [pc, #568]	; (800e24c <HAL_UART_IRQHandler+0x4f4>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d041      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4a8c      	ldr	r2, [pc, #560]	; (800e250 <HAL_UART_IRQHandler+0x4f8>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d03b      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a8a      	ldr	r2, [pc, #552]	; (800e254 <HAL_UART_IRQHandler+0x4fc>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d035      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a88      	ldr	r2, [pc, #544]	; (800e258 <HAL_UART_IRQHandler+0x500>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d02f      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a86      	ldr	r2, [pc, #536]	; (800e25c <HAL_UART_IRQHandler+0x504>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d029      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a84      	ldr	r2, [pc, #528]	; (800e260 <HAL_UART_IRQHandler+0x508>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d023      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a82      	ldr	r2, [pc, #520]	; (800e264 <HAL_UART_IRQHandler+0x50c>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d01d      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a80      	ldr	r2, [pc, #512]	; (800e268 <HAL_UART_IRQHandler+0x510>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d017      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a7e      	ldr	r2, [pc, #504]	; (800e26c <HAL_UART_IRQHandler+0x514>)
 800e072:	4293      	cmp	r3, r2
 800e074:	d011      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a7c      	ldr	r2, [pc, #496]	; (800e270 <HAL_UART_IRQHandler+0x518>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d00b      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a7a      	ldr	r2, [pc, #488]	; (800e274 <HAL_UART_IRQHandler+0x51c>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d005      	beq.n	800e09a <HAL_UART_IRQHandler+0x342>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a78      	ldr	r2, [pc, #480]	; (800e278 <HAL_UART_IRQHandler+0x520>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d105      	bne.n	800e0a6 <HAL_UART_IRQHandler+0x34e>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	e004      	b.n	800e0b0 <HAL_UART_IRQHandler+0x358>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800e0b2:	893b      	ldrh	r3, [r7, #8]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	f000 8101 	beq.w	800e2bc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e0c0:	893a      	ldrh	r2, [r7, #8]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	f080 80fa 	bcs.w	800e2bc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	893a      	ldrh	r2, [r7, #8]
 800e0cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0d4:	69db      	ldr	r3, [r3, #28]
 800e0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0da:	d02b      	beq.n	800e134 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e0ea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	689a      	ldr	r2, [r3, #8]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f022 0201 	bic.w	r2, r2, #1
 800e0fa:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	689a      	ldr	r2, [r3, #8]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e10a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2220      	movs	r2, #32
 800e110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	f022 0210 	bic.w	r2, r2, #16
 800e128:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e12e:	4618      	mov	r0, r3
 800e130:	f7f7 f90e 	bl	8005350 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e140:	b29b      	uxth	r3, r3
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	b29b      	uxth	r3, r3
 800e146:	4619      	mov	r1, r3
 800e148:	6878      	ldr	r0, [r7, #4]
 800e14a:	f000 f8dd 	bl	800e308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e14e:	e0b5      	b.n	800e2bc <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e168:	b29b      	uxth	r3, r3
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f000 80a8 	beq.w	800e2c0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800e170:	897b      	ldrh	r3, [r7, #10]
 800e172:	2b00      	cmp	r3, #0
 800e174:	f000 80a4 	beq.w	800e2c0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e186:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	6899      	ldr	r1, [r3, #8]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	4b3a      	ldr	r3, [pc, #232]	; (800e27c <HAL_UART_IRQHandler+0x524>)
 800e194:	400b      	ands	r3, r1
 800e196:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2220      	movs	r2, #32
 800e19c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	f022 0210 	bic.w	r2, r2, #16
 800e1ba:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e1bc:	897b      	ldrh	r3, [r7, #10]
 800e1be:	4619      	mov	r1, r3
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 f8a1 	bl	800e308 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e1c6:	e07b      	b.n	800e2c0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00d      	beq.n	800e1ee <HAL_UART_IRQHandler+0x496>
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d008      	beq.n	800e1ee <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e1e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f001 fbf8 	bl	800f9dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e1ec:	e06b      	b.n	800e2c6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d012      	beq.n	800e21e <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d104      	bne.n	800e20c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d008      	beq.n	800e21e <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e210:	2b00      	cmp	r3, #0
 800e212:	d057      	beq.n	800e2c4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	4798      	blx	r3
    }
    return;
 800e21c:	e052      	b.n	800e2c4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e224:	2b00      	cmp	r3, #0
 800e226:	d02b      	beq.n	800e280 <HAL_UART_IRQHandler+0x528>
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d026      	beq.n	800e280 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f001 f8dc 	bl	800f3f0 <UART_EndTransmit_IT>
    return;
 800e238:	e045      	b.n	800e2c6 <HAL_UART_IRQHandler+0x56e>
 800e23a:	bf00      	nop
 800e23c:	40020010 	.word	0x40020010
 800e240:	40020028 	.word	0x40020028
 800e244:	40020040 	.word	0x40020040
 800e248:	40020058 	.word	0x40020058
 800e24c:	40020070 	.word	0x40020070
 800e250:	40020088 	.word	0x40020088
 800e254:	400200a0 	.word	0x400200a0
 800e258:	400200b8 	.word	0x400200b8
 800e25c:	40020410 	.word	0x40020410
 800e260:	40020428 	.word	0x40020428
 800e264:	40020440 	.word	0x40020440
 800e268:	40020458 	.word	0x40020458
 800e26c:	40020470 	.word	0x40020470
 800e270:	40020488 	.word	0x40020488
 800e274:	400204a0 	.word	0x400204a0
 800e278:	400204b8 	.word	0x400204b8
 800e27c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e286:	2b00      	cmp	r3, #0
 800e288:	d008      	beq.n	800e29c <HAL_UART_IRQHandler+0x544>
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e290:	2b00      	cmp	r3, #0
 800e292:	d003      	beq.n	800e29c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f001 fbb5 	bl	800fa04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e29a:	e014      	b.n	800e2c6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d00f      	beq.n	800e2c6 <HAL_UART_IRQHandler+0x56e>
 800e2a6:	69bb      	ldr	r3, [r7, #24]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	da0c      	bge.n	800e2c6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f001 fb9f 	bl	800f9f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e2b2:	e008      	b.n	800e2c6 <HAL_UART_IRQHandler+0x56e>
      return;
 800e2b4:	bf00      	nop
 800e2b6:	e006      	b.n	800e2c6 <HAL_UART_IRQHandler+0x56e>
    return;
 800e2b8:	bf00      	nop
 800e2ba:	e004      	b.n	800e2c6 <HAL_UART_IRQHandler+0x56e>
      return;
 800e2bc:	bf00      	nop
 800e2be:	e002      	b.n	800e2c6 <HAL_UART_IRQHandler+0x56e>
      return;
 800e2c0:	bf00      	nop
 800e2c2:	e000      	b.n	800e2c6 <HAL_UART_IRQHandler+0x56e>
    return;
 800e2c4:	bf00      	nop
  }
}
 800e2c6:	3720      	adds	r7, #32
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e2d4:	bf00      	nop
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e2e8:	bf00      	nop
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e2fc:	bf00      	nop
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
 800e310:	460b      	mov	r3, r1
 800e312:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e314:	bf00      	nop
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e320:	b5b0      	push	{r4, r5, r7, lr}
 800e322:	b08e      	sub	sp, #56	; 0x38
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e328:	2300      	movs	r3, #0
 800e32a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	689a      	ldr	r2, [r3, #8]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	431a      	orrs	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	695b      	ldr	r3, [r3, #20]
 800e33c:	431a      	orrs	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	69db      	ldr	r3, [r3, #28]
 800e342:	4313      	orrs	r3, r2
 800e344:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	4bbf      	ldr	r3, [pc, #764]	; (800e64c <UART_SetConfig+0x32c>)
 800e34e:	4013      	ands	r3, r2
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	6812      	ldr	r2, [r2, #0]
 800e354:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e356:	430b      	orrs	r3, r1
 800e358:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	68da      	ldr	r2, [r3, #12]
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	430a      	orrs	r2, r1
 800e36e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	699b      	ldr	r3, [r3, #24]
 800e374:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4ab5      	ldr	r2, [pc, #724]	; (800e650 <UART_SetConfig+0x330>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d004      	beq.n	800e38a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6a1b      	ldr	r3, [r3, #32]
 800e384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e386:	4313      	orrs	r3, r2
 800e388:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	689a      	ldr	r2, [r3, #8]
 800e390:	4bb0      	ldr	r3, [pc, #704]	; (800e654 <UART_SetConfig+0x334>)
 800e392:	4013      	ands	r3, r2
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	6812      	ldr	r2, [r2, #0]
 800e398:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e39a:	430b      	orrs	r3, r1
 800e39c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a4:	f023 010f 	bic.w	r1, r3, #15
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	430a      	orrs	r2, r1
 800e3b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4aa7      	ldr	r2, [pc, #668]	; (800e658 <UART_SetConfig+0x338>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d176      	bne.n	800e4ac <UART_SetConfig+0x18c>
 800e3be:	4ba7      	ldr	r3, [pc, #668]	; (800e65c <UART_SetConfig+0x33c>)
 800e3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e3c6:	2b28      	cmp	r3, #40	; 0x28
 800e3c8:	d86c      	bhi.n	800e4a4 <UART_SetConfig+0x184>
 800e3ca:	a201      	add	r2, pc, #4	; (adr r2, 800e3d0 <UART_SetConfig+0xb0>)
 800e3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d0:	0800e475 	.word	0x0800e475
 800e3d4:	0800e4a5 	.word	0x0800e4a5
 800e3d8:	0800e4a5 	.word	0x0800e4a5
 800e3dc:	0800e4a5 	.word	0x0800e4a5
 800e3e0:	0800e4a5 	.word	0x0800e4a5
 800e3e4:	0800e4a5 	.word	0x0800e4a5
 800e3e8:	0800e4a5 	.word	0x0800e4a5
 800e3ec:	0800e4a5 	.word	0x0800e4a5
 800e3f0:	0800e47d 	.word	0x0800e47d
 800e3f4:	0800e4a5 	.word	0x0800e4a5
 800e3f8:	0800e4a5 	.word	0x0800e4a5
 800e3fc:	0800e4a5 	.word	0x0800e4a5
 800e400:	0800e4a5 	.word	0x0800e4a5
 800e404:	0800e4a5 	.word	0x0800e4a5
 800e408:	0800e4a5 	.word	0x0800e4a5
 800e40c:	0800e4a5 	.word	0x0800e4a5
 800e410:	0800e485 	.word	0x0800e485
 800e414:	0800e4a5 	.word	0x0800e4a5
 800e418:	0800e4a5 	.word	0x0800e4a5
 800e41c:	0800e4a5 	.word	0x0800e4a5
 800e420:	0800e4a5 	.word	0x0800e4a5
 800e424:	0800e4a5 	.word	0x0800e4a5
 800e428:	0800e4a5 	.word	0x0800e4a5
 800e42c:	0800e4a5 	.word	0x0800e4a5
 800e430:	0800e48d 	.word	0x0800e48d
 800e434:	0800e4a5 	.word	0x0800e4a5
 800e438:	0800e4a5 	.word	0x0800e4a5
 800e43c:	0800e4a5 	.word	0x0800e4a5
 800e440:	0800e4a5 	.word	0x0800e4a5
 800e444:	0800e4a5 	.word	0x0800e4a5
 800e448:	0800e4a5 	.word	0x0800e4a5
 800e44c:	0800e4a5 	.word	0x0800e4a5
 800e450:	0800e495 	.word	0x0800e495
 800e454:	0800e4a5 	.word	0x0800e4a5
 800e458:	0800e4a5 	.word	0x0800e4a5
 800e45c:	0800e4a5 	.word	0x0800e4a5
 800e460:	0800e4a5 	.word	0x0800e4a5
 800e464:	0800e4a5 	.word	0x0800e4a5
 800e468:	0800e4a5 	.word	0x0800e4a5
 800e46c:	0800e4a5 	.word	0x0800e4a5
 800e470:	0800e49d 	.word	0x0800e49d
 800e474:	2301      	movs	r3, #1
 800e476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e47a:	e222      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e47c:	2304      	movs	r3, #4
 800e47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e482:	e21e      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e484:	2308      	movs	r3, #8
 800e486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e48a:	e21a      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e48c:	2310      	movs	r3, #16
 800e48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e492:	e216      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e494:	2320      	movs	r3, #32
 800e496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e49a:	e212      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e49c:	2340      	movs	r3, #64	; 0x40
 800e49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4a2:	e20e      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e4a4:	2380      	movs	r3, #128	; 0x80
 800e4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4aa:	e20a      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a6b      	ldr	r2, [pc, #428]	; (800e660 <UART_SetConfig+0x340>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d130      	bne.n	800e518 <UART_SetConfig+0x1f8>
 800e4b6:	4b69      	ldr	r3, [pc, #420]	; (800e65c <UART_SetConfig+0x33c>)
 800e4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ba:	f003 0307 	and.w	r3, r3, #7
 800e4be:	2b05      	cmp	r3, #5
 800e4c0:	d826      	bhi.n	800e510 <UART_SetConfig+0x1f0>
 800e4c2:	a201      	add	r2, pc, #4	; (adr r2, 800e4c8 <UART_SetConfig+0x1a8>)
 800e4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c8:	0800e4e1 	.word	0x0800e4e1
 800e4cc:	0800e4e9 	.word	0x0800e4e9
 800e4d0:	0800e4f1 	.word	0x0800e4f1
 800e4d4:	0800e4f9 	.word	0x0800e4f9
 800e4d8:	0800e501 	.word	0x0800e501
 800e4dc:	0800e509 	.word	0x0800e509
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4e6:	e1ec      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e4e8:	2304      	movs	r3, #4
 800e4ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4ee:	e1e8      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e4f0:	2308      	movs	r3, #8
 800e4f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4f6:	e1e4      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e4f8:	2310      	movs	r3, #16
 800e4fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4fe:	e1e0      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e500:	2320      	movs	r3, #32
 800e502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e506:	e1dc      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e508:	2340      	movs	r3, #64	; 0x40
 800e50a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e50e:	e1d8      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e510:	2380      	movs	r3, #128	; 0x80
 800e512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e516:	e1d4      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a51      	ldr	r2, [pc, #324]	; (800e664 <UART_SetConfig+0x344>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d130      	bne.n	800e584 <UART_SetConfig+0x264>
 800e522:	4b4e      	ldr	r3, [pc, #312]	; (800e65c <UART_SetConfig+0x33c>)
 800e524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e526:	f003 0307 	and.w	r3, r3, #7
 800e52a:	2b05      	cmp	r3, #5
 800e52c:	d826      	bhi.n	800e57c <UART_SetConfig+0x25c>
 800e52e:	a201      	add	r2, pc, #4	; (adr r2, 800e534 <UART_SetConfig+0x214>)
 800e530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e534:	0800e54d 	.word	0x0800e54d
 800e538:	0800e555 	.word	0x0800e555
 800e53c:	0800e55d 	.word	0x0800e55d
 800e540:	0800e565 	.word	0x0800e565
 800e544:	0800e56d 	.word	0x0800e56d
 800e548:	0800e575 	.word	0x0800e575
 800e54c:	2300      	movs	r3, #0
 800e54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e552:	e1b6      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e554:	2304      	movs	r3, #4
 800e556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e55a:	e1b2      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e55c:	2308      	movs	r3, #8
 800e55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e562:	e1ae      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e564:	2310      	movs	r3, #16
 800e566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e56a:	e1aa      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e56c:	2320      	movs	r3, #32
 800e56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e572:	e1a6      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e574:	2340      	movs	r3, #64	; 0x40
 800e576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e57a:	e1a2      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e57c:	2380      	movs	r3, #128	; 0x80
 800e57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e582:	e19e      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4a37      	ldr	r2, [pc, #220]	; (800e668 <UART_SetConfig+0x348>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d130      	bne.n	800e5f0 <UART_SetConfig+0x2d0>
 800e58e:	4b33      	ldr	r3, [pc, #204]	; (800e65c <UART_SetConfig+0x33c>)
 800e590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e592:	f003 0307 	and.w	r3, r3, #7
 800e596:	2b05      	cmp	r3, #5
 800e598:	d826      	bhi.n	800e5e8 <UART_SetConfig+0x2c8>
 800e59a:	a201      	add	r2, pc, #4	; (adr r2, 800e5a0 <UART_SetConfig+0x280>)
 800e59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a0:	0800e5b9 	.word	0x0800e5b9
 800e5a4:	0800e5c1 	.word	0x0800e5c1
 800e5a8:	0800e5c9 	.word	0x0800e5c9
 800e5ac:	0800e5d1 	.word	0x0800e5d1
 800e5b0:	0800e5d9 	.word	0x0800e5d9
 800e5b4:	0800e5e1 	.word	0x0800e5e1
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5be:	e180      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e5c0:	2304      	movs	r3, #4
 800e5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5c6:	e17c      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e5c8:	2308      	movs	r3, #8
 800e5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5ce:	e178      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e5d0:	2310      	movs	r3, #16
 800e5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5d6:	e174      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e5d8:	2320      	movs	r3, #32
 800e5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5de:	e170      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e5e0:	2340      	movs	r3, #64	; 0x40
 800e5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5e6:	e16c      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e5e8:	2380      	movs	r3, #128	; 0x80
 800e5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5ee:	e168      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a1d      	ldr	r2, [pc, #116]	; (800e66c <UART_SetConfig+0x34c>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d142      	bne.n	800e680 <UART_SetConfig+0x360>
 800e5fa:	4b18      	ldr	r3, [pc, #96]	; (800e65c <UART_SetConfig+0x33c>)
 800e5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5fe:	f003 0307 	and.w	r3, r3, #7
 800e602:	2b05      	cmp	r3, #5
 800e604:	d838      	bhi.n	800e678 <UART_SetConfig+0x358>
 800e606:	a201      	add	r2, pc, #4	; (adr r2, 800e60c <UART_SetConfig+0x2ec>)
 800e608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e60c:	0800e625 	.word	0x0800e625
 800e610:	0800e62d 	.word	0x0800e62d
 800e614:	0800e635 	.word	0x0800e635
 800e618:	0800e63d 	.word	0x0800e63d
 800e61c:	0800e645 	.word	0x0800e645
 800e620:	0800e671 	.word	0x0800e671
 800e624:	2300      	movs	r3, #0
 800e626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e62a:	e14a      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e62c:	2304      	movs	r3, #4
 800e62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e632:	e146      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e634:	2308      	movs	r3, #8
 800e636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e63a:	e142      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e63c:	2310      	movs	r3, #16
 800e63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e642:	e13e      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e644:	2320      	movs	r3, #32
 800e646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e64a:	e13a      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e64c:	cfff69f3 	.word	0xcfff69f3
 800e650:	58000c00 	.word	0x58000c00
 800e654:	11fff4ff 	.word	0x11fff4ff
 800e658:	40011000 	.word	0x40011000
 800e65c:	58024400 	.word	0x58024400
 800e660:	40004400 	.word	0x40004400
 800e664:	40004800 	.word	0x40004800
 800e668:	40004c00 	.word	0x40004c00
 800e66c:	40005000 	.word	0x40005000
 800e670:	2340      	movs	r3, #64	; 0x40
 800e672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e676:	e124      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e678:	2380      	movs	r3, #128	; 0x80
 800e67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e67e:	e120      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4acc      	ldr	r2, [pc, #816]	; (800e9b8 <UART_SetConfig+0x698>)
 800e686:	4293      	cmp	r3, r2
 800e688:	d176      	bne.n	800e778 <UART_SetConfig+0x458>
 800e68a:	4bcc      	ldr	r3, [pc, #816]	; (800e9bc <UART_SetConfig+0x69c>)
 800e68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e68e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e692:	2b28      	cmp	r3, #40	; 0x28
 800e694:	d86c      	bhi.n	800e770 <UART_SetConfig+0x450>
 800e696:	a201      	add	r2, pc, #4	; (adr r2, 800e69c <UART_SetConfig+0x37c>)
 800e698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e69c:	0800e741 	.word	0x0800e741
 800e6a0:	0800e771 	.word	0x0800e771
 800e6a4:	0800e771 	.word	0x0800e771
 800e6a8:	0800e771 	.word	0x0800e771
 800e6ac:	0800e771 	.word	0x0800e771
 800e6b0:	0800e771 	.word	0x0800e771
 800e6b4:	0800e771 	.word	0x0800e771
 800e6b8:	0800e771 	.word	0x0800e771
 800e6bc:	0800e749 	.word	0x0800e749
 800e6c0:	0800e771 	.word	0x0800e771
 800e6c4:	0800e771 	.word	0x0800e771
 800e6c8:	0800e771 	.word	0x0800e771
 800e6cc:	0800e771 	.word	0x0800e771
 800e6d0:	0800e771 	.word	0x0800e771
 800e6d4:	0800e771 	.word	0x0800e771
 800e6d8:	0800e771 	.word	0x0800e771
 800e6dc:	0800e751 	.word	0x0800e751
 800e6e0:	0800e771 	.word	0x0800e771
 800e6e4:	0800e771 	.word	0x0800e771
 800e6e8:	0800e771 	.word	0x0800e771
 800e6ec:	0800e771 	.word	0x0800e771
 800e6f0:	0800e771 	.word	0x0800e771
 800e6f4:	0800e771 	.word	0x0800e771
 800e6f8:	0800e771 	.word	0x0800e771
 800e6fc:	0800e759 	.word	0x0800e759
 800e700:	0800e771 	.word	0x0800e771
 800e704:	0800e771 	.word	0x0800e771
 800e708:	0800e771 	.word	0x0800e771
 800e70c:	0800e771 	.word	0x0800e771
 800e710:	0800e771 	.word	0x0800e771
 800e714:	0800e771 	.word	0x0800e771
 800e718:	0800e771 	.word	0x0800e771
 800e71c:	0800e761 	.word	0x0800e761
 800e720:	0800e771 	.word	0x0800e771
 800e724:	0800e771 	.word	0x0800e771
 800e728:	0800e771 	.word	0x0800e771
 800e72c:	0800e771 	.word	0x0800e771
 800e730:	0800e771 	.word	0x0800e771
 800e734:	0800e771 	.word	0x0800e771
 800e738:	0800e771 	.word	0x0800e771
 800e73c:	0800e769 	.word	0x0800e769
 800e740:	2301      	movs	r3, #1
 800e742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e746:	e0bc      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e748:	2304      	movs	r3, #4
 800e74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e74e:	e0b8      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e750:	2308      	movs	r3, #8
 800e752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e756:	e0b4      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e758:	2310      	movs	r3, #16
 800e75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e75e:	e0b0      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e760:	2320      	movs	r3, #32
 800e762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e766:	e0ac      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e768:	2340      	movs	r3, #64	; 0x40
 800e76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e76e:	e0a8      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e770:	2380      	movs	r3, #128	; 0x80
 800e772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e776:	e0a4      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a90      	ldr	r2, [pc, #576]	; (800e9c0 <UART_SetConfig+0x6a0>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d130      	bne.n	800e7e4 <UART_SetConfig+0x4c4>
 800e782:	4b8e      	ldr	r3, [pc, #568]	; (800e9bc <UART_SetConfig+0x69c>)
 800e784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e786:	f003 0307 	and.w	r3, r3, #7
 800e78a:	2b05      	cmp	r3, #5
 800e78c:	d826      	bhi.n	800e7dc <UART_SetConfig+0x4bc>
 800e78e:	a201      	add	r2, pc, #4	; (adr r2, 800e794 <UART_SetConfig+0x474>)
 800e790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e794:	0800e7ad 	.word	0x0800e7ad
 800e798:	0800e7b5 	.word	0x0800e7b5
 800e79c:	0800e7bd 	.word	0x0800e7bd
 800e7a0:	0800e7c5 	.word	0x0800e7c5
 800e7a4:	0800e7cd 	.word	0x0800e7cd
 800e7a8:	0800e7d5 	.word	0x0800e7d5
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7b2:	e086      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e7b4:	2304      	movs	r3, #4
 800e7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7ba:	e082      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e7bc:	2308      	movs	r3, #8
 800e7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7c2:	e07e      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e7c4:	2310      	movs	r3, #16
 800e7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7ca:	e07a      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e7cc:	2320      	movs	r3, #32
 800e7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7d2:	e076      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e7d4:	2340      	movs	r3, #64	; 0x40
 800e7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7da:	e072      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e7dc:	2380      	movs	r3, #128	; 0x80
 800e7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e7e2:	e06e      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4a76      	ldr	r2, [pc, #472]	; (800e9c4 <UART_SetConfig+0x6a4>)
 800e7ea:	4293      	cmp	r3, r2
 800e7ec:	d130      	bne.n	800e850 <UART_SetConfig+0x530>
 800e7ee:	4b73      	ldr	r3, [pc, #460]	; (800e9bc <UART_SetConfig+0x69c>)
 800e7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7f2:	f003 0307 	and.w	r3, r3, #7
 800e7f6:	2b05      	cmp	r3, #5
 800e7f8:	d826      	bhi.n	800e848 <UART_SetConfig+0x528>
 800e7fa:	a201      	add	r2, pc, #4	; (adr r2, 800e800 <UART_SetConfig+0x4e0>)
 800e7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e800:	0800e819 	.word	0x0800e819
 800e804:	0800e821 	.word	0x0800e821
 800e808:	0800e829 	.word	0x0800e829
 800e80c:	0800e831 	.word	0x0800e831
 800e810:	0800e839 	.word	0x0800e839
 800e814:	0800e841 	.word	0x0800e841
 800e818:	2300      	movs	r3, #0
 800e81a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e81e:	e050      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e820:	2304      	movs	r3, #4
 800e822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e826:	e04c      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e828:	2308      	movs	r3, #8
 800e82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e82e:	e048      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e830:	2310      	movs	r3, #16
 800e832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e836:	e044      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e838:	2320      	movs	r3, #32
 800e83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e83e:	e040      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e840:	2340      	movs	r3, #64	; 0x40
 800e842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e846:	e03c      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e848:	2380      	movs	r3, #128	; 0x80
 800e84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e84e:	e038      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a5c      	ldr	r2, [pc, #368]	; (800e9c8 <UART_SetConfig+0x6a8>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d130      	bne.n	800e8bc <UART_SetConfig+0x59c>
 800e85a:	4b58      	ldr	r3, [pc, #352]	; (800e9bc <UART_SetConfig+0x69c>)
 800e85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e85e:	f003 0307 	and.w	r3, r3, #7
 800e862:	2b05      	cmp	r3, #5
 800e864:	d826      	bhi.n	800e8b4 <UART_SetConfig+0x594>
 800e866:	a201      	add	r2, pc, #4	; (adr r2, 800e86c <UART_SetConfig+0x54c>)
 800e868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e86c:	0800e885 	.word	0x0800e885
 800e870:	0800e88d 	.word	0x0800e88d
 800e874:	0800e895 	.word	0x0800e895
 800e878:	0800e89d 	.word	0x0800e89d
 800e87c:	0800e8a5 	.word	0x0800e8a5
 800e880:	0800e8ad 	.word	0x0800e8ad
 800e884:	2302      	movs	r3, #2
 800e886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e88a:	e01a      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e88c:	2304      	movs	r3, #4
 800e88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e892:	e016      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e894:	2308      	movs	r3, #8
 800e896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e89a:	e012      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e89c:	2310      	movs	r3, #16
 800e89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8a2:	e00e      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e8a4:	2320      	movs	r3, #32
 800e8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8aa:	e00a      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e8ac:	2340      	movs	r3, #64	; 0x40
 800e8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8b2:	e006      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e8b4:	2380      	movs	r3, #128	; 0x80
 800e8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ba:	e002      	b.n	800e8c2 <UART_SetConfig+0x5a2>
 800e8bc:	2380      	movs	r3, #128	; 0x80
 800e8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a40      	ldr	r2, [pc, #256]	; (800e9c8 <UART_SetConfig+0x6a8>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	f040 80ef 	bne.w	800eaac <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e8ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e8d2:	2b20      	cmp	r3, #32
 800e8d4:	dc46      	bgt.n	800e964 <UART_SetConfig+0x644>
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	f2c0 8081 	blt.w	800e9de <UART_SetConfig+0x6be>
 800e8dc:	3b02      	subs	r3, #2
 800e8de:	2b1e      	cmp	r3, #30
 800e8e0:	d87d      	bhi.n	800e9de <UART_SetConfig+0x6be>
 800e8e2:	a201      	add	r2, pc, #4	; (adr r2, 800e8e8 <UART_SetConfig+0x5c8>)
 800e8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e8:	0800e96b 	.word	0x0800e96b
 800e8ec:	0800e9df 	.word	0x0800e9df
 800e8f0:	0800e973 	.word	0x0800e973
 800e8f4:	0800e9df 	.word	0x0800e9df
 800e8f8:	0800e9df 	.word	0x0800e9df
 800e8fc:	0800e9df 	.word	0x0800e9df
 800e900:	0800e983 	.word	0x0800e983
 800e904:	0800e9df 	.word	0x0800e9df
 800e908:	0800e9df 	.word	0x0800e9df
 800e90c:	0800e9df 	.word	0x0800e9df
 800e910:	0800e9df 	.word	0x0800e9df
 800e914:	0800e9df 	.word	0x0800e9df
 800e918:	0800e9df 	.word	0x0800e9df
 800e91c:	0800e9df 	.word	0x0800e9df
 800e920:	0800e993 	.word	0x0800e993
 800e924:	0800e9df 	.word	0x0800e9df
 800e928:	0800e9df 	.word	0x0800e9df
 800e92c:	0800e9df 	.word	0x0800e9df
 800e930:	0800e9df 	.word	0x0800e9df
 800e934:	0800e9df 	.word	0x0800e9df
 800e938:	0800e9df 	.word	0x0800e9df
 800e93c:	0800e9df 	.word	0x0800e9df
 800e940:	0800e9df 	.word	0x0800e9df
 800e944:	0800e9df 	.word	0x0800e9df
 800e948:	0800e9df 	.word	0x0800e9df
 800e94c:	0800e9df 	.word	0x0800e9df
 800e950:	0800e9df 	.word	0x0800e9df
 800e954:	0800e9df 	.word	0x0800e9df
 800e958:	0800e9df 	.word	0x0800e9df
 800e95c:	0800e9df 	.word	0x0800e9df
 800e960:	0800e9d1 	.word	0x0800e9d1
 800e964:	2b40      	cmp	r3, #64	; 0x40
 800e966:	d036      	beq.n	800e9d6 <UART_SetConfig+0x6b6>
 800e968:	e039      	b.n	800e9de <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e96a:	f7fd f8b3 	bl	800bad4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e96e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e970:	e03b      	b.n	800e9ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e972:	f107 0314 	add.w	r3, r7, #20
 800e976:	4618      	mov	r0, r3
 800e978:	f7fd f8c2 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e980:	e033      	b.n	800e9ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e982:	f107 0308 	add.w	r3, r7, #8
 800e986:	4618      	mov	r0, r3
 800e988:	f7fd fa0e 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e990:	e02b      	b.n	800e9ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e992:	4b0a      	ldr	r3, [pc, #40]	; (800e9bc <UART_SetConfig+0x69c>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	f003 0320 	and.w	r3, r3, #32
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d009      	beq.n	800e9b2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e99e:	4b07      	ldr	r3, [pc, #28]	; (800e9bc <UART_SetConfig+0x69c>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	08db      	lsrs	r3, r3, #3
 800e9a4:	f003 0303 	and.w	r3, r3, #3
 800e9a8:	4a08      	ldr	r2, [pc, #32]	; (800e9cc <UART_SetConfig+0x6ac>)
 800e9aa:	fa22 f303 	lsr.w	r3, r2, r3
 800e9ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e9b0:	e01b      	b.n	800e9ea <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800e9b2:	4b06      	ldr	r3, [pc, #24]	; (800e9cc <UART_SetConfig+0x6ac>)
 800e9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e9b6:	e018      	b.n	800e9ea <UART_SetConfig+0x6ca>
 800e9b8:	40011400 	.word	0x40011400
 800e9bc:	58024400 	.word	0x58024400
 800e9c0:	40007800 	.word	0x40007800
 800e9c4:	40007c00 	.word	0x40007c00
 800e9c8:	58000c00 	.word	0x58000c00
 800e9cc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e9d0:	4bc4      	ldr	r3, [pc, #784]	; (800ece4 <UART_SetConfig+0x9c4>)
 800e9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e9d4:	e009      	b.n	800e9ea <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e9dc:	e005      	b.n	800e9ea <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e9e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f000 81da 	beq.w	800eda6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f6:	4abc      	ldr	r2, [pc, #752]	; (800ece8 <UART_SetConfig+0x9c8>)
 800e9f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea04:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	685a      	ldr	r2, [r3, #4]
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	005b      	lsls	r3, r3, #1
 800ea0e:	4413      	add	r3, r2
 800ea10:	6a3a      	ldr	r2, [r7, #32]
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d305      	bcc.n	800ea22 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	685b      	ldr	r3, [r3, #4]
 800ea1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea1c:	6a3a      	ldr	r2, [r7, #32]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d903      	bls.n	800ea2a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ea22:	2301      	movs	r3, #1
 800ea24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ea28:	e1bd      	b.n	800eda6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f04f 0100 	mov.w	r1, #0
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea36:	4aac      	ldr	r2, [pc, #688]	; (800ece8 <UART_SetConfig+0x9c8>)
 800ea38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	f04f 0300 	mov.w	r3, #0
 800ea42:	f7f1 fca5 	bl	8000390 <__aeabi_uldivmod>
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	4610      	mov	r0, r2
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	f04f 0200 	mov.w	r2, #0
 800ea52:	f04f 0300 	mov.w	r3, #0
 800ea56:	020b      	lsls	r3, r1, #8
 800ea58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ea5c:	0202      	lsls	r2, r0, #8
 800ea5e:	6879      	ldr	r1, [r7, #4]
 800ea60:	6849      	ldr	r1, [r1, #4]
 800ea62:	0849      	lsrs	r1, r1, #1
 800ea64:	4608      	mov	r0, r1
 800ea66:	f04f 0100 	mov.w	r1, #0
 800ea6a:	1814      	adds	r4, r2, r0
 800ea6c:	eb43 0501 	adc.w	r5, r3, r1
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	461a      	mov	r2, r3
 800ea76:	f04f 0300 	mov.w	r3, #0
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	4629      	mov	r1, r5
 800ea7e:	f7f1 fc87 	bl	8000390 <__aeabi_uldivmod>
 800ea82:	4602      	mov	r2, r0
 800ea84:	460b      	mov	r3, r1
 800ea86:	4613      	mov	r3, r2
 800ea88:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ea8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ea90:	d308      	bcc.n	800eaa4 <UART_SetConfig+0x784>
 800ea92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea98:	d204      	bcs.n	800eaa4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaa0:	60da      	str	r2, [r3, #12]
 800eaa2:	e180      	b.n	800eda6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eaaa:	e17c      	b.n	800eda6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	69db      	ldr	r3, [r3, #28]
 800eab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eab4:	f040 80bf 	bne.w	800ec36 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800eab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eabc:	2b20      	cmp	r3, #32
 800eabe:	dc49      	bgt.n	800eb54 <UART_SetConfig+0x834>
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	db7c      	blt.n	800ebbe <UART_SetConfig+0x89e>
 800eac4:	2b20      	cmp	r3, #32
 800eac6:	d87a      	bhi.n	800ebbe <UART_SetConfig+0x89e>
 800eac8:	a201      	add	r2, pc, #4	; (adr r2, 800ead0 <UART_SetConfig+0x7b0>)
 800eaca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eace:	bf00      	nop
 800ead0:	0800eb5b 	.word	0x0800eb5b
 800ead4:	0800eb63 	.word	0x0800eb63
 800ead8:	0800ebbf 	.word	0x0800ebbf
 800eadc:	0800ebbf 	.word	0x0800ebbf
 800eae0:	0800eb6b 	.word	0x0800eb6b
 800eae4:	0800ebbf 	.word	0x0800ebbf
 800eae8:	0800ebbf 	.word	0x0800ebbf
 800eaec:	0800ebbf 	.word	0x0800ebbf
 800eaf0:	0800eb7b 	.word	0x0800eb7b
 800eaf4:	0800ebbf 	.word	0x0800ebbf
 800eaf8:	0800ebbf 	.word	0x0800ebbf
 800eafc:	0800ebbf 	.word	0x0800ebbf
 800eb00:	0800ebbf 	.word	0x0800ebbf
 800eb04:	0800ebbf 	.word	0x0800ebbf
 800eb08:	0800ebbf 	.word	0x0800ebbf
 800eb0c:	0800ebbf 	.word	0x0800ebbf
 800eb10:	0800eb8b 	.word	0x0800eb8b
 800eb14:	0800ebbf 	.word	0x0800ebbf
 800eb18:	0800ebbf 	.word	0x0800ebbf
 800eb1c:	0800ebbf 	.word	0x0800ebbf
 800eb20:	0800ebbf 	.word	0x0800ebbf
 800eb24:	0800ebbf 	.word	0x0800ebbf
 800eb28:	0800ebbf 	.word	0x0800ebbf
 800eb2c:	0800ebbf 	.word	0x0800ebbf
 800eb30:	0800ebbf 	.word	0x0800ebbf
 800eb34:	0800ebbf 	.word	0x0800ebbf
 800eb38:	0800ebbf 	.word	0x0800ebbf
 800eb3c:	0800ebbf 	.word	0x0800ebbf
 800eb40:	0800ebbf 	.word	0x0800ebbf
 800eb44:	0800ebbf 	.word	0x0800ebbf
 800eb48:	0800ebbf 	.word	0x0800ebbf
 800eb4c:	0800ebbf 	.word	0x0800ebbf
 800eb50:	0800ebb1 	.word	0x0800ebb1
 800eb54:	2b40      	cmp	r3, #64	; 0x40
 800eb56:	d02e      	beq.n	800ebb6 <UART_SetConfig+0x896>
 800eb58:	e031      	b.n	800ebbe <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb5a:	f7fc f84f 	bl	800abfc <HAL_RCC_GetPCLK1Freq>
 800eb5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800eb60:	e033      	b.n	800ebca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb62:	f7fc f861 	bl	800ac28 <HAL_RCC_GetPCLK2Freq>
 800eb66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800eb68:	e02f      	b.n	800ebca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb6a:	f107 0314 	add.w	r3, r7, #20
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7fc ffc6 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eb78:	e027      	b.n	800ebca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb7a:	f107 0308 	add.w	r3, r7, #8
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fd f912 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eb88:	e01f      	b.n	800ebca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb8a:	4b58      	ldr	r3, [pc, #352]	; (800ecec <UART_SetConfig+0x9cc>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	f003 0320 	and.w	r3, r3, #32
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d009      	beq.n	800ebaa <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eb96:	4b55      	ldr	r3, [pc, #340]	; (800ecec <UART_SetConfig+0x9cc>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	08db      	lsrs	r3, r3, #3
 800eb9c:	f003 0303 	and.w	r3, r3, #3
 800eba0:	4a53      	ldr	r2, [pc, #332]	; (800ecf0 <UART_SetConfig+0x9d0>)
 800eba2:	fa22 f303 	lsr.w	r3, r2, r3
 800eba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eba8:	e00f      	b.n	800ebca <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800ebaa:	4b51      	ldr	r3, [pc, #324]	; (800ecf0 <UART_SetConfig+0x9d0>)
 800ebac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebae:	e00c      	b.n	800ebca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ebb0:	4b4c      	ldr	r3, [pc, #304]	; (800ece4 <UART_SetConfig+0x9c4>)
 800ebb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebb4:	e009      	b.n	800ebca <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebbc:	e005      	b.n	800ebca <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ebc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ebca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f000 80ea 	beq.w	800eda6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd6:	4a44      	ldr	r2, [pc, #272]	; (800ece8 <UART_SetConfig+0x9c8>)
 800ebd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ebdc:	461a      	mov	r2, r3
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebe4:	005a      	lsls	r2, r3, #1
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	085b      	lsrs	r3, r3, #1
 800ebec:	441a      	add	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ebfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfc:	2b0f      	cmp	r3, #15
 800ebfe:	d916      	bls.n	800ec2e <UART_SetConfig+0x90e>
 800ec00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec06:	d212      	bcs.n	800ec2e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	f023 030f 	bic.w	r3, r3, #15
 800ec10:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ec12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec14:	085b      	lsrs	r3, r3, #1
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	f003 0307 	and.w	r3, r3, #7
 800ec1c:	b29a      	uxth	r2, r3
 800ec1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec20:	4313      	orrs	r3, r2
 800ec22:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec2a:	60da      	str	r2, [r3, #12]
 800ec2c:	e0bb      	b.n	800eda6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ec2e:	2301      	movs	r3, #1
 800ec30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ec34:	e0b7      	b.n	800eda6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ec3a:	2b20      	cmp	r3, #32
 800ec3c:	dc4a      	bgt.n	800ecd4 <UART_SetConfig+0x9b4>
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	f2c0 8086 	blt.w	800ed50 <UART_SetConfig+0xa30>
 800ec44:	2b20      	cmp	r3, #32
 800ec46:	f200 8083 	bhi.w	800ed50 <UART_SetConfig+0xa30>
 800ec4a:	a201      	add	r2, pc, #4	; (adr r2, 800ec50 <UART_SetConfig+0x930>)
 800ec4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec50:	0800ecdb 	.word	0x0800ecdb
 800ec54:	0800ecf5 	.word	0x0800ecf5
 800ec58:	0800ed51 	.word	0x0800ed51
 800ec5c:	0800ed51 	.word	0x0800ed51
 800ec60:	0800ecfd 	.word	0x0800ecfd
 800ec64:	0800ed51 	.word	0x0800ed51
 800ec68:	0800ed51 	.word	0x0800ed51
 800ec6c:	0800ed51 	.word	0x0800ed51
 800ec70:	0800ed0d 	.word	0x0800ed0d
 800ec74:	0800ed51 	.word	0x0800ed51
 800ec78:	0800ed51 	.word	0x0800ed51
 800ec7c:	0800ed51 	.word	0x0800ed51
 800ec80:	0800ed51 	.word	0x0800ed51
 800ec84:	0800ed51 	.word	0x0800ed51
 800ec88:	0800ed51 	.word	0x0800ed51
 800ec8c:	0800ed51 	.word	0x0800ed51
 800ec90:	0800ed1d 	.word	0x0800ed1d
 800ec94:	0800ed51 	.word	0x0800ed51
 800ec98:	0800ed51 	.word	0x0800ed51
 800ec9c:	0800ed51 	.word	0x0800ed51
 800eca0:	0800ed51 	.word	0x0800ed51
 800eca4:	0800ed51 	.word	0x0800ed51
 800eca8:	0800ed51 	.word	0x0800ed51
 800ecac:	0800ed51 	.word	0x0800ed51
 800ecb0:	0800ed51 	.word	0x0800ed51
 800ecb4:	0800ed51 	.word	0x0800ed51
 800ecb8:	0800ed51 	.word	0x0800ed51
 800ecbc:	0800ed51 	.word	0x0800ed51
 800ecc0:	0800ed51 	.word	0x0800ed51
 800ecc4:	0800ed51 	.word	0x0800ed51
 800ecc8:	0800ed51 	.word	0x0800ed51
 800eccc:	0800ed51 	.word	0x0800ed51
 800ecd0:	0800ed43 	.word	0x0800ed43
 800ecd4:	2b40      	cmp	r3, #64	; 0x40
 800ecd6:	d037      	beq.n	800ed48 <UART_SetConfig+0xa28>
 800ecd8:	e03a      	b.n	800ed50 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ecda:	f7fb ff8f 	bl	800abfc <HAL_RCC_GetPCLK1Freq>
 800ecde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ece0:	e03c      	b.n	800ed5c <UART_SetConfig+0xa3c>
 800ece2:	bf00      	nop
 800ece4:	003d0900 	.word	0x003d0900
 800ece8:	08012ff4 	.word	0x08012ff4
 800ecec:	58024400 	.word	0x58024400
 800ecf0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ecf4:	f7fb ff98 	bl	800ac28 <HAL_RCC_GetPCLK2Freq>
 800ecf8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ecfa:	e02f      	b.n	800ed5c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecfc:	f107 0314 	add.w	r3, r7, #20
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7fc fefd 	bl	800bb00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed0a:	e027      	b.n	800ed5c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed0c:	f107 0308 	add.w	r3, r7, #8
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7fd f849 	bl	800bda8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed1a:	e01f      	b.n	800ed5c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed1c:	4b2c      	ldr	r3, [pc, #176]	; (800edd0 <UART_SetConfig+0xab0>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f003 0320 	and.w	r3, r3, #32
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d009      	beq.n	800ed3c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed28:	4b29      	ldr	r3, [pc, #164]	; (800edd0 <UART_SetConfig+0xab0>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	08db      	lsrs	r3, r3, #3
 800ed2e:	f003 0303 	and.w	r3, r3, #3
 800ed32:	4a28      	ldr	r2, [pc, #160]	; (800edd4 <UART_SetConfig+0xab4>)
 800ed34:	fa22 f303 	lsr.w	r3, r2, r3
 800ed38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed3a:	e00f      	b.n	800ed5c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800ed3c:	4b25      	ldr	r3, [pc, #148]	; (800edd4 <UART_SetConfig+0xab4>)
 800ed3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed40:	e00c      	b.n	800ed5c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed42:	4b25      	ldr	r3, [pc, #148]	; (800edd8 <UART_SetConfig+0xab8>)
 800ed44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed46:	e009      	b.n	800ed5c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed4e:	e005      	b.n	800ed5c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ed50:	2300      	movs	r3, #0
 800ed52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ed54:	2301      	movs	r3, #1
 800ed56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ed5a:	bf00      	nop
    }

    if (pclk != 0U)
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d021      	beq.n	800eda6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed66:	4a1d      	ldr	r2, [pc, #116]	; (800eddc <UART_SetConfig+0xabc>)
 800ed68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed70:	fbb3 f2f2 	udiv	r2, r3, r2
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	085b      	lsrs	r3, r3, #1
 800ed7a:	441a      	add	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8a:	2b0f      	cmp	r3, #15
 800ed8c:	d908      	bls.n	800eda0 <UART_SetConfig+0xa80>
 800ed8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed94:	d204      	bcs.n	800eda0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed9c:	60da      	str	r2, [r3, #12]
 800ed9e:	e002      	b.n	800eda6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800eda0:	2301      	movs	r3, #1
 800eda2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2201      	movs	r2, #1
 800edaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2201      	movs	r2, #1
 800edb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800edc2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3738      	adds	r7, #56	; 0x38
 800edca:	46bd      	mov	sp, r7
 800edcc:	bdb0      	pop	{r4, r5, r7, pc}
 800edce:	bf00      	nop
 800edd0:	58024400 	.word	0x58024400
 800edd4:	03d09000 	.word	0x03d09000
 800edd8:	003d0900 	.word	0x003d0900
 800eddc:	08012ff4 	.word	0x08012ff4

0800ede0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b083      	sub	sp, #12
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edec:	f003 0301 	and.w	r3, r3, #1
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00a      	beq.n	800ee0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	430a      	orrs	r2, r1
 800ee08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee0e:	f003 0302 	and.w	r3, r3, #2
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00a      	beq.n	800ee2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	430a      	orrs	r2, r1
 800ee2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee30:	f003 0304 	and.w	r3, r3, #4
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00a      	beq.n	800ee4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	430a      	orrs	r2, r1
 800ee4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee52:	f003 0308 	and.w	r3, r3, #8
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d00a      	beq.n	800ee70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	430a      	orrs	r2, r1
 800ee6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee74:	f003 0310 	and.w	r3, r3, #16
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d00a      	beq.n	800ee92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	430a      	orrs	r2, r1
 800ee90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee96:	f003 0320 	and.w	r3, r3, #32
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00a      	beq.n	800eeb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	689b      	ldr	r3, [r3, #8]
 800eea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	430a      	orrs	r2, r1
 800eeb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d01a      	beq.n	800eef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	430a      	orrs	r2, r1
 800eed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eede:	d10a      	bne.n	800eef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	430a      	orrs	r2, r1
 800eef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eefa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00a      	beq.n	800ef18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	430a      	orrs	r2, r1
 800ef16:	605a      	str	r2, [r3, #4]
  }
}
 800ef18:	bf00      	nop
 800ef1a:	370c      	adds	r7, #12
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b086      	sub	sp, #24
 800ef28:	af02      	add	r7, sp, #8
 800ef2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef34:	f7f5 fafa 	bl	800452c <HAL_GetTick>
 800ef38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	f003 0308 	and.w	r3, r3, #8
 800ef44:	2b08      	cmp	r3, #8
 800ef46:	d10e      	bne.n	800ef66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef4c:	9300      	str	r3, [sp, #0]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2200      	movs	r2, #0
 800ef52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 f82f 	bl	800efba <UART_WaitOnFlagUntilTimeout>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d001      	beq.n	800ef66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef62:	2303      	movs	r3, #3
 800ef64:	e025      	b.n	800efb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f003 0304 	and.w	r3, r3, #4
 800ef70:	2b04      	cmp	r3, #4
 800ef72:	d10e      	bne.n	800ef92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef78:	9300      	str	r3, [sp, #0]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 f819 	bl	800efba <UART_WaitOnFlagUntilTimeout>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d001      	beq.n	800ef92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef8e:	2303      	movs	r3, #3
 800ef90:	e00f      	b.n	800efb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2220      	movs	r2, #32
 800ef96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2220      	movs	r2, #32
 800ef9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2200      	movs	r2, #0
 800efa6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2200      	movs	r2, #0
 800efac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800efb0:	2300      	movs	r3, #0
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}

0800efba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	b084      	sub	sp, #16
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	60f8      	str	r0, [r7, #12]
 800efc2:	60b9      	str	r1, [r7, #8]
 800efc4:	603b      	str	r3, [r7, #0]
 800efc6:	4613      	mov	r3, r2
 800efc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efca:	e062      	b.n	800f092 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efd2:	d05e      	beq.n	800f092 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efd4:	f7f5 faaa 	bl	800452c <HAL_GetTick>
 800efd8:	4602      	mov	r2, r0
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	69ba      	ldr	r2, [r7, #24]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d302      	bcc.n	800efea <UART_WaitOnFlagUntilTimeout+0x30>
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d11d      	bne.n	800f026 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800eff8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	689a      	ldr	r2, [r3, #8]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f022 0201 	bic.w	r2, r2, #1
 800f008:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2220      	movs	r2, #32
 800f00e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2220      	movs	r2, #32
 800f016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2200      	movs	r2, #0
 800f01e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f022:	2303      	movs	r3, #3
 800f024:	e045      	b.n	800f0b2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f003 0304 	and.w	r3, r3, #4
 800f030:	2b00      	cmp	r3, #0
 800f032:	d02e      	beq.n	800f092 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	69db      	ldr	r3, [r3, #28]
 800f03a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f03e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f042:	d126      	bne.n	800f092 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f04c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	681a      	ldr	r2, [r3, #0]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f05c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	689a      	ldr	r2, [r3, #8]
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f022 0201 	bic.w	r2, r2, #1
 800f06c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2220      	movs	r2, #32
 800f072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2220      	movs	r2, #32
 800f07a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2220      	movs	r2, #32
 800f082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	2200      	movs	r2, #0
 800f08a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f08e:	2303      	movs	r3, #3
 800f090:	e00f      	b.n	800f0b2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	69da      	ldr	r2, [r3, #28]
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	4013      	ands	r3, r2
 800f09c:	68ba      	ldr	r2, [r7, #8]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	bf0c      	ite	eq
 800f0a2:	2301      	moveq	r3, #1
 800f0a4:	2300      	movne	r3, #0
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	79fb      	ldrb	r3, [r7, #7]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d08d      	beq.n	800efcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f0b0:	2300      	movs	r3, #0
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3710      	adds	r7, #16
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
	...

0800f0bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b085      	sub	sp, #20
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	60f8      	str	r0, [r7, #12]
 800f0c4:	60b9      	str	r1, [r7, #8]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	68ba      	ldr	r2, [r7, #8]
 800f0ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	88fa      	ldrh	r2, [r7, #6]
 800f0d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	88fa      	ldrh	r2, [r7, #6]
 800f0dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	689b      	ldr	r3, [r3, #8]
 800f0ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0ee:	d10e      	bne.n	800f10e <UART_Start_Receive_IT+0x52>
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	691b      	ldr	r3, [r3, #16]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d105      	bne.n	800f104 <UART_Start_Receive_IT+0x48>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f0fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f102:	e02d      	b.n	800f160 <UART_Start_Receive_IT+0xa4>
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	22ff      	movs	r2, #255	; 0xff
 800f108:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f10c:	e028      	b.n	800f160 <UART_Start_Receive_IT+0xa4>
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	689b      	ldr	r3, [r3, #8]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d10d      	bne.n	800f132 <UART_Start_Receive_IT+0x76>
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d104      	bne.n	800f128 <UART_Start_Receive_IT+0x6c>
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	22ff      	movs	r2, #255	; 0xff
 800f122:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f126:	e01b      	b.n	800f160 <UART_Start_Receive_IT+0xa4>
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	227f      	movs	r2, #127	; 0x7f
 800f12c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f130:	e016      	b.n	800f160 <UART_Start_Receive_IT+0xa4>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f13a:	d10d      	bne.n	800f158 <UART_Start_Receive_IT+0x9c>
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	691b      	ldr	r3, [r3, #16]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d104      	bne.n	800f14e <UART_Start_Receive_IT+0x92>
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	227f      	movs	r2, #127	; 0x7f
 800f148:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f14c:	e008      	b.n	800f160 <UART_Start_Receive_IT+0xa4>
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	223f      	movs	r2, #63	; 0x3f
 800f152:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f156:	e003      	b.n	800f160 <UART_Start_Receive_IT+0xa4>
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2200      	movs	r2, #0
 800f15c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	2200      	movs	r2, #0
 800f164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2222      	movs	r2, #34	; 0x22
 800f16c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	689a      	ldr	r2, [r3, #8]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f042 0201 	orr.w	r2, r2, #1
 800f17e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f188:	d12a      	bne.n	800f1e0 <UART_Start_Receive_IT+0x124>
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f190:	88fa      	ldrh	r2, [r7, #6]
 800f192:	429a      	cmp	r2, r3
 800f194:	d324      	bcc.n	800f1e0 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	689b      	ldr	r3, [r3, #8]
 800f19a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f19e:	d107      	bne.n	800f1b0 <UART_Start_Receive_IT+0xf4>
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	691b      	ldr	r3, [r3, #16]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d103      	bne.n	800f1b0 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	4a1f      	ldr	r2, [pc, #124]	; (800f228 <UART_Start_Receive_IT+0x16c>)
 800f1ac:	671a      	str	r2, [r3, #112]	; 0x70
 800f1ae:	e002      	b.n	800f1b6 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	4a1e      	ldr	r2, [pc, #120]	; (800f22c <UART_Start_Receive_IT+0x170>)
 800f1b4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f1cc:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	689a      	ldr	r2, [r3, #8]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f1dc:	609a      	str	r2, [r3, #8]
 800f1de:	e01b      	b.n	800f218 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1e8:	d107      	bne.n	800f1fa <UART_Start_Receive_IT+0x13e>
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	691b      	ldr	r3, [r3, #16]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d103      	bne.n	800f1fa <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	4a0e      	ldr	r2, [pc, #56]	; (800f230 <UART_Start_Receive_IT+0x174>)
 800f1f6:	671a      	str	r2, [r3, #112]	; 0x70
 800f1f8:	e002      	b.n	800f200 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	4a0d      	ldr	r2, [pc, #52]	; (800f234 <UART_Start_Receive_IT+0x178>)
 800f1fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	681a      	ldr	r2, [r3, #0]
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f216:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3714      	adds	r7, #20
 800f21e:	46bd      	mov	sp, r7
 800f220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f224:	4770      	bx	lr
 800f226:	bf00      	nop
 800f228:	0800f7d9 	.word	0x0800f7d9
 800f22c:	0800f5d5 	.word	0x0800f5d5
 800f230:	0800f4fd 	.word	0x0800f4fd
 800f234:	0800f425 	.word	0x0800f425

0800f238 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f238:	b480      	push	{r7}
 800f23a:	b083      	sub	sp, #12
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f24e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	689a      	ldr	r2, [r3, #8]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f25e:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2220      	movs	r2, #32
 800f264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f268:	bf00      	nop
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f28a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	6899      	ldr	r1, [r3, #8]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	4b0f      	ldr	r3, [pc, #60]	; (800f2d4 <UART_EndRxTransfer+0x60>)
 800f298:	400b      	ands	r3, r1
 800f29a:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d107      	bne.n	800f2b4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f022 0210 	bic.w	r2, r2, #16
 800f2b2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2220      	movs	r2, #32
 800f2b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f2c8:	bf00      	nop
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr
 800f2d4:	effffffe 	.word	0xeffffffe

0800f2d8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b084      	sub	sp, #16
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2e4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	69db      	ldr	r3, [r3, #28]
 800f2ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2ee:	d014      	beq.n	800f31a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	689a      	ldr	r2, [r3, #8]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f306:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f316:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f318:	e002      	b.n	800f320 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f7fe ffd6 	bl	800e2cc <HAL_UART_TxCpltCallback>
}
 800f320:	bf00      	nop
 800f322:	3710      	adds	r7, #16
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f334:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	f7fe ffd2 	bl	800e2e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f33c:	bf00      	nop
 800f33e:	3710      	adds	r7, #16
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b086      	sub	sp, #24
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f350:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f358:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f360:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	689b      	ldr	r3, [r3, #8]
 800f368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f36c:	2b80      	cmp	r3, #128	; 0x80
 800f36e:	d109      	bne.n	800f384 <UART_DMAError+0x40>
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	2b21      	cmp	r3, #33	; 0x21
 800f374:	d106      	bne.n	800f384 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	2200      	movs	r2, #0
 800f37a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f37e:	6978      	ldr	r0, [r7, #20]
 800f380:	f7ff ff5a 	bl	800f238 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f384:	697b      	ldr	r3, [r7, #20]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	689b      	ldr	r3, [r3, #8]
 800f38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f38e:	2b40      	cmp	r3, #64	; 0x40
 800f390:	d109      	bne.n	800f3a6 <UART_DMAError+0x62>
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2b22      	cmp	r3, #34	; 0x22
 800f396:	d106      	bne.n	800f3a6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	2200      	movs	r2, #0
 800f39c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f3a0:	6978      	ldr	r0, [r7, #20]
 800f3a2:	f7ff ff67 	bl	800f274 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3ac:	f043 0210 	orr.w	r2, r3, #16
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f3b6:	6978      	ldr	r0, [r7, #20]
 800f3b8:	f7fe ff9c 	bl	800e2f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3bc:	bf00      	nop
 800f3be:	3718      	adds	r7, #24
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f7fe ff86 	bl	800e2f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f3e8:	bf00      	nop
 800f3ea:	3710      	adds	r7, #16
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f406:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2220      	movs	r2, #32
 800f40c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f7fe ff58 	bl	800e2cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f41c:	bf00      	nop
 800f41e:	3708      	adds	r7, #8
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f432:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f43a:	2b22      	cmp	r3, #34	; 0x22
 800f43c:	d152      	bne.n	800f4e4 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f444:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f446:	89bb      	ldrh	r3, [r7, #12]
 800f448:	b2d9      	uxtb	r1, r3
 800f44a:	89fb      	ldrh	r3, [r7, #14]
 800f44c:	b2da      	uxtb	r2, r3
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f452:	400a      	ands	r2, r1
 800f454:	b2d2      	uxtb	r2, r2
 800f456:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f45c:	1c5a      	adds	r2, r3, #1
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f468:	b29b      	uxth	r3, r3
 800f46a:	3b01      	subs	r3, #1
 800f46c:	b29a      	uxth	r2, r3
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d139      	bne.n	800f4f4 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f48e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	689a      	ldr	r2, [r3, #8]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f022 0201 	bic.w	r2, r2, #1
 800f49e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2220      	movs	r2, #32
 800f4a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	d10f      	bne.n	800f4d6 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f022 0210 	bic.w	r2, r2, #16
 800f4c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7fe ff1a 	bl	800e308 <HAL_UARTEx_RxEventCallback>
 800f4d4:	e002      	b.n	800f4dc <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f7f4 f9c2 	bl	8003860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f4e2:	e007      	b.n	800f4f4 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	699a      	ldr	r2, [r3, #24]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f042 0208 	orr.w	r2, r2, #8
 800f4f2:	619a      	str	r2, [r3, #24]
}
 800f4f4:	bf00      	nop
 800f4f6:	3710      	adds	r7, #16
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b084      	sub	sp, #16
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f50a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f512:	2b22      	cmp	r3, #34	; 0x22
 800f514:	d152      	bne.n	800f5bc <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f51c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f522:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800f524:	89ba      	ldrh	r2, [r7, #12]
 800f526:	89fb      	ldrh	r3, [r7, #14]
 800f528:	4013      	ands	r3, r2
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f534:	1c9a      	adds	r2, r3, #2
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f540:	b29b      	uxth	r3, r3
 800f542:	3b01      	subs	r3, #1
 800f544:	b29a      	uxth	r2, r3
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f552:	b29b      	uxth	r3, r3
 800f554:	2b00      	cmp	r3, #0
 800f556:	d139      	bne.n	800f5cc <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f566:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	689a      	ldr	r2, [r3, #8]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f022 0201 	bic.w	r2, r2, #1
 800f576:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2220      	movs	r2, #32
 800f57c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2200      	movs	r2, #0
 800f584:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d10f      	bne.n	800f5ae <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f022 0210 	bic.w	r2, r2, #16
 800f59c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f7fe feae 	bl	800e308 <HAL_UARTEx_RxEventCallback>
 800f5ac:	e002      	b.n	800f5b4 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f7f4 f956 	bl	8003860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5ba:	e007      	b.n	800f5cc <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	699a      	ldr	r2, [r3, #24]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f042 0208 	orr.w	r2, r2, #8
 800f5ca:	619a      	str	r2, [r3, #24]
}
 800f5cc:	bf00      	nop
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b088      	sub	sp, #32
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f5e2:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	69db      	ldr	r3, [r3, #28]
 800f5ea:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	689b      	ldr	r3, [r3, #8]
 800f5fa:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f602:	2b22      	cmp	r3, #34	; 0x22
 800f604:	f040 80d8 	bne.w	800f7b8 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f60e:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f610:	e0a8      	b.n	800f764 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f618:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f61a:	89bb      	ldrh	r3, [r7, #12]
 800f61c:	b2d9      	uxtb	r1, r3
 800f61e:	8b7b      	ldrh	r3, [r7, #26]
 800f620:	b2da      	uxtb	r2, r3
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f626:	400a      	ands	r2, r1
 800f628:	b2d2      	uxtb	r2, r2
 800f62a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f630:	1c5a      	adds	r2, r3, #1
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	3b01      	subs	r3, #1
 800f640:	b29a      	uxth	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	69db      	ldr	r3, [r3, #28]
 800f64e:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f650:	69fb      	ldr	r3, [r7, #28]
 800f652:	f003 0307 	and.w	r3, r3, #7
 800f656:	2b00      	cmp	r3, #0
 800f658:	d04d      	beq.n	800f6f6 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	f003 0301 	and.w	r3, r3, #1
 800f660:	2b00      	cmp	r3, #0
 800f662:	d010      	beq.n	800f686 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00b      	beq.n	800f686 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2201      	movs	r2, #1
 800f674:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f67c:	f043 0201 	orr.w	r2, r3, #1
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	f003 0302 	and.w	r3, r3, #2
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d010      	beq.n	800f6b2 <UART_RxISR_8BIT_FIFOEN+0xde>
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	f003 0301 	and.w	r3, r3, #1
 800f696:	2b00      	cmp	r3, #0
 800f698:	d00b      	beq.n	800f6b2 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	2202      	movs	r2, #2
 800f6a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6a8:	f043 0204 	orr.w	r2, r3, #4
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	f003 0304 	and.w	r3, r3, #4
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d010      	beq.n	800f6de <UART_RxISR_8BIT_FIFOEN+0x10a>
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	f003 0301 	and.w	r3, r3, #1
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00b      	beq.n	800f6de <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	2204      	movs	r2, #4
 800f6cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6d4:	f043 0202 	orr.w	r2, r3, #2
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d006      	beq.n	800f6f6 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7fe fe03 	bl	800e2f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d130      	bne.n	800f764 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f710:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	6899      	ldr	r1, [r3, #8]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	4b2c      	ldr	r3, [pc, #176]	; (800f7d0 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800f71e:	400b      	ands	r3, r1
 800f720:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2220      	movs	r2, #32
 800f726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2200      	movs	r2, #0
 800f72e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f734:	2b01      	cmp	r3, #1
 800f736:	d10f      	bne.n	800f758 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f022 0210 	bic.w	r2, r2, #16
 800f746:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f74e:	4619      	mov	r1, r3
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7fe fdd9 	bl	800e308 <HAL_UARTEx_RxEventCallback>
 800f756:	e002      	b.n	800f75e <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f7f4 f881 	bl	8003860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f764:	89fb      	ldrh	r3, [r7, #14]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d005      	beq.n	800f776 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	f003 0320 	and.w	r3, r3, #32
 800f770:	2b00      	cmp	r3, #0
 800f772:	f47f af4e 	bne.w	800f612 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f77c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f77e:	897b      	ldrh	r3, [r7, #10]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d021      	beq.n	800f7c8 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f78a:	897a      	ldrh	r2, [r7, #10]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d21b      	bcs.n	800f7c8 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	689a      	ldr	r2, [r3, #8]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f79e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a0c      	ldr	r2, [pc, #48]	; (800f7d4 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800f7a4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f042 0220 	orr.w	r2, r2, #32
 800f7b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f7b6:	e007      	b.n	800f7c8 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	699a      	ldr	r2, [r3, #24]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f042 0208 	orr.w	r2, r2, #8
 800f7c6:	619a      	str	r2, [r3, #24]
}
 800f7c8:	bf00      	nop
 800f7ca:	3720      	adds	r7, #32
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	effffffe 	.word	0xeffffffe
 800f7d4:	0800f425 	.word	0x0800f425

0800f7d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b08a      	sub	sp, #40	; 0x28
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f7e6:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	69db      	ldr	r3, [r3, #28]
 800f7ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	689b      	ldr	r3, [r3, #8]
 800f7fe:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f806:	2b22      	cmp	r3, #34	; 0x22
 800f808:	f040 80d8 	bne.w	800f9bc <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f812:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f814:	e0a8      	b.n	800f968 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81c:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f822:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800f824:	8aba      	ldrh	r2, [r7, #20]
 800f826:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f828:	4013      	ands	r3, r2
 800f82a:	b29a      	uxth	r2, r3
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f834:	1c9a      	adds	r2, r3, #2
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f840:	b29b      	uxth	r3, r3
 800f842:	3b01      	subs	r3, #1
 800f844:	b29a      	uxth	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	69db      	ldr	r3, [r3, #28]
 800f852:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f856:	f003 0307 	and.w	r3, r3, #7
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d04d      	beq.n	800f8fa <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f860:	f003 0301 	and.w	r3, r3, #1
 800f864:	2b00      	cmp	r3, #0
 800f866:	d010      	beq.n	800f88a <UART_RxISR_16BIT_FIFOEN+0xb2>
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d00b      	beq.n	800f88a <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2201      	movs	r2, #1
 800f878:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f880:	f043 0201 	orr.w	r2, r3, #1
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88c:	f003 0302 	and.w	r3, r3, #2
 800f890:	2b00      	cmp	r3, #0
 800f892:	d010      	beq.n	800f8b6 <UART_RxISR_16BIT_FIFOEN+0xde>
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	f003 0301 	and.w	r3, r3, #1
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d00b      	beq.n	800f8b6 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8ac:	f043 0204 	orr.w	r2, r3, #4
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8b8:	f003 0304 	and.w	r3, r3, #4
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d010      	beq.n	800f8e2 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800f8c0:	69bb      	ldr	r3, [r7, #24]
 800f8c2:	f003 0301 	and.w	r3, r3, #1
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d00b      	beq.n	800f8e2 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	2204      	movs	r2, #4
 800f8d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8d8:	f043 0202 	orr.w	r2, r3, #2
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d006      	beq.n	800f8fa <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7fe fd01 	bl	800e2f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f900:	b29b      	uxth	r3, r3
 800f902:	2b00      	cmp	r3, #0
 800f904:	d130      	bne.n	800f968 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f914:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	6899      	ldr	r1, [r3, #8]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	4b2c      	ldr	r3, [pc, #176]	; (800f9d4 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800f922:	400b      	ands	r3, r1
 800f924:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2220      	movs	r2, #32
 800f92a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2200      	movs	r2, #0
 800f932:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d10f      	bne.n	800f95c <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f022 0210 	bic.w	r2, r2, #16
 800f94a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f952:	4619      	mov	r1, r3
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f7fe fcd7 	bl	800e308 <HAL_UARTEx_RxEventCallback>
 800f95a:	e002      	b.n	800f962 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7f3 ff7f 	bl	8003860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2200      	movs	r2, #0
 800f966:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f968:	8afb      	ldrh	r3, [r7, #22]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d005      	beq.n	800f97a <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800f96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f970:	f003 0320 	and.w	r3, r3, #32
 800f974:	2b00      	cmp	r3, #0
 800f976:	f47f af4e 	bne.w	800f816 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f980:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f982:	89fb      	ldrh	r3, [r7, #14]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d021      	beq.n	800f9cc <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f98e:	89fa      	ldrh	r2, [r7, #14]
 800f990:	429a      	cmp	r2, r3
 800f992:	d21b      	bcs.n	800f9cc <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	689a      	ldr	r2, [r3, #8]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f9a2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	4a0c      	ldr	r2, [pc, #48]	; (800f9d8 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800f9a8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	f042 0220 	orr.w	r2, r2, #32
 800f9b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f9ba:	e007      	b.n	800f9cc <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	699a      	ldr	r2, [r3, #24]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f042 0208 	orr.w	r2, r2, #8
 800f9ca:	619a      	str	r2, [r3, #24]
}
 800f9cc:	bf00      	nop
 800f9ce:	3728      	adds	r7, #40	; 0x28
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	effffffe 	.word	0xeffffffe
 800f9d8:	0800f4fd 	.word	0x0800f4fd

0800f9dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f9e4:	bf00      	nop
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f9f8:	bf00      	nop
 800f9fa:	370c      	adds	r7, #12
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr

0800fa04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fa0c:	bf00      	nop
 800fa0e:	370c      	adds	r7, #12
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d101      	bne.n	800fa2e <HAL_UARTEx_DisableFifoMode+0x16>
 800fa2a:	2302      	movs	r3, #2
 800fa2c:	e027      	b.n	800fa7e <HAL_UARTEx_DisableFifoMode+0x66>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2201      	movs	r2, #1
 800fa32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2224      	movs	r2, #36	; 0x24
 800fa3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f022 0201 	bic.w	r2, r2, #1
 800fa54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fa5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2200      	movs	r2, #0
 800fa62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	68fa      	ldr	r2, [r7, #12]
 800fa6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2220      	movs	r2, #32
 800fa70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2200      	movs	r2, #0
 800fa78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa7c:	2300      	movs	r3, #0
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3714      	adds	r7, #20
 800fa82:	46bd      	mov	sp, r7
 800fa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa88:	4770      	bx	lr

0800fa8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b084      	sub	sp, #16
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
 800fa92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa9a:	2b01      	cmp	r3, #1
 800fa9c:	d101      	bne.n	800faa2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fa9e:	2302      	movs	r3, #2
 800faa0:	e02d      	b.n	800fafe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2201      	movs	r2, #1
 800faa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2224      	movs	r2, #36	; 0x24
 800faae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	681a      	ldr	r2, [r3, #0]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f022 0201 	bic.w	r2, r2, #1
 800fac8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	683a      	ldr	r2, [r7, #0]
 800fada:	430a      	orrs	r2, r1
 800fadc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f000 f850 	bl	800fb84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	68fa      	ldr	r2, [r7, #12]
 800faea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2220      	movs	r2, #32
 800faf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fafc:	2300      	movs	r3, #0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3710      	adds	r7, #16
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb06:	b580      	push	{r7, lr}
 800fb08:	b084      	sub	sp, #16
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
 800fb0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb16:	2b01      	cmp	r3, #1
 800fb18:	d101      	bne.n	800fb1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fb1a:	2302      	movs	r3, #2
 800fb1c:	e02d      	b.n	800fb7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2201      	movs	r2, #1
 800fb22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2224      	movs	r2, #36	; 0x24
 800fb2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	f022 0201 	bic.w	r2, r2, #1
 800fb44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	689b      	ldr	r3, [r3, #8]
 800fb4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	683a      	ldr	r2, [r7, #0]
 800fb56:	430a      	orrs	r2, r1
 800fb58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb5a:	6878      	ldr	r0, [r7, #4]
 800fb5c:	f000 f812 	bl	800fb84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2220      	movs	r2, #32
 800fb6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2200      	movs	r2, #0
 800fb74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb78:	2300      	movs	r3, #0
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d108      	bne.n	800fba6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2201      	movs	r2, #1
 800fb98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2201      	movs	r2, #1
 800fba0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fba4:	e031      	b.n	800fc0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fba6:	2310      	movs	r3, #16
 800fba8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fbaa:	2310      	movs	r3, #16
 800fbac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	689b      	ldr	r3, [r3, #8]
 800fbb4:	0e5b      	lsrs	r3, r3, #25
 800fbb6:	b2db      	uxtb	r3, r3
 800fbb8:	f003 0307 	and.w	r3, r3, #7
 800fbbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	689b      	ldr	r3, [r3, #8]
 800fbc4:	0f5b      	lsrs	r3, r3, #29
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	f003 0307 	and.w	r3, r3, #7
 800fbcc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fbce:	7bbb      	ldrb	r3, [r7, #14]
 800fbd0:	7b3a      	ldrb	r2, [r7, #12]
 800fbd2:	4911      	ldr	r1, [pc, #68]	; (800fc18 <UARTEx_SetNbDataToProcess+0x94>)
 800fbd4:	5c8a      	ldrb	r2, [r1, r2]
 800fbd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fbda:	7b3a      	ldrb	r2, [r7, #12]
 800fbdc:	490f      	ldr	r1, [pc, #60]	; (800fc1c <UARTEx_SetNbDataToProcess+0x98>)
 800fbde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fbe0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbec:	7bfb      	ldrb	r3, [r7, #15]
 800fbee:	7b7a      	ldrb	r2, [r7, #13]
 800fbf0:	4909      	ldr	r1, [pc, #36]	; (800fc18 <UARTEx_SetNbDataToProcess+0x94>)
 800fbf2:	5c8a      	ldrb	r2, [r1, r2]
 800fbf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fbf8:	7b7a      	ldrb	r2, [r7, #13]
 800fbfa:	4908      	ldr	r1, [pc, #32]	; (800fc1c <UARTEx_SetNbDataToProcess+0x98>)
 800fbfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbfe:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fc0a:	bf00      	nop
 800fc0c:	3714      	adds	r7, #20
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	0801300c 	.word	0x0801300c
 800fc1c:	08013014 	.word	0x08013014

0800fc20 <__errno>:
 800fc20:	4b01      	ldr	r3, [pc, #4]	; (800fc28 <__errno+0x8>)
 800fc22:	6818      	ldr	r0, [r3, #0]
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	24000028 	.word	0x24000028

0800fc2c <__libc_init_array>:
 800fc2c:	b570      	push	{r4, r5, r6, lr}
 800fc2e:	4d0d      	ldr	r5, [pc, #52]	; (800fc64 <__libc_init_array+0x38>)
 800fc30:	4c0d      	ldr	r4, [pc, #52]	; (800fc68 <__libc_init_array+0x3c>)
 800fc32:	1b64      	subs	r4, r4, r5
 800fc34:	10a4      	asrs	r4, r4, #2
 800fc36:	2600      	movs	r6, #0
 800fc38:	42a6      	cmp	r6, r4
 800fc3a:	d109      	bne.n	800fc50 <__libc_init_array+0x24>
 800fc3c:	4d0b      	ldr	r5, [pc, #44]	; (800fc6c <__libc_init_array+0x40>)
 800fc3e:	4c0c      	ldr	r4, [pc, #48]	; (800fc70 <__libc_init_array+0x44>)
 800fc40:	f003 f994 	bl	8012f6c <_init>
 800fc44:	1b64      	subs	r4, r4, r5
 800fc46:	10a4      	asrs	r4, r4, #2
 800fc48:	2600      	movs	r6, #0
 800fc4a:	42a6      	cmp	r6, r4
 800fc4c:	d105      	bne.n	800fc5a <__libc_init_array+0x2e>
 800fc4e:	bd70      	pop	{r4, r5, r6, pc}
 800fc50:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc54:	4798      	blx	r3
 800fc56:	3601      	adds	r6, #1
 800fc58:	e7ee      	b.n	800fc38 <__libc_init_array+0xc>
 800fc5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc5e:	4798      	blx	r3
 800fc60:	3601      	adds	r6, #1
 800fc62:	e7f2      	b.n	800fc4a <__libc_init_array+0x1e>
 800fc64:	080134b0 	.word	0x080134b0
 800fc68:	080134b0 	.word	0x080134b0
 800fc6c:	080134b0 	.word	0x080134b0
 800fc70:	080134b4 	.word	0x080134b4

0800fc74 <memset>:
 800fc74:	4402      	add	r2, r0
 800fc76:	4603      	mov	r3, r0
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d100      	bne.n	800fc7e <memset+0xa>
 800fc7c:	4770      	bx	lr
 800fc7e:	f803 1b01 	strb.w	r1, [r3], #1
 800fc82:	e7f9      	b.n	800fc78 <memset+0x4>

0800fc84 <__cvt>:
 800fc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc86:	ed2d 8b02 	vpush	{d8}
 800fc8a:	eeb0 8b40 	vmov.f64	d8, d0
 800fc8e:	b085      	sub	sp, #20
 800fc90:	4617      	mov	r7, r2
 800fc92:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fc94:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fc96:	ee18 2a90 	vmov	r2, s17
 800fc9a:	f025 0520 	bic.w	r5, r5, #32
 800fc9e:	2a00      	cmp	r2, #0
 800fca0:	bfb6      	itet	lt
 800fca2:	222d      	movlt	r2, #45	; 0x2d
 800fca4:	2200      	movge	r2, #0
 800fca6:	eeb1 8b40 	vneglt.f64	d8, d0
 800fcaa:	2d46      	cmp	r5, #70	; 0x46
 800fcac:	460c      	mov	r4, r1
 800fcae:	701a      	strb	r2, [r3, #0]
 800fcb0:	d004      	beq.n	800fcbc <__cvt+0x38>
 800fcb2:	2d45      	cmp	r5, #69	; 0x45
 800fcb4:	d100      	bne.n	800fcb8 <__cvt+0x34>
 800fcb6:	3401      	adds	r4, #1
 800fcb8:	2102      	movs	r1, #2
 800fcba:	e000      	b.n	800fcbe <__cvt+0x3a>
 800fcbc:	2103      	movs	r1, #3
 800fcbe:	ab03      	add	r3, sp, #12
 800fcc0:	9301      	str	r3, [sp, #4]
 800fcc2:	ab02      	add	r3, sp, #8
 800fcc4:	9300      	str	r3, [sp, #0]
 800fcc6:	4622      	mov	r2, r4
 800fcc8:	4633      	mov	r3, r6
 800fcca:	eeb0 0b48 	vmov.f64	d0, d8
 800fcce:	f000 fdf7 	bl	80108c0 <_dtoa_r>
 800fcd2:	2d47      	cmp	r5, #71	; 0x47
 800fcd4:	d109      	bne.n	800fcea <__cvt+0x66>
 800fcd6:	07fb      	lsls	r3, r7, #31
 800fcd8:	d407      	bmi.n	800fcea <__cvt+0x66>
 800fcda:	9b03      	ldr	r3, [sp, #12]
 800fcdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcde:	1a1b      	subs	r3, r3, r0
 800fce0:	6013      	str	r3, [r2, #0]
 800fce2:	b005      	add	sp, #20
 800fce4:	ecbd 8b02 	vpop	{d8}
 800fce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcea:	2d46      	cmp	r5, #70	; 0x46
 800fcec:	eb00 0204 	add.w	r2, r0, r4
 800fcf0:	d10c      	bne.n	800fd0c <__cvt+0x88>
 800fcf2:	7803      	ldrb	r3, [r0, #0]
 800fcf4:	2b30      	cmp	r3, #48	; 0x30
 800fcf6:	d107      	bne.n	800fd08 <__cvt+0x84>
 800fcf8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd00:	bf1c      	itt	ne
 800fd02:	f1c4 0401 	rsbne	r4, r4, #1
 800fd06:	6034      	strne	r4, [r6, #0]
 800fd08:	6833      	ldr	r3, [r6, #0]
 800fd0a:	441a      	add	r2, r3
 800fd0c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd14:	bf08      	it	eq
 800fd16:	9203      	streq	r2, [sp, #12]
 800fd18:	2130      	movs	r1, #48	; 0x30
 800fd1a:	9b03      	ldr	r3, [sp, #12]
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d2dc      	bcs.n	800fcda <__cvt+0x56>
 800fd20:	1c5c      	adds	r4, r3, #1
 800fd22:	9403      	str	r4, [sp, #12]
 800fd24:	7019      	strb	r1, [r3, #0]
 800fd26:	e7f8      	b.n	800fd1a <__cvt+0x96>

0800fd28 <__exponent>:
 800fd28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2900      	cmp	r1, #0
 800fd2e:	bfb8      	it	lt
 800fd30:	4249      	neglt	r1, r1
 800fd32:	f803 2b02 	strb.w	r2, [r3], #2
 800fd36:	bfb4      	ite	lt
 800fd38:	222d      	movlt	r2, #45	; 0x2d
 800fd3a:	222b      	movge	r2, #43	; 0x2b
 800fd3c:	2909      	cmp	r1, #9
 800fd3e:	7042      	strb	r2, [r0, #1]
 800fd40:	dd2a      	ble.n	800fd98 <__exponent+0x70>
 800fd42:	f10d 0407 	add.w	r4, sp, #7
 800fd46:	46a4      	mov	ip, r4
 800fd48:	270a      	movs	r7, #10
 800fd4a:	46a6      	mov	lr, r4
 800fd4c:	460a      	mov	r2, r1
 800fd4e:	fb91 f6f7 	sdiv	r6, r1, r7
 800fd52:	fb07 1516 	mls	r5, r7, r6, r1
 800fd56:	3530      	adds	r5, #48	; 0x30
 800fd58:	2a63      	cmp	r2, #99	; 0x63
 800fd5a:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fd62:	4631      	mov	r1, r6
 800fd64:	dcf1      	bgt.n	800fd4a <__exponent+0x22>
 800fd66:	3130      	adds	r1, #48	; 0x30
 800fd68:	f1ae 0502 	sub.w	r5, lr, #2
 800fd6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fd70:	1c44      	adds	r4, r0, #1
 800fd72:	4629      	mov	r1, r5
 800fd74:	4561      	cmp	r1, ip
 800fd76:	d30a      	bcc.n	800fd8e <__exponent+0x66>
 800fd78:	f10d 0209 	add.w	r2, sp, #9
 800fd7c:	eba2 020e 	sub.w	r2, r2, lr
 800fd80:	4565      	cmp	r5, ip
 800fd82:	bf88      	it	hi
 800fd84:	2200      	movhi	r2, #0
 800fd86:	4413      	add	r3, r2
 800fd88:	1a18      	subs	r0, r3, r0
 800fd8a:	b003      	add	sp, #12
 800fd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd92:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fd96:	e7ed      	b.n	800fd74 <__exponent+0x4c>
 800fd98:	2330      	movs	r3, #48	; 0x30
 800fd9a:	3130      	adds	r1, #48	; 0x30
 800fd9c:	7083      	strb	r3, [r0, #2]
 800fd9e:	70c1      	strb	r1, [r0, #3]
 800fda0:	1d03      	adds	r3, r0, #4
 800fda2:	e7f1      	b.n	800fd88 <__exponent+0x60>
 800fda4:	0000      	movs	r0, r0
	...

0800fda8 <_printf_float>:
 800fda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdac:	b08b      	sub	sp, #44	; 0x2c
 800fdae:	460c      	mov	r4, r1
 800fdb0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fdb4:	4616      	mov	r6, r2
 800fdb6:	461f      	mov	r7, r3
 800fdb8:	4605      	mov	r5, r0
 800fdba:	f001 fcbb 	bl	8011734 <_localeconv_r>
 800fdbe:	f8d0 b000 	ldr.w	fp, [r0]
 800fdc2:	4658      	mov	r0, fp
 800fdc4:	f7f0 fa8c 	bl	80002e0 <strlen>
 800fdc8:	2300      	movs	r3, #0
 800fdca:	9308      	str	r3, [sp, #32]
 800fdcc:	f8d8 3000 	ldr.w	r3, [r8]
 800fdd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fdd4:	6822      	ldr	r2, [r4, #0]
 800fdd6:	3307      	adds	r3, #7
 800fdd8:	f023 0307 	bic.w	r3, r3, #7
 800fddc:	f103 0108 	add.w	r1, r3, #8
 800fde0:	f8c8 1000 	str.w	r1, [r8]
 800fde4:	4682      	mov	sl, r0
 800fde6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fdea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800fdee:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010050 <_printf_float+0x2a8>
 800fdf2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800fdf6:	eeb0 6bc0 	vabs.f64	d6, d0
 800fdfa:	eeb4 6b47 	vcmp.f64	d6, d7
 800fdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe02:	dd24      	ble.n	800fe4e <_printf_float+0xa6>
 800fe04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fe08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0c:	d502      	bpl.n	800fe14 <_printf_float+0x6c>
 800fe0e:	232d      	movs	r3, #45	; 0x2d
 800fe10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe14:	4b90      	ldr	r3, [pc, #576]	; (8010058 <_printf_float+0x2b0>)
 800fe16:	4891      	ldr	r0, [pc, #580]	; (801005c <_printf_float+0x2b4>)
 800fe18:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800fe1c:	bf94      	ite	ls
 800fe1e:	4698      	movls	r8, r3
 800fe20:	4680      	movhi	r8, r0
 800fe22:	2303      	movs	r3, #3
 800fe24:	6123      	str	r3, [r4, #16]
 800fe26:	f022 0204 	bic.w	r2, r2, #4
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	6022      	str	r2, [r4, #0]
 800fe2e:	9304      	str	r3, [sp, #16]
 800fe30:	9700      	str	r7, [sp, #0]
 800fe32:	4633      	mov	r3, r6
 800fe34:	aa09      	add	r2, sp, #36	; 0x24
 800fe36:	4621      	mov	r1, r4
 800fe38:	4628      	mov	r0, r5
 800fe3a:	f000 f9d3 	bl	80101e4 <_printf_common>
 800fe3e:	3001      	adds	r0, #1
 800fe40:	f040 808a 	bne.w	800ff58 <_printf_float+0x1b0>
 800fe44:	f04f 30ff 	mov.w	r0, #4294967295
 800fe48:	b00b      	add	sp, #44	; 0x2c
 800fe4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4e:	eeb4 0b40 	vcmp.f64	d0, d0
 800fe52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe56:	d709      	bvc.n	800fe6c <_printf_float+0xc4>
 800fe58:	ee10 3a90 	vmov	r3, s1
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	bfbc      	itt	lt
 800fe60:	232d      	movlt	r3, #45	; 0x2d
 800fe62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fe66:	487e      	ldr	r0, [pc, #504]	; (8010060 <_printf_float+0x2b8>)
 800fe68:	4b7e      	ldr	r3, [pc, #504]	; (8010064 <_printf_float+0x2bc>)
 800fe6a:	e7d5      	b.n	800fe18 <_printf_float+0x70>
 800fe6c:	6863      	ldr	r3, [r4, #4]
 800fe6e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800fe72:	9104      	str	r1, [sp, #16]
 800fe74:	1c59      	adds	r1, r3, #1
 800fe76:	d13c      	bne.n	800fef2 <_printf_float+0x14a>
 800fe78:	2306      	movs	r3, #6
 800fe7a:	6063      	str	r3, [r4, #4]
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	9303      	str	r3, [sp, #12]
 800fe80:	ab08      	add	r3, sp, #32
 800fe82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800fe86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe8a:	ab07      	add	r3, sp, #28
 800fe8c:	6861      	ldr	r1, [r4, #4]
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	6022      	str	r2, [r4, #0]
 800fe92:	f10d 031b 	add.w	r3, sp, #27
 800fe96:	4628      	mov	r0, r5
 800fe98:	f7ff fef4 	bl	800fc84 <__cvt>
 800fe9c:	9b04      	ldr	r3, [sp, #16]
 800fe9e:	9907      	ldr	r1, [sp, #28]
 800fea0:	2b47      	cmp	r3, #71	; 0x47
 800fea2:	4680      	mov	r8, r0
 800fea4:	d108      	bne.n	800feb8 <_printf_float+0x110>
 800fea6:	1cc8      	adds	r0, r1, #3
 800fea8:	db02      	blt.n	800feb0 <_printf_float+0x108>
 800feaa:	6863      	ldr	r3, [r4, #4]
 800feac:	4299      	cmp	r1, r3
 800feae:	dd41      	ble.n	800ff34 <_printf_float+0x18c>
 800feb0:	f1a9 0902 	sub.w	r9, r9, #2
 800feb4:	fa5f f989 	uxtb.w	r9, r9
 800feb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800febc:	d820      	bhi.n	800ff00 <_printf_float+0x158>
 800febe:	3901      	subs	r1, #1
 800fec0:	464a      	mov	r2, r9
 800fec2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fec6:	9107      	str	r1, [sp, #28]
 800fec8:	f7ff ff2e 	bl	800fd28 <__exponent>
 800fecc:	9a08      	ldr	r2, [sp, #32]
 800fece:	9004      	str	r0, [sp, #16]
 800fed0:	1813      	adds	r3, r2, r0
 800fed2:	2a01      	cmp	r2, #1
 800fed4:	6123      	str	r3, [r4, #16]
 800fed6:	dc02      	bgt.n	800fede <_printf_float+0x136>
 800fed8:	6822      	ldr	r2, [r4, #0]
 800feda:	07d2      	lsls	r2, r2, #31
 800fedc:	d501      	bpl.n	800fee2 <_printf_float+0x13a>
 800fede:	3301      	adds	r3, #1
 800fee0:	6123      	str	r3, [r4, #16]
 800fee2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d0a2      	beq.n	800fe30 <_printf_float+0x88>
 800feea:	232d      	movs	r3, #45	; 0x2d
 800feec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fef0:	e79e      	b.n	800fe30 <_printf_float+0x88>
 800fef2:	9904      	ldr	r1, [sp, #16]
 800fef4:	2947      	cmp	r1, #71	; 0x47
 800fef6:	d1c1      	bne.n	800fe7c <_printf_float+0xd4>
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d1bf      	bne.n	800fe7c <_printf_float+0xd4>
 800fefc:	2301      	movs	r3, #1
 800fefe:	e7bc      	b.n	800fe7a <_printf_float+0xd2>
 800ff00:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ff04:	d118      	bne.n	800ff38 <_printf_float+0x190>
 800ff06:	2900      	cmp	r1, #0
 800ff08:	6863      	ldr	r3, [r4, #4]
 800ff0a:	dd0b      	ble.n	800ff24 <_printf_float+0x17c>
 800ff0c:	6121      	str	r1, [r4, #16]
 800ff0e:	b913      	cbnz	r3, 800ff16 <_printf_float+0x16e>
 800ff10:	6822      	ldr	r2, [r4, #0]
 800ff12:	07d0      	lsls	r0, r2, #31
 800ff14:	d502      	bpl.n	800ff1c <_printf_float+0x174>
 800ff16:	3301      	adds	r3, #1
 800ff18:	440b      	add	r3, r1
 800ff1a:	6123      	str	r3, [r4, #16]
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ff20:	9304      	str	r3, [sp, #16]
 800ff22:	e7de      	b.n	800fee2 <_printf_float+0x13a>
 800ff24:	b913      	cbnz	r3, 800ff2c <_printf_float+0x184>
 800ff26:	6822      	ldr	r2, [r4, #0]
 800ff28:	07d2      	lsls	r2, r2, #31
 800ff2a:	d501      	bpl.n	800ff30 <_printf_float+0x188>
 800ff2c:	3302      	adds	r3, #2
 800ff2e:	e7f4      	b.n	800ff1a <_printf_float+0x172>
 800ff30:	2301      	movs	r3, #1
 800ff32:	e7f2      	b.n	800ff1a <_printf_float+0x172>
 800ff34:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ff38:	9b08      	ldr	r3, [sp, #32]
 800ff3a:	4299      	cmp	r1, r3
 800ff3c:	db05      	blt.n	800ff4a <_printf_float+0x1a2>
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	6121      	str	r1, [r4, #16]
 800ff42:	07d8      	lsls	r0, r3, #31
 800ff44:	d5ea      	bpl.n	800ff1c <_printf_float+0x174>
 800ff46:	1c4b      	adds	r3, r1, #1
 800ff48:	e7e7      	b.n	800ff1a <_printf_float+0x172>
 800ff4a:	2900      	cmp	r1, #0
 800ff4c:	bfd4      	ite	le
 800ff4e:	f1c1 0202 	rsble	r2, r1, #2
 800ff52:	2201      	movgt	r2, #1
 800ff54:	4413      	add	r3, r2
 800ff56:	e7e0      	b.n	800ff1a <_printf_float+0x172>
 800ff58:	6823      	ldr	r3, [r4, #0]
 800ff5a:	055a      	lsls	r2, r3, #21
 800ff5c:	d407      	bmi.n	800ff6e <_printf_float+0x1c6>
 800ff5e:	6923      	ldr	r3, [r4, #16]
 800ff60:	4642      	mov	r2, r8
 800ff62:	4631      	mov	r1, r6
 800ff64:	4628      	mov	r0, r5
 800ff66:	47b8      	blx	r7
 800ff68:	3001      	adds	r0, #1
 800ff6a:	d12a      	bne.n	800ffc2 <_printf_float+0x21a>
 800ff6c:	e76a      	b.n	800fe44 <_printf_float+0x9c>
 800ff6e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ff72:	f240 80e2 	bls.w	801013a <_printf_float+0x392>
 800ff76:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ff7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ff7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff82:	d133      	bne.n	800ffec <_printf_float+0x244>
 800ff84:	4a38      	ldr	r2, [pc, #224]	; (8010068 <_printf_float+0x2c0>)
 800ff86:	2301      	movs	r3, #1
 800ff88:	4631      	mov	r1, r6
 800ff8a:	4628      	mov	r0, r5
 800ff8c:	47b8      	blx	r7
 800ff8e:	3001      	adds	r0, #1
 800ff90:	f43f af58 	beq.w	800fe44 <_printf_float+0x9c>
 800ff94:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	db02      	blt.n	800ffa2 <_printf_float+0x1fa>
 800ff9c:	6823      	ldr	r3, [r4, #0]
 800ff9e:	07d8      	lsls	r0, r3, #31
 800ffa0:	d50f      	bpl.n	800ffc2 <_printf_float+0x21a>
 800ffa2:	4653      	mov	r3, sl
 800ffa4:	465a      	mov	r2, fp
 800ffa6:	4631      	mov	r1, r6
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	47b8      	blx	r7
 800ffac:	3001      	adds	r0, #1
 800ffae:	f43f af49 	beq.w	800fe44 <_printf_float+0x9c>
 800ffb2:	f04f 0800 	mov.w	r8, #0
 800ffb6:	f104 091a 	add.w	r9, r4, #26
 800ffba:	9b08      	ldr	r3, [sp, #32]
 800ffbc:	3b01      	subs	r3, #1
 800ffbe:	4543      	cmp	r3, r8
 800ffc0:	dc09      	bgt.n	800ffd6 <_printf_float+0x22e>
 800ffc2:	6823      	ldr	r3, [r4, #0]
 800ffc4:	079b      	lsls	r3, r3, #30
 800ffc6:	f100 8108 	bmi.w	80101da <_printf_float+0x432>
 800ffca:	68e0      	ldr	r0, [r4, #12]
 800ffcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffce:	4298      	cmp	r0, r3
 800ffd0:	bfb8      	it	lt
 800ffd2:	4618      	movlt	r0, r3
 800ffd4:	e738      	b.n	800fe48 <_printf_float+0xa0>
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	464a      	mov	r2, r9
 800ffda:	4631      	mov	r1, r6
 800ffdc:	4628      	mov	r0, r5
 800ffde:	47b8      	blx	r7
 800ffe0:	3001      	adds	r0, #1
 800ffe2:	f43f af2f 	beq.w	800fe44 <_printf_float+0x9c>
 800ffe6:	f108 0801 	add.w	r8, r8, #1
 800ffea:	e7e6      	b.n	800ffba <_printf_float+0x212>
 800ffec:	9b07      	ldr	r3, [sp, #28]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	dc3c      	bgt.n	801006c <_printf_float+0x2c4>
 800fff2:	4a1d      	ldr	r2, [pc, #116]	; (8010068 <_printf_float+0x2c0>)
 800fff4:	2301      	movs	r3, #1
 800fff6:	4631      	mov	r1, r6
 800fff8:	4628      	mov	r0, r5
 800fffa:	47b8      	blx	r7
 800fffc:	3001      	adds	r0, #1
 800fffe:	f43f af21 	beq.w	800fe44 <_printf_float+0x9c>
 8010002:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010006:	4313      	orrs	r3, r2
 8010008:	d102      	bne.n	8010010 <_printf_float+0x268>
 801000a:	6823      	ldr	r3, [r4, #0]
 801000c:	07d9      	lsls	r1, r3, #31
 801000e:	d5d8      	bpl.n	800ffc2 <_printf_float+0x21a>
 8010010:	4653      	mov	r3, sl
 8010012:	465a      	mov	r2, fp
 8010014:	4631      	mov	r1, r6
 8010016:	4628      	mov	r0, r5
 8010018:	47b8      	blx	r7
 801001a:	3001      	adds	r0, #1
 801001c:	f43f af12 	beq.w	800fe44 <_printf_float+0x9c>
 8010020:	f04f 0900 	mov.w	r9, #0
 8010024:	f104 0a1a 	add.w	sl, r4, #26
 8010028:	9b07      	ldr	r3, [sp, #28]
 801002a:	425b      	negs	r3, r3
 801002c:	454b      	cmp	r3, r9
 801002e:	dc01      	bgt.n	8010034 <_printf_float+0x28c>
 8010030:	9b08      	ldr	r3, [sp, #32]
 8010032:	e795      	b.n	800ff60 <_printf_float+0x1b8>
 8010034:	2301      	movs	r3, #1
 8010036:	4652      	mov	r2, sl
 8010038:	4631      	mov	r1, r6
 801003a:	4628      	mov	r0, r5
 801003c:	47b8      	blx	r7
 801003e:	3001      	adds	r0, #1
 8010040:	f43f af00 	beq.w	800fe44 <_printf_float+0x9c>
 8010044:	f109 0901 	add.w	r9, r9, #1
 8010048:	e7ee      	b.n	8010028 <_printf_float+0x280>
 801004a:	bf00      	nop
 801004c:	f3af 8000 	nop.w
 8010050:	ffffffff 	.word	0xffffffff
 8010054:	7fefffff 	.word	0x7fefffff
 8010058:	08013020 	.word	0x08013020
 801005c:	08013024 	.word	0x08013024
 8010060:	0801302c 	.word	0x0801302c
 8010064:	08013028 	.word	0x08013028
 8010068:	08013030 	.word	0x08013030
 801006c:	9a08      	ldr	r2, [sp, #32]
 801006e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010070:	429a      	cmp	r2, r3
 8010072:	bfa8      	it	ge
 8010074:	461a      	movge	r2, r3
 8010076:	2a00      	cmp	r2, #0
 8010078:	4691      	mov	r9, r2
 801007a:	dc38      	bgt.n	80100ee <_printf_float+0x346>
 801007c:	2300      	movs	r3, #0
 801007e:	9305      	str	r3, [sp, #20]
 8010080:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010084:	f104 021a 	add.w	r2, r4, #26
 8010088:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801008a:	9905      	ldr	r1, [sp, #20]
 801008c:	9304      	str	r3, [sp, #16]
 801008e:	eba3 0309 	sub.w	r3, r3, r9
 8010092:	428b      	cmp	r3, r1
 8010094:	dc33      	bgt.n	80100fe <_printf_float+0x356>
 8010096:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801009a:	429a      	cmp	r2, r3
 801009c:	db3c      	blt.n	8010118 <_printf_float+0x370>
 801009e:	6823      	ldr	r3, [r4, #0]
 80100a0:	07da      	lsls	r2, r3, #31
 80100a2:	d439      	bmi.n	8010118 <_printf_float+0x370>
 80100a4:	9a08      	ldr	r2, [sp, #32]
 80100a6:	9b04      	ldr	r3, [sp, #16]
 80100a8:	9907      	ldr	r1, [sp, #28]
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	eba2 0901 	sub.w	r9, r2, r1
 80100b0:	4599      	cmp	r9, r3
 80100b2:	bfa8      	it	ge
 80100b4:	4699      	movge	r9, r3
 80100b6:	f1b9 0f00 	cmp.w	r9, #0
 80100ba:	dc35      	bgt.n	8010128 <_printf_float+0x380>
 80100bc:	f04f 0800 	mov.w	r8, #0
 80100c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100c4:	f104 0a1a 	add.w	sl, r4, #26
 80100c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80100cc:	1a9b      	subs	r3, r3, r2
 80100ce:	eba3 0309 	sub.w	r3, r3, r9
 80100d2:	4543      	cmp	r3, r8
 80100d4:	f77f af75 	ble.w	800ffc2 <_printf_float+0x21a>
 80100d8:	2301      	movs	r3, #1
 80100da:	4652      	mov	r2, sl
 80100dc:	4631      	mov	r1, r6
 80100de:	4628      	mov	r0, r5
 80100e0:	47b8      	blx	r7
 80100e2:	3001      	adds	r0, #1
 80100e4:	f43f aeae 	beq.w	800fe44 <_printf_float+0x9c>
 80100e8:	f108 0801 	add.w	r8, r8, #1
 80100ec:	e7ec      	b.n	80100c8 <_printf_float+0x320>
 80100ee:	4613      	mov	r3, r2
 80100f0:	4631      	mov	r1, r6
 80100f2:	4642      	mov	r2, r8
 80100f4:	4628      	mov	r0, r5
 80100f6:	47b8      	blx	r7
 80100f8:	3001      	adds	r0, #1
 80100fa:	d1bf      	bne.n	801007c <_printf_float+0x2d4>
 80100fc:	e6a2      	b.n	800fe44 <_printf_float+0x9c>
 80100fe:	2301      	movs	r3, #1
 8010100:	4631      	mov	r1, r6
 8010102:	4628      	mov	r0, r5
 8010104:	9204      	str	r2, [sp, #16]
 8010106:	47b8      	blx	r7
 8010108:	3001      	adds	r0, #1
 801010a:	f43f ae9b 	beq.w	800fe44 <_printf_float+0x9c>
 801010e:	9b05      	ldr	r3, [sp, #20]
 8010110:	9a04      	ldr	r2, [sp, #16]
 8010112:	3301      	adds	r3, #1
 8010114:	9305      	str	r3, [sp, #20]
 8010116:	e7b7      	b.n	8010088 <_printf_float+0x2e0>
 8010118:	4653      	mov	r3, sl
 801011a:	465a      	mov	r2, fp
 801011c:	4631      	mov	r1, r6
 801011e:	4628      	mov	r0, r5
 8010120:	47b8      	blx	r7
 8010122:	3001      	adds	r0, #1
 8010124:	d1be      	bne.n	80100a4 <_printf_float+0x2fc>
 8010126:	e68d      	b.n	800fe44 <_printf_float+0x9c>
 8010128:	9a04      	ldr	r2, [sp, #16]
 801012a:	464b      	mov	r3, r9
 801012c:	4442      	add	r2, r8
 801012e:	4631      	mov	r1, r6
 8010130:	4628      	mov	r0, r5
 8010132:	47b8      	blx	r7
 8010134:	3001      	adds	r0, #1
 8010136:	d1c1      	bne.n	80100bc <_printf_float+0x314>
 8010138:	e684      	b.n	800fe44 <_printf_float+0x9c>
 801013a:	9a08      	ldr	r2, [sp, #32]
 801013c:	2a01      	cmp	r2, #1
 801013e:	dc01      	bgt.n	8010144 <_printf_float+0x39c>
 8010140:	07db      	lsls	r3, r3, #31
 8010142:	d537      	bpl.n	80101b4 <_printf_float+0x40c>
 8010144:	2301      	movs	r3, #1
 8010146:	4642      	mov	r2, r8
 8010148:	4631      	mov	r1, r6
 801014a:	4628      	mov	r0, r5
 801014c:	47b8      	blx	r7
 801014e:	3001      	adds	r0, #1
 8010150:	f43f ae78 	beq.w	800fe44 <_printf_float+0x9c>
 8010154:	4653      	mov	r3, sl
 8010156:	465a      	mov	r2, fp
 8010158:	4631      	mov	r1, r6
 801015a:	4628      	mov	r0, r5
 801015c:	47b8      	blx	r7
 801015e:	3001      	adds	r0, #1
 8010160:	f43f ae70 	beq.w	800fe44 <_printf_float+0x9c>
 8010164:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010168:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801016c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010170:	d01b      	beq.n	80101aa <_printf_float+0x402>
 8010172:	9b08      	ldr	r3, [sp, #32]
 8010174:	f108 0201 	add.w	r2, r8, #1
 8010178:	3b01      	subs	r3, #1
 801017a:	4631      	mov	r1, r6
 801017c:	4628      	mov	r0, r5
 801017e:	47b8      	blx	r7
 8010180:	3001      	adds	r0, #1
 8010182:	d10e      	bne.n	80101a2 <_printf_float+0x3fa>
 8010184:	e65e      	b.n	800fe44 <_printf_float+0x9c>
 8010186:	2301      	movs	r3, #1
 8010188:	464a      	mov	r2, r9
 801018a:	4631      	mov	r1, r6
 801018c:	4628      	mov	r0, r5
 801018e:	47b8      	blx	r7
 8010190:	3001      	adds	r0, #1
 8010192:	f43f ae57 	beq.w	800fe44 <_printf_float+0x9c>
 8010196:	f108 0801 	add.w	r8, r8, #1
 801019a:	9b08      	ldr	r3, [sp, #32]
 801019c:	3b01      	subs	r3, #1
 801019e:	4543      	cmp	r3, r8
 80101a0:	dcf1      	bgt.n	8010186 <_printf_float+0x3de>
 80101a2:	9b04      	ldr	r3, [sp, #16]
 80101a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80101a8:	e6db      	b.n	800ff62 <_printf_float+0x1ba>
 80101aa:	f04f 0800 	mov.w	r8, #0
 80101ae:	f104 091a 	add.w	r9, r4, #26
 80101b2:	e7f2      	b.n	801019a <_printf_float+0x3f2>
 80101b4:	2301      	movs	r3, #1
 80101b6:	4642      	mov	r2, r8
 80101b8:	e7df      	b.n	801017a <_printf_float+0x3d2>
 80101ba:	2301      	movs	r3, #1
 80101bc:	464a      	mov	r2, r9
 80101be:	4631      	mov	r1, r6
 80101c0:	4628      	mov	r0, r5
 80101c2:	47b8      	blx	r7
 80101c4:	3001      	adds	r0, #1
 80101c6:	f43f ae3d 	beq.w	800fe44 <_printf_float+0x9c>
 80101ca:	f108 0801 	add.w	r8, r8, #1
 80101ce:	68e3      	ldr	r3, [r4, #12]
 80101d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80101d2:	1a5b      	subs	r3, r3, r1
 80101d4:	4543      	cmp	r3, r8
 80101d6:	dcf0      	bgt.n	80101ba <_printf_float+0x412>
 80101d8:	e6f7      	b.n	800ffca <_printf_float+0x222>
 80101da:	f04f 0800 	mov.w	r8, #0
 80101de:	f104 0919 	add.w	r9, r4, #25
 80101e2:	e7f4      	b.n	80101ce <_printf_float+0x426>

080101e4 <_printf_common>:
 80101e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101e8:	4616      	mov	r6, r2
 80101ea:	4699      	mov	r9, r3
 80101ec:	688a      	ldr	r2, [r1, #8]
 80101ee:	690b      	ldr	r3, [r1, #16]
 80101f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101f4:	4293      	cmp	r3, r2
 80101f6:	bfb8      	it	lt
 80101f8:	4613      	movlt	r3, r2
 80101fa:	6033      	str	r3, [r6, #0]
 80101fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010200:	4607      	mov	r7, r0
 8010202:	460c      	mov	r4, r1
 8010204:	b10a      	cbz	r2, 801020a <_printf_common+0x26>
 8010206:	3301      	adds	r3, #1
 8010208:	6033      	str	r3, [r6, #0]
 801020a:	6823      	ldr	r3, [r4, #0]
 801020c:	0699      	lsls	r1, r3, #26
 801020e:	bf42      	ittt	mi
 8010210:	6833      	ldrmi	r3, [r6, #0]
 8010212:	3302      	addmi	r3, #2
 8010214:	6033      	strmi	r3, [r6, #0]
 8010216:	6825      	ldr	r5, [r4, #0]
 8010218:	f015 0506 	ands.w	r5, r5, #6
 801021c:	d106      	bne.n	801022c <_printf_common+0x48>
 801021e:	f104 0a19 	add.w	sl, r4, #25
 8010222:	68e3      	ldr	r3, [r4, #12]
 8010224:	6832      	ldr	r2, [r6, #0]
 8010226:	1a9b      	subs	r3, r3, r2
 8010228:	42ab      	cmp	r3, r5
 801022a:	dc26      	bgt.n	801027a <_printf_common+0x96>
 801022c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010230:	1e13      	subs	r3, r2, #0
 8010232:	6822      	ldr	r2, [r4, #0]
 8010234:	bf18      	it	ne
 8010236:	2301      	movne	r3, #1
 8010238:	0692      	lsls	r2, r2, #26
 801023a:	d42b      	bmi.n	8010294 <_printf_common+0xb0>
 801023c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010240:	4649      	mov	r1, r9
 8010242:	4638      	mov	r0, r7
 8010244:	47c0      	blx	r8
 8010246:	3001      	adds	r0, #1
 8010248:	d01e      	beq.n	8010288 <_printf_common+0xa4>
 801024a:	6823      	ldr	r3, [r4, #0]
 801024c:	68e5      	ldr	r5, [r4, #12]
 801024e:	6832      	ldr	r2, [r6, #0]
 8010250:	f003 0306 	and.w	r3, r3, #6
 8010254:	2b04      	cmp	r3, #4
 8010256:	bf08      	it	eq
 8010258:	1aad      	subeq	r5, r5, r2
 801025a:	68a3      	ldr	r3, [r4, #8]
 801025c:	6922      	ldr	r2, [r4, #16]
 801025e:	bf0c      	ite	eq
 8010260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010264:	2500      	movne	r5, #0
 8010266:	4293      	cmp	r3, r2
 8010268:	bfc4      	itt	gt
 801026a:	1a9b      	subgt	r3, r3, r2
 801026c:	18ed      	addgt	r5, r5, r3
 801026e:	2600      	movs	r6, #0
 8010270:	341a      	adds	r4, #26
 8010272:	42b5      	cmp	r5, r6
 8010274:	d11a      	bne.n	80102ac <_printf_common+0xc8>
 8010276:	2000      	movs	r0, #0
 8010278:	e008      	b.n	801028c <_printf_common+0xa8>
 801027a:	2301      	movs	r3, #1
 801027c:	4652      	mov	r2, sl
 801027e:	4649      	mov	r1, r9
 8010280:	4638      	mov	r0, r7
 8010282:	47c0      	blx	r8
 8010284:	3001      	adds	r0, #1
 8010286:	d103      	bne.n	8010290 <_printf_common+0xac>
 8010288:	f04f 30ff 	mov.w	r0, #4294967295
 801028c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010290:	3501      	adds	r5, #1
 8010292:	e7c6      	b.n	8010222 <_printf_common+0x3e>
 8010294:	18e1      	adds	r1, r4, r3
 8010296:	1c5a      	adds	r2, r3, #1
 8010298:	2030      	movs	r0, #48	; 0x30
 801029a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801029e:	4422      	add	r2, r4
 80102a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80102a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80102a8:	3302      	adds	r3, #2
 80102aa:	e7c7      	b.n	801023c <_printf_common+0x58>
 80102ac:	2301      	movs	r3, #1
 80102ae:	4622      	mov	r2, r4
 80102b0:	4649      	mov	r1, r9
 80102b2:	4638      	mov	r0, r7
 80102b4:	47c0      	blx	r8
 80102b6:	3001      	adds	r0, #1
 80102b8:	d0e6      	beq.n	8010288 <_printf_common+0xa4>
 80102ba:	3601      	adds	r6, #1
 80102bc:	e7d9      	b.n	8010272 <_printf_common+0x8e>
	...

080102c0 <_printf_i>:
 80102c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102c4:	460c      	mov	r4, r1
 80102c6:	4691      	mov	r9, r2
 80102c8:	7e27      	ldrb	r7, [r4, #24]
 80102ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80102cc:	2f78      	cmp	r7, #120	; 0x78
 80102ce:	4680      	mov	r8, r0
 80102d0:	469a      	mov	sl, r3
 80102d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102d6:	d807      	bhi.n	80102e8 <_printf_i+0x28>
 80102d8:	2f62      	cmp	r7, #98	; 0x62
 80102da:	d80a      	bhi.n	80102f2 <_printf_i+0x32>
 80102dc:	2f00      	cmp	r7, #0
 80102de:	f000 80d8 	beq.w	8010492 <_printf_i+0x1d2>
 80102e2:	2f58      	cmp	r7, #88	; 0x58
 80102e4:	f000 80a3 	beq.w	801042e <_printf_i+0x16e>
 80102e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80102ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80102f0:	e03a      	b.n	8010368 <_printf_i+0xa8>
 80102f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80102f6:	2b15      	cmp	r3, #21
 80102f8:	d8f6      	bhi.n	80102e8 <_printf_i+0x28>
 80102fa:	a001      	add	r0, pc, #4	; (adr r0, 8010300 <_printf_i+0x40>)
 80102fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010300:	08010359 	.word	0x08010359
 8010304:	0801036d 	.word	0x0801036d
 8010308:	080102e9 	.word	0x080102e9
 801030c:	080102e9 	.word	0x080102e9
 8010310:	080102e9 	.word	0x080102e9
 8010314:	080102e9 	.word	0x080102e9
 8010318:	0801036d 	.word	0x0801036d
 801031c:	080102e9 	.word	0x080102e9
 8010320:	080102e9 	.word	0x080102e9
 8010324:	080102e9 	.word	0x080102e9
 8010328:	080102e9 	.word	0x080102e9
 801032c:	08010479 	.word	0x08010479
 8010330:	0801039d 	.word	0x0801039d
 8010334:	0801045b 	.word	0x0801045b
 8010338:	080102e9 	.word	0x080102e9
 801033c:	080102e9 	.word	0x080102e9
 8010340:	0801049b 	.word	0x0801049b
 8010344:	080102e9 	.word	0x080102e9
 8010348:	0801039d 	.word	0x0801039d
 801034c:	080102e9 	.word	0x080102e9
 8010350:	080102e9 	.word	0x080102e9
 8010354:	08010463 	.word	0x08010463
 8010358:	680b      	ldr	r3, [r1, #0]
 801035a:	1d1a      	adds	r2, r3, #4
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	600a      	str	r2, [r1, #0]
 8010360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010368:	2301      	movs	r3, #1
 801036a:	e0a3      	b.n	80104b4 <_printf_i+0x1f4>
 801036c:	6825      	ldr	r5, [r4, #0]
 801036e:	6808      	ldr	r0, [r1, #0]
 8010370:	062e      	lsls	r6, r5, #24
 8010372:	f100 0304 	add.w	r3, r0, #4
 8010376:	d50a      	bpl.n	801038e <_printf_i+0xce>
 8010378:	6805      	ldr	r5, [r0, #0]
 801037a:	600b      	str	r3, [r1, #0]
 801037c:	2d00      	cmp	r5, #0
 801037e:	da03      	bge.n	8010388 <_printf_i+0xc8>
 8010380:	232d      	movs	r3, #45	; 0x2d
 8010382:	426d      	negs	r5, r5
 8010384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010388:	485e      	ldr	r0, [pc, #376]	; (8010504 <_printf_i+0x244>)
 801038a:	230a      	movs	r3, #10
 801038c:	e019      	b.n	80103c2 <_printf_i+0x102>
 801038e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010392:	6805      	ldr	r5, [r0, #0]
 8010394:	600b      	str	r3, [r1, #0]
 8010396:	bf18      	it	ne
 8010398:	b22d      	sxthne	r5, r5
 801039a:	e7ef      	b.n	801037c <_printf_i+0xbc>
 801039c:	680b      	ldr	r3, [r1, #0]
 801039e:	6825      	ldr	r5, [r4, #0]
 80103a0:	1d18      	adds	r0, r3, #4
 80103a2:	6008      	str	r0, [r1, #0]
 80103a4:	0628      	lsls	r0, r5, #24
 80103a6:	d501      	bpl.n	80103ac <_printf_i+0xec>
 80103a8:	681d      	ldr	r5, [r3, #0]
 80103aa:	e002      	b.n	80103b2 <_printf_i+0xf2>
 80103ac:	0669      	lsls	r1, r5, #25
 80103ae:	d5fb      	bpl.n	80103a8 <_printf_i+0xe8>
 80103b0:	881d      	ldrh	r5, [r3, #0]
 80103b2:	4854      	ldr	r0, [pc, #336]	; (8010504 <_printf_i+0x244>)
 80103b4:	2f6f      	cmp	r7, #111	; 0x6f
 80103b6:	bf0c      	ite	eq
 80103b8:	2308      	moveq	r3, #8
 80103ba:	230a      	movne	r3, #10
 80103bc:	2100      	movs	r1, #0
 80103be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103c2:	6866      	ldr	r6, [r4, #4]
 80103c4:	60a6      	str	r6, [r4, #8]
 80103c6:	2e00      	cmp	r6, #0
 80103c8:	bfa2      	ittt	ge
 80103ca:	6821      	ldrge	r1, [r4, #0]
 80103cc:	f021 0104 	bicge.w	r1, r1, #4
 80103d0:	6021      	strge	r1, [r4, #0]
 80103d2:	b90d      	cbnz	r5, 80103d8 <_printf_i+0x118>
 80103d4:	2e00      	cmp	r6, #0
 80103d6:	d04d      	beq.n	8010474 <_printf_i+0x1b4>
 80103d8:	4616      	mov	r6, r2
 80103da:	fbb5 f1f3 	udiv	r1, r5, r3
 80103de:	fb03 5711 	mls	r7, r3, r1, r5
 80103e2:	5dc7      	ldrb	r7, [r0, r7]
 80103e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80103e8:	462f      	mov	r7, r5
 80103ea:	42bb      	cmp	r3, r7
 80103ec:	460d      	mov	r5, r1
 80103ee:	d9f4      	bls.n	80103da <_printf_i+0x11a>
 80103f0:	2b08      	cmp	r3, #8
 80103f2:	d10b      	bne.n	801040c <_printf_i+0x14c>
 80103f4:	6823      	ldr	r3, [r4, #0]
 80103f6:	07df      	lsls	r7, r3, #31
 80103f8:	d508      	bpl.n	801040c <_printf_i+0x14c>
 80103fa:	6923      	ldr	r3, [r4, #16]
 80103fc:	6861      	ldr	r1, [r4, #4]
 80103fe:	4299      	cmp	r1, r3
 8010400:	bfde      	ittt	le
 8010402:	2330      	movle	r3, #48	; 0x30
 8010404:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010408:	f106 36ff 	addle.w	r6, r6, #4294967295
 801040c:	1b92      	subs	r2, r2, r6
 801040e:	6122      	str	r2, [r4, #16]
 8010410:	f8cd a000 	str.w	sl, [sp]
 8010414:	464b      	mov	r3, r9
 8010416:	aa03      	add	r2, sp, #12
 8010418:	4621      	mov	r1, r4
 801041a:	4640      	mov	r0, r8
 801041c:	f7ff fee2 	bl	80101e4 <_printf_common>
 8010420:	3001      	adds	r0, #1
 8010422:	d14c      	bne.n	80104be <_printf_i+0x1fe>
 8010424:	f04f 30ff 	mov.w	r0, #4294967295
 8010428:	b004      	add	sp, #16
 801042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801042e:	4835      	ldr	r0, [pc, #212]	; (8010504 <_printf_i+0x244>)
 8010430:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010434:	6823      	ldr	r3, [r4, #0]
 8010436:	680e      	ldr	r6, [r1, #0]
 8010438:	061f      	lsls	r7, r3, #24
 801043a:	f856 5b04 	ldr.w	r5, [r6], #4
 801043e:	600e      	str	r6, [r1, #0]
 8010440:	d514      	bpl.n	801046c <_printf_i+0x1ac>
 8010442:	07d9      	lsls	r1, r3, #31
 8010444:	bf44      	itt	mi
 8010446:	f043 0320 	orrmi.w	r3, r3, #32
 801044a:	6023      	strmi	r3, [r4, #0]
 801044c:	b91d      	cbnz	r5, 8010456 <_printf_i+0x196>
 801044e:	6823      	ldr	r3, [r4, #0]
 8010450:	f023 0320 	bic.w	r3, r3, #32
 8010454:	6023      	str	r3, [r4, #0]
 8010456:	2310      	movs	r3, #16
 8010458:	e7b0      	b.n	80103bc <_printf_i+0xfc>
 801045a:	6823      	ldr	r3, [r4, #0]
 801045c:	f043 0320 	orr.w	r3, r3, #32
 8010460:	6023      	str	r3, [r4, #0]
 8010462:	2378      	movs	r3, #120	; 0x78
 8010464:	4828      	ldr	r0, [pc, #160]	; (8010508 <_printf_i+0x248>)
 8010466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801046a:	e7e3      	b.n	8010434 <_printf_i+0x174>
 801046c:	065e      	lsls	r6, r3, #25
 801046e:	bf48      	it	mi
 8010470:	b2ad      	uxthmi	r5, r5
 8010472:	e7e6      	b.n	8010442 <_printf_i+0x182>
 8010474:	4616      	mov	r6, r2
 8010476:	e7bb      	b.n	80103f0 <_printf_i+0x130>
 8010478:	680b      	ldr	r3, [r1, #0]
 801047a:	6826      	ldr	r6, [r4, #0]
 801047c:	6960      	ldr	r0, [r4, #20]
 801047e:	1d1d      	adds	r5, r3, #4
 8010480:	600d      	str	r5, [r1, #0]
 8010482:	0635      	lsls	r5, r6, #24
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	d501      	bpl.n	801048c <_printf_i+0x1cc>
 8010488:	6018      	str	r0, [r3, #0]
 801048a:	e002      	b.n	8010492 <_printf_i+0x1d2>
 801048c:	0671      	lsls	r1, r6, #25
 801048e:	d5fb      	bpl.n	8010488 <_printf_i+0x1c8>
 8010490:	8018      	strh	r0, [r3, #0]
 8010492:	2300      	movs	r3, #0
 8010494:	6123      	str	r3, [r4, #16]
 8010496:	4616      	mov	r6, r2
 8010498:	e7ba      	b.n	8010410 <_printf_i+0x150>
 801049a:	680b      	ldr	r3, [r1, #0]
 801049c:	1d1a      	adds	r2, r3, #4
 801049e:	600a      	str	r2, [r1, #0]
 80104a0:	681e      	ldr	r6, [r3, #0]
 80104a2:	6862      	ldr	r2, [r4, #4]
 80104a4:	2100      	movs	r1, #0
 80104a6:	4630      	mov	r0, r6
 80104a8:	f7ef ff22 	bl	80002f0 <memchr>
 80104ac:	b108      	cbz	r0, 80104b2 <_printf_i+0x1f2>
 80104ae:	1b80      	subs	r0, r0, r6
 80104b0:	6060      	str	r0, [r4, #4]
 80104b2:	6863      	ldr	r3, [r4, #4]
 80104b4:	6123      	str	r3, [r4, #16]
 80104b6:	2300      	movs	r3, #0
 80104b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104bc:	e7a8      	b.n	8010410 <_printf_i+0x150>
 80104be:	6923      	ldr	r3, [r4, #16]
 80104c0:	4632      	mov	r2, r6
 80104c2:	4649      	mov	r1, r9
 80104c4:	4640      	mov	r0, r8
 80104c6:	47d0      	blx	sl
 80104c8:	3001      	adds	r0, #1
 80104ca:	d0ab      	beq.n	8010424 <_printf_i+0x164>
 80104cc:	6823      	ldr	r3, [r4, #0]
 80104ce:	079b      	lsls	r3, r3, #30
 80104d0:	d413      	bmi.n	80104fa <_printf_i+0x23a>
 80104d2:	68e0      	ldr	r0, [r4, #12]
 80104d4:	9b03      	ldr	r3, [sp, #12]
 80104d6:	4298      	cmp	r0, r3
 80104d8:	bfb8      	it	lt
 80104da:	4618      	movlt	r0, r3
 80104dc:	e7a4      	b.n	8010428 <_printf_i+0x168>
 80104de:	2301      	movs	r3, #1
 80104e0:	4632      	mov	r2, r6
 80104e2:	4649      	mov	r1, r9
 80104e4:	4640      	mov	r0, r8
 80104e6:	47d0      	blx	sl
 80104e8:	3001      	adds	r0, #1
 80104ea:	d09b      	beq.n	8010424 <_printf_i+0x164>
 80104ec:	3501      	adds	r5, #1
 80104ee:	68e3      	ldr	r3, [r4, #12]
 80104f0:	9903      	ldr	r1, [sp, #12]
 80104f2:	1a5b      	subs	r3, r3, r1
 80104f4:	42ab      	cmp	r3, r5
 80104f6:	dcf2      	bgt.n	80104de <_printf_i+0x21e>
 80104f8:	e7eb      	b.n	80104d2 <_printf_i+0x212>
 80104fa:	2500      	movs	r5, #0
 80104fc:	f104 0619 	add.w	r6, r4, #25
 8010500:	e7f5      	b.n	80104ee <_printf_i+0x22e>
 8010502:	bf00      	nop
 8010504:	08013032 	.word	0x08013032
 8010508:	08013043 	.word	0x08013043

0801050c <iprintf>:
 801050c:	b40f      	push	{r0, r1, r2, r3}
 801050e:	4b0a      	ldr	r3, [pc, #40]	; (8010538 <iprintf+0x2c>)
 8010510:	b513      	push	{r0, r1, r4, lr}
 8010512:	681c      	ldr	r4, [r3, #0]
 8010514:	b124      	cbz	r4, 8010520 <iprintf+0x14>
 8010516:	69a3      	ldr	r3, [r4, #24]
 8010518:	b913      	cbnz	r3, 8010520 <iprintf+0x14>
 801051a:	4620      	mov	r0, r4
 801051c:	f001 f86c 	bl	80115f8 <__sinit>
 8010520:	ab05      	add	r3, sp, #20
 8010522:	9a04      	ldr	r2, [sp, #16]
 8010524:	68a1      	ldr	r1, [r4, #8]
 8010526:	9301      	str	r3, [sp, #4]
 8010528:	4620      	mov	r0, r4
 801052a:	f001 fde7 	bl	80120fc <_vfiprintf_r>
 801052e:	b002      	add	sp, #8
 8010530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010534:	b004      	add	sp, #16
 8010536:	4770      	bx	lr
 8010538:	24000028 	.word	0x24000028

0801053c <_puts_r>:
 801053c:	b570      	push	{r4, r5, r6, lr}
 801053e:	460e      	mov	r6, r1
 8010540:	4605      	mov	r5, r0
 8010542:	b118      	cbz	r0, 801054c <_puts_r+0x10>
 8010544:	6983      	ldr	r3, [r0, #24]
 8010546:	b90b      	cbnz	r3, 801054c <_puts_r+0x10>
 8010548:	f001 f856 	bl	80115f8 <__sinit>
 801054c:	69ab      	ldr	r3, [r5, #24]
 801054e:	68ac      	ldr	r4, [r5, #8]
 8010550:	b913      	cbnz	r3, 8010558 <_puts_r+0x1c>
 8010552:	4628      	mov	r0, r5
 8010554:	f001 f850 	bl	80115f8 <__sinit>
 8010558:	4b2c      	ldr	r3, [pc, #176]	; (801060c <_puts_r+0xd0>)
 801055a:	429c      	cmp	r4, r3
 801055c:	d120      	bne.n	80105a0 <_puts_r+0x64>
 801055e:	686c      	ldr	r4, [r5, #4]
 8010560:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010562:	07db      	lsls	r3, r3, #31
 8010564:	d405      	bmi.n	8010572 <_puts_r+0x36>
 8010566:	89a3      	ldrh	r3, [r4, #12]
 8010568:	0598      	lsls	r0, r3, #22
 801056a:	d402      	bmi.n	8010572 <_puts_r+0x36>
 801056c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801056e:	f001 f8e6 	bl	801173e <__retarget_lock_acquire_recursive>
 8010572:	89a3      	ldrh	r3, [r4, #12]
 8010574:	0719      	lsls	r1, r3, #28
 8010576:	d51d      	bpl.n	80105b4 <_puts_r+0x78>
 8010578:	6923      	ldr	r3, [r4, #16]
 801057a:	b1db      	cbz	r3, 80105b4 <_puts_r+0x78>
 801057c:	3e01      	subs	r6, #1
 801057e:	68a3      	ldr	r3, [r4, #8]
 8010580:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010584:	3b01      	subs	r3, #1
 8010586:	60a3      	str	r3, [r4, #8]
 8010588:	bb39      	cbnz	r1, 80105da <_puts_r+0x9e>
 801058a:	2b00      	cmp	r3, #0
 801058c:	da38      	bge.n	8010600 <_puts_r+0xc4>
 801058e:	4622      	mov	r2, r4
 8010590:	210a      	movs	r1, #10
 8010592:	4628      	mov	r0, r5
 8010594:	f000 f848 	bl	8010628 <__swbuf_r>
 8010598:	3001      	adds	r0, #1
 801059a:	d011      	beq.n	80105c0 <_puts_r+0x84>
 801059c:	250a      	movs	r5, #10
 801059e:	e011      	b.n	80105c4 <_puts_r+0x88>
 80105a0:	4b1b      	ldr	r3, [pc, #108]	; (8010610 <_puts_r+0xd4>)
 80105a2:	429c      	cmp	r4, r3
 80105a4:	d101      	bne.n	80105aa <_puts_r+0x6e>
 80105a6:	68ac      	ldr	r4, [r5, #8]
 80105a8:	e7da      	b.n	8010560 <_puts_r+0x24>
 80105aa:	4b1a      	ldr	r3, [pc, #104]	; (8010614 <_puts_r+0xd8>)
 80105ac:	429c      	cmp	r4, r3
 80105ae:	bf08      	it	eq
 80105b0:	68ec      	ldreq	r4, [r5, #12]
 80105b2:	e7d5      	b.n	8010560 <_puts_r+0x24>
 80105b4:	4621      	mov	r1, r4
 80105b6:	4628      	mov	r0, r5
 80105b8:	f000 f888 	bl	80106cc <__swsetup_r>
 80105bc:	2800      	cmp	r0, #0
 80105be:	d0dd      	beq.n	801057c <_puts_r+0x40>
 80105c0:	f04f 35ff 	mov.w	r5, #4294967295
 80105c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105c6:	07da      	lsls	r2, r3, #31
 80105c8:	d405      	bmi.n	80105d6 <_puts_r+0x9a>
 80105ca:	89a3      	ldrh	r3, [r4, #12]
 80105cc:	059b      	lsls	r3, r3, #22
 80105ce:	d402      	bmi.n	80105d6 <_puts_r+0x9a>
 80105d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105d2:	f001 f8b5 	bl	8011740 <__retarget_lock_release_recursive>
 80105d6:	4628      	mov	r0, r5
 80105d8:	bd70      	pop	{r4, r5, r6, pc}
 80105da:	2b00      	cmp	r3, #0
 80105dc:	da04      	bge.n	80105e8 <_puts_r+0xac>
 80105de:	69a2      	ldr	r2, [r4, #24]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	dc06      	bgt.n	80105f2 <_puts_r+0xb6>
 80105e4:	290a      	cmp	r1, #10
 80105e6:	d004      	beq.n	80105f2 <_puts_r+0xb6>
 80105e8:	6823      	ldr	r3, [r4, #0]
 80105ea:	1c5a      	adds	r2, r3, #1
 80105ec:	6022      	str	r2, [r4, #0]
 80105ee:	7019      	strb	r1, [r3, #0]
 80105f0:	e7c5      	b.n	801057e <_puts_r+0x42>
 80105f2:	4622      	mov	r2, r4
 80105f4:	4628      	mov	r0, r5
 80105f6:	f000 f817 	bl	8010628 <__swbuf_r>
 80105fa:	3001      	adds	r0, #1
 80105fc:	d1bf      	bne.n	801057e <_puts_r+0x42>
 80105fe:	e7df      	b.n	80105c0 <_puts_r+0x84>
 8010600:	6823      	ldr	r3, [r4, #0]
 8010602:	250a      	movs	r5, #10
 8010604:	1c5a      	adds	r2, r3, #1
 8010606:	6022      	str	r2, [r4, #0]
 8010608:	701d      	strb	r5, [r3, #0]
 801060a:	e7db      	b.n	80105c4 <_puts_r+0x88>
 801060c:	08013108 	.word	0x08013108
 8010610:	08013128 	.word	0x08013128
 8010614:	080130e8 	.word	0x080130e8

08010618 <puts>:
 8010618:	4b02      	ldr	r3, [pc, #8]	; (8010624 <puts+0xc>)
 801061a:	4601      	mov	r1, r0
 801061c:	6818      	ldr	r0, [r3, #0]
 801061e:	f7ff bf8d 	b.w	801053c <_puts_r>
 8010622:	bf00      	nop
 8010624:	24000028 	.word	0x24000028

08010628 <__swbuf_r>:
 8010628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801062a:	460e      	mov	r6, r1
 801062c:	4614      	mov	r4, r2
 801062e:	4605      	mov	r5, r0
 8010630:	b118      	cbz	r0, 801063a <__swbuf_r+0x12>
 8010632:	6983      	ldr	r3, [r0, #24]
 8010634:	b90b      	cbnz	r3, 801063a <__swbuf_r+0x12>
 8010636:	f000 ffdf 	bl	80115f8 <__sinit>
 801063a:	4b21      	ldr	r3, [pc, #132]	; (80106c0 <__swbuf_r+0x98>)
 801063c:	429c      	cmp	r4, r3
 801063e:	d12b      	bne.n	8010698 <__swbuf_r+0x70>
 8010640:	686c      	ldr	r4, [r5, #4]
 8010642:	69a3      	ldr	r3, [r4, #24]
 8010644:	60a3      	str	r3, [r4, #8]
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	071a      	lsls	r2, r3, #28
 801064a:	d52f      	bpl.n	80106ac <__swbuf_r+0x84>
 801064c:	6923      	ldr	r3, [r4, #16]
 801064e:	b36b      	cbz	r3, 80106ac <__swbuf_r+0x84>
 8010650:	6923      	ldr	r3, [r4, #16]
 8010652:	6820      	ldr	r0, [r4, #0]
 8010654:	1ac0      	subs	r0, r0, r3
 8010656:	6963      	ldr	r3, [r4, #20]
 8010658:	b2f6      	uxtb	r6, r6
 801065a:	4283      	cmp	r3, r0
 801065c:	4637      	mov	r7, r6
 801065e:	dc04      	bgt.n	801066a <__swbuf_r+0x42>
 8010660:	4621      	mov	r1, r4
 8010662:	4628      	mov	r0, r5
 8010664:	f000 ff34 	bl	80114d0 <_fflush_r>
 8010668:	bb30      	cbnz	r0, 80106b8 <__swbuf_r+0x90>
 801066a:	68a3      	ldr	r3, [r4, #8]
 801066c:	3b01      	subs	r3, #1
 801066e:	60a3      	str	r3, [r4, #8]
 8010670:	6823      	ldr	r3, [r4, #0]
 8010672:	1c5a      	adds	r2, r3, #1
 8010674:	6022      	str	r2, [r4, #0]
 8010676:	701e      	strb	r6, [r3, #0]
 8010678:	6963      	ldr	r3, [r4, #20]
 801067a:	3001      	adds	r0, #1
 801067c:	4283      	cmp	r3, r0
 801067e:	d004      	beq.n	801068a <__swbuf_r+0x62>
 8010680:	89a3      	ldrh	r3, [r4, #12]
 8010682:	07db      	lsls	r3, r3, #31
 8010684:	d506      	bpl.n	8010694 <__swbuf_r+0x6c>
 8010686:	2e0a      	cmp	r6, #10
 8010688:	d104      	bne.n	8010694 <__swbuf_r+0x6c>
 801068a:	4621      	mov	r1, r4
 801068c:	4628      	mov	r0, r5
 801068e:	f000 ff1f 	bl	80114d0 <_fflush_r>
 8010692:	b988      	cbnz	r0, 80106b8 <__swbuf_r+0x90>
 8010694:	4638      	mov	r0, r7
 8010696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010698:	4b0a      	ldr	r3, [pc, #40]	; (80106c4 <__swbuf_r+0x9c>)
 801069a:	429c      	cmp	r4, r3
 801069c:	d101      	bne.n	80106a2 <__swbuf_r+0x7a>
 801069e:	68ac      	ldr	r4, [r5, #8]
 80106a0:	e7cf      	b.n	8010642 <__swbuf_r+0x1a>
 80106a2:	4b09      	ldr	r3, [pc, #36]	; (80106c8 <__swbuf_r+0xa0>)
 80106a4:	429c      	cmp	r4, r3
 80106a6:	bf08      	it	eq
 80106a8:	68ec      	ldreq	r4, [r5, #12]
 80106aa:	e7ca      	b.n	8010642 <__swbuf_r+0x1a>
 80106ac:	4621      	mov	r1, r4
 80106ae:	4628      	mov	r0, r5
 80106b0:	f000 f80c 	bl	80106cc <__swsetup_r>
 80106b4:	2800      	cmp	r0, #0
 80106b6:	d0cb      	beq.n	8010650 <__swbuf_r+0x28>
 80106b8:	f04f 37ff 	mov.w	r7, #4294967295
 80106bc:	e7ea      	b.n	8010694 <__swbuf_r+0x6c>
 80106be:	bf00      	nop
 80106c0:	08013108 	.word	0x08013108
 80106c4:	08013128 	.word	0x08013128
 80106c8:	080130e8 	.word	0x080130e8

080106cc <__swsetup_r>:
 80106cc:	4b32      	ldr	r3, [pc, #200]	; (8010798 <__swsetup_r+0xcc>)
 80106ce:	b570      	push	{r4, r5, r6, lr}
 80106d0:	681d      	ldr	r5, [r3, #0]
 80106d2:	4606      	mov	r6, r0
 80106d4:	460c      	mov	r4, r1
 80106d6:	b125      	cbz	r5, 80106e2 <__swsetup_r+0x16>
 80106d8:	69ab      	ldr	r3, [r5, #24]
 80106da:	b913      	cbnz	r3, 80106e2 <__swsetup_r+0x16>
 80106dc:	4628      	mov	r0, r5
 80106de:	f000 ff8b 	bl	80115f8 <__sinit>
 80106e2:	4b2e      	ldr	r3, [pc, #184]	; (801079c <__swsetup_r+0xd0>)
 80106e4:	429c      	cmp	r4, r3
 80106e6:	d10f      	bne.n	8010708 <__swsetup_r+0x3c>
 80106e8:	686c      	ldr	r4, [r5, #4]
 80106ea:	89a3      	ldrh	r3, [r4, #12]
 80106ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80106f0:	0719      	lsls	r1, r3, #28
 80106f2:	d42c      	bmi.n	801074e <__swsetup_r+0x82>
 80106f4:	06dd      	lsls	r5, r3, #27
 80106f6:	d411      	bmi.n	801071c <__swsetup_r+0x50>
 80106f8:	2309      	movs	r3, #9
 80106fa:	6033      	str	r3, [r6, #0]
 80106fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010700:	81a3      	strh	r3, [r4, #12]
 8010702:	f04f 30ff 	mov.w	r0, #4294967295
 8010706:	e03e      	b.n	8010786 <__swsetup_r+0xba>
 8010708:	4b25      	ldr	r3, [pc, #148]	; (80107a0 <__swsetup_r+0xd4>)
 801070a:	429c      	cmp	r4, r3
 801070c:	d101      	bne.n	8010712 <__swsetup_r+0x46>
 801070e:	68ac      	ldr	r4, [r5, #8]
 8010710:	e7eb      	b.n	80106ea <__swsetup_r+0x1e>
 8010712:	4b24      	ldr	r3, [pc, #144]	; (80107a4 <__swsetup_r+0xd8>)
 8010714:	429c      	cmp	r4, r3
 8010716:	bf08      	it	eq
 8010718:	68ec      	ldreq	r4, [r5, #12]
 801071a:	e7e6      	b.n	80106ea <__swsetup_r+0x1e>
 801071c:	0758      	lsls	r0, r3, #29
 801071e:	d512      	bpl.n	8010746 <__swsetup_r+0x7a>
 8010720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010722:	b141      	cbz	r1, 8010736 <__swsetup_r+0x6a>
 8010724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010728:	4299      	cmp	r1, r3
 801072a:	d002      	beq.n	8010732 <__swsetup_r+0x66>
 801072c:	4630      	mov	r0, r6
 801072e:	f001 fc11 	bl	8011f54 <_free_r>
 8010732:	2300      	movs	r3, #0
 8010734:	6363      	str	r3, [r4, #52]	; 0x34
 8010736:	89a3      	ldrh	r3, [r4, #12]
 8010738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801073c:	81a3      	strh	r3, [r4, #12]
 801073e:	2300      	movs	r3, #0
 8010740:	6063      	str	r3, [r4, #4]
 8010742:	6923      	ldr	r3, [r4, #16]
 8010744:	6023      	str	r3, [r4, #0]
 8010746:	89a3      	ldrh	r3, [r4, #12]
 8010748:	f043 0308 	orr.w	r3, r3, #8
 801074c:	81a3      	strh	r3, [r4, #12]
 801074e:	6923      	ldr	r3, [r4, #16]
 8010750:	b94b      	cbnz	r3, 8010766 <__swsetup_r+0x9a>
 8010752:	89a3      	ldrh	r3, [r4, #12]
 8010754:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801075c:	d003      	beq.n	8010766 <__swsetup_r+0x9a>
 801075e:	4621      	mov	r1, r4
 8010760:	4630      	mov	r0, r6
 8010762:	f001 f813 	bl	801178c <__smakebuf_r>
 8010766:	89a0      	ldrh	r0, [r4, #12]
 8010768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801076c:	f010 0301 	ands.w	r3, r0, #1
 8010770:	d00a      	beq.n	8010788 <__swsetup_r+0xbc>
 8010772:	2300      	movs	r3, #0
 8010774:	60a3      	str	r3, [r4, #8]
 8010776:	6963      	ldr	r3, [r4, #20]
 8010778:	425b      	negs	r3, r3
 801077a:	61a3      	str	r3, [r4, #24]
 801077c:	6923      	ldr	r3, [r4, #16]
 801077e:	b943      	cbnz	r3, 8010792 <__swsetup_r+0xc6>
 8010780:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010784:	d1ba      	bne.n	80106fc <__swsetup_r+0x30>
 8010786:	bd70      	pop	{r4, r5, r6, pc}
 8010788:	0781      	lsls	r1, r0, #30
 801078a:	bf58      	it	pl
 801078c:	6963      	ldrpl	r3, [r4, #20]
 801078e:	60a3      	str	r3, [r4, #8]
 8010790:	e7f4      	b.n	801077c <__swsetup_r+0xb0>
 8010792:	2000      	movs	r0, #0
 8010794:	e7f7      	b.n	8010786 <__swsetup_r+0xba>
 8010796:	bf00      	nop
 8010798:	24000028 	.word	0x24000028
 801079c:	08013108 	.word	0x08013108
 80107a0:	08013128 	.word	0x08013128
 80107a4:	080130e8 	.word	0x080130e8

080107a8 <quorem>:
 80107a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ac:	6903      	ldr	r3, [r0, #16]
 80107ae:	690c      	ldr	r4, [r1, #16]
 80107b0:	42a3      	cmp	r3, r4
 80107b2:	4607      	mov	r7, r0
 80107b4:	f2c0 8081 	blt.w	80108ba <quorem+0x112>
 80107b8:	3c01      	subs	r4, #1
 80107ba:	f101 0814 	add.w	r8, r1, #20
 80107be:	f100 0514 	add.w	r5, r0, #20
 80107c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107c6:	9301      	str	r3, [sp, #4]
 80107c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80107cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107d0:	3301      	adds	r3, #1
 80107d2:	429a      	cmp	r2, r3
 80107d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80107d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80107dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80107e0:	d331      	bcc.n	8010846 <quorem+0x9e>
 80107e2:	f04f 0e00 	mov.w	lr, #0
 80107e6:	4640      	mov	r0, r8
 80107e8:	46ac      	mov	ip, r5
 80107ea:	46f2      	mov	sl, lr
 80107ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80107f0:	b293      	uxth	r3, r2
 80107f2:	fb06 e303 	mla	r3, r6, r3, lr
 80107f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	ebaa 0303 	sub.w	r3, sl, r3
 8010800:	0c12      	lsrs	r2, r2, #16
 8010802:	f8dc a000 	ldr.w	sl, [ip]
 8010806:	fb06 e202 	mla	r2, r6, r2, lr
 801080a:	fa13 f38a 	uxtah	r3, r3, sl
 801080e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010812:	fa1f fa82 	uxth.w	sl, r2
 8010816:	f8dc 2000 	ldr.w	r2, [ip]
 801081a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801081e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010822:	b29b      	uxth	r3, r3
 8010824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010828:	4581      	cmp	r9, r0
 801082a:	f84c 3b04 	str.w	r3, [ip], #4
 801082e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010832:	d2db      	bcs.n	80107ec <quorem+0x44>
 8010834:	f855 300b 	ldr.w	r3, [r5, fp]
 8010838:	b92b      	cbnz	r3, 8010846 <quorem+0x9e>
 801083a:	9b01      	ldr	r3, [sp, #4]
 801083c:	3b04      	subs	r3, #4
 801083e:	429d      	cmp	r5, r3
 8010840:	461a      	mov	r2, r3
 8010842:	d32e      	bcc.n	80108a2 <quorem+0xfa>
 8010844:	613c      	str	r4, [r7, #16]
 8010846:	4638      	mov	r0, r7
 8010848:	f001 fa74 	bl	8011d34 <__mcmp>
 801084c:	2800      	cmp	r0, #0
 801084e:	db24      	blt.n	801089a <quorem+0xf2>
 8010850:	3601      	adds	r6, #1
 8010852:	4628      	mov	r0, r5
 8010854:	f04f 0c00 	mov.w	ip, #0
 8010858:	f858 2b04 	ldr.w	r2, [r8], #4
 801085c:	f8d0 e000 	ldr.w	lr, [r0]
 8010860:	b293      	uxth	r3, r2
 8010862:	ebac 0303 	sub.w	r3, ip, r3
 8010866:	0c12      	lsrs	r2, r2, #16
 8010868:	fa13 f38e 	uxtah	r3, r3, lr
 801086c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010874:	b29b      	uxth	r3, r3
 8010876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801087a:	45c1      	cmp	r9, r8
 801087c:	f840 3b04 	str.w	r3, [r0], #4
 8010880:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010884:	d2e8      	bcs.n	8010858 <quorem+0xb0>
 8010886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801088a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801088e:	b922      	cbnz	r2, 801089a <quorem+0xf2>
 8010890:	3b04      	subs	r3, #4
 8010892:	429d      	cmp	r5, r3
 8010894:	461a      	mov	r2, r3
 8010896:	d30a      	bcc.n	80108ae <quorem+0x106>
 8010898:	613c      	str	r4, [r7, #16]
 801089a:	4630      	mov	r0, r6
 801089c:	b003      	add	sp, #12
 801089e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a2:	6812      	ldr	r2, [r2, #0]
 80108a4:	3b04      	subs	r3, #4
 80108a6:	2a00      	cmp	r2, #0
 80108a8:	d1cc      	bne.n	8010844 <quorem+0x9c>
 80108aa:	3c01      	subs	r4, #1
 80108ac:	e7c7      	b.n	801083e <quorem+0x96>
 80108ae:	6812      	ldr	r2, [r2, #0]
 80108b0:	3b04      	subs	r3, #4
 80108b2:	2a00      	cmp	r2, #0
 80108b4:	d1f0      	bne.n	8010898 <quorem+0xf0>
 80108b6:	3c01      	subs	r4, #1
 80108b8:	e7eb      	b.n	8010892 <quorem+0xea>
 80108ba:	2000      	movs	r0, #0
 80108bc:	e7ee      	b.n	801089c <quorem+0xf4>
	...

080108c0 <_dtoa_r>:
 80108c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c4:	ec59 8b10 	vmov	r8, r9, d0
 80108c8:	b095      	sub	sp, #84	; 0x54
 80108ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80108cc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80108ce:	9107      	str	r1, [sp, #28]
 80108d0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80108d4:	4606      	mov	r6, r0
 80108d6:	9209      	str	r2, [sp, #36]	; 0x24
 80108d8:	9310      	str	r3, [sp, #64]	; 0x40
 80108da:	b975      	cbnz	r5, 80108fa <_dtoa_r+0x3a>
 80108dc:	2010      	movs	r0, #16
 80108de:	f000 ff95 	bl	801180c <malloc>
 80108e2:	4602      	mov	r2, r0
 80108e4:	6270      	str	r0, [r6, #36]	; 0x24
 80108e6:	b920      	cbnz	r0, 80108f2 <_dtoa_r+0x32>
 80108e8:	4bab      	ldr	r3, [pc, #684]	; (8010b98 <_dtoa_r+0x2d8>)
 80108ea:	21ea      	movs	r1, #234	; 0xea
 80108ec:	48ab      	ldr	r0, [pc, #684]	; (8010b9c <_dtoa_r+0x2dc>)
 80108ee:	f001 fd9b 	bl	8012428 <__assert_func>
 80108f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80108f6:	6005      	str	r5, [r0, #0]
 80108f8:	60c5      	str	r5, [r0, #12]
 80108fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80108fc:	6819      	ldr	r1, [r3, #0]
 80108fe:	b151      	cbz	r1, 8010916 <_dtoa_r+0x56>
 8010900:	685a      	ldr	r2, [r3, #4]
 8010902:	604a      	str	r2, [r1, #4]
 8010904:	2301      	movs	r3, #1
 8010906:	4093      	lsls	r3, r2
 8010908:	608b      	str	r3, [r1, #8]
 801090a:	4630      	mov	r0, r6
 801090c:	f000 ffd4 	bl	80118b8 <_Bfree>
 8010910:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010912:	2200      	movs	r2, #0
 8010914:	601a      	str	r2, [r3, #0]
 8010916:	f1b9 0300 	subs.w	r3, r9, #0
 801091a:	bfbb      	ittet	lt
 801091c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010920:	9303      	strlt	r3, [sp, #12]
 8010922:	2300      	movge	r3, #0
 8010924:	2201      	movlt	r2, #1
 8010926:	bfac      	ite	ge
 8010928:	6023      	strge	r3, [r4, #0]
 801092a:	6022      	strlt	r2, [r4, #0]
 801092c:	4b9c      	ldr	r3, [pc, #624]	; (8010ba0 <_dtoa_r+0x2e0>)
 801092e:	9c03      	ldr	r4, [sp, #12]
 8010930:	43a3      	bics	r3, r4
 8010932:	d11a      	bne.n	801096a <_dtoa_r+0xaa>
 8010934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010936:	f242 730f 	movw	r3, #9999	; 0x270f
 801093a:	6013      	str	r3, [r2, #0]
 801093c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010940:	ea53 0308 	orrs.w	r3, r3, r8
 8010944:	f000 8512 	beq.w	801136c <_dtoa_r+0xaac>
 8010948:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801094a:	b953      	cbnz	r3, 8010962 <_dtoa_r+0xa2>
 801094c:	4b95      	ldr	r3, [pc, #596]	; (8010ba4 <_dtoa_r+0x2e4>)
 801094e:	e01f      	b.n	8010990 <_dtoa_r+0xd0>
 8010950:	4b95      	ldr	r3, [pc, #596]	; (8010ba8 <_dtoa_r+0x2e8>)
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	3308      	adds	r3, #8
 8010956:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010958:	6013      	str	r3, [r2, #0]
 801095a:	9800      	ldr	r0, [sp, #0]
 801095c:	b015      	add	sp, #84	; 0x54
 801095e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010962:	4b90      	ldr	r3, [pc, #576]	; (8010ba4 <_dtoa_r+0x2e4>)
 8010964:	9300      	str	r3, [sp, #0]
 8010966:	3303      	adds	r3, #3
 8010968:	e7f5      	b.n	8010956 <_dtoa_r+0x96>
 801096a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801096e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010976:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801097a:	d10b      	bne.n	8010994 <_dtoa_r+0xd4>
 801097c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801097e:	2301      	movs	r3, #1
 8010980:	6013      	str	r3, [r2, #0]
 8010982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010984:	2b00      	cmp	r3, #0
 8010986:	f000 84ee 	beq.w	8011366 <_dtoa_r+0xaa6>
 801098a:	4888      	ldr	r0, [pc, #544]	; (8010bac <_dtoa_r+0x2ec>)
 801098c:	6018      	str	r0, [r3, #0]
 801098e:	1e43      	subs	r3, r0, #1
 8010990:	9300      	str	r3, [sp, #0]
 8010992:	e7e2      	b.n	801095a <_dtoa_r+0x9a>
 8010994:	a913      	add	r1, sp, #76	; 0x4c
 8010996:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801099a:	aa12      	add	r2, sp, #72	; 0x48
 801099c:	4630      	mov	r0, r6
 801099e:	f001 fa6d 	bl	8011e7c <__d2b>
 80109a2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80109a6:	4605      	mov	r5, r0
 80109a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80109aa:	2900      	cmp	r1, #0
 80109ac:	d047      	beq.n	8010a3e <_dtoa_r+0x17e>
 80109ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80109b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80109b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80109b8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80109bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80109c0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80109c4:	2400      	movs	r4, #0
 80109c6:	ec43 2b16 	vmov	d6, r2, r3
 80109ca:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80109ce:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8010b80 <_dtoa_r+0x2c0>
 80109d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80109d6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8010b88 <_dtoa_r+0x2c8>
 80109da:	eea7 6b05 	vfma.f64	d6, d7, d5
 80109de:	eeb0 7b46 	vmov.f64	d7, d6
 80109e2:	ee06 1a90 	vmov	s13, r1
 80109e6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80109ea:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010b90 <_dtoa_r+0x2d0>
 80109ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 80109f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80109f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80109fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109fe:	ee16 ba90 	vmov	fp, s13
 8010a02:	9411      	str	r4, [sp, #68]	; 0x44
 8010a04:	d508      	bpl.n	8010a18 <_dtoa_r+0x158>
 8010a06:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010a0a:	eeb4 6b47 	vcmp.f64	d6, d7
 8010a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a12:	bf18      	it	ne
 8010a14:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010a18:	f1bb 0f16 	cmp.w	fp, #22
 8010a1c:	d832      	bhi.n	8010a84 <_dtoa_r+0x1c4>
 8010a1e:	4b64      	ldr	r3, [pc, #400]	; (8010bb0 <_dtoa_r+0x2f0>)
 8010a20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010a24:	ed93 7b00 	vldr	d7, [r3]
 8010a28:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010a2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a34:	d501      	bpl.n	8010a3a <_dtoa_r+0x17a>
 8010a36:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	e023      	b.n	8010a86 <_dtoa_r+0x1c6>
 8010a3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010a40:	4401      	add	r1, r0
 8010a42:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010a46:	2b20      	cmp	r3, #32
 8010a48:	bfc3      	ittte	gt
 8010a4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a4e:	fa04 f303 	lslgt.w	r3, r4, r3
 8010a52:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010a56:	f1c3 0320 	rsble	r3, r3, #32
 8010a5a:	bfc6      	itte	gt
 8010a5c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010a60:	ea43 0308 	orrgt.w	r3, r3, r8
 8010a64:	fa08 f303 	lslle.w	r3, r8, r3
 8010a68:	ee07 3a90 	vmov	s15, r3
 8010a6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010a70:	3901      	subs	r1, #1
 8010a72:	ed8d 7b00 	vstr	d7, [sp]
 8010a76:	9c01      	ldr	r4, [sp, #4]
 8010a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a7c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010a80:	2401      	movs	r4, #1
 8010a82:	e7a0      	b.n	80109c6 <_dtoa_r+0x106>
 8010a84:	2301      	movs	r3, #1
 8010a86:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a88:	1a43      	subs	r3, r0, r1
 8010a8a:	1e5a      	subs	r2, r3, #1
 8010a8c:	bf45      	ittet	mi
 8010a8e:	f1c3 0301 	rsbmi	r3, r3, #1
 8010a92:	9305      	strmi	r3, [sp, #20]
 8010a94:	2300      	movpl	r3, #0
 8010a96:	2300      	movmi	r3, #0
 8010a98:	9206      	str	r2, [sp, #24]
 8010a9a:	bf54      	ite	pl
 8010a9c:	9305      	strpl	r3, [sp, #20]
 8010a9e:	9306      	strmi	r3, [sp, #24]
 8010aa0:	f1bb 0f00 	cmp.w	fp, #0
 8010aa4:	db18      	blt.n	8010ad8 <_dtoa_r+0x218>
 8010aa6:	9b06      	ldr	r3, [sp, #24]
 8010aa8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010aac:	445b      	add	r3, fp
 8010aae:	9306      	str	r3, [sp, #24]
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	9a07      	ldr	r2, [sp, #28]
 8010ab4:	2a09      	cmp	r2, #9
 8010ab6:	d849      	bhi.n	8010b4c <_dtoa_r+0x28c>
 8010ab8:	2a05      	cmp	r2, #5
 8010aba:	bfc4      	itt	gt
 8010abc:	3a04      	subgt	r2, #4
 8010abe:	9207      	strgt	r2, [sp, #28]
 8010ac0:	9a07      	ldr	r2, [sp, #28]
 8010ac2:	f1a2 0202 	sub.w	r2, r2, #2
 8010ac6:	bfcc      	ite	gt
 8010ac8:	2400      	movgt	r4, #0
 8010aca:	2401      	movle	r4, #1
 8010acc:	2a03      	cmp	r2, #3
 8010ace:	d848      	bhi.n	8010b62 <_dtoa_r+0x2a2>
 8010ad0:	e8df f002 	tbb	[pc, r2]
 8010ad4:	3a2c2e0b 	.word	0x3a2c2e0b
 8010ad8:	9b05      	ldr	r3, [sp, #20]
 8010ada:	2200      	movs	r2, #0
 8010adc:	eba3 030b 	sub.w	r3, r3, fp
 8010ae0:	9305      	str	r3, [sp, #20]
 8010ae2:	920e      	str	r2, [sp, #56]	; 0x38
 8010ae4:	f1cb 0300 	rsb	r3, fp, #0
 8010ae8:	e7e3      	b.n	8010ab2 <_dtoa_r+0x1f2>
 8010aea:	2200      	movs	r2, #0
 8010aec:	9208      	str	r2, [sp, #32]
 8010aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010af0:	2a00      	cmp	r2, #0
 8010af2:	dc39      	bgt.n	8010b68 <_dtoa_r+0x2a8>
 8010af4:	f04f 0a01 	mov.w	sl, #1
 8010af8:	46d1      	mov	r9, sl
 8010afa:	4652      	mov	r2, sl
 8010afc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010b00:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010b02:	2100      	movs	r1, #0
 8010b04:	6079      	str	r1, [r7, #4]
 8010b06:	2004      	movs	r0, #4
 8010b08:	f100 0c14 	add.w	ip, r0, #20
 8010b0c:	4594      	cmp	ip, r2
 8010b0e:	6879      	ldr	r1, [r7, #4]
 8010b10:	d92f      	bls.n	8010b72 <_dtoa_r+0x2b2>
 8010b12:	4630      	mov	r0, r6
 8010b14:	930c      	str	r3, [sp, #48]	; 0x30
 8010b16:	f000 fe8f 	bl	8011838 <_Balloc>
 8010b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b1c:	9000      	str	r0, [sp, #0]
 8010b1e:	4602      	mov	r2, r0
 8010b20:	2800      	cmp	r0, #0
 8010b22:	d149      	bne.n	8010bb8 <_dtoa_r+0x2f8>
 8010b24:	4b23      	ldr	r3, [pc, #140]	; (8010bb4 <_dtoa_r+0x2f4>)
 8010b26:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010b2a:	e6df      	b.n	80108ec <_dtoa_r+0x2c>
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	e7dd      	b.n	8010aec <_dtoa_r+0x22c>
 8010b30:	2200      	movs	r2, #0
 8010b32:	9208      	str	r2, [sp, #32]
 8010b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b36:	eb0b 0a02 	add.w	sl, fp, r2
 8010b3a:	f10a 0901 	add.w	r9, sl, #1
 8010b3e:	464a      	mov	r2, r9
 8010b40:	2a01      	cmp	r2, #1
 8010b42:	bfb8      	it	lt
 8010b44:	2201      	movlt	r2, #1
 8010b46:	e7db      	b.n	8010b00 <_dtoa_r+0x240>
 8010b48:	2201      	movs	r2, #1
 8010b4a:	e7f2      	b.n	8010b32 <_dtoa_r+0x272>
 8010b4c:	2401      	movs	r4, #1
 8010b4e:	2200      	movs	r2, #0
 8010b50:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010b54:	f04f 3aff 	mov.w	sl, #4294967295
 8010b58:	2100      	movs	r1, #0
 8010b5a:	46d1      	mov	r9, sl
 8010b5c:	2212      	movs	r2, #18
 8010b5e:	9109      	str	r1, [sp, #36]	; 0x24
 8010b60:	e7ce      	b.n	8010b00 <_dtoa_r+0x240>
 8010b62:	2201      	movs	r2, #1
 8010b64:	9208      	str	r2, [sp, #32]
 8010b66:	e7f5      	b.n	8010b54 <_dtoa_r+0x294>
 8010b68:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8010b6c:	46d1      	mov	r9, sl
 8010b6e:	4652      	mov	r2, sl
 8010b70:	e7c6      	b.n	8010b00 <_dtoa_r+0x240>
 8010b72:	3101      	adds	r1, #1
 8010b74:	6079      	str	r1, [r7, #4]
 8010b76:	0040      	lsls	r0, r0, #1
 8010b78:	e7c6      	b.n	8010b08 <_dtoa_r+0x248>
 8010b7a:	bf00      	nop
 8010b7c:	f3af 8000 	nop.w
 8010b80:	636f4361 	.word	0x636f4361
 8010b84:	3fd287a7 	.word	0x3fd287a7
 8010b88:	8b60c8b3 	.word	0x8b60c8b3
 8010b8c:	3fc68a28 	.word	0x3fc68a28
 8010b90:	509f79fb 	.word	0x509f79fb
 8010b94:	3fd34413 	.word	0x3fd34413
 8010b98:	08013061 	.word	0x08013061
 8010b9c:	08013078 	.word	0x08013078
 8010ba0:	7ff00000 	.word	0x7ff00000
 8010ba4:	0801305d 	.word	0x0801305d
 8010ba8:	08013054 	.word	0x08013054
 8010bac:	08013031 	.word	0x08013031
 8010bb0:	080131d0 	.word	0x080131d0
 8010bb4:	080130d7 	.word	0x080130d7
 8010bb8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010bba:	9900      	ldr	r1, [sp, #0]
 8010bbc:	6011      	str	r1, [r2, #0]
 8010bbe:	f1b9 0f0e 	cmp.w	r9, #14
 8010bc2:	d872      	bhi.n	8010caa <_dtoa_r+0x3ea>
 8010bc4:	2c00      	cmp	r4, #0
 8010bc6:	d070      	beq.n	8010caa <_dtoa_r+0x3ea>
 8010bc8:	f1bb 0f00 	cmp.w	fp, #0
 8010bcc:	f340 80a6 	ble.w	8010d1c <_dtoa_r+0x45c>
 8010bd0:	49ca      	ldr	r1, [pc, #808]	; (8010efc <_dtoa_r+0x63c>)
 8010bd2:	f00b 020f 	and.w	r2, fp, #15
 8010bd6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010bda:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010bde:	ed92 7b00 	vldr	d7, [r2]
 8010be2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010be6:	f000 808d 	beq.w	8010d04 <_dtoa_r+0x444>
 8010bea:	4ac5      	ldr	r2, [pc, #788]	; (8010f00 <_dtoa_r+0x640>)
 8010bec:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010bf0:	ed92 6b08 	vldr	d6, [r2, #32]
 8010bf4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010bf8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010bfc:	f001 010f 	and.w	r1, r1, #15
 8010c00:	2203      	movs	r2, #3
 8010c02:	48bf      	ldr	r0, [pc, #764]	; (8010f00 <_dtoa_r+0x640>)
 8010c04:	2900      	cmp	r1, #0
 8010c06:	d17f      	bne.n	8010d08 <_dtoa_r+0x448>
 8010c08:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c0c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010c10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010c16:	2900      	cmp	r1, #0
 8010c18:	f000 80b2 	beq.w	8010d80 <_dtoa_r+0x4c0>
 8010c1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010c20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c2c:	f140 80a8 	bpl.w	8010d80 <_dtoa_r+0x4c0>
 8010c30:	f1b9 0f00 	cmp.w	r9, #0
 8010c34:	f000 80a4 	beq.w	8010d80 <_dtoa_r+0x4c0>
 8010c38:	f1ba 0f00 	cmp.w	sl, #0
 8010c3c:	dd31      	ble.n	8010ca2 <_dtoa_r+0x3e2>
 8010c3e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010c42:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010c46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010c4a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010c4e:	3201      	adds	r2, #1
 8010c50:	4650      	mov	r0, sl
 8010c52:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010c56:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010c5a:	ee07 2a90 	vmov	s15, r2
 8010c5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c62:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010c66:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010c6a:	9c03      	ldr	r4, [sp, #12]
 8010c6c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010c70:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010c74:	2800      	cmp	r0, #0
 8010c76:	f040 8086 	bne.w	8010d86 <_dtoa_r+0x4c6>
 8010c7a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010c7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010c82:	ec42 1b17 	vmov	d7, r1, r2
 8010c86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c8e:	f300 8272 	bgt.w	8011176 <_dtoa_r+0x8b6>
 8010c92:	eeb1 7b47 	vneg.f64	d7, d7
 8010c96:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c9e:	f100 8267 	bmi.w	8011170 <_dtoa_r+0x8b0>
 8010ca2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8010ca6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010caa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010cac:	2a00      	cmp	r2, #0
 8010cae:	f2c0 8129 	blt.w	8010f04 <_dtoa_r+0x644>
 8010cb2:	f1bb 0f0e 	cmp.w	fp, #14
 8010cb6:	f300 8125 	bgt.w	8010f04 <_dtoa_r+0x644>
 8010cba:	4b90      	ldr	r3, [pc, #576]	; (8010efc <_dtoa_r+0x63c>)
 8010cbc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010cc0:	ed93 6b00 	vldr	d6, [r3]
 8010cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	f280 80c3 	bge.w	8010e52 <_dtoa_r+0x592>
 8010ccc:	f1b9 0f00 	cmp.w	r9, #0
 8010cd0:	f300 80bf 	bgt.w	8010e52 <_dtoa_r+0x592>
 8010cd4:	f040 824c 	bne.w	8011170 <_dtoa_r+0x8b0>
 8010cd8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010cdc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010ce0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ce4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cec:	464c      	mov	r4, r9
 8010cee:	464f      	mov	r7, r9
 8010cf0:	f280 8222 	bge.w	8011138 <_dtoa_r+0x878>
 8010cf4:	f8dd 8000 	ldr.w	r8, [sp]
 8010cf8:	2331      	movs	r3, #49	; 0x31
 8010cfa:	f808 3b01 	strb.w	r3, [r8], #1
 8010cfe:	f10b 0b01 	add.w	fp, fp, #1
 8010d02:	e21e      	b.n	8011142 <_dtoa_r+0x882>
 8010d04:	2202      	movs	r2, #2
 8010d06:	e77c      	b.n	8010c02 <_dtoa_r+0x342>
 8010d08:	07cc      	lsls	r4, r1, #31
 8010d0a:	d504      	bpl.n	8010d16 <_dtoa_r+0x456>
 8010d0c:	ed90 6b00 	vldr	d6, [r0]
 8010d10:	3201      	adds	r2, #1
 8010d12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010d16:	1049      	asrs	r1, r1, #1
 8010d18:	3008      	adds	r0, #8
 8010d1a:	e773      	b.n	8010c04 <_dtoa_r+0x344>
 8010d1c:	d02e      	beq.n	8010d7c <_dtoa_r+0x4bc>
 8010d1e:	f1cb 0100 	rsb	r1, fp, #0
 8010d22:	4a76      	ldr	r2, [pc, #472]	; (8010efc <_dtoa_r+0x63c>)
 8010d24:	f001 000f 	and.w	r0, r1, #15
 8010d28:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010d2c:	ed92 7b00 	vldr	d7, [r2]
 8010d30:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010d34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010d38:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010d3c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010d40:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010d44:	486e      	ldr	r0, [pc, #440]	; (8010f00 <_dtoa_r+0x640>)
 8010d46:	1109      	asrs	r1, r1, #4
 8010d48:	2400      	movs	r4, #0
 8010d4a:	2202      	movs	r2, #2
 8010d4c:	b939      	cbnz	r1, 8010d5e <_dtoa_r+0x49e>
 8010d4e:	2c00      	cmp	r4, #0
 8010d50:	f43f af60 	beq.w	8010c14 <_dtoa_r+0x354>
 8010d54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d5c:	e75a      	b.n	8010c14 <_dtoa_r+0x354>
 8010d5e:	07cf      	lsls	r7, r1, #31
 8010d60:	d509      	bpl.n	8010d76 <_dtoa_r+0x4b6>
 8010d62:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010d66:	ed90 7b00 	vldr	d7, [r0]
 8010d6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010d6e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010d72:	3201      	adds	r2, #1
 8010d74:	2401      	movs	r4, #1
 8010d76:	1049      	asrs	r1, r1, #1
 8010d78:	3008      	adds	r0, #8
 8010d7a:	e7e7      	b.n	8010d4c <_dtoa_r+0x48c>
 8010d7c:	2202      	movs	r2, #2
 8010d7e:	e749      	b.n	8010c14 <_dtoa_r+0x354>
 8010d80:	465f      	mov	r7, fp
 8010d82:	4648      	mov	r0, r9
 8010d84:	e765      	b.n	8010c52 <_dtoa_r+0x392>
 8010d86:	ec42 1b17 	vmov	d7, r1, r2
 8010d8a:	4a5c      	ldr	r2, [pc, #368]	; (8010efc <_dtoa_r+0x63c>)
 8010d8c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010d90:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010d94:	9a00      	ldr	r2, [sp, #0]
 8010d96:	1814      	adds	r4, r2, r0
 8010d98:	9a08      	ldr	r2, [sp, #32]
 8010d9a:	b352      	cbz	r2, 8010df2 <_dtoa_r+0x532>
 8010d9c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010da0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010da4:	f8dd 8000 	ldr.w	r8, [sp]
 8010da8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010dac:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010db0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010db4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010db8:	ee14 2a90 	vmov	r2, s9
 8010dbc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010dc0:	3230      	adds	r2, #48	; 0x30
 8010dc2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010dc6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dce:	f808 2b01 	strb.w	r2, [r8], #1
 8010dd2:	d439      	bmi.n	8010e48 <_dtoa_r+0x588>
 8010dd4:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010dd8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010de0:	d472      	bmi.n	8010ec8 <_dtoa_r+0x608>
 8010de2:	45a0      	cmp	r8, r4
 8010de4:	f43f af5d 	beq.w	8010ca2 <_dtoa_r+0x3e2>
 8010de8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010dec:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010df0:	e7e0      	b.n	8010db4 <_dtoa_r+0x4f4>
 8010df2:	f8dd 8000 	ldr.w	r8, [sp]
 8010df6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010dfa:	4621      	mov	r1, r4
 8010dfc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010e00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010e04:	ee14 2a90 	vmov	r2, s9
 8010e08:	3230      	adds	r2, #48	; 0x30
 8010e0a:	f808 2b01 	strb.w	r2, [r8], #1
 8010e0e:	45a0      	cmp	r8, r4
 8010e10:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010e14:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010e18:	d118      	bne.n	8010e4c <_dtoa_r+0x58c>
 8010e1a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010e1e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010e22:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e2a:	dc4d      	bgt.n	8010ec8 <_dtoa_r+0x608>
 8010e2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010e30:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e38:	f57f af33 	bpl.w	8010ca2 <_dtoa_r+0x3e2>
 8010e3c:	4688      	mov	r8, r1
 8010e3e:	3901      	subs	r1, #1
 8010e40:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010e44:	2b30      	cmp	r3, #48	; 0x30
 8010e46:	d0f9      	beq.n	8010e3c <_dtoa_r+0x57c>
 8010e48:	46bb      	mov	fp, r7
 8010e4a:	e02a      	b.n	8010ea2 <_dtoa_r+0x5e2>
 8010e4c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010e50:	e7d6      	b.n	8010e00 <_dtoa_r+0x540>
 8010e52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e56:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010e5a:	f8dd 8000 	ldr.w	r8, [sp]
 8010e5e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010e62:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010e66:	ee15 3a10 	vmov	r3, s10
 8010e6a:	3330      	adds	r3, #48	; 0x30
 8010e6c:	f808 3b01 	strb.w	r3, [r8], #1
 8010e70:	9b00      	ldr	r3, [sp, #0]
 8010e72:	eba8 0303 	sub.w	r3, r8, r3
 8010e76:	4599      	cmp	r9, r3
 8010e78:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010e7c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010e80:	d133      	bne.n	8010eea <_dtoa_r+0x62a>
 8010e82:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010e86:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8e:	dc1a      	bgt.n	8010ec6 <_dtoa_r+0x606>
 8010e90:	eeb4 7b46 	vcmp.f64	d7, d6
 8010e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e98:	d103      	bne.n	8010ea2 <_dtoa_r+0x5e2>
 8010e9a:	ee15 3a10 	vmov	r3, s10
 8010e9e:	07d9      	lsls	r1, r3, #31
 8010ea0:	d411      	bmi.n	8010ec6 <_dtoa_r+0x606>
 8010ea2:	4629      	mov	r1, r5
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	f000 fd07 	bl	80118b8 <_Bfree>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010eae:	f888 3000 	strb.w	r3, [r8]
 8010eb2:	f10b 0301 	add.w	r3, fp, #1
 8010eb6:	6013      	str	r3, [r2, #0]
 8010eb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f43f ad4d 	beq.w	801095a <_dtoa_r+0x9a>
 8010ec0:	f8c3 8000 	str.w	r8, [r3]
 8010ec4:	e549      	b.n	801095a <_dtoa_r+0x9a>
 8010ec6:	465f      	mov	r7, fp
 8010ec8:	4643      	mov	r3, r8
 8010eca:	4698      	mov	r8, r3
 8010ecc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ed0:	2a39      	cmp	r2, #57	; 0x39
 8010ed2:	d106      	bne.n	8010ee2 <_dtoa_r+0x622>
 8010ed4:	9a00      	ldr	r2, [sp, #0]
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d1f7      	bne.n	8010eca <_dtoa_r+0x60a>
 8010eda:	9900      	ldr	r1, [sp, #0]
 8010edc:	2230      	movs	r2, #48	; 0x30
 8010ede:	3701      	adds	r7, #1
 8010ee0:	700a      	strb	r2, [r1, #0]
 8010ee2:	781a      	ldrb	r2, [r3, #0]
 8010ee4:	3201      	adds	r2, #1
 8010ee6:	701a      	strb	r2, [r3, #0]
 8010ee8:	e7ae      	b.n	8010e48 <_dtoa_r+0x588>
 8010eea:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010eee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef6:	d1b2      	bne.n	8010e5e <_dtoa_r+0x59e>
 8010ef8:	e7d3      	b.n	8010ea2 <_dtoa_r+0x5e2>
 8010efa:	bf00      	nop
 8010efc:	080131d0 	.word	0x080131d0
 8010f00:	080131a8 	.word	0x080131a8
 8010f04:	9908      	ldr	r1, [sp, #32]
 8010f06:	2900      	cmp	r1, #0
 8010f08:	f000 80d1 	beq.w	80110ae <_dtoa_r+0x7ee>
 8010f0c:	9907      	ldr	r1, [sp, #28]
 8010f0e:	2901      	cmp	r1, #1
 8010f10:	f300 80b4 	bgt.w	801107c <_dtoa_r+0x7bc>
 8010f14:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010f16:	2900      	cmp	r1, #0
 8010f18:	f000 80ac 	beq.w	8011074 <_dtoa_r+0x7b4>
 8010f1c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010f20:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010f24:	461c      	mov	r4, r3
 8010f26:	930a      	str	r3, [sp, #40]	; 0x28
 8010f28:	9b05      	ldr	r3, [sp, #20]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	9305      	str	r3, [sp, #20]
 8010f2e:	9b06      	ldr	r3, [sp, #24]
 8010f30:	2101      	movs	r1, #1
 8010f32:	4413      	add	r3, r2
 8010f34:	4630      	mov	r0, r6
 8010f36:	9306      	str	r3, [sp, #24]
 8010f38:	f000 fd7a 	bl	8011a30 <__i2b>
 8010f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f3e:	4607      	mov	r7, r0
 8010f40:	f1b8 0f00 	cmp.w	r8, #0
 8010f44:	dd0d      	ble.n	8010f62 <_dtoa_r+0x6a2>
 8010f46:	9a06      	ldr	r2, [sp, #24]
 8010f48:	2a00      	cmp	r2, #0
 8010f4a:	dd0a      	ble.n	8010f62 <_dtoa_r+0x6a2>
 8010f4c:	4542      	cmp	r2, r8
 8010f4e:	9905      	ldr	r1, [sp, #20]
 8010f50:	bfa8      	it	ge
 8010f52:	4642      	movge	r2, r8
 8010f54:	1a89      	subs	r1, r1, r2
 8010f56:	9105      	str	r1, [sp, #20]
 8010f58:	9906      	ldr	r1, [sp, #24]
 8010f5a:	eba8 0802 	sub.w	r8, r8, r2
 8010f5e:	1a8a      	subs	r2, r1, r2
 8010f60:	9206      	str	r2, [sp, #24]
 8010f62:	b303      	cbz	r3, 8010fa6 <_dtoa_r+0x6e6>
 8010f64:	9a08      	ldr	r2, [sp, #32]
 8010f66:	2a00      	cmp	r2, #0
 8010f68:	f000 80a6 	beq.w	80110b8 <_dtoa_r+0x7f8>
 8010f6c:	2c00      	cmp	r4, #0
 8010f6e:	dd13      	ble.n	8010f98 <_dtoa_r+0x6d8>
 8010f70:	4639      	mov	r1, r7
 8010f72:	4622      	mov	r2, r4
 8010f74:	4630      	mov	r0, r6
 8010f76:	930c      	str	r3, [sp, #48]	; 0x30
 8010f78:	f000 fe16 	bl	8011ba8 <__pow5mult>
 8010f7c:	462a      	mov	r2, r5
 8010f7e:	4601      	mov	r1, r0
 8010f80:	4607      	mov	r7, r0
 8010f82:	4630      	mov	r0, r6
 8010f84:	f000 fd6a 	bl	8011a5c <__multiply>
 8010f88:	4629      	mov	r1, r5
 8010f8a:	900a      	str	r0, [sp, #40]	; 0x28
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	f000 fc93 	bl	80118b8 <_Bfree>
 8010f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f96:	4615      	mov	r5, r2
 8010f98:	1b1a      	subs	r2, r3, r4
 8010f9a:	d004      	beq.n	8010fa6 <_dtoa_r+0x6e6>
 8010f9c:	4629      	mov	r1, r5
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	f000 fe02 	bl	8011ba8 <__pow5mult>
 8010fa4:	4605      	mov	r5, r0
 8010fa6:	2101      	movs	r1, #1
 8010fa8:	4630      	mov	r0, r6
 8010faa:	f000 fd41 	bl	8011a30 <__i2b>
 8010fae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	f340 8082 	ble.w	80110bc <_dtoa_r+0x7fc>
 8010fb8:	461a      	mov	r2, r3
 8010fba:	4601      	mov	r1, r0
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	f000 fdf3 	bl	8011ba8 <__pow5mult>
 8010fc2:	9b07      	ldr	r3, [sp, #28]
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	4604      	mov	r4, r0
 8010fc8:	dd7b      	ble.n	80110c2 <_dtoa_r+0x802>
 8010fca:	2300      	movs	r3, #0
 8010fcc:	930a      	str	r3, [sp, #40]	; 0x28
 8010fce:	6922      	ldr	r2, [r4, #16]
 8010fd0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010fd4:	6910      	ldr	r0, [r2, #16]
 8010fd6:	f000 fcdb 	bl	8011990 <__hi0bits>
 8010fda:	f1c0 0020 	rsb	r0, r0, #32
 8010fde:	9b06      	ldr	r3, [sp, #24]
 8010fe0:	4418      	add	r0, r3
 8010fe2:	f010 001f 	ands.w	r0, r0, #31
 8010fe6:	f000 808d 	beq.w	8011104 <_dtoa_r+0x844>
 8010fea:	f1c0 0220 	rsb	r2, r0, #32
 8010fee:	2a04      	cmp	r2, #4
 8010ff0:	f340 8086 	ble.w	8011100 <_dtoa_r+0x840>
 8010ff4:	f1c0 001c 	rsb	r0, r0, #28
 8010ff8:	9b05      	ldr	r3, [sp, #20]
 8010ffa:	4403      	add	r3, r0
 8010ffc:	9305      	str	r3, [sp, #20]
 8010ffe:	9b06      	ldr	r3, [sp, #24]
 8011000:	4403      	add	r3, r0
 8011002:	4480      	add	r8, r0
 8011004:	9306      	str	r3, [sp, #24]
 8011006:	9b05      	ldr	r3, [sp, #20]
 8011008:	2b00      	cmp	r3, #0
 801100a:	dd05      	ble.n	8011018 <_dtoa_r+0x758>
 801100c:	4629      	mov	r1, r5
 801100e:	461a      	mov	r2, r3
 8011010:	4630      	mov	r0, r6
 8011012:	f000 fe23 	bl	8011c5c <__lshift>
 8011016:	4605      	mov	r5, r0
 8011018:	9b06      	ldr	r3, [sp, #24]
 801101a:	2b00      	cmp	r3, #0
 801101c:	dd05      	ble.n	801102a <_dtoa_r+0x76a>
 801101e:	4621      	mov	r1, r4
 8011020:	461a      	mov	r2, r3
 8011022:	4630      	mov	r0, r6
 8011024:	f000 fe1a 	bl	8011c5c <__lshift>
 8011028:	4604      	mov	r4, r0
 801102a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801102c:	2b00      	cmp	r3, #0
 801102e:	d06b      	beq.n	8011108 <_dtoa_r+0x848>
 8011030:	4621      	mov	r1, r4
 8011032:	4628      	mov	r0, r5
 8011034:	f000 fe7e 	bl	8011d34 <__mcmp>
 8011038:	2800      	cmp	r0, #0
 801103a:	da65      	bge.n	8011108 <_dtoa_r+0x848>
 801103c:	2300      	movs	r3, #0
 801103e:	4629      	mov	r1, r5
 8011040:	220a      	movs	r2, #10
 8011042:	4630      	mov	r0, r6
 8011044:	f000 fc5a 	bl	80118fc <__multadd>
 8011048:	9b08      	ldr	r3, [sp, #32]
 801104a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801104e:	4605      	mov	r5, r0
 8011050:	2b00      	cmp	r3, #0
 8011052:	f000 8192 	beq.w	801137a <_dtoa_r+0xaba>
 8011056:	4639      	mov	r1, r7
 8011058:	2300      	movs	r3, #0
 801105a:	220a      	movs	r2, #10
 801105c:	4630      	mov	r0, r6
 801105e:	f000 fc4d 	bl	80118fc <__multadd>
 8011062:	f1ba 0f00 	cmp.w	sl, #0
 8011066:	4607      	mov	r7, r0
 8011068:	f300 808e 	bgt.w	8011188 <_dtoa_r+0x8c8>
 801106c:	9b07      	ldr	r3, [sp, #28]
 801106e:	2b02      	cmp	r3, #2
 8011070:	dc51      	bgt.n	8011116 <_dtoa_r+0x856>
 8011072:	e089      	b.n	8011188 <_dtoa_r+0x8c8>
 8011074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011076:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801107a:	e751      	b.n	8010f20 <_dtoa_r+0x660>
 801107c:	f109 34ff 	add.w	r4, r9, #4294967295
 8011080:	42a3      	cmp	r3, r4
 8011082:	bfbf      	itttt	lt
 8011084:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8011086:	1ae3      	sublt	r3, r4, r3
 8011088:	18d2      	addlt	r2, r2, r3
 801108a:	4613      	movlt	r3, r2
 801108c:	bfb7      	itett	lt
 801108e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011090:	1b1c      	subge	r4, r3, r4
 8011092:	4623      	movlt	r3, r4
 8011094:	2400      	movlt	r4, #0
 8011096:	f1b9 0f00 	cmp.w	r9, #0
 801109a:	bfb5      	itete	lt
 801109c:	9a05      	ldrlt	r2, [sp, #20]
 801109e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80110a2:	eba2 0809 	sublt.w	r8, r2, r9
 80110a6:	464a      	movge	r2, r9
 80110a8:	bfb8      	it	lt
 80110aa:	2200      	movlt	r2, #0
 80110ac:	e73b      	b.n	8010f26 <_dtoa_r+0x666>
 80110ae:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80110b2:	9f08      	ldr	r7, [sp, #32]
 80110b4:	461c      	mov	r4, r3
 80110b6:	e743      	b.n	8010f40 <_dtoa_r+0x680>
 80110b8:	461a      	mov	r2, r3
 80110ba:	e76f      	b.n	8010f9c <_dtoa_r+0x6dc>
 80110bc:	9b07      	ldr	r3, [sp, #28]
 80110be:	2b01      	cmp	r3, #1
 80110c0:	dc18      	bgt.n	80110f4 <_dtoa_r+0x834>
 80110c2:	9b02      	ldr	r3, [sp, #8]
 80110c4:	b9b3      	cbnz	r3, 80110f4 <_dtoa_r+0x834>
 80110c6:	9b03      	ldr	r3, [sp, #12]
 80110c8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80110cc:	b9a2      	cbnz	r2, 80110f8 <_dtoa_r+0x838>
 80110ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80110d2:	0d12      	lsrs	r2, r2, #20
 80110d4:	0512      	lsls	r2, r2, #20
 80110d6:	b18a      	cbz	r2, 80110fc <_dtoa_r+0x83c>
 80110d8:	9b05      	ldr	r3, [sp, #20]
 80110da:	3301      	adds	r3, #1
 80110dc:	9305      	str	r3, [sp, #20]
 80110de:	9b06      	ldr	r3, [sp, #24]
 80110e0:	3301      	adds	r3, #1
 80110e2:	9306      	str	r3, [sp, #24]
 80110e4:	2301      	movs	r3, #1
 80110e6:	930a      	str	r3, [sp, #40]	; 0x28
 80110e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f47f af6f 	bne.w	8010fce <_dtoa_r+0x70e>
 80110f0:	2001      	movs	r0, #1
 80110f2:	e774      	b.n	8010fde <_dtoa_r+0x71e>
 80110f4:	2300      	movs	r3, #0
 80110f6:	e7f6      	b.n	80110e6 <_dtoa_r+0x826>
 80110f8:	9b02      	ldr	r3, [sp, #8]
 80110fa:	e7f4      	b.n	80110e6 <_dtoa_r+0x826>
 80110fc:	920a      	str	r2, [sp, #40]	; 0x28
 80110fe:	e7f3      	b.n	80110e8 <_dtoa_r+0x828>
 8011100:	d081      	beq.n	8011006 <_dtoa_r+0x746>
 8011102:	4610      	mov	r0, r2
 8011104:	301c      	adds	r0, #28
 8011106:	e777      	b.n	8010ff8 <_dtoa_r+0x738>
 8011108:	f1b9 0f00 	cmp.w	r9, #0
 801110c:	dc37      	bgt.n	801117e <_dtoa_r+0x8be>
 801110e:	9b07      	ldr	r3, [sp, #28]
 8011110:	2b02      	cmp	r3, #2
 8011112:	dd34      	ble.n	801117e <_dtoa_r+0x8be>
 8011114:	46ca      	mov	sl, r9
 8011116:	f1ba 0f00 	cmp.w	sl, #0
 801111a:	d10d      	bne.n	8011138 <_dtoa_r+0x878>
 801111c:	4621      	mov	r1, r4
 801111e:	4653      	mov	r3, sl
 8011120:	2205      	movs	r2, #5
 8011122:	4630      	mov	r0, r6
 8011124:	f000 fbea 	bl	80118fc <__multadd>
 8011128:	4601      	mov	r1, r0
 801112a:	4604      	mov	r4, r0
 801112c:	4628      	mov	r0, r5
 801112e:	f000 fe01 	bl	8011d34 <__mcmp>
 8011132:	2800      	cmp	r0, #0
 8011134:	f73f adde 	bgt.w	8010cf4 <_dtoa_r+0x434>
 8011138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801113a:	f8dd 8000 	ldr.w	r8, [sp]
 801113e:	ea6f 0b03 	mvn.w	fp, r3
 8011142:	f04f 0900 	mov.w	r9, #0
 8011146:	4621      	mov	r1, r4
 8011148:	4630      	mov	r0, r6
 801114a:	f000 fbb5 	bl	80118b8 <_Bfree>
 801114e:	2f00      	cmp	r7, #0
 8011150:	f43f aea7 	beq.w	8010ea2 <_dtoa_r+0x5e2>
 8011154:	f1b9 0f00 	cmp.w	r9, #0
 8011158:	d005      	beq.n	8011166 <_dtoa_r+0x8a6>
 801115a:	45b9      	cmp	r9, r7
 801115c:	d003      	beq.n	8011166 <_dtoa_r+0x8a6>
 801115e:	4649      	mov	r1, r9
 8011160:	4630      	mov	r0, r6
 8011162:	f000 fba9 	bl	80118b8 <_Bfree>
 8011166:	4639      	mov	r1, r7
 8011168:	4630      	mov	r0, r6
 801116a:	f000 fba5 	bl	80118b8 <_Bfree>
 801116e:	e698      	b.n	8010ea2 <_dtoa_r+0x5e2>
 8011170:	2400      	movs	r4, #0
 8011172:	4627      	mov	r7, r4
 8011174:	e7e0      	b.n	8011138 <_dtoa_r+0x878>
 8011176:	46bb      	mov	fp, r7
 8011178:	4604      	mov	r4, r0
 801117a:	4607      	mov	r7, r0
 801117c:	e5ba      	b.n	8010cf4 <_dtoa_r+0x434>
 801117e:	9b08      	ldr	r3, [sp, #32]
 8011180:	46ca      	mov	sl, r9
 8011182:	2b00      	cmp	r3, #0
 8011184:	f000 8100 	beq.w	8011388 <_dtoa_r+0xac8>
 8011188:	f1b8 0f00 	cmp.w	r8, #0
 801118c:	dd05      	ble.n	801119a <_dtoa_r+0x8da>
 801118e:	4639      	mov	r1, r7
 8011190:	4642      	mov	r2, r8
 8011192:	4630      	mov	r0, r6
 8011194:	f000 fd62 	bl	8011c5c <__lshift>
 8011198:	4607      	mov	r7, r0
 801119a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801119c:	2b00      	cmp	r3, #0
 801119e:	d05d      	beq.n	801125c <_dtoa_r+0x99c>
 80111a0:	6879      	ldr	r1, [r7, #4]
 80111a2:	4630      	mov	r0, r6
 80111a4:	f000 fb48 	bl	8011838 <_Balloc>
 80111a8:	4680      	mov	r8, r0
 80111aa:	b928      	cbnz	r0, 80111b8 <_dtoa_r+0x8f8>
 80111ac:	4b82      	ldr	r3, [pc, #520]	; (80113b8 <_dtoa_r+0xaf8>)
 80111ae:	4602      	mov	r2, r0
 80111b0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80111b4:	f7ff bb9a 	b.w	80108ec <_dtoa_r+0x2c>
 80111b8:	693a      	ldr	r2, [r7, #16]
 80111ba:	3202      	adds	r2, #2
 80111bc:	0092      	lsls	r2, r2, #2
 80111be:	f107 010c 	add.w	r1, r7, #12
 80111c2:	300c      	adds	r0, #12
 80111c4:	f000 fb2a 	bl	801181c <memcpy>
 80111c8:	2201      	movs	r2, #1
 80111ca:	4641      	mov	r1, r8
 80111cc:	4630      	mov	r0, r6
 80111ce:	f000 fd45 	bl	8011c5c <__lshift>
 80111d2:	9b00      	ldr	r3, [sp, #0]
 80111d4:	3301      	adds	r3, #1
 80111d6:	9305      	str	r3, [sp, #20]
 80111d8:	9b00      	ldr	r3, [sp, #0]
 80111da:	4453      	add	r3, sl
 80111dc:	9309      	str	r3, [sp, #36]	; 0x24
 80111de:	9b02      	ldr	r3, [sp, #8]
 80111e0:	f003 0301 	and.w	r3, r3, #1
 80111e4:	46b9      	mov	r9, r7
 80111e6:	9308      	str	r3, [sp, #32]
 80111e8:	4607      	mov	r7, r0
 80111ea:	9b05      	ldr	r3, [sp, #20]
 80111ec:	4621      	mov	r1, r4
 80111ee:	3b01      	subs	r3, #1
 80111f0:	4628      	mov	r0, r5
 80111f2:	9302      	str	r3, [sp, #8]
 80111f4:	f7ff fad8 	bl	80107a8 <quorem>
 80111f8:	4603      	mov	r3, r0
 80111fa:	3330      	adds	r3, #48	; 0x30
 80111fc:	9006      	str	r0, [sp, #24]
 80111fe:	4649      	mov	r1, r9
 8011200:	4628      	mov	r0, r5
 8011202:	930a      	str	r3, [sp, #40]	; 0x28
 8011204:	f000 fd96 	bl	8011d34 <__mcmp>
 8011208:	463a      	mov	r2, r7
 801120a:	4682      	mov	sl, r0
 801120c:	4621      	mov	r1, r4
 801120e:	4630      	mov	r0, r6
 8011210:	f000 fdac 	bl	8011d6c <__mdiff>
 8011214:	68c2      	ldr	r2, [r0, #12]
 8011216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011218:	4680      	mov	r8, r0
 801121a:	bb0a      	cbnz	r2, 8011260 <_dtoa_r+0x9a0>
 801121c:	4601      	mov	r1, r0
 801121e:	4628      	mov	r0, r5
 8011220:	f000 fd88 	bl	8011d34 <__mcmp>
 8011224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011226:	4602      	mov	r2, r0
 8011228:	4641      	mov	r1, r8
 801122a:	4630      	mov	r0, r6
 801122c:	920e      	str	r2, [sp, #56]	; 0x38
 801122e:	930a      	str	r3, [sp, #40]	; 0x28
 8011230:	f000 fb42 	bl	80118b8 <_Bfree>
 8011234:	9b07      	ldr	r3, [sp, #28]
 8011236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011238:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801123c:	ea43 0102 	orr.w	r1, r3, r2
 8011240:	9b08      	ldr	r3, [sp, #32]
 8011242:	430b      	orrs	r3, r1
 8011244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011246:	d10d      	bne.n	8011264 <_dtoa_r+0x9a4>
 8011248:	2b39      	cmp	r3, #57	; 0x39
 801124a:	d029      	beq.n	80112a0 <_dtoa_r+0x9e0>
 801124c:	f1ba 0f00 	cmp.w	sl, #0
 8011250:	dd01      	ble.n	8011256 <_dtoa_r+0x996>
 8011252:	9b06      	ldr	r3, [sp, #24]
 8011254:	3331      	adds	r3, #49	; 0x31
 8011256:	9a02      	ldr	r2, [sp, #8]
 8011258:	7013      	strb	r3, [r2, #0]
 801125a:	e774      	b.n	8011146 <_dtoa_r+0x886>
 801125c:	4638      	mov	r0, r7
 801125e:	e7b8      	b.n	80111d2 <_dtoa_r+0x912>
 8011260:	2201      	movs	r2, #1
 8011262:	e7e1      	b.n	8011228 <_dtoa_r+0x968>
 8011264:	f1ba 0f00 	cmp.w	sl, #0
 8011268:	db06      	blt.n	8011278 <_dtoa_r+0x9b8>
 801126a:	9907      	ldr	r1, [sp, #28]
 801126c:	ea41 0a0a 	orr.w	sl, r1, sl
 8011270:	9908      	ldr	r1, [sp, #32]
 8011272:	ea5a 0101 	orrs.w	r1, sl, r1
 8011276:	d120      	bne.n	80112ba <_dtoa_r+0x9fa>
 8011278:	2a00      	cmp	r2, #0
 801127a:	ddec      	ble.n	8011256 <_dtoa_r+0x996>
 801127c:	4629      	mov	r1, r5
 801127e:	2201      	movs	r2, #1
 8011280:	4630      	mov	r0, r6
 8011282:	9305      	str	r3, [sp, #20]
 8011284:	f000 fcea 	bl	8011c5c <__lshift>
 8011288:	4621      	mov	r1, r4
 801128a:	4605      	mov	r5, r0
 801128c:	f000 fd52 	bl	8011d34 <__mcmp>
 8011290:	2800      	cmp	r0, #0
 8011292:	9b05      	ldr	r3, [sp, #20]
 8011294:	dc02      	bgt.n	801129c <_dtoa_r+0x9dc>
 8011296:	d1de      	bne.n	8011256 <_dtoa_r+0x996>
 8011298:	07da      	lsls	r2, r3, #31
 801129a:	d5dc      	bpl.n	8011256 <_dtoa_r+0x996>
 801129c:	2b39      	cmp	r3, #57	; 0x39
 801129e:	d1d8      	bne.n	8011252 <_dtoa_r+0x992>
 80112a0:	9a02      	ldr	r2, [sp, #8]
 80112a2:	2339      	movs	r3, #57	; 0x39
 80112a4:	7013      	strb	r3, [r2, #0]
 80112a6:	4643      	mov	r3, r8
 80112a8:	4698      	mov	r8, r3
 80112aa:	3b01      	subs	r3, #1
 80112ac:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80112b0:	2a39      	cmp	r2, #57	; 0x39
 80112b2:	d051      	beq.n	8011358 <_dtoa_r+0xa98>
 80112b4:	3201      	adds	r2, #1
 80112b6:	701a      	strb	r2, [r3, #0]
 80112b8:	e745      	b.n	8011146 <_dtoa_r+0x886>
 80112ba:	2a00      	cmp	r2, #0
 80112bc:	dd03      	ble.n	80112c6 <_dtoa_r+0xa06>
 80112be:	2b39      	cmp	r3, #57	; 0x39
 80112c0:	d0ee      	beq.n	80112a0 <_dtoa_r+0x9e0>
 80112c2:	3301      	adds	r3, #1
 80112c4:	e7c7      	b.n	8011256 <_dtoa_r+0x996>
 80112c6:	9a05      	ldr	r2, [sp, #20]
 80112c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112ca:	f802 3c01 	strb.w	r3, [r2, #-1]
 80112ce:	428a      	cmp	r2, r1
 80112d0:	d02b      	beq.n	801132a <_dtoa_r+0xa6a>
 80112d2:	4629      	mov	r1, r5
 80112d4:	2300      	movs	r3, #0
 80112d6:	220a      	movs	r2, #10
 80112d8:	4630      	mov	r0, r6
 80112da:	f000 fb0f 	bl	80118fc <__multadd>
 80112de:	45b9      	cmp	r9, r7
 80112e0:	4605      	mov	r5, r0
 80112e2:	f04f 0300 	mov.w	r3, #0
 80112e6:	f04f 020a 	mov.w	r2, #10
 80112ea:	4649      	mov	r1, r9
 80112ec:	4630      	mov	r0, r6
 80112ee:	d107      	bne.n	8011300 <_dtoa_r+0xa40>
 80112f0:	f000 fb04 	bl	80118fc <__multadd>
 80112f4:	4681      	mov	r9, r0
 80112f6:	4607      	mov	r7, r0
 80112f8:	9b05      	ldr	r3, [sp, #20]
 80112fa:	3301      	adds	r3, #1
 80112fc:	9305      	str	r3, [sp, #20]
 80112fe:	e774      	b.n	80111ea <_dtoa_r+0x92a>
 8011300:	f000 fafc 	bl	80118fc <__multadd>
 8011304:	4639      	mov	r1, r7
 8011306:	4681      	mov	r9, r0
 8011308:	2300      	movs	r3, #0
 801130a:	220a      	movs	r2, #10
 801130c:	4630      	mov	r0, r6
 801130e:	f000 faf5 	bl	80118fc <__multadd>
 8011312:	4607      	mov	r7, r0
 8011314:	e7f0      	b.n	80112f8 <_dtoa_r+0xa38>
 8011316:	f1ba 0f00 	cmp.w	sl, #0
 801131a:	9a00      	ldr	r2, [sp, #0]
 801131c:	bfcc      	ite	gt
 801131e:	46d0      	movgt	r8, sl
 8011320:	f04f 0801 	movle.w	r8, #1
 8011324:	4490      	add	r8, r2
 8011326:	f04f 0900 	mov.w	r9, #0
 801132a:	4629      	mov	r1, r5
 801132c:	2201      	movs	r2, #1
 801132e:	4630      	mov	r0, r6
 8011330:	9302      	str	r3, [sp, #8]
 8011332:	f000 fc93 	bl	8011c5c <__lshift>
 8011336:	4621      	mov	r1, r4
 8011338:	4605      	mov	r5, r0
 801133a:	f000 fcfb 	bl	8011d34 <__mcmp>
 801133e:	2800      	cmp	r0, #0
 8011340:	dcb1      	bgt.n	80112a6 <_dtoa_r+0x9e6>
 8011342:	d102      	bne.n	801134a <_dtoa_r+0xa8a>
 8011344:	9b02      	ldr	r3, [sp, #8]
 8011346:	07db      	lsls	r3, r3, #31
 8011348:	d4ad      	bmi.n	80112a6 <_dtoa_r+0x9e6>
 801134a:	4643      	mov	r3, r8
 801134c:	4698      	mov	r8, r3
 801134e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011352:	2a30      	cmp	r2, #48	; 0x30
 8011354:	d0fa      	beq.n	801134c <_dtoa_r+0xa8c>
 8011356:	e6f6      	b.n	8011146 <_dtoa_r+0x886>
 8011358:	9a00      	ldr	r2, [sp, #0]
 801135a:	429a      	cmp	r2, r3
 801135c:	d1a4      	bne.n	80112a8 <_dtoa_r+0x9e8>
 801135e:	f10b 0b01 	add.w	fp, fp, #1
 8011362:	2331      	movs	r3, #49	; 0x31
 8011364:	e778      	b.n	8011258 <_dtoa_r+0x998>
 8011366:	4b15      	ldr	r3, [pc, #84]	; (80113bc <_dtoa_r+0xafc>)
 8011368:	f7ff bb12 	b.w	8010990 <_dtoa_r+0xd0>
 801136c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801136e:	2b00      	cmp	r3, #0
 8011370:	f47f aaee 	bne.w	8010950 <_dtoa_r+0x90>
 8011374:	4b12      	ldr	r3, [pc, #72]	; (80113c0 <_dtoa_r+0xb00>)
 8011376:	f7ff bb0b 	b.w	8010990 <_dtoa_r+0xd0>
 801137a:	f1ba 0f00 	cmp.w	sl, #0
 801137e:	dc03      	bgt.n	8011388 <_dtoa_r+0xac8>
 8011380:	9b07      	ldr	r3, [sp, #28]
 8011382:	2b02      	cmp	r3, #2
 8011384:	f73f aec7 	bgt.w	8011116 <_dtoa_r+0x856>
 8011388:	f8dd 8000 	ldr.w	r8, [sp]
 801138c:	4621      	mov	r1, r4
 801138e:	4628      	mov	r0, r5
 8011390:	f7ff fa0a 	bl	80107a8 <quorem>
 8011394:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011398:	f808 3b01 	strb.w	r3, [r8], #1
 801139c:	9a00      	ldr	r2, [sp, #0]
 801139e:	eba8 0202 	sub.w	r2, r8, r2
 80113a2:	4592      	cmp	sl, r2
 80113a4:	ddb7      	ble.n	8011316 <_dtoa_r+0xa56>
 80113a6:	4629      	mov	r1, r5
 80113a8:	2300      	movs	r3, #0
 80113aa:	220a      	movs	r2, #10
 80113ac:	4630      	mov	r0, r6
 80113ae:	f000 faa5 	bl	80118fc <__multadd>
 80113b2:	4605      	mov	r5, r0
 80113b4:	e7ea      	b.n	801138c <_dtoa_r+0xacc>
 80113b6:	bf00      	nop
 80113b8:	080130d7 	.word	0x080130d7
 80113bc:	08013030 	.word	0x08013030
 80113c0:	08013054 	.word	0x08013054

080113c4 <__sflush_r>:
 80113c4:	898a      	ldrh	r2, [r1, #12]
 80113c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ca:	4605      	mov	r5, r0
 80113cc:	0710      	lsls	r0, r2, #28
 80113ce:	460c      	mov	r4, r1
 80113d0:	d458      	bmi.n	8011484 <__sflush_r+0xc0>
 80113d2:	684b      	ldr	r3, [r1, #4]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	dc05      	bgt.n	80113e4 <__sflush_r+0x20>
 80113d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80113da:	2b00      	cmp	r3, #0
 80113dc:	dc02      	bgt.n	80113e4 <__sflush_r+0x20>
 80113de:	2000      	movs	r0, #0
 80113e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113e6:	2e00      	cmp	r6, #0
 80113e8:	d0f9      	beq.n	80113de <__sflush_r+0x1a>
 80113ea:	2300      	movs	r3, #0
 80113ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80113f0:	682f      	ldr	r7, [r5, #0]
 80113f2:	602b      	str	r3, [r5, #0]
 80113f4:	d032      	beq.n	801145c <__sflush_r+0x98>
 80113f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80113f8:	89a3      	ldrh	r3, [r4, #12]
 80113fa:	075a      	lsls	r2, r3, #29
 80113fc:	d505      	bpl.n	801140a <__sflush_r+0x46>
 80113fe:	6863      	ldr	r3, [r4, #4]
 8011400:	1ac0      	subs	r0, r0, r3
 8011402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011404:	b10b      	cbz	r3, 801140a <__sflush_r+0x46>
 8011406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011408:	1ac0      	subs	r0, r0, r3
 801140a:	2300      	movs	r3, #0
 801140c:	4602      	mov	r2, r0
 801140e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011410:	6a21      	ldr	r1, [r4, #32]
 8011412:	4628      	mov	r0, r5
 8011414:	47b0      	blx	r6
 8011416:	1c43      	adds	r3, r0, #1
 8011418:	89a3      	ldrh	r3, [r4, #12]
 801141a:	d106      	bne.n	801142a <__sflush_r+0x66>
 801141c:	6829      	ldr	r1, [r5, #0]
 801141e:	291d      	cmp	r1, #29
 8011420:	d82c      	bhi.n	801147c <__sflush_r+0xb8>
 8011422:	4a2a      	ldr	r2, [pc, #168]	; (80114cc <__sflush_r+0x108>)
 8011424:	40ca      	lsrs	r2, r1
 8011426:	07d6      	lsls	r6, r2, #31
 8011428:	d528      	bpl.n	801147c <__sflush_r+0xb8>
 801142a:	2200      	movs	r2, #0
 801142c:	6062      	str	r2, [r4, #4]
 801142e:	04d9      	lsls	r1, r3, #19
 8011430:	6922      	ldr	r2, [r4, #16]
 8011432:	6022      	str	r2, [r4, #0]
 8011434:	d504      	bpl.n	8011440 <__sflush_r+0x7c>
 8011436:	1c42      	adds	r2, r0, #1
 8011438:	d101      	bne.n	801143e <__sflush_r+0x7a>
 801143a:	682b      	ldr	r3, [r5, #0]
 801143c:	b903      	cbnz	r3, 8011440 <__sflush_r+0x7c>
 801143e:	6560      	str	r0, [r4, #84]	; 0x54
 8011440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011442:	602f      	str	r7, [r5, #0]
 8011444:	2900      	cmp	r1, #0
 8011446:	d0ca      	beq.n	80113de <__sflush_r+0x1a>
 8011448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801144c:	4299      	cmp	r1, r3
 801144e:	d002      	beq.n	8011456 <__sflush_r+0x92>
 8011450:	4628      	mov	r0, r5
 8011452:	f000 fd7f 	bl	8011f54 <_free_r>
 8011456:	2000      	movs	r0, #0
 8011458:	6360      	str	r0, [r4, #52]	; 0x34
 801145a:	e7c1      	b.n	80113e0 <__sflush_r+0x1c>
 801145c:	6a21      	ldr	r1, [r4, #32]
 801145e:	2301      	movs	r3, #1
 8011460:	4628      	mov	r0, r5
 8011462:	47b0      	blx	r6
 8011464:	1c41      	adds	r1, r0, #1
 8011466:	d1c7      	bne.n	80113f8 <__sflush_r+0x34>
 8011468:	682b      	ldr	r3, [r5, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d0c4      	beq.n	80113f8 <__sflush_r+0x34>
 801146e:	2b1d      	cmp	r3, #29
 8011470:	d001      	beq.n	8011476 <__sflush_r+0xb2>
 8011472:	2b16      	cmp	r3, #22
 8011474:	d101      	bne.n	801147a <__sflush_r+0xb6>
 8011476:	602f      	str	r7, [r5, #0]
 8011478:	e7b1      	b.n	80113de <__sflush_r+0x1a>
 801147a:	89a3      	ldrh	r3, [r4, #12]
 801147c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011480:	81a3      	strh	r3, [r4, #12]
 8011482:	e7ad      	b.n	80113e0 <__sflush_r+0x1c>
 8011484:	690f      	ldr	r7, [r1, #16]
 8011486:	2f00      	cmp	r7, #0
 8011488:	d0a9      	beq.n	80113de <__sflush_r+0x1a>
 801148a:	0793      	lsls	r3, r2, #30
 801148c:	680e      	ldr	r6, [r1, #0]
 801148e:	bf08      	it	eq
 8011490:	694b      	ldreq	r3, [r1, #20]
 8011492:	600f      	str	r7, [r1, #0]
 8011494:	bf18      	it	ne
 8011496:	2300      	movne	r3, #0
 8011498:	eba6 0807 	sub.w	r8, r6, r7
 801149c:	608b      	str	r3, [r1, #8]
 801149e:	f1b8 0f00 	cmp.w	r8, #0
 80114a2:	dd9c      	ble.n	80113de <__sflush_r+0x1a>
 80114a4:	6a21      	ldr	r1, [r4, #32]
 80114a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80114a8:	4643      	mov	r3, r8
 80114aa:	463a      	mov	r2, r7
 80114ac:	4628      	mov	r0, r5
 80114ae:	47b0      	blx	r6
 80114b0:	2800      	cmp	r0, #0
 80114b2:	dc06      	bgt.n	80114c2 <__sflush_r+0xfe>
 80114b4:	89a3      	ldrh	r3, [r4, #12]
 80114b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114ba:	81a3      	strh	r3, [r4, #12]
 80114bc:	f04f 30ff 	mov.w	r0, #4294967295
 80114c0:	e78e      	b.n	80113e0 <__sflush_r+0x1c>
 80114c2:	4407      	add	r7, r0
 80114c4:	eba8 0800 	sub.w	r8, r8, r0
 80114c8:	e7e9      	b.n	801149e <__sflush_r+0xda>
 80114ca:	bf00      	nop
 80114cc:	20400001 	.word	0x20400001

080114d0 <_fflush_r>:
 80114d0:	b538      	push	{r3, r4, r5, lr}
 80114d2:	690b      	ldr	r3, [r1, #16]
 80114d4:	4605      	mov	r5, r0
 80114d6:	460c      	mov	r4, r1
 80114d8:	b913      	cbnz	r3, 80114e0 <_fflush_r+0x10>
 80114da:	2500      	movs	r5, #0
 80114dc:	4628      	mov	r0, r5
 80114de:	bd38      	pop	{r3, r4, r5, pc}
 80114e0:	b118      	cbz	r0, 80114ea <_fflush_r+0x1a>
 80114e2:	6983      	ldr	r3, [r0, #24]
 80114e4:	b90b      	cbnz	r3, 80114ea <_fflush_r+0x1a>
 80114e6:	f000 f887 	bl	80115f8 <__sinit>
 80114ea:	4b14      	ldr	r3, [pc, #80]	; (801153c <_fflush_r+0x6c>)
 80114ec:	429c      	cmp	r4, r3
 80114ee:	d11b      	bne.n	8011528 <_fflush_r+0x58>
 80114f0:	686c      	ldr	r4, [r5, #4]
 80114f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d0ef      	beq.n	80114da <_fflush_r+0xa>
 80114fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80114fc:	07d0      	lsls	r0, r2, #31
 80114fe:	d404      	bmi.n	801150a <_fflush_r+0x3a>
 8011500:	0599      	lsls	r1, r3, #22
 8011502:	d402      	bmi.n	801150a <_fflush_r+0x3a>
 8011504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011506:	f000 f91a 	bl	801173e <__retarget_lock_acquire_recursive>
 801150a:	4628      	mov	r0, r5
 801150c:	4621      	mov	r1, r4
 801150e:	f7ff ff59 	bl	80113c4 <__sflush_r>
 8011512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011514:	07da      	lsls	r2, r3, #31
 8011516:	4605      	mov	r5, r0
 8011518:	d4e0      	bmi.n	80114dc <_fflush_r+0xc>
 801151a:	89a3      	ldrh	r3, [r4, #12]
 801151c:	059b      	lsls	r3, r3, #22
 801151e:	d4dd      	bmi.n	80114dc <_fflush_r+0xc>
 8011520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011522:	f000 f90d 	bl	8011740 <__retarget_lock_release_recursive>
 8011526:	e7d9      	b.n	80114dc <_fflush_r+0xc>
 8011528:	4b05      	ldr	r3, [pc, #20]	; (8011540 <_fflush_r+0x70>)
 801152a:	429c      	cmp	r4, r3
 801152c:	d101      	bne.n	8011532 <_fflush_r+0x62>
 801152e:	68ac      	ldr	r4, [r5, #8]
 8011530:	e7df      	b.n	80114f2 <_fflush_r+0x22>
 8011532:	4b04      	ldr	r3, [pc, #16]	; (8011544 <_fflush_r+0x74>)
 8011534:	429c      	cmp	r4, r3
 8011536:	bf08      	it	eq
 8011538:	68ec      	ldreq	r4, [r5, #12]
 801153a:	e7da      	b.n	80114f2 <_fflush_r+0x22>
 801153c:	08013108 	.word	0x08013108
 8011540:	08013128 	.word	0x08013128
 8011544:	080130e8 	.word	0x080130e8

08011548 <std>:
 8011548:	2300      	movs	r3, #0
 801154a:	b510      	push	{r4, lr}
 801154c:	4604      	mov	r4, r0
 801154e:	e9c0 3300 	strd	r3, r3, [r0]
 8011552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011556:	6083      	str	r3, [r0, #8]
 8011558:	8181      	strh	r1, [r0, #12]
 801155a:	6643      	str	r3, [r0, #100]	; 0x64
 801155c:	81c2      	strh	r2, [r0, #14]
 801155e:	6183      	str	r3, [r0, #24]
 8011560:	4619      	mov	r1, r3
 8011562:	2208      	movs	r2, #8
 8011564:	305c      	adds	r0, #92	; 0x5c
 8011566:	f7fe fb85 	bl	800fc74 <memset>
 801156a:	4b05      	ldr	r3, [pc, #20]	; (8011580 <std+0x38>)
 801156c:	6263      	str	r3, [r4, #36]	; 0x24
 801156e:	4b05      	ldr	r3, [pc, #20]	; (8011584 <std+0x3c>)
 8011570:	62a3      	str	r3, [r4, #40]	; 0x28
 8011572:	4b05      	ldr	r3, [pc, #20]	; (8011588 <std+0x40>)
 8011574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011576:	4b05      	ldr	r3, [pc, #20]	; (801158c <std+0x44>)
 8011578:	6224      	str	r4, [r4, #32]
 801157a:	6323      	str	r3, [r4, #48]	; 0x30
 801157c:	bd10      	pop	{r4, pc}
 801157e:	bf00      	nop
 8011580:	0801237d 	.word	0x0801237d
 8011584:	0801239f 	.word	0x0801239f
 8011588:	080123d7 	.word	0x080123d7
 801158c:	080123fb 	.word	0x080123fb

08011590 <_cleanup_r>:
 8011590:	4901      	ldr	r1, [pc, #4]	; (8011598 <_cleanup_r+0x8>)
 8011592:	f000 b8af 	b.w	80116f4 <_fwalk_reent>
 8011596:	bf00      	nop
 8011598:	080114d1 	.word	0x080114d1

0801159c <__sfmoreglue>:
 801159c:	b570      	push	{r4, r5, r6, lr}
 801159e:	1e4a      	subs	r2, r1, #1
 80115a0:	2568      	movs	r5, #104	; 0x68
 80115a2:	4355      	muls	r5, r2
 80115a4:	460e      	mov	r6, r1
 80115a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80115aa:	f000 fd23 	bl	8011ff4 <_malloc_r>
 80115ae:	4604      	mov	r4, r0
 80115b0:	b140      	cbz	r0, 80115c4 <__sfmoreglue+0x28>
 80115b2:	2100      	movs	r1, #0
 80115b4:	e9c0 1600 	strd	r1, r6, [r0]
 80115b8:	300c      	adds	r0, #12
 80115ba:	60a0      	str	r0, [r4, #8]
 80115bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80115c0:	f7fe fb58 	bl	800fc74 <memset>
 80115c4:	4620      	mov	r0, r4
 80115c6:	bd70      	pop	{r4, r5, r6, pc}

080115c8 <__sfp_lock_acquire>:
 80115c8:	4801      	ldr	r0, [pc, #4]	; (80115d0 <__sfp_lock_acquire+0x8>)
 80115ca:	f000 b8b8 	b.w	801173e <__retarget_lock_acquire_recursive>
 80115ce:	bf00      	nop
 80115d0:	240005cc 	.word	0x240005cc

080115d4 <__sfp_lock_release>:
 80115d4:	4801      	ldr	r0, [pc, #4]	; (80115dc <__sfp_lock_release+0x8>)
 80115d6:	f000 b8b3 	b.w	8011740 <__retarget_lock_release_recursive>
 80115da:	bf00      	nop
 80115dc:	240005cc 	.word	0x240005cc

080115e0 <__sinit_lock_acquire>:
 80115e0:	4801      	ldr	r0, [pc, #4]	; (80115e8 <__sinit_lock_acquire+0x8>)
 80115e2:	f000 b8ac 	b.w	801173e <__retarget_lock_acquire_recursive>
 80115e6:	bf00      	nop
 80115e8:	240005c7 	.word	0x240005c7

080115ec <__sinit_lock_release>:
 80115ec:	4801      	ldr	r0, [pc, #4]	; (80115f4 <__sinit_lock_release+0x8>)
 80115ee:	f000 b8a7 	b.w	8011740 <__retarget_lock_release_recursive>
 80115f2:	bf00      	nop
 80115f4:	240005c7 	.word	0x240005c7

080115f8 <__sinit>:
 80115f8:	b510      	push	{r4, lr}
 80115fa:	4604      	mov	r4, r0
 80115fc:	f7ff fff0 	bl	80115e0 <__sinit_lock_acquire>
 8011600:	69a3      	ldr	r3, [r4, #24]
 8011602:	b11b      	cbz	r3, 801160c <__sinit+0x14>
 8011604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011608:	f7ff bff0 	b.w	80115ec <__sinit_lock_release>
 801160c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011610:	6523      	str	r3, [r4, #80]	; 0x50
 8011612:	4b13      	ldr	r3, [pc, #76]	; (8011660 <__sinit+0x68>)
 8011614:	4a13      	ldr	r2, [pc, #76]	; (8011664 <__sinit+0x6c>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	62a2      	str	r2, [r4, #40]	; 0x28
 801161a:	42a3      	cmp	r3, r4
 801161c:	bf04      	itt	eq
 801161e:	2301      	moveq	r3, #1
 8011620:	61a3      	streq	r3, [r4, #24]
 8011622:	4620      	mov	r0, r4
 8011624:	f000 f820 	bl	8011668 <__sfp>
 8011628:	6060      	str	r0, [r4, #4]
 801162a:	4620      	mov	r0, r4
 801162c:	f000 f81c 	bl	8011668 <__sfp>
 8011630:	60a0      	str	r0, [r4, #8]
 8011632:	4620      	mov	r0, r4
 8011634:	f000 f818 	bl	8011668 <__sfp>
 8011638:	2200      	movs	r2, #0
 801163a:	60e0      	str	r0, [r4, #12]
 801163c:	2104      	movs	r1, #4
 801163e:	6860      	ldr	r0, [r4, #4]
 8011640:	f7ff ff82 	bl	8011548 <std>
 8011644:	68a0      	ldr	r0, [r4, #8]
 8011646:	2201      	movs	r2, #1
 8011648:	2109      	movs	r1, #9
 801164a:	f7ff ff7d 	bl	8011548 <std>
 801164e:	68e0      	ldr	r0, [r4, #12]
 8011650:	2202      	movs	r2, #2
 8011652:	2112      	movs	r1, #18
 8011654:	f7ff ff78 	bl	8011548 <std>
 8011658:	2301      	movs	r3, #1
 801165a:	61a3      	str	r3, [r4, #24]
 801165c:	e7d2      	b.n	8011604 <__sinit+0xc>
 801165e:	bf00      	nop
 8011660:	0801301c 	.word	0x0801301c
 8011664:	08011591 	.word	0x08011591

08011668 <__sfp>:
 8011668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801166a:	4607      	mov	r7, r0
 801166c:	f7ff ffac 	bl	80115c8 <__sfp_lock_acquire>
 8011670:	4b1e      	ldr	r3, [pc, #120]	; (80116ec <__sfp+0x84>)
 8011672:	681e      	ldr	r6, [r3, #0]
 8011674:	69b3      	ldr	r3, [r6, #24]
 8011676:	b913      	cbnz	r3, 801167e <__sfp+0x16>
 8011678:	4630      	mov	r0, r6
 801167a:	f7ff ffbd 	bl	80115f8 <__sinit>
 801167e:	3648      	adds	r6, #72	; 0x48
 8011680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011684:	3b01      	subs	r3, #1
 8011686:	d503      	bpl.n	8011690 <__sfp+0x28>
 8011688:	6833      	ldr	r3, [r6, #0]
 801168a:	b30b      	cbz	r3, 80116d0 <__sfp+0x68>
 801168c:	6836      	ldr	r6, [r6, #0]
 801168e:	e7f7      	b.n	8011680 <__sfp+0x18>
 8011690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011694:	b9d5      	cbnz	r5, 80116cc <__sfp+0x64>
 8011696:	4b16      	ldr	r3, [pc, #88]	; (80116f0 <__sfp+0x88>)
 8011698:	60e3      	str	r3, [r4, #12]
 801169a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801169e:	6665      	str	r5, [r4, #100]	; 0x64
 80116a0:	f000 f84c 	bl	801173c <__retarget_lock_init_recursive>
 80116a4:	f7ff ff96 	bl	80115d4 <__sfp_lock_release>
 80116a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80116ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80116b0:	6025      	str	r5, [r4, #0]
 80116b2:	61a5      	str	r5, [r4, #24]
 80116b4:	2208      	movs	r2, #8
 80116b6:	4629      	mov	r1, r5
 80116b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80116bc:	f7fe fada 	bl	800fc74 <memset>
 80116c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80116c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80116c8:	4620      	mov	r0, r4
 80116ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116cc:	3468      	adds	r4, #104	; 0x68
 80116ce:	e7d9      	b.n	8011684 <__sfp+0x1c>
 80116d0:	2104      	movs	r1, #4
 80116d2:	4638      	mov	r0, r7
 80116d4:	f7ff ff62 	bl	801159c <__sfmoreglue>
 80116d8:	4604      	mov	r4, r0
 80116da:	6030      	str	r0, [r6, #0]
 80116dc:	2800      	cmp	r0, #0
 80116de:	d1d5      	bne.n	801168c <__sfp+0x24>
 80116e0:	f7ff ff78 	bl	80115d4 <__sfp_lock_release>
 80116e4:	230c      	movs	r3, #12
 80116e6:	603b      	str	r3, [r7, #0]
 80116e8:	e7ee      	b.n	80116c8 <__sfp+0x60>
 80116ea:	bf00      	nop
 80116ec:	0801301c 	.word	0x0801301c
 80116f0:	ffff0001 	.word	0xffff0001

080116f4 <_fwalk_reent>:
 80116f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116f8:	4606      	mov	r6, r0
 80116fa:	4688      	mov	r8, r1
 80116fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011700:	2700      	movs	r7, #0
 8011702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011706:	f1b9 0901 	subs.w	r9, r9, #1
 801170a:	d505      	bpl.n	8011718 <_fwalk_reent+0x24>
 801170c:	6824      	ldr	r4, [r4, #0]
 801170e:	2c00      	cmp	r4, #0
 8011710:	d1f7      	bne.n	8011702 <_fwalk_reent+0xe>
 8011712:	4638      	mov	r0, r7
 8011714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011718:	89ab      	ldrh	r3, [r5, #12]
 801171a:	2b01      	cmp	r3, #1
 801171c:	d907      	bls.n	801172e <_fwalk_reent+0x3a>
 801171e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011722:	3301      	adds	r3, #1
 8011724:	d003      	beq.n	801172e <_fwalk_reent+0x3a>
 8011726:	4629      	mov	r1, r5
 8011728:	4630      	mov	r0, r6
 801172a:	47c0      	blx	r8
 801172c:	4307      	orrs	r7, r0
 801172e:	3568      	adds	r5, #104	; 0x68
 8011730:	e7e9      	b.n	8011706 <_fwalk_reent+0x12>
	...

08011734 <_localeconv_r>:
 8011734:	4800      	ldr	r0, [pc, #0]	; (8011738 <_localeconv_r+0x4>)
 8011736:	4770      	bx	lr
 8011738:	2400017c 	.word	0x2400017c

0801173c <__retarget_lock_init_recursive>:
 801173c:	4770      	bx	lr

0801173e <__retarget_lock_acquire_recursive>:
 801173e:	4770      	bx	lr

08011740 <__retarget_lock_release_recursive>:
 8011740:	4770      	bx	lr

08011742 <__swhatbuf_r>:
 8011742:	b570      	push	{r4, r5, r6, lr}
 8011744:	460e      	mov	r6, r1
 8011746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801174a:	2900      	cmp	r1, #0
 801174c:	b096      	sub	sp, #88	; 0x58
 801174e:	4614      	mov	r4, r2
 8011750:	461d      	mov	r5, r3
 8011752:	da07      	bge.n	8011764 <__swhatbuf_r+0x22>
 8011754:	2300      	movs	r3, #0
 8011756:	602b      	str	r3, [r5, #0]
 8011758:	89b3      	ldrh	r3, [r6, #12]
 801175a:	061a      	lsls	r2, r3, #24
 801175c:	d410      	bmi.n	8011780 <__swhatbuf_r+0x3e>
 801175e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011762:	e00e      	b.n	8011782 <__swhatbuf_r+0x40>
 8011764:	466a      	mov	r2, sp
 8011766:	f000 fe9f 	bl	80124a8 <_fstat_r>
 801176a:	2800      	cmp	r0, #0
 801176c:	dbf2      	blt.n	8011754 <__swhatbuf_r+0x12>
 801176e:	9a01      	ldr	r2, [sp, #4]
 8011770:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011774:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011778:	425a      	negs	r2, r3
 801177a:	415a      	adcs	r2, r3
 801177c:	602a      	str	r2, [r5, #0]
 801177e:	e7ee      	b.n	801175e <__swhatbuf_r+0x1c>
 8011780:	2340      	movs	r3, #64	; 0x40
 8011782:	2000      	movs	r0, #0
 8011784:	6023      	str	r3, [r4, #0]
 8011786:	b016      	add	sp, #88	; 0x58
 8011788:	bd70      	pop	{r4, r5, r6, pc}
	...

0801178c <__smakebuf_r>:
 801178c:	898b      	ldrh	r3, [r1, #12]
 801178e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011790:	079d      	lsls	r5, r3, #30
 8011792:	4606      	mov	r6, r0
 8011794:	460c      	mov	r4, r1
 8011796:	d507      	bpl.n	80117a8 <__smakebuf_r+0x1c>
 8011798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801179c:	6023      	str	r3, [r4, #0]
 801179e:	6123      	str	r3, [r4, #16]
 80117a0:	2301      	movs	r3, #1
 80117a2:	6163      	str	r3, [r4, #20]
 80117a4:	b002      	add	sp, #8
 80117a6:	bd70      	pop	{r4, r5, r6, pc}
 80117a8:	ab01      	add	r3, sp, #4
 80117aa:	466a      	mov	r2, sp
 80117ac:	f7ff ffc9 	bl	8011742 <__swhatbuf_r>
 80117b0:	9900      	ldr	r1, [sp, #0]
 80117b2:	4605      	mov	r5, r0
 80117b4:	4630      	mov	r0, r6
 80117b6:	f000 fc1d 	bl	8011ff4 <_malloc_r>
 80117ba:	b948      	cbnz	r0, 80117d0 <__smakebuf_r+0x44>
 80117bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117c0:	059a      	lsls	r2, r3, #22
 80117c2:	d4ef      	bmi.n	80117a4 <__smakebuf_r+0x18>
 80117c4:	f023 0303 	bic.w	r3, r3, #3
 80117c8:	f043 0302 	orr.w	r3, r3, #2
 80117cc:	81a3      	strh	r3, [r4, #12]
 80117ce:	e7e3      	b.n	8011798 <__smakebuf_r+0xc>
 80117d0:	4b0d      	ldr	r3, [pc, #52]	; (8011808 <__smakebuf_r+0x7c>)
 80117d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80117d4:	89a3      	ldrh	r3, [r4, #12]
 80117d6:	6020      	str	r0, [r4, #0]
 80117d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117dc:	81a3      	strh	r3, [r4, #12]
 80117de:	9b00      	ldr	r3, [sp, #0]
 80117e0:	6163      	str	r3, [r4, #20]
 80117e2:	9b01      	ldr	r3, [sp, #4]
 80117e4:	6120      	str	r0, [r4, #16]
 80117e6:	b15b      	cbz	r3, 8011800 <__smakebuf_r+0x74>
 80117e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117ec:	4630      	mov	r0, r6
 80117ee:	f000 fe6d 	bl	80124cc <_isatty_r>
 80117f2:	b128      	cbz	r0, 8011800 <__smakebuf_r+0x74>
 80117f4:	89a3      	ldrh	r3, [r4, #12]
 80117f6:	f023 0303 	bic.w	r3, r3, #3
 80117fa:	f043 0301 	orr.w	r3, r3, #1
 80117fe:	81a3      	strh	r3, [r4, #12]
 8011800:	89a0      	ldrh	r0, [r4, #12]
 8011802:	4305      	orrs	r5, r0
 8011804:	81a5      	strh	r5, [r4, #12]
 8011806:	e7cd      	b.n	80117a4 <__smakebuf_r+0x18>
 8011808:	08011591 	.word	0x08011591

0801180c <malloc>:
 801180c:	4b02      	ldr	r3, [pc, #8]	; (8011818 <malloc+0xc>)
 801180e:	4601      	mov	r1, r0
 8011810:	6818      	ldr	r0, [r3, #0]
 8011812:	f000 bbef 	b.w	8011ff4 <_malloc_r>
 8011816:	bf00      	nop
 8011818:	24000028 	.word	0x24000028

0801181c <memcpy>:
 801181c:	440a      	add	r2, r1
 801181e:	4291      	cmp	r1, r2
 8011820:	f100 33ff 	add.w	r3, r0, #4294967295
 8011824:	d100      	bne.n	8011828 <memcpy+0xc>
 8011826:	4770      	bx	lr
 8011828:	b510      	push	{r4, lr}
 801182a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801182e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011832:	4291      	cmp	r1, r2
 8011834:	d1f9      	bne.n	801182a <memcpy+0xe>
 8011836:	bd10      	pop	{r4, pc}

08011838 <_Balloc>:
 8011838:	b570      	push	{r4, r5, r6, lr}
 801183a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801183c:	4604      	mov	r4, r0
 801183e:	460d      	mov	r5, r1
 8011840:	b976      	cbnz	r6, 8011860 <_Balloc+0x28>
 8011842:	2010      	movs	r0, #16
 8011844:	f7ff ffe2 	bl	801180c <malloc>
 8011848:	4602      	mov	r2, r0
 801184a:	6260      	str	r0, [r4, #36]	; 0x24
 801184c:	b920      	cbnz	r0, 8011858 <_Balloc+0x20>
 801184e:	4b18      	ldr	r3, [pc, #96]	; (80118b0 <_Balloc+0x78>)
 8011850:	4818      	ldr	r0, [pc, #96]	; (80118b4 <_Balloc+0x7c>)
 8011852:	2166      	movs	r1, #102	; 0x66
 8011854:	f000 fde8 	bl	8012428 <__assert_func>
 8011858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801185c:	6006      	str	r6, [r0, #0]
 801185e:	60c6      	str	r6, [r0, #12]
 8011860:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011862:	68f3      	ldr	r3, [r6, #12]
 8011864:	b183      	cbz	r3, 8011888 <_Balloc+0x50>
 8011866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011868:	68db      	ldr	r3, [r3, #12]
 801186a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801186e:	b9b8      	cbnz	r0, 80118a0 <_Balloc+0x68>
 8011870:	2101      	movs	r1, #1
 8011872:	fa01 f605 	lsl.w	r6, r1, r5
 8011876:	1d72      	adds	r2, r6, #5
 8011878:	0092      	lsls	r2, r2, #2
 801187a:	4620      	mov	r0, r4
 801187c:	f000 fb5a 	bl	8011f34 <_calloc_r>
 8011880:	b160      	cbz	r0, 801189c <_Balloc+0x64>
 8011882:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011886:	e00e      	b.n	80118a6 <_Balloc+0x6e>
 8011888:	2221      	movs	r2, #33	; 0x21
 801188a:	2104      	movs	r1, #4
 801188c:	4620      	mov	r0, r4
 801188e:	f000 fb51 	bl	8011f34 <_calloc_r>
 8011892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011894:	60f0      	str	r0, [r6, #12]
 8011896:	68db      	ldr	r3, [r3, #12]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d1e4      	bne.n	8011866 <_Balloc+0x2e>
 801189c:	2000      	movs	r0, #0
 801189e:	bd70      	pop	{r4, r5, r6, pc}
 80118a0:	6802      	ldr	r2, [r0, #0]
 80118a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80118a6:	2300      	movs	r3, #0
 80118a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80118ac:	e7f7      	b.n	801189e <_Balloc+0x66>
 80118ae:	bf00      	nop
 80118b0:	08013061 	.word	0x08013061
 80118b4:	08013148 	.word	0x08013148

080118b8 <_Bfree>:
 80118b8:	b570      	push	{r4, r5, r6, lr}
 80118ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80118bc:	4605      	mov	r5, r0
 80118be:	460c      	mov	r4, r1
 80118c0:	b976      	cbnz	r6, 80118e0 <_Bfree+0x28>
 80118c2:	2010      	movs	r0, #16
 80118c4:	f7ff ffa2 	bl	801180c <malloc>
 80118c8:	4602      	mov	r2, r0
 80118ca:	6268      	str	r0, [r5, #36]	; 0x24
 80118cc:	b920      	cbnz	r0, 80118d8 <_Bfree+0x20>
 80118ce:	4b09      	ldr	r3, [pc, #36]	; (80118f4 <_Bfree+0x3c>)
 80118d0:	4809      	ldr	r0, [pc, #36]	; (80118f8 <_Bfree+0x40>)
 80118d2:	218a      	movs	r1, #138	; 0x8a
 80118d4:	f000 fda8 	bl	8012428 <__assert_func>
 80118d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80118dc:	6006      	str	r6, [r0, #0]
 80118de:	60c6      	str	r6, [r0, #12]
 80118e0:	b13c      	cbz	r4, 80118f2 <_Bfree+0x3a>
 80118e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80118e4:	6862      	ldr	r2, [r4, #4]
 80118e6:	68db      	ldr	r3, [r3, #12]
 80118e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80118ec:	6021      	str	r1, [r4, #0]
 80118ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80118f2:	bd70      	pop	{r4, r5, r6, pc}
 80118f4:	08013061 	.word	0x08013061
 80118f8:	08013148 	.word	0x08013148

080118fc <__multadd>:
 80118fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011900:	690e      	ldr	r6, [r1, #16]
 8011902:	4607      	mov	r7, r0
 8011904:	4698      	mov	r8, r3
 8011906:	460c      	mov	r4, r1
 8011908:	f101 0014 	add.w	r0, r1, #20
 801190c:	2300      	movs	r3, #0
 801190e:	6805      	ldr	r5, [r0, #0]
 8011910:	b2a9      	uxth	r1, r5
 8011912:	fb02 8101 	mla	r1, r2, r1, r8
 8011916:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801191a:	0c2d      	lsrs	r5, r5, #16
 801191c:	fb02 c505 	mla	r5, r2, r5, ip
 8011920:	b289      	uxth	r1, r1
 8011922:	3301      	adds	r3, #1
 8011924:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011928:	429e      	cmp	r6, r3
 801192a:	f840 1b04 	str.w	r1, [r0], #4
 801192e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011932:	dcec      	bgt.n	801190e <__multadd+0x12>
 8011934:	f1b8 0f00 	cmp.w	r8, #0
 8011938:	d022      	beq.n	8011980 <__multadd+0x84>
 801193a:	68a3      	ldr	r3, [r4, #8]
 801193c:	42b3      	cmp	r3, r6
 801193e:	dc19      	bgt.n	8011974 <__multadd+0x78>
 8011940:	6861      	ldr	r1, [r4, #4]
 8011942:	4638      	mov	r0, r7
 8011944:	3101      	adds	r1, #1
 8011946:	f7ff ff77 	bl	8011838 <_Balloc>
 801194a:	4605      	mov	r5, r0
 801194c:	b928      	cbnz	r0, 801195a <__multadd+0x5e>
 801194e:	4602      	mov	r2, r0
 8011950:	4b0d      	ldr	r3, [pc, #52]	; (8011988 <__multadd+0x8c>)
 8011952:	480e      	ldr	r0, [pc, #56]	; (801198c <__multadd+0x90>)
 8011954:	21b5      	movs	r1, #181	; 0xb5
 8011956:	f000 fd67 	bl	8012428 <__assert_func>
 801195a:	6922      	ldr	r2, [r4, #16]
 801195c:	3202      	adds	r2, #2
 801195e:	f104 010c 	add.w	r1, r4, #12
 8011962:	0092      	lsls	r2, r2, #2
 8011964:	300c      	adds	r0, #12
 8011966:	f7ff ff59 	bl	801181c <memcpy>
 801196a:	4621      	mov	r1, r4
 801196c:	4638      	mov	r0, r7
 801196e:	f7ff ffa3 	bl	80118b8 <_Bfree>
 8011972:	462c      	mov	r4, r5
 8011974:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011978:	3601      	adds	r6, #1
 801197a:	f8c3 8014 	str.w	r8, [r3, #20]
 801197e:	6126      	str	r6, [r4, #16]
 8011980:	4620      	mov	r0, r4
 8011982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011986:	bf00      	nop
 8011988:	080130d7 	.word	0x080130d7
 801198c:	08013148 	.word	0x08013148

08011990 <__hi0bits>:
 8011990:	0c03      	lsrs	r3, r0, #16
 8011992:	041b      	lsls	r3, r3, #16
 8011994:	b9d3      	cbnz	r3, 80119cc <__hi0bits+0x3c>
 8011996:	0400      	lsls	r0, r0, #16
 8011998:	2310      	movs	r3, #16
 801199a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801199e:	bf04      	itt	eq
 80119a0:	0200      	lsleq	r0, r0, #8
 80119a2:	3308      	addeq	r3, #8
 80119a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80119a8:	bf04      	itt	eq
 80119aa:	0100      	lsleq	r0, r0, #4
 80119ac:	3304      	addeq	r3, #4
 80119ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80119b2:	bf04      	itt	eq
 80119b4:	0080      	lsleq	r0, r0, #2
 80119b6:	3302      	addeq	r3, #2
 80119b8:	2800      	cmp	r0, #0
 80119ba:	db05      	blt.n	80119c8 <__hi0bits+0x38>
 80119bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80119c0:	f103 0301 	add.w	r3, r3, #1
 80119c4:	bf08      	it	eq
 80119c6:	2320      	moveq	r3, #32
 80119c8:	4618      	mov	r0, r3
 80119ca:	4770      	bx	lr
 80119cc:	2300      	movs	r3, #0
 80119ce:	e7e4      	b.n	801199a <__hi0bits+0xa>

080119d0 <__lo0bits>:
 80119d0:	6803      	ldr	r3, [r0, #0]
 80119d2:	f013 0207 	ands.w	r2, r3, #7
 80119d6:	4601      	mov	r1, r0
 80119d8:	d00b      	beq.n	80119f2 <__lo0bits+0x22>
 80119da:	07da      	lsls	r2, r3, #31
 80119dc:	d424      	bmi.n	8011a28 <__lo0bits+0x58>
 80119de:	0798      	lsls	r0, r3, #30
 80119e0:	bf49      	itett	mi
 80119e2:	085b      	lsrmi	r3, r3, #1
 80119e4:	089b      	lsrpl	r3, r3, #2
 80119e6:	2001      	movmi	r0, #1
 80119e8:	600b      	strmi	r3, [r1, #0]
 80119ea:	bf5c      	itt	pl
 80119ec:	600b      	strpl	r3, [r1, #0]
 80119ee:	2002      	movpl	r0, #2
 80119f0:	4770      	bx	lr
 80119f2:	b298      	uxth	r0, r3
 80119f4:	b9b0      	cbnz	r0, 8011a24 <__lo0bits+0x54>
 80119f6:	0c1b      	lsrs	r3, r3, #16
 80119f8:	2010      	movs	r0, #16
 80119fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80119fe:	bf04      	itt	eq
 8011a00:	0a1b      	lsreq	r3, r3, #8
 8011a02:	3008      	addeq	r0, #8
 8011a04:	071a      	lsls	r2, r3, #28
 8011a06:	bf04      	itt	eq
 8011a08:	091b      	lsreq	r3, r3, #4
 8011a0a:	3004      	addeq	r0, #4
 8011a0c:	079a      	lsls	r2, r3, #30
 8011a0e:	bf04      	itt	eq
 8011a10:	089b      	lsreq	r3, r3, #2
 8011a12:	3002      	addeq	r0, #2
 8011a14:	07da      	lsls	r2, r3, #31
 8011a16:	d403      	bmi.n	8011a20 <__lo0bits+0x50>
 8011a18:	085b      	lsrs	r3, r3, #1
 8011a1a:	f100 0001 	add.w	r0, r0, #1
 8011a1e:	d005      	beq.n	8011a2c <__lo0bits+0x5c>
 8011a20:	600b      	str	r3, [r1, #0]
 8011a22:	4770      	bx	lr
 8011a24:	4610      	mov	r0, r2
 8011a26:	e7e8      	b.n	80119fa <__lo0bits+0x2a>
 8011a28:	2000      	movs	r0, #0
 8011a2a:	4770      	bx	lr
 8011a2c:	2020      	movs	r0, #32
 8011a2e:	4770      	bx	lr

08011a30 <__i2b>:
 8011a30:	b510      	push	{r4, lr}
 8011a32:	460c      	mov	r4, r1
 8011a34:	2101      	movs	r1, #1
 8011a36:	f7ff feff 	bl	8011838 <_Balloc>
 8011a3a:	4602      	mov	r2, r0
 8011a3c:	b928      	cbnz	r0, 8011a4a <__i2b+0x1a>
 8011a3e:	4b05      	ldr	r3, [pc, #20]	; (8011a54 <__i2b+0x24>)
 8011a40:	4805      	ldr	r0, [pc, #20]	; (8011a58 <__i2b+0x28>)
 8011a42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011a46:	f000 fcef 	bl	8012428 <__assert_func>
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	6144      	str	r4, [r0, #20]
 8011a4e:	6103      	str	r3, [r0, #16]
 8011a50:	bd10      	pop	{r4, pc}
 8011a52:	bf00      	nop
 8011a54:	080130d7 	.word	0x080130d7
 8011a58:	08013148 	.word	0x08013148

08011a5c <__multiply>:
 8011a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a60:	4614      	mov	r4, r2
 8011a62:	690a      	ldr	r2, [r1, #16]
 8011a64:	6923      	ldr	r3, [r4, #16]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	bfb8      	it	lt
 8011a6a:	460b      	movlt	r3, r1
 8011a6c:	460d      	mov	r5, r1
 8011a6e:	bfbc      	itt	lt
 8011a70:	4625      	movlt	r5, r4
 8011a72:	461c      	movlt	r4, r3
 8011a74:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011a78:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011a7c:	68ab      	ldr	r3, [r5, #8]
 8011a7e:	6869      	ldr	r1, [r5, #4]
 8011a80:	eb0a 0709 	add.w	r7, sl, r9
 8011a84:	42bb      	cmp	r3, r7
 8011a86:	b085      	sub	sp, #20
 8011a88:	bfb8      	it	lt
 8011a8a:	3101      	addlt	r1, #1
 8011a8c:	f7ff fed4 	bl	8011838 <_Balloc>
 8011a90:	b930      	cbnz	r0, 8011aa0 <__multiply+0x44>
 8011a92:	4602      	mov	r2, r0
 8011a94:	4b42      	ldr	r3, [pc, #264]	; (8011ba0 <__multiply+0x144>)
 8011a96:	4843      	ldr	r0, [pc, #268]	; (8011ba4 <__multiply+0x148>)
 8011a98:	f240 115d 	movw	r1, #349	; 0x15d
 8011a9c:	f000 fcc4 	bl	8012428 <__assert_func>
 8011aa0:	f100 0614 	add.w	r6, r0, #20
 8011aa4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011aa8:	4633      	mov	r3, r6
 8011aaa:	2200      	movs	r2, #0
 8011aac:	4543      	cmp	r3, r8
 8011aae:	d31e      	bcc.n	8011aee <__multiply+0x92>
 8011ab0:	f105 0c14 	add.w	ip, r5, #20
 8011ab4:	f104 0314 	add.w	r3, r4, #20
 8011ab8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011abc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011ac0:	9202      	str	r2, [sp, #8]
 8011ac2:	ebac 0205 	sub.w	r2, ip, r5
 8011ac6:	3a15      	subs	r2, #21
 8011ac8:	f022 0203 	bic.w	r2, r2, #3
 8011acc:	3204      	adds	r2, #4
 8011ace:	f105 0115 	add.w	r1, r5, #21
 8011ad2:	458c      	cmp	ip, r1
 8011ad4:	bf38      	it	cc
 8011ad6:	2204      	movcc	r2, #4
 8011ad8:	9201      	str	r2, [sp, #4]
 8011ada:	9a02      	ldr	r2, [sp, #8]
 8011adc:	9303      	str	r3, [sp, #12]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d808      	bhi.n	8011af4 <__multiply+0x98>
 8011ae2:	2f00      	cmp	r7, #0
 8011ae4:	dc55      	bgt.n	8011b92 <__multiply+0x136>
 8011ae6:	6107      	str	r7, [r0, #16]
 8011ae8:	b005      	add	sp, #20
 8011aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aee:	f843 2b04 	str.w	r2, [r3], #4
 8011af2:	e7db      	b.n	8011aac <__multiply+0x50>
 8011af4:	f8b3 a000 	ldrh.w	sl, [r3]
 8011af8:	f1ba 0f00 	cmp.w	sl, #0
 8011afc:	d020      	beq.n	8011b40 <__multiply+0xe4>
 8011afe:	f105 0e14 	add.w	lr, r5, #20
 8011b02:	46b1      	mov	r9, r6
 8011b04:	2200      	movs	r2, #0
 8011b06:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011b0a:	f8d9 b000 	ldr.w	fp, [r9]
 8011b0e:	b2a1      	uxth	r1, r4
 8011b10:	fa1f fb8b 	uxth.w	fp, fp
 8011b14:	fb0a b101 	mla	r1, sl, r1, fp
 8011b18:	4411      	add	r1, r2
 8011b1a:	f8d9 2000 	ldr.w	r2, [r9]
 8011b1e:	0c24      	lsrs	r4, r4, #16
 8011b20:	0c12      	lsrs	r2, r2, #16
 8011b22:	fb0a 2404 	mla	r4, sl, r4, r2
 8011b26:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011b2a:	b289      	uxth	r1, r1
 8011b2c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8011b30:	45f4      	cmp	ip, lr
 8011b32:	f849 1b04 	str.w	r1, [r9], #4
 8011b36:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011b3a:	d8e4      	bhi.n	8011b06 <__multiply+0xaa>
 8011b3c:	9901      	ldr	r1, [sp, #4]
 8011b3e:	5072      	str	r2, [r6, r1]
 8011b40:	9a03      	ldr	r2, [sp, #12]
 8011b42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011b46:	3304      	adds	r3, #4
 8011b48:	f1b9 0f00 	cmp.w	r9, #0
 8011b4c:	d01f      	beq.n	8011b8e <__multiply+0x132>
 8011b4e:	6834      	ldr	r4, [r6, #0]
 8011b50:	f105 0114 	add.w	r1, r5, #20
 8011b54:	46b6      	mov	lr, r6
 8011b56:	f04f 0a00 	mov.w	sl, #0
 8011b5a:	880a      	ldrh	r2, [r1, #0]
 8011b5c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011b60:	fb09 b202 	mla	r2, r9, r2, fp
 8011b64:	4492      	add	sl, r2
 8011b66:	b2a4      	uxth	r4, r4
 8011b68:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011b6c:	f84e 4b04 	str.w	r4, [lr], #4
 8011b70:	f851 4b04 	ldr.w	r4, [r1], #4
 8011b74:	f8be 2000 	ldrh.w	r2, [lr]
 8011b78:	0c24      	lsrs	r4, r4, #16
 8011b7a:	fb09 2404 	mla	r4, r9, r4, r2
 8011b7e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011b82:	458c      	cmp	ip, r1
 8011b84:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011b88:	d8e7      	bhi.n	8011b5a <__multiply+0xfe>
 8011b8a:	9a01      	ldr	r2, [sp, #4]
 8011b8c:	50b4      	str	r4, [r6, r2]
 8011b8e:	3604      	adds	r6, #4
 8011b90:	e7a3      	b.n	8011ada <__multiply+0x7e>
 8011b92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d1a5      	bne.n	8011ae6 <__multiply+0x8a>
 8011b9a:	3f01      	subs	r7, #1
 8011b9c:	e7a1      	b.n	8011ae2 <__multiply+0x86>
 8011b9e:	bf00      	nop
 8011ba0:	080130d7 	.word	0x080130d7
 8011ba4:	08013148 	.word	0x08013148

08011ba8 <__pow5mult>:
 8011ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bac:	4615      	mov	r5, r2
 8011bae:	f012 0203 	ands.w	r2, r2, #3
 8011bb2:	4606      	mov	r6, r0
 8011bb4:	460f      	mov	r7, r1
 8011bb6:	d007      	beq.n	8011bc8 <__pow5mult+0x20>
 8011bb8:	4c25      	ldr	r4, [pc, #148]	; (8011c50 <__pow5mult+0xa8>)
 8011bba:	3a01      	subs	r2, #1
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011bc2:	f7ff fe9b 	bl	80118fc <__multadd>
 8011bc6:	4607      	mov	r7, r0
 8011bc8:	10ad      	asrs	r5, r5, #2
 8011bca:	d03d      	beq.n	8011c48 <__pow5mult+0xa0>
 8011bcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011bce:	b97c      	cbnz	r4, 8011bf0 <__pow5mult+0x48>
 8011bd0:	2010      	movs	r0, #16
 8011bd2:	f7ff fe1b 	bl	801180c <malloc>
 8011bd6:	4602      	mov	r2, r0
 8011bd8:	6270      	str	r0, [r6, #36]	; 0x24
 8011bda:	b928      	cbnz	r0, 8011be8 <__pow5mult+0x40>
 8011bdc:	4b1d      	ldr	r3, [pc, #116]	; (8011c54 <__pow5mult+0xac>)
 8011bde:	481e      	ldr	r0, [pc, #120]	; (8011c58 <__pow5mult+0xb0>)
 8011be0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011be4:	f000 fc20 	bl	8012428 <__assert_func>
 8011be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011bec:	6004      	str	r4, [r0, #0]
 8011bee:	60c4      	str	r4, [r0, #12]
 8011bf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011bf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011bf8:	b94c      	cbnz	r4, 8011c0e <__pow5mult+0x66>
 8011bfa:	f240 2171 	movw	r1, #625	; 0x271
 8011bfe:	4630      	mov	r0, r6
 8011c00:	f7ff ff16 	bl	8011a30 <__i2b>
 8011c04:	2300      	movs	r3, #0
 8011c06:	f8c8 0008 	str.w	r0, [r8, #8]
 8011c0a:	4604      	mov	r4, r0
 8011c0c:	6003      	str	r3, [r0, #0]
 8011c0e:	f04f 0900 	mov.w	r9, #0
 8011c12:	07eb      	lsls	r3, r5, #31
 8011c14:	d50a      	bpl.n	8011c2c <__pow5mult+0x84>
 8011c16:	4639      	mov	r1, r7
 8011c18:	4622      	mov	r2, r4
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	f7ff ff1e 	bl	8011a5c <__multiply>
 8011c20:	4639      	mov	r1, r7
 8011c22:	4680      	mov	r8, r0
 8011c24:	4630      	mov	r0, r6
 8011c26:	f7ff fe47 	bl	80118b8 <_Bfree>
 8011c2a:	4647      	mov	r7, r8
 8011c2c:	106d      	asrs	r5, r5, #1
 8011c2e:	d00b      	beq.n	8011c48 <__pow5mult+0xa0>
 8011c30:	6820      	ldr	r0, [r4, #0]
 8011c32:	b938      	cbnz	r0, 8011c44 <__pow5mult+0x9c>
 8011c34:	4622      	mov	r2, r4
 8011c36:	4621      	mov	r1, r4
 8011c38:	4630      	mov	r0, r6
 8011c3a:	f7ff ff0f 	bl	8011a5c <__multiply>
 8011c3e:	6020      	str	r0, [r4, #0]
 8011c40:	f8c0 9000 	str.w	r9, [r0]
 8011c44:	4604      	mov	r4, r0
 8011c46:	e7e4      	b.n	8011c12 <__pow5mult+0x6a>
 8011c48:	4638      	mov	r0, r7
 8011c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c4e:	bf00      	nop
 8011c50:	08013298 	.word	0x08013298
 8011c54:	08013061 	.word	0x08013061
 8011c58:	08013148 	.word	0x08013148

08011c5c <__lshift>:
 8011c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c60:	460c      	mov	r4, r1
 8011c62:	6849      	ldr	r1, [r1, #4]
 8011c64:	6923      	ldr	r3, [r4, #16]
 8011c66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011c6a:	68a3      	ldr	r3, [r4, #8]
 8011c6c:	4607      	mov	r7, r0
 8011c6e:	4691      	mov	r9, r2
 8011c70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011c74:	f108 0601 	add.w	r6, r8, #1
 8011c78:	42b3      	cmp	r3, r6
 8011c7a:	db0b      	blt.n	8011c94 <__lshift+0x38>
 8011c7c:	4638      	mov	r0, r7
 8011c7e:	f7ff fddb 	bl	8011838 <_Balloc>
 8011c82:	4605      	mov	r5, r0
 8011c84:	b948      	cbnz	r0, 8011c9a <__lshift+0x3e>
 8011c86:	4602      	mov	r2, r0
 8011c88:	4b28      	ldr	r3, [pc, #160]	; (8011d2c <__lshift+0xd0>)
 8011c8a:	4829      	ldr	r0, [pc, #164]	; (8011d30 <__lshift+0xd4>)
 8011c8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011c90:	f000 fbca 	bl	8012428 <__assert_func>
 8011c94:	3101      	adds	r1, #1
 8011c96:	005b      	lsls	r3, r3, #1
 8011c98:	e7ee      	b.n	8011c78 <__lshift+0x1c>
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	f100 0114 	add.w	r1, r0, #20
 8011ca0:	f100 0210 	add.w	r2, r0, #16
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	4553      	cmp	r3, sl
 8011ca8:	db33      	blt.n	8011d12 <__lshift+0xb6>
 8011caa:	6920      	ldr	r0, [r4, #16]
 8011cac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011cb0:	f104 0314 	add.w	r3, r4, #20
 8011cb4:	f019 091f 	ands.w	r9, r9, #31
 8011cb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011cbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011cc0:	d02b      	beq.n	8011d1a <__lshift+0xbe>
 8011cc2:	f1c9 0e20 	rsb	lr, r9, #32
 8011cc6:	468a      	mov	sl, r1
 8011cc8:	2200      	movs	r2, #0
 8011cca:	6818      	ldr	r0, [r3, #0]
 8011ccc:	fa00 f009 	lsl.w	r0, r0, r9
 8011cd0:	4302      	orrs	r2, r0
 8011cd2:	f84a 2b04 	str.w	r2, [sl], #4
 8011cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cda:	459c      	cmp	ip, r3
 8011cdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8011ce0:	d8f3      	bhi.n	8011cca <__lshift+0x6e>
 8011ce2:	ebac 0304 	sub.w	r3, ip, r4
 8011ce6:	3b15      	subs	r3, #21
 8011ce8:	f023 0303 	bic.w	r3, r3, #3
 8011cec:	3304      	adds	r3, #4
 8011cee:	f104 0015 	add.w	r0, r4, #21
 8011cf2:	4584      	cmp	ip, r0
 8011cf4:	bf38      	it	cc
 8011cf6:	2304      	movcc	r3, #4
 8011cf8:	50ca      	str	r2, [r1, r3]
 8011cfa:	b10a      	cbz	r2, 8011d00 <__lshift+0xa4>
 8011cfc:	f108 0602 	add.w	r6, r8, #2
 8011d00:	3e01      	subs	r6, #1
 8011d02:	4638      	mov	r0, r7
 8011d04:	612e      	str	r6, [r5, #16]
 8011d06:	4621      	mov	r1, r4
 8011d08:	f7ff fdd6 	bl	80118b8 <_Bfree>
 8011d0c:	4628      	mov	r0, r5
 8011d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d12:	f842 0f04 	str.w	r0, [r2, #4]!
 8011d16:	3301      	adds	r3, #1
 8011d18:	e7c5      	b.n	8011ca6 <__lshift+0x4a>
 8011d1a:	3904      	subs	r1, #4
 8011d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d20:	f841 2f04 	str.w	r2, [r1, #4]!
 8011d24:	459c      	cmp	ip, r3
 8011d26:	d8f9      	bhi.n	8011d1c <__lshift+0xc0>
 8011d28:	e7ea      	b.n	8011d00 <__lshift+0xa4>
 8011d2a:	bf00      	nop
 8011d2c:	080130d7 	.word	0x080130d7
 8011d30:	08013148 	.word	0x08013148

08011d34 <__mcmp>:
 8011d34:	b530      	push	{r4, r5, lr}
 8011d36:	6902      	ldr	r2, [r0, #16]
 8011d38:	690c      	ldr	r4, [r1, #16]
 8011d3a:	1b12      	subs	r2, r2, r4
 8011d3c:	d10e      	bne.n	8011d5c <__mcmp+0x28>
 8011d3e:	f100 0314 	add.w	r3, r0, #20
 8011d42:	3114      	adds	r1, #20
 8011d44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011d48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011d4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011d50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011d54:	42a5      	cmp	r5, r4
 8011d56:	d003      	beq.n	8011d60 <__mcmp+0x2c>
 8011d58:	d305      	bcc.n	8011d66 <__mcmp+0x32>
 8011d5a:	2201      	movs	r2, #1
 8011d5c:	4610      	mov	r0, r2
 8011d5e:	bd30      	pop	{r4, r5, pc}
 8011d60:	4283      	cmp	r3, r0
 8011d62:	d3f3      	bcc.n	8011d4c <__mcmp+0x18>
 8011d64:	e7fa      	b.n	8011d5c <__mcmp+0x28>
 8011d66:	f04f 32ff 	mov.w	r2, #4294967295
 8011d6a:	e7f7      	b.n	8011d5c <__mcmp+0x28>

08011d6c <__mdiff>:
 8011d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d70:	460c      	mov	r4, r1
 8011d72:	4606      	mov	r6, r0
 8011d74:	4611      	mov	r1, r2
 8011d76:	4620      	mov	r0, r4
 8011d78:	4617      	mov	r7, r2
 8011d7a:	f7ff ffdb 	bl	8011d34 <__mcmp>
 8011d7e:	1e05      	subs	r5, r0, #0
 8011d80:	d110      	bne.n	8011da4 <__mdiff+0x38>
 8011d82:	4629      	mov	r1, r5
 8011d84:	4630      	mov	r0, r6
 8011d86:	f7ff fd57 	bl	8011838 <_Balloc>
 8011d8a:	b930      	cbnz	r0, 8011d9a <__mdiff+0x2e>
 8011d8c:	4b39      	ldr	r3, [pc, #228]	; (8011e74 <__mdiff+0x108>)
 8011d8e:	4602      	mov	r2, r0
 8011d90:	f240 2132 	movw	r1, #562	; 0x232
 8011d94:	4838      	ldr	r0, [pc, #224]	; (8011e78 <__mdiff+0x10c>)
 8011d96:	f000 fb47 	bl	8012428 <__assert_func>
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011da0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da4:	bfa4      	itt	ge
 8011da6:	463b      	movge	r3, r7
 8011da8:	4627      	movge	r7, r4
 8011daa:	4630      	mov	r0, r6
 8011dac:	6879      	ldr	r1, [r7, #4]
 8011dae:	bfa6      	itte	ge
 8011db0:	461c      	movge	r4, r3
 8011db2:	2500      	movge	r5, #0
 8011db4:	2501      	movlt	r5, #1
 8011db6:	f7ff fd3f 	bl	8011838 <_Balloc>
 8011dba:	b920      	cbnz	r0, 8011dc6 <__mdiff+0x5a>
 8011dbc:	4b2d      	ldr	r3, [pc, #180]	; (8011e74 <__mdiff+0x108>)
 8011dbe:	4602      	mov	r2, r0
 8011dc0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011dc4:	e7e6      	b.n	8011d94 <__mdiff+0x28>
 8011dc6:	693e      	ldr	r6, [r7, #16]
 8011dc8:	60c5      	str	r5, [r0, #12]
 8011dca:	6925      	ldr	r5, [r4, #16]
 8011dcc:	f107 0114 	add.w	r1, r7, #20
 8011dd0:	f104 0914 	add.w	r9, r4, #20
 8011dd4:	f100 0e14 	add.w	lr, r0, #20
 8011dd8:	f107 0210 	add.w	r2, r7, #16
 8011ddc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011de0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011de4:	46f2      	mov	sl, lr
 8011de6:	2700      	movs	r7, #0
 8011de8:	f859 3b04 	ldr.w	r3, [r9], #4
 8011dec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011df0:	fa1f f883 	uxth.w	r8, r3
 8011df4:	fa17 f78b 	uxtah	r7, r7, fp
 8011df8:	0c1b      	lsrs	r3, r3, #16
 8011dfa:	eba7 0808 	sub.w	r8, r7, r8
 8011dfe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011e02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011e06:	fa1f f888 	uxth.w	r8, r8
 8011e0a:	141f      	asrs	r7, r3, #16
 8011e0c:	454d      	cmp	r5, r9
 8011e0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011e12:	f84a 3b04 	str.w	r3, [sl], #4
 8011e16:	d8e7      	bhi.n	8011de8 <__mdiff+0x7c>
 8011e18:	1b2b      	subs	r3, r5, r4
 8011e1a:	3b15      	subs	r3, #21
 8011e1c:	f023 0303 	bic.w	r3, r3, #3
 8011e20:	3304      	adds	r3, #4
 8011e22:	3415      	adds	r4, #21
 8011e24:	42a5      	cmp	r5, r4
 8011e26:	bf38      	it	cc
 8011e28:	2304      	movcc	r3, #4
 8011e2a:	4419      	add	r1, r3
 8011e2c:	4473      	add	r3, lr
 8011e2e:	469e      	mov	lr, r3
 8011e30:	460d      	mov	r5, r1
 8011e32:	4565      	cmp	r5, ip
 8011e34:	d30e      	bcc.n	8011e54 <__mdiff+0xe8>
 8011e36:	f10c 0203 	add.w	r2, ip, #3
 8011e3a:	1a52      	subs	r2, r2, r1
 8011e3c:	f022 0203 	bic.w	r2, r2, #3
 8011e40:	3903      	subs	r1, #3
 8011e42:	458c      	cmp	ip, r1
 8011e44:	bf38      	it	cc
 8011e46:	2200      	movcc	r2, #0
 8011e48:	441a      	add	r2, r3
 8011e4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011e4e:	b17b      	cbz	r3, 8011e70 <__mdiff+0x104>
 8011e50:	6106      	str	r6, [r0, #16]
 8011e52:	e7a5      	b.n	8011da0 <__mdiff+0x34>
 8011e54:	f855 8b04 	ldr.w	r8, [r5], #4
 8011e58:	fa17 f488 	uxtah	r4, r7, r8
 8011e5c:	1422      	asrs	r2, r4, #16
 8011e5e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011e62:	b2a4      	uxth	r4, r4
 8011e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011e68:	f84e 4b04 	str.w	r4, [lr], #4
 8011e6c:	1417      	asrs	r7, r2, #16
 8011e6e:	e7e0      	b.n	8011e32 <__mdiff+0xc6>
 8011e70:	3e01      	subs	r6, #1
 8011e72:	e7ea      	b.n	8011e4a <__mdiff+0xde>
 8011e74:	080130d7 	.word	0x080130d7
 8011e78:	08013148 	.word	0x08013148

08011e7c <__d2b>:
 8011e7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e80:	4689      	mov	r9, r1
 8011e82:	2101      	movs	r1, #1
 8011e84:	ec57 6b10 	vmov	r6, r7, d0
 8011e88:	4690      	mov	r8, r2
 8011e8a:	f7ff fcd5 	bl	8011838 <_Balloc>
 8011e8e:	4604      	mov	r4, r0
 8011e90:	b930      	cbnz	r0, 8011ea0 <__d2b+0x24>
 8011e92:	4602      	mov	r2, r0
 8011e94:	4b25      	ldr	r3, [pc, #148]	; (8011f2c <__d2b+0xb0>)
 8011e96:	4826      	ldr	r0, [pc, #152]	; (8011f30 <__d2b+0xb4>)
 8011e98:	f240 310a 	movw	r1, #778	; 0x30a
 8011e9c:	f000 fac4 	bl	8012428 <__assert_func>
 8011ea0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011ea4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011ea8:	bb35      	cbnz	r5, 8011ef8 <__d2b+0x7c>
 8011eaa:	2e00      	cmp	r6, #0
 8011eac:	9301      	str	r3, [sp, #4]
 8011eae:	d028      	beq.n	8011f02 <__d2b+0x86>
 8011eb0:	4668      	mov	r0, sp
 8011eb2:	9600      	str	r6, [sp, #0]
 8011eb4:	f7ff fd8c 	bl	80119d0 <__lo0bits>
 8011eb8:	9900      	ldr	r1, [sp, #0]
 8011eba:	b300      	cbz	r0, 8011efe <__d2b+0x82>
 8011ebc:	9a01      	ldr	r2, [sp, #4]
 8011ebe:	f1c0 0320 	rsb	r3, r0, #32
 8011ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8011ec6:	430b      	orrs	r3, r1
 8011ec8:	40c2      	lsrs	r2, r0
 8011eca:	6163      	str	r3, [r4, #20]
 8011ecc:	9201      	str	r2, [sp, #4]
 8011ece:	9b01      	ldr	r3, [sp, #4]
 8011ed0:	61a3      	str	r3, [r4, #24]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	bf14      	ite	ne
 8011ed6:	2202      	movne	r2, #2
 8011ed8:	2201      	moveq	r2, #1
 8011eda:	6122      	str	r2, [r4, #16]
 8011edc:	b1d5      	cbz	r5, 8011f14 <__d2b+0x98>
 8011ede:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011ee2:	4405      	add	r5, r0
 8011ee4:	f8c9 5000 	str.w	r5, [r9]
 8011ee8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011eec:	f8c8 0000 	str.w	r0, [r8]
 8011ef0:	4620      	mov	r0, r4
 8011ef2:	b003      	add	sp, #12
 8011ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ef8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011efc:	e7d5      	b.n	8011eaa <__d2b+0x2e>
 8011efe:	6161      	str	r1, [r4, #20]
 8011f00:	e7e5      	b.n	8011ece <__d2b+0x52>
 8011f02:	a801      	add	r0, sp, #4
 8011f04:	f7ff fd64 	bl	80119d0 <__lo0bits>
 8011f08:	9b01      	ldr	r3, [sp, #4]
 8011f0a:	6163      	str	r3, [r4, #20]
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	6122      	str	r2, [r4, #16]
 8011f10:	3020      	adds	r0, #32
 8011f12:	e7e3      	b.n	8011edc <__d2b+0x60>
 8011f14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011f18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011f1c:	f8c9 0000 	str.w	r0, [r9]
 8011f20:	6918      	ldr	r0, [r3, #16]
 8011f22:	f7ff fd35 	bl	8011990 <__hi0bits>
 8011f26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011f2a:	e7df      	b.n	8011eec <__d2b+0x70>
 8011f2c:	080130d7 	.word	0x080130d7
 8011f30:	08013148 	.word	0x08013148

08011f34 <_calloc_r>:
 8011f34:	b513      	push	{r0, r1, r4, lr}
 8011f36:	434a      	muls	r2, r1
 8011f38:	4611      	mov	r1, r2
 8011f3a:	9201      	str	r2, [sp, #4]
 8011f3c:	f000 f85a 	bl	8011ff4 <_malloc_r>
 8011f40:	4604      	mov	r4, r0
 8011f42:	b118      	cbz	r0, 8011f4c <_calloc_r+0x18>
 8011f44:	9a01      	ldr	r2, [sp, #4]
 8011f46:	2100      	movs	r1, #0
 8011f48:	f7fd fe94 	bl	800fc74 <memset>
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	b002      	add	sp, #8
 8011f50:	bd10      	pop	{r4, pc}
	...

08011f54 <_free_r>:
 8011f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011f56:	2900      	cmp	r1, #0
 8011f58:	d048      	beq.n	8011fec <_free_r+0x98>
 8011f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f5e:	9001      	str	r0, [sp, #4]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	f1a1 0404 	sub.w	r4, r1, #4
 8011f66:	bfb8      	it	lt
 8011f68:	18e4      	addlt	r4, r4, r3
 8011f6a:	f000 fae3 	bl	8012534 <__malloc_lock>
 8011f6e:	4a20      	ldr	r2, [pc, #128]	; (8011ff0 <_free_r+0x9c>)
 8011f70:	9801      	ldr	r0, [sp, #4]
 8011f72:	6813      	ldr	r3, [r2, #0]
 8011f74:	4615      	mov	r5, r2
 8011f76:	b933      	cbnz	r3, 8011f86 <_free_r+0x32>
 8011f78:	6063      	str	r3, [r4, #4]
 8011f7a:	6014      	str	r4, [r2, #0]
 8011f7c:	b003      	add	sp, #12
 8011f7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f82:	f000 badd 	b.w	8012540 <__malloc_unlock>
 8011f86:	42a3      	cmp	r3, r4
 8011f88:	d90b      	bls.n	8011fa2 <_free_r+0x4e>
 8011f8a:	6821      	ldr	r1, [r4, #0]
 8011f8c:	1862      	adds	r2, r4, r1
 8011f8e:	4293      	cmp	r3, r2
 8011f90:	bf04      	itt	eq
 8011f92:	681a      	ldreq	r2, [r3, #0]
 8011f94:	685b      	ldreq	r3, [r3, #4]
 8011f96:	6063      	str	r3, [r4, #4]
 8011f98:	bf04      	itt	eq
 8011f9a:	1852      	addeq	r2, r2, r1
 8011f9c:	6022      	streq	r2, [r4, #0]
 8011f9e:	602c      	str	r4, [r5, #0]
 8011fa0:	e7ec      	b.n	8011f7c <_free_r+0x28>
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	b10b      	cbz	r3, 8011fac <_free_r+0x58>
 8011fa8:	42a3      	cmp	r3, r4
 8011faa:	d9fa      	bls.n	8011fa2 <_free_r+0x4e>
 8011fac:	6811      	ldr	r1, [r2, #0]
 8011fae:	1855      	adds	r5, r2, r1
 8011fb0:	42a5      	cmp	r5, r4
 8011fb2:	d10b      	bne.n	8011fcc <_free_r+0x78>
 8011fb4:	6824      	ldr	r4, [r4, #0]
 8011fb6:	4421      	add	r1, r4
 8011fb8:	1854      	adds	r4, r2, r1
 8011fba:	42a3      	cmp	r3, r4
 8011fbc:	6011      	str	r1, [r2, #0]
 8011fbe:	d1dd      	bne.n	8011f7c <_free_r+0x28>
 8011fc0:	681c      	ldr	r4, [r3, #0]
 8011fc2:	685b      	ldr	r3, [r3, #4]
 8011fc4:	6053      	str	r3, [r2, #4]
 8011fc6:	4421      	add	r1, r4
 8011fc8:	6011      	str	r1, [r2, #0]
 8011fca:	e7d7      	b.n	8011f7c <_free_r+0x28>
 8011fcc:	d902      	bls.n	8011fd4 <_free_r+0x80>
 8011fce:	230c      	movs	r3, #12
 8011fd0:	6003      	str	r3, [r0, #0]
 8011fd2:	e7d3      	b.n	8011f7c <_free_r+0x28>
 8011fd4:	6825      	ldr	r5, [r4, #0]
 8011fd6:	1961      	adds	r1, r4, r5
 8011fd8:	428b      	cmp	r3, r1
 8011fda:	bf04      	itt	eq
 8011fdc:	6819      	ldreq	r1, [r3, #0]
 8011fde:	685b      	ldreq	r3, [r3, #4]
 8011fe0:	6063      	str	r3, [r4, #4]
 8011fe2:	bf04      	itt	eq
 8011fe4:	1949      	addeq	r1, r1, r5
 8011fe6:	6021      	streq	r1, [r4, #0]
 8011fe8:	6054      	str	r4, [r2, #4]
 8011fea:	e7c7      	b.n	8011f7c <_free_r+0x28>
 8011fec:	b003      	add	sp, #12
 8011fee:	bd30      	pop	{r4, r5, pc}
 8011ff0:	24000244 	.word	0x24000244

08011ff4 <_malloc_r>:
 8011ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ff6:	1ccd      	adds	r5, r1, #3
 8011ff8:	f025 0503 	bic.w	r5, r5, #3
 8011ffc:	3508      	adds	r5, #8
 8011ffe:	2d0c      	cmp	r5, #12
 8012000:	bf38      	it	cc
 8012002:	250c      	movcc	r5, #12
 8012004:	2d00      	cmp	r5, #0
 8012006:	4606      	mov	r6, r0
 8012008:	db01      	blt.n	801200e <_malloc_r+0x1a>
 801200a:	42a9      	cmp	r1, r5
 801200c:	d903      	bls.n	8012016 <_malloc_r+0x22>
 801200e:	230c      	movs	r3, #12
 8012010:	6033      	str	r3, [r6, #0]
 8012012:	2000      	movs	r0, #0
 8012014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012016:	f000 fa8d 	bl	8012534 <__malloc_lock>
 801201a:	4921      	ldr	r1, [pc, #132]	; (80120a0 <_malloc_r+0xac>)
 801201c:	680a      	ldr	r2, [r1, #0]
 801201e:	4614      	mov	r4, r2
 8012020:	b99c      	cbnz	r4, 801204a <_malloc_r+0x56>
 8012022:	4f20      	ldr	r7, [pc, #128]	; (80120a4 <_malloc_r+0xb0>)
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	b923      	cbnz	r3, 8012032 <_malloc_r+0x3e>
 8012028:	4621      	mov	r1, r4
 801202a:	4630      	mov	r0, r6
 801202c:	f000 f996 	bl	801235c <_sbrk_r>
 8012030:	6038      	str	r0, [r7, #0]
 8012032:	4629      	mov	r1, r5
 8012034:	4630      	mov	r0, r6
 8012036:	f000 f991 	bl	801235c <_sbrk_r>
 801203a:	1c43      	adds	r3, r0, #1
 801203c:	d123      	bne.n	8012086 <_malloc_r+0x92>
 801203e:	230c      	movs	r3, #12
 8012040:	6033      	str	r3, [r6, #0]
 8012042:	4630      	mov	r0, r6
 8012044:	f000 fa7c 	bl	8012540 <__malloc_unlock>
 8012048:	e7e3      	b.n	8012012 <_malloc_r+0x1e>
 801204a:	6823      	ldr	r3, [r4, #0]
 801204c:	1b5b      	subs	r3, r3, r5
 801204e:	d417      	bmi.n	8012080 <_malloc_r+0x8c>
 8012050:	2b0b      	cmp	r3, #11
 8012052:	d903      	bls.n	801205c <_malloc_r+0x68>
 8012054:	6023      	str	r3, [r4, #0]
 8012056:	441c      	add	r4, r3
 8012058:	6025      	str	r5, [r4, #0]
 801205a:	e004      	b.n	8012066 <_malloc_r+0x72>
 801205c:	6863      	ldr	r3, [r4, #4]
 801205e:	42a2      	cmp	r2, r4
 8012060:	bf0c      	ite	eq
 8012062:	600b      	streq	r3, [r1, #0]
 8012064:	6053      	strne	r3, [r2, #4]
 8012066:	4630      	mov	r0, r6
 8012068:	f000 fa6a 	bl	8012540 <__malloc_unlock>
 801206c:	f104 000b 	add.w	r0, r4, #11
 8012070:	1d23      	adds	r3, r4, #4
 8012072:	f020 0007 	bic.w	r0, r0, #7
 8012076:	1ac2      	subs	r2, r0, r3
 8012078:	d0cc      	beq.n	8012014 <_malloc_r+0x20>
 801207a:	1a1b      	subs	r3, r3, r0
 801207c:	50a3      	str	r3, [r4, r2]
 801207e:	e7c9      	b.n	8012014 <_malloc_r+0x20>
 8012080:	4622      	mov	r2, r4
 8012082:	6864      	ldr	r4, [r4, #4]
 8012084:	e7cc      	b.n	8012020 <_malloc_r+0x2c>
 8012086:	1cc4      	adds	r4, r0, #3
 8012088:	f024 0403 	bic.w	r4, r4, #3
 801208c:	42a0      	cmp	r0, r4
 801208e:	d0e3      	beq.n	8012058 <_malloc_r+0x64>
 8012090:	1a21      	subs	r1, r4, r0
 8012092:	4630      	mov	r0, r6
 8012094:	f000 f962 	bl	801235c <_sbrk_r>
 8012098:	3001      	adds	r0, #1
 801209a:	d1dd      	bne.n	8012058 <_malloc_r+0x64>
 801209c:	e7cf      	b.n	801203e <_malloc_r+0x4a>
 801209e:	bf00      	nop
 80120a0:	24000244 	.word	0x24000244
 80120a4:	24000248 	.word	0x24000248

080120a8 <__sfputc_r>:
 80120a8:	6893      	ldr	r3, [r2, #8]
 80120aa:	3b01      	subs	r3, #1
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	b410      	push	{r4}
 80120b0:	6093      	str	r3, [r2, #8]
 80120b2:	da08      	bge.n	80120c6 <__sfputc_r+0x1e>
 80120b4:	6994      	ldr	r4, [r2, #24]
 80120b6:	42a3      	cmp	r3, r4
 80120b8:	db01      	blt.n	80120be <__sfputc_r+0x16>
 80120ba:	290a      	cmp	r1, #10
 80120bc:	d103      	bne.n	80120c6 <__sfputc_r+0x1e>
 80120be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120c2:	f7fe bab1 	b.w	8010628 <__swbuf_r>
 80120c6:	6813      	ldr	r3, [r2, #0]
 80120c8:	1c58      	adds	r0, r3, #1
 80120ca:	6010      	str	r0, [r2, #0]
 80120cc:	7019      	strb	r1, [r3, #0]
 80120ce:	4608      	mov	r0, r1
 80120d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120d4:	4770      	bx	lr

080120d6 <__sfputs_r>:
 80120d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120d8:	4606      	mov	r6, r0
 80120da:	460f      	mov	r7, r1
 80120dc:	4614      	mov	r4, r2
 80120de:	18d5      	adds	r5, r2, r3
 80120e0:	42ac      	cmp	r4, r5
 80120e2:	d101      	bne.n	80120e8 <__sfputs_r+0x12>
 80120e4:	2000      	movs	r0, #0
 80120e6:	e007      	b.n	80120f8 <__sfputs_r+0x22>
 80120e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120ec:	463a      	mov	r2, r7
 80120ee:	4630      	mov	r0, r6
 80120f0:	f7ff ffda 	bl	80120a8 <__sfputc_r>
 80120f4:	1c43      	adds	r3, r0, #1
 80120f6:	d1f3      	bne.n	80120e0 <__sfputs_r+0xa>
 80120f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080120fc <_vfiprintf_r>:
 80120fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012100:	460d      	mov	r5, r1
 8012102:	b09d      	sub	sp, #116	; 0x74
 8012104:	4614      	mov	r4, r2
 8012106:	4698      	mov	r8, r3
 8012108:	4606      	mov	r6, r0
 801210a:	b118      	cbz	r0, 8012114 <_vfiprintf_r+0x18>
 801210c:	6983      	ldr	r3, [r0, #24]
 801210e:	b90b      	cbnz	r3, 8012114 <_vfiprintf_r+0x18>
 8012110:	f7ff fa72 	bl	80115f8 <__sinit>
 8012114:	4b89      	ldr	r3, [pc, #548]	; (801233c <_vfiprintf_r+0x240>)
 8012116:	429d      	cmp	r5, r3
 8012118:	d11b      	bne.n	8012152 <_vfiprintf_r+0x56>
 801211a:	6875      	ldr	r5, [r6, #4]
 801211c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801211e:	07d9      	lsls	r1, r3, #31
 8012120:	d405      	bmi.n	801212e <_vfiprintf_r+0x32>
 8012122:	89ab      	ldrh	r3, [r5, #12]
 8012124:	059a      	lsls	r2, r3, #22
 8012126:	d402      	bmi.n	801212e <_vfiprintf_r+0x32>
 8012128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801212a:	f7ff fb08 	bl	801173e <__retarget_lock_acquire_recursive>
 801212e:	89ab      	ldrh	r3, [r5, #12]
 8012130:	071b      	lsls	r3, r3, #28
 8012132:	d501      	bpl.n	8012138 <_vfiprintf_r+0x3c>
 8012134:	692b      	ldr	r3, [r5, #16]
 8012136:	b9eb      	cbnz	r3, 8012174 <_vfiprintf_r+0x78>
 8012138:	4629      	mov	r1, r5
 801213a:	4630      	mov	r0, r6
 801213c:	f7fe fac6 	bl	80106cc <__swsetup_r>
 8012140:	b1c0      	cbz	r0, 8012174 <_vfiprintf_r+0x78>
 8012142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012144:	07dc      	lsls	r4, r3, #31
 8012146:	d50e      	bpl.n	8012166 <_vfiprintf_r+0x6a>
 8012148:	f04f 30ff 	mov.w	r0, #4294967295
 801214c:	b01d      	add	sp, #116	; 0x74
 801214e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012152:	4b7b      	ldr	r3, [pc, #492]	; (8012340 <_vfiprintf_r+0x244>)
 8012154:	429d      	cmp	r5, r3
 8012156:	d101      	bne.n	801215c <_vfiprintf_r+0x60>
 8012158:	68b5      	ldr	r5, [r6, #8]
 801215a:	e7df      	b.n	801211c <_vfiprintf_r+0x20>
 801215c:	4b79      	ldr	r3, [pc, #484]	; (8012344 <_vfiprintf_r+0x248>)
 801215e:	429d      	cmp	r5, r3
 8012160:	bf08      	it	eq
 8012162:	68f5      	ldreq	r5, [r6, #12]
 8012164:	e7da      	b.n	801211c <_vfiprintf_r+0x20>
 8012166:	89ab      	ldrh	r3, [r5, #12]
 8012168:	0598      	lsls	r0, r3, #22
 801216a:	d4ed      	bmi.n	8012148 <_vfiprintf_r+0x4c>
 801216c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801216e:	f7ff fae7 	bl	8011740 <__retarget_lock_release_recursive>
 8012172:	e7e9      	b.n	8012148 <_vfiprintf_r+0x4c>
 8012174:	2300      	movs	r3, #0
 8012176:	9309      	str	r3, [sp, #36]	; 0x24
 8012178:	2320      	movs	r3, #32
 801217a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801217e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012182:	2330      	movs	r3, #48	; 0x30
 8012184:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012348 <_vfiprintf_r+0x24c>
 8012188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801218c:	f04f 0901 	mov.w	r9, #1
 8012190:	4623      	mov	r3, r4
 8012192:	469a      	mov	sl, r3
 8012194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012198:	b10a      	cbz	r2, 801219e <_vfiprintf_r+0xa2>
 801219a:	2a25      	cmp	r2, #37	; 0x25
 801219c:	d1f9      	bne.n	8012192 <_vfiprintf_r+0x96>
 801219e:	ebba 0b04 	subs.w	fp, sl, r4
 80121a2:	d00b      	beq.n	80121bc <_vfiprintf_r+0xc0>
 80121a4:	465b      	mov	r3, fp
 80121a6:	4622      	mov	r2, r4
 80121a8:	4629      	mov	r1, r5
 80121aa:	4630      	mov	r0, r6
 80121ac:	f7ff ff93 	bl	80120d6 <__sfputs_r>
 80121b0:	3001      	adds	r0, #1
 80121b2:	f000 80aa 	beq.w	801230a <_vfiprintf_r+0x20e>
 80121b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121b8:	445a      	add	r2, fp
 80121ba:	9209      	str	r2, [sp, #36]	; 0x24
 80121bc:	f89a 3000 	ldrb.w	r3, [sl]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	f000 80a2 	beq.w	801230a <_vfiprintf_r+0x20e>
 80121c6:	2300      	movs	r3, #0
 80121c8:	f04f 32ff 	mov.w	r2, #4294967295
 80121cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80121d0:	f10a 0a01 	add.w	sl, sl, #1
 80121d4:	9304      	str	r3, [sp, #16]
 80121d6:	9307      	str	r3, [sp, #28]
 80121d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80121dc:	931a      	str	r3, [sp, #104]	; 0x68
 80121de:	4654      	mov	r4, sl
 80121e0:	2205      	movs	r2, #5
 80121e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121e6:	4858      	ldr	r0, [pc, #352]	; (8012348 <_vfiprintf_r+0x24c>)
 80121e8:	f7ee f882 	bl	80002f0 <memchr>
 80121ec:	9a04      	ldr	r2, [sp, #16]
 80121ee:	b9d8      	cbnz	r0, 8012228 <_vfiprintf_r+0x12c>
 80121f0:	06d1      	lsls	r1, r2, #27
 80121f2:	bf44      	itt	mi
 80121f4:	2320      	movmi	r3, #32
 80121f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80121fa:	0713      	lsls	r3, r2, #28
 80121fc:	bf44      	itt	mi
 80121fe:	232b      	movmi	r3, #43	; 0x2b
 8012200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012204:	f89a 3000 	ldrb.w	r3, [sl]
 8012208:	2b2a      	cmp	r3, #42	; 0x2a
 801220a:	d015      	beq.n	8012238 <_vfiprintf_r+0x13c>
 801220c:	9a07      	ldr	r2, [sp, #28]
 801220e:	4654      	mov	r4, sl
 8012210:	2000      	movs	r0, #0
 8012212:	f04f 0c0a 	mov.w	ip, #10
 8012216:	4621      	mov	r1, r4
 8012218:	f811 3b01 	ldrb.w	r3, [r1], #1
 801221c:	3b30      	subs	r3, #48	; 0x30
 801221e:	2b09      	cmp	r3, #9
 8012220:	d94e      	bls.n	80122c0 <_vfiprintf_r+0x1c4>
 8012222:	b1b0      	cbz	r0, 8012252 <_vfiprintf_r+0x156>
 8012224:	9207      	str	r2, [sp, #28]
 8012226:	e014      	b.n	8012252 <_vfiprintf_r+0x156>
 8012228:	eba0 0308 	sub.w	r3, r0, r8
 801222c:	fa09 f303 	lsl.w	r3, r9, r3
 8012230:	4313      	orrs	r3, r2
 8012232:	9304      	str	r3, [sp, #16]
 8012234:	46a2      	mov	sl, r4
 8012236:	e7d2      	b.n	80121de <_vfiprintf_r+0xe2>
 8012238:	9b03      	ldr	r3, [sp, #12]
 801223a:	1d19      	adds	r1, r3, #4
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	9103      	str	r1, [sp, #12]
 8012240:	2b00      	cmp	r3, #0
 8012242:	bfbb      	ittet	lt
 8012244:	425b      	neglt	r3, r3
 8012246:	f042 0202 	orrlt.w	r2, r2, #2
 801224a:	9307      	strge	r3, [sp, #28]
 801224c:	9307      	strlt	r3, [sp, #28]
 801224e:	bfb8      	it	lt
 8012250:	9204      	strlt	r2, [sp, #16]
 8012252:	7823      	ldrb	r3, [r4, #0]
 8012254:	2b2e      	cmp	r3, #46	; 0x2e
 8012256:	d10c      	bne.n	8012272 <_vfiprintf_r+0x176>
 8012258:	7863      	ldrb	r3, [r4, #1]
 801225a:	2b2a      	cmp	r3, #42	; 0x2a
 801225c:	d135      	bne.n	80122ca <_vfiprintf_r+0x1ce>
 801225e:	9b03      	ldr	r3, [sp, #12]
 8012260:	1d1a      	adds	r2, r3, #4
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	9203      	str	r2, [sp, #12]
 8012266:	2b00      	cmp	r3, #0
 8012268:	bfb8      	it	lt
 801226a:	f04f 33ff 	movlt.w	r3, #4294967295
 801226e:	3402      	adds	r4, #2
 8012270:	9305      	str	r3, [sp, #20]
 8012272:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012358 <_vfiprintf_r+0x25c>
 8012276:	7821      	ldrb	r1, [r4, #0]
 8012278:	2203      	movs	r2, #3
 801227a:	4650      	mov	r0, sl
 801227c:	f7ee f838 	bl	80002f0 <memchr>
 8012280:	b140      	cbz	r0, 8012294 <_vfiprintf_r+0x198>
 8012282:	2340      	movs	r3, #64	; 0x40
 8012284:	eba0 000a 	sub.w	r0, r0, sl
 8012288:	fa03 f000 	lsl.w	r0, r3, r0
 801228c:	9b04      	ldr	r3, [sp, #16]
 801228e:	4303      	orrs	r3, r0
 8012290:	3401      	adds	r4, #1
 8012292:	9304      	str	r3, [sp, #16]
 8012294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012298:	482c      	ldr	r0, [pc, #176]	; (801234c <_vfiprintf_r+0x250>)
 801229a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801229e:	2206      	movs	r2, #6
 80122a0:	f7ee f826 	bl	80002f0 <memchr>
 80122a4:	2800      	cmp	r0, #0
 80122a6:	d03f      	beq.n	8012328 <_vfiprintf_r+0x22c>
 80122a8:	4b29      	ldr	r3, [pc, #164]	; (8012350 <_vfiprintf_r+0x254>)
 80122aa:	bb1b      	cbnz	r3, 80122f4 <_vfiprintf_r+0x1f8>
 80122ac:	9b03      	ldr	r3, [sp, #12]
 80122ae:	3307      	adds	r3, #7
 80122b0:	f023 0307 	bic.w	r3, r3, #7
 80122b4:	3308      	adds	r3, #8
 80122b6:	9303      	str	r3, [sp, #12]
 80122b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122ba:	443b      	add	r3, r7
 80122bc:	9309      	str	r3, [sp, #36]	; 0x24
 80122be:	e767      	b.n	8012190 <_vfiprintf_r+0x94>
 80122c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80122c4:	460c      	mov	r4, r1
 80122c6:	2001      	movs	r0, #1
 80122c8:	e7a5      	b.n	8012216 <_vfiprintf_r+0x11a>
 80122ca:	2300      	movs	r3, #0
 80122cc:	3401      	adds	r4, #1
 80122ce:	9305      	str	r3, [sp, #20]
 80122d0:	4619      	mov	r1, r3
 80122d2:	f04f 0c0a 	mov.w	ip, #10
 80122d6:	4620      	mov	r0, r4
 80122d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80122dc:	3a30      	subs	r2, #48	; 0x30
 80122de:	2a09      	cmp	r2, #9
 80122e0:	d903      	bls.n	80122ea <_vfiprintf_r+0x1ee>
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d0c5      	beq.n	8012272 <_vfiprintf_r+0x176>
 80122e6:	9105      	str	r1, [sp, #20]
 80122e8:	e7c3      	b.n	8012272 <_vfiprintf_r+0x176>
 80122ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80122ee:	4604      	mov	r4, r0
 80122f0:	2301      	movs	r3, #1
 80122f2:	e7f0      	b.n	80122d6 <_vfiprintf_r+0x1da>
 80122f4:	ab03      	add	r3, sp, #12
 80122f6:	9300      	str	r3, [sp, #0]
 80122f8:	462a      	mov	r2, r5
 80122fa:	4b16      	ldr	r3, [pc, #88]	; (8012354 <_vfiprintf_r+0x258>)
 80122fc:	a904      	add	r1, sp, #16
 80122fe:	4630      	mov	r0, r6
 8012300:	f7fd fd52 	bl	800fda8 <_printf_float>
 8012304:	4607      	mov	r7, r0
 8012306:	1c78      	adds	r0, r7, #1
 8012308:	d1d6      	bne.n	80122b8 <_vfiprintf_r+0x1bc>
 801230a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801230c:	07d9      	lsls	r1, r3, #31
 801230e:	d405      	bmi.n	801231c <_vfiprintf_r+0x220>
 8012310:	89ab      	ldrh	r3, [r5, #12]
 8012312:	059a      	lsls	r2, r3, #22
 8012314:	d402      	bmi.n	801231c <_vfiprintf_r+0x220>
 8012316:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012318:	f7ff fa12 	bl	8011740 <__retarget_lock_release_recursive>
 801231c:	89ab      	ldrh	r3, [r5, #12]
 801231e:	065b      	lsls	r3, r3, #25
 8012320:	f53f af12 	bmi.w	8012148 <_vfiprintf_r+0x4c>
 8012324:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012326:	e711      	b.n	801214c <_vfiprintf_r+0x50>
 8012328:	ab03      	add	r3, sp, #12
 801232a:	9300      	str	r3, [sp, #0]
 801232c:	462a      	mov	r2, r5
 801232e:	4b09      	ldr	r3, [pc, #36]	; (8012354 <_vfiprintf_r+0x258>)
 8012330:	a904      	add	r1, sp, #16
 8012332:	4630      	mov	r0, r6
 8012334:	f7fd ffc4 	bl	80102c0 <_printf_i>
 8012338:	e7e4      	b.n	8012304 <_vfiprintf_r+0x208>
 801233a:	bf00      	nop
 801233c:	08013108 	.word	0x08013108
 8012340:	08013128 	.word	0x08013128
 8012344:	080130e8 	.word	0x080130e8
 8012348:	080132a4 	.word	0x080132a4
 801234c:	080132ae 	.word	0x080132ae
 8012350:	0800fda9 	.word	0x0800fda9
 8012354:	080120d7 	.word	0x080120d7
 8012358:	080132aa 	.word	0x080132aa

0801235c <_sbrk_r>:
 801235c:	b538      	push	{r3, r4, r5, lr}
 801235e:	4d06      	ldr	r5, [pc, #24]	; (8012378 <_sbrk_r+0x1c>)
 8012360:	2300      	movs	r3, #0
 8012362:	4604      	mov	r4, r0
 8012364:	4608      	mov	r0, r1
 8012366:	602b      	str	r3, [r5, #0]
 8012368:	f7f1 fb60 	bl	8003a2c <_sbrk>
 801236c:	1c43      	adds	r3, r0, #1
 801236e:	d102      	bne.n	8012376 <_sbrk_r+0x1a>
 8012370:	682b      	ldr	r3, [r5, #0]
 8012372:	b103      	cbz	r3, 8012376 <_sbrk_r+0x1a>
 8012374:	6023      	str	r3, [r4, #0]
 8012376:	bd38      	pop	{r3, r4, r5, pc}
 8012378:	240005d0 	.word	0x240005d0

0801237c <__sread>:
 801237c:	b510      	push	{r4, lr}
 801237e:	460c      	mov	r4, r1
 8012380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012384:	f000 f8e2 	bl	801254c <_read_r>
 8012388:	2800      	cmp	r0, #0
 801238a:	bfab      	itete	ge
 801238c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801238e:	89a3      	ldrhlt	r3, [r4, #12]
 8012390:	181b      	addge	r3, r3, r0
 8012392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012396:	bfac      	ite	ge
 8012398:	6563      	strge	r3, [r4, #84]	; 0x54
 801239a:	81a3      	strhlt	r3, [r4, #12]
 801239c:	bd10      	pop	{r4, pc}

0801239e <__swrite>:
 801239e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a2:	461f      	mov	r7, r3
 80123a4:	898b      	ldrh	r3, [r1, #12]
 80123a6:	05db      	lsls	r3, r3, #23
 80123a8:	4605      	mov	r5, r0
 80123aa:	460c      	mov	r4, r1
 80123ac:	4616      	mov	r6, r2
 80123ae:	d505      	bpl.n	80123bc <__swrite+0x1e>
 80123b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123b4:	2302      	movs	r3, #2
 80123b6:	2200      	movs	r2, #0
 80123b8:	f000 f898 	bl	80124ec <_lseek_r>
 80123bc:	89a3      	ldrh	r3, [r4, #12]
 80123be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80123c6:	81a3      	strh	r3, [r4, #12]
 80123c8:	4632      	mov	r2, r6
 80123ca:	463b      	mov	r3, r7
 80123cc:	4628      	mov	r0, r5
 80123ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123d2:	f000 b817 	b.w	8012404 <_write_r>

080123d6 <__sseek>:
 80123d6:	b510      	push	{r4, lr}
 80123d8:	460c      	mov	r4, r1
 80123da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123de:	f000 f885 	bl	80124ec <_lseek_r>
 80123e2:	1c43      	adds	r3, r0, #1
 80123e4:	89a3      	ldrh	r3, [r4, #12]
 80123e6:	bf15      	itete	ne
 80123e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80123ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80123ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80123f2:	81a3      	strheq	r3, [r4, #12]
 80123f4:	bf18      	it	ne
 80123f6:	81a3      	strhne	r3, [r4, #12]
 80123f8:	bd10      	pop	{r4, pc}

080123fa <__sclose>:
 80123fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123fe:	f000 b831 	b.w	8012464 <_close_r>
	...

08012404 <_write_r>:
 8012404:	b538      	push	{r3, r4, r5, lr}
 8012406:	4d07      	ldr	r5, [pc, #28]	; (8012424 <_write_r+0x20>)
 8012408:	4604      	mov	r4, r0
 801240a:	4608      	mov	r0, r1
 801240c:	4611      	mov	r1, r2
 801240e:	2200      	movs	r2, #0
 8012410:	602a      	str	r2, [r5, #0]
 8012412:	461a      	mov	r2, r3
 8012414:	f7f0 fb04 	bl	8002a20 <_write>
 8012418:	1c43      	adds	r3, r0, #1
 801241a:	d102      	bne.n	8012422 <_write_r+0x1e>
 801241c:	682b      	ldr	r3, [r5, #0]
 801241e:	b103      	cbz	r3, 8012422 <_write_r+0x1e>
 8012420:	6023      	str	r3, [r4, #0]
 8012422:	bd38      	pop	{r3, r4, r5, pc}
 8012424:	240005d0 	.word	0x240005d0

08012428 <__assert_func>:
 8012428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801242a:	4614      	mov	r4, r2
 801242c:	461a      	mov	r2, r3
 801242e:	4b09      	ldr	r3, [pc, #36]	; (8012454 <__assert_func+0x2c>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	4605      	mov	r5, r0
 8012434:	68d8      	ldr	r0, [r3, #12]
 8012436:	b14c      	cbz	r4, 801244c <__assert_func+0x24>
 8012438:	4b07      	ldr	r3, [pc, #28]	; (8012458 <__assert_func+0x30>)
 801243a:	9100      	str	r1, [sp, #0]
 801243c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012440:	4906      	ldr	r1, [pc, #24]	; (801245c <__assert_func+0x34>)
 8012442:	462b      	mov	r3, r5
 8012444:	f000 f81e 	bl	8012484 <fiprintf>
 8012448:	f000 f89f 	bl	801258a <abort>
 801244c:	4b04      	ldr	r3, [pc, #16]	; (8012460 <__assert_func+0x38>)
 801244e:	461c      	mov	r4, r3
 8012450:	e7f3      	b.n	801243a <__assert_func+0x12>
 8012452:	bf00      	nop
 8012454:	24000028 	.word	0x24000028
 8012458:	080132b5 	.word	0x080132b5
 801245c:	080132c2 	.word	0x080132c2
 8012460:	080132f0 	.word	0x080132f0

08012464 <_close_r>:
 8012464:	b538      	push	{r3, r4, r5, lr}
 8012466:	4d06      	ldr	r5, [pc, #24]	; (8012480 <_close_r+0x1c>)
 8012468:	2300      	movs	r3, #0
 801246a:	4604      	mov	r4, r0
 801246c:	4608      	mov	r0, r1
 801246e:	602b      	str	r3, [r5, #0]
 8012470:	f7f1 faa7 	bl	80039c2 <_close>
 8012474:	1c43      	adds	r3, r0, #1
 8012476:	d102      	bne.n	801247e <_close_r+0x1a>
 8012478:	682b      	ldr	r3, [r5, #0]
 801247a:	b103      	cbz	r3, 801247e <_close_r+0x1a>
 801247c:	6023      	str	r3, [r4, #0]
 801247e:	bd38      	pop	{r3, r4, r5, pc}
 8012480:	240005d0 	.word	0x240005d0

08012484 <fiprintf>:
 8012484:	b40e      	push	{r1, r2, r3}
 8012486:	b503      	push	{r0, r1, lr}
 8012488:	4601      	mov	r1, r0
 801248a:	ab03      	add	r3, sp, #12
 801248c:	4805      	ldr	r0, [pc, #20]	; (80124a4 <fiprintf+0x20>)
 801248e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012492:	6800      	ldr	r0, [r0, #0]
 8012494:	9301      	str	r3, [sp, #4]
 8012496:	f7ff fe31 	bl	80120fc <_vfiprintf_r>
 801249a:	b002      	add	sp, #8
 801249c:	f85d eb04 	ldr.w	lr, [sp], #4
 80124a0:	b003      	add	sp, #12
 80124a2:	4770      	bx	lr
 80124a4:	24000028 	.word	0x24000028

080124a8 <_fstat_r>:
 80124a8:	b538      	push	{r3, r4, r5, lr}
 80124aa:	4d07      	ldr	r5, [pc, #28]	; (80124c8 <_fstat_r+0x20>)
 80124ac:	2300      	movs	r3, #0
 80124ae:	4604      	mov	r4, r0
 80124b0:	4608      	mov	r0, r1
 80124b2:	4611      	mov	r1, r2
 80124b4:	602b      	str	r3, [r5, #0]
 80124b6:	f7f1 fa90 	bl	80039da <_fstat>
 80124ba:	1c43      	adds	r3, r0, #1
 80124bc:	d102      	bne.n	80124c4 <_fstat_r+0x1c>
 80124be:	682b      	ldr	r3, [r5, #0]
 80124c0:	b103      	cbz	r3, 80124c4 <_fstat_r+0x1c>
 80124c2:	6023      	str	r3, [r4, #0]
 80124c4:	bd38      	pop	{r3, r4, r5, pc}
 80124c6:	bf00      	nop
 80124c8:	240005d0 	.word	0x240005d0

080124cc <_isatty_r>:
 80124cc:	b538      	push	{r3, r4, r5, lr}
 80124ce:	4d06      	ldr	r5, [pc, #24]	; (80124e8 <_isatty_r+0x1c>)
 80124d0:	2300      	movs	r3, #0
 80124d2:	4604      	mov	r4, r0
 80124d4:	4608      	mov	r0, r1
 80124d6:	602b      	str	r3, [r5, #0]
 80124d8:	f7f1 fa8f 	bl	80039fa <_isatty>
 80124dc:	1c43      	adds	r3, r0, #1
 80124de:	d102      	bne.n	80124e6 <_isatty_r+0x1a>
 80124e0:	682b      	ldr	r3, [r5, #0]
 80124e2:	b103      	cbz	r3, 80124e6 <_isatty_r+0x1a>
 80124e4:	6023      	str	r3, [r4, #0]
 80124e6:	bd38      	pop	{r3, r4, r5, pc}
 80124e8:	240005d0 	.word	0x240005d0

080124ec <_lseek_r>:
 80124ec:	b538      	push	{r3, r4, r5, lr}
 80124ee:	4d07      	ldr	r5, [pc, #28]	; (801250c <_lseek_r+0x20>)
 80124f0:	4604      	mov	r4, r0
 80124f2:	4608      	mov	r0, r1
 80124f4:	4611      	mov	r1, r2
 80124f6:	2200      	movs	r2, #0
 80124f8:	602a      	str	r2, [r5, #0]
 80124fa:	461a      	mov	r2, r3
 80124fc:	f7f1 fa88 	bl	8003a10 <_lseek>
 8012500:	1c43      	adds	r3, r0, #1
 8012502:	d102      	bne.n	801250a <_lseek_r+0x1e>
 8012504:	682b      	ldr	r3, [r5, #0]
 8012506:	b103      	cbz	r3, 801250a <_lseek_r+0x1e>
 8012508:	6023      	str	r3, [r4, #0]
 801250a:	bd38      	pop	{r3, r4, r5, pc}
 801250c:	240005d0 	.word	0x240005d0

08012510 <__ascii_mbtowc>:
 8012510:	b082      	sub	sp, #8
 8012512:	b901      	cbnz	r1, 8012516 <__ascii_mbtowc+0x6>
 8012514:	a901      	add	r1, sp, #4
 8012516:	b142      	cbz	r2, 801252a <__ascii_mbtowc+0x1a>
 8012518:	b14b      	cbz	r3, 801252e <__ascii_mbtowc+0x1e>
 801251a:	7813      	ldrb	r3, [r2, #0]
 801251c:	600b      	str	r3, [r1, #0]
 801251e:	7812      	ldrb	r2, [r2, #0]
 8012520:	1e10      	subs	r0, r2, #0
 8012522:	bf18      	it	ne
 8012524:	2001      	movne	r0, #1
 8012526:	b002      	add	sp, #8
 8012528:	4770      	bx	lr
 801252a:	4610      	mov	r0, r2
 801252c:	e7fb      	b.n	8012526 <__ascii_mbtowc+0x16>
 801252e:	f06f 0001 	mvn.w	r0, #1
 8012532:	e7f8      	b.n	8012526 <__ascii_mbtowc+0x16>

08012534 <__malloc_lock>:
 8012534:	4801      	ldr	r0, [pc, #4]	; (801253c <__malloc_lock+0x8>)
 8012536:	f7ff b902 	b.w	801173e <__retarget_lock_acquire_recursive>
 801253a:	bf00      	nop
 801253c:	240005c8 	.word	0x240005c8

08012540 <__malloc_unlock>:
 8012540:	4801      	ldr	r0, [pc, #4]	; (8012548 <__malloc_unlock+0x8>)
 8012542:	f7ff b8fd 	b.w	8011740 <__retarget_lock_release_recursive>
 8012546:	bf00      	nop
 8012548:	240005c8 	.word	0x240005c8

0801254c <_read_r>:
 801254c:	b538      	push	{r3, r4, r5, lr}
 801254e:	4d07      	ldr	r5, [pc, #28]	; (801256c <_read_r+0x20>)
 8012550:	4604      	mov	r4, r0
 8012552:	4608      	mov	r0, r1
 8012554:	4611      	mov	r1, r2
 8012556:	2200      	movs	r2, #0
 8012558:	602a      	str	r2, [r5, #0]
 801255a:	461a      	mov	r2, r3
 801255c:	f7f1 fa14 	bl	8003988 <_read>
 8012560:	1c43      	adds	r3, r0, #1
 8012562:	d102      	bne.n	801256a <_read_r+0x1e>
 8012564:	682b      	ldr	r3, [r5, #0]
 8012566:	b103      	cbz	r3, 801256a <_read_r+0x1e>
 8012568:	6023      	str	r3, [r4, #0]
 801256a:	bd38      	pop	{r3, r4, r5, pc}
 801256c:	240005d0 	.word	0x240005d0

08012570 <__ascii_wctomb>:
 8012570:	b149      	cbz	r1, 8012586 <__ascii_wctomb+0x16>
 8012572:	2aff      	cmp	r2, #255	; 0xff
 8012574:	bf85      	ittet	hi
 8012576:	238a      	movhi	r3, #138	; 0x8a
 8012578:	6003      	strhi	r3, [r0, #0]
 801257a:	700a      	strbls	r2, [r1, #0]
 801257c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012580:	bf98      	it	ls
 8012582:	2001      	movls	r0, #1
 8012584:	4770      	bx	lr
 8012586:	4608      	mov	r0, r1
 8012588:	4770      	bx	lr

0801258a <abort>:
 801258a:	b508      	push	{r3, lr}
 801258c:	2006      	movs	r0, #6
 801258e:	f000 f82b 	bl	80125e8 <raise>
 8012592:	2001      	movs	r0, #1
 8012594:	f7f1 f9ee 	bl	8003974 <_exit>

08012598 <_raise_r>:
 8012598:	291f      	cmp	r1, #31
 801259a:	b538      	push	{r3, r4, r5, lr}
 801259c:	4604      	mov	r4, r0
 801259e:	460d      	mov	r5, r1
 80125a0:	d904      	bls.n	80125ac <_raise_r+0x14>
 80125a2:	2316      	movs	r3, #22
 80125a4:	6003      	str	r3, [r0, #0]
 80125a6:	f04f 30ff 	mov.w	r0, #4294967295
 80125aa:	bd38      	pop	{r3, r4, r5, pc}
 80125ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80125ae:	b112      	cbz	r2, 80125b6 <_raise_r+0x1e>
 80125b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80125b4:	b94b      	cbnz	r3, 80125ca <_raise_r+0x32>
 80125b6:	4620      	mov	r0, r4
 80125b8:	f000 f830 	bl	801261c <_getpid_r>
 80125bc:	462a      	mov	r2, r5
 80125be:	4601      	mov	r1, r0
 80125c0:	4620      	mov	r0, r4
 80125c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125c6:	f000 b817 	b.w	80125f8 <_kill_r>
 80125ca:	2b01      	cmp	r3, #1
 80125cc:	d00a      	beq.n	80125e4 <_raise_r+0x4c>
 80125ce:	1c59      	adds	r1, r3, #1
 80125d0:	d103      	bne.n	80125da <_raise_r+0x42>
 80125d2:	2316      	movs	r3, #22
 80125d4:	6003      	str	r3, [r0, #0]
 80125d6:	2001      	movs	r0, #1
 80125d8:	e7e7      	b.n	80125aa <_raise_r+0x12>
 80125da:	2400      	movs	r4, #0
 80125dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80125e0:	4628      	mov	r0, r5
 80125e2:	4798      	blx	r3
 80125e4:	2000      	movs	r0, #0
 80125e6:	e7e0      	b.n	80125aa <_raise_r+0x12>

080125e8 <raise>:
 80125e8:	4b02      	ldr	r3, [pc, #8]	; (80125f4 <raise+0xc>)
 80125ea:	4601      	mov	r1, r0
 80125ec:	6818      	ldr	r0, [r3, #0]
 80125ee:	f7ff bfd3 	b.w	8012598 <_raise_r>
 80125f2:	bf00      	nop
 80125f4:	24000028 	.word	0x24000028

080125f8 <_kill_r>:
 80125f8:	b538      	push	{r3, r4, r5, lr}
 80125fa:	4d07      	ldr	r5, [pc, #28]	; (8012618 <_kill_r+0x20>)
 80125fc:	2300      	movs	r3, #0
 80125fe:	4604      	mov	r4, r0
 8012600:	4608      	mov	r0, r1
 8012602:	4611      	mov	r1, r2
 8012604:	602b      	str	r3, [r5, #0]
 8012606:	f7f1 f9a5 	bl	8003954 <_kill>
 801260a:	1c43      	adds	r3, r0, #1
 801260c:	d102      	bne.n	8012614 <_kill_r+0x1c>
 801260e:	682b      	ldr	r3, [r5, #0]
 8012610:	b103      	cbz	r3, 8012614 <_kill_r+0x1c>
 8012612:	6023      	str	r3, [r4, #0]
 8012614:	bd38      	pop	{r3, r4, r5, pc}
 8012616:	bf00      	nop
 8012618:	240005d0 	.word	0x240005d0

0801261c <_getpid_r>:
 801261c:	f7f1 b992 	b.w	8003944 <_getpid>

08012620 <atan2>:
 8012620:	f000 b862 	b.w	80126e8 <__ieee754_atan2>
 8012624:	0000      	movs	r0, r0
	...

08012628 <sqrt>:
 8012628:	b508      	push	{r3, lr}
 801262a:	ed2d 8b04 	vpush	{d8-d9}
 801262e:	eeb0 8b40 	vmov.f64	d8, d0
 8012632:	f000 f927 	bl	8012884 <__ieee754_sqrt>
 8012636:	4b10      	ldr	r3, [pc, #64]	; (8012678 <sqrt+0x50>)
 8012638:	f993 3000 	ldrsb.w	r3, [r3]
 801263c:	3301      	adds	r3, #1
 801263e:	d011      	beq.n	8012664 <sqrt+0x3c>
 8012640:	eeb4 8b48 	vcmp.f64	d8, d8
 8012644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012648:	d60c      	bvs.n	8012664 <sqrt+0x3c>
 801264a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8012670 <sqrt+0x48>
 801264e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012656:	d505      	bpl.n	8012664 <sqrt+0x3c>
 8012658:	f7fd fae2 	bl	800fc20 <__errno>
 801265c:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8012660:	2321      	movs	r3, #33	; 0x21
 8012662:	6003      	str	r3, [r0, #0]
 8012664:	ecbd 8b04 	vpop	{d8-d9}
 8012668:	bd08      	pop	{r3, pc}
 801266a:	bf00      	nop
 801266c:	f3af 8000 	nop.w
	...
 8012678:	240001f8 	.word	0x240001f8

0801267c <asinf>:
 801267c:	b508      	push	{r3, lr}
 801267e:	ed2d 8b02 	vpush	{d8}
 8012682:	eeb0 8a40 	vmov.f32	s16, s0
 8012686:	f000 f901 	bl	801288c <__ieee754_asinf>
 801268a:	4b13      	ldr	r3, [pc, #76]	; (80126d8 <asinf+0x5c>)
 801268c:	f993 3000 	ldrsb.w	r3, [r3]
 8012690:	3301      	adds	r3, #1
 8012692:	eef0 8a40 	vmov.f32	s17, s0
 8012696:	d01a      	beq.n	80126ce <asinf+0x52>
 8012698:	eeb4 8a48 	vcmp.f32	s16, s16
 801269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a0:	d615      	bvs.n	80126ce <asinf+0x52>
 80126a2:	eeb0 0a48 	vmov.f32	s0, s16
 80126a6:	f000 fc53 	bl	8012f50 <fabsf>
 80126aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80126ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80126b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126b6:	dd0a      	ble.n	80126ce <asinf+0x52>
 80126b8:	f7fd fab2 	bl	800fc20 <__errno>
 80126bc:	ecbd 8b02 	vpop	{d8}
 80126c0:	2321      	movs	r3, #33	; 0x21
 80126c2:	6003      	str	r3, [r0, #0]
 80126c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80126c8:	4804      	ldr	r0, [pc, #16]	; (80126dc <asinf+0x60>)
 80126ca:	f000 bc49 	b.w	8012f60 <nanf>
 80126ce:	eeb0 0a68 	vmov.f32	s0, s17
 80126d2:	ecbd 8b02 	vpop	{d8}
 80126d6:	bd08      	pop	{r3, pc}
 80126d8:	240001f8 	.word	0x240001f8
 80126dc:	080132f0 	.word	0x080132f0

080126e0 <atan2f>:
 80126e0:	f000 b9ba 	b.w	8012a58 <__ieee754_atan2f>
 80126e4:	0000      	movs	r0, r0
	...

080126e8 <__ieee754_atan2>:
 80126e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80126ea:	ee11 6a10 	vmov	r6, s2
 80126ee:	ee11 0a90 	vmov	r0, s3
 80126f2:	4273      	negs	r3, r6
 80126f4:	4f60      	ldr	r7, [pc, #384]	; (8012878 <__ieee754_atan2+0x190>)
 80126f6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80126fa:	4333      	orrs	r3, r6
 80126fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012700:	42bb      	cmp	r3, r7
 8012702:	ed8d 0b00 	vstr	d0, [sp]
 8012706:	d80b      	bhi.n	8012720 <__ieee754_atan2+0x38>
 8012708:	e9dd c500 	ldrd	ip, r5, [sp]
 801270c:	f1cc 0100 	rsb	r1, ip, #0
 8012710:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012714:	ea41 010c 	orr.w	r1, r1, ip
 8012718:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 801271c:	42b9      	cmp	r1, r7
 801271e:	d906      	bls.n	801272e <__ieee754_atan2+0x46>
 8012720:	ed9d 7b00 	vldr	d7, [sp]
 8012724:	ee37 7b01 	vadd.f64	d7, d7, d1
 8012728:	ed8d 7b00 	vstr	d7, [sp]
 801272c:	e054      	b.n	80127d8 <__ieee754_atan2+0xf0>
 801272e:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8012732:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8012736:	4331      	orrs	r1, r6
 8012738:	d104      	bne.n	8012744 <__ieee754_atan2+0x5c>
 801273a:	b003      	add	sp, #12
 801273c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012740:	f000 ba2e 	b.w	8012ba0 <atan>
 8012744:	1784      	asrs	r4, r0, #30
 8012746:	f004 0402 	and.w	r4, r4, #2
 801274a:	ea53 010c 	orrs.w	r1, r3, ip
 801274e:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8012752:	d109      	bne.n	8012768 <__ieee754_atan2+0x80>
 8012754:	2c02      	cmp	r4, #2
 8012756:	d069      	beq.n	801282c <__ieee754_atan2+0x144>
 8012758:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8012840 <__ieee754_atan2+0x158>
 801275c:	ed9d 6b00 	vldr	d6, [sp]
 8012760:	2c03      	cmp	r4, #3
 8012762:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012766:	e7df      	b.n	8012728 <__ieee754_atan2+0x40>
 8012768:	ea52 0106 	orrs.w	r1, r2, r6
 801276c:	d107      	bne.n	801277e <__ieee754_atan2+0x96>
 801276e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8012848 <__ieee754_atan2+0x160>
 8012772:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8012850 <__ieee754_atan2+0x168>
 8012776:	2d00      	cmp	r5, #0
 8012778:	fe26 7b07 	vselge.f64	d7, d6, d7
 801277c:	e7d4      	b.n	8012728 <__ieee754_atan2+0x40>
 801277e:	42ba      	cmp	r2, r7
 8012780:	d10f      	bne.n	80127a2 <__ieee754_atan2+0xba>
 8012782:	4293      	cmp	r3, r2
 8012784:	f104 34ff 	add.w	r4, r4, #4294967295
 8012788:	d107      	bne.n	801279a <__ieee754_atan2+0xb2>
 801278a:	2c02      	cmp	r4, #2
 801278c:	d851      	bhi.n	8012832 <__ieee754_atan2+0x14a>
 801278e:	4b3b      	ldr	r3, [pc, #236]	; (801287c <__ieee754_atan2+0x194>)
 8012790:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012794:	ed94 7b00 	vldr	d7, [r4]
 8012798:	e7c6      	b.n	8012728 <__ieee754_atan2+0x40>
 801279a:	2c02      	cmp	r4, #2
 801279c:	d84c      	bhi.n	8012838 <__ieee754_atan2+0x150>
 801279e:	4b38      	ldr	r3, [pc, #224]	; (8012880 <__ieee754_atan2+0x198>)
 80127a0:	e7f6      	b.n	8012790 <__ieee754_atan2+0xa8>
 80127a2:	42bb      	cmp	r3, r7
 80127a4:	d0e3      	beq.n	801276e <__ieee754_atan2+0x86>
 80127a6:	1a9b      	subs	r3, r3, r2
 80127a8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80127ac:	ea4f 5223 	mov.w	r2, r3, asr #20
 80127b0:	da16      	bge.n	80127e0 <__ieee754_atan2+0xf8>
 80127b2:	2800      	cmp	r0, #0
 80127b4:	da01      	bge.n	80127ba <__ieee754_atan2+0xd2>
 80127b6:	323c      	adds	r2, #60	; 0x3c
 80127b8:	db17      	blt.n	80127ea <__ieee754_atan2+0x102>
 80127ba:	ed9d 7b00 	vldr	d7, [sp]
 80127be:	ee87 0b01 	vdiv.f64	d0, d7, d1
 80127c2:	f000 fae7 	bl	8012d94 <fabs>
 80127c6:	f000 f9eb 	bl	8012ba0 <atan>
 80127ca:	ed8d 0b00 	vstr	d0, [sp]
 80127ce:	2c01      	cmp	r4, #1
 80127d0:	d00e      	beq.n	80127f0 <__ieee754_atan2+0x108>
 80127d2:	2c02      	cmp	r4, #2
 80127d4:	d014      	beq.n	8012800 <__ieee754_atan2+0x118>
 80127d6:	b9f4      	cbnz	r4, 8012816 <__ieee754_atan2+0x12e>
 80127d8:	ed9d 0b00 	vldr	d0, [sp]
 80127dc:	b003      	add	sp, #12
 80127de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127e0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8012848 <__ieee754_atan2+0x160>
 80127e4:	ed8d 7b00 	vstr	d7, [sp]
 80127e8:	e7f1      	b.n	80127ce <__ieee754_atan2+0xe6>
 80127ea:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8012858 <__ieee754_atan2+0x170>
 80127ee:	e7f9      	b.n	80127e4 <__ieee754_atan2+0xfc>
 80127f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127f4:	9901      	ldr	r1, [sp, #4]
 80127f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127fa:	e9cd 2300 	strd	r2, r3, [sp]
 80127fe:	e7eb      	b.n	80127d8 <__ieee754_atan2+0xf0>
 8012800:	ed9d 6b00 	vldr	d6, [sp]
 8012804:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012860 <__ieee754_atan2+0x178>
 8012808:	ee36 7b47 	vsub.f64	d7, d6, d7
 801280c:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8012868 <__ieee754_atan2+0x180>
 8012810:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012814:	e788      	b.n	8012728 <__ieee754_atan2+0x40>
 8012816:	ed9d 6b00 	vldr	d6, [sp]
 801281a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8012860 <__ieee754_atan2+0x178>
 801281e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012822:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8012868 <__ieee754_atan2+0x180>
 8012826:	ee37 7b46 	vsub.f64	d7, d7, d6
 801282a:	e77d      	b.n	8012728 <__ieee754_atan2+0x40>
 801282c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012868 <__ieee754_atan2+0x180>
 8012830:	e77a      	b.n	8012728 <__ieee754_atan2+0x40>
 8012832:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8012870 <__ieee754_atan2+0x188>
 8012836:	e777      	b.n	8012728 <__ieee754_atan2+0x40>
 8012838:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8012858 <__ieee754_atan2+0x170>
 801283c:	e774      	b.n	8012728 <__ieee754_atan2+0x40>
 801283e:	bf00      	nop
 8012840:	54442d18 	.word	0x54442d18
 8012844:	c00921fb 	.word	0xc00921fb
 8012848:	54442d18 	.word	0x54442d18
 801284c:	3ff921fb 	.word	0x3ff921fb
 8012850:	54442d18 	.word	0x54442d18
 8012854:	bff921fb 	.word	0xbff921fb
	...
 8012860:	33145c07 	.word	0x33145c07
 8012864:	3ca1a626 	.word	0x3ca1a626
 8012868:	54442d18 	.word	0x54442d18
 801286c:	400921fb 	.word	0x400921fb
 8012870:	54442d18 	.word	0x54442d18
 8012874:	3fe921fb 	.word	0x3fe921fb
 8012878:	7ff00000 	.word	0x7ff00000
 801287c:	08013400 	.word	0x08013400
 8012880:	08013418 	.word	0x08013418

08012884 <__ieee754_sqrt>:
 8012884:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012888:	4770      	bx	lr
	...

0801288c <__ieee754_asinf>:
 801288c:	b538      	push	{r3, r4, r5, lr}
 801288e:	ee10 5a10 	vmov	r5, s0
 8012892:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012896:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801289a:	ed2d 8b04 	vpush	{d8-d9}
 801289e:	d10c      	bne.n	80128ba <__ieee754_asinf+0x2e>
 80128a0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8012a18 <__ieee754_asinf+0x18c>
 80128a4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8012a1c <__ieee754_asinf+0x190>
 80128a8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80128ac:	eee0 7a07 	vfma.f32	s15, s0, s14
 80128b0:	eeb0 0a67 	vmov.f32	s0, s15
 80128b4:	ecbd 8b04 	vpop	{d8-d9}
 80128b8:	bd38      	pop	{r3, r4, r5, pc}
 80128ba:	dd04      	ble.n	80128c6 <__ieee754_asinf+0x3a>
 80128bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80128c0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80128c4:	e7f6      	b.n	80128b4 <__ieee754_asinf+0x28>
 80128c6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80128ca:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80128ce:	da0b      	bge.n	80128e8 <__ieee754_asinf+0x5c>
 80128d0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80128d4:	da52      	bge.n	801297c <__ieee754_asinf+0xf0>
 80128d6:	eddf 7a52 	vldr	s15, [pc, #328]	; 8012a20 <__ieee754_asinf+0x194>
 80128da:	ee70 7a27 	vadd.f32	s15, s0, s15
 80128de:	eef4 7ae8 	vcmpe.f32	s15, s17
 80128e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e6:	dce5      	bgt.n	80128b4 <__ieee754_asinf+0x28>
 80128e8:	f000 fb32 	bl	8012f50 <fabsf>
 80128ec:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80128f0:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80128f4:	ee20 8a08 	vmul.f32	s16, s0, s16
 80128f8:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012a24 <__ieee754_asinf+0x198>
 80128fc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8012a28 <__ieee754_asinf+0x19c>
 8012900:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8012a2c <__ieee754_asinf+0x1a0>
 8012904:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012908:	eddf 7a49 	vldr	s15, [pc, #292]	; 8012a30 <__ieee754_asinf+0x1a4>
 801290c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012910:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012a34 <__ieee754_asinf+0x1a8>
 8012914:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012918:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012a38 <__ieee754_asinf+0x1ac>
 801291c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012920:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012a3c <__ieee754_asinf+0x1b0>
 8012924:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012928:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012a40 <__ieee754_asinf+0x1b4>
 801292c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012930:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012a44 <__ieee754_asinf+0x1b8>
 8012934:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012938:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012a48 <__ieee754_asinf+0x1bc>
 801293c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012940:	eeb0 0a48 	vmov.f32	s0, s16
 8012944:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012948:	f000 f924 	bl	8012b94 <__ieee754_sqrtf>
 801294c:	4b3f      	ldr	r3, [pc, #252]	; (8012a4c <__ieee754_asinf+0x1c0>)
 801294e:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012952:	429c      	cmp	r4, r3
 8012954:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012958:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801295c:	dd3d      	ble.n	80129da <__ieee754_asinf+0x14e>
 801295e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012962:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012a50 <__ieee754_asinf+0x1c4>
 8012966:	eee0 7a26 	vfma.f32	s15, s0, s13
 801296a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012a1c <__ieee754_asinf+0x190>
 801296e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012972:	2d00      	cmp	r5, #0
 8012974:	bfd8      	it	le
 8012976:	eeb1 0a40 	vnegle.f32	s0, s0
 801297a:	e79b      	b.n	80128b4 <__ieee754_asinf+0x28>
 801297c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012980:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012a24 <__ieee754_asinf+0x198>
 8012984:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012a28 <__ieee754_asinf+0x19c>
 8012988:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8012a3c <__ieee754_asinf+0x1b0>
 801298c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012990:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012a30 <__ieee754_asinf+0x1a4>
 8012994:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012998:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8012a34 <__ieee754_asinf+0x1a8>
 801299c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129a0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8012a38 <__ieee754_asinf+0x1ac>
 80129a4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80129a8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8012a2c <__ieee754_asinf+0x1a0>
 80129ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129b0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8012a40 <__ieee754_asinf+0x1b4>
 80129b4:	eee7 6a86 	vfma.f32	s13, s15, s12
 80129b8:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012a44 <__ieee754_asinf+0x1b8>
 80129bc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80129c0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8012a48 <__ieee754_asinf+0x1bc>
 80129c4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80129c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80129cc:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80129d0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80129d4:	eea0 0a27 	vfma.f32	s0, s0, s15
 80129d8:	e76c      	b.n	80128b4 <__ieee754_asinf+0x28>
 80129da:	ee10 3a10 	vmov	r3, s0
 80129de:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80129e2:	f023 030f 	bic.w	r3, r3, #15
 80129e6:	ee07 3a10 	vmov	s14, r3
 80129ea:	eea7 8a47 	vfms.f32	s16, s14, s14
 80129ee:	ee70 7a07 	vadd.f32	s15, s0, s14
 80129f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80129f6:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80129fa:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012a18 <__ieee754_asinf+0x18c>
 80129fe:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8012a02:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8012a06:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012a54 <__ieee754_asinf+0x1c8>
 8012a0a:	eeb0 6a40 	vmov.f32	s12, s0
 8012a0e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012a12:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012a16:	e7aa      	b.n	801296e <__ieee754_asinf+0xe2>
 8012a18:	b33bbd2e 	.word	0xb33bbd2e
 8012a1c:	3fc90fdb 	.word	0x3fc90fdb
 8012a20:	7149f2ca 	.word	0x7149f2ca
 8012a24:	3811ef08 	.word	0x3811ef08
 8012a28:	3a4f7f04 	.word	0x3a4f7f04
 8012a2c:	3e2aaaab 	.word	0x3e2aaaab
 8012a30:	bd241146 	.word	0xbd241146
 8012a34:	3e4e0aa8 	.word	0x3e4e0aa8
 8012a38:	bea6b090 	.word	0xbea6b090
 8012a3c:	3d9dc62e 	.word	0x3d9dc62e
 8012a40:	bf303361 	.word	0xbf303361
 8012a44:	4001572d 	.word	0x4001572d
 8012a48:	c019d139 	.word	0xc019d139
 8012a4c:	3f799999 	.word	0x3f799999
 8012a50:	333bbd2e 	.word	0x333bbd2e
 8012a54:	3f490fdb 	.word	0x3f490fdb

08012a58 <__ieee754_atan2f>:
 8012a58:	ee10 2a90 	vmov	r2, s1
 8012a5c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012a60:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012a64:	b510      	push	{r4, lr}
 8012a66:	eef0 7a40 	vmov.f32	s15, s0
 8012a6a:	dc06      	bgt.n	8012a7a <__ieee754_atan2f+0x22>
 8012a6c:	ee10 0a10 	vmov	r0, s0
 8012a70:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012a74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012a78:	dd04      	ble.n	8012a84 <__ieee754_atan2f+0x2c>
 8012a7a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8012a82:	bd10      	pop	{r4, pc}
 8012a84:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012a88:	d103      	bne.n	8012a92 <__ieee754_atan2f+0x3a>
 8012a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a8e:	f000 b98b 	b.w	8012da8 <atanf>
 8012a92:	1794      	asrs	r4, r2, #30
 8012a94:	f004 0402 	and.w	r4, r4, #2
 8012a98:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012a9c:	b93b      	cbnz	r3, 8012aae <__ieee754_atan2f+0x56>
 8012a9e:	2c02      	cmp	r4, #2
 8012aa0:	d05c      	beq.n	8012b5c <__ieee754_atan2f+0x104>
 8012aa2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8012b70 <__ieee754_atan2f+0x118>
 8012aa6:	2c03      	cmp	r4, #3
 8012aa8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8012aac:	e7e7      	b.n	8012a7e <__ieee754_atan2f+0x26>
 8012aae:	b939      	cbnz	r1, 8012ac0 <__ieee754_atan2f+0x68>
 8012ab0:	eddf 7a30 	vldr	s15, [pc, #192]	; 8012b74 <__ieee754_atan2f+0x11c>
 8012ab4:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8012b78 <__ieee754_atan2f+0x120>
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	fe67 7a80 	vselge.f32	s15, s15, s0
 8012abe:	e7de      	b.n	8012a7e <__ieee754_atan2f+0x26>
 8012ac0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012ac4:	d110      	bne.n	8012ae8 <__ieee754_atan2f+0x90>
 8012ac6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012aca:	f104 34ff 	add.w	r4, r4, #4294967295
 8012ace:	d107      	bne.n	8012ae0 <__ieee754_atan2f+0x88>
 8012ad0:	2c02      	cmp	r4, #2
 8012ad2:	d846      	bhi.n	8012b62 <__ieee754_atan2f+0x10a>
 8012ad4:	4b29      	ldr	r3, [pc, #164]	; (8012b7c <__ieee754_atan2f+0x124>)
 8012ad6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012ada:	edd4 7a00 	vldr	s15, [r4]
 8012ade:	e7ce      	b.n	8012a7e <__ieee754_atan2f+0x26>
 8012ae0:	2c02      	cmp	r4, #2
 8012ae2:	d841      	bhi.n	8012b68 <__ieee754_atan2f+0x110>
 8012ae4:	4b26      	ldr	r3, [pc, #152]	; (8012b80 <__ieee754_atan2f+0x128>)
 8012ae6:	e7f6      	b.n	8012ad6 <__ieee754_atan2f+0x7e>
 8012ae8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012aec:	d0e0      	beq.n	8012ab0 <__ieee754_atan2f+0x58>
 8012aee:	1a5b      	subs	r3, r3, r1
 8012af0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8012af4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012af8:	da1a      	bge.n	8012b30 <__ieee754_atan2f+0xd8>
 8012afa:	2a00      	cmp	r2, #0
 8012afc:	da01      	bge.n	8012b02 <__ieee754_atan2f+0xaa>
 8012afe:	313c      	adds	r1, #60	; 0x3c
 8012b00:	db19      	blt.n	8012b36 <__ieee754_atan2f+0xde>
 8012b02:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012b06:	f000 fa23 	bl	8012f50 <fabsf>
 8012b0a:	f000 f94d 	bl	8012da8 <atanf>
 8012b0e:	eef0 7a40 	vmov.f32	s15, s0
 8012b12:	2c01      	cmp	r4, #1
 8012b14:	d012      	beq.n	8012b3c <__ieee754_atan2f+0xe4>
 8012b16:	2c02      	cmp	r4, #2
 8012b18:	d017      	beq.n	8012b4a <__ieee754_atan2f+0xf2>
 8012b1a:	2c00      	cmp	r4, #0
 8012b1c:	d0af      	beq.n	8012a7e <__ieee754_atan2f+0x26>
 8012b1e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8012b84 <__ieee754_atan2f+0x12c>
 8012b22:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012b26:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012b88 <__ieee754_atan2f+0x130>
 8012b2a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012b2e:	e7a6      	b.n	8012a7e <__ieee754_atan2f+0x26>
 8012b30:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012b74 <__ieee754_atan2f+0x11c>
 8012b34:	e7ed      	b.n	8012b12 <__ieee754_atan2f+0xba>
 8012b36:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012b8c <__ieee754_atan2f+0x134>
 8012b3a:	e7ea      	b.n	8012b12 <__ieee754_atan2f+0xba>
 8012b3c:	ee17 3a90 	vmov	r3, s15
 8012b40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012b44:	ee07 3a90 	vmov	s15, r3
 8012b48:	e799      	b.n	8012a7e <__ieee754_atan2f+0x26>
 8012b4a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8012b84 <__ieee754_atan2f+0x12c>
 8012b4e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8012b52:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8012b88 <__ieee754_atan2f+0x130>
 8012b56:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012b5a:	e790      	b.n	8012a7e <__ieee754_atan2f+0x26>
 8012b5c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8012b88 <__ieee754_atan2f+0x130>
 8012b60:	e78d      	b.n	8012a7e <__ieee754_atan2f+0x26>
 8012b62:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012b90 <__ieee754_atan2f+0x138>
 8012b66:	e78a      	b.n	8012a7e <__ieee754_atan2f+0x26>
 8012b68:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012b8c <__ieee754_atan2f+0x134>
 8012b6c:	e787      	b.n	8012a7e <__ieee754_atan2f+0x26>
 8012b6e:	bf00      	nop
 8012b70:	c0490fdb 	.word	0xc0490fdb
 8012b74:	3fc90fdb 	.word	0x3fc90fdb
 8012b78:	bfc90fdb 	.word	0xbfc90fdb
 8012b7c:	08013430 	.word	0x08013430
 8012b80:	0801343c 	.word	0x0801343c
 8012b84:	33bbbd2e 	.word	0x33bbbd2e
 8012b88:	40490fdb 	.word	0x40490fdb
 8012b8c:	00000000 	.word	0x00000000
 8012b90:	3f490fdb 	.word	0x3f490fdb

08012b94 <__ieee754_sqrtf>:
 8012b94:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012b98:	4770      	bx	lr
 8012b9a:	0000      	movs	r0, r0
 8012b9c:	0000      	movs	r0, r0
	...

08012ba0 <atan>:
 8012ba0:	b538      	push	{r3, r4, r5, lr}
 8012ba2:	eeb0 7b40 	vmov.f64	d7, d0
 8012ba6:	ee17 5a90 	vmov	r5, s15
 8012baa:	4b73      	ldr	r3, [pc, #460]	; (8012d78 <atan+0x1d8>)
 8012bac:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012bb0:	429c      	cmp	r4, r3
 8012bb2:	dd13      	ble.n	8012bdc <atan+0x3c>
 8012bb4:	4b71      	ldr	r3, [pc, #452]	; (8012d7c <atan+0x1dc>)
 8012bb6:	429c      	cmp	r4, r3
 8012bb8:	dc03      	bgt.n	8012bc2 <atan+0x22>
 8012bba:	d107      	bne.n	8012bcc <atan+0x2c>
 8012bbc:	ee10 3a10 	vmov	r3, s0
 8012bc0:	b123      	cbz	r3, 8012bcc <atan+0x2c>
 8012bc2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012bc6:	eeb0 0b47 	vmov.f64	d0, d7
 8012bca:	bd38      	pop	{r3, r4, r5, pc}
 8012bcc:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8012d08 <atan+0x168>
 8012bd0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8012d10 <atan+0x170>
 8012bd4:	2d00      	cmp	r5, #0
 8012bd6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8012bda:	e7f4      	b.n	8012bc6 <atan+0x26>
 8012bdc:	4b68      	ldr	r3, [pc, #416]	; (8012d80 <atan+0x1e0>)
 8012bde:	429c      	cmp	r4, r3
 8012be0:	dc11      	bgt.n	8012c06 <atan+0x66>
 8012be2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012be6:	429c      	cmp	r4, r3
 8012be8:	dc0a      	bgt.n	8012c00 <atan+0x60>
 8012bea:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8012bee:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8012d18 <atan+0x178>
 8012bf2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8012bf6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfe:	dce2      	bgt.n	8012bc6 <atan+0x26>
 8012c00:	f04f 33ff 	mov.w	r3, #4294967295
 8012c04:	e013      	b.n	8012c2e <atan+0x8e>
 8012c06:	f000 f8c5 	bl	8012d94 <fabs>
 8012c0a:	4b5e      	ldr	r3, [pc, #376]	; (8012d84 <atan+0x1e4>)
 8012c0c:	429c      	cmp	r4, r3
 8012c0e:	dc4f      	bgt.n	8012cb0 <atan+0x110>
 8012c10:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012c14:	429c      	cmp	r4, r3
 8012c16:	dc41      	bgt.n	8012c9c <atan+0xfc>
 8012c18:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8012c1c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012c20:	2300      	movs	r3, #0
 8012c22:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012c26:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012c2a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012c2e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012d20 <atan+0x180>
 8012c32:	ee27 4b07 	vmul.f64	d4, d7, d7
 8012c36:	ee24 5b04 	vmul.f64	d5, d4, d4
 8012c3a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012d28 <atan+0x188>
 8012c3e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8012c42:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012d30 <atan+0x190>
 8012c46:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012c4a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012d38 <atan+0x198>
 8012c4e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8012c52:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8012d40 <atan+0x1a0>
 8012c56:	eea3 6b05 	vfma.f64	d6, d3, d5
 8012c5a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8012d48 <atan+0x1a8>
 8012c5e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012d50 <atan+0x1b0>
 8012c62:	eea6 3b05 	vfma.f64	d3, d6, d5
 8012c66:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012d58 <atan+0x1b8>
 8012c6a:	eea5 2b06 	vfma.f64	d2, d5, d6
 8012c6e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012d60 <atan+0x1c0>
 8012c72:	eea2 6b05 	vfma.f64	d6, d2, d5
 8012c76:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8012d68 <atan+0x1c8>
 8012c7a:	eea6 2b05 	vfma.f64	d2, d6, d5
 8012c7e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8012d70 <atan+0x1d0>
 8012c82:	1c5a      	adds	r2, r3, #1
 8012c84:	eea2 6b05 	vfma.f64	d6, d2, d5
 8012c88:	ee26 6b05 	vmul.f64	d6, d6, d5
 8012c8c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8012c90:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012c94:	d121      	bne.n	8012cda <atan+0x13a>
 8012c96:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012c9a:	e794      	b.n	8012bc6 <atan+0x26>
 8012c9c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	ee30 6b47 	vsub.f64	d6, d0, d7
 8012ca6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8012caa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012cae:	e7be      	b.n	8012c2e <atan+0x8e>
 8012cb0:	4b35      	ldr	r3, [pc, #212]	; (8012d88 <atan+0x1e8>)
 8012cb2:	429c      	cmp	r4, r3
 8012cb4:	da0b      	bge.n	8012cce <atan+0x12e>
 8012cb6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012cba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012cbe:	ee30 5b47 	vsub.f64	d5, d0, d7
 8012cc2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8012cc6:	2302      	movs	r3, #2
 8012cc8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8012ccc:	e7af      	b.n	8012c2e <atan+0x8e>
 8012cce:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012cd2:	2303      	movs	r3, #3
 8012cd4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8012cd8:	e7a9      	b.n	8012c2e <atan+0x8e>
 8012cda:	4a2c      	ldr	r2, [pc, #176]	; (8012d8c <atan+0x1ec>)
 8012cdc:	492c      	ldr	r1, [pc, #176]	; (8012d90 <atan+0x1f0>)
 8012cde:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8012ce2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8012ce6:	ed93 5b00 	vldr	d5, [r3]
 8012cea:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012cee:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012cf2:	ed92 6b00 	vldr	d6, [r2]
 8012cf6:	2d00      	cmp	r5, #0
 8012cf8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012cfc:	bfb8      	it	lt
 8012cfe:	eeb1 7b47 	vneglt.f64	d7, d7
 8012d02:	e760      	b.n	8012bc6 <atan+0x26>
 8012d04:	f3af 8000 	nop.w
 8012d08:	54442d18 	.word	0x54442d18
 8012d0c:	3ff921fb 	.word	0x3ff921fb
 8012d10:	54442d18 	.word	0x54442d18
 8012d14:	bff921fb 	.word	0xbff921fb
 8012d18:	8800759c 	.word	0x8800759c
 8012d1c:	7e37e43c 	.word	0x7e37e43c
 8012d20:	e322da11 	.word	0xe322da11
 8012d24:	3f90ad3a 	.word	0x3f90ad3a
 8012d28:	24760deb 	.word	0x24760deb
 8012d2c:	3fa97b4b 	.word	0x3fa97b4b
 8012d30:	a0d03d51 	.word	0xa0d03d51
 8012d34:	3fb10d66 	.word	0x3fb10d66
 8012d38:	c54c206e 	.word	0xc54c206e
 8012d3c:	3fb745cd 	.word	0x3fb745cd
 8012d40:	920083ff 	.word	0x920083ff
 8012d44:	3fc24924 	.word	0x3fc24924
 8012d48:	5555550d 	.word	0x5555550d
 8012d4c:	3fd55555 	.word	0x3fd55555
 8012d50:	52defd9a 	.word	0x52defd9a
 8012d54:	bfadde2d 	.word	0xbfadde2d
 8012d58:	2c6a6c2f 	.word	0x2c6a6c2f
 8012d5c:	bfa2b444 	.word	0xbfa2b444
 8012d60:	af749a6d 	.word	0xaf749a6d
 8012d64:	bfb3b0f2 	.word	0xbfb3b0f2
 8012d68:	fe231671 	.word	0xfe231671
 8012d6c:	bfbc71c6 	.word	0xbfbc71c6
 8012d70:	9998ebc4 	.word	0x9998ebc4
 8012d74:	bfc99999 	.word	0xbfc99999
 8012d78:	440fffff 	.word	0x440fffff
 8012d7c:	7ff00000 	.word	0x7ff00000
 8012d80:	3fdbffff 	.word	0x3fdbffff
 8012d84:	3ff2ffff 	.word	0x3ff2ffff
 8012d88:	40038000 	.word	0x40038000
 8012d8c:	08013448 	.word	0x08013448
 8012d90:	08013468 	.word	0x08013468

08012d94 <fabs>:
 8012d94:	ec51 0b10 	vmov	r0, r1, d0
 8012d98:	ee10 2a10 	vmov	r2, s0
 8012d9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012da0:	ec43 2b10 	vmov	d0, r2, r3
 8012da4:	4770      	bx	lr
	...

08012da8 <atanf>:
 8012da8:	b538      	push	{r3, r4, r5, lr}
 8012daa:	ee10 5a10 	vmov	r5, s0
 8012dae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012db2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8012db6:	eef0 7a40 	vmov.f32	s15, s0
 8012dba:	db0f      	blt.n	8012ddc <atanf+0x34>
 8012dbc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012dc0:	dd04      	ble.n	8012dcc <atanf+0x24>
 8012dc2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8012dca:	bd38      	pop	{r3, r4, r5, pc}
 8012dcc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012f04 <atanf+0x15c>
 8012dd0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8012f08 <atanf+0x160>
 8012dd4:	2d00      	cmp	r5, #0
 8012dd6:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8012dda:	e7f4      	b.n	8012dc6 <atanf+0x1e>
 8012ddc:	4b4b      	ldr	r3, [pc, #300]	; (8012f0c <atanf+0x164>)
 8012dde:	429c      	cmp	r4, r3
 8012de0:	dc10      	bgt.n	8012e04 <atanf+0x5c>
 8012de2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012de6:	da0a      	bge.n	8012dfe <atanf+0x56>
 8012de8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012f10 <atanf+0x168>
 8012dec:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012df0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012df4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dfc:	dce3      	bgt.n	8012dc6 <atanf+0x1e>
 8012dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8012e02:	e013      	b.n	8012e2c <atanf+0x84>
 8012e04:	f000 f8a4 	bl	8012f50 <fabsf>
 8012e08:	4b42      	ldr	r3, [pc, #264]	; (8012f14 <atanf+0x16c>)
 8012e0a:	429c      	cmp	r4, r3
 8012e0c:	dc4f      	bgt.n	8012eae <atanf+0x106>
 8012e0e:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012e12:	429c      	cmp	r4, r3
 8012e14:	dc41      	bgt.n	8012e9a <atanf+0xf2>
 8012e16:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012e1a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012e1e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012e22:	2300      	movs	r3, #0
 8012e24:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012e28:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012e2c:	1c5a      	adds	r2, r3, #1
 8012e2e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012e32:	eddf 5a39 	vldr	s11, [pc, #228]	; 8012f18 <atanf+0x170>
 8012e36:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8012f1c <atanf+0x174>
 8012e3a:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8012f20 <atanf+0x178>
 8012e3e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8012f24 <atanf+0x17c>
 8012e42:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012e46:	eea7 6a25 	vfma.f32	s12, s14, s11
 8012e4a:	eddf 5a37 	vldr	s11, [pc, #220]	; 8012f28 <atanf+0x180>
 8012e4e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012e52:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8012f2c <atanf+0x184>
 8012e56:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012e5a:	eddf 5a35 	vldr	s11, [pc, #212]	; 8012f30 <atanf+0x188>
 8012e5e:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012e62:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8012f34 <atanf+0x18c>
 8012e66:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012e6a:	eddf 5a33 	vldr	s11, [pc, #204]	; 8012f38 <atanf+0x190>
 8012e6e:	eee7 5a05 	vfma.f32	s11, s14, s10
 8012e72:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8012f3c <atanf+0x194>
 8012e76:	eea5 5a87 	vfma.f32	s10, s11, s14
 8012e7a:	eddf 5a31 	vldr	s11, [pc, #196]	; 8012f40 <atanf+0x198>
 8012e7e:	eee5 5a07 	vfma.f32	s11, s10, s14
 8012e82:	eea5 0a87 	vfma.f32	s0, s11, s14
 8012e86:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012e8a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8012e8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012e92:	d121      	bne.n	8012ed8 <atanf+0x130>
 8012e94:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012e98:	e795      	b.n	8012dc6 <atanf+0x1e>
 8012e9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012e9e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012ea2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012eac:	e7be      	b.n	8012e2c <atanf+0x84>
 8012eae:	4b25      	ldr	r3, [pc, #148]	; (8012f44 <atanf+0x19c>)
 8012eb0:	429c      	cmp	r4, r3
 8012eb2:	dc0b      	bgt.n	8012ecc <atanf+0x124>
 8012eb4:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012eb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012ebc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012ec0:	2302      	movs	r3, #2
 8012ec2:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012eca:	e7af      	b.n	8012e2c <atanf+0x84>
 8012ecc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012ed0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012ed4:	2303      	movs	r3, #3
 8012ed6:	e7a9      	b.n	8012e2c <atanf+0x84>
 8012ed8:	4a1b      	ldr	r2, [pc, #108]	; (8012f48 <atanf+0x1a0>)
 8012eda:	491c      	ldr	r1, [pc, #112]	; (8012f4c <atanf+0x1a4>)
 8012edc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012ee0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012ee4:	ed93 7a00 	vldr	s14, [r3]
 8012ee8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012eec:	2d00      	cmp	r5, #0
 8012eee:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012ef2:	ed92 0a00 	vldr	s0, [r2]
 8012ef6:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012efa:	bfb8      	it	lt
 8012efc:	eef1 7a67 	vneglt.f32	s15, s15
 8012f00:	e761      	b.n	8012dc6 <atanf+0x1e>
 8012f02:	bf00      	nop
 8012f04:	3fc90fdb 	.word	0x3fc90fdb
 8012f08:	bfc90fdb 	.word	0xbfc90fdb
 8012f0c:	3edfffff 	.word	0x3edfffff
 8012f10:	7149f2ca 	.word	0x7149f2ca
 8012f14:	3f97ffff 	.word	0x3f97ffff
 8012f18:	3c8569d7 	.word	0x3c8569d7
 8012f1c:	3d4bda59 	.word	0x3d4bda59
 8012f20:	bd15a221 	.word	0xbd15a221
 8012f24:	be4ccccd 	.word	0xbe4ccccd
 8012f28:	3d886b35 	.word	0x3d886b35
 8012f2c:	3dba2e6e 	.word	0x3dba2e6e
 8012f30:	3e124925 	.word	0x3e124925
 8012f34:	3eaaaaab 	.word	0x3eaaaaab
 8012f38:	bd6ef16b 	.word	0xbd6ef16b
 8012f3c:	bd9d8795 	.word	0xbd9d8795
 8012f40:	bde38e38 	.word	0xbde38e38
 8012f44:	401bffff 	.word	0x401bffff
 8012f48:	08013488 	.word	0x08013488
 8012f4c:	08013498 	.word	0x08013498

08012f50 <fabsf>:
 8012f50:	ee10 3a10 	vmov	r3, s0
 8012f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f58:	ee00 3a10 	vmov	s0, r3
 8012f5c:	4770      	bx	lr
	...

08012f60 <nanf>:
 8012f60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012f68 <nanf+0x8>
 8012f64:	4770      	bx	lr
 8012f66:	bf00      	nop
 8012f68:	7fc00000 	.word	0x7fc00000

08012f6c <_init>:
 8012f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f6e:	bf00      	nop
 8012f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f72:	bc08      	pop	{r3}
 8012f74:	469e      	mov	lr, r3
 8012f76:	4770      	bx	lr

08012f78 <_fini>:
 8012f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f7a:	bf00      	nop
 8012f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012f7e:	bc08      	pop	{r3}
 8012f80:	469e      	mov	lr, r3
 8012f82:	4770      	bx	lr
