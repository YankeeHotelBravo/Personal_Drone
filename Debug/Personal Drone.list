
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e670  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800e910  0800e910  0001e910  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ed5c  0800ed5c  0001ed5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ed64  0800ed64  0001ed64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ed68  0800ed68  0001ed68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  24000000  0800ed6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a4  240001ec  0800ef58  000201ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000590  0800ef58  00020590  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a28d  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003ec4  00000000  00000000  0004a4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001788  00000000  00000000  0004e370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001650  00000000  00000000  0004faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000393f7  00000000  00000000  00051148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001dc17  00000000  00000000  0008a53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a010  00000000  00000000  000a8156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00212166  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000073cc  00000000  00000000  002121bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e8f8 	.word	0x0800e8f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	0800e8f8 	.word	0x0800e8f8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MPU9250_Init>:
float MPU9250_Mag_LSB = 0.15f;



uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	4608      	mov	r0, r1
 8000692:	4611      	mov	r1, r2
 8000694:	461a      	mov	r2, r3
 8000696:	4603      	mov	r3, r0
 8000698:	70fb      	strb	r3, [r7, #3]
 800069a:	460b      	mov	r3, r1
 800069c:	70bb      	strb	r3, [r7, #2]
 800069e:	4613      	mov	r3, r2
 80006a0:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d81b      	bhi.n	80006e0 <MPU9250_Init+0x58>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <MPU9250_Init+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d1 	.word	0x080006d1
 80006bc:	080006d9 	.word	0x080006d9
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80006c0:	4b5e      	ldr	r3, [pc, #376]	; (800083c <MPU9250_Init+0x1b4>)
 80006c2:	4a5f      	ldr	r2, [pc, #380]	; (8000840 <MPU9250_Init+0x1b8>)
 80006c4:	601a      	str	r2, [r3, #0]
		break;
 80006c6:	e00c      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80006c8:	4b5c      	ldr	r3, [pc, #368]	; (800083c <MPU9250_Init+0x1b4>)
 80006ca:	4a5e      	ldr	r2, [pc, #376]	; (8000844 <MPU9250_Init+0x1bc>)
 80006cc:	601a      	str	r2, [r3, #0]
		break;
 80006ce:	e008      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80006d0:	4b5a      	ldr	r3, [pc, #360]	; (800083c <MPU9250_Init+0x1b4>)
 80006d2:	4a5d      	ldr	r2, [pc, #372]	; (8000848 <MPU9250_Init+0x1c0>)
 80006d4:	601a      	str	r2, [r3, #0]
		break;
 80006d6:	e004      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80006d8:	4b58      	ldr	r3, [pc, #352]	; (800083c <MPU9250_Init+0x1b4>)
 80006da:	4a5c      	ldr	r2, [pc, #368]	; (800084c <MPU9250_Init+0x1c4>)
 80006dc:	601a      	str	r2, [r3, #0]
		break;
 80006de:	e000      	b.n	80006e2 <MPU9250_Init+0x5a>
	default:
		break;
 80006e0:	bf00      	nop
	}

	switch(Acc_FS)
 80006e2:	78bb      	ldrb	r3, [r7, #2]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81f      	bhi.n	8000728 <MPU9250_Init+0xa0>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MPU9250_Init+0x68>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	08000715 	.word	0x08000715
 80006fc:	0800071f 	.word	0x0800071f
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000700:	4b53      	ldr	r3, [pc, #332]	; (8000850 <MPU9250_Init+0x1c8>)
 8000702:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000706:	601a      	str	r2, [r3, #0]
		break;
 8000708:	e00f      	b.n	800072a <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 800070a:	4b51      	ldr	r3, [pc, #324]	; (8000850 <MPU9250_Init+0x1c8>)
 800070c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000710:	601a      	str	r2, [r3, #0]
		break;
 8000712:	e00a      	b.n	800072a <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 8000714:	4b4e      	ldr	r3, [pc, #312]	; (8000850 <MPU9250_Init+0x1c8>)
 8000716:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800071a:	601a      	str	r2, [r3, #0]
		break;
 800071c:	e005      	b.n	800072a <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 800071e:	4b4c      	ldr	r3, [pc, #304]	; (8000850 <MPU9250_Init+0x1c8>)
 8000720:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000724:	601a      	str	r2, [r3, #0]
		break;
 8000726:	e000      	b.n	800072a <MPU9250_Init+0xa2>
	default:
		break;
 8000728:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WAI, 1, &MPU9250_rx, 1, 100);
 800072a:	4b4a      	ldr	r3, [pc, #296]	; (8000854 <MPU9250_Init+0x1cc>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	b29a      	uxth	r2, r3
 8000730:	2364      	movs	r3, #100	; 0x64
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2301      	movs	r3, #1
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	4b47      	ldr	r3, [pc, #284]	; (8000858 <MPU9250_Init+0x1d0>)
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	21e2      	movs	r1, #226	; 0xe2
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f004 feb1 	bl	80054a8 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 8000746:	4b44      	ldr	r3, [pc, #272]	; (8000858 <MPU9250_Init+0x1d0>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b71      	cmp	r3, #113	; 0x71
 800074c:	d171      	bne.n	8000832 <MPU9250_Init+0x1aa>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 800074e:	4b43      	ldr	r3, [pc, #268]	; (800085c <MPU9250_Init+0x1d4>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	2301      	movs	r3, #1
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	4b3f      	ldr	r3, [pc, #252]	; (800085c <MPU9250_Init+0x1d4>)
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2301      	movs	r3, #1
 8000762:	2219      	movs	r2, #25
 8000764:	21e2      	movs	r1, #226	; 0xe2
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f004 fd8a 	bl	8005280 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800076c:	200a      	movs	r0, #10
 800076e:	f001 fb99 	bl	8001ea4 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000772:	4a3a      	ldr	r2, [pc, #232]	; (800085c <MPU9250_Init+0x1d4>)
 8000774:	787b      	ldrb	r3, [r7, #1]
 8000776:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000778:	2364      	movs	r3, #100	; 0x64
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	2301      	movs	r3, #1
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	4b36      	ldr	r3, [pc, #216]	; (800085c <MPU9250_Init+0x1d4>)
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	221a      	movs	r2, #26
 8000788:	21e2      	movs	r1, #226	; 0xe2
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f004 fd78 	bl	8005280 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000790:	200a      	movs	r0, #10
 8000792:	f001 fb87 	bl	8001ea4 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 8000796:	78fb      	ldrb	r3, [r7, #3]
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b2f      	ldr	r3, [pc, #188]	; (800085c <MPU9250_Init+0x1d4>)
 800079e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 80007a0:	2364      	movs	r3, #100	; 0x64
 80007a2:	9302      	str	r3, [sp, #8]
 80007a4:	2301      	movs	r3, #1
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	4b2c      	ldr	r3, [pc, #176]	; (800085c <MPU9250_Init+0x1d4>)
 80007aa:	9300      	str	r3, [sp, #0]
 80007ac:	2301      	movs	r3, #1
 80007ae:	221b      	movs	r2, #27
 80007b0:	21e2      	movs	r1, #226	; 0xe2
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f004 fd64 	bl	8005280 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007b8:	200a      	movs	r0, #10
 80007ba:	f001 fb73 	bl	8001ea4 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80007be:	78bb      	ldrb	r3, [r7, #2]
 80007c0:	00db      	lsls	r3, r3, #3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <MPU9250_Init+0x1d4>)
 80007c6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80007c8:	2364      	movs	r3, #100	; 0x64
 80007ca:	9302      	str	r3, [sp, #8]
 80007cc:	2301      	movs	r3, #1
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <MPU9250_Init+0x1d4>)
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2301      	movs	r3, #1
 80007d6:	221c      	movs	r2, #28
 80007d8:	21e2      	movs	r1, #226	; 0xe2
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f004 fd50 	bl	8005280 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f001 fb5f 	bl	8001ea4 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80007e6:	4a1d      	ldr	r2, [pc, #116]	; (800085c <MPU9250_Init+0x1d4>)
 80007e8:	7c3b      	ldrb	r3, [r7, #16]
 80007ea:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9302      	str	r3, [sp, #8]
 80007f0:	2301      	movs	r3, #1
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4b19      	ldr	r3, [pc, #100]	; (800085c <MPU9250_Init+0x1d4>)
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	221d      	movs	r2, #29
 80007fc:	21e2      	movs	r1, #226	; 0xe2
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f004 fd3e 	bl	8005280 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000804:	200a      	movs	r0, #10
 8000806:	f001 fb4d 	bl	8001ea4 <HAL_Delay>

		MPU9250_tx = 0x00;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MPU9250_Init+0x1d4>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000810:	2364      	movs	r3, #100	; 0x64
 8000812:	9302      	str	r3, [sp, #8]
 8000814:	2301      	movs	r3, #1
 8000816:	9301      	str	r3, [sp, #4]
 8000818:	4b10      	ldr	r3, [pc, #64]	; (800085c <MPU9250_Init+0x1d4>)
 800081a:	9300      	str	r3, [sp, #0]
 800081c:	2301      	movs	r3, #1
 800081e:	226b      	movs	r2, #107	; 0x6b
 8000820:	21e2      	movs	r1, #226	; 0xe2
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f004 fd2c 	bl	8005280 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f001 fb3b 	bl	8001ea4 <HAL_Delay>

		return 1;
 800082e:	2301      	movs	r3, #1
 8000830:	e000      	b.n	8000834 <MPU9250_Init+0x1ac>
	}
	else
	{
		return 0;
 8000832:	2300      	movs	r3, #0
	}
}
 8000834:	4618      	mov	r0, r3
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	24000000 	.word	0x24000000
 8000840:	43030000 	.word	0x43030000
 8000844:	42830000 	.word	0x42830000
 8000848:	42033333 	.word	0x42033333
 800084c:	41833333 	.word	0x41833333
 8000850:	24000004 	.word	0x24000004
 8000854:	24000208 	.word	0x24000208
 8000858:	24000278 	.word	0x24000278
 800085c:	24000220 	.word	0x24000220

08000860 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af04      	add	r7, sp, #16
 8000866:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MPU9250_Bypass+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	9302      	str	r3, [sp, #8]
 8000872:	2301      	movs	r3, #1
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MPU9250_Bypass+0x58>)
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	226a      	movs	r2, #106	; 0x6a
 800087e:	21e2      	movs	r1, #226	; 0xe2
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f004 fcfd 	bl	8005280 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000886:	200a      	movs	r0, #10
 8000888:	f001 fb0c 	bl	8001ea4 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 800088c:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MPU9250_Bypass+0x58>)
 800088e:	2202      	movs	r2, #2
 8000890:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 8000892:	2364      	movs	r3, #100	; 0x64
 8000894:	9302      	str	r3, [sp, #8]
 8000896:	2301      	movs	r3, #1
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <MPU9250_Bypass+0x58>)
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2301      	movs	r3, #1
 80008a0:	2237      	movs	r2, #55	; 0x37
 80008a2:	21e2      	movs	r1, #226	; 0xe2
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f004 fceb 	bl	8005280 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008aa:	200a      	movs	r0, #10
 80008ac:	f001 fafa 	bl	8001ea4 <HAL_Delay>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	24000220 	.word	0x24000220

080008bc <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af04      	add	r7, sp, #16
 80008c2:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MPU9250_Master+0x7c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	9302      	str	r3, [sp, #8]
 80008ce:	2301      	movs	r3, #1
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MPU9250_Master+0x7c>)
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	2301      	movs	r3, #1
 80008d8:	2237      	movs	r2, #55	; 0x37
 80008da:	21e2      	movs	r1, #226	; 0xe2
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f004 fccf 	bl	8005280 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008e2:	200a      	movs	r0, #10
 80008e4:	f001 fade 	bl	8001ea4 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MPU9250_Master+0x7c>)
 80008ea:	2220      	movs	r2, #32
 80008ec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 80008ee:	2364      	movs	r3, #100	; 0x64
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	2301      	movs	r3, #1
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MPU9250_Master+0x7c>)
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2301      	movs	r3, #1
 80008fc:	226a      	movs	r2, #106	; 0x6a
 80008fe:	21e2      	movs	r1, #226	; 0xe2
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f004 fcbd 	bl	8005280 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000906:	200a      	movs	r0, #10
 8000908:	f001 facc 	bl	8001ea4 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MPU9250_Master+0x7c>)
 800090e:	220d      	movs	r2, #13
 8000910:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 8000912:	2364      	movs	r3, #100	; 0x64
 8000914:	9302      	str	r3, [sp, #8]
 8000916:	2301      	movs	r3, #1
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MPU9250_Master+0x7c>)
 800091c:	9300      	str	r3, [sp, #0]
 800091e:	2301      	movs	r3, #1
 8000920:	2224      	movs	r2, #36	; 0x24
 8000922:	21e2      	movs	r1, #226	; 0xe2
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f004 fcab 	bl	8005280 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800092a:	200a      	movs	r0, #10
 800092c:	f001 faba 	bl	8001ea4 <HAL_Delay>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	24000220 	.word	0x24000220

0800093c <MPU9250_AK8963_Setup>:

void MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *Datastruct)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af04      	add	r7, sp, #16
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	MPU9250_tx = 0b00010110; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MPU9250_AK8963_Setup+0x78>)
 8000948:	2216      	movs	r2, #22
 800094a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	9302      	str	r3, [sp, #8]
 8000950:	2301      	movs	r3, #1
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MPU9250_AK8963_Setup+0x78>)
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	220a      	movs	r2, #10
 800095c:	2190      	movs	r1, #144	; 0x90
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f004 fc8e 	bl	8005280 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f001 fa9d 	bl	8001ea4 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Fill Slave0 DO
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MPU9250_AK8963_Setup+0x78>)
 800096c:	2220      	movs	r2, #32
 800096e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	9302      	str	r3, [sp, #8]
 8000974:	2303      	movs	r3, #3
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MPU9250_AK8963_Setup+0x7c>)
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	2301      	movs	r3, #1
 800097e:	2210      	movs	r2, #16
 8000980:	2190      	movs	r1, #144	; 0x90
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f004 fd90 	bl	80054a8 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000988:	200a      	movs	r0, #10
 800098a:	f001 fa8b 	bl	8001ea4 <HAL_Delay>

	Datastruct->ASAX = MPU9250_rx_buf[0];
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MPU9250_AK8963_Setup+0x7c>)
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Datastruct->ASAY = MPU9250_rx_buf[1];
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MPU9250_AK8963_Setup+0x7c>)
 800099a:	785a      	ldrb	r2, [r3, #1]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Datastruct->ASAZ = MPU9250_rx_buf[2];
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <MPU9250_AK8963_Setup+0x7c>)
 80009a4:	789a      	ldrb	r2, [r3, #2]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	24000220 	.word	0x24000220
 80009b8:	2400027c 	.word	0x2400027c

080009bc <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af04      	add	r7, sp, #16
 80009c2:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MPU9250_Slave0_Enable+0x7c>)
 80009c6:	22c8      	movs	r2, #200	; 0xc8
 80009c8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 80009ca:	2364      	movs	r3, #100	; 0x64
 80009cc:	9302      	str	r3, [sp, #8]
 80009ce:	2301      	movs	r3, #1
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MPU9250_Slave0_Enable+0x7c>)
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2301      	movs	r3, #1
 80009d8:	2225      	movs	r2, #37	; 0x25
 80009da:	21e2      	movs	r1, #226	; 0xe2
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f004 fc4f 	bl	8005280 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80009e2:	200a      	movs	r0, #10
 80009e4:	f001 fa5e 	bl	8001ea4 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MPU9250_Slave0_Enable+0x7c>)
 80009ea:	2203      	movs	r2, #3
 80009ec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 80009ee:	2364      	movs	r3, #100	; 0x64
 80009f0:	9302      	str	r3, [sp, #8]
 80009f2:	2301      	movs	r3, #1
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MPU9250_Slave0_Enable+0x7c>)
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2301      	movs	r3, #1
 80009fc:	2226      	movs	r2, #38	; 0x26
 80009fe:	21e2      	movs	r1, #226	; 0xe2
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f004 fc3d 	bl	8005280 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f001 fa4c 	bl	8001ea4 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x06; //Number of data bytes
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MPU9250_Slave0_Enable+0x7c>)
 8000a0e:	2286      	movs	r2, #134	; 0x86
 8000a10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2301      	movs	r3, #1
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MPU9250_Slave0_Enable+0x7c>)
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	2227      	movs	r2, #39	; 0x27
 8000a22:	21e2      	movs	r1, #226	; 0xe2
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f004 fc2b 	bl	8005280 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f001 fa3a 	bl	8001ea4 <HAL_Delay>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	24000220 	.word	0x24000220

08000a3c <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000a44:	2314      	movs	r3, #20
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <MPU9250_Read_All+0x24>)
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	223b      	movs	r2, #59	; 0x3b
 8000a50:	21e2      	movs	r1, #226	; 0xe2
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f004 fe42 	bl	80056dc <HAL_I2C_Mem_Read_DMA>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2400027c 	.word	0x2400027c
 8000a64:	00000000 	.word	0x00000000

08000a68 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = (MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000a70:	4bb7      	ldr	r3, [pc, #732]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	b21a      	sxth	r2, r3
 8000a78:	4bb5      	ldr	r3, [pc, #724]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000a7a:	785b      	ldrb	r3, [r3, #1]
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b21a      	sxth	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = -(MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000a86:	4bb2      	ldr	r3, [pc, #712]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000a88:	789b      	ldrb	r3, [r3, #2]
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	b21a      	sxth	r2, r3
 8000a8e:	4bb0      	ldr	r3, [pc, #704]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000a90:	78db      	ldrb	r3, [r3, #3]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	425b      	negs	r3, r3
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = -(MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000aa4:	4baa      	ldr	r3, [pc, #680]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000aa6:	791b      	ldrb	r3, [r3, #4]
 8000aa8:	021b      	lsls	r3, r3, #8
 8000aaa:	b21a      	sxth	r2, r3
 8000aac:	4ba8      	ldr	r3, [pc, #672]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000aae:	795b      	ldrb	r3, [r3, #5]
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	b21b      	sxth	r3, r3
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	425b      	negs	r3, r3
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	b21a      	sxth	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000ac2:	4ba3      	ldr	r3, [pc, #652]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000ac4:	7a1b      	ldrb	r3, [r3, #8]
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	4ba1      	ldr	r3, [pc, #644]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000acc:	7a5b      	ldrb	r3, [r3, #9]
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000ad8:	4b9d      	ldr	r3, [pc, #628]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000ada:	7a9b      	ldrb	r3, [r3, #10]
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	b21a      	sxth	r2, r3
 8000ae0:	4b9b      	ldr	r3, [pc, #620]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000ae2:	7adb      	ldrb	r3, [r3, #11]
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	425b      	negs	r3, r3
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21a      	sxth	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000af6:	4b96      	ldr	r3, [pc, #600]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000af8:	7b1b      	ldrb	r3, [r3, #12]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	4b94      	ldr	r3, [pc, #592]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000b00:	7b5b      	ldrb	r3, [r3, #13]
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	4313      	orrs	r3, r2
 8000b06:	b21b      	sxth	r3, r3
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000b14:	4b8e      	ldr	r3, [pc, #568]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000b16:	7bdb      	ldrb	r3, [r3, #15]
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	4b8c      	ldr	r3, [pc, #560]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000b1e:	7b9b      	ldrb	r3, [r3, #14]
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	4313      	orrs	r3, r2
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	425b      	negs	r3, r3
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	b21a      	sxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	85da      	strh	r2, [r3, #46]	; 0x2e
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000b32:	4b87      	ldr	r3, [pc, #540]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000b34:	7c5b      	ldrb	r3, [r3, #17]
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	4b85      	ldr	r3, [pc, #532]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000b3c:	7c1b      	ldrb	r3, [r3, #16]
 8000b3e:	b21b      	sxth	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000b48:	4b81      	ldr	r3, [pc, #516]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000b4a:	7cdb      	ldrb	r3, [r3, #19]
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	4b7f      	ldr	r3, [pc, #508]	; (8000d50 <MPU9250_Parsing+0x2e8>)
 8000b52:	7c9b      	ldrb	r3, [r3, #18]
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	4313      	orrs	r3, r2
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	861a      	strh	r2, [r3, #48]	; 0x30

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000b64:	ee07 3a90 	vmov	s15, r3
 8000b68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b6c:	4b79      	ldr	r3, [pc, #484]	; (8000d54 <MPU9250_Parsing+0x2ec>)
 8000b6e:	ed93 7a00 	vldr	s14, [r3]
 8000b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7a:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8000d48 <MPU9250_Parsing+0x2e0>
 8000b7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000b92:	ee07 3a90 	vmov	s15, r3
 8000b96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b9a:	4b6e      	ldr	r3, [pc, #440]	; (8000d54 <MPU9250_Parsing+0x2ec>)
 8000b9c:	ed93 7a00 	vldr	s14, [r3]
 8000ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ba8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000d48 <MPU9250_Parsing+0x2e0>
 8000bac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000bc0:	ee07 3a90 	vmov	s15, r3
 8000bc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bc8:	4b62      	ldr	r3, [pc, #392]	; (8000d54 <MPU9250_Parsing+0x2ec>)
 8000bca:	ed93 7a00 	vldr	s14, [r3]
 8000bce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd6:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8000d48 <MPU9250_Parsing+0x2e0>
 8000bda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bee:	ee07 3a90 	vmov	s15, r3
 8000bf2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bf6:	4b58      	ldr	r3, [pc, #352]	; (8000d58 <MPU9250_Parsing+0x2f0>)
 8000bf8:	ed93 7a00 	vldr	s14, [r3]
 8000bfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c0c:	ee07 3a90 	vmov	s15, r3
 8000c10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c14:	4b50      	ldr	r3, [pc, #320]	; (8000d58 <MPU9250_Parsing+0x2f0>)
 8000c16:	ed93 7a00 	vldr	s14, [r3]
 8000c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Az_Raw / MPU9250_Acc_LSB;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c2a:	ee07 3a90 	vmov	s15, r3
 8000c2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c32:	4b49      	ldr	r3, [pc, #292]	; (8000d58 <MPU9250_Parsing+0x2f0>)
 8000c34:	ed93 7a00 	vldr	s14, [r3]
 8000c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8000c48:	461a      	mov	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c50:	3b80      	subs	r3, #128	; 0x80
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da00      	bge.n	8000c58 <MPU9250_Parsing+0x1f0>
 8000c56:	33ff      	adds	r3, #255	; 0xff
 8000c58:	121b      	asrs	r3, r3, #8
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	fb03 f302 	mul.w	r3, r3, r2
 8000c60:	ee07 3a90 	vmov	s15, r3
 8000c64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c68:	4b3c      	ldr	r3, [pc, #240]	; (8000d5c <MPU9250_Parsing+0x2f4>)
 8000c6a:	ed93 7a00 	vldr	s14, [r3]
 8000c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000c7e:	461a      	mov	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8000c86:	3b80      	subs	r3, #128	; 0x80
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	da00      	bge.n	8000c8e <MPU9250_Parsing+0x226>
 8000c8c:	33ff      	adds	r3, #255	; 0xff
 8000c8e:	121b      	asrs	r3, r3, #8
 8000c90:	3301      	adds	r3, #1
 8000c92:	fb03 f302 	mul.w	r3, r3, r2
 8000c96:	ee07 3a90 	vmov	s15, r3
 8000c9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c9e:	4b2f      	ldr	r3, [pc, #188]	; (8000d5c <MPU9250_Parsing+0x2f4>)
 8000ca0:	ed93 7a00 	vldr	s14, [r3]
 8000ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000cbc:	3b80      	subs	r3, #128	; 0x80
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	da00      	bge.n	8000cc4 <MPU9250_Parsing+0x25c>
 8000cc2:	33ff      	adds	r3, #255	; 0xff
 8000cc4:	121b      	asrs	r3, r3, #8
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	fb03 f302 	mul.w	r3, r3, r2
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MPU9250_Parsing+0x2f4>)
 8000cd6:	ed93 7a00 	vldr	s14, [r3]
 8000cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	ed93 7a08 	vldr	s14, [r3, #32]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000cf0:	ee07 3a90 	vmov	s15, r3
 8000cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000d0e:	ee07 3a90 	vmov	s15, r3
 8000d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000d2c:	ee07 3a90 	vmov	s15, r3
 8000d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000d44:	e00c      	b.n	8000d60 <MPU9250_Parsing+0x2f8>
 8000d46:	bf00      	nop
 8000d48:	a252dd11 	.word	0xa252dd11
 8000d4c:	3f91df46 	.word	0x3f91df46
 8000d50:	2400027c 	.word	0x2400027c
 8000d54:	24000000 	.word	0x24000000
 8000d58:	24000004 	.word	0x24000004
 8000d5c:	24000008 	.word	0x24000008
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	DataStruct->My -= DataStruct->My_Offset;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000d84:	ee07 3a90 	vmov	s15, r3
 8000d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000da2:	ee07 3a90 	vmov	s15, r3
 8000da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	68b9      	ldr	r1, [r7, #8]
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <_write+0x24>)
 8000dd6:	f009 fcbb 	bl	800a750 <HAL_UART_Transmit_DMA>
}
 8000dda:	bf00      	nop
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	24000354 	.word	0x24000354

08000de8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dee:	f000 ffc7 	bl	8001d80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000df2:	f000 f87b 	bl	8000eec <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000df6:	f000 f8f7 	bl	8000fe8 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dfa:	f000 fa7b 	bl	80012f4 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000dfe:	f000 f977 	bl	80010f0 <MX_SPI1_Init>
	MX_DMA_Init();
 8000e02:	f000 fa4f 	bl	80012a4 <MX_DMA_Init>
	MX_TIM7_Init();
 8000e06:	f000 f9cb 	bl	80011a0 <MX_TIM7_Init>
	MX_QUADSPI_Init();
 8000e0a:	f000 f949 	bl	80010a0 <MX_QUADSPI_Init>
	MX_USART1_UART_Init();
 8000e0e:	f000 f9fd 	bl	800120c <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000e12:	f000 f905 	bl	8001020 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8000e16:	482d      	ldr	r0, [pc, #180]	; (8000ecc <main+0xe4>)
 8000e18:	f009 f952 	bl	800a0c0 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8000e1c:	e009      	b.n	8000e32 <main+0x4a>
	{
		if(tim1_10ms_flag == 1)
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <main+0xe8>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d105      	bne.n	8000e32 <main+0x4a>
		{
			tim1_10ms_flag = 0;
 8000e26:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <main+0xe8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initializing");
 8000e2c:	4829      	ldr	r0, [pc, #164]	; (8000ed4 <main+0xec>)
 8000e2e:	f00b fd4d 	bl	800c8cc <iprintf>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8000e32:	2303      	movs	r3, #3
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	2303      	movs	r3, #3
 8000e38:	2203      	movs	r2, #3
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	4826      	ldr	r0, [pc, #152]	; (8000ed8 <main+0xf0>)
 8000e3e:	f7ff fc23 	bl	8000688 <MPU9250_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0ea      	beq.n	8000e1e <main+0x36>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8000e48:	4823      	ldr	r0, [pc, #140]	; (8000ed8 <main+0xf0>)
 8000e4a:	f7ff fd09 	bl	8000860 <MPU9250_Bypass>
	MPU9250_AK8963_Setup(&hi2c1, &MPU9250);
 8000e4e:	4923      	ldr	r1, [pc, #140]	; (8000edc <main+0xf4>)
 8000e50:	4821      	ldr	r0, [pc, #132]	; (8000ed8 <main+0xf0>)
 8000e52:	f7ff fd73 	bl	800093c <MPU9250_AK8963_Setup>
	MPU9250_Master(&hi2c1);
 8000e56:	4820      	ldr	r0, [pc, #128]	; (8000ed8 <main+0xf0>)
 8000e58:	f7ff fd30 	bl	80008bc <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8000e5c:	481e      	ldr	r0, [pc, #120]	; (8000ed8 <main+0xf0>)
 8000e5e:	f7ff fdad 	bl	80009bc <MPU9250_Slave0_Enable>


	while (1)
	{

		if(MPU9250_DRDY == 1)
 8000e62:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <main+0xf8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d105      	bne.n	8000e76 <main+0x8e>
		{
			MPU9250_DRDY = 0;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <main+0xf8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
			MPU9250_Parsing(&MPU9250);
 8000e70:	481a      	ldr	r0, [pc, #104]	; (8000edc <main+0xf4>)
 8000e72:	f7ff fdf9 	bl	8000a68 <MPU9250_Parsing>
		}

		if(tim1_2ms_flag == 1)
 8000e76:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <main+0xfc>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d105      	bne.n	8000e8a <main+0xa2>
		{
			tim1_2ms_flag = 0;
 8000e7e:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <main+0xfc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <main+0xf0>)
 8000e86:	f7ff fdd9 	bl	8000a3c <MPU9250_Read_All>
		}

		if(tim1_10ms_flag == 1)
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <main+0xe8>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d1e7      	bne.n	8000e62 <main+0x7a>
		{
			tim1_10ms_flag = 0;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <main+0xe8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
			printf("%f \t %f \t %f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <main+0xf4>)
 8000e9a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000e9e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <main+0xf4>)
 8000ea4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000ea8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <main+0xf4>)
 8000eae:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8000eb2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000eb6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8000eba:	ed8d 7b00 	vstr	d7, [sp]
 8000ebe:	ec53 2b15 	vmov	r2, r3, d5
 8000ec2:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <main+0x100>)
 8000ec4:	f00b fd02 	bl	800c8cc <iprintf>
		if(MPU9250_DRDY == 1)
 8000ec8:	e7cb      	b.n	8000e62 <main+0x7a>
 8000eca:	bf00      	nop
 8000ecc:	240004e4 	.word	0x240004e4
 8000ed0:	24000213 	.word	0x24000213
 8000ed4:	0800e910 	.word	0x0800e910
 8000ed8:	24000290 	.word	0x24000290
 8000edc:	24000224 	.word	0x24000224
 8000ee0:	2400020c 	.word	0x2400020c
 8000ee4:	24000212 	.word	0x24000212
 8000ee8:	0800e928 	.word	0x0800e928

08000eec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b09c      	sub	sp, #112	; 0x70
 8000ef0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	224c      	movs	r2, #76	; 0x4c
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f00b f89c 	bl	800c038 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2220      	movs	r2, #32
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f00b f896 	bl	800c038 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f006 fb71 	bl	80075f4 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <SystemClock_Config+0xf4>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	4a31      	ldr	r2, [pc, #196]	; (8000fe0 <SystemClock_Config+0xf4>)
 8000f1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f20:	6193      	str	r3, [r2, #24]
 8000f22:	4b2f      	ldr	r3, [pc, #188]	; (8000fe0 <SystemClock_Config+0xf4>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <SystemClock_Config+0xf8>)
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	4a2c      	ldr	r2, [pc, #176]	; (8000fe4 <SystemClock_Config+0xf8>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f38:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <SystemClock_Config+0xf8>)
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f44:	bf00      	nop
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <SystemClock_Config+0xf4>)
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f52:	d1f8      	bne.n	8000f46 <SystemClock_Config+0x5a>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000f54:	2303      	movs	r3, #3
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	2302      	movs	r3, #2
 8000f68:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8000f6e:	2305      	movs	r3, #5
 8000f70:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000f72:	23c0      	movs	r3, #192	; 0xc0
 8000f74:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000f76:	2302      	movs	r3, #2
 8000f78:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000f82:	2308      	movs	r3, #8
 8000f84:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 fc22 	bl	80077dc <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0xb6>
	{
		Error_Handler();
 8000f9e:	f000 fa1b 	bl	80013d8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	233f      	movs	r3, #63	; 0x3f
 8000fa4:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fb2:	2340      	movs	r3, #64	; 0x40
 8000fb4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fb6:	2340      	movs	r3, #64	; 0x40
 8000fb8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fbe:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fc0:	2340      	movs	r3, #64	; 0x40
 8000fc2:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f007 f817 	bl	8007ffc <HAL_RCC_ClockConfig>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0xec>
	{
		Error_Handler();
 8000fd4:	f000 fa00 	bl	80013d8 <Error_Handler>
	}
}
 8000fd8:	bf00      	nop
 8000fda:	3770      	adds	r7, #112	; 0x70
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	58024800 	.word	0x58024800
 8000fe4:	58000400 	.word	0x58000400

08000fe8 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0b0      	sub	sp, #192	; 0xc0
 8000fec:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	22bc      	movs	r2, #188	; 0xbc
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00b f81f 	bl	800c038 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000ffa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ffe:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001000:	2300      	movs	r3, #0
 8001002:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4618      	mov	r0, r3
 8001008:	f007 fb84 	bl	8008714 <HAL_RCCEx_PeriphCLKConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <PeriphCommonClock_Config+0x2e>
	{
		Error_Handler();
 8001012:	f000 f9e1 	bl	80013d8 <Error_Handler>
	}
}
 8001016:	bf00      	nop
 8001018:	37c0      	adds	r7, #192	; 0xc0
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001024:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_I2C1_Init+0x74>)
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <MX_I2C1_Init+0x78>)
 8001028:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00B03FDB;
 800102a:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_I2C1_Init+0x74>)
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <MX_I2C1_Init+0x7c>)
 800102e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_I2C1_Init+0x74>)
 8001038:	2201      	movs	r2, #1
 800103a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_I2C1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_I2C1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_I2C1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800105a:	480e      	ldr	r0, [pc, #56]	; (8001094 <MX_I2C1_Init+0x74>)
 800105c:	f004 f880 	bl	8005160 <HAL_I2C_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8001066:	f000 f9b7 	bl	80013d8 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	4809      	ldr	r0, [pc, #36]	; (8001094 <MX_I2C1_Init+0x74>)
 800106e:	f006 fa29 	bl	80074c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001078:	f000 f9ae 	bl	80013d8 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_I2C1_Init+0x74>)
 8001080:	f006 fa6b 	bl	800755a <HAL_I2CEx_ConfigDigitalFilter>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800108a:	f000 f9a5 	bl	80013d8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	24000290 	.word	0x24000290
 8001098:	40005400 	.word	0x40005400
 800109c:	00b03fdb 	.word	0x00b03fdb

080010a0 <MX_QUADSPI_Init>:
 * @brief QUADSPI Initialization Function
 * @param None
 * @retval None
 */
static void MX_QUADSPI_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN QUADSPI_Init 1 */

	/* USER CODE END QUADSPI_Init 1 */
	/* QUADSPI parameter configuration*/
	hqspi.Instance = QUADSPI;
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_QUADSPI_Init+0x48>)
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <MX_QUADSPI_Init+0x4c>)
 80010a8:	601a      	str	r2, [r3, #0]
	hqspi.Init.ClockPrescaler = 255;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_QUADSPI_Init+0x48>)
 80010ac:	22ff      	movs	r2, #255	; 0xff
 80010ae:	605a      	str	r2, [r3, #4]
	hqspi.Init.FifoThreshold = 1;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_QUADSPI_Init+0x48>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	609a      	str	r2, [r3, #8]
	hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_QUADSPI_Init+0x48>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
	hqspi.Init.FlashSize = 1;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <MX_QUADSPI_Init+0x48>)
 80010be:	2201      	movs	r2, #1
 80010c0:	611a      	str	r2, [r3, #16]
	hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_QUADSPI_Init+0x48>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
	hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <MX_QUADSPI_Init+0x48>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
	hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_QUADSPI_Init+0x48>)
 80010d0:	2240      	movs	r2, #64	; 0x40
 80010d2:	621a      	str	r2, [r3, #32]
	if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_QUADSPI_Init+0x48>)
 80010d6:	f006 fac7 	bl	8007668 <HAL_QSPI_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_QUADSPI_Init+0x44>
	{
		Error_Handler();
 80010e0:	f000 f97a 	bl	80013d8 <Error_Handler>
	}
	/* USER CODE BEGIN QUADSPI_Init 2 */

	/* USER CODE END QUADSPI_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	24000530 	.word	0x24000530
 80010ec:	52005000 	.word	0x52005000

080010f0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <MX_SPI1_Init+0xa8>)
 80010f6:	4a29      	ldr	r2, [pc, #164]	; (800119c <MX_SPI1_Init+0xac>)
 80010f8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <MX_SPI1_Init+0xa8>)
 80010fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001100:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001108:	4b23      	ldr	r3, [pc, #140]	; (8001198 <MX_SPI1_Init+0xa8>)
 800110a:	2207      	movs	r2, #7
 800110c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800110e:	4b22      	ldr	r3, [pc, #136]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001114:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001118:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800111c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800111e:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001120:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001124:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001128:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800112c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001136:	2200      	movs	r2, #0
 8001138:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <MX_SPI1_Init+0xa8>)
 800113c:	2200      	movs	r2, #0
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001142:	2200      	movs	r2, #0
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001148:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114c:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001150:	2200      	movs	r2, #0
 8001152:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001156:	2200      	movs	r2, #0
 8001158:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_SPI1_Init+0xa8>)
 800115c:	2200      	movs	r2, #0
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
	hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001162:	2200      	movs	r2, #0
 8001164:	645a      	str	r2, [r3, #68]	; 0x44
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001166:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001168:	2200      	movs	r2, #0
 800116a:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_SPI1_Init+0xa8>)
 800116e:	2200      	movs	r2, #0
 8001170:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001174:	2200      	movs	r2, #0
 8001176:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_SPI1_Init+0xa8>)
 800117a:	2200      	movs	r2, #0
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001180:	2200      	movs	r2, #0
 8001182:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_SPI1_Init+0xa8>)
 8001186:	f008 fe27 	bl	8009dd8 <HAL_SPI_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_SPI1_Init+0xa4>
	{
		Error_Handler();
 8001190:	f000 f922 	bl	80013d8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2400045c 	.word	0x2400045c
 800119c:	40013000 	.word	0x40013000

080011a0 <MX_TIM7_Init>:
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_TIM7_Init+0x64>)
 80011b2:	4a15      	ldr	r2, [pc, #84]	; (8001208 <MX_TIM7_Init+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 39999;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_TIM7_Init+0x64>)
 80011b8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80011bc:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_TIM7_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 5;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_TIM7_Init+0x64>)
 80011c6:	2205      	movs	r2, #5
 80011c8:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_TIM7_Init+0x64>)
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011d0:	480c      	ldr	r0, [pc, #48]	; (8001204 <MX_TIM7_Init+0x64>)
 80011d2:	f008 ff1e 	bl	800a012 <HAL_TIM_Base_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM7_Init+0x40>
	{
		Error_Handler();
 80011dc:	f000 f8fc 	bl	80013d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_TIM7_Init+0x64>)
 80011ee:	f009 f9b9 	bl	800a564 <HAL_TIMEx_MasterConfigSynchronization>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM7_Init+0x5c>
	{
		Error_Handler();
 80011f8:	f000 f8ee 	bl	80013d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	240004e4 	.word	0x240004e4
 8001208:	40001400 	.word	0x40001400

0800120c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <MX_USART1_UART_Init+0x90>)
 8001212:	4a23      	ldr	r2, [pc, #140]	; (80012a0 <MX_USART1_UART_Init+0x94>)
 8001214:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <MX_USART1_UART_Init+0x90>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b1f      	ldr	r3, [pc, #124]	; (800129c <MX_USART1_UART_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <MX_USART1_UART_Init+0x90>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_USART1_UART_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_USART1_UART_Init+0x90>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_USART1_UART_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_USART1_UART_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <MX_USART1_UART_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USART1_UART_Init+0x90>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_USART1_UART_Init+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001254:	4811      	ldr	r0, [pc, #68]	; (800129c <MX_USART1_UART_Init+0x90>)
 8001256:	f009 fa2b 	bl	800a6b0 <HAL_UART_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8001260:	f000 f8ba 	bl	80013d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_USART1_UART_Init+0x90>)
 8001268:	f00a fdf1 	bl	800be4e <HAL_UARTEx_SetTxFifoThreshold>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8001272:	f000 f8b1 	bl	80013d8 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001276:	2100      	movs	r1, #0
 8001278:	4808      	ldr	r0, [pc, #32]	; (800129c <MX_USART1_UART_Init+0x90>)
 800127a:	f00a fe26 	bl	800beca <HAL_UARTEx_SetRxFifoThreshold>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8001284:	f000 f8a8 	bl	80013d8 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <MX_USART1_UART_Init+0x90>)
 800128a:	f00a fda7 	bl	800bddc <HAL_UARTEx_DisableFifoMode>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8001294:	f000 f8a0 	bl	80013d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	24000354 	.word	0x24000354
 80012a0:	40011000 	.word	0x40011000

080012a4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_DMA_Init+0x4c>)
 80012ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012b0:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <MX_DMA_Init+0x4c>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <MX_DMA_Init+0x4c>)
 80012bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	200b      	movs	r0, #11
 80012ce:	f000 fef4 	bl	80020ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012d2:	200b      	movs	r0, #11
 80012d4:	f000 ff0b 	bl	80020ee <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	200c      	movs	r0, #12
 80012de:	f000 feec 	bl	80020ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012e2:	200c      	movs	r0, #12
 80012e4:	f000 ff03 	bl	80020ee <HAL_NVIC_EnableIRQ>

}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	58024400 	.word	0x58024400

080012f4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800130a:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <MX_GPIO_Init+0xdc>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	4a2f      	ldr	r2, [pc, #188]	; (80013d0 <MX_GPIO_Init+0xdc>)
 8001312:	f043 0310 	orr.w	r3, r3, #16
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <MX_GPIO_Init+0xdc>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001328:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_GPIO_Init+0xdc>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <MX_GPIO_Init+0xdc>)
 8001330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <MX_GPIO_Init+0xdc>)
 800133a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <MX_GPIO_Init+0xdc>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <MX_GPIO_Init+0xdc>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_GPIO_Init+0xdc>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_GPIO_Init+0xdc>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136a:	4a19      	ldr	r2, [pc, #100]	; (80013d0 <MX_GPIO_Init+0xdc>)
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_GPIO_Init+0xdc>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MX_GPIO_Init+0xdc>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001388:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <MX_GPIO_Init+0xdc>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_GPIO_Init+0xdc>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2102      	movs	r1, #2
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <MX_GPIO_Init+0xe0>)
 80013a6:	f003 fec1 	bl	800512c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013aa:	2302      	movs	r3, #2
 80013ac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_GPIO_Init+0xe0>)
 80013c2:	f003 fd03 	bl	8004dcc <HAL_GPIO_Init>

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58020000 	.word	0x58020000

080013d8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013dc:	b672      	cpsid	i
}
 80013de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013e0:	e7fe      	b.n	80013e0 <Error_Handler+0x8>
	...

080013e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_MspInit+0x30>)
 80013ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013f0:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x30>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x30>)
 80013fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	58024400 	.word	0x58024400

08001418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b0b8      	sub	sp, #224	; 0xe0
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	22bc      	movs	r2, #188	; 0xbc
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f00a fdfd 	bl	800c038 <memset>
  if(hi2c->Instance==I2C1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a3f      	ldr	r2, [pc, #252]	; (8001540 <HAL_I2C_MspInit+0x128>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d177      	bne.n	8001538 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001448:	2308      	movs	r3, #8
 800144a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4618      	mov	r0, r3
 8001458:	f007 f95c 	bl	8008714 <HAL_RCCEx_PeriphCLKConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001462:	f7ff ffb9 	bl	80013d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b37      	ldr	r3, [pc, #220]	; (8001544 <HAL_I2C_MspInit+0x12c>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	4a35      	ldr	r2, [pc, #212]	; (8001544 <HAL_I2C_MspInit+0x12c>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001476:	4b33      	ldr	r3, [pc, #204]	; (8001544 <HAL_I2C_MspInit+0x12c>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001484:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148c:	2312      	movs	r3, #18
 800148e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149e:	2304      	movs	r3, #4
 80014a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014a8:	4619      	mov	r1, r3
 80014aa:	4827      	ldr	r0, [pc, #156]	; (8001548 <HAL_I2C_MspInit+0x130>)
 80014ac:	f003 fc8e 	bl	8004dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_I2C_MspInit+0x12c>)
 80014b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014b6:	4a23      	ldr	r2, [pc, #140]	; (8001544 <HAL_I2C_MspInit+0x12c>)
 80014b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_I2C_MspInit+0x12c>)
 80014c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 80014ce:	4b1f      	ldr	r3, [pc, #124]	; (800154c <HAL_I2C_MspInit+0x134>)
 80014d0:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <HAL_I2C_MspInit+0x138>)
 80014d2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_I2C_MspInit+0x134>)
 80014d6:	2221      	movs	r2, #33	; 0x21
 80014d8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_I2C_MspInit+0x134>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	; (800154c <HAL_I2C_MspInit+0x134>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_I2C_MspInit+0x134>)
 80014e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_I2C_MspInit+0x134>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_I2C_MspInit+0x134>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <HAL_I2C_MspInit+0x134>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_I2C_MspInit+0x134>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <HAL_I2C_MspInit+0x134>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800150c:	480f      	ldr	r0, [pc, #60]	; (800154c <HAL_I2C_MspInit+0x134>)
 800150e:	f000 fe09 	bl	8002124 <HAL_DMA_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8001518:	f7ff ff5e 	bl	80013d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a0b      	ldr	r2, [pc, #44]	; (800154c <HAL_I2C_MspInit+0x134>)
 8001520:	63da      	str	r2, [r3, #60]	; 0x3c
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <HAL_I2C_MspInit+0x134>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	201f      	movs	r0, #31
 800152e:	f000 fdc4 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001532:	201f      	movs	r0, #31
 8001534:	f000 fddb 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	37e0      	adds	r7, #224	; 0xe0
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40005400 	.word	0x40005400
 8001544:	58024400 	.word	0x58024400
 8001548:	58020400 	.word	0x58020400
 800154c:	240003e4 	.word	0x240003e4
 8001550:	40020028 	.word	0x40020028

08001554 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0ba      	sub	sp, #232	; 0xe8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800156c:	f107 0318 	add.w	r3, r7, #24
 8001570:	22bc      	movs	r2, #188	; 0xbc
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f00a fd5f 	bl	800c038 <memset>
  if(hqspi->Instance==QUADSPI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a5f      	ldr	r2, [pc, #380]	; (80016fc <HAL_QSPI_MspInit+0x1a8>)
 8001580:	4293      	cmp	r3, r2
 8001582:	f040 80b6 	bne.w	80016f2 <HAL_QSPI_MspInit+0x19e>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800158a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800158c:	2300      	movs	r3, #0
 800158e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001590:	f107 0318 	add.w	r3, r7, #24
 8001594:	4618      	mov	r0, r3
 8001596:	f007 f8bd 	bl	8008714 <HAL_RCCEx_PeriphCLKConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 80015a0:	f7ff ff1a 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015a4:	4b56      	ldr	r3, [pc, #344]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 80015a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80015aa:	4a55      	ldr	r2, [pc, #340]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80015b4:	4b52      	ldr	r3, [pc, #328]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 80015b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c2:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 80015c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c8:	4a4d      	ldr	r2, [pc, #308]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 80015ca:	f043 0310 	orr.w	r3, r3, #16
 80015ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d2:	4b4b      	ldr	r3, [pc, #300]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 80015d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e0:	4b47      	ldr	r3, [pc, #284]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 80015e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e6:	4a46      	ldr	r2, [pc, #280]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f0:	4b43      	ldr	r3, [pc, #268]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 80015f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	4b40      	ldr	r3, [pc, #256]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 8001600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001604:	4a3e      	ldr	r2, [pc, #248]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160e:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <HAL_QSPI_MspInit+0x1ac>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800161c:	2304      	movs	r3, #4
 800161e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001634:	2309      	movs	r3, #9
 8001636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800163e:	4619      	mov	r1, r3
 8001640:	4830      	ldr	r0, [pc, #192]	; (8001704 <HAL_QSPI_MspInit+0x1b0>)
 8001642:	f003 fbc3 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001646:	2304      	movs	r3, #4
 8001648:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800165e:	2309      	movs	r3, #9
 8001660:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001668:	4619      	mov	r1, r3
 800166a:	4827      	ldr	r0, [pc, #156]	; (8001708 <HAL_QSPI_MspInit+0x1b4>)
 800166c:	f003 fbae 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001670:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800168a:	230a      	movs	r3, #10
 800168c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001690:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001694:	4619      	mov	r1, r3
 8001696:	481b      	ldr	r0, [pc, #108]	; (8001704 <HAL_QSPI_MspInit+0x1b0>)
 8001698:	f003 fb98 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800169c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80016a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	2300      	movs	r3, #0
 80016b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016b6:	2309      	movs	r3, #9
 80016b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016c0:	4619      	mov	r1, r3
 80016c2:	4812      	ldr	r0, [pc, #72]	; (800170c <HAL_QSPI_MspInit+0x1b8>)
 80016c4:	f003 fb82 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016c8:	2340      	movs	r3, #64	; 0x40
 80016ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016e0:	230a      	movs	r3, #10
 80016e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80016ea:	4619      	mov	r1, r3
 80016ec:	4806      	ldr	r0, [pc, #24]	; (8001708 <HAL_QSPI_MspInit+0x1b4>)
 80016ee:	f003 fb6d 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80016f2:	bf00      	nop
 80016f4:	37e8      	adds	r7, #232	; 0xe8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	52005000 	.word	0x52005000
 8001700:	58024400 	.word	0x58024400
 8001704:	58021000 	.word	0x58021000
 8001708:	58020400 	.word	0x58020400
 800170c:	58020c00 	.word	0x58020c00

08001710 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b0b8      	sub	sp, #224	; 0xe0
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	22bc      	movs	r2, #188	; 0xbc
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f00a fc81 	bl	800c038 <memset>
  if(hspi->Instance==SPI1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <HAL_SPI_MspInit+0xc0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d142      	bne.n	80017c6 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001744:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001746:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800174a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4618      	mov	r0, r3
 8001752:	f006 ffdf 	bl	8008714 <HAL_RCCEx_PeriphCLKConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 800175c:	f7ff fe3c 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_SPI_MspInit+0xc4>)
 8001762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001766:	4a1b      	ldr	r2, [pc, #108]	; (80017d4 <HAL_SPI_MspInit+0xc4>)
 8001768:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800176c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_SPI_MspInit+0xc4>)
 8001772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_SPI_MspInit+0xc4>)
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001784:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <HAL_SPI_MspInit+0xc4>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_SPI_MspInit+0xc4>)
 8001790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800179c:	23e0      	movs	r3, #224	; 0xe0
 800179e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017b4:	2305      	movs	r3, #5
 80017b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_SPI_MspInit+0xc8>)
 80017c2:	f003 fb03 	bl	8004dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	37e0      	adds	r7, #224	; 0xe0
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40013000 	.word	0x40013000
 80017d4:	58024400 	.word	0x58024400
 80017d8:	58020000 	.word	0x58020000

080017dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <HAL_TIM_Base_MspInit+0x48>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d116      	bne.n	800181c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_TIM_Base_MspInit+0x4c>)
 80017f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017f4:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <HAL_TIM_Base_MspInit+0x4c>)
 80017f6:	f043 0320 	orr.w	r3, r3, #32
 80017fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_TIM_Base_MspInit+0x4c>)
 8001800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	2037      	movs	r0, #55	; 0x37
 8001812:	f000 fc52 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001816:	2037      	movs	r0, #55	; 0x37
 8001818:	f000 fc69 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40001400 	.word	0x40001400
 8001828:	58024400 	.word	0x58024400

0800182c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b0b8      	sub	sp, #224	; 0xe0
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	22bc      	movs	r2, #188	; 0xbc
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f00a fbf3 	bl	800c038 <memset>
  if(huart->Instance==USART1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a3f      	ldr	r2, [pc, #252]	; (8001954 <HAL_UART_MspInit+0x128>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d177      	bne.n	800194c <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800185c:	2301      	movs	r3, #1
 800185e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4618      	mov	r0, r3
 800186c:	f006 ff52 	bl	8008714 <HAL_RCCEx_PeriphCLKConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001876:	f7ff fdaf 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800187a:	4b37      	ldr	r3, [pc, #220]	; (8001958 <HAL_UART_MspInit+0x12c>)
 800187c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001880:	4a35      	ldr	r2, [pc, #212]	; (8001958 <HAL_UART_MspInit+0x12c>)
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_UART_MspInit+0x12c>)
 800188c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001890:	f003 0310 	and.w	r3, r3, #16
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_UART_MspInit+0x12c>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189e:	4a2e      	ldr	r2, [pc, #184]	; (8001958 <HAL_UART_MspInit+0x12c>)
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_UART_MspInit+0x12c>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80018d0:	2304      	movs	r3, #4
 80018d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018da:	4619      	mov	r1, r3
 80018dc:	481f      	ldr	r0, [pc, #124]	; (800195c <HAL_UART_MspInit+0x130>)
 80018de:	f003 fa75 	bl	8004dcc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <HAL_UART_MspInit+0x134>)
 80018e4:	4a1f      	ldr	r2, [pc, #124]	; (8001964 <HAL_UART_MspInit+0x138>)
 80018e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_UART_MspInit+0x134>)
 80018ea:	222a      	movs	r2, #42	; 0x2a
 80018ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	; (8001960 <HAL_UART_MspInit+0x134>)
 80018f0:	2240      	movs	r2, #64	; 0x40
 80018f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f4:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_UART_MspInit+0x134>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_UART_MspInit+0x134>)
 80018fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001900:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_UART_MspInit+0x134>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_UART_MspInit+0x134>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <HAL_UART_MspInit+0x134>)
 8001910:	2200      	movs	r2, #0
 8001912:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_UART_MspInit+0x134>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_UART_MspInit+0x134>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001920:	480f      	ldr	r0, [pc, #60]	; (8001960 <HAL_UART_MspInit+0x134>)
 8001922:	f000 fbff 	bl	8002124 <HAL_DMA_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 800192c:	f7ff fd54 	bl	80013d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_UART_MspInit+0x134>)
 8001934:	679a      	str	r2, [r3, #120]	; 0x78
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_UART_MspInit+0x134>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2100      	movs	r1, #0
 8001940:	2025      	movs	r0, #37	; 0x25
 8001942:	f000 fbba 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001946:	2025      	movs	r0, #37	; 0x25
 8001948:	f000 fbd1 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800194c:	bf00      	nop
 800194e:	37e0      	adds	r7, #224	; 0xe0
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40011000 	.word	0x40011000
 8001958:	58024400 	.word	0x58024400
 800195c:	58020400 	.word	0x58020400
 8001960:	240002dc 	.word	0x240002dc
 8001964:	40020010 	.word	0x40020010

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b4:	f000 fa56 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <DMA1_Stream0_IRQHandler+0x10>)
 80019c2:	f001 fed7 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	240002dc 	.word	0x240002dc

080019d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <DMA1_Stream1_IRQHandler+0x10>)
 80019d6:	f001 fecd 	bl	8003774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	240003e4 	.word	0x240003e4

080019e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <I2C1_EV_IRQHandler+0x10>)
 80019ea:	f003 ff6f 	bl	80058cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	24000290 	.word	0x24000290

080019f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <USART1_IRQHandler+0x10>)
 80019fe:	f008 ff27 	bl	800a850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	24000354 	.word	0x24000354

08001a0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <TIM7_IRQHandler+0x10>)
 8001a12:	f008 fbc5 	bl	800a1a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	240004e4 	.word	0x240004e4

08001a20 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d11f      	bne.n	8001a72 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		tim1_2ms_count++;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	3301      	adds	r3, #1
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a3c:	701a      	strb	r2, [r3, #0]
		if(tim1_2ms_count == 2)
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d105      	bne.n	8001a52 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim1_2ms_count = 0;
 8001a46:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
			tim1_2ms_flag = 1;
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
		}
		tim1_10ms_count++;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a5c:	701a      	strb	r2, [r3, #0]
		if(tim1_10ms_count == 10)
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b0a      	cmp	r3, #10
 8001a64:	d105      	bne.n	8001a72 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			tim1_10ms_count = 0;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
			tim1_10ms_flag = 1;
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40001400 	.word	0x40001400
 8001a84:	24000210 	.word	0x24000210
 8001a88:	24000212 	.word	0x24000212
 8001a8c:	24000211 	.word	0x24000211
 8001a90:	24000213 	.word	0x24000213

08001a94 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(hi2c->Instance == I2C1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d102      	bne.n	8001aac <HAL_I2C_MemRxCpltCallback+0x18>
  {
	  MPU9250_DRDY = 1;
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <HAL_I2C_MemRxCpltCallback+0x28>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40005400 	.word	0x40005400
 8001abc:	2400020c 	.word	0x2400020c

08001ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
	return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_kill>:

int _kill(int pid, int sig)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ada:	f00a fa83 	bl	800bfe4 <__errno>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2216      	movs	r2, #22
 8001ae2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <_exit>:

void _exit (int status)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001af8:	f04f 31ff 	mov.w	r1, #4294967295
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ffe7 	bl	8001ad0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b02:	e7fe      	b.n	8001b02 <_exit+0x12>

08001b04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e00a      	b.n	8001b2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b16:	f3af 8000 	nop.w
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	60ba      	str	r2, [r7, #8]
 8001b22:	b2ca      	uxtb	r2, r1
 8001b24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dbf0      	blt.n	8001b16 <_read+0x12>
	}

return len;
 8001b34:	687b      	ldr	r3, [r7, #4]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
	return -1;
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b66:	605a      	str	r2, [r3, #4]
	return 0;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_isatty>:

int _isatty(int file)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
	return 0;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f00a fa04 	bl	800bfe4 <__errno>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	24080000 	.word	0x24080000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	24000214 	.word	0x24000214
 8001c10:	24000590 	.word	0x24000590

08001c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c18:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <SystemInit+0xec>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	4a38      	ldr	r2, [pc, #224]	; (8001d00 <SystemInit+0xec>)
 8001c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c28:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <SystemInit+0xf0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	2b06      	cmp	r3, #6
 8001c32:	d807      	bhi.n	8001c44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c34:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <SystemInit+0xf0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 030f 	bic.w	r3, r3, #15
 8001c3c:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <SystemInit+0xf0>)
 8001c3e:	f043 0307 	orr.w	r3, r3, #7
 8001c42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c44:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <SystemInit+0xf4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a2f      	ldr	r2, [pc, #188]	; (8001d08 <SystemInit+0xf4>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c50:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <SystemInit+0xf4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c56:	4b2c      	ldr	r3, [pc, #176]	; (8001d08 <SystemInit+0xf4>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	492b      	ldr	r1, [pc, #172]	; (8001d08 <SystemInit+0xf4>)
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <SystemInit+0xf8>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <SystemInit+0xf0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <SystemInit+0xf0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 030f 	bic.w	r3, r3, #15
 8001c76:	4a23      	ldr	r2, [pc, #140]	; (8001d04 <SystemInit+0xf0>)
 8001c78:	f043 0307 	orr.w	r3, r3, #7
 8001c7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <SystemInit+0xf4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c84:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <SystemInit+0xf4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <SystemInit+0xf4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <SystemInit+0xf4>)
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <SystemInit+0xfc>)
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c96:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <SystemInit+0xf4>)
 8001c98:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <SystemInit+0x100>)
 8001c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <SystemInit+0xf4>)
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <SystemInit+0x104>)
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ca2:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <SystemInit+0xf4>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ca8:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <SystemInit+0xf4>)
 8001caa:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <SystemInit+0x104>)
 8001cac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <SystemInit+0xf4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <SystemInit+0xf4>)
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <SystemInit+0x104>)
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <SystemInit+0xf4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cc0:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <SystemInit+0xf4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <SystemInit+0xf4>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <SystemInit+0xf4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001cd2:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <SystemInit+0x108>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <SystemInit+0x10c>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cde:	d202      	bcs.n	8001ce6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <SystemInit+0x110>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <SystemInit+0x114>)
 8001ce8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001cec:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cee:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SystemInit+0xec>)
 8001cf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	52002000 	.word	0x52002000
 8001d08:	58024400 	.word	0x58024400
 8001d0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d10:	02020200 	.word	0x02020200
 8001d14:	01ff0000 	.word	0x01ff0000
 8001d18:	01010280 	.word	0x01010280
 8001d1c:	5c001000 	.word	0x5c001000
 8001d20:	ffff0000 	.word	0xffff0000
 8001d24:	51008108 	.word	0x51008108
 8001d28:	52004000 	.word	0x52004000

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d30:	f7ff ff70 	bl	8001c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d36:	490d      	ldr	r1, [pc, #52]	; (8001d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d3c:	e002      	b.n	8001d44 <LoopCopyDataInit>

08001d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d42:	3304      	adds	r3, #4

08001d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d48:	d3f9      	bcc.n	8001d3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	; (8001d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d50:	e001      	b.n	8001d56 <LoopFillZerobss>

08001d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d54:	3204      	adds	r2, #4

08001d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d58:	d3fb      	bcc.n	8001d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f00a f949 	bl	800bff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7ff f843 	bl	8000de8 <main>
  bx  lr
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d6c:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 8001d70:	0800ed6c 	.word	0x0800ed6c
  ldr r2, =_sbss
 8001d74:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8001d78:	24000590 	.word	0x24000590

08001d7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC3_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d86:	2003      	movs	r0, #3
 8001d88:	f000 f98c 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d8c:	f006 faec 	bl	8008368 <HAL_RCC_GetSysClockFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_Init+0x68>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	4913      	ldr	r1, [pc, #76]	; (8001dec <HAL_Init+0x6c>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_Init+0x68>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 030f 	and.w	r3, r3, #15
 8001db2:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <HAL_Init+0x6c>)
 8001db4:	5cd3      	ldrb	r3, [r2, r3]
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc0:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <HAL_Init+0x70>)
 8001dc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_Init+0x74>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dca:	200f      	movs	r0, #15
 8001dcc:	f000 f814 	bl	8001df8 <HAL_InitTick>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e002      	b.n	8001de0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dda:	f7ff fb03 	bl	80013e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	58024400 	.word	0x58024400
 8001dec:	0800e93c 	.word	0x0800e93c
 8001df0:	24000010 	.word	0x24000010
 8001df4:	2400000c 	.word	0x2400000c

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e00:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <HAL_InitTick+0x60>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e021      	b.n	8001e50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_InitTick+0x64>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_InitTick+0x60>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f971 	bl	800210a <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00e      	b.n	8001e50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d80a      	bhi.n	8001e4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f000 f93b 	bl	80020ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_InitTick+0x68>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	24000018 	.word	0x24000018
 8001e5c:	2400000c 	.word	0x2400000c
 8001e60:	24000014 	.word	0x24000014

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	24000018 	.word	0x24000018
 8001e88:	2400057c 	.word	0x2400057c

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	2400057c 	.word	0x2400057c

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	24000018 	.word	0x24000018

08001eec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_GetREVID+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0c1b      	lsrs	r3, r3, #16
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	5c001000 	.word	0x5c001000

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <__NVIC_SetPriorityGrouping+0x40>)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	60d3      	str	r3, [r2, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000ed00 	.word	0xe000ed00
 8001f48:	05fa0000 	.word	0x05fa0000

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	; (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	; (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	; (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	; 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
         );
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	; 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f7ff ff8e 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff29 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff40 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff90 	bl	8001ff8 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5f 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff33 	bl	8001f68 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa4 	bl	8002060 <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff feae 	bl	8001e8c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e316      	b.n	800276a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a66      	ldr	r2, [pc, #408]	; (80022dc <HAL_DMA_Init+0x1b8>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d04a      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a65      	ldr	r2, [pc, #404]	; (80022e0 <HAL_DMA_Init+0x1bc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d045      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a63      	ldr	r2, [pc, #396]	; (80022e4 <HAL_DMA_Init+0x1c0>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d040      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a62      	ldr	r2, [pc, #392]	; (80022e8 <HAL_DMA_Init+0x1c4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d03b      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a60      	ldr	r2, [pc, #384]	; (80022ec <HAL_DMA_Init+0x1c8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d036      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a5f      	ldr	r2, [pc, #380]	; (80022f0 <HAL_DMA_Init+0x1cc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d031      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5d      	ldr	r2, [pc, #372]	; (80022f4 <HAL_DMA_Init+0x1d0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d02c      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a5c      	ldr	r2, [pc, #368]	; (80022f8 <HAL_DMA_Init+0x1d4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d027      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5a      	ldr	r2, [pc, #360]	; (80022fc <HAL_DMA_Init+0x1d8>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d022      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a59      	ldr	r2, [pc, #356]	; (8002300 <HAL_DMA_Init+0x1dc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d01d      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a57      	ldr	r2, [pc, #348]	; (8002304 <HAL_DMA_Init+0x1e0>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d018      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a56      	ldr	r2, [pc, #344]	; (8002308 <HAL_DMA_Init+0x1e4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d013      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a54      	ldr	r2, [pc, #336]	; (800230c <HAL_DMA_Init+0x1e8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00e      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a53      	ldr	r2, [pc, #332]	; (8002310 <HAL_DMA_Init+0x1ec>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d009      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a51      	ldr	r2, [pc, #324]	; (8002314 <HAL_DMA_Init+0x1f0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d004      	beq.n	80021dc <HAL_DMA_Init+0xb8>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a50      	ldr	r2, [pc, #320]	; (8002318 <HAL_DMA_Init+0x1f4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_DMA_Init+0xbc>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <HAL_DMA_Init+0xbe>
 80021e0:	2300      	movs	r3, #0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 813b 	beq.w	800245e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a37      	ldr	r2, [pc, #220]	; (80022dc <HAL_DMA_Init+0x1b8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d04a      	beq.n	8002298 <HAL_DMA_Init+0x174>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a36      	ldr	r2, [pc, #216]	; (80022e0 <HAL_DMA_Init+0x1bc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d045      	beq.n	8002298 <HAL_DMA_Init+0x174>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a34      	ldr	r2, [pc, #208]	; (80022e4 <HAL_DMA_Init+0x1c0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d040      	beq.n	8002298 <HAL_DMA_Init+0x174>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a33      	ldr	r2, [pc, #204]	; (80022e8 <HAL_DMA_Init+0x1c4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d03b      	beq.n	8002298 <HAL_DMA_Init+0x174>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a31      	ldr	r2, [pc, #196]	; (80022ec <HAL_DMA_Init+0x1c8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d036      	beq.n	8002298 <HAL_DMA_Init+0x174>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a30      	ldr	r2, [pc, #192]	; (80022f0 <HAL_DMA_Init+0x1cc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d031      	beq.n	8002298 <HAL_DMA_Init+0x174>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2e      	ldr	r2, [pc, #184]	; (80022f4 <HAL_DMA_Init+0x1d0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d02c      	beq.n	8002298 <HAL_DMA_Init+0x174>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a2d      	ldr	r2, [pc, #180]	; (80022f8 <HAL_DMA_Init+0x1d4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d027      	beq.n	8002298 <HAL_DMA_Init+0x174>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2b      	ldr	r2, [pc, #172]	; (80022fc <HAL_DMA_Init+0x1d8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d022      	beq.n	8002298 <HAL_DMA_Init+0x174>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a2a      	ldr	r2, [pc, #168]	; (8002300 <HAL_DMA_Init+0x1dc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d01d      	beq.n	8002298 <HAL_DMA_Init+0x174>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a28      	ldr	r2, [pc, #160]	; (8002304 <HAL_DMA_Init+0x1e0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d018      	beq.n	8002298 <HAL_DMA_Init+0x174>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a27      	ldr	r2, [pc, #156]	; (8002308 <HAL_DMA_Init+0x1e4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d013      	beq.n	8002298 <HAL_DMA_Init+0x174>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a25      	ldr	r2, [pc, #148]	; (800230c <HAL_DMA_Init+0x1e8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00e      	beq.n	8002298 <HAL_DMA_Init+0x174>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a24      	ldr	r2, [pc, #144]	; (8002310 <HAL_DMA_Init+0x1ec>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d009      	beq.n	8002298 <HAL_DMA_Init+0x174>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a22      	ldr	r2, [pc, #136]	; (8002314 <HAL_DMA_Init+0x1f0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d004      	beq.n	8002298 <HAL_DMA_Init+0x174>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a21      	ldr	r2, [pc, #132]	; (8002318 <HAL_DMA_Init+0x1f4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d108      	bne.n	80022aa <HAL_DMA_Init+0x186>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e007      	b.n	80022ba <HAL_DMA_Init+0x196>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0201 	bic.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80022ba:	e02f      	b.n	800231c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022bc:	f7ff fde6 	bl	8001e8c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d928      	bls.n	800231c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2220      	movs	r2, #32
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2203      	movs	r2, #3
 80022d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e246      	b.n	800276a <HAL_DMA_Init+0x646>
 80022dc:	40020010 	.word	0x40020010
 80022e0:	40020028 	.word	0x40020028
 80022e4:	40020040 	.word	0x40020040
 80022e8:	40020058 	.word	0x40020058
 80022ec:	40020070 	.word	0x40020070
 80022f0:	40020088 	.word	0x40020088
 80022f4:	400200a0 	.word	0x400200a0
 80022f8:	400200b8 	.word	0x400200b8
 80022fc:	40020410 	.word	0x40020410
 8002300:	40020428 	.word	0x40020428
 8002304:	40020440 	.word	0x40020440
 8002308:	40020458 	.word	0x40020458
 800230c:	40020470 	.word	0x40020470
 8002310:	40020488 	.word	0x40020488
 8002314:	400204a0 	.word	0x400204a0
 8002318:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1c8      	bne.n	80022bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4b83      	ldr	r3, [pc, #524]	; (8002544 <HAL_DMA_Init+0x420>)
 8002336:	4013      	ands	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002342:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4313      	orrs	r3, r2
 8002366:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	2b04      	cmp	r3, #4
 800236e:	d107      	bne.n	8002380 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	4313      	orrs	r3, r2
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002380:	4b71      	ldr	r3, [pc, #452]	; (8002548 <HAL_DMA_Init+0x424>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b71      	ldr	r3, [pc, #452]	; (800254c <HAL_DMA_Init+0x428>)
 8002386:	4013      	ands	r3, r2
 8002388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800238c:	d328      	bcc.n	80023e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b28      	cmp	r3, #40	; 0x28
 8002394:	d903      	bls.n	800239e <HAL_DMA_Init+0x27a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b2e      	cmp	r3, #46	; 0x2e
 800239c:	d917      	bls.n	80023ce <HAL_DMA_Init+0x2aa>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b3e      	cmp	r3, #62	; 0x3e
 80023a4:	d903      	bls.n	80023ae <HAL_DMA_Init+0x28a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b42      	cmp	r3, #66	; 0x42
 80023ac:	d90f      	bls.n	80023ce <HAL_DMA_Init+0x2aa>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b46      	cmp	r3, #70	; 0x46
 80023b4:	d903      	bls.n	80023be <HAL_DMA_Init+0x29a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b48      	cmp	r3, #72	; 0x48
 80023bc:	d907      	bls.n	80023ce <HAL_DMA_Init+0x2aa>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b4e      	cmp	r3, #78	; 0x4e
 80023c4:	d905      	bls.n	80023d2 <HAL_DMA_Init+0x2ae>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b52      	cmp	r3, #82	; 0x52
 80023cc:	d801      	bhi.n	80023d2 <HAL_DMA_Init+0x2ae>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_DMA_Init+0x2b0>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f023 0307 	bic.w	r3, r3, #7
 80023f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	2b04      	cmp	r3, #4
 8002408:	d117      	bne.n	800243a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00e      	beq.n	800243a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f002 fb4b 	bl	8004ab8 <DMA_CheckFifoParam>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e197      	b.n	800276a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f002 fa86 	bl	8004954 <DMA_CalcBaseAndBitshift>
 8002448:	4603      	mov	r3, r0
 800244a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	223f      	movs	r2, #63	; 0x3f
 8002456:	409a      	lsls	r2, r3
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	e0cd      	b.n	80025fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3b      	ldr	r2, [pc, #236]	; (8002550 <HAL_DMA_Init+0x42c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d022      	beq.n	80024ae <HAL_DMA_Init+0x38a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a39      	ldr	r2, [pc, #228]	; (8002554 <HAL_DMA_Init+0x430>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01d      	beq.n	80024ae <HAL_DMA_Init+0x38a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a38      	ldr	r2, [pc, #224]	; (8002558 <HAL_DMA_Init+0x434>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d018      	beq.n	80024ae <HAL_DMA_Init+0x38a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a36      	ldr	r2, [pc, #216]	; (800255c <HAL_DMA_Init+0x438>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_DMA_Init+0x38a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a35      	ldr	r2, [pc, #212]	; (8002560 <HAL_DMA_Init+0x43c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00e      	beq.n	80024ae <HAL_DMA_Init+0x38a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a33      	ldr	r2, [pc, #204]	; (8002564 <HAL_DMA_Init+0x440>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d009      	beq.n	80024ae <HAL_DMA_Init+0x38a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a32      	ldr	r2, [pc, #200]	; (8002568 <HAL_DMA_Init+0x444>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d004      	beq.n	80024ae <HAL_DMA_Init+0x38a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a30      	ldr	r2, [pc, #192]	; (800256c <HAL_DMA_Init+0x448>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_Init+0x38e>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_DMA_Init+0x390>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8097 	beq.w	80025e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a24      	ldr	r2, [pc, #144]	; (8002550 <HAL_DMA_Init+0x42c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d021      	beq.n	8002508 <HAL_DMA_Init+0x3e4>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a22      	ldr	r2, [pc, #136]	; (8002554 <HAL_DMA_Init+0x430>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01c      	beq.n	8002508 <HAL_DMA_Init+0x3e4>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a21      	ldr	r2, [pc, #132]	; (8002558 <HAL_DMA_Init+0x434>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d017      	beq.n	8002508 <HAL_DMA_Init+0x3e4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1f      	ldr	r2, [pc, #124]	; (800255c <HAL_DMA_Init+0x438>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d012      	beq.n	8002508 <HAL_DMA_Init+0x3e4>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1e      	ldr	r2, [pc, #120]	; (8002560 <HAL_DMA_Init+0x43c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00d      	beq.n	8002508 <HAL_DMA_Init+0x3e4>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <HAL_DMA_Init+0x440>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d008      	beq.n	8002508 <HAL_DMA_Init+0x3e4>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <HAL_DMA_Init+0x444>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d003      	beq.n	8002508 <HAL_DMA_Init+0x3e4>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <HAL_DMA_Init+0x448>)
 8002506:	4293      	cmp	r3, r2
 8002508:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_DMA_Init+0x44c>)
 8002526:	4013      	ands	r3, r2
 8002528:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b40      	cmp	r3, #64	; 0x40
 8002530:	d020      	beq.n	8002574 <HAL_DMA_Init+0x450>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b80      	cmp	r3, #128	; 0x80
 8002538:	d102      	bne.n	8002540 <HAL_DMA_Init+0x41c>
 800253a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800253e:	e01a      	b.n	8002576 <HAL_DMA_Init+0x452>
 8002540:	2300      	movs	r3, #0
 8002542:	e018      	b.n	8002576 <HAL_DMA_Init+0x452>
 8002544:	fe10803f 	.word	0xfe10803f
 8002548:	5c001000 	.word	0x5c001000
 800254c:	ffff0000 	.word	0xffff0000
 8002550:	58025408 	.word	0x58025408
 8002554:	5802541c 	.word	0x5802541c
 8002558:	58025430 	.word	0x58025430
 800255c:	58025444 	.word	0x58025444
 8002560:	58025458 	.word	0x58025458
 8002564:	5802546c 	.word	0x5802546c
 8002568:	58025480 	.word	0x58025480
 800256c:	58025494 	.word	0x58025494
 8002570:	fffe000f 	.word	0xfffe000f
 8002574:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68d2      	ldr	r2, [r2, #12]
 800257a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800257c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002584:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800258c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002594:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800259c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b6e      	ldr	r3, [pc, #440]	; (8002774 <HAL_DMA_Init+0x650>)
 80025bc:	4413      	add	r3, r2
 80025be:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_DMA_Init+0x654>)
 80025c0:	fba2 2303 	umull	r2, r3, r2, r3
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	009a      	lsls	r2, r3, #2
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f002 f9c1 	bl	8004954 <DMA_CalcBaseAndBitshift>
 80025d2:	4603      	mov	r3, r0
 80025d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	f003 031f 	and.w	r3, r3, #31
 80025de:	2201      	movs	r2, #1
 80025e0:	409a      	lsls	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	e008      	b.n	80025fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2240      	movs	r2, #64	; 0x40
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2203      	movs	r2, #3
 80025f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0b7      	b.n	800276a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a5f      	ldr	r2, [pc, #380]	; (800277c <HAL_DMA_Init+0x658>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d072      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a5d      	ldr	r2, [pc, #372]	; (8002780 <HAL_DMA_Init+0x65c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d06d      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a5c      	ldr	r2, [pc, #368]	; (8002784 <HAL_DMA_Init+0x660>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d068      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <HAL_DMA_Init+0x664>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d063      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a59      	ldr	r2, [pc, #356]	; (800278c <HAL_DMA_Init+0x668>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d05e      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a57      	ldr	r2, [pc, #348]	; (8002790 <HAL_DMA_Init+0x66c>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d059      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a56      	ldr	r2, [pc, #344]	; (8002794 <HAL_DMA_Init+0x670>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d054      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a54      	ldr	r2, [pc, #336]	; (8002798 <HAL_DMA_Init+0x674>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d04f      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a53      	ldr	r2, [pc, #332]	; (800279c <HAL_DMA_Init+0x678>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d04a      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <HAL_DMA_Init+0x67c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d045      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a50      	ldr	r2, [pc, #320]	; (80027a4 <HAL_DMA_Init+0x680>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d040      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a4e      	ldr	r2, [pc, #312]	; (80027a8 <HAL_DMA_Init+0x684>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d03b      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a4d      	ldr	r2, [pc, #308]	; (80027ac <HAL_DMA_Init+0x688>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d036      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_DMA_Init+0x68c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d031      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a4a      	ldr	r2, [pc, #296]	; (80027b4 <HAL_DMA_Init+0x690>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d02c      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a48      	ldr	r2, [pc, #288]	; (80027b8 <HAL_DMA_Init+0x694>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d027      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a47      	ldr	r2, [pc, #284]	; (80027bc <HAL_DMA_Init+0x698>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d022      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a45      	ldr	r2, [pc, #276]	; (80027c0 <HAL_DMA_Init+0x69c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01d      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a44      	ldr	r2, [pc, #272]	; (80027c4 <HAL_DMA_Init+0x6a0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d018      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a42      	ldr	r2, [pc, #264]	; (80027c8 <HAL_DMA_Init+0x6a4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a41      	ldr	r2, [pc, #260]	; (80027cc <HAL_DMA_Init+0x6a8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00e      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a3f      	ldr	r2, [pc, #252]	; (80027d0 <HAL_DMA_Init+0x6ac>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d009      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a3e      	ldr	r2, [pc, #248]	; (80027d4 <HAL_DMA_Init+0x6b0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d004      	beq.n	80026ea <HAL_DMA_Init+0x5c6>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a3c      	ldr	r2, [pc, #240]	; (80027d8 <HAL_DMA_Init+0x6b4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_DMA_Init+0x5ca>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_DMA_Init+0x5cc>
 80026ee:	2300      	movs	r3, #0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d032      	beq.n	800275a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f002 fa5b 	bl	8004bb0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b80      	cmp	r3, #128	; 0x80
 8002700:	d102      	bne.n	8002708 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800271c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d010      	beq.n	8002748 <HAL_DMA_Init+0x624>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b08      	cmp	r3, #8
 800272c:	d80c      	bhi.n	8002748 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f002 fad8 	bl	8004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	e008      	b.n	800275a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	a7fdabf8 	.word	0xa7fdabf8
 8002778:	cccccccd 	.word	0xcccccccd
 800277c:	40020010 	.word	0x40020010
 8002780:	40020028 	.word	0x40020028
 8002784:	40020040 	.word	0x40020040
 8002788:	40020058 	.word	0x40020058
 800278c:	40020070 	.word	0x40020070
 8002790:	40020088 	.word	0x40020088
 8002794:	400200a0 	.word	0x400200a0
 8002798:	400200b8 	.word	0x400200b8
 800279c:	40020410 	.word	0x40020410
 80027a0:	40020428 	.word	0x40020428
 80027a4:	40020440 	.word	0x40020440
 80027a8:	40020458 	.word	0x40020458
 80027ac:	40020470 	.word	0x40020470
 80027b0:	40020488 	.word	0x40020488
 80027b4:	400204a0 	.word	0x400204a0
 80027b8:	400204b8 	.word	0x400204b8
 80027bc:	58025408 	.word	0x58025408
 80027c0:	5802541c 	.word	0x5802541c
 80027c4:	58025430 	.word	0x58025430
 80027c8:	58025444 	.word	0x58025444
 80027cc:	58025458 	.word	0x58025458
 80027d0:	5802546c 	.word	0x5802546c
 80027d4:	58025480 	.word	0x58025480
 80027d8:	58025494 	.word	0x58025494

080027dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e226      	b.n	8002c46 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_DMA_Start_IT+0x2a>
 8002802:	2302      	movs	r3, #2
 8002804:	e21f      	b.n	8002c46 <HAL_DMA_Start_IT+0x46a>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	f040 820a 	bne.w	8002c30 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a68      	ldr	r2, [pc, #416]	; (80029d0 <HAL_DMA_Start_IT+0x1f4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d04a      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a66      	ldr	r2, [pc, #408]	; (80029d4 <HAL_DMA_Start_IT+0x1f8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d045      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_DMA_Start_IT+0x1fc>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d040      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a63      	ldr	r2, [pc, #396]	; (80029dc <HAL_DMA_Start_IT+0x200>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d03b      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a62      	ldr	r2, [pc, #392]	; (80029e0 <HAL_DMA_Start_IT+0x204>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d036      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a60      	ldr	r2, [pc, #384]	; (80029e4 <HAL_DMA_Start_IT+0x208>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d031      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a5f      	ldr	r2, [pc, #380]	; (80029e8 <HAL_DMA_Start_IT+0x20c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d02c      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a5d      	ldr	r2, [pc, #372]	; (80029ec <HAL_DMA_Start_IT+0x210>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d027      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a5c      	ldr	r2, [pc, #368]	; (80029f0 <HAL_DMA_Start_IT+0x214>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d022      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a5a      	ldr	r2, [pc, #360]	; (80029f4 <HAL_DMA_Start_IT+0x218>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01d      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a59      	ldr	r2, [pc, #356]	; (80029f8 <HAL_DMA_Start_IT+0x21c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d018      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a57      	ldr	r2, [pc, #348]	; (80029fc <HAL_DMA_Start_IT+0x220>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a56      	ldr	r2, [pc, #344]	; (8002a00 <HAL_DMA_Start_IT+0x224>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00e      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a54      	ldr	r2, [pc, #336]	; (8002a04 <HAL_DMA_Start_IT+0x228>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d009      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a53      	ldr	r2, [pc, #332]	; (8002a08 <HAL_DMA_Start_IT+0x22c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d004      	beq.n	80028ca <HAL_DMA_Start_IT+0xee>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a51      	ldr	r2, [pc, #324]	; (8002a0c <HAL_DMA_Start_IT+0x230>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d108      	bne.n	80028dc <HAL_DMA_Start_IT+0x100>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0201 	bic.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	e007      	b.n	80028ec <HAL_DMA_Start_IT+0x110>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f001 fe82 	bl	80045fc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a34      	ldr	r2, [pc, #208]	; (80029d0 <HAL_DMA_Start_IT+0x1f4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d04a      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a33      	ldr	r2, [pc, #204]	; (80029d4 <HAL_DMA_Start_IT+0x1f8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d045      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a31      	ldr	r2, [pc, #196]	; (80029d8 <HAL_DMA_Start_IT+0x1fc>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d040      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a30      	ldr	r2, [pc, #192]	; (80029dc <HAL_DMA_Start_IT+0x200>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d03b      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2e      	ldr	r2, [pc, #184]	; (80029e0 <HAL_DMA_Start_IT+0x204>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d036      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a2d      	ldr	r2, [pc, #180]	; (80029e4 <HAL_DMA_Start_IT+0x208>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d031      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a2b      	ldr	r2, [pc, #172]	; (80029e8 <HAL_DMA_Start_IT+0x20c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d02c      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2a      	ldr	r2, [pc, #168]	; (80029ec <HAL_DMA_Start_IT+0x210>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d027      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a28      	ldr	r2, [pc, #160]	; (80029f0 <HAL_DMA_Start_IT+0x214>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d022      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a27      	ldr	r2, [pc, #156]	; (80029f4 <HAL_DMA_Start_IT+0x218>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d01d      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a25      	ldr	r2, [pc, #148]	; (80029f8 <HAL_DMA_Start_IT+0x21c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d018      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a24      	ldr	r2, [pc, #144]	; (80029fc <HAL_DMA_Start_IT+0x220>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d013      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <HAL_DMA_Start_IT+0x224>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00e      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <HAL_DMA_Start_IT+0x228>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d009      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1f      	ldr	r2, [pc, #124]	; (8002a08 <HAL_DMA_Start_IT+0x22c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d004      	beq.n	8002998 <HAL_DMA_Start_IT+0x1bc>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <HAL_DMA_Start_IT+0x230>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d101      	bne.n	800299c <HAL_DMA_Start_IT+0x1c0>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_DMA_Start_IT+0x1c2>
 800299c:	2300      	movs	r3, #0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d036      	beq.n	8002a10 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 021e 	bic.w	r2, r3, #30
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0216 	orr.w	r2, r2, #22
 80029b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d03e      	beq.n	8002a3c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0208 	orr.w	r2, r2, #8
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	e035      	b.n	8002a3c <HAL_DMA_Start_IT+0x260>
 80029d0:	40020010 	.word	0x40020010
 80029d4:	40020028 	.word	0x40020028
 80029d8:	40020040 	.word	0x40020040
 80029dc:	40020058 	.word	0x40020058
 80029e0:	40020070 	.word	0x40020070
 80029e4:	40020088 	.word	0x40020088
 80029e8:	400200a0 	.word	0x400200a0
 80029ec:	400200b8 	.word	0x400200b8
 80029f0:	40020410 	.word	0x40020410
 80029f4:	40020428 	.word	0x40020428
 80029f8:	40020440 	.word	0x40020440
 80029fc:	40020458 	.word	0x40020458
 8002a00:	40020470 	.word	0x40020470
 8002a04:	40020488 	.word	0x40020488
 8002a08:	400204a0 	.word	0x400204a0
 8002a0c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 020e 	bic.w	r2, r3, #14
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 020a 	orr.w	r2, r2, #10
 8002a22:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0204 	orr.w	r2, r2, #4
 8002a3a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a83      	ldr	r2, [pc, #524]	; (8002c50 <HAL_DMA_Start_IT+0x474>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d072      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a82      	ldr	r2, [pc, #520]	; (8002c54 <HAL_DMA_Start_IT+0x478>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d06d      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a80      	ldr	r2, [pc, #512]	; (8002c58 <HAL_DMA_Start_IT+0x47c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d068      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7f      	ldr	r2, [pc, #508]	; (8002c5c <HAL_DMA_Start_IT+0x480>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d063      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a7d      	ldr	r2, [pc, #500]	; (8002c60 <HAL_DMA_Start_IT+0x484>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d05e      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7c      	ldr	r2, [pc, #496]	; (8002c64 <HAL_DMA_Start_IT+0x488>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d059      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7a      	ldr	r2, [pc, #488]	; (8002c68 <HAL_DMA_Start_IT+0x48c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d054      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a79      	ldr	r2, [pc, #484]	; (8002c6c <HAL_DMA_Start_IT+0x490>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d04f      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a77      	ldr	r2, [pc, #476]	; (8002c70 <HAL_DMA_Start_IT+0x494>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d04a      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a76      	ldr	r2, [pc, #472]	; (8002c74 <HAL_DMA_Start_IT+0x498>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d045      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a74      	ldr	r2, [pc, #464]	; (8002c78 <HAL_DMA_Start_IT+0x49c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d040      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a73      	ldr	r2, [pc, #460]	; (8002c7c <HAL_DMA_Start_IT+0x4a0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d03b      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a71      	ldr	r2, [pc, #452]	; (8002c80 <HAL_DMA_Start_IT+0x4a4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d036      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a70      	ldr	r2, [pc, #448]	; (8002c84 <HAL_DMA_Start_IT+0x4a8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d031      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a6e      	ldr	r2, [pc, #440]	; (8002c88 <HAL_DMA_Start_IT+0x4ac>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d02c      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6d      	ldr	r2, [pc, #436]	; (8002c8c <HAL_DMA_Start_IT+0x4b0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d027      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6b      	ldr	r2, [pc, #428]	; (8002c90 <HAL_DMA_Start_IT+0x4b4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d022      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6a      	ldr	r2, [pc, #424]	; (8002c94 <HAL_DMA_Start_IT+0x4b8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d01d      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a68      	ldr	r2, [pc, #416]	; (8002c98 <HAL_DMA_Start_IT+0x4bc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d018      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a67      	ldr	r2, [pc, #412]	; (8002c9c <HAL_DMA_Start_IT+0x4c0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a65      	ldr	r2, [pc, #404]	; (8002ca0 <HAL_DMA_Start_IT+0x4c4>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00e      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a64      	ldr	r2, [pc, #400]	; (8002ca4 <HAL_DMA_Start_IT+0x4c8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a62      	ldr	r2, [pc, #392]	; (8002ca8 <HAL_DMA_Start_IT+0x4cc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_DMA_Start_IT+0x350>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a61      	ldr	r2, [pc, #388]	; (8002cac <HAL_DMA_Start_IT+0x4d0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d101      	bne.n	8002b30 <HAL_DMA_Start_IT+0x354>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_DMA_Start_IT+0x356>
 8002b30:	2300      	movs	r3, #0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01a      	beq.n	8002b6c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b52:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d007      	beq.n	8002b6c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b6a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a37      	ldr	r2, [pc, #220]	; (8002c50 <HAL_DMA_Start_IT+0x474>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d04a      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a36      	ldr	r2, [pc, #216]	; (8002c54 <HAL_DMA_Start_IT+0x478>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d045      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a34      	ldr	r2, [pc, #208]	; (8002c58 <HAL_DMA_Start_IT+0x47c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d040      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a33      	ldr	r2, [pc, #204]	; (8002c5c <HAL_DMA_Start_IT+0x480>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d03b      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a31      	ldr	r2, [pc, #196]	; (8002c60 <HAL_DMA_Start_IT+0x484>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d036      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a30      	ldr	r2, [pc, #192]	; (8002c64 <HAL_DMA_Start_IT+0x488>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d031      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <HAL_DMA_Start_IT+0x48c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d02c      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2d      	ldr	r2, [pc, #180]	; (8002c6c <HAL_DMA_Start_IT+0x490>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d027      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a2b      	ldr	r2, [pc, #172]	; (8002c70 <HAL_DMA_Start_IT+0x494>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d022      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <HAL_DMA_Start_IT+0x498>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01d      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a28      	ldr	r2, [pc, #160]	; (8002c78 <HAL_DMA_Start_IT+0x49c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d018      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a27      	ldr	r2, [pc, #156]	; (8002c7c <HAL_DMA_Start_IT+0x4a0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a25      	ldr	r2, [pc, #148]	; (8002c80 <HAL_DMA_Start_IT+0x4a4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <HAL_DMA_Start_IT+0x4a8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d009      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <HAL_DMA_Start_IT+0x4ac>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_DMA_Start_IT+0x430>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <HAL_DMA_Start_IT+0x4b0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d108      	bne.n	8002c1e <HAL_DMA_Start_IT+0x442>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e012      	b.n	8002c44 <HAL_DMA_Start_IT+0x468>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e009      	b.n	8002c44 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40020010 	.word	0x40020010
 8002c54:	40020028 	.word	0x40020028
 8002c58:	40020040 	.word	0x40020040
 8002c5c:	40020058 	.word	0x40020058
 8002c60:	40020070 	.word	0x40020070
 8002c64:	40020088 	.word	0x40020088
 8002c68:	400200a0 	.word	0x400200a0
 8002c6c:	400200b8 	.word	0x400200b8
 8002c70:	40020410 	.word	0x40020410
 8002c74:	40020428 	.word	0x40020428
 8002c78:	40020440 	.word	0x40020440
 8002c7c:	40020458 	.word	0x40020458
 8002c80:	40020470 	.word	0x40020470
 8002c84:	40020488 	.word	0x40020488
 8002c88:	400204a0 	.word	0x400204a0
 8002c8c:	400204b8 	.word	0x400204b8
 8002c90:	58025408 	.word	0x58025408
 8002c94:	5802541c 	.word	0x5802541c
 8002c98:	58025430 	.word	0x58025430
 8002c9c:	58025444 	.word	0x58025444
 8002ca0:	58025458 	.word	0x58025458
 8002ca4:	5802546c 	.word	0x5802546c
 8002ca8:	58025480 	.word	0x58025480
 8002cac:	58025494 	.word	0x58025494

08002cb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002cb8:	f7ff f8e8 	bl	8001e8c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e2dc      	b.n	8003282 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d008      	beq.n	8002ce6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2280      	movs	r2, #128	; 0x80
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e2cd      	b.n	8003282 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a76      	ldr	r2, [pc, #472]	; (8002ec4 <HAL_DMA_Abort+0x214>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d04a      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a74      	ldr	r2, [pc, #464]	; (8002ec8 <HAL_DMA_Abort+0x218>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d045      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a73      	ldr	r2, [pc, #460]	; (8002ecc <HAL_DMA_Abort+0x21c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d040      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a71      	ldr	r2, [pc, #452]	; (8002ed0 <HAL_DMA_Abort+0x220>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d03b      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a70      	ldr	r2, [pc, #448]	; (8002ed4 <HAL_DMA_Abort+0x224>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d036      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a6e      	ldr	r2, [pc, #440]	; (8002ed8 <HAL_DMA_Abort+0x228>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d031      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6d      	ldr	r2, [pc, #436]	; (8002edc <HAL_DMA_Abort+0x22c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d02c      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6b      	ldr	r2, [pc, #428]	; (8002ee0 <HAL_DMA_Abort+0x230>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d027      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6a      	ldr	r2, [pc, #424]	; (8002ee4 <HAL_DMA_Abort+0x234>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d022      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a68      	ldr	r2, [pc, #416]	; (8002ee8 <HAL_DMA_Abort+0x238>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d01d      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a67      	ldr	r2, [pc, #412]	; (8002eec <HAL_DMA_Abort+0x23c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d018      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a65      	ldr	r2, [pc, #404]	; (8002ef0 <HAL_DMA_Abort+0x240>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a64      	ldr	r2, [pc, #400]	; (8002ef4 <HAL_DMA_Abort+0x244>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00e      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a62      	ldr	r2, [pc, #392]	; (8002ef8 <HAL_DMA_Abort+0x248>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d009      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a61      	ldr	r2, [pc, #388]	; (8002efc <HAL_DMA_Abort+0x24c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d004      	beq.n	8002d86 <HAL_DMA_Abort+0xd6>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5f      	ldr	r2, [pc, #380]	; (8002f00 <HAL_DMA_Abort+0x250>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_DMA_Abort+0xda>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_DMA_Abort+0xdc>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 021e 	bic.w	r2, r2, #30
 8002d9e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e00a      	b.n	8002dce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 020e 	bic.w	r2, r2, #14
 8002dc6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a3c      	ldr	r2, [pc, #240]	; (8002ec4 <HAL_DMA_Abort+0x214>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d072      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a3a      	ldr	r2, [pc, #232]	; (8002ec8 <HAL_DMA_Abort+0x218>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d06d      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a39      	ldr	r2, [pc, #228]	; (8002ecc <HAL_DMA_Abort+0x21c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d068      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a37      	ldr	r2, [pc, #220]	; (8002ed0 <HAL_DMA_Abort+0x220>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d063      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a36      	ldr	r2, [pc, #216]	; (8002ed4 <HAL_DMA_Abort+0x224>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d05e      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a34      	ldr	r2, [pc, #208]	; (8002ed8 <HAL_DMA_Abort+0x228>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d059      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a33      	ldr	r2, [pc, #204]	; (8002edc <HAL_DMA_Abort+0x22c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d054      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a31      	ldr	r2, [pc, #196]	; (8002ee0 <HAL_DMA_Abort+0x230>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d04f      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a30      	ldr	r2, [pc, #192]	; (8002ee4 <HAL_DMA_Abort+0x234>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d04a      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a2e      	ldr	r2, [pc, #184]	; (8002ee8 <HAL_DMA_Abort+0x238>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d045      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a2d      	ldr	r2, [pc, #180]	; (8002eec <HAL_DMA_Abort+0x23c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d040      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a2b      	ldr	r2, [pc, #172]	; (8002ef0 <HAL_DMA_Abort+0x240>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d03b      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a2a      	ldr	r2, [pc, #168]	; (8002ef4 <HAL_DMA_Abort+0x244>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d036      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <HAL_DMA_Abort+0x248>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d031      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a27      	ldr	r2, [pc, #156]	; (8002efc <HAL_DMA_Abort+0x24c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d02c      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <HAL_DMA_Abort+0x250>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d027      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <HAL_DMA_Abort+0x254>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d022      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a22      	ldr	r2, [pc, #136]	; (8002f08 <HAL_DMA_Abort+0x258>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01d      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a21      	ldr	r2, [pc, #132]	; (8002f0c <HAL_DMA_Abort+0x25c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d018      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <HAL_DMA_Abort+0x260>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_DMA_Abort+0x264>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00e      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <HAL_DMA_Abort+0x268>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d009      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1b      	ldr	r2, [pc, #108]	; (8002f1c <HAL_DMA_Abort+0x26c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_DMA_Abort+0x20e>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <HAL_DMA_Abort+0x270>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d132      	bne.n	8002f24 <HAL_DMA_Abort+0x274>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e031      	b.n	8002f26 <HAL_DMA_Abort+0x276>
 8002ec2:	bf00      	nop
 8002ec4:	40020010 	.word	0x40020010
 8002ec8:	40020028 	.word	0x40020028
 8002ecc:	40020040 	.word	0x40020040
 8002ed0:	40020058 	.word	0x40020058
 8002ed4:	40020070 	.word	0x40020070
 8002ed8:	40020088 	.word	0x40020088
 8002edc:	400200a0 	.word	0x400200a0
 8002ee0:	400200b8 	.word	0x400200b8
 8002ee4:	40020410 	.word	0x40020410
 8002ee8:	40020428 	.word	0x40020428
 8002eec:	40020440 	.word	0x40020440
 8002ef0:	40020458 	.word	0x40020458
 8002ef4:	40020470 	.word	0x40020470
 8002ef8:	40020488 	.word	0x40020488
 8002efc:	400204a0 	.word	0x400204a0
 8002f00:	400204b8 	.word	0x400204b8
 8002f04:	58025408 	.word	0x58025408
 8002f08:	5802541c 	.word	0x5802541c
 8002f0c:	58025430 	.word	0x58025430
 8002f10:	58025444 	.word	0x58025444
 8002f14:	58025458 	.word	0x58025458
 8002f18:	5802546c 	.word	0x5802546c
 8002f1c:	58025480 	.word	0x58025480
 8002f20:	58025494 	.word	0x58025494
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a6d      	ldr	r2, [pc, #436]	; (80030f4 <HAL_DMA_Abort+0x444>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d04a      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a6b      	ldr	r2, [pc, #428]	; (80030f8 <HAL_DMA_Abort+0x448>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d045      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6a      	ldr	r2, [pc, #424]	; (80030fc <HAL_DMA_Abort+0x44c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d040      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a68      	ldr	r2, [pc, #416]	; (8003100 <HAL_DMA_Abort+0x450>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d03b      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a67      	ldr	r2, [pc, #412]	; (8003104 <HAL_DMA_Abort+0x454>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d036      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a65      	ldr	r2, [pc, #404]	; (8003108 <HAL_DMA_Abort+0x458>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d031      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a64      	ldr	r2, [pc, #400]	; (800310c <HAL_DMA_Abort+0x45c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d02c      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a62      	ldr	r2, [pc, #392]	; (8003110 <HAL_DMA_Abort+0x460>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d027      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a61      	ldr	r2, [pc, #388]	; (8003114 <HAL_DMA_Abort+0x464>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5f      	ldr	r2, [pc, #380]	; (8003118 <HAL_DMA_Abort+0x468>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01d      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5e      	ldr	r2, [pc, #376]	; (800311c <HAL_DMA_Abort+0x46c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d018      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5c      	ldr	r2, [pc, #368]	; (8003120 <HAL_DMA_Abort+0x470>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5b      	ldr	r2, [pc, #364]	; (8003124 <HAL_DMA_Abort+0x474>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00e      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a59      	ldr	r2, [pc, #356]	; (8003128 <HAL_DMA_Abort+0x478>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d009      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_DMA_Abort+0x47c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d004      	beq.n	8002fda <HAL_DMA_Abort+0x32a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a56      	ldr	r2, [pc, #344]	; (8003130 <HAL_DMA_Abort+0x480>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d108      	bne.n	8002fec <HAL_DMA_Abort+0x33c>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	e007      	b.n	8002ffc <HAL_DMA_Abort+0x34c>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ffc:	e013      	b.n	8003026 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ffe:	f7fe ff45 	bl	8001e8c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b05      	cmp	r3, #5
 800300a:	d90c      	bls.n	8003026 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2203      	movs	r2, #3
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e12d      	b.n	8003282 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e5      	bne.n	8002ffe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2f      	ldr	r2, [pc, #188]	; (80030f4 <HAL_DMA_Abort+0x444>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d04a      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2d      	ldr	r2, [pc, #180]	; (80030f8 <HAL_DMA_Abort+0x448>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d045      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <HAL_DMA_Abort+0x44c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d040      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a2a      	ldr	r2, [pc, #168]	; (8003100 <HAL_DMA_Abort+0x450>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d03b      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a29      	ldr	r2, [pc, #164]	; (8003104 <HAL_DMA_Abort+0x454>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d036      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a27      	ldr	r2, [pc, #156]	; (8003108 <HAL_DMA_Abort+0x458>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d031      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a26      	ldr	r2, [pc, #152]	; (800310c <HAL_DMA_Abort+0x45c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d02c      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a24      	ldr	r2, [pc, #144]	; (8003110 <HAL_DMA_Abort+0x460>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d027      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a23      	ldr	r2, [pc, #140]	; (8003114 <HAL_DMA_Abort+0x464>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a21      	ldr	r2, [pc, #132]	; (8003118 <HAL_DMA_Abort+0x468>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d01d      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a20      	ldr	r2, [pc, #128]	; (800311c <HAL_DMA_Abort+0x46c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d018      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <HAL_DMA_Abort+0x470>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1d      	ldr	r2, [pc, #116]	; (8003124 <HAL_DMA_Abort+0x474>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00e      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1b      	ldr	r2, [pc, #108]	; (8003128 <HAL_DMA_Abort+0x478>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d009      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1a      	ldr	r2, [pc, #104]	; (800312c <HAL_DMA_Abort+0x47c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d004      	beq.n	80030d2 <HAL_DMA_Abort+0x422>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a18      	ldr	r2, [pc, #96]	; (8003130 <HAL_DMA_Abort+0x480>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_DMA_Abort+0x426>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_DMA_Abort+0x428>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d02b      	beq.n	8003134 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	223f      	movs	r2, #63	; 0x3f
 80030ec:	409a      	lsls	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	e02a      	b.n	800314a <HAL_DMA_Abort+0x49a>
 80030f4:	40020010 	.word	0x40020010
 80030f8:	40020028 	.word	0x40020028
 80030fc:	40020040 	.word	0x40020040
 8003100:	40020058 	.word	0x40020058
 8003104:	40020070 	.word	0x40020070
 8003108:	40020088 	.word	0x40020088
 800310c:	400200a0 	.word	0x400200a0
 8003110:	400200b8 	.word	0x400200b8
 8003114:	40020410 	.word	0x40020410
 8003118:	40020428 	.word	0x40020428
 800311c:	40020440 	.word	0x40020440
 8003120:	40020458 	.word	0x40020458
 8003124:	40020470 	.word	0x40020470
 8003128:	40020488 	.word	0x40020488
 800312c:	400204a0 	.word	0x400204a0
 8003130:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	2201      	movs	r2, #1
 8003144:	409a      	lsls	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a4f      	ldr	r2, [pc, #316]	; (800328c <HAL_DMA_Abort+0x5dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d072      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a4d      	ldr	r2, [pc, #308]	; (8003290 <HAL_DMA_Abort+0x5e0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d06d      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a4c      	ldr	r2, [pc, #304]	; (8003294 <HAL_DMA_Abort+0x5e4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d068      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a4a      	ldr	r2, [pc, #296]	; (8003298 <HAL_DMA_Abort+0x5e8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d063      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a49      	ldr	r2, [pc, #292]	; (800329c <HAL_DMA_Abort+0x5ec>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d05e      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a47      	ldr	r2, [pc, #284]	; (80032a0 <HAL_DMA_Abort+0x5f0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d059      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a46      	ldr	r2, [pc, #280]	; (80032a4 <HAL_DMA_Abort+0x5f4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d054      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a44      	ldr	r2, [pc, #272]	; (80032a8 <HAL_DMA_Abort+0x5f8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d04f      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a43      	ldr	r2, [pc, #268]	; (80032ac <HAL_DMA_Abort+0x5fc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d04a      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a41      	ldr	r2, [pc, #260]	; (80032b0 <HAL_DMA_Abort+0x600>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d045      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a40      	ldr	r2, [pc, #256]	; (80032b4 <HAL_DMA_Abort+0x604>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d040      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3e      	ldr	r2, [pc, #248]	; (80032b8 <HAL_DMA_Abort+0x608>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d03b      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a3d      	ldr	r2, [pc, #244]	; (80032bc <HAL_DMA_Abort+0x60c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d036      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a3b      	ldr	r2, [pc, #236]	; (80032c0 <HAL_DMA_Abort+0x610>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d031      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a3a      	ldr	r2, [pc, #232]	; (80032c4 <HAL_DMA_Abort+0x614>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d02c      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a38      	ldr	r2, [pc, #224]	; (80032c8 <HAL_DMA_Abort+0x618>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d027      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a37      	ldr	r2, [pc, #220]	; (80032cc <HAL_DMA_Abort+0x61c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d022      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a35      	ldr	r2, [pc, #212]	; (80032d0 <HAL_DMA_Abort+0x620>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d01d      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a34      	ldr	r2, [pc, #208]	; (80032d4 <HAL_DMA_Abort+0x624>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d018      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a32      	ldr	r2, [pc, #200]	; (80032d8 <HAL_DMA_Abort+0x628>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d013      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a31      	ldr	r2, [pc, #196]	; (80032dc <HAL_DMA_Abort+0x62c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d00e      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2f      	ldr	r2, [pc, #188]	; (80032e0 <HAL_DMA_Abort+0x630>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d009      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2e      	ldr	r2, [pc, #184]	; (80032e4 <HAL_DMA_Abort+0x634>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d004      	beq.n	800323a <HAL_DMA_Abort+0x58a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <HAL_DMA_Abort+0x638>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_DMA_Abort+0x58e>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_DMA_Abort+0x590>
 800323e:	2300      	movs	r3, #0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d015      	beq.n	8003270 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800324c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00c      	beq.n	8003270 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003264:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800326e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40020010 	.word	0x40020010
 8003290:	40020028 	.word	0x40020028
 8003294:	40020040 	.word	0x40020040
 8003298:	40020058 	.word	0x40020058
 800329c:	40020070 	.word	0x40020070
 80032a0:	40020088 	.word	0x40020088
 80032a4:	400200a0 	.word	0x400200a0
 80032a8:	400200b8 	.word	0x400200b8
 80032ac:	40020410 	.word	0x40020410
 80032b0:	40020428 	.word	0x40020428
 80032b4:	40020440 	.word	0x40020440
 80032b8:	40020458 	.word	0x40020458
 80032bc:	40020470 	.word	0x40020470
 80032c0:	40020488 	.word	0x40020488
 80032c4:	400204a0 	.word	0x400204a0
 80032c8:	400204b8 	.word	0x400204b8
 80032cc:	58025408 	.word	0x58025408
 80032d0:	5802541c 	.word	0x5802541c
 80032d4:	58025430 	.word	0x58025430
 80032d8:	58025444 	.word	0x58025444
 80032dc:	58025458 	.word	0x58025458
 80032e0:	5802546c 	.word	0x5802546c
 80032e4:	58025480 	.word	0x58025480
 80032e8:	58025494 	.word	0x58025494

080032ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e205      	b.n	800370a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d004      	beq.n	8003314 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2280      	movs	r2, #128	; 0x80
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e1fa      	b.n	800370a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a8c      	ldr	r2, [pc, #560]	; (800354c <HAL_DMA_Abort_IT+0x260>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d04a      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a8b      	ldr	r2, [pc, #556]	; (8003550 <HAL_DMA_Abort_IT+0x264>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d045      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a89      	ldr	r2, [pc, #548]	; (8003554 <HAL_DMA_Abort_IT+0x268>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d040      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a88      	ldr	r2, [pc, #544]	; (8003558 <HAL_DMA_Abort_IT+0x26c>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d03b      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a86      	ldr	r2, [pc, #536]	; (800355c <HAL_DMA_Abort_IT+0x270>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d036      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a85      	ldr	r2, [pc, #532]	; (8003560 <HAL_DMA_Abort_IT+0x274>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d031      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a83      	ldr	r2, [pc, #524]	; (8003564 <HAL_DMA_Abort_IT+0x278>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d02c      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a82      	ldr	r2, [pc, #520]	; (8003568 <HAL_DMA_Abort_IT+0x27c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d027      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a80      	ldr	r2, [pc, #512]	; (800356c <HAL_DMA_Abort_IT+0x280>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d022      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a7f      	ldr	r2, [pc, #508]	; (8003570 <HAL_DMA_Abort_IT+0x284>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d01d      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a7d      	ldr	r2, [pc, #500]	; (8003574 <HAL_DMA_Abort_IT+0x288>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d018      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a7c      	ldr	r2, [pc, #496]	; (8003578 <HAL_DMA_Abort_IT+0x28c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d013      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a7a      	ldr	r2, [pc, #488]	; (800357c <HAL_DMA_Abort_IT+0x290>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00e      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a79      	ldr	r2, [pc, #484]	; (8003580 <HAL_DMA_Abort_IT+0x294>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d009      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a77      	ldr	r2, [pc, #476]	; (8003584 <HAL_DMA_Abort_IT+0x298>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d004      	beq.n	80033b4 <HAL_DMA_Abort_IT+0xc8>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a76      	ldr	r2, [pc, #472]	; (8003588 <HAL_DMA_Abort_IT+0x29c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d101      	bne.n	80033b8 <HAL_DMA_Abort_IT+0xcc>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <HAL_DMA_Abort_IT+0xce>
 80033b8:	2300      	movs	r3, #0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d065      	beq.n	800348a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2204      	movs	r2, #4
 80033c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a60      	ldr	r2, [pc, #384]	; (800354c <HAL_DMA_Abort_IT+0x260>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d04a      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a5e      	ldr	r2, [pc, #376]	; (8003550 <HAL_DMA_Abort_IT+0x264>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d045      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a5d      	ldr	r2, [pc, #372]	; (8003554 <HAL_DMA_Abort_IT+0x268>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d040      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a5b      	ldr	r2, [pc, #364]	; (8003558 <HAL_DMA_Abort_IT+0x26c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d03b      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a5a      	ldr	r2, [pc, #360]	; (800355c <HAL_DMA_Abort_IT+0x270>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d036      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a58      	ldr	r2, [pc, #352]	; (8003560 <HAL_DMA_Abort_IT+0x274>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d031      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a57      	ldr	r2, [pc, #348]	; (8003564 <HAL_DMA_Abort_IT+0x278>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d02c      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a55      	ldr	r2, [pc, #340]	; (8003568 <HAL_DMA_Abort_IT+0x27c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d027      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a54      	ldr	r2, [pc, #336]	; (800356c <HAL_DMA_Abort_IT+0x280>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d022      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a52      	ldr	r2, [pc, #328]	; (8003570 <HAL_DMA_Abort_IT+0x284>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01d      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a51      	ldr	r2, [pc, #324]	; (8003574 <HAL_DMA_Abort_IT+0x288>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d018      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a4f      	ldr	r2, [pc, #316]	; (8003578 <HAL_DMA_Abort_IT+0x28c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d013      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a4e      	ldr	r2, [pc, #312]	; (800357c <HAL_DMA_Abort_IT+0x290>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00e      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a4c      	ldr	r2, [pc, #304]	; (8003580 <HAL_DMA_Abort_IT+0x294>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d009      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a4b      	ldr	r2, [pc, #300]	; (8003584 <HAL_DMA_Abort_IT+0x298>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d004      	beq.n	8003466 <HAL_DMA_Abort_IT+0x17a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a49      	ldr	r2, [pc, #292]	; (8003588 <HAL_DMA_Abort_IT+0x29c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d108      	bne.n	8003478 <HAL_DMA_Abort_IT+0x18c>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	e147      	b.n	8003708 <HAL_DMA_Abort_IT+0x41c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	e13e      	b.n	8003708 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 020e 	bic.w	r2, r2, #14
 8003498:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a2b      	ldr	r2, [pc, #172]	; (800354c <HAL_DMA_Abort_IT+0x260>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d04a      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a29      	ldr	r2, [pc, #164]	; (8003550 <HAL_DMA_Abort_IT+0x264>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d045      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a28      	ldr	r2, [pc, #160]	; (8003554 <HAL_DMA_Abort_IT+0x268>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d040      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a26      	ldr	r2, [pc, #152]	; (8003558 <HAL_DMA_Abort_IT+0x26c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d03b      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a25      	ldr	r2, [pc, #148]	; (800355c <HAL_DMA_Abort_IT+0x270>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d036      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a23      	ldr	r2, [pc, #140]	; (8003560 <HAL_DMA_Abort_IT+0x274>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d031      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a22      	ldr	r2, [pc, #136]	; (8003564 <HAL_DMA_Abort_IT+0x278>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d02c      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a20      	ldr	r2, [pc, #128]	; (8003568 <HAL_DMA_Abort_IT+0x27c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d027      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <HAL_DMA_Abort_IT+0x280>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d022      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <HAL_DMA_Abort_IT+0x284>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01d      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1c      	ldr	r2, [pc, #112]	; (8003574 <HAL_DMA_Abort_IT+0x288>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d018      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <HAL_DMA_Abort_IT+0x28c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a19      	ldr	r2, [pc, #100]	; (800357c <HAL_DMA_Abort_IT+0x290>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00e      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a17      	ldr	r2, [pc, #92]	; (8003580 <HAL_DMA_Abort_IT+0x294>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d009      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <HAL_DMA_Abort_IT+0x298>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d004      	beq.n	800353a <HAL_DMA_Abort_IT+0x24e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a14      	ldr	r2, [pc, #80]	; (8003588 <HAL_DMA_Abort_IT+0x29c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d128      	bne.n	800358c <HAL_DMA_Abort_IT+0x2a0>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e027      	b.n	800359c <HAL_DMA_Abort_IT+0x2b0>
 800354c:	40020010 	.word	0x40020010
 8003550:	40020028 	.word	0x40020028
 8003554:	40020040 	.word	0x40020040
 8003558:	40020058 	.word	0x40020058
 800355c:	40020070 	.word	0x40020070
 8003560:	40020088 	.word	0x40020088
 8003564:	400200a0 	.word	0x400200a0
 8003568:	400200b8 	.word	0x400200b8
 800356c:	40020410 	.word	0x40020410
 8003570:	40020428 	.word	0x40020428
 8003574:	40020440 	.word	0x40020440
 8003578:	40020458 	.word	0x40020458
 800357c:	40020470 	.word	0x40020470
 8003580:	40020488 	.word	0x40020488
 8003584:	400204a0 	.word	0x400204a0
 8003588:	400204b8 	.word	0x400204b8
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a5c      	ldr	r2, [pc, #368]	; (8003714 <HAL_DMA_Abort_IT+0x428>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d072      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a5b      	ldr	r2, [pc, #364]	; (8003718 <HAL_DMA_Abort_IT+0x42c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d06d      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a59      	ldr	r2, [pc, #356]	; (800371c <HAL_DMA_Abort_IT+0x430>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d068      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a58      	ldr	r2, [pc, #352]	; (8003720 <HAL_DMA_Abort_IT+0x434>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d063      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a56      	ldr	r2, [pc, #344]	; (8003724 <HAL_DMA_Abort_IT+0x438>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d05e      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a55      	ldr	r2, [pc, #340]	; (8003728 <HAL_DMA_Abort_IT+0x43c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d059      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a53      	ldr	r2, [pc, #332]	; (800372c <HAL_DMA_Abort_IT+0x440>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d054      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a52      	ldr	r2, [pc, #328]	; (8003730 <HAL_DMA_Abort_IT+0x444>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d04f      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a50      	ldr	r2, [pc, #320]	; (8003734 <HAL_DMA_Abort_IT+0x448>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d04a      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a4f      	ldr	r2, [pc, #316]	; (8003738 <HAL_DMA_Abort_IT+0x44c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d045      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a4d      	ldr	r2, [pc, #308]	; (800373c <HAL_DMA_Abort_IT+0x450>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d040      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a4c      	ldr	r2, [pc, #304]	; (8003740 <HAL_DMA_Abort_IT+0x454>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d03b      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a4a      	ldr	r2, [pc, #296]	; (8003744 <HAL_DMA_Abort_IT+0x458>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d036      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a49      	ldr	r2, [pc, #292]	; (8003748 <HAL_DMA_Abort_IT+0x45c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d031      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a47      	ldr	r2, [pc, #284]	; (800374c <HAL_DMA_Abort_IT+0x460>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d02c      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a46      	ldr	r2, [pc, #280]	; (8003750 <HAL_DMA_Abort_IT+0x464>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d027      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a44      	ldr	r2, [pc, #272]	; (8003754 <HAL_DMA_Abort_IT+0x468>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d022      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a43      	ldr	r2, [pc, #268]	; (8003758 <HAL_DMA_Abort_IT+0x46c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d01d      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a41      	ldr	r2, [pc, #260]	; (800375c <HAL_DMA_Abort_IT+0x470>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d018      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a40      	ldr	r2, [pc, #256]	; (8003760 <HAL_DMA_Abort_IT+0x474>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a3e      	ldr	r2, [pc, #248]	; (8003764 <HAL_DMA_Abort_IT+0x478>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00e      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a3d      	ldr	r2, [pc, #244]	; (8003768 <HAL_DMA_Abort_IT+0x47c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d009      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a3b      	ldr	r2, [pc, #236]	; (800376c <HAL_DMA_Abort_IT+0x480>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_DMA_Abort_IT+0x3a0>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a3a      	ldr	r2, [pc, #232]	; (8003770 <HAL_DMA_Abort_IT+0x484>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <HAL_DMA_Abort_IT+0x3a4>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_DMA_Abort_IT+0x3a6>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d028      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00c      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40020010 	.word	0x40020010
 8003718:	40020028 	.word	0x40020028
 800371c:	40020040 	.word	0x40020040
 8003720:	40020058 	.word	0x40020058
 8003724:	40020070 	.word	0x40020070
 8003728:	40020088 	.word	0x40020088
 800372c:	400200a0 	.word	0x400200a0
 8003730:	400200b8 	.word	0x400200b8
 8003734:	40020410 	.word	0x40020410
 8003738:	40020428 	.word	0x40020428
 800373c:	40020440 	.word	0x40020440
 8003740:	40020458 	.word	0x40020458
 8003744:	40020470 	.word	0x40020470
 8003748:	40020488 	.word	0x40020488
 800374c:	400204a0 	.word	0x400204a0
 8003750:	400204b8 	.word	0x400204b8
 8003754:	58025408 	.word	0x58025408
 8003758:	5802541c 	.word	0x5802541c
 800375c:	58025430 	.word	0x58025430
 8003760:	58025444 	.word	0x58025444
 8003764:	58025458 	.word	0x58025458
 8003768:	5802546c 	.word	0x5802546c
 800376c:	58025480 	.word	0x58025480
 8003770:	58025494 	.word	0x58025494

08003774 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08a      	sub	sp, #40	; 0x28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003780:	4b67      	ldr	r3, [pc, #412]	; (8003920 <HAL_DMA_IRQHandler+0x1ac>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a67      	ldr	r2, [pc, #412]	; (8003924 <HAL_DMA_IRQHandler+0x1b0>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0a9b      	lsrs	r3, r3, #10
 800378c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a5f      	ldr	r2, [pc, #380]	; (8003928 <HAL_DMA_IRQHandler+0x1b4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d04a      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a5d      	ldr	r2, [pc, #372]	; (800392c <HAL_DMA_IRQHandler+0x1b8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d045      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5c      	ldr	r2, [pc, #368]	; (8003930 <HAL_DMA_IRQHandler+0x1bc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d040      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5a      	ldr	r2, [pc, #360]	; (8003934 <HAL_DMA_IRQHandler+0x1c0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d03b      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a59      	ldr	r2, [pc, #356]	; (8003938 <HAL_DMA_IRQHandler+0x1c4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d036      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a57      	ldr	r2, [pc, #348]	; (800393c <HAL_DMA_IRQHandler+0x1c8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d031      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a56      	ldr	r2, [pc, #344]	; (8003940 <HAL_DMA_IRQHandler+0x1cc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d02c      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a54      	ldr	r2, [pc, #336]	; (8003944 <HAL_DMA_IRQHandler+0x1d0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d027      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a53      	ldr	r2, [pc, #332]	; (8003948 <HAL_DMA_IRQHandler+0x1d4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d022      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a51      	ldr	r2, [pc, #324]	; (800394c <HAL_DMA_IRQHandler+0x1d8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01d      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a50      	ldr	r2, [pc, #320]	; (8003950 <HAL_DMA_IRQHandler+0x1dc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d018      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a4e      	ldr	r2, [pc, #312]	; (8003954 <HAL_DMA_IRQHandler+0x1e0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a4d      	ldr	r2, [pc, #308]	; (8003958 <HAL_DMA_IRQHandler+0x1e4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00e      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a4b      	ldr	r2, [pc, #300]	; (800395c <HAL_DMA_IRQHandler+0x1e8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d009      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a4a      	ldr	r2, [pc, #296]	; (8003960 <HAL_DMA_IRQHandler+0x1ec>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_DMA_IRQHandler+0xd2>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a48      	ldr	r2, [pc, #288]	; (8003964 <HAL_DMA_IRQHandler+0x1f0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <HAL_DMA_IRQHandler+0xd6>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_DMA_IRQHandler+0xd8>
 800384a:	2300      	movs	r3, #0
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 842b 	beq.w	80040a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	f003 031f 	and.w	r3, r3, #31
 800385a:	2208      	movs	r2, #8
 800385c:	409a      	lsls	r2, r3
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80a2 	beq.w	80039ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a2e      	ldr	r2, [pc, #184]	; (8003928 <HAL_DMA_IRQHandler+0x1b4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04a      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2d      	ldr	r2, [pc, #180]	; (800392c <HAL_DMA_IRQHandler+0x1b8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a2b      	ldr	r2, [pc, #172]	; (8003930 <HAL_DMA_IRQHandler+0x1bc>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d040      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <HAL_DMA_IRQHandler+0x1c0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d03b      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a28      	ldr	r2, [pc, #160]	; (8003938 <HAL_DMA_IRQHandler+0x1c4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d036      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a27      	ldr	r2, [pc, #156]	; (800393c <HAL_DMA_IRQHandler+0x1c8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a25      	ldr	r2, [pc, #148]	; (8003940 <HAL_DMA_IRQHandler+0x1cc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02c      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a24      	ldr	r2, [pc, #144]	; (8003944 <HAL_DMA_IRQHandler+0x1d0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d027      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a22      	ldr	r2, [pc, #136]	; (8003948 <HAL_DMA_IRQHandler+0x1d4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a21      	ldr	r2, [pc, #132]	; (800394c <HAL_DMA_IRQHandler+0x1d8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01d      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <HAL_DMA_IRQHandler+0x1dc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1e      	ldr	r2, [pc, #120]	; (8003954 <HAL_DMA_IRQHandler+0x1e0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <HAL_DMA_IRQHandler+0x1e4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1b      	ldr	r2, [pc, #108]	; (800395c <HAL_DMA_IRQHandler+0x1e8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a19      	ldr	r2, [pc, #100]	; (8003960 <HAL_DMA_IRQHandler+0x1ec>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_IRQHandler+0x194>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a18      	ldr	r2, [pc, #96]	; (8003964 <HAL_DMA_IRQHandler+0x1f0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d12f      	bne.n	8003968 <HAL_DMA_IRQHandler+0x1f4>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0304 	and.w	r3, r3, #4
 8003912:	2b00      	cmp	r3, #0
 8003914:	bf14      	ite	ne
 8003916:	2301      	movne	r3, #1
 8003918:	2300      	moveq	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	e02e      	b.n	800397c <HAL_DMA_IRQHandler+0x208>
 800391e:	bf00      	nop
 8003920:	2400000c 	.word	0x2400000c
 8003924:	1b4e81b5 	.word	0x1b4e81b5
 8003928:	40020010 	.word	0x40020010
 800392c:	40020028 	.word	0x40020028
 8003930:	40020040 	.word	0x40020040
 8003934:	40020058 	.word	0x40020058
 8003938:	40020070 	.word	0x40020070
 800393c:	40020088 	.word	0x40020088
 8003940:	400200a0 	.word	0x400200a0
 8003944:	400200b8 	.word	0x400200b8
 8003948:	40020410 	.word	0x40020410
 800394c:	40020428 	.word	0x40020428
 8003950:	40020440 	.word	0x40020440
 8003954:	40020458 	.word	0x40020458
 8003958:	40020470 	.word	0x40020470
 800395c:	40020488 	.word	0x40020488
 8003960:	400204a0 	.word	0x400204a0
 8003964:	400204b8 	.word	0x400204b8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf14      	ite	ne
 8003976:	2301      	movne	r3, #1
 8003978:	2300      	moveq	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d015      	beq.n	80039ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0204 	bic.w	r2, r2, #4
 800398e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2208      	movs	r2, #8
 800399a:	409a      	lsls	r2, r3
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	f003 031f 	and.w	r3, r3, #31
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d06e      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <HAL_DMA_IRQHandler+0x3f8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04a      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a67      	ldr	r2, [pc, #412]	; (8003b70 <HAL_DMA_IRQHandler+0x3fc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d045      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a66      	ldr	r2, [pc, #408]	; (8003b74 <HAL_DMA_IRQHandler+0x400>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d040      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a64      	ldr	r2, [pc, #400]	; (8003b78 <HAL_DMA_IRQHandler+0x404>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d03b      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a63      	ldr	r2, [pc, #396]	; (8003b7c <HAL_DMA_IRQHandler+0x408>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d036      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a61      	ldr	r2, [pc, #388]	; (8003b80 <HAL_DMA_IRQHandler+0x40c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d031      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a60      	ldr	r2, [pc, #384]	; (8003b84 <HAL_DMA_IRQHandler+0x410>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d02c      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a5e      	ldr	r2, [pc, #376]	; (8003b88 <HAL_DMA_IRQHandler+0x414>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d027      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a5d      	ldr	r2, [pc, #372]	; (8003b8c <HAL_DMA_IRQHandler+0x418>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5b      	ldr	r2, [pc, #364]	; (8003b90 <HAL_DMA_IRQHandler+0x41c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01d      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a5a      	ldr	r2, [pc, #360]	; (8003b94 <HAL_DMA_IRQHandler+0x420>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a58      	ldr	r2, [pc, #352]	; (8003b98 <HAL_DMA_IRQHandler+0x424>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a57      	ldr	r2, [pc, #348]	; (8003b9c <HAL_DMA_IRQHandler+0x428>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a55      	ldr	r2, [pc, #340]	; (8003ba0 <HAL_DMA_IRQHandler+0x42c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a54      	ldr	r2, [pc, #336]	; (8003ba4 <HAL_DMA_IRQHandler+0x430>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x2ee>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	; (8003ba8 <HAL_DMA_IRQHandler+0x434>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d10a      	bne.n	8003a78 <HAL_DMA_IRQHandler+0x304>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	bf14      	ite	ne
 8003a70:	2301      	movne	r3, #1
 8003a72:	2300      	moveq	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	e003      	b.n	8003a80 <HAL_DMA_IRQHandler+0x30c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	f043 0202 	orr.w	r2, r3, #2
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	f003 031f 	and.w	r3, r3, #31
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 808f 	beq.w	8003bd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a2c      	ldr	r2, [pc, #176]	; (8003b6c <HAL_DMA_IRQHandler+0x3f8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d04a      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <HAL_DMA_IRQHandler+0x3fc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d045      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a29      	ldr	r2, [pc, #164]	; (8003b74 <HAL_DMA_IRQHandler+0x400>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d040      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a27      	ldr	r2, [pc, #156]	; (8003b78 <HAL_DMA_IRQHandler+0x404>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d03b      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <HAL_DMA_IRQHandler+0x408>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d036      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <HAL_DMA_IRQHandler+0x40c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d031      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <HAL_DMA_IRQHandler+0x410>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d02c      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a21      	ldr	r2, [pc, #132]	; (8003b88 <HAL_DMA_IRQHandler+0x414>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d027      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <HAL_DMA_IRQHandler+0x418>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d022      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1e      	ldr	r2, [pc, #120]	; (8003b90 <HAL_DMA_IRQHandler+0x41c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01d      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1d      	ldr	r2, [pc, #116]	; (8003b94 <HAL_DMA_IRQHandler+0x420>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d018      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_DMA_IRQHandler+0x424>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1a      	ldr	r2, [pc, #104]	; (8003b9c <HAL_DMA_IRQHandler+0x428>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00e      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <HAL_DMA_IRQHandler+0x42c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d009      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_DMA_IRQHandler+0x430>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d004      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x3e2>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <HAL_DMA_IRQHandler+0x434>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d12a      	bne.n	8003bac <HAL_DMA_IRQHandler+0x438>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf14      	ite	ne
 8003b64:	2301      	movne	r3, #1
 8003b66:	2300      	moveq	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e023      	b.n	8003bb4 <HAL_DMA_IRQHandler+0x440>
 8003b6c:	40020010 	.word	0x40020010
 8003b70:	40020028 	.word	0x40020028
 8003b74:	40020040 	.word	0x40020040
 8003b78:	40020058 	.word	0x40020058
 8003b7c:	40020070 	.word	0x40020070
 8003b80:	40020088 	.word	0x40020088
 8003b84:	400200a0 	.word	0x400200a0
 8003b88:	400200b8 	.word	0x400200b8
 8003b8c:	40020410 	.word	0x40020410
 8003b90:	40020428 	.word	0x40020428
 8003b94:	40020440 	.word	0x40020440
 8003b98:	40020458 	.word	0x40020458
 8003b9c:	40020470 	.word	0x40020470
 8003ba0:	40020488 	.word	0x40020488
 8003ba4:	400204a0 	.word	0x400204a0
 8003ba8:	400204b8 	.word	0x400204b8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbc:	f003 031f 	and.w	r3, r3, #31
 8003bc0:	2204      	movs	r2, #4
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	f043 0204 	orr.w	r2, r3, #4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2210      	movs	r2, #16
 8003bde:	409a      	lsls	r2, r3
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80a6 	beq.w	8003d36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a85      	ldr	r2, [pc, #532]	; (8003e04 <HAL_DMA_IRQHandler+0x690>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d04a      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a83      	ldr	r2, [pc, #524]	; (8003e08 <HAL_DMA_IRQHandler+0x694>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d045      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a82      	ldr	r2, [pc, #520]	; (8003e0c <HAL_DMA_IRQHandler+0x698>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d040      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a80      	ldr	r2, [pc, #512]	; (8003e10 <HAL_DMA_IRQHandler+0x69c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d03b      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7f      	ldr	r2, [pc, #508]	; (8003e14 <HAL_DMA_IRQHandler+0x6a0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d036      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a7d      	ldr	r2, [pc, #500]	; (8003e18 <HAL_DMA_IRQHandler+0x6a4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d031      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7c      	ldr	r2, [pc, #496]	; (8003e1c <HAL_DMA_IRQHandler+0x6a8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d02c      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a7a      	ldr	r2, [pc, #488]	; (8003e20 <HAL_DMA_IRQHandler+0x6ac>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d027      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a79      	ldr	r2, [pc, #484]	; (8003e24 <HAL_DMA_IRQHandler+0x6b0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d022      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a77      	ldr	r2, [pc, #476]	; (8003e28 <HAL_DMA_IRQHandler+0x6b4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d01d      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a76      	ldr	r2, [pc, #472]	; (8003e2c <HAL_DMA_IRQHandler+0x6b8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a74      	ldr	r2, [pc, #464]	; (8003e30 <HAL_DMA_IRQHandler+0x6bc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a73      	ldr	r2, [pc, #460]	; (8003e34 <HAL_DMA_IRQHandler+0x6c0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a71      	ldr	r2, [pc, #452]	; (8003e38 <HAL_DMA_IRQHandler+0x6c4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a70      	ldr	r2, [pc, #448]	; (8003e3c <HAL_DMA_IRQHandler+0x6c8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_DMA_IRQHandler+0x516>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a6e      	ldr	r2, [pc, #440]	; (8003e40 <HAL_DMA_IRQHandler+0x6cc>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10a      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x52c>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	e009      	b.n	8003cb4 <HAL_DMA_IRQHandler+0x540>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d03e      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d018      	beq.n	8003d08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d108      	bne.n	8003cf6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d024      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4798      	blx	r3
 8003cf4:	e01f      	b.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d01b      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	4798      	blx	r3
 8003d06:	e016      	b.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0208 	bic.w	r2, r2, #8
 8003d24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2220      	movs	r2, #32
 8003d40:	409a      	lsls	r2, r3
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8110 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <HAL_DMA_IRQHandler+0x690>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d04a      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2b      	ldr	r2, [pc, #172]	; (8003e08 <HAL_DMA_IRQHandler+0x694>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d045      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a29      	ldr	r2, [pc, #164]	; (8003e0c <HAL_DMA_IRQHandler+0x698>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d040      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a28      	ldr	r2, [pc, #160]	; (8003e10 <HAL_DMA_IRQHandler+0x69c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d03b      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <HAL_DMA_IRQHandler+0x6a0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d036      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <HAL_DMA_IRQHandler+0x6a4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d031      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <HAL_DMA_IRQHandler+0x6a8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d02c      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a22      	ldr	r2, [pc, #136]	; (8003e20 <HAL_DMA_IRQHandler+0x6ac>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d027      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a20      	ldr	r2, [pc, #128]	; (8003e24 <HAL_DMA_IRQHandler+0x6b0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d022      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1f      	ldr	r2, [pc, #124]	; (8003e28 <HAL_DMA_IRQHandler+0x6b4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d01d      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <HAL_DMA_IRQHandler+0x6b8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d018      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <HAL_DMA_IRQHandler+0x6bc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1a      	ldr	r2, [pc, #104]	; (8003e34 <HAL_DMA_IRQHandler+0x6c0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00e      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a19      	ldr	r2, [pc, #100]	; (8003e38 <HAL_DMA_IRQHandler+0x6c4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d009      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <HAL_DMA_IRQHandler+0x6c8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d004      	beq.n	8003dec <HAL_DMA_IRQHandler+0x678>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a16      	ldr	r2, [pc, #88]	; (8003e40 <HAL_DMA_IRQHandler+0x6cc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d12b      	bne.n	8003e44 <HAL_DMA_IRQHandler+0x6d0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bf14      	ite	ne
 8003dfa:	2301      	movne	r3, #1
 8003dfc:	2300      	moveq	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	e02a      	b.n	8003e58 <HAL_DMA_IRQHandler+0x6e4>
 8003e02:	bf00      	nop
 8003e04:	40020010 	.word	0x40020010
 8003e08:	40020028 	.word	0x40020028
 8003e0c:	40020040 	.word	0x40020040
 8003e10:	40020058 	.word	0x40020058
 8003e14:	40020070 	.word	0x40020070
 8003e18:	40020088 	.word	0x40020088
 8003e1c:	400200a0 	.word	0x400200a0
 8003e20:	400200b8 	.word	0x400200b8
 8003e24:	40020410 	.word	0x40020410
 8003e28:	40020428 	.word	0x40020428
 8003e2c:	40020440 	.word	0x40020440
 8003e30:	40020458 	.word	0x40020458
 8003e34:	40020470 	.word	0x40020470
 8003e38:	40020488 	.word	0x40020488
 8003e3c:	400204a0 	.word	0x400204a0
 8003e40:	400204b8 	.word	0x400204b8
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8087 	beq.w	8003f6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e62:	f003 031f 	and.w	r3, r3, #31
 8003e66:	2220      	movs	r2, #32
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d139      	bne.n	8003eee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0216 	bic.w	r2, r2, #22
 8003e88:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e98:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_DMA_IRQHandler+0x736>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0208 	bic.w	r2, r2, #8
 8003eb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	223f      	movs	r2, #63	; 0x3f
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 834a 	beq.w	8004578 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4798      	blx	r3
          }
          return;
 8003eec:	e344      	b.n	8004578 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d108      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d02c      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
 8003f1a:	e027      	b.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d023      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
 8003f2c:	e01e      	b.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10f      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0210 	bic.w	r2, r2, #16
 8003f4a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 8306 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8088 	beq.w	8004094 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2204      	movs	r2, #4
 8003f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a7a      	ldr	r2, [pc, #488]	; (800417c <HAL_DMA_IRQHandler+0xa08>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d04a      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a79      	ldr	r2, [pc, #484]	; (8004180 <HAL_DMA_IRQHandler+0xa0c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d045      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a77      	ldr	r2, [pc, #476]	; (8004184 <HAL_DMA_IRQHandler+0xa10>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d040      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a76      	ldr	r2, [pc, #472]	; (8004188 <HAL_DMA_IRQHandler+0xa14>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d03b      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a74      	ldr	r2, [pc, #464]	; (800418c <HAL_DMA_IRQHandler+0xa18>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d036      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a73      	ldr	r2, [pc, #460]	; (8004190 <HAL_DMA_IRQHandler+0xa1c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d031      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a71      	ldr	r2, [pc, #452]	; (8004194 <HAL_DMA_IRQHandler+0xa20>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d02c      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a70      	ldr	r2, [pc, #448]	; (8004198 <HAL_DMA_IRQHandler+0xa24>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d027      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a6e      	ldr	r2, [pc, #440]	; (800419c <HAL_DMA_IRQHandler+0xa28>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d022      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a6d      	ldr	r2, [pc, #436]	; (80041a0 <HAL_DMA_IRQHandler+0xa2c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d01d      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6b      	ldr	r2, [pc, #428]	; (80041a4 <HAL_DMA_IRQHandler+0xa30>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d018      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a6a      	ldr	r2, [pc, #424]	; (80041a8 <HAL_DMA_IRQHandler+0xa34>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d013      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a68      	ldr	r2, [pc, #416]	; (80041ac <HAL_DMA_IRQHandler+0xa38>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00e      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a67      	ldr	r2, [pc, #412]	; (80041b0 <HAL_DMA_IRQHandler+0xa3c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d009      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a65      	ldr	r2, [pc, #404]	; (80041b4 <HAL_DMA_IRQHandler+0xa40>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d004      	beq.n	800402c <HAL_DMA_IRQHandler+0x8b8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a64      	ldr	r2, [pc, #400]	; (80041b8 <HAL_DMA_IRQHandler+0xa44>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d108      	bne.n	800403e <HAL_DMA_IRQHandler+0x8ca>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e007      	b.n	800404e <HAL_DMA_IRQHandler+0x8da>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3301      	adds	r3, #1
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004056:	429a      	cmp	r2, r3
 8004058:	d307      	bcc.n	800406a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f2      	bne.n	800404e <HAL_DMA_IRQHandler+0x8da>
 8004068:	e000      	b.n	800406c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800406a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2203      	movs	r2, #3
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800408a:	e003      	b.n	8004094 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8272 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
 80040a6:	e26c      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a43      	ldr	r2, [pc, #268]	; (80041bc <HAL_DMA_IRQHandler+0xa48>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d022      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a42      	ldr	r2, [pc, #264]	; (80041c0 <HAL_DMA_IRQHandler+0xa4c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d01d      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a40      	ldr	r2, [pc, #256]	; (80041c4 <HAL_DMA_IRQHandler+0xa50>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d018      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a3f      	ldr	r2, [pc, #252]	; (80041c8 <HAL_DMA_IRQHandler+0xa54>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a3d      	ldr	r2, [pc, #244]	; (80041cc <HAL_DMA_IRQHandler+0xa58>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00e      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a3c      	ldr	r2, [pc, #240]	; (80041d0 <HAL_DMA_IRQHandler+0xa5c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d009      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a3a      	ldr	r2, [pc, #232]	; (80041d4 <HAL_DMA_IRQHandler+0xa60>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x984>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a39      	ldr	r2, [pc, #228]	; (80041d8 <HAL_DMA_IRQHandler+0xa64>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d101      	bne.n	80040fc <HAL_DMA_IRQHandler+0x988>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <HAL_DMA_IRQHandler+0x98a>
 80040fc:	2300      	movs	r3, #0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 823f 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	2204      	movs	r2, #4
 8004116:	409a      	lsls	r2, r3
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80cd 	beq.w	80042bc <HAL_DMA_IRQHandler+0xb48>
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80c7 	beq.w	80042bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	f003 031f 	and.w	r3, r3, #31
 8004136:	2204      	movs	r2, #4
 8004138:	409a      	lsls	r2, r3
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d049      	beq.n	80041dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8210 	beq.w	800457c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004164:	e20a      	b.n	800457c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8206 	beq.w	800457c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004178:	e200      	b.n	800457c <HAL_DMA_IRQHandler+0xe08>
 800417a:	bf00      	nop
 800417c:	40020010 	.word	0x40020010
 8004180:	40020028 	.word	0x40020028
 8004184:	40020040 	.word	0x40020040
 8004188:	40020058 	.word	0x40020058
 800418c:	40020070 	.word	0x40020070
 8004190:	40020088 	.word	0x40020088
 8004194:	400200a0 	.word	0x400200a0
 8004198:	400200b8 	.word	0x400200b8
 800419c:	40020410 	.word	0x40020410
 80041a0:	40020428 	.word	0x40020428
 80041a4:	40020440 	.word	0x40020440
 80041a8:	40020458 	.word	0x40020458
 80041ac:	40020470 	.word	0x40020470
 80041b0:	40020488 	.word	0x40020488
 80041b4:	400204a0 	.word	0x400204a0
 80041b8:	400204b8 	.word	0x400204b8
 80041bc:	58025408 	.word	0x58025408
 80041c0:	5802541c 	.word	0x5802541c
 80041c4:	58025430 	.word	0x58025430
 80041c8:	58025444 	.word	0x58025444
 80041cc:	58025458 	.word	0x58025458
 80041d0:	5802546c 	.word	0x5802546c
 80041d4:	58025480 	.word	0x58025480
 80041d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d160      	bne.n	80042a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a8c      	ldr	r2, [pc, #560]	; (800441c <HAL_DMA_IRQHandler+0xca8>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d04a      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a8a      	ldr	r2, [pc, #552]	; (8004420 <HAL_DMA_IRQHandler+0xcac>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d045      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a89      	ldr	r2, [pc, #548]	; (8004424 <HAL_DMA_IRQHandler+0xcb0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d040      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a87      	ldr	r2, [pc, #540]	; (8004428 <HAL_DMA_IRQHandler+0xcb4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d03b      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a86      	ldr	r2, [pc, #536]	; (800442c <HAL_DMA_IRQHandler+0xcb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d036      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a84      	ldr	r2, [pc, #528]	; (8004430 <HAL_DMA_IRQHandler+0xcbc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d031      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a83      	ldr	r2, [pc, #524]	; (8004434 <HAL_DMA_IRQHandler+0xcc0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d02c      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a81      	ldr	r2, [pc, #516]	; (8004438 <HAL_DMA_IRQHandler+0xcc4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d027      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a80      	ldr	r2, [pc, #512]	; (800443c <HAL_DMA_IRQHandler+0xcc8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a7e      	ldr	r2, [pc, #504]	; (8004440 <HAL_DMA_IRQHandler+0xccc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01d      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a7d      	ldr	r2, [pc, #500]	; (8004444 <HAL_DMA_IRQHandler+0xcd0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a7b      	ldr	r2, [pc, #492]	; (8004448 <HAL_DMA_IRQHandler+0xcd4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a7a      	ldr	r2, [pc, #488]	; (800444c <HAL_DMA_IRQHandler+0xcd8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a78      	ldr	r2, [pc, #480]	; (8004450 <HAL_DMA_IRQHandler+0xcdc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a77      	ldr	r2, [pc, #476]	; (8004454 <HAL_DMA_IRQHandler+0xce0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <HAL_DMA_IRQHandler+0xb12>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a75      	ldr	r2, [pc, #468]	; (8004458 <HAL_DMA_IRQHandler+0xce4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d108      	bne.n	8004298 <HAL_DMA_IRQHandler+0xb24>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0208 	bic.w	r2, r2, #8
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	e007      	b.n	80042a8 <HAL_DMA_IRQHandler+0xb34>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0204 	bic.w	r2, r2, #4
 80042a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 8165 	beq.w	800457c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ba:	e15f      	b.n	800457c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2202      	movs	r2, #2
 80042c6:	409a      	lsls	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80c5 	beq.w	800445c <HAL_DMA_IRQHandler+0xce8>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80bf 	beq.w	800445c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	2202      	movs	r2, #2
 80042e8:	409a      	lsls	r2, r3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d018      	beq.n	800432a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 813a 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004314:	e134      	b.n	8004580 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8130 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004328:	e12a      	b.n	8004580 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d168      	bne.n	8004406 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a38      	ldr	r2, [pc, #224]	; (800441c <HAL_DMA_IRQHandler+0xca8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d04a      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a37      	ldr	r2, [pc, #220]	; (8004420 <HAL_DMA_IRQHandler+0xcac>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d045      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a35      	ldr	r2, [pc, #212]	; (8004424 <HAL_DMA_IRQHandler+0xcb0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d040      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a34      	ldr	r2, [pc, #208]	; (8004428 <HAL_DMA_IRQHandler+0xcb4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d03b      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a32      	ldr	r2, [pc, #200]	; (800442c <HAL_DMA_IRQHandler+0xcb8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d036      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a31      	ldr	r2, [pc, #196]	; (8004430 <HAL_DMA_IRQHandler+0xcbc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d031      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <HAL_DMA_IRQHandler+0xcc0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d02c      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2e      	ldr	r2, [pc, #184]	; (8004438 <HAL_DMA_IRQHandler+0xcc4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d027      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2c      	ldr	r2, [pc, #176]	; (800443c <HAL_DMA_IRQHandler+0xcc8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d022      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_DMA_IRQHandler+0xccc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d01d      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a29      	ldr	r2, [pc, #164]	; (8004444 <HAL_DMA_IRQHandler+0xcd0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a28      	ldr	r2, [pc, #160]	; (8004448 <HAL_DMA_IRQHandler+0xcd4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a26      	ldr	r2, [pc, #152]	; (800444c <HAL_DMA_IRQHandler+0xcd8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a25      	ldr	r2, [pc, #148]	; (8004450 <HAL_DMA_IRQHandler+0xcdc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a23      	ldr	r2, [pc, #140]	; (8004454 <HAL_DMA_IRQHandler+0xce0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xc60>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_DMA_IRQHandler+0xce4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <HAL_DMA_IRQHandler+0xc72>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0214 	bic.w	r2, r2, #20
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e007      	b.n	80043f6 <HAL_DMA_IRQHandler+0xc82>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 020a 	bic.w	r2, r2, #10
 80043f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80b8 	beq.w	8004580 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004418:	e0b2      	b.n	8004580 <HAL_DMA_IRQHandler+0xe0c>
 800441a:	bf00      	nop
 800441c:	40020010 	.word	0x40020010
 8004420:	40020028 	.word	0x40020028
 8004424:	40020040 	.word	0x40020040
 8004428:	40020058 	.word	0x40020058
 800442c:	40020070 	.word	0x40020070
 8004430:	40020088 	.word	0x40020088
 8004434:	400200a0 	.word	0x400200a0
 8004438:	400200b8 	.word	0x400200b8
 800443c:	40020410 	.word	0x40020410
 8004440:	40020428 	.word	0x40020428
 8004444:	40020440 	.word	0x40020440
 8004448:	40020458 	.word	0x40020458
 800444c:	40020470 	.word	0x40020470
 8004450:	40020488 	.word	0x40020488
 8004454:	400204a0 	.word	0x400204a0
 8004458:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2208      	movs	r2, #8
 8004466:	409a      	lsls	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8088 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8082 	beq.w	8004582 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a41      	ldr	r2, [pc, #260]	; (8004588 <HAL_DMA_IRQHandler+0xe14>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d04a      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a3f      	ldr	r2, [pc, #252]	; (800458c <HAL_DMA_IRQHandler+0xe18>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d045      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3e      	ldr	r2, [pc, #248]	; (8004590 <HAL_DMA_IRQHandler+0xe1c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d040      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a3c      	ldr	r2, [pc, #240]	; (8004594 <HAL_DMA_IRQHandler+0xe20>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d03b      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3b      	ldr	r2, [pc, #236]	; (8004598 <HAL_DMA_IRQHandler+0xe24>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d036      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a39      	ldr	r2, [pc, #228]	; (800459c <HAL_DMA_IRQHandler+0xe28>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d031      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a38      	ldr	r2, [pc, #224]	; (80045a0 <HAL_DMA_IRQHandler+0xe2c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d02c      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a36      	ldr	r2, [pc, #216]	; (80045a4 <HAL_DMA_IRQHandler+0xe30>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d027      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a35      	ldr	r2, [pc, #212]	; (80045a8 <HAL_DMA_IRQHandler+0xe34>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d022      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a33      	ldr	r2, [pc, #204]	; (80045ac <HAL_DMA_IRQHandler+0xe38>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01d      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a32      	ldr	r2, [pc, #200]	; (80045b0 <HAL_DMA_IRQHandler+0xe3c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d018      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a30      	ldr	r2, [pc, #192]	; (80045b4 <HAL_DMA_IRQHandler+0xe40>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a2f      	ldr	r2, [pc, #188]	; (80045b8 <HAL_DMA_IRQHandler+0xe44>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00e      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a2d      	ldr	r2, [pc, #180]	; (80045bc <HAL_DMA_IRQHandler+0xe48>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d009      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <HAL_DMA_IRQHandler+0xe4c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d004      	beq.n	800451e <HAL_DMA_IRQHandler+0xdaa>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2a      	ldr	r2, [pc, #168]	; (80045c4 <HAL_DMA_IRQHandler+0xe50>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d108      	bne.n	8004530 <HAL_DMA_IRQHandler+0xdbc>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 021c 	bic.w	r2, r2, #28
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e007      	b.n	8004540 <HAL_DMA_IRQHandler+0xdcc>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 020e 	bic.w	r2, r2, #14
 800453e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2201      	movs	r2, #1
 800454a:	409a      	lsls	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
 8004576:	e004      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004578:	bf00      	nop
 800457a:	e002      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004580:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004582:	3728      	adds	r7, #40	; 0x28
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40020010 	.word	0x40020010
 800458c:	40020028 	.word	0x40020028
 8004590:	40020040 	.word	0x40020040
 8004594:	40020058 	.word	0x40020058
 8004598:	40020070 	.word	0x40020070
 800459c:	40020088 	.word	0x40020088
 80045a0:	400200a0 	.word	0x400200a0
 80045a4:	400200b8 	.word	0x400200b8
 80045a8:	40020410 	.word	0x40020410
 80045ac:	40020428 	.word	0x40020428
 80045b0:	40020440 	.word	0x40020440
 80045b4:	40020458 	.word	0x40020458
 80045b8:	40020470 	.word	0x40020470
 80045bc:	40020488 	.word	0x40020488
 80045c0:	400204a0 	.word	0x400204a0
 80045c4:	400204b8 	.word	0x400204b8

080045c8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045d6:	b2db      	uxtb	r3, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a84      	ldr	r2, [pc, #528]	; (800482c <DMA_SetConfig+0x230>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d072      	beq.n	8004706 <DMA_SetConfig+0x10a>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a82      	ldr	r2, [pc, #520]	; (8004830 <DMA_SetConfig+0x234>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d06d      	beq.n	8004706 <DMA_SetConfig+0x10a>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a81      	ldr	r2, [pc, #516]	; (8004834 <DMA_SetConfig+0x238>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d068      	beq.n	8004706 <DMA_SetConfig+0x10a>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a7f      	ldr	r2, [pc, #508]	; (8004838 <DMA_SetConfig+0x23c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d063      	beq.n	8004706 <DMA_SetConfig+0x10a>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a7e      	ldr	r2, [pc, #504]	; (800483c <DMA_SetConfig+0x240>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d05e      	beq.n	8004706 <DMA_SetConfig+0x10a>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a7c      	ldr	r2, [pc, #496]	; (8004840 <DMA_SetConfig+0x244>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d059      	beq.n	8004706 <DMA_SetConfig+0x10a>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a7b      	ldr	r2, [pc, #492]	; (8004844 <DMA_SetConfig+0x248>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d054      	beq.n	8004706 <DMA_SetConfig+0x10a>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a79      	ldr	r2, [pc, #484]	; (8004848 <DMA_SetConfig+0x24c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d04f      	beq.n	8004706 <DMA_SetConfig+0x10a>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a78      	ldr	r2, [pc, #480]	; (800484c <DMA_SetConfig+0x250>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d04a      	beq.n	8004706 <DMA_SetConfig+0x10a>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a76      	ldr	r2, [pc, #472]	; (8004850 <DMA_SetConfig+0x254>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d045      	beq.n	8004706 <DMA_SetConfig+0x10a>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a75      	ldr	r2, [pc, #468]	; (8004854 <DMA_SetConfig+0x258>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d040      	beq.n	8004706 <DMA_SetConfig+0x10a>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a73      	ldr	r2, [pc, #460]	; (8004858 <DMA_SetConfig+0x25c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d03b      	beq.n	8004706 <DMA_SetConfig+0x10a>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a72      	ldr	r2, [pc, #456]	; (800485c <DMA_SetConfig+0x260>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d036      	beq.n	8004706 <DMA_SetConfig+0x10a>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a70      	ldr	r2, [pc, #448]	; (8004860 <DMA_SetConfig+0x264>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d031      	beq.n	8004706 <DMA_SetConfig+0x10a>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a6f      	ldr	r2, [pc, #444]	; (8004864 <DMA_SetConfig+0x268>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d02c      	beq.n	8004706 <DMA_SetConfig+0x10a>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a6d      	ldr	r2, [pc, #436]	; (8004868 <DMA_SetConfig+0x26c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d027      	beq.n	8004706 <DMA_SetConfig+0x10a>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a6c      	ldr	r2, [pc, #432]	; (800486c <DMA_SetConfig+0x270>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <DMA_SetConfig+0x10a>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a6a      	ldr	r2, [pc, #424]	; (8004870 <DMA_SetConfig+0x274>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01d      	beq.n	8004706 <DMA_SetConfig+0x10a>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a69      	ldr	r2, [pc, #420]	; (8004874 <DMA_SetConfig+0x278>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <DMA_SetConfig+0x10a>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a67      	ldr	r2, [pc, #412]	; (8004878 <DMA_SetConfig+0x27c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <DMA_SetConfig+0x10a>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a66      	ldr	r2, [pc, #408]	; (800487c <DMA_SetConfig+0x280>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <DMA_SetConfig+0x10a>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a64      	ldr	r2, [pc, #400]	; (8004880 <DMA_SetConfig+0x284>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <DMA_SetConfig+0x10a>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a63      	ldr	r2, [pc, #396]	; (8004884 <DMA_SetConfig+0x288>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <DMA_SetConfig+0x10a>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a61      	ldr	r2, [pc, #388]	; (8004888 <DMA_SetConfig+0x28c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <DMA_SetConfig+0x10e>
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <DMA_SetConfig+0x110>
 800470a:	2300      	movs	r3, #0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004718:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d004      	beq.n	800472c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800472a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3e      	ldr	r2, [pc, #248]	; (800482c <DMA_SetConfig+0x230>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d04a      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3d      	ldr	r2, [pc, #244]	; (8004830 <DMA_SetConfig+0x234>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d045      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <DMA_SetConfig+0x238>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d040      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a3a      	ldr	r2, [pc, #232]	; (8004838 <DMA_SetConfig+0x23c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d03b      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a38      	ldr	r2, [pc, #224]	; (800483c <DMA_SetConfig+0x240>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d036      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a37      	ldr	r2, [pc, #220]	; (8004840 <DMA_SetConfig+0x244>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d031      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a35      	ldr	r2, [pc, #212]	; (8004844 <DMA_SetConfig+0x248>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d02c      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a34      	ldr	r2, [pc, #208]	; (8004848 <DMA_SetConfig+0x24c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d027      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a32      	ldr	r2, [pc, #200]	; (800484c <DMA_SetConfig+0x250>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d022      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a31      	ldr	r2, [pc, #196]	; (8004850 <DMA_SetConfig+0x254>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d01d      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a2f      	ldr	r2, [pc, #188]	; (8004854 <DMA_SetConfig+0x258>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d018      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2e      	ldr	r2, [pc, #184]	; (8004858 <DMA_SetConfig+0x25c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2c      	ldr	r2, [pc, #176]	; (800485c <DMA_SetConfig+0x260>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00e      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2b      	ldr	r2, [pc, #172]	; (8004860 <DMA_SetConfig+0x264>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d009      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a29      	ldr	r2, [pc, #164]	; (8004864 <DMA_SetConfig+0x268>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <DMA_SetConfig+0x1d0>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a28      	ldr	r2, [pc, #160]	; (8004868 <DMA_SetConfig+0x26c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <DMA_SetConfig+0x1d4>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <DMA_SetConfig+0x1d6>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d05a      	beq.n	800488c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	223f      	movs	r2, #63	; 0x3f
 80047e0:	409a      	lsls	r2, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047f4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d108      	bne.n	8004818 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004816:	e087      	b.n	8004928 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]
}
 8004828:	e07e      	b.n	8004928 <DMA_SetConfig+0x32c>
 800482a:	bf00      	nop
 800482c:	40020010 	.word	0x40020010
 8004830:	40020028 	.word	0x40020028
 8004834:	40020040 	.word	0x40020040
 8004838:	40020058 	.word	0x40020058
 800483c:	40020070 	.word	0x40020070
 8004840:	40020088 	.word	0x40020088
 8004844:	400200a0 	.word	0x400200a0
 8004848:	400200b8 	.word	0x400200b8
 800484c:	40020410 	.word	0x40020410
 8004850:	40020428 	.word	0x40020428
 8004854:	40020440 	.word	0x40020440
 8004858:	40020458 	.word	0x40020458
 800485c:	40020470 	.word	0x40020470
 8004860:	40020488 	.word	0x40020488
 8004864:	400204a0 	.word	0x400204a0
 8004868:	400204b8 	.word	0x400204b8
 800486c:	58025408 	.word	0x58025408
 8004870:	5802541c 	.word	0x5802541c
 8004874:	58025430 	.word	0x58025430
 8004878:	58025444 	.word	0x58025444
 800487c:	58025458 	.word	0x58025458
 8004880:	5802546c 	.word	0x5802546c
 8004884:	58025480 	.word	0x58025480
 8004888:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a28      	ldr	r2, [pc, #160]	; (8004934 <DMA_SetConfig+0x338>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d022      	beq.n	80048dc <DMA_SetConfig+0x2e0>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a27      	ldr	r2, [pc, #156]	; (8004938 <DMA_SetConfig+0x33c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d01d      	beq.n	80048dc <DMA_SetConfig+0x2e0>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a25      	ldr	r2, [pc, #148]	; (800493c <DMA_SetConfig+0x340>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d018      	beq.n	80048dc <DMA_SetConfig+0x2e0>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a24      	ldr	r2, [pc, #144]	; (8004940 <DMA_SetConfig+0x344>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <DMA_SetConfig+0x2e0>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a22      	ldr	r2, [pc, #136]	; (8004944 <DMA_SetConfig+0x348>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00e      	beq.n	80048dc <DMA_SetConfig+0x2e0>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a21      	ldr	r2, [pc, #132]	; (8004948 <DMA_SetConfig+0x34c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d009      	beq.n	80048dc <DMA_SetConfig+0x2e0>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1f      	ldr	r2, [pc, #124]	; (800494c <DMA_SetConfig+0x350>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <DMA_SetConfig+0x2e0>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <DMA_SetConfig+0x354>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d101      	bne.n	80048e0 <DMA_SetConfig+0x2e4>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <DMA_SetConfig+0x2e6>
 80048e0:	2300      	movs	r3, #0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d020      	beq.n	8004928 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	2201      	movs	r2, #1
 80048f0:	409a      	lsls	r2, r3
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	d108      	bne.n	8004918 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	60da      	str	r2, [r3, #12]
}
 8004916:	e007      	b.n	8004928 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	60da      	str	r2, [r3, #12]
}
 8004928:	bf00      	nop
 800492a:	371c      	adds	r7, #28
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	58025408 	.word	0x58025408
 8004938:	5802541c 	.word	0x5802541c
 800493c:	58025430 	.word	0x58025430
 8004940:	58025444 	.word	0x58025444
 8004944:	58025458 	.word	0x58025458
 8004948:	5802546c 	.word	0x5802546c
 800494c:	58025480 	.word	0x58025480
 8004950:	58025494 	.word	0x58025494

08004954 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a42      	ldr	r2, [pc, #264]	; (8004a6c <DMA_CalcBaseAndBitshift+0x118>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d04a      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a41      	ldr	r2, [pc, #260]	; (8004a70 <DMA_CalcBaseAndBitshift+0x11c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d045      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3f      	ldr	r2, [pc, #252]	; (8004a74 <DMA_CalcBaseAndBitshift+0x120>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d040      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a3e      	ldr	r2, [pc, #248]	; (8004a78 <DMA_CalcBaseAndBitshift+0x124>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d03b      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a3c      	ldr	r2, [pc, #240]	; (8004a7c <DMA_CalcBaseAndBitshift+0x128>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d036      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a3b      	ldr	r2, [pc, #236]	; (8004a80 <DMA_CalcBaseAndBitshift+0x12c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d031      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a39      	ldr	r2, [pc, #228]	; (8004a84 <DMA_CalcBaseAndBitshift+0x130>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d02c      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a38      	ldr	r2, [pc, #224]	; (8004a88 <DMA_CalcBaseAndBitshift+0x134>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d027      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a36      	ldr	r2, [pc, #216]	; (8004a8c <DMA_CalcBaseAndBitshift+0x138>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d022      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a35      	ldr	r2, [pc, #212]	; (8004a90 <DMA_CalcBaseAndBitshift+0x13c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d01d      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a33      	ldr	r2, [pc, #204]	; (8004a94 <DMA_CalcBaseAndBitshift+0x140>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d018      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a32      	ldr	r2, [pc, #200]	; (8004a98 <DMA_CalcBaseAndBitshift+0x144>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a30      	ldr	r2, [pc, #192]	; (8004a9c <DMA_CalcBaseAndBitshift+0x148>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00e      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a2f      	ldr	r2, [pc, #188]	; (8004aa0 <DMA_CalcBaseAndBitshift+0x14c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d009      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a2d      	ldr	r2, [pc, #180]	; (8004aa4 <DMA_CalcBaseAndBitshift+0x150>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <DMA_CalcBaseAndBitshift+0xa8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a2c      	ldr	r2, [pc, #176]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x154>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <DMA_CalcBaseAndBitshift+0xac>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <DMA_CalcBaseAndBitshift+0xae>
 8004a00:	2300      	movs	r3, #0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d024      	beq.n	8004a50 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	3b10      	subs	r3, #16
 8004a0e:	4a27      	ldr	r2, [pc, #156]	; (8004aac <DMA_CalcBaseAndBitshift+0x158>)
 8004a10:	fba2 2303 	umull	r2, r3, r2, r3
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	4a24      	ldr	r2, [pc, #144]	; (8004ab0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004a20:	5cd3      	ldrb	r3, [r2, r3]
 8004a22:	461a      	mov	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d908      	bls.n	8004a40 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	4b1f      	ldr	r3, [pc, #124]	; (8004ab4 <DMA_CalcBaseAndBitshift+0x160>)
 8004a36:	4013      	ands	r3, r2
 8004a38:	1d1a      	adds	r2, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	659a      	str	r2, [r3, #88]	; 0x58
 8004a3e:	e00d      	b.n	8004a5c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <DMA_CalcBaseAndBitshift+0x160>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4e:	e005      	b.n	8004a5c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	40020010 	.word	0x40020010
 8004a70:	40020028 	.word	0x40020028
 8004a74:	40020040 	.word	0x40020040
 8004a78:	40020058 	.word	0x40020058
 8004a7c:	40020070 	.word	0x40020070
 8004a80:	40020088 	.word	0x40020088
 8004a84:	400200a0 	.word	0x400200a0
 8004a88:	400200b8 	.word	0x400200b8
 8004a8c:	40020410 	.word	0x40020410
 8004a90:	40020428 	.word	0x40020428
 8004a94:	40020440 	.word	0x40020440
 8004a98:	40020458 	.word	0x40020458
 8004a9c:	40020470 	.word	0x40020470
 8004aa0:	40020488 	.word	0x40020488
 8004aa4:	400204a0 	.word	0x400204a0
 8004aa8:	400204b8 	.word	0x400204b8
 8004aac:	aaaaaaab 	.word	0xaaaaaaab
 8004ab0:	0800e94c 	.word	0x0800e94c
 8004ab4:	fffffc00 	.word	0xfffffc00

08004ab8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d120      	bne.n	8004b0e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d858      	bhi.n	8004b86 <DMA_CheckFifoParam+0xce>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <DMA_CheckFifoParam+0x24>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004aff 	.word	0x08004aff
 8004ae4:	08004aed 	.word	0x08004aed
 8004ae8:	08004b87 	.word	0x08004b87
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d048      	beq.n	8004b8a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004afc:	e045      	b.n	8004b8a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b06:	d142      	bne.n	8004b8e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b0c:	e03f      	b.n	8004b8e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b16:	d123      	bne.n	8004b60 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1c:	2b03      	cmp	r3, #3
 8004b1e:	d838      	bhi.n	8004b92 <DMA_CheckFifoParam+0xda>
 8004b20:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <DMA_CheckFifoParam+0x70>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b39 	.word	0x08004b39
 8004b2c:	08004b3f 	.word	0x08004b3f
 8004b30:	08004b39 	.word	0x08004b39
 8004b34:	08004b51 	.word	0x08004b51
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
        break;
 8004b3c:	e030      	b.n	8004ba0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d025      	beq.n	8004b96 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b4e:	e022      	b.n	8004b96 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b58:	d11f      	bne.n	8004b9a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b5e:	e01c      	b.n	8004b9a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d902      	bls.n	8004b6e <DMA_CheckFifoParam+0xb6>
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d003      	beq.n	8004b74 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004b6c:	e018      	b.n	8004ba0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
        break;
 8004b72:	e015      	b.n	8004ba0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00e      	beq.n	8004b9e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
    break;
 8004b84:	e00b      	b.n	8004b9e <DMA_CheckFifoParam+0xe6>
        break;
 8004b86:	bf00      	nop
 8004b88:	e00a      	b.n	8004ba0 <DMA_CheckFifoParam+0xe8>
        break;
 8004b8a:	bf00      	nop
 8004b8c:	e008      	b.n	8004ba0 <DMA_CheckFifoParam+0xe8>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e006      	b.n	8004ba0 <DMA_CheckFifoParam+0xe8>
        break;
 8004b92:	bf00      	nop
 8004b94:	e004      	b.n	8004ba0 <DMA_CheckFifoParam+0xe8>
        break;
 8004b96:	bf00      	nop
 8004b98:	e002      	b.n	8004ba0 <DMA_CheckFifoParam+0xe8>
        break;
 8004b9a:	bf00      	nop
 8004b9c:	e000      	b.n	8004ba0 <DMA_CheckFifoParam+0xe8>
    break;
 8004b9e:	bf00      	nop
    }
  }

  return status;
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop

08004bb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a38      	ldr	r2, [pc, #224]	; (8004ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d022      	beq.n	8004c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a36      	ldr	r2, [pc, #216]	; (8004ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01d      	beq.n	8004c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a35      	ldr	r2, [pc, #212]	; (8004cac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d018      	beq.n	8004c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a33      	ldr	r2, [pc, #204]	; (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a32      	ldr	r2, [pc, #200]	; (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00e      	beq.n	8004c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a30      	ldr	r2, [pc, #192]	; (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a2f      	ldr	r2, [pc, #188]	; (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a2d      	ldr	r2, [pc, #180]	; (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d101      	bne.n	8004c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004c12:	2300      	movs	r3, #0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01a      	beq.n	8004c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	3b08      	subs	r3, #8
 8004c20:	4a28      	ldr	r2, [pc, #160]	; (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	091b      	lsrs	r3, r3, #4
 8004c28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	461a      	mov	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004c3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f003 031f 	and.w	r3, r3, #31
 8004c44:	2201      	movs	r2, #1
 8004c46:	409a      	lsls	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004c4c:	e024      	b.n	8004c98 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	3b10      	subs	r3, #16
 8004c56:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	091b      	lsrs	r3, r3, #4
 8004c5e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4a1c      	ldr	r2, [pc, #112]	; (8004cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d806      	bhi.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d902      	bls.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3308      	adds	r3, #8
 8004c74:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	461a      	mov	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004c88:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	2201      	movs	r2, #1
 8004c92:	409a      	lsls	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	58025408 	.word	0x58025408
 8004ca8:	5802541c 	.word	0x5802541c
 8004cac:	58025430 	.word	0x58025430
 8004cb0:	58025444 	.word	0x58025444
 8004cb4:	58025458 	.word	0x58025458
 8004cb8:	5802546c 	.word	0x5802546c
 8004cbc:	58025480 	.word	0x58025480
 8004cc0:	58025494 	.word	0x58025494
 8004cc4:	cccccccd 	.word	0xcccccccd
 8004cc8:	16009600 	.word	0x16009600
 8004ccc:	58025880 	.word	0x58025880
 8004cd0:	aaaaaaab 	.word	0xaaaaaaab
 8004cd4:	400204b8 	.word	0x400204b8
 8004cd8:	4002040f 	.word	0x4002040f
 8004cdc:	10008200 	.word	0x10008200
 8004ce0:	40020880 	.word	0x40020880

08004ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d04a      	beq.n	8004d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d847      	bhi.n	8004d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a25      	ldr	r2, [pc, #148]	; (8004d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d022      	beq.n	8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a24      	ldr	r2, [pc, #144]	; (8004da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d01d      	beq.n	8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a22      	ldr	r2, [pc, #136]	; (8004da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d018      	beq.n	8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a21      	ldr	r2, [pc, #132]	; (8004da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d013      	beq.n	8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1f      	ldr	r2, [pc, #124]	; (8004dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00e      	beq.n	8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a1e      	ldr	r2, [pc, #120]	; (8004db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d009      	beq.n	8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1c      	ldr	r2, [pc, #112]	; (8004db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1b      	ldr	r2, [pc, #108]	; (8004db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004d54:	2300      	movs	r3, #0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4b17      	ldr	r3, [pc, #92]	; (8004dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	461a      	mov	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a15      	ldr	r2, [pc, #84]	; (8004dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004d6c:	671a      	str	r2, [r3, #112]	; 0x70
 8004d6e:	e009      	b.n	8004d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	461a      	mov	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004d82:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	2201      	movs	r2, #1
 8004d8a:	409a      	lsls	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004d90:	bf00      	nop
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	58025408 	.word	0x58025408
 8004da0:	5802541c 	.word	0x5802541c
 8004da4:	58025430 	.word	0x58025430
 8004da8:	58025444 	.word	0x58025444
 8004dac:	58025458 	.word	0x58025458
 8004db0:	5802546c 	.word	0x5802546c
 8004db4:	58025480 	.word	0x58025480
 8004db8:	58025494 	.word	0x58025494
 8004dbc:	1600963f 	.word	0x1600963f
 8004dc0:	58025940 	.word	0x58025940
 8004dc4:	1000823f 	.word	0x1000823f
 8004dc8:	40020940 	.word	0x40020940

08004dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004dda:	4b89      	ldr	r3, [pc, #548]	; (8005000 <HAL_GPIO_Init+0x234>)
 8004ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dde:	e194      	b.n	800510a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	2101      	movs	r1, #1
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dec:	4013      	ands	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8186 	beq.w	8005104 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d00b      	beq.n	8004e18 <HAL_GPIO_Init+0x4c>
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d007      	beq.n	8004e18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e0c:	2b11      	cmp	r3, #17
 8004e0e:	d003      	beq.n	8004e18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b12      	cmp	r3, #18
 8004e16:	d130      	bne.n	8004e7a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	005b      	lsls	r3, r3, #1
 8004e22:	2203      	movs	r2, #3
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e4e:	2201      	movs	r2, #1
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	f003 0201 	and.w	r2, r3, #1
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	2203      	movs	r2, #3
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_Init+0xee>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b12      	cmp	r3, #18
 8004eb8:	d123      	bne.n	8004f02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	08da      	lsrs	r2, r3, #3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3208      	adds	r2, #8
 8004ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	220f      	movs	r2, #15
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4013      	ands	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	08da      	lsrs	r2, r3, #3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3208      	adds	r2, #8
 8004efc:	69b9      	ldr	r1, [r7, #24]
 8004efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	43db      	mvns	r3, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4013      	ands	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0203 	and.w	r2, r3, #3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 80e0 	beq.w	8005104 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f44:	4b2f      	ldr	r3, [pc, #188]	; (8005004 <HAL_GPIO_Init+0x238>)
 8004f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f4a:	4a2e      	ldr	r2, [pc, #184]	; (8005004 <HAL_GPIO_Init+0x238>)
 8004f4c:	f043 0302 	orr.w	r3, r3, #2
 8004f50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f54:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <HAL_GPIO_Init+0x238>)
 8004f56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f62:	4a29      	ldr	r2, [pc, #164]	; (8005008 <HAL_GPIO_Init+0x23c>)
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	089b      	lsrs	r3, r3, #2
 8004f68:	3302      	adds	r3, #2
 8004f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	220f      	movs	r2, #15
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4013      	ands	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a20      	ldr	r2, [pc, #128]	; (800500c <HAL_GPIO_Init+0x240>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d052      	beq.n	8005034 <HAL_GPIO_Init+0x268>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <HAL_GPIO_Init+0x244>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d031      	beq.n	8004ffa <HAL_GPIO_Init+0x22e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1e      	ldr	r2, [pc, #120]	; (8005014 <HAL_GPIO_Init+0x248>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d02b      	beq.n	8004ff6 <HAL_GPIO_Init+0x22a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1d      	ldr	r2, [pc, #116]	; (8005018 <HAL_GPIO_Init+0x24c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d025      	beq.n	8004ff2 <HAL_GPIO_Init+0x226>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1c      	ldr	r2, [pc, #112]	; (800501c <HAL_GPIO_Init+0x250>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01f      	beq.n	8004fee <HAL_GPIO_Init+0x222>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1b      	ldr	r2, [pc, #108]	; (8005020 <HAL_GPIO_Init+0x254>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d019      	beq.n	8004fea <HAL_GPIO_Init+0x21e>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_GPIO_Init+0x258>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <HAL_GPIO_Init+0x21a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a19      	ldr	r2, [pc, #100]	; (8005028 <HAL_GPIO_Init+0x25c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00d      	beq.n	8004fe2 <HAL_GPIO_Init+0x216>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a18      	ldr	r2, [pc, #96]	; (800502c <HAL_GPIO_Init+0x260>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <HAL_GPIO_Init+0x212>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a17      	ldr	r2, [pc, #92]	; (8005030 <HAL_GPIO_Init+0x264>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d101      	bne.n	8004fda <HAL_GPIO_Init+0x20e>
 8004fd6:	2309      	movs	r3, #9
 8004fd8:	e02d      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fda:	230a      	movs	r3, #10
 8004fdc:	e02b      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fde:	2308      	movs	r3, #8
 8004fe0:	e029      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fe2:	2307      	movs	r3, #7
 8004fe4:	e027      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fe6:	2306      	movs	r3, #6
 8004fe8:	e025      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fea:	2305      	movs	r3, #5
 8004fec:	e023      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004fee:	2304      	movs	r3, #4
 8004ff0:	e021      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e01f      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e01d      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e01b      	b.n	8005036 <HAL_GPIO_Init+0x26a>
 8004ffe:	bf00      	nop
 8005000:	58000080 	.word	0x58000080
 8005004:	58024400 	.word	0x58024400
 8005008:	58000400 	.word	0x58000400
 800500c:	58020000 	.word	0x58020000
 8005010:	58020400 	.word	0x58020400
 8005014:	58020800 	.word	0x58020800
 8005018:	58020c00 	.word	0x58020c00
 800501c:	58021000 	.word	0x58021000
 8005020:	58021400 	.word	0x58021400
 8005024:	58021800 	.word	0x58021800
 8005028:	58021c00 	.word	0x58021c00
 800502c:	58022000 	.word	0x58022000
 8005030:	58022400 	.word	0x58022400
 8005034:	2300      	movs	r3, #0
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	f002 0203 	and.w	r2, r2, #3
 800503c:	0092      	lsls	r2, r2, #2
 800503e:	4093      	lsls	r3, r2
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	4313      	orrs	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005046:	4938      	ldr	r1, [pc, #224]	; (8005128 <HAL_GPIO_Init+0x35c>)
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	089b      	lsrs	r3, r3, #2
 800504c:	3302      	adds	r3, #2
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	43db      	mvns	r3, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4013      	ands	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80050ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	43db      	mvns	r3, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	4013      	ands	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80050fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	3301      	adds	r3, #1
 8005108:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	f47f ae63 	bne.w	8004de0 <HAL_GPIO_Init+0x14>
  }
}
 800511a:	bf00      	nop
 800511c:	bf00      	nop
 800511e:	3724      	adds	r7, #36	; 0x24
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	58000400 	.word	0x58000400

0800512c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	807b      	strh	r3, [r7, #2]
 8005138:	4613      	mov	r3, r2
 800513a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800513c:	787b      	ldrb	r3, [r7, #1]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005142:	887a      	ldrh	r2, [r7, #2]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005148:	e003      	b.n	8005152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800514a:	887b      	ldrh	r3, [r7, #2]
 800514c:	041a      	lsls	r2, r3, #16
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	619a      	str	r2, [r3, #24]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e07f      	b.n	8005272 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fc f946 	bl	8001418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2224      	movs	r2, #36	; 0x24
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d107      	bne.n	80051da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d6:	609a      	str	r2, [r3, #8]
 80051d8:	e006      	b.n	80051e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80051e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d104      	bne.n	80051fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b1d      	ldr	r3, [pc, #116]	; (800527c <HAL_I2C_Init+0x11c>)
 8005206:	430b      	orrs	r3, r1
 8005208:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005218:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	ea42 0103 	orr.w	r1, r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	021a      	lsls	r2, r3, #8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69d9      	ldr	r1, [r3, #28]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	02008000 	.word	0x02008000

08005280 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	4608      	mov	r0, r1
 800528a:	4611      	mov	r1, r2
 800528c:	461a      	mov	r2, r3
 800528e:	4603      	mov	r3, r0
 8005290:	817b      	strh	r3, [r7, #10]
 8005292:	460b      	mov	r3, r1
 8005294:	813b      	strh	r3, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b20      	cmp	r3, #32
 80052a4:	f040 80f9 	bne.w	800549a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_I2C_Mem_Write+0x34>
 80052ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d105      	bne.n	80052c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e0ed      	b.n	800549c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_I2C_Mem_Write+0x4e>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e0e6      	b.n	800549c <HAL_I2C_Mem_Write+0x21c>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052d6:	f7fc fdd9 	bl	8001e8c <HAL_GetTick>
 80052da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	2319      	movs	r3, #25
 80052e2:	2201      	movs	r2, #1
 80052e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f001 fed9 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0d1      	b.n	800549c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2221      	movs	r2, #33	; 0x21
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2240      	movs	r2, #64	; 0x40
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a3a      	ldr	r2, [r7, #32]
 8005312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005320:	88f8      	ldrh	r0, [r7, #6]
 8005322:	893a      	ldrh	r2, [r7, #8]
 8005324:	8979      	ldrh	r1, [r7, #10]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	4603      	mov	r3, r0
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 ff19 	bl	8006168 <I2C_RequestMemoryWrite>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0a9      	b.n	800549c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	2bff      	cmp	r3, #255	; 0xff
 8005350:	d90e      	bls.n	8005370 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	22ff      	movs	r2, #255	; 0xff
 8005356:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535c:	b2da      	uxtb	r2, r3
 800535e:	8979      	ldrh	r1, [r7, #10]
 8005360:	2300      	movs	r3, #0
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f001 ffbb 	bl	80072e4 <I2C_TransferConfig>
 800536e:	e00f      	b.n	8005390 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800537e:	b2da      	uxtb	r2, r3
 8005380:	8979      	ldrh	r1, [r7, #10]
 8005382:	2300      	movs	r3, #0
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f001 ffaa 	bl	80072e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f001 fec3 	bl	8007120 <I2C_WaitOnTXISFlagUntilTimeout>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e07b      	b.n	800549c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	781a      	ldrb	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d034      	beq.n	8005448 <HAL_I2C_Mem_Write+0x1c8>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d130      	bne.n	8005448 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ec:	2200      	movs	r2, #0
 80053ee:	2180      	movs	r1, #128	; 0x80
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f001 fe55 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e04d      	b.n	800549c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	2bff      	cmp	r3, #255	; 0xff
 8005408:	d90e      	bls.n	8005428 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005414:	b2da      	uxtb	r2, r3
 8005416:	8979      	ldrh	r1, [r7, #10]
 8005418:	2300      	movs	r3, #0
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f001 ff5f 	bl	80072e4 <I2C_TransferConfig>
 8005426:	e00f      	b.n	8005448 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005436:	b2da      	uxtb	r2, r3
 8005438:	8979      	ldrh	r1, [r7, #10]
 800543a:	2300      	movs	r3, #0
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f001 ff4e 	bl	80072e4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d19e      	bne.n	8005390 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f001 fea2 	bl	80071a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e01a      	b.n	800549c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2220      	movs	r2, #32
 800546c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6859      	ldr	r1, [r3, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <HAL_I2C_Mem_Write+0x224>)
 800547a:	400b      	ands	r3, r1
 800547c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2220      	movs	r2, #32
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	e000      	b.n	800549c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800549a:	2302      	movs	r3, #2
  }
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	fe00e800 	.word	0xfe00e800

080054a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	4608      	mov	r0, r1
 80054b2:	4611      	mov	r1, r2
 80054b4:	461a      	mov	r2, r3
 80054b6:	4603      	mov	r3, r0
 80054b8:	817b      	strh	r3, [r7, #10]
 80054ba:	460b      	mov	r3, r1
 80054bc:	813b      	strh	r3, [r7, #8]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	f040 80fd 	bne.w	80056ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <HAL_I2C_Mem_Read+0x34>
 80054d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d105      	bne.n	80054e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0f1      	b.n	80056cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_I2C_Mem_Read+0x4e>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e0ea      	b.n	80056cc <HAL_I2C_Mem_Read+0x224>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054fe:	f7fc fcc5 	bl	8001e8c <HAL_GetTick>
 8005502:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	2319      	movs	r3, #25
 800550a:	2201      	movs	r2, #1
 800550c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f001 fdc5 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0d5      	b.n	80056cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2222      	movs	r2, #34	; 0x22
 8005524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2240      	movs	r2, #64	; 0x40
 800552c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a3a      	ldr	r2, [r7, #32]
 800553a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005540:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005548:	88f8      	ldrh	r0, [r7, #6]
 800554a:	893a      	ldrh	r2, [r7, #8]
 800554c:	8979      	ldrh	r1, [r7, #10]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	4603      	mov	r3, r0
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fe59 	bl	8006210 <I2C_RequestMemoryRead>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d005      	beq.n	8005570 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0ad      	b.n	80056cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	2bff      	cmp	r3, #255	; 0xff
 8005578:	d90e      	bls.n	8005598 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	22ff      	movs	r2, #255	; 0xff
 800557e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005584:	b2da      	uxtb	r2, r3
 8005586:	8979      	ldrh	r1, [r7, #10]
 8005588:	4b52      	ldr	r3, [pc, #328]	; (80056d4 <HAL_I2C_Mem_Read+0x22c>)
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f001 fea7 	bl	80072e4 <I2C_TransferConfig>
 8005596:	e00f      	b.n	80055b8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559c:	b29a      	uxth	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	8979      	ldrh	r1, [r7, #10]
 80055aa:	4b4a      	ldr	r3, [pc, #296]	; (80056d4 <HAL_I2C_Mem_Read+0x22c>)
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f001 fe96 	bl	80072e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	2200      	movs	r2, #0
 80055c0:	2104      	movs	r1, #4
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f001 fd6c 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e07c      	b.n	80056cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d034      	beq.n	8005678 <HAL_I2C_Mem_Read+0x1d0>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005612:	2b00      	cmp	r3, #0
 8005614:	d130      	bne.n	8005678 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	2200      	movs	r2, #0
 800561e:	2180      	movs	r1, #128	; 0x80
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f001 fd3d 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e04d      	b.n	80056cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	2bff      	cmp	r3, #255	; 0xff
 8005638:	d90e      	bls.n	8005658 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	22ff      	movs	r2, #255	; 0xff
 800563e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005644:	b2da      	uxtb	r2, r3
 8005646:	8979      	ldrh	r1, [r7, #10]
 8005648:	2300      	movs	r3, #0
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f001 fe47 	bl	80072e4 <I2C_TransferConfig>
 8005656:	e00f      	b.n	8005678 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005666:	b2da      	uxtb	r2, r3
 8005668:	8979      	ldrh	r1, [r7, #10]
 800566a:	2300      	movs	r3, #0
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f001 fe36 	bl	80072e4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d19a      	bne.n	80055b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f001 fd8a 	bl	80071a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e01a      	b.n	80056cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2220      	movs	r2, #32
 800569c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6859      	ldr	r1, [r3, #4]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <HAL_I2C_Mem_Read+0x230>)
 80056aa:	400b      	ands	r3, r1
 80056ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e000      	b.n	80056cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80056ca:	2302      	movs	r3, #2
  }
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	80002400 	.word	0x80002400
 80056d8:	fe00e800 	.word	0xfe00e800

080056dc <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	; 0x28
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	4608      	mov	r0, r1
 80056e6:	4611      	mov	r1, r2
 80056e8:	461a      	mov	r2, r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	817b      	strh	r3, [r7, #10]
 80056ee:	460b      	mov	r3, r1
 80056f0:	813b      	strh	r3, [r7, #8]
 80056f2:	4613      	mov	r3, r2
 80056f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b20      	cmp	r3, #32
 8005700:	f040 80d5 	bne.w	80058ae <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_I2C_Mem_Read_DMA+0x34>
 800570a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d105      	bne.n	800571c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005716:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0c9      	b.n	80058b0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800572a:	d101      	bne.n	8005730 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800572c:	2302      	movs	r3, #2
 800572e:	e0bf      	b.n	80058b0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_I2C_Mem_Read_DMA+0x62>
 800573a:	2302      	movs	r3, #2
 800573c:	e0b8      	b.n	80058b0 <HAL_I2C_Mem_Read_DMA+0x1d4>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005746:	f7fc fba1 	bl	8001e8c <HAL_GetTick>
 800574a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2222      	movs	r2, #34	; 0x22
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2240      	movs	r2, #64	; 0x40
 8005758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800576c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4a51      	ldr	r2, [pc, #324]	; (80058b8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a51      	ldr	r2, [pc, #324]	; (80058bc <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8005778:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	2bff      	cmp	r3, #255	; 0xff
 8005782:	d906      	bls.n	8005792 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	22ff      	movs	r2, #255	; 0xff
 8005788:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800578a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	e007      	b.n	80057a2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800579c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057a0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80057a2:	88f8      	ldrh	r0, [r7, #6]
 80057a4:	893a      	ldrh	r2, [r7, #8]
 80057a6:	8979      	ldrh	r1, [r7, #10]
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	2319      	movs	r3, #25
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	4603      	mov	r3, r0
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 fd2c 	bl	8006210 <I2C_RequestMemoryRead>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e072      	b.n	80058b0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d020      	beq.n	8005814 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	4a3a      	ldr	r2, [pc, #232]	; (80058c0 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 80057d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	4a39      	ldr	r2, [pc, #228]	; (80058c4 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 80057e0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e6:	2200      	movs	r2, #0
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	2200      	movs	r2, #0
 80057f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3324      	adds	r3, #36	; 0x24
 80057fc:	4619      	mov	r1, r3
 80057fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	f7fc ffea 	bl	80027dc <HAL_DMA_Start_IT>
 8005808:	4603      	mov	r3, r0
 800580a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800580c:	7dfb      	ldrb	r3, [r7, #23]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d139      	bne.n	8005886 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8005812:	e013      	b.n	800583c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005828:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e039      	b.n	80058b0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005840:	b2da      	uxtb	r2, r3
 8005842:	8979      	ldrh	r1, [r7, #10]
 8005844:	4b20      	ldr	r3, [pc, #128]	; (80058c8 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f001 fd4a 	bl	80072e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800586a:	2110      	movs	r1, #16
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f001 fd67 	bl	8007340 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005880:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	e014      	b.n	80058b0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	f043 0210 	orr.w	r2, r3, #16
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	ffff0000 	.word	0xffff0000
 80058bc:	08005bc3 	.word	0x08005bc3
 80058c0:	08006d5f 	.word	0x08006d5f
 80058c4:	08006df5 	.word	0x08006df5
 80058c8:	80002400 	.word	0x80002400

080058cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	4798      	blx	r3
  }
}
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	70fb      	strb	r3, [r7, #3]
 800595c:	4613      	mov	r3, r2
 800595e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <I2C_Slave_ISR_IT+0x24>
 80059dc:	2302      	movs	r3, #2
 80059de:	e0ec      	b.n	8005bba <I2C_Slave_ISR_IT+0x1fe>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <I2C_Slave_ISR_IT+0x4c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005a00:	6939      	ldr	r1, [r7, #16]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 fe42 	bl	800668c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	091b      	lsrs	r3, r3, #4
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d04d      	beq.n	8005ab0 <I2C_Slave_ISR_IT+0xf4>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d047      	beq.n	8005ab0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d128      	bne.n	8005a7c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b28      	cmp	r3, #40	; 0x28
 8005a34:	d108      	bne.n	8005a48 <I2C_Slave_ISR_IT+0x8c>
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3c:	d104      	bne.n	8005a48 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a3e:	6939      	ldr	r1, [r7, #16]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f001 f81b 	bl	8006a7c <I2C_ITListenCplt>
 8005a46:	e032      	b.n	8005aae <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b29      	cmp	r3, #41	; 0x29
 8005a52:	d10e      	bne.n	8005a72 <I2C_Slave_ISR_IT+0xb6>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a5a:	d00a      	beq.n	8005a72 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2210      	movs	r2, #16
 8005a62:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f001 f956 	bl	8006d16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 fce5 	bl	800643a <I2C_ITSlaveSeqCplt>
 8005a70:	e01d      	b.n	8005aae <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2210      	movs	r2, #16
 8005a78:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005a7a:	e096      	b.n	8005baa <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2210      	movs	r2, #16
 8005a82:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a88:	f043 0204 	orr.w	r2, r3, #4
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <I2C_Slave_ISR_IT+0xe4>
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a9c:	f040 8085 	bne.w	8005baa <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f001 f83e 	bl	8006b28 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005aac:	e07d      	b.n	8005baa <I2C_Slave_ISR_IT+0x1ee>
 8005aae:	e07c      	b.n	8005baa <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	089b      	lsrs	r3, r3, #2
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d030      	beq.n	8005b1e <I2C_Slave_ISR_IT+0x162>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	089b      	lsrs	r3, r3, #2
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d02a      	beq.n	8005b1e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d018      	beq.n	8005b04 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d14f      	bne.n	8005bae <I2C_Slave_ISR_IT+0x1f2>
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b14:	d04b      	beq.n	8005bae <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fc8f 	bl	800643a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005b1c:	e047      	b.n	8005bae <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	08db      	lsrs	r3, r3, #3
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	08db      	lsrs	r3, r3, #3
 8005b2e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005b36:	6939      	ldr	r1, [r7, #16]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fbbd 	bl	80062b8 <I2C_ITAddrCplt>
 8005b3e:	e037      	b.n	8005bb0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d031      	beq.n	8005bb0 <I2C_Slave_ISR_IT+0x1f4>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d02b      	beq.n	8005bb0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d018      	beq.n	8005b94 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	781a      	ldrb	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	851a      	strh	r2, [r3, #40]	; 0x28
 8005b92:	e00d      	b.n	8005bb0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b9a:	d002      	beq.n	8005ba2 <I2C_Slave_ISR_IT+0x1e6>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 fc49 	bl	800643a <I2C_ITSlaveSeqCplt>
 8005ba8:	e002      	b.n	8005bb0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005bae:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b088      	sub	sp, #32
 8005bc6:	af02      	add	r7, sp, #8
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <I2C_Master_ISR_DMA+0x1a>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e0e1      	b.n	8005da0 <I2C_Master_ISR_DMA+0x1de>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	091b      	lsrs	r3, r3, #4
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d017      	beq.n	8005c20 <I2C_Master_ISR_DMA+0x5e>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d011      	beq.n	8005c20 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2210      	movs	r2, #16
 8005c02:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c08:	f043 0204 	orr.w	r2, r3, #4
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005c10:	2120      	movs	r1, #32
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f001 fb94 	bl	8007340 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f001 f87c 	bl	8006d16 <I2C_Flush_TXDR>
 8005c1e:	e0ba      	b.n	8005d96 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	09db      	lsrs	r3, r3, #7
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d072      	beq.n	8005d12 <I2C_Master_ISR_DMA+0x150>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	099b      	lsrs	r3, r3, #6
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d06c      	beq.n	8005d12 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c46:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d04e      	beq.n	8005cf0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c5e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2bff      	cmp	r3, #255	; 0xff
 8005c68:	d906      	bls.n	8005c78 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	22ff      	movs	r2, #255	; 0xff
 8005c6e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e010      	b.n	8005c9a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c8a:	d003      	beq.n	8005c94 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	617b      	str	r3, [r7, #20]
 8005c92:	e002      	b.n	8005c9a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c98:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	8a79      	ldrh	r1, [r7, #18]
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f001 fb1b 	bl	80072e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b22      	cmp	r3, #34	; 0x22
 8005cca:	d108      	bne.n	8005cde <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cda:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005cdc:	e05b      	b.n	8005d96 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005cee:	e052      	b.n	8005d96 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cfe:	d003      	beq.n	8005d08 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 fb5d 	bl	80063c0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005d06:	e046      	b.n	8005d96 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d08:	2140      	movs	r1, #64	; 0x40
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 ff0c 	bl	8006b28 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005d10:	e041      	b.n	8005d96 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	099b      	lsrs	r3, r3, #6
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d029      	beq.n	8005d72 <I2C_Master_ISR_DMA+0x1b0>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	099b      	lsrs	r3, r3, #6
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d023      	beq.n	8005d72 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d119      	bne.n	8005d68 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d42:	d027      	beq.n	8005d94 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d4c:	d108      	bne.n	8005d60 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d5c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005d5e:	e019      	b.n	8005d94 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 fb2d 	bl	80063c0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005d66:	e015      	b.n	8005d94 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005d68:	2140      	movs	r1, #64	; 0x40
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 fedc 	bl	8006b28 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d70:	e010      	b.n	8005d94 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <I2C_Master_ISR_DMA+0x1d4>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fbb3 	bl	80064f8 <I2C_ITMasterCplt>
 8005d92:	e000      	b.n	8005d96 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005d94:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <I2C_Slave_ISR_DMA+0x24>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e1c8      	b.n	800615e <I2C_Slave_ISR_DMA+0x3b6>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <I2C_Slave_ISR_DMA+0x4c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fc4c 	bl	800668c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	091b      	lsrs	r3, r3, #4
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 8199 	beq.w	8006134 <I2C_Slave_ISR_DMA+0x38c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8192 	beq.w	8006134 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	0b9b      	lsrs	r3, r3, #14
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	0bdb      	lsrs	r3, r3, #15
 8005e20:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 817e 	beq.w	8006126 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d07c      	beq.n	8005f2c <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	0bdb      	lsrs	r3, r3, #15
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d076      	beq.n	8005f2c <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a8d      	ldr	r2, [pc, #564]	; (800607c <I2C_Slave_ISR_DMA+0x2d4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d059      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a8b      	ldr	r2, [pc, #556]	; (8006080 <I2C_Slave_ISR_DMA+0x2d8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d053      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a89      	ldr	r2, [pc, #548]	; (8006084 <I2C_Slave_ISR_DMA+0x2dc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d04d      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a87      	ldr	r2, [pc, #540]	; (8006088 <I2C_Slave_ISR_DMA+0x2e0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d047      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a85      	ldr	r2, [pc, #532]	; (800608c <I2C_Slave_ISR_DMA+0x2e4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d041      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a83      	ldr	r2, [pc, #524]	; (8006090 <I2C_Slave_ISR_DMA+0x2e8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d03b      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a81      	ldr	r2, [pc, #516]	; (8006094 <I2C_Slave_ISR_DMA+0x2ec>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d035      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a7f      	ldr	r2, [pc, #508]	; (8006098 <I2C_Slave_ISR_DMA+0x2f0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d02f      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a7d      	ldr	r2, [pc, #500]	; (800609c <I2C_Slave_ISR_DMA+0x2f4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d029      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a7b      	ldr	r2, [pc, #492]	; (80060a0 <I2C_Slave_ISR_DMA+0x2f8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d023      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a79      	ldr	r2, [pc, #484]	; (80060a4 <I2C_Slave_ISR_DMA+0x2fc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d01d      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a77      	ldr	r2, [pc, #476]	; (80060a8 <I2C_Slave_ISR_DMA+0x300>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d017      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a75      	ldr	r2, [pc, #468]	; (80060ac <I2C_Slave_ISR_DMA+0x304>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d011      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a73      	ldr	r2, [pc, #460]	; (80060b0 <I2C_Slave_ISR_DMA+0x308>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00b      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a71      	ldr	r2, [pc, #452]	; (80060b4 <I2C_Slave_ISR_DMA+0x30c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d005      	beq.n	8005efe <I2C_Slave_ISR_DMA+0x156>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a6f      	ldr	r2, [pc, #444]	; (80060b8 <I2C_Slave_ISR_DMA+0x310>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d109      	bne.n	8005f12 <I2C_Slave_ISR_DMA+0x16a>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	bf0c      	ite	eq
 8005f0a:	2301      	moveq	r3, #1
 8005f0c:	2300      	movne	r3, #0
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	e008      	b.n	8005f24 <I2C_Slave_ISR_DMA+0x17c>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bf0c      	ite	eq
 8005f1e:	2301      	moveq	r3, #1
 8005f20:	2300      	movne	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d07c      	beq.n	800602e <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	0b9b      	lsrs	r3, r3, #14
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d076      	beq.n	800602e <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a4d      	ldr	r2, [pc, #308]	; (800607c <I2C_Slave_ISR_DMA+0x2d4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d059      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a4b      	ldr	r2, [pc, #300]	; (8006080 <I2C_Slave_ISR_DMA+0x2d8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d053      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a49      	ldr	r2, [pc, #292]	; (8006084 <I2C_Slave_ISR_DMA+0x2dc>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04d      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a47      	ldr	r2, [pc, #284]	; (8006088 <I2C_Slave_ISR_DMA+0x2e0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d047      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a45      	ldr	r2, [pc, #276]	; (800608c <I2C_Slave_ISR_DMA+0x2e4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d041      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a43      	ldr	r2, [pc, #268]	; (8006090 <I2C_Slave_ISR_DMA+0x2e8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d03b      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a41      	ldr	r2, [pc, #260]	; (8006094 <I2C_Slave_ISR_DMA+0x2ec>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d035      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a3f      	ldr	r2, [pc, #252]	; (8006098 <I2C_Slave_ISR_DMA+0x2f0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02f      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a3d      	ldr	r2, [pc, #244]	; (800609c <I2C_Slave_ISR_DMA+0x2f4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d029      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a3b      	ldr	r2, [pc, #236]	; (80060a0 <I2C_Slave_ISR_DMA+0x2f8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d023      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a39      	ldr	r2, [pc, #228]	; (80060a4 <I2C_Slave_ISR_DMA+0x2fc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d01d      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a37      	ldr	r2, [pc, #220]	; (80060a8 <I2C_Slave_ISR_DMA+0x300>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d017      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a35      	ldr	r2, [pc, #212]	; (80060ac <I2C_Slave_ISR_DMA+0x304>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d011      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a33      	ldr	r2, [pc, #204]	; (80060b0 <I2C_Slave_ISR_DMA+0x308>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00b      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a31      	ldr	r2, [pc, #196]	; (80060b4 <I2C_Slave_ISR_DMA+0x30c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d005      	beq.n	8006000 <I2C_Slave_ISR_DMA+0x258>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a2f      	ldr	r2, [pc, #188]	; (80060b8 <I2C_Slave_ISR_DMA+0x310>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d109      	bne.n	8006014 <I2C_Slave_ISR_DMA+0x26c>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	bf0c      	ite	eq
 800600c:	2301      	moveq	r3, #1
 800600e:	2300      	movne	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	e008      	b.n	8006026 <I2C_Slave_ISR_DMA+0x27e>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 800602a:	2301      	movs	r3, #1
 800602c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d148      	bne.n	80060c6 <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b28      	cmp	r3, #40	; 0x28
 800603e:	d108      	bne.n	8006052 <I2C_Slave_ISR_DMA+0x2aa>
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006046:	d104      	bne.n	8006052 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fd16 	bl	8006a7c <I2C_ITListenCplt>
 8006050:	e068      	b.n	8006124 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b29      	cmp	r3, #41	; 0x29
 800605c:	d12e      	bne.n	80060bc <I2C_Slave_ISR_DMA+0x314>
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006064:	d02a      	beq.n	80060bc <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2210      	movs	r2, #16
 800606c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fe51 	bl	8006d16 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 f9e0 	bl	800643a <I2C_ITSlaveSeqCplt>
 800607a:	e053      	b.n	8006124 <I2C_Slave_ISR_DMA+0x37c>
 800607c:	40020010 	.word	0x40020010
 8006080:	40020028 	.word	0x40020028
 8006084:	40020040 	.word	0x40020040
 8006088:	40020058 	.word	0x40020058
 800608c:	40020070 	.word	0x40020070
 8006090:	40020088 	.word	0x40020088
 8006094:	400200a0 	.word	0x400200a0
 8006098:	400200b8 	.word	0x400200b8
 800609c:	40020410 	.word	0x40020410
 80060a0:	40020428 	.word	0x40020428
 80060a4:	40020440 	.word	0x40020440
 80060a8:	40020458 	.word	0x40020458
 80060ac:	40020470 	.word	0x40020470
 80060b0:	40020488 	.word	0x40020488
 80060b4:	400204a0 	.word	0x400204a0
 80060b8:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2210      	movs	r2, #16
 80060c2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80060c4:	e034      	b.n	8006130 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2210      	movs	r2, #16
 80060cc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d2:	f043 0204 	orr.w	r2, r3, #4
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d003      	beq.n	80060f0 <I2C_Slave_ISR_DMA+0x348>
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060ee:	d11f      	bne.n	8006130 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80060f0:	7dfb      	ldrb	r3, [r7, #23]
 80060f2:	2b21      	cmp	r3, #33	; 0x21
 80060f4:	d002      	beq.n	80060fc <I2C_Slave_ISR_DMA+0x354>
 80060f6:	7dfb      	ldrb	r3, [r7, #23]
 80060f8:	2b29      	cmp	r3, #41	; 0x29
 80060fa:	d103      	bne.n	8006104 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2221      	movs	r2, #33	; 0x21
 8006100:	631a      	str	r2, [r3, #48]	; 0x30
 8006102:	e008      	b.n	8006116 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006104:	7dfb      	ldrb	r3, [r7, #23]
 8006106:	2b22      	cmp	r3, #34	; 0x22
 8006108:	d002      	beq.n	8006110 <I2C_Slave_ISR_DMA+0x368>
 800610a:	7dfb      	ldrb	r3, [r7, #23]
 800610c:	2b2a      	cmp	r3, #42	; 0x2a
 800610e:	d102      	bne.n	8006116 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2222      	movs	r2, #34	; 0x22
 8006114:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611a:	4619      	mov	r1, r3
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 fd03 	bl	8006b28 <I2C_ITError>
      if (treatdmanack == 1U)
 8006122:	e005      	b.n	8006130 <I2C_Slave_ISR_DMA+0x388>
 8006124:	e004      	b.n	8006130 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2210      	movs	r2, #16
 800612c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800612e:	e011      	b.n	8006154 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8006130:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006132:	e00f      	b.n	8006154 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	08db      	lsrs	r3, r3, #3
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d009      	beq.n	8006154 <I2C_Slave_ISR_DMA+0x3ac>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	08db      	lsrs	r3, r3, #3
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f8b2 	bl	80062b8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop

08006168 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	4608      	mov	r0, r1
 8006172:	4611      	mov	r1, r2
 8006174:	461a      	mov	r2, r3
 8006176:	4603      	mov	r3, r0
 8006178:	817b      	strh	r3, [r7, #10]
 800617a:	460b      	mov	r3, r1
 800617c:	813b      	strh	r3, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006182:	88fb      	ldrh	r3, [r7, #6]
 8006184:	b2da      	uxtb	r2, r3
 8006186:	8979      	ldrh	r1, [r7, #10]
 8006188:	4b20      	ldr	r3, [pc, #128]	; (800620c <I2C_RequestMemoryWrite+0xa4>)
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f001 f8a7 	bl	80072e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	69b9      	ldr	r1, [r7, #24]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 ffc0 	bl	8007120 <I2C_WaitOnTXISFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e02c      	b.n	8006204 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d105      	bne.n	80061bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061b0:	893b      	ldrh	r3, [r7, #8]
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	629a      	str	r2, [r3, #40]	; 0x28
 80061ba:	e015      	b.n	80061e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061bc:	893b      	ldrh	r3, [r7, #8]
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	69b9      	ldr	r1, [r7, #24]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 ffa6 	bl	8007120 <I2C_WaitOnTXISFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e012      	b.n	8006204 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061de:	893b      	ldrh	r3, [r7, #8]
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2200      	movs	r2, #0
 80061f0:	2180      	movs	r1, #128	; 0x80
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 ff54 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	80002000 	.word	0x80002000

08006210 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af02      	add	r7, sp, #8
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	4608      	mov	r0, r1
 800621a:	4611      	mov	r1, r2
 800621c:	461a      	mov	r2, r3
 800621e:	4603      	mov	r3, r0
 8006220:	817b      	strh	r3, [r7, #10]
 8006222:	460b      	mov	r3, r1
 8006224:	813b      	strh	r3, [r7, #8]
 8006226:	4613      	mov	r3, r2
 8006228:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	b2da      	uxtb	r2, r3
 800622e:	8979      	ldrh	r1, [r7, #10]
 8006230:	4b20      	ldr	r3, [pc, #128]	; (80062b4 <I2C_RequestMemoryRead+0xa4>)
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	2300      	movs	r3, #0
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f001 f854 	bl	80072e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	69b9      	ldr	r1, [r7, #24]
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 ff6d 	bl	8007120 <I2C_WaitOnTXISFlagUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e02c      	b.n	80062aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006250:	88fb      	ldrh	r3, [r7, #6]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d105      	bne.n	8006262 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006256:	893b      	ldrh	r3, [r7, #8]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	629a      	str	r2, [r3, #40]	; 0x28
 8006260:	e015      	b.n	800628e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006262:	893b      	ldrh	r3, [r7, #8]
 8006264:	0a1b      	lsrs	r3, r3, #8
 8006266:	b29b      	uxth	r3, r3
 8006268:	b2da      	uxtb	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	69b9      	ldr	r1, [r7, #24]
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 ff53 	bl	8007120 <I2C_WaitOnTXISFlagUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e012      	b.n	80062aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006284:	893b      	ldrh	r3, [r7, #8]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2200      	movs	r2, #0
 8006296:	2140      	movs	r1, #64	; 0x40
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 ff01 	bl	80070a0 <I2C_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	80002000 	.word	0x80002000

080062b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062ce:	2b28      	cmp	r3, #40	; 0x28
 80062d0:	d16a      	bne.n	80063a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	0c1b      	lsrs	r3, r3, #16
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	0c1b      	lsrs	r3, r3, #16
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80062f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800630c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d138      	bne.n	8006388 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006316:	897b      	ldrh	r3, [r7, #10]
 8006318:	09db      	lsrs	r3, r3, #7
 800631a:	b29a      	uxth	r2, r3
 800631c:	89bb      	ldrh	r3, [r7, #12]
 800631e:	4053      	eors	r3, r2
 8006320:	b29b      	uxth	r3, r3
 8006322:	f003 0306 	and.w	r3, r3, #6
 8006326:	2b00      	cmp	r3, #0
 8006328:	d11c      	bne.n	8006364 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800632a:	897b      	ldrh	r3, [r7, #10]
 800632c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800633c:	2b02      	cmp	r3, #2
 800633e:	d13b      	bne.n	80063b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2208      	movs	r2, #8
 800634c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006356:	89ba      	ldrh	r2, [r7, #12]
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff faf7 	bl	8005950 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006362:	e029      	b.n	80063b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006364:	893b      	ldrh	r3, [r7, #8]
 8006366:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 f84b 	bl	8007408 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800637a:	89ba      	ldrh	r2, [r7, #12]
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff fae5 	bl	8005950 <HAL_I2C_AddrCallback>
}
 8006386:	e017      	b.n	80063b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006388:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f001 f83b 	bl	8007408 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800639a:	89ba      	ldrh	r2, [r7, #12]
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fad5 	bl	8005950 <HAL_I2C_AddrCallback>
}
 80063a6:	e007      	b.n	80063b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2208      	movs	r2, #8
 80063ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80063b8:	bf00      	nop
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b21      	cmp	r3, #33	; 0x21
 80063da:	d115      	bne.n	8006408 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2211      	movs	r2, #17
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80063f0:	2101      	movs	r1, #1
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 f808 	bl	8007408 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f7ff fa7d 	bl	8005900 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006406:	e014      	b.n	8006432 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2212      	movs	r2, #18
 8006414:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800641c:	2102      	movs	r1, #2
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fff2 	bl	8007408 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7ff fa71 	bl	8005914 <HAL_I2C_MasterRxCpltCallback>
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	0b9b      	lsrs	r3, r3, #14
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	e00d      	b.n	800648c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	0bdb      	lsrs	r3, r3, #15
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d007      	beq.n	800648c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800648a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b29      	cmp	r3, #41	; 0x29
 8006496:	d112      	bne.n	80064be <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2228      	movs	r2, #40	; 0x28
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2221      	movs	r2, #33	; 0x21
 80064a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064a6:	2101      	movs	r1, #1
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 ffad 	bl	8007408 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff fa36 	bl	8005928 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80064bc:	e017      	b.n	80064ee <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b2a      	cmp	r3, #42	; 0x2a
 80064c8:	d111      	bne.n	80064ee <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2228      	movs	r2, #40	; 0x28
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2222      	movs	r2, #34	; 0x22
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80064d8:	2102      	movs	r1, #2
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 ff94 	bl	8007408 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff fa27 	bl	800593c <HAL_I2C_SlaveRxCpltCallback>
}
 80064ee:	bf00      	nop
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2220      	movs	r2, #32
 800650c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b21      	cmp	r3, #33	; 0x21
 8006518:	d107      	bne.n	800652a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800651a:	2101      	movs	r1, #1
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 ff73 	bl	8007408 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2211      	movs	r2, #17
 8006526:	631a      	str	r2, [r3, #48]	; 0x30
 8006528:	e00c      	b.n	8006544 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b22      	cmp	r3, #34	; 0x22
 8006534:	d106      	bne.n	8006544 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006536:	2102      	movs	r1, #2
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 ff65 	bl	8007408 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2212      	movs	r2, #18
 8006542:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6859      	ldr	r1, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4b4d      	ldr	r3, [pc, #308]	; (8006684 <I2C_ITMasterCplt+0x18c>)
 8006550:	400b      	ands	r3, r1
 8006552:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a4a      	ldr	r2, [pc, #296]	; (8006688 <I2C_ITMasterCplt+0x190>)
 800655e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	091b      	lsrs	r3, r3, #4
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2210      	movs	r2, #16
 8006572:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006578:	f043 0204 	orr.w	r2, r3, #4
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b60      	cmp	r3, #96	; 0x60
 800658a:	d10b      	bne.n	80065a4 <I2C_ITMasterCplt+0xac>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	089b      	lsrs	r3, r3, #2
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d005      	beq.n	80065a4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80065a2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fbb6 	bl	8006d16 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ae:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b60      	cmp	r3, #96	; 0x60
 80065ba:	d002      	beq.n	80065c2 <I2C_ITMasterCplt+0xca>
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d006      	beq.n	80065d0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 faad 	bl	8006b28 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80065ce:	e054      	b.n	800667a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b21      	cmp	r3, #33	; 0x21
 80065da:	d124      	bne.n	8006626 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	d10b      	bne.n	800660e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff f9ba 	bl	8005980 <HAL_I2C_MemTxCpltCallback>
}
 800660c:	e035      	b.n	800667a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7ff f96e 	bl	8005900 <HAL_I2C_MasterTxCpltCallback>
}
 8006624:	e029      	b.n	800667a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b22      	cmp	r3, #34	; 0x22
 8006630:	d123      	bne.n	800667a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d10b      	bne.n	8006664 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7fb fa19 	bl	8001a94 <HAL_I2C_MemRxCpltCallback>
}
 8006662:	e00a      	b.n	800667a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff f94d 	bl	8005914 <HAL_I2C_MasterRxCpltCallback>
}
 800667a:	bf00      	nop
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	fe00e800 	.word	0xfe00e800
 8006688:	ffff0000 	.word	0xffff0000

0800668c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2220      	movs	r2, #32
 80066b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b21      	cmp	r3, #33	; 0x21
 80066b6:	d002      	beq.n	80066be <I2C_ITSlaveCplt+0x32>
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	2b29      	cmp	r3, #41	; 0x29
 80066bc:	d108      	bne.n	80066d0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80066be:	f248 0101 	movw	r1, #32769	; 0x8001
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fea0 	bl	8007408 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2221      	movs	r2, #33	; 0x21
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
 80066ce:	e00d      	b.n	80066ec <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b22      	cmp	r3, #34	; 0x22
 80066d4:	d002      	beq.n	80066dc <I2C_ITSlaveCplt+0x50>
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
 80066d8:	2b2a      	cmp	r3, #42	; 0x2a
 80066da:	d107      	bne.n	80066ec <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80066dc:	f248 0102 	movw	r1, #32770	; 0x8002
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fe91 	bl	8007408 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2222      	movs	r2, #34	; 0x22
 80066ea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066fa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6859      	ldr	r1, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	4b80      	ldr	r3, [pc, #512]	; (8006908 <I2C_ITSlaveCplt+0x27c>)
 8006708:	400b      	ands	r3, r1
 800670a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fb02 	bl	8006d16 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	0b9b      	lsrs	r3, r3, #14
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d07a      	beq.n	8006814 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800672c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 8111 	beq.w	800695a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a73      	ldr	r2, [pc, #460]	; (800690c <I2C_ITSlaveCplt+0x280>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d059      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a71      	ldr	r2, [pc, #452]	; (8006910 <I2C_ITSlaveCplt+0x284>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d053      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a6f      	ldr	r2, [pc, #444]	; (8006914 <I2C_ITSlaveCplt+0x288>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d04d      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a6d      	ldr	r2, [pc, #436]	; (8006918 <I2C_ITSlaveCplt+0x28c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d047      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a6b      	ldr	r2, [pc, #428]	; (800691c <I2C_ITSlaveCplt+0x290>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d041      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a69      	ldr	r2, [pc, #420]	; (8006920 <I2C_ITSlaveCplt+0x294>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d03b      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a67      	ldr	r2, [pc, #412]	; (8006924 <I2C_ITSlaveCplt+0x298>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d035      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a65      	ldr	r2, [pc, #404]	; (8006928 <I2C_ITSlaveCplt+0x29c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d02f      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a63      	ldr	r2, [pc, #396]	; (800692c <I2C_ITSlaveCplt+0x2a0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d029      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a61      	ldr	r2, [pc, #388]	; (8006930 <I2C_ITSlaveCplt+0x2a4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d023      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a5f      	ldr	r2, [pc, #380]	; (8006934 <I2C_ITSlaveCplt+0x2a8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d01d      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a5d      	ldr	r2, [pc, #372]	; (8006938 <I2C_ITSlaveCplt+0x2ac>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d017      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a5b      	ldr	r2, [pc, #364]	; (800693c <I2C_ITSlaveCplt+0x2b0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d011      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a59      	ldr	r2, [pc, #356]	; (8006940 <I2C_ITSlaveCplt+0x2b4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00b      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a57      	ldr	r2, [pc, #348]	; (8006944 <I2C_ITSlaveCplt+0x2b8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d005      	beq.n	80067f8 <I2C_ITSlaveCplt+0x16c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a55      	ldr	r2, [pc, #340]	; (8006948 <I2C_ITSlaveCplt+0x2bc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d105      	bne.n	8006804 <I2C_ITSlaveCplt+0x178>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	b29b      	uxth	r3, r3
 8006802:	e004      	b.n	800680e <I2C_ITSlaveCplt+0x182>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	b29b      	uxth	r3, r3
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	8553      	strh	r3, [r2, #42]	; 0x2a
 8006812:	e0a2      	b.n	800695a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	0bdb      	lsrs	r3, r3, #15
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 809c 	beq.w	800695a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006830:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 808f 	beq.w	800695a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a32      	ldr	r2, [pc, #200]	; (800690c <I2C_ITSlaveCplt+0x280>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d059      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a30      	ldr	r2, [pc, #192]	; (8006910 <I2C_ITSlaveCplt+0x284>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d053      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a2e      	ldr	r2, [pc, #184]	; (8006914 <I2C_ITSlaveCplt+0x288>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d04d      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2c      	ldr	r2, [pc, #176]	; (8006918 <I2C_ITSlaveCplt+0x28c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d047      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a2a      	ldr	r2, [pc, #168]	; (800691c <I2C_ITSlaveCplt+0x290>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d041      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a28      	ldr	r2, [pc, #160]	; (8006920 <I2C_ITSlaveCplt+0x294>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d03b      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a26      	ldr	r2, [pc, #152]	; (8006924 <I2C_ITSlaveCplt+0x298>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d035      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a24      	ldr	r2, [pc, #144]	; (8006928 <I2C_ITSlaveCplt+0x29c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d02f      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a22      	ldr	r2, [pc, #136]	; (800692c <I2C_ITSlaveCplt+0x2a0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d029      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a20      	ldr	r2, [pc, #128]	; (8006930 <I2C_ITSlaveCplt+0x2a4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d023      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1e      	ldr	r2, [pc, #120]	; (8006934 <I2C_ITSlaveCplt+0x2a8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d01d      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1c      	ldr	r2, [pc, #112]	; (8006938 <I2C_ITSlaveCplt+0x2ac>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d017      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1a      	ldr	r2, [pc, #104]	; (800693c <I2C_ITSlaveCplt+0x2b0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d011      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a18      	ldr	r2, [pc, #96]	; (8006940 <I2C_ITSlaveCplt+0x2b4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00b      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a16      	ldr	r2, [pc, #88]	; (8006944 <I2C_ITSlaveCplt+0x2b8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d005      	beq.n	80068fc <I2C_ITSlaveCplt+0x270>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a14      	ldr	r2, [pc, #80]	; (8006948 <I2C_ITSlaveCplt+0x2bc>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d127      	bne.n	800694c <I2C_ITSlaveCplt+0x2c0>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	b29b      	uxth	r3, r3
 8006906:	e026      	b.n	8006956 <I2C_ITSlaveCplt+0x2ca>
 8006908:	fe00e800 	.word	0xfe00e800
 800690c:	40020010 	.word	0x40020010
 8006910:	40020028 	.word	0x40020028
 8006914:	40020040 	.word	0x40020040
 8006918:	40020058 	.word	0x40020058
 800691c:	40020070 	.word	0x40020070
 8006920:	40020088 	.word	0x40020088
 8006924:	400200a0 	.word	0x400200a0
 8006928:	400200b8 	.word	0x400200b8
 800692c:	40020410 	.word	0x40020410
 8006930:	40020428 	.word	0x40020428
 8006934:	40020440 	.word	0x40020440
 8006938:	40020458 	.word	0x40020458
 800693c:	40020470 	.word	0x40020470
 8006940:	40020488 	.word	0x40020488
 8006944:	400204a0 	.word	0x400204a0
 8006948:	400204b8 	.word	0x400204b8
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	b29b      	uxth	r3, r3
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	089b      	lsrs	r3, r3, #2
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d020      	beq.n	80069a8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f023 0304 	bic.w	r3, r3, #4
 800696c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b6:	f043 0204 	orr.w	r2, r3, #4
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d010      	beq.n	80069f6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f8a4 	bl	8006b28 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b28      	cmp	r3, #40	; 0x28
 80069ea:	d141      	bne.n	8006a70 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80069ec:	6979      	ldr	r1, [r7, #20]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f844 	bl	8006a7c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069f4:	e03c      	b.n	8006a70 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80069fe:	d014      	beq.n	8006a2a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7ff fd1a 	bl	800643a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a1b      	ldr	r2, [pc, #108]	; (8006a78 <I2C_ITSlaveCplt+0x3ec>)
 8006a0a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fe ffa2 	bl	800596c <HAL_I2C_ListenCpltCallback>
}
 8006a28:	e022      	b.n	8006a70 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b22      	cmp	r3, #34	; 0x22
 8006a34:	d10e      	bne.n	8006a54 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fe ff75 	bl	800593c <HAL_I2C_SlaveRxCpltCallback>
}
 8006a52:	e00d      	b.n	8006a70 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7fe ff5c 	bl	8005928 <HAL_I2C_SlaveTxCpltCallback>
}
 8006a70:	bf00      	nop
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	ffff0000 	.word	0xffff0000

08006a7c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a26      	ldr	r2, [pc, #152]	; (8006b24 <I2C_ITListenCplt+0xa8>)
 8006a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	089b      	lsrs	r3, r3, #2
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d022      	beq.n	8006afa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d012      	beq.n	8006afa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af2:	f043 0204 	orr.w	r2, r3, #4
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006afa:	f248 0103 	movw	r1, #32771	; 0x8003
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fc82 	bl	8007408 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2210      	movs	r2, #16
 8006b0a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f7fe ff29 	bl	800596c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006b1a:	bf00      	nop
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	ffff0000 	.word	0xffff0000

08006b28 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a5d      	ldr	r2, [pc, #372]	; (8006cbc <I2C_ITError+0x194>)
 8006b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	431a      	orrs	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b28      	cmp	r3, #40	; 0x28
 8006b5e:	d005      	beq.n	8006b6c <I2C_ITError+0x44>
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	2b29      	cmp	r3, #41	; 0x29
 8006b64:	d002      	beq.n	8006b6c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	2b2a      	cmp	r3, #42	; 0x2a
 8006b6a:	d10b      	bne.n	8006b84 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006b6c:	2103      	movs	r1, #3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fc4a 	bl	8007408 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2228      	movs	r2, #40	; 0x28
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a50      	ldr	r2, [pc, #320]	; (8006cc0 <I2C_ITError+0x198>)
 8006b80:	635a      	str	r2, [r3, #52]	; 0x34
 8006b82:	e011      	b.n	8006ba8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006b84:	f248 0103 	movw	r1, #32771	; 0x8003
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fc3d 	bl	8007408 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b60      	cmp	r3, #96	; 0x60
 8006b98:	d003      	beq.n	8006ba2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d039      	beq.n	8006c2a <I2C_ITError+0x102>
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b11      	cmp	r3, #17
 8006bba:	d002      	beq.n	8006bc2 <I2C_ITError+0x9a>
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b21      	cmp	r3, #33	; 0x21
 8006bc0:	d133      	bne.n	8006c2a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd0:	d107      	bne.n	8006be2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006be0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fd fcee 	bl	80045c8 <HAL_DMA_GetState>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d017      	beq.n	8006c22 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	4a33      	ldr	r2, [pc, #204]	; (8006cc4 <I2C_ITError+0x19c>)
 8006bf8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fc fb70 	bl	80032ec <HAL_DMA_Abort_IT>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d04d      	beq.n	8006cae <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c20:	e045      	b.n	8006cae <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f850 	bl	8006cc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c28:	e041      	b.n	8006cae <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d039      	beq.n	8006ca6 <I2C_ITError+0x17e>
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b12      	cmp	r3, #18
 8006c36:	d002      	beq.n	8006c3e <I2C_ITError+0x116>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b22      	cmp	r3, #34	; 0x22
 8006c3c:	d133      	bne.n	8006ca6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c4c:	d107      	bne.n	8006c5e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c5c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fd fcb0 	bl	80045c8 <HAL_DMA_GetState>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d017      	beq.n	8006c9e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c72:	4a14      	ldr	r2, [pc, #80]	; (8006cc4 <I2C_ITError+0x19c>)
 8006c74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fc fb32 	bl	80032ec <HAL_DMA_Abort_IT>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d011      	beq.n	8006cb2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c9c:	e009      	b.n	8006cb2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f812 	bl	8006cc8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ca4:	e005      	b.n	8006cb2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f80e 	bl	8006cc8 <I2C_TreatErrorCallback>
  }
}
 8006cac:	e002      	b.n	8006cb4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cae:	bf00      	nop
 8006cb0:	e000      	b.n	8006cb4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cb2:	bf00      	nop
}
 8006cb4:	bf00      	nop
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	ffff0000 	.word	0xffff0000
 8006cc0:	080059bd 	.word	0x080059bd
 8006cc4:	08007065 	.word	0x08007065

08006cc8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b60      	cmp	r3, #96	; 0x60
 8006cda:	d10e      	bne.n	8006cfa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fe fe58 	bl	80059a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006cf8:	e009      	b.n	8006d0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7fe fe43 	bl	8005994 <HAL_I2C_ErrorCallback>
}
 8006d0e:	bf00      	nop
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d103      	bne.n	8006d34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2200      	movs	r2, #0
 8006d32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d007      	beq.n	8006d52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	699a      	ldr	r2, [r3, #24]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 0201 	orr.w	r2, r2, #1
 8006d50:	619a      	str	r2, [r3, #24]
  }
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d7a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d104      	bne.n	8006d90 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006d86:	2120      	movs	r1, #32
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fad9 	bl	8007340 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006d8e:	e02d      	b.n	8006dec <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006d98:	441a      	add	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	2bff      	cmp	r3, #255	; 0xff
 8006da6:	d903      	bls.n	8006db0 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	22ff      	movs	r2, #255	; 0xff
 8006dac:	851a      	strh	r2, [r3, #40]	; 0x28
 8006dae:	e004      	b.n	8006dba <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3324      	adds	r3, #36	; 0x24
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	461a      	mov	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd0:	f7fb fd04 	bl	80027dc <HAL_DMA_Start_IT>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d004      	beq.n	8006de4 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006dda:	2110      	movs	r1, #16
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff fea3 	bl	8006b28 <I2C_ITError>
}
 8006de2:	e003      	b.n	8006dec <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006de4:	2140      	movs	r1, #64	; 0x40
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 faaa 	bl	8007340 <I2C_Enable_IRQ>
}
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d076      	beq.n	8006efc <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a83      	ldr	r2, [pc, #524]	; (8007024 <I2C_DMAError+0x230>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d059      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a81      	ldr	r2, [pc, #516]	; (8007028 <I2C_DMAError+0x234>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d053      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a7f      	ldr	r2, [pc, #508]	; (800702c <I2C_DMAError+0x238>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d04d      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a7d      	ldr	r2, [pc, #500]	; (8007030 <I2C_DMAError+0x23c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d047      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a7b      	ldr	r2, [pc, #492]	; (8007034 <I2C_DMAError+0x240>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d041      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a79      	ldr	r2, [pc, #484]	; (8007038 <I2C_DMAError+0x244>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d03b      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a77      	ldr	r2, [pc, #476]	; (800703c <I2C_DMAError+0x248>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d035      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a75      	ldr	r2, [pc, #468]	; (8007040 <I2C_DMAError+0x24c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d02f      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a73      	ldr	r2, [pc, #460]	; (8007044 <I2C_DMAError+0x250>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d029      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a71      	ldr	r2, [pc, #452]	; (8007048 <I2C_DMAError+0x254>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d023      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a6f      	ldr	r2, [pc, #444]	; (800704c <I2C_DMAError+0x258>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d01d      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a6d      	ldr	r2, [pc, #436]	; (8007050 <I2C_DMAError+0x25c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d017      	beq.n	8006ece <I2C_DMAError+0xda>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a6b      	ldr	r2, [pc, #428]	; (8007054 <I2C_DMAError+0x260>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d011      	beq.n	8006ece <I2C_DMAError+0xda>
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a69      	ldr	r2, [pc, #420]	; (8007058 <I2C_DMAError+0x264>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00b      	beq.n	8006ece <I2C_DMAError+0xda>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a67      	ldr	r2, [pc, #412]	; (800705c <I2C_DMAError+0x268>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d005      	beq.n	8006ece <I2C_DMAError+0xda>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a65      	ldr	r2, [pc, #404]	; (8007060 <I2C_DMAError+0x26c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d109      	bne.n	8006ee2 <I2C_DMAError+0xee>
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	bf0c      	ite	eq
 8006eda:	2301      	moveq	r3, #1
 8006edc:	2300      	movne	r3, #0
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	e008      	b.n	8006ef4 <I2C_DMAError+0x100>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	bf0c      	ite	eq
 8006eee:	2301      	moveq	r3, #1
 8006ef0:	2300      	movne	r3, #0
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d076      	beq.n	8006ff2 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a46      	ldr	r2, [pc, #280]	; (8007024 <I2C_DMAError+0x230>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d059      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a44      	ldr	r2, [pc, #272]	; (8007028 <I2C_DMAError+0x234>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d053      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a42      	ldr	r2, [pc, #264]	; (800702c <I2C_DMAError+0x238>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d04d      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a40      	ldr	r2, [pc, #256]	; (8007030 <I2C_DMAError+0x23c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d047      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a3e      	ldr	r2, [pc, #248]	; (8007034 <I2C_DMAError+0x240>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d041      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a3c      	ldr	r2, [pc, #240]	; (8007038 <I2C_DMAError+0x244>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d03b      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a3a      	ldr	r2, [pc, #232]	; (800703c <I2C_DMAError+0x248>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d035      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a38      	ldr	r2, [pc, #224]	; (8007040 <I2C_DMAError+0x24c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d02f      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a36      	ldr	r2, [pc, #216]	; (8007044 <I2C_DMAError+0x250>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d029      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a34      	ldr	r2, [pc, #208]	; (8007048 <I2C_DMAError+0x254>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d023      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a32      	ldr	r2, [pc, #200]	; (800704c <I2C_DMAError+0x258>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d01d      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a30      	ldr	r2, [pc, #192]	; (8007050 <I2C_DMAError+0x25c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d017      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a2e      	ldr	r2, [pc, #184]	; (8007054 <I2C_DMAError+0x260>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d011      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2c      	ldr	r2, [pc, #176]	; (8007058 <I2C_DMAError+0x264>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00b      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a2a      	ldr	r2, [pc, #168]	; (800705c <I2C_DMAError+0x268>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d005      	beq.n	8006fc4 <I2C_DMAError+0x1d0>
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a28      	ldr	r2, [pc, #160]	; (8007060 <I2C_DMAError+0x26c>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d109      	bne.n	8006fd8 <I2C_DMAError+0x1e4>
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	bf0c      	ite	eq
 8006fd0:	2301      	moveq	r3, #1
 8006fd2:	2300      	movne	r3, #0
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	e008      	b.n	8006fea <I2C_DMAError+0x1f6>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7fd faf6 	bl	80045e4 <HAL_DMA_GetError>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d00e      	beq.n	800701c <I2C_DMAError+0x228>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00b      	beq.n	800701c <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685a      	ldr	r2, [r3, #4]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007012:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007014:	2110      	movs	r1, #16
 8007016:	68b8      	ldr	r0, [r7, #8]
 8007018:	f7ff fd86 	bl	8006b28 <I2C_ITError>
  }
}
 800701c:	bf00      	nop
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	40020010 	.word	0x40020010
 8007028:	40020028 	.word	0x40020028
 800702c:	40020040 	.word	0x40020040
 8007030:	40020058 	.word	0x40020058
 8007034:	40020070 	.word	0x40020070
 8007038:	40020088 	.word	0x40020088
 800703c:	400200a0 	.word	0x400200a0
 8007040:	400200b8 	.word	0x400200b8
 8007044:	40020410 	.word	0x40020410
 8007048:	40020428 	.word	0x40020428
 800704c:	40020440 	.word	0x40020440
 8007050:	40020458 	.word	0x40020458
 8007054:	40020470 	.word	0x40020470
 8007058:	40020488 	.word	0x40020488
 800705c:	400204a0 	.word	0x400204a0
 8007060:	400204b8 	.word	0x400204b8

08007064 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	2200      	movs	r2, #0
 8007080:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708e:	2200      	movs	r2, #0
 8007090:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff fe18 	bl	8006cc8 <I2C_TreatErrorCallback>
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	4613      	mov	r3, r2
 80070ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070b0:	e022      	b.n	80070f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b8:	d01e      	beq.n	80070f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ba:	f7fa fee7 	bl	8001e8c <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d302      	bcc.n	80070d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d113      	bne.n	80070f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d4:	f043 0220 	orr.w	r2, r3, #32
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e00f      	b.n	8007118 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699a      	ldr	r2, [r3, #24]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	4013      	ands	r3, r2
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	429a      	cmp	r2, r3
 8007106:	bf0c      	ite	eq
 8007108:	2301      	moveq	r3, #1
 800710a:	2300      	movne	r3, #0
 800710c:	b2db      	uxtb	r3, r3
 800710e:	461a      	mov	r2, r3
 8007110:	79fb      	ldrb	r3, [r7, #7]
 8007112:	429a      	cmp	r2, r3
 8007114:	d0cd      	beq.n	80070b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800712c:	e02c      	b.n	8007188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 f870 	bl	8007218 <I2C_IsAcknowledgeFailed>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e02a      	b.n	8007198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d01e      	beq.n	8007188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800714a:	f7fa fe9f 	bl	8001e8c <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	429a      	cmp	r2, r3
 8007158:	d302      	bcc.n	8007160 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d113      	bne.n	8007188 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007164:	f043 0220 	orr.w	r2, r3, #32
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e007      	b.n	8007198 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b02      	cmp	r3, #2
 8007194:	d1cb      	bne.n	800712e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071ac:	e028      	b.n	8007200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	68b9      	ldr	r1, [r7, #8]
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 f830 	bl	8007218 <I2C_IsAcknowledgeFailed>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e026      	b.n	8007210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c2:	f7fa fe63 	bl	8001e8c <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d113      	bne.n	8007200 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071dc:	f043 0220 	orr.w	r2, r3, #32
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e007      	b.n	8007210 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b20      	cmp	r3, #32
 800720c:	d1cf      	bne.n	80071ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b10      	cmp	r3, #16
 8007230:	d151      	bne.n	80072d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007232:	e022      	b.n	800727a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d01e      	beq.n	800727a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800723c:	f7fa fe26 	bl	8001e8c <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	429a      	cmp	r2, r3
 800724a:	d302      	bcc.n	8007252 <I2C_IsAcknowledgeFailed+0x3a>
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d113      	bne.n	800727a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007256:	f043 0220 	orr.w	r2, r3, #32
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e02e      	b.n	80072d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f003 0320 	and.w	r3, r3, #32
 8007284:	2b20      	cmp	r3, #32
 8007286:	d1d5      	bne.n	8007234 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2210      	movs	r2, #16
 800728e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2220      	movs	r2, #32
 8007296:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff fd3c 	bl	8006d16 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6859      	ldr	r1, [r3, #4]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4b0d      	ldr	r3, [pc, #52]	; (80072e0 <I2C_IsAcknowledgeFailed+0xc8>)
 80072aa:	400b      	ands	r3, r1
 80072ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b2:	f043 0204 	orr.w	r2, r3, #4
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	fe00e800 	.word	0xfe00e800

080072e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	817b      	strh	r3, [r7, #10]
 80072f2:	4613      	mov	r3, r2
 80072f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	0d5b      	lsrs	r3, r3, #21
 8007300:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007304:	4b0d      	ldr	r3, [pc, #52]	; (800733c <I2C_TransferConfig+0x58>)
 8007306:	430b      	orrs	r3, r1
 8007308:	43db      	mvns	r3, r3
 800730a:	ea02 0103 	and.w	r1, r2, r3
 800730e:	897b      	ldrh	r3, [r7, #10]
 8007310:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007314:	7a7b      	ldrb	r3, [r7, #9]
 8007316:	041b      	lsls	r3, r3, #16
 8007318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	431a      	orrs	r2, r3
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	431a      	orrs	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800732e:	bf00      	nop
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	03ff63ff 	.word	0x03ff63ff

08007340 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	460b      	mov	r3, r1
 800734a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007354:	4a2a      	ldr	r2, [pc, #168]	; (8007400 <I2C_Enable_IRQ+0xc0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800735e:	4a29      	ldr	r2, [pc, #164]	; (8007404 <I2C_Enable_IRQ+0xc4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d11d      	bne.n	80073a0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007364:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007368:	2b00      	cmp	r3, #0
 800736a:	da03      	bge.n	8007374 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007372:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007374:	887b      	ldrh	r3, [r7, #2]
 8007376:	2b10      	cmp	r3, #16
 8007378:	d103      	bne.n	8007382 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007380:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007382:	887b      	ldrh	r3, [r7, #2]
 8007384:	2b20      	cmp	r3, #32
 8007386:	d103      	bne.n	8007390 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800738e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007390:	887b      	ldrh	r3, [r7, #2]
 8007392:	2b40      	cmp	r3, #64	; 0x40
 8007394:	d125      	bne.n	80073e2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800739c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800739e:	e020      	b.n	80073e2 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80073a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	da03      	bge.n	80073b0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80073ae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80073b0:	887b      	ldrh	r3, [r7, #2]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d003      	beq.n	80073c2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80073c0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80073c2:	887b      	ldrh	r3, [r7, #2]
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80073d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80073d4:	887b      	ldrh	r3, [r7, #2]
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	d103      	bne.n	80073e2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f043 0320 	orr.w	r3, r3, #32
 80073e0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6819      	ldr	r1, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	601a      	str	r2, [r3, #0]
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	08005bc3 	.word	0x08005bc3
 8007404:	08005da9 	.word	0x08005da9

08007408 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007418:	887b      	ldrh	r3, [r7, #2]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00f      	beq.n	8007442 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007428:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007430:	b2db      	uxtb	r3, r3
 8007432:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007436:	2b28      	cmp	r3, #40	; 0x28
 8007438:	d003      	beq.n	8007442 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007440:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007442:	887b      	ldrh	r3, [r7, #2]
 8007444:	f003 0302 	and.w	r3, r3, #2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00f      	beq.n	800746c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007452:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800745a:	b2db      	uxtb	r3, r3
 800745c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007460:	2b28      	cmp	r3, #40	; 0x28
 8007462:	d003      	beq.n	800746c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800746a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800746c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007470:	2b00      	cmp	r3, #0
 8007472:	da03      	bge.n	800747c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800747a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800747c:	887b      	ldrh	r3, [r7, #2]
 800747e:	2b10      	cmp	r3, #16
 8007480:	d103      	bne.n	800748a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007488:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800748a:	887b      	ldrh	r3, [r7, #2]
 800748c:	2b20      	cmp	r3, #32
 800748e:	d103      	bne.n	8007498 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f043 0320 	orr.w	r3, r3, #32
 8007496:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007498:	887b      	ldrh	r3, [r7, #2]
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	d103      	bne.n	80074a6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6819      	ldr	r1, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	43da      	mvns	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	400a      	ands	r2, r1
 80074b6:	601a      	str	r2, [r3, #0]
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d138      	bne.n	800754c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d101      	bne.n	80074e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80074e4:	2302      	movs	r3, #2
 80074e6:	e032      	b.n	800754e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2224      	movs	r2, #36	; 0x24
 80074f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0201 	bic.w	r2, r2, #1
 8007506:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007516:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6819      	ldr	r1, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0201 	orr.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	e000      	b.n	800754e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800754c:	2302      	movs	r3, #2
  }
}
 800754e:	4618      	mov	r0, r3
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b20      	cmp	r3, #32
 800756e:	d139      	bne.n	80075e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007576:	2b01      	cmp	r3, #1
 8007578:	d101      	bne.n	800757e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800757a:	2302      	movs	r3, #2
 800757c:	e033      	b.n	80075e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2224      	movs	r2, #36	; 0x24
 800758a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0201 	bic.w	r2, r2, #1
 800759c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80075ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	021b      	lsls	r3, r3, #8
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0201 	orr.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e000      	b.n	80075e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80075e4:	2302      	movs	r3, #2
  }
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80075fc:	4b19      	ldr	r3, [pc, #100]	; (8007664 <HAL_PWREx_ConfigSupply+0x70>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b04      	cmp	r3, #4
 8007606:	d00a      	beq.n	800761e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007608:	4b16      	ldr	r3, [pc, #88]	; (8007664 <HAL_PWREx_ConfigSupply+0x70>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	429a      	cmp	r2, r3
 8007614:	d001      	beq.n	800761a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e01f      	b.n	800765a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	e01d      	b.n	800765a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800761e:	4b11      	ldr	r3, [pc, #68]	; (8007664 <HAL_PWREx_ConfigSupply+0x70>)
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f023 0207 	bic.w	r2, r3, #7
 8007626:	490f      	ldr	r1, [pc, #60]	; (8007664 <HAL_PWREx_ConfigSupply+0x70>)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4313      	orrs	r3, r2
 800762c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800762e:	f7fa fc2d 	bl	8001e8c <HAL_GetTick>
 8007632:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007634:	e009      	b.n	800764a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007636:	f7fa fc29 	bl	8001e8c <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007644:	d901      	bls.n	800764a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e007      	b.n	800765a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800764a:	4b06      	ldr	r3, [pc, #24]	; (8007664 <HAL_PWREx_ConfigSupply+0x70>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007656:	d1ee      	bne.n	8007636 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	58024800 	.word	0x58024800

08007668 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af02      	add	r7, sp, #8
 800766e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007670:	f7fa fc0c 	bl	8001e8c <HAL_GetTick>
 8007674:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e05f      	b.n	8007740 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d107      	bne.n	800769c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7f9 ff61 	bl	8001554 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007692:	f241 3188 	movw	r1, #5000	; 0x1388
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f85a 	bl	8007750 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	021a      	lsls	r2, r3, #8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	2120      	movs	r1, #32
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f852 	bl	800776c <QSPI_WaitFlagStateUntilTimeout>
 80076c8:	4603      	mov	r3, r0
 80076ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80076cc:	7afb      	ldrb	r3, [r7, #11]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d135      	bne.n	800773e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <HAL_QSPI_Init+0xe0>)
 80076da:	4013      	ands	r3, r2
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	6852      	ldr	r2, [r2, #4]
 80076e0:	0611      	lsls	r1, r2, #24
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	68d2      	ldr	r2, [r2, #12]
 80076e6:	4311      	orrs	r1, r2
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	69d2      	ldr	r2, [r2, #28]
 80076ec:	4311      	orrs	r1, r2
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6a12      	ldr	r2, [r2, #32]
 80076f2:	4311      	orrs	r1, r2
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	6812      	ldr	r2, [r2, #0]
 80076f8:	430b      	orrs	r3, r1
 80076fa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	4b12      	ldr	r3, [pc, #72]	; (800774c <HAL_QSPI_Init+0xe4>)
 8007704:	4013      	ands	r3, r2
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6912      	ldr	r2, [r2, #16]
 800770a:	0411      	lsls	r1, r2, #16
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	6952      	ldr	r2, [r2, #20]
 8007710:	4311      	orrs	r1, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	6992      	ldr	r2, [r2, #24]
 8007716:	4311      	orrs	r1, r2
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6812      	ldr	r2, [r2, #0]
 800771c:	430b      	orrs	r3, r1
 800771e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0201 	orr.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800773e:	7afb      	ldrb	r3, [r7, #11]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	00ffff2f 	.word	0x00ffff2f
 800774c:	ffe0f8fe 	.word	0xffe0f8fe

08007750 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	4613      	mov	r3, r2
 800777a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800777c:	e01a      	b.n	80077b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d016      	beq.n	80077b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007786:	f7fa fb81 	bl	8001e8c <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	69ba      	ldr	r2, [r7, #24]
 8007792:	429a      	cmp	r2, r3
 8007794:	d302      	bcc.n	800779c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2204      	movs	r2, #4
 80077a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a8:	f043 0201 	orr.w	r2, r3, #1
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e00e      	b.n	80077d2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	4013      	ands	r3, r2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	bf14      	ite	ne
 80077c2:	2301      	movne	r3, #1
 80077c4:	2300      	moveq	r3, #0
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d1d6      	bne.n	800777e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08c      	sub	sp, #48	; 0x30
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e3ff      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 8087 	beq.w	800790a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077fc:	4b99      	ldr	r3, [pc, #612]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007804:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007806:	4b97      	ldr	r3, [pc, #604]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	2b10      	cmp	r3, #16
 8007810:	d007      	beq.n	8007822 <HAL_RCC_OscConfig+0x46>
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	2b18      	cmp	r3, #24
 8007816:	d110      	bne.n	800783a <HAL_RCC_OscConfig+0x5e>
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	2b02      	cmp	r3, #2
 8007820:	d10b      	bne.n	800783a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007822:	4b90      	ldr	r3, [pc, #576]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d06c      	beq.n	8007908 <HAL_RCC_OscConfig+0x12c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d168      	bne.n	8007908 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e3d9      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007842:	d106      	bne.n	8007852 <HAL_RCC_OscConfig+0x76>
 8007844:	4b87      	ldr	r3, [pc, #540]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a86      	ldr	r2, [pc, #536]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800784a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	e02e      	b.n	80078b0 <HAL_RCC_OscConfig+0xd4>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10c      	bne.n	8007874 <HAL_RCC_OscConfig+0x98>
 800785a:	4b82      	ldr	r3, [pc, #520]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a81      	ldr	r2, [pc, #516]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	4b7f      	ldr	r3, [pc, #508]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a7e      	ldr	r2, [pc, #504]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800786c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	e01d      	b.n	80078b0 <HAL_RCC_OscConfig+0xd4>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800787c:	d10c      	bne.n	8007898 <HAL_RCC_OscConfig+0xbc>
 800787e:	4b79      	ldr	r3, [pc, #484]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a78      	ldr	r2, [pc, #480]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	4b76      	ldr	r3, [pc, #472]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a75      	ldr	r2, [pc, #468]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	e00b      	b.n	80078b0 <HAL_RCC_OscConfig+0xd4>
 8007898:	4b72      	ldr	r3, [pc, #456]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a71      	ldr	r2, [pc, #452]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800789e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	4b6f      	ldr	r3, [pc, #444]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a6e      	ldr	r2, [pc, #440]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80078aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d013      	beq.n	80078e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b8:	f7fa fae8 	bl	8001e8c <HAL_GetTick>
 80078bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078c0:	f7fa fae4 	bl	8001e8c <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b64      	cmp	r3, #100	; 0x64
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e38d      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078d2:	4b64      	ldr	r3, [pc, #400]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0f0      	beq.n	80078c0 <HAL_RCC_OscConfig+0xe4>
 80078de:	e014      	b.n	800790a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e0:	f7fa fad4 	bl	8001e8c <HAL_GetTick>
 80078e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078e8:	f7fa fad0 	bl	8001e8c <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b64      	cmp	r3, #100	; 0x64
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e379      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078fa:	4b5a      	ldr	r3, [pc, #360]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f0      	bne.n	80078e8 <HAL_RCC_OscConfig+0x10c>
 8007906:	e000      	b.n	800790a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 80ae 	beq.w	8007a74 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007918:	4b52      	ldr	r3, [pc, #328]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007920:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007922:	4b50      	ldr	r3, [pc, #320]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007926:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d007      	beq.n	800793e <HAL_RCC_OscConfig+0x162>
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	2b18      	cmp	r3, #24
 8007932:	d13a      	bne.n	80079aa <HAL_RCC_OscConfig+0x1ce>
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d135      	bne.n	80079aa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800793e:	4b49      	ldr	r3, [pc, #292]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0304 	and.w	r3, r3, #4
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <HAL_RCC_OscConfig+0x17a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e34b      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007956:	f7fa fac9 	bl	8001eec <HAL_GetREVID>
 800795a:	4603      	mov	r3, r0
 800795c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007960:	4293      	cmp	r3, r2
 8007962:	d817      	bhi.n	8007994 <HAL_RCC_OscConfig+0x1b8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d108      	bne.n	800797e <HAL_RCC_OscConfig+0x1a2>
 800796c:	4b3d      	ldr	r3, [pc, #244]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007974:	4a3b      	ldr	r2, [pc, #236]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800797a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800797c:	e07a      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797e:	4b39      	ldr	r3, [pc, #228]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	031b      	lsls	r3, r3, #12
 800798c:	4935      	ldr	r1, [pc, #212]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 800798e:	4313      	orrs	r3, r2
 8007990:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007992:	e06f      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007994:	4b33      	ldr	r3, [pc, #204]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	061b      	lsls	r3, r3, #24
 80079a2:	4930      	ldr	r1, [pc, #192]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079a8:	e064      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d045      	beq.n	8007a3e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079b2:	4b2c      	ldr	r3, [pc, #176]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f023 0219 	bic.w	r2, r3, #25
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	4929      	ldr	r1, [pc, #164]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c4:	f7fa fa62 	bl	8001e8c <HAL_GetTick>
 80079c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ca:	e008      	b.n	80079de <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079cc:	f7fa fa5e 	bl	8001e8c <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e307      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079de:	4b21      	ldr	r3, [pc, #132]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f0      	beq.n	80079cc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ea:	f7fa fa7f 	bl	8001eec <HAL_GetREVID>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d817      	bhi.n	8007a28 <HAL_RCC_OscConfig+0x24c>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	2b40      	cmp	r3, #64	; 0x40
 80079fe:	d108      	bne.n	8007a12 <HAL_RCC_OscConfig+0x236>
 8007a00:	4b18      	ldr	r3, [pc, #96]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007a08:	4a16      	ldr	r2, [pc, #88]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a0e:	6053      	str	r3, [r2, #4]
 8007a10:	e030      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
 8007a12:	4b14      	ldr	r3, [pc, #80]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	031b      	lsls	r3, r3, #12
 8007a20:	4910      	ldr	r1, [pc, #64]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	604b      	str	r3, [r1, #4]
 8007a26:	e025      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
 8007a28:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	061b      	lsls	r3, r3, #24
 8007a36:	490b      	ldr	r1, [pc, #44]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	604b      	str	r3, [r1, #4]
 8007a3c:	e01a      	b.n	8007a74 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a3e:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <HAL_RCC_OscConfig+0x288>)
 8007a44:	f023 0301 	bic.w	r3, r3, #1
 8007a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4a:	f7fa fa1f 	bl	8001e8c <HAL_GetTick>
 8007a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a50:	e00a      	b.n	8007a68 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a52:	f7fa fa1b 	bl	8001e8c <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d903      	bls.n	8007a68 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e2c4      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
 8007a64:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a68:	4ba4      	ldr	r3, [pc, #656]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1ee      	bne.n	8007a52 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80a9 	beq.w	8007bd4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a82:	4b9e      	ldr	r3, [pc, #632]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a8c:	4b9b      	ldr	r3, [pc, #620]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d007      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x2cc>
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	2b18      	cmp	r3, #24
 8007a9c:	d13a      	bne.n	8007b14 <HAL_RCC_OscConfig+0x338>
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f003 0303 	and.w	r3, r3, #3
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d135      	bne.n	8007b14 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007aa8:	4b94      	ldr	r3, [pc, #592]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x2e4>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	2b80      	cmp	r3, #128	; 0x80
 8007aba:	d001      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e296      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ac0:	f7fa fa14 	bl	8001eec <HAL_GetREVID>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d817      	bhi.n	8007afe <HAL_RCC_OscConfig+0x322>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d108      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x30c>
 8007ad6:	4b89      	ldr	r3, [pc, #548]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ade:	4a87      	ldr	r2, [pc, #540]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ae4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ae6:	e075      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ae8:	4b84      	ldr	r3, [pc, #528]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	069b      	lsls	r3, r3, #26
 8007af6:	4981      	ldr	r1, [pc, #516]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007afc:	e06a      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007afe:	4b7f      	ldr	r3, [pc, #508]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	061b      	lsls	r3, r3, #24
 8007b0c:	497b      	ldr	r1, [pc, #492]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b12:	e05f      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d042      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b1c:	4b77      	ldr	r3, [pc, #476]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a76      	ldr	r2, [pc, #472]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b28:	f7fa f9b0 	bl	8001e8c <HAL_GetTick>
 8007b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007b30:	f7fa f9ac 	bl	8001e8c <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e255      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b42:	4b6e      	ldr	r3, [pc, #440]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0f0      	beq.n	8007b30 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b4e:	f7fa f9cd 	bl	8001eec <HAL_GetREVID>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d817      	bhi.n	8007b8c <HAL_RCC_OscConfig+0x3b0>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d108      	bne.n	8007b76 <HAL_RCC_OscConfig+0x39a>
 8007b64:	4b65      	ldr	r3, [pc, #404]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007b6c:	4a63      	ldr	r2, [pc, #396]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b72:	6053      	str	r3, [r2, #4]
 8007b74:	e02e      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
 8007b76:	4b61      	ldr	r3, [pc, #388]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	069b      	lsls	r3, r3, #26
 8007b84:	495d      	ldr	r1, [pc, #372]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	604b      	str	r3, [r1, #4]
 8007b8a:	e023      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
 8007b8c:	4b5b      	ldr	r3, [pc, #364]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	061b      	lsls	r3, r3, #24
 8007b9a:	4958      	ldr	r1, [pc, #352]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60cb      	str	r3, [r1, #12]
 8007ba0:	e018      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ba2:	4b56      	ldr	r3, [pc, #344]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a55      	ldr	r2, [pc, #340]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bae:	f7fa f96d 	bl	8001e8c <HAL_GetTick>
 8007bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bb4:	e008      	b.n	8007bc8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007bb6:	f7fa f969 	bl	8001e8c <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e212      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bc8:	4b4c      	ldr	r3, [pc, #304]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1f0      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0308 	and.w	r3, r3, #8
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d036      	beq.n	8007c4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d019      	beq.n	8007c1c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007be8:	4b44      	ldr	r3, [pc, #272]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bec:	4a43      	ldr	r2, [pc, #268]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007bee:	f043 0301 	orr.w	r3, r3, #1
 8007bf2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bf4:	f7fa f94a 	bl	8001e8c <HAL_GetTick>
 8007bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bfc:	f7fa f946 	bl	8001e8c <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e1ef      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c0e:	4b3b      	ldr	r3, [pc, #236]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0f0      	beq.n	8007bfc <HAL_RCC_OscConfig+0x420>
 8007c1a:	e018      	b.n	8007c4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c1c:	4b37      	ldr	r3, [pc, #220]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c20:	4a36      	ldr	r2, [pc, #216]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c22:	f023 0301 	bic.w	r3, r3, #1
 8007c26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c28:	f7fa f930 	bl	8001e8c <HAL_GetTick>
 8007c2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c2e:	e008      	b.n	8007c42 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c30:	f7fa f92c 	bl	8001e8c <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e1d5      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c42:	4b2e      	ldr	r3, [pc, #184]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1f0      	bne.n	8007c30 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0320 	and.w	r3, r3, #32
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d036      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d019      	beq.n	8007c96 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c62:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a25      	ldr	r2, [pc, #148]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c6e:	f7fa f90d 	bl	8001e8c <HAL_GetTick>
 8007c72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c74:	e008      	b.n	8007c88 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007c76:	f7fa f909 	bl	8001e8c <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e1b2      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c88:	4b1c      	ldr	r3, [pc, #112]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0f0      	beq.n	8007c76 <HAL_RCC_OscConfig+0x49a>
 8007c94:	e018      	b.n	8007cc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c96:	4b19      	ldr	r3, [pc, #100]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a18      	ldr	r2, [pc, #96]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ca0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ca2:	f7fa f8f3 	bl	8001e8c <HAL_GetTick>
 8007ca6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ca8:	e008      	b.n	8007cbc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007caa:	f7fa f8ef 	bl	8001e8c <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e198      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cbc:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <HAL_RCC_OscConfig+0x520>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1f0      	bne.n	8007caa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 8085 	beq.w	8007de0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007cd6:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <HAL_RCC_OscConfig+0x524>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a09      	ldr	r2, [pc, #36]	; (8007d00 <HAL_RCC_OscConfig+0x524>)
 8007cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ce0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ce2:	f7fa f8d3 	bl	8001e8c <HAL_GetTick>
 8007ce6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ce8:	e00c      	b.n	8007d04 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007cea:	f7fa f8cf 	bl	8001e8c <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b64      	cmp	r3, #100	; 0x64
 8007cf6:	d905      	bls.n	8007d04 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e178      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
 8007cfc:	58024400 	.word	0x58024400
 8007d00:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d04:	4b96      	ldr	r3, [pc, #600]	; (8007f60 <HAL_RCC_OscConfig+0x784>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0ec      	beq.n	8007cea <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d106      	bne.n	8007d26 <HAL_RCC_OscConfig+0x54a>
 8007d18:	4b92      	ldr	r3, [pc, #584]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1c:	4a91      	ldr	r2, [pc, #580]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d1e:	f043 0301 	orr.w	r3, r3, #1
 8007d22:	6713      	str	r3, [r2, #112]	; 0x70
 8007d24:	e02d      	b.n	8007d82 <HAL_RCC_OscConfig+0x5a6>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10c      	bne.n	8007d48 <HAL_RCC_OscConfig+0x56c>
 8007d2e:	4b8d      	ldr	r3, [pc, #564]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	4a8c      	ldr	r2, [pc, #560]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d34:	f023 0301 	bic.w	r3, r3, #1
 8007d38:	6713      	str	r3, [r2, #112]	; 0x70
 8007d3a:	4b8a      	ldr	r3, [pc, #552]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	4a89      	ldr	r2, [pc, #548]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d40:	f023 0304 	bic.w	r3, r3, #4
 8007d44:	6713      	str	r3, [r2, #112]	; 0x70
 8007d46:	e01c      	b.n	8007d82 <HAL_RCC_OscConfig+0x5a6>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2b05      	cmp	r3, #5
 8007d4e:	d10c      	bne.n	8007d6a <HAL_RCC_OscConfig+0x58e>
 8007d50:	4b84      	ldr	r3, [pc, #528]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d54:	4a83      	ldr	r2, [pc, #524]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d56:	f043 0304 	orr.w	r3, r3, #4
 8007d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d5c:	4b81      	ldr	r3, [pc, #516]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d60:	4a80      	ldr	r2, [pc, #512]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	6713      	str	r3, [r2, #112]	; 0x70
 8007d68:	e00b      	b.n	8007d82 <HAL_RCC_OscConfig+0x5a6>
 8007d6a:	4b7e      	ldr	r3, [pc, #504]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6e:	4a7d      	ldr	r2, [pc, #500]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d70:	f023 0301 	bic.w	r3, r3, #1
 8007d74:	6713      	str	r3, [r2, #112]	; 0x70
 8007d76:	4b7b      	ldr	r3, [pc, #492]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7a:	4a7a      	ldr	r2, [pc, #488]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007d7c:	f023 0304 	bic.w	r3, r3, #4
 8007d80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d015      	beq.n	8007db6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d8a:	f7fa f87f 	bl	8001e8c <HAL_GetTick>
 8007d8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d90:	e00a      	b.n	8007da8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d92:	f7fa f87b 	bl	8001e8c <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e122      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007da8:	4b6e      	ldr	r3, [pc, #440]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0ee      	beq.n	8007d92 <HAL_RCC_OscConfig+0x5b6>
 8007db4:	e014      	b.n	8007de0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007db6:	f7fa f869 	bl	8001e8c <HAL_GetTick>
 8007dba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dbc:	e00a      	b.n	8007dd4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dbe:	f7fa f865 	bl	8001e8c <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e10c      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dd4:	4b63      	ldr	r3, [pc, #396]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1ee      	bne.n	8007dbe <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8101 	beq.w	8007fec <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007dea:	4b5e      	ldr	r3, [pc, #376]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007df2:	2b18      	cmp	r3, #24
 8007df4:	f000 80bc 	beq.w	8007f70 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	f040 8095 	bne.w	8007f2c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e02:	4b58      	ldr	r3, [pc, #352]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a57      	ldr	r2, [pc, #348]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0e:	f7fa f83d 	bl	8001e8c <HAL_GetTick>
 8007e12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e14:	e008      	b.n	8007e28 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e16:	f7fa f839 	bl	8001e8c <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e0e2      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e28:	4b4e      	ldr	r3, [pc, #312]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f0      	bne.n	8007e16 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e34:	4b4b      	ldr	r3, [pc, #300]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e38:	4b4b      	ldr	r3, [pc, #300]	; (8007f68 <HAL_RCC_OscConfig+0x78c>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e44:	0112      	lsls	r2, r2, #4
 8007e46:	430a      	orrs	r2, r1
 8007e48:	4946      	ldr	r1, [pc, #280]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	628b      	str	r3, [r1, #40]	; 0x28
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e52:	3b01      	subs	r3, #1
 8007e54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	025b      	lsls	r3, r3, #9
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	431a      	orrs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	041b      	lsls	r3, r3, #16
 8007e6c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e76:	3b01      	subs	r3, #1
 8007e78:	061b      	lsls	r3, r3, #24
 8007e7a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e7e:	4939      	ldr	r1, [pc, #228]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007e84:	4b37      	ldr	r3, [pc, #220]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	4a36      	ldr	r2, [pc, #216]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e8a:	f023 0301 	bic.w	r3, r3, #1
 8007e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e90:	4b34      	ldr	r3, [pc, #208]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e94:	4b35      	ldr	r3, [pc, #212]	; (8007f6c <HAL_RCC_OscConfig+0x790>)
 8007e96:	4013      	ands	r3, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e9c:	00d2      	lsls	r2, r2, #3
 8007e9e:	4931      	ldr	r1, [pc, #196]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007ea4:	4b2f      	ldr	r3, [pc, #188]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea8:	f023 020c 	bic.w	r2, r3, #12
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	492c      	ldr	r1, [pc, #176]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007eb6:	4b2b      	ldr	r3, [pc, #172]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	f023 0202 	bic.w	r2, r3, #2
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec2:	4928      	ldr	r1, [pc, #160]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ec8:	4b26      	ldr	r3, [pc, #152]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	4a25      	ldr	r2, [pc, #148]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ed4:	4b23      	ldr	r3, [pc, #140]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed8:	4a22      	ldr	r2, [pc, #136]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ede:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ee0:	4b20      	ldr	r3, [pc, #128]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	4a1f      	ldr	r2, [pc, #124]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007eea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007eec:	4b1d      	ldr	r3, [pc, #116]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	4a1c      	ldr	r2, [pc, #112]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ef8:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a19      	ldr	r2, [pc, #100]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f04:	f7f9 ffc2 	bl	8001e8c <HAL_GetTick>
 8007f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f0c:	f7f9 ffbe 	bl	8001e8c <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e067      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f1e:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0f0      	beq.n	8007f0c <HAL_RCC_OscConfig+0x730>
 8007f2a:	e05f      	b.n	8007fec <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f2c:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a0c      	ldr	r2, [pc, #48]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f38:	f7f9 ffa8 	bl	8001e8c <HAL_GetTick>
 8007f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f40:	f7f9 ffa4 	bl	8001e8c <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e04d      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f52:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <HAL_RCC_OscConfig+0x788>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f0      	bne.n	8007f40 <HAL_RCC_OscConfig+0x764>
 8007f5e:	e045      	b.n	8007fec <HAL_RCC_OscConfig+0x810>
 8007f60:	58024800 	.word	0x58024800
 8007f64:	58024400 	.word	0x58024400
 8007f68:	fffffc0c 	.word	0xfffffc0c
 8007f6c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f70:	4b21      	ldr	r3, [pc, #132]	; (8007ff8 <HAL_RCC_OscConfig+0x81c>)
 8007f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f76:	4b20      	ldr	r3, [pc, #128]	; (8007ff8 <HAL_RCC_OscConfig+0x81c>)
 8007f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d031      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f003 0203 	and.w	r2, r3, #3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d12a      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	091b      	lsrs	r3, r3, #4
 8007f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d122      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d11a      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	0a5b      	lsrs	r3, r3, #9
 8007fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d111      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	0c1b      	lsrs	r3, r3, #16
 8007fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d108      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	0e1b      	lsrs	r3, r3, #24
 8007fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d001      	beq.n	8007fec <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e000      	b.n	8007fee <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3730      	adds	r7, #48	; 0x30
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	58024400 	.word	0x58024400

08007ffc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e19c      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008010:	4b8a      	ldr	r3, [pc, #552]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 030f 	and.w	r3, r3, #15
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d910      	bls.n	8008040 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800801e:	4b87      	ldr	r3, [pc, #540]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f023 020f 	bic.w	r2, r3, #15
 8008026:	4985      	ldr	r1, [pc, #532]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	4313      	orrs	r3, r2
 800802c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800802e:	4b83      	ldr	r3, [pc, #524]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 030f 	and.w	r3, r3, #15
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	429a      	cmp	r2, r3
 800803a:	d001      	beq.n	8008040 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e184      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d010      	beq.n	800806e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	4b7b      	ldr	r3, [pc, #492]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008058:	429a      	cmp	r2, r3
 800805a:	d908      	bls.n	800806e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800805c:	4b78      	ldr	r3, [pc, #480]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	4975      	ldr	r1, [pc, #468]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800806a:	4313      	orrs	r3, r2
 800806c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d010      	beq.n	800809c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	4b70      	ldr	r3, [pc, #448]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008086:	429a      	cmp	r2, r3
 8008088:	d908      	bls.n	800809c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800808a:	4b6d      	ldr	r3, [pc, #436]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	496a      	ldr	r1, [pc, #424]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008098:	4313      	orrs	r3, r2
 800809a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0310 	and.w	r3, r3, #16
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d010      	beq.n	80080ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699a      	ldr	r2, [r3, #24]
 80080ac:	4b64      	ldr	r3, [pc, #400]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d908      	bls.n	80080ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080b8:	4b61      	ldr	r3, [pc, #388]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	495e      	ldr	r1, [pc, #376]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d010      	beq.n	80080f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69da      	ldr	r2, [r3, #28]
 80080da:	4b59      	ldr	r3, [pc, #356]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d908      	bls.n	80080f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80080e6:	4b56      	ldr	r3, [pc, #344]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	4953      	ldr	r1, [pc, #332]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d010      	beq.n	8008126 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	4b4d      	ldr	r3, [pc, #308]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	f003 030f 	and.w	r3, r3, #15
 8008110:	429a      	cmp	r2, r3
 8008112:	d908      	bls.n	8008126 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008114:	4b4a      	ldr	r3, [pc, #296]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	f023 020f 	bic.w	r2, r3, #15
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	4947      	ldr	r1, [pc, #284]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008122:	4313      	orrs	r3, r2
 8008124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d055      	beq.n	80081de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008132:	4b43      	ldr	r3, [pc, #268]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	4940      	ldr	r1, [pc, #256]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008140:	4313      	orrs	r3, r2
 8008142:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	2b02      	cmp	r3, #2
 800814a:	d107      	bne.n	800815c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800814c:	4b3c      	ldr	r3, [pc, #240]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d121      	bne.n	800819c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e0f6      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b03      	cmp	r3, #3
 8008162:	d107      	bne.n	8008174 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008164:	4b36      	ldr	r3, [pc, #216]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d115      	bne.n	800819c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e0ea      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d107      	bne.n	800818c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800817c:	4b30      	ldr	r3, [pc, #192]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008184:	2b00      	cmp	r3, #0
 8008186:	d109      	bne.n	800819c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e0de      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800818c:	4b2c      	ldr	r3, [pc, #176]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0304 	and.w	r3, r3, #4
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e0d6      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800819c:	4b28      	ldr	r3, [pc, #160]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	f023 0207 	bic.w	r2, r3, #7
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	4925      	ldr	r1, [pc, #148]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ae:	f7f9 fe6d 	bl	8001e8c <HAL_GetTick>
 80081b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081b4:	e00a      	b.n	80081cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081b6:	f7f9 fe69 	bl	8001e8c <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d901      	bls.n	80081cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e0be      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081cc:	4b1c      	ldr	r3, [pc, #112]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	429a      	cmp	r2, r3
 80081dc:	d1eb      	bne.n	80081b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d010      	beq.n	800820c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	4b14      	ldr	r3, [pc, #80]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d208      	bcs.n	800820c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081fa:	4b11      	ldr	r3, [pc, #68]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f023 020f 	bic.w	r2, r3, #15
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	490e      	ldr	r1, [pc, #56]	; (8008240 <HAL_RCC_ClockConfig+0x244>)
 8008208:	4313      	orrs	r3, r2
 800820a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800820c:	4b0b      	ldr	r3, [pc, #44]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 030f 	and.w	r3, r3, #15
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	d214      	bcs.n	8008244 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800821a:	4b08      	ldr	r3, [pc, #32]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f023 020f 	bic.w	r2, r3, #15
 8008222:	4906      	ldr	r1, [pc, #24]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	4313      	orrs	r3, r2
 8008228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800822a:	4b04      	ldr	r3, [pc, #16]	; (800823c <HAL_RCC_ClockConfig+0x240>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 030f 	and.w	r3, r3, #15
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	429a      	cmp	r2, r3
 8008236:	d005      	beq.n	8008244 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e086      	b.n	800834a <HAL_RCC_ClockConfig+0x34e>
 800823c:	52002000 	.word	0x52002000
 8008240:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0304 	and.w	r3, r3, #4
 800824c:	2b00      	cmp	r3, #0
 800824e:	d010      	beq.n	8008272 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691a      	ldr	r2, [r3, #16]
 8008254:	4b3f      	ldr	r3, [pc, #252]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800825c:	429a      	cmp	r2, r3
 800825e:	d208      	bcs.n	8008272 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008260:	4b3c      	ldr	r3, [pc, #240]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	4939      	ldr	r1, [pc, #228]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 800826e:	4313      	orrs	r3, r2
 8008270:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0308 	and.w	r3, r3, #8
 800827a:	2b00      	cmp	r3, #0
 800827c:	d010      	beq.n	80082a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	695a      	ldr	r2, [r3, #20]
 8008282:	4b34      	ldr	r3, [pc, #208]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800828a:	429a      	cmp	r2, r3
 800828c:	d208      	bcs.n	80082a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800828e:	4b31      	ldr	r3, [pc, #196]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	492e      	ldr	r1, [pc, #184]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 800829c:	4313      	orrs	r3, r2
 800829e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d010      	beq.n	80082ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	699a      	ldr	r2, [r3, #24]
 80082b0:	4b28      	ldr	r3, [pc, #160]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d208      	bcs.n	80082ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082bc:	4b25      	ldr	r3, [pc, #148]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082be:	69db      	ldr	r3, [r3, #28]
 80082c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	4922      	ldr	r1, [pc, #136]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0320 	and.w	r3, r3, #32
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d010      	beq.n	80082fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	69da      	ldr	r2, [r3, #28]
 80082de:	4b1d      	ldr	r3, [pc, #116]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d208      	bcs.n	80082fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80082ea:	4b1a      	ldr	r3, [pc, #104]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	4917      	ldr	r1, [pc, #92]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 80082f8:	4313      	orrs	r3, r2
 80082fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80082fc:	f000 f834 	bl	8008368 <HAL_RCC_GetSysClockFreq>
 8008300:	4602      	mov	r2, r0
 8008302:	4b14      	ldr	r3, [pc, #80]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	0a1b      	lsrs	r3, r3, #8
 8008308:	f003 030f 	and.w	r3, r3, #15
 800830c:	4912      	ldr	r1, [pc, #72]	; (8008358 <HAL_RCC_ClockConfig+0x35c>)
 800830e:	5ccb      	ldrb	r3, [r1, r3]
 8008310:	f003 031f 	and.w	r3, r3, #31
 8008314:	fa22 f303 	lsr.w	r3, r2, r3
 8008318:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800831a:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <HAL_RCC_ClockConfig+0x358>)
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	f003 030f 	and.w	r3, r3, #15
 8008322:	4a0d      	ldr	r2, [pc, #52]	; (8008358 <HAL_RCC_ClockConfig+0x35c>)
 8008324:	5cd3      	ldrb	r3, [r2, r3]
 8008326:	f003 031f 	and.w	r3, r3, #31
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	fa22 f303 	lsr.w	r3, r2, r3
 8008330:	4a0a      	ldr	r2, [pc, #40]	; (800835c <HAL_RCC_ClockConfig+0x360>)
 8008332:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008334:	4a0a      	ldr	r2, [pc, #40]	; (8008360 <HAL_RCC_ClockConfig+0x364>)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800833a:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <HAL_RCC_ClockConfig+0x368>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4618      	mov	r0, r3
 8008340:	f7f9 fd5a 	bl	8001df8 <HAL_InitTick>
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3718      	adds	r7, #24
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	58024400 	.word	0x58024400
 8008358:	0800e93c 	.word	0x0800e93c
 800835c:	24000010 	.word	0x24000010
 8008360:	2400000c 	.word	0x2400000c
 8008364:	24000014 	.word	0x24000014

08008368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008368:	b480      	push	{r7}
 800836a:	b089      	sub	sp, #36	; 0x24
 800836c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800836e:	4bb3      	ldr	r3, [pc, #716]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008376:	2b18      	cmp	r3, #24
 8008378:	f200 8155 	bhi.w	8008626 <HAL_RCC_GetSysClockFreq+0x2be>
 800837c:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <HAL_RCC_GetSysClockFreq+0x1c>)
 800837e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008382:	bf00      	nop
 8008384:	080083e9 	.word	0x080083e9
 8008388:	08008627 	.word	0x08008627
 800838c:	08008627 	.word	0x08008627
 8008390:	08008627 	.word	0x08008627
 8008394:	08008627 	.word	0x08008627
 8008398:	08008627 	.word	0x08008627
 800839c:	08008627 	.word	0x08008627
 80083a0:	08008627 	.word	0x08008627
 80083a4:	0800840f 	.word	0x0800840f
 80083a8:	08008627 	.word	0x08008627
 80083ac:	08008627 	.word	0x08008627
 80083b0:	08008627 	.word	0x08008627
 80083b4:	08008627 	.word	0x08008627
 80083b8:	08008627 	.word	0x08008627
 80083bc:	08008627 	.word	0x08008627
 80083c0:	08008627 	.word	0x08008627
 80083c4:	08008415 	.word	0x08008415
 80083c8:	08008627 	.word	0x08008627
 80083cc:	08008627 	.word	0x08008627
 80083d0:	08008627 	.word	0x08008627
 80083d4:	08008627 	.word	0x08008627
 80083d8:	08008627 	.word	0x08008627
 80083dc:	08008627 	.word	0x08008627
 80083e0:	08008627 	.word	0x08008627
 80083e4:	0800841b 	.word	0x0800841b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083e8:	4b94      	ldr	r3, [pc, #592]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0320 	and.w	r3, r3, #32
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083f4:	4b91      	ldr	r3, [pc, #580]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	08db      	lsrs	r3, r3, #3
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	4a90      	ldr	r2, [pc, #576]	; (8008640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008400:	fa22 f303 	lsr.w	r3, r2, r3
 8008404:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008406:	e111      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008408:	4b8d      	ldr	r3, [pc, #564]	; (8008640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800840a:	61bb      	str	r3, [r7, #24]
    break;
 800840c:	e10e      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800840e:	4b8d      	ldr	r3, [pc, #564]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008410:	61bb      	str	r3, [r7, #24]
    break;
 8008412:	e10b      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008414:	4b8c      	ldr	r3, [pc, #560]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008416:	61bb      	str	r3, [r7, #24]
    break;
 8008418:	e108      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800841a:	4b88      	ldr	r3, [pc, #544]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800841c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008424:	4b85      	ldr	r3, [pc, #532]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008428:	091b      	lsrs	r3, r3, #4
 800842a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800842e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008430:	4b82      	ldr	r3, [pc, #520]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800843a:	4b80      	ldr	r3, [pc, #512]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800843c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843e:	08db      	lsrs	r3, r3, #3
 8008440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	fb02 f303 	mul.w	r3, r2, r3
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008452:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 80e1 	beq.w	8008620 <HAL_RCC_GetSysClockFreq+0x2b8>
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2b02      	cmp	r3, #2
 8008462:	f000 8083 	beq.w	800856c <HAL_RCC_GetSysClockFreq+0x204>
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b02      	cmp	r3, #2
 800846a:	f200 80a1 	bhi.w	80085b0 <HAL_RCC_GetSysClockFreq+0x248>
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_RCC_GetSysClockFreq+0x114>
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d056      	beq.n	8008528 <HAL_RCC_GetSysClockFreq+0x1c0>
 800847a:	e099      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800847c:	4b6f      	ldr	r3, [pc, #444]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d02d      	beq.n	80084e4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008488:	4b6c      	ldr	r3, [pc, #432]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	08db      	lsrs	r3, r3, #3
 800848e:	f003 0303 	and.w	r3, r3, #3
 8008492:	4a6b      	ldr	r2, [pc, #428]	; (8008640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008494:	fa22 f303 	lsr.w	r3, r2, r3
 8008498:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	ee07 3a90 	vmov	s15, r3
 80084a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084b2:	4b62      	ldr	r3, [pc, #392]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ba:	ee07 3a90 	vmov	s15, r3
 80084be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80084c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800864c <HAL_RCC_GetSysClockFreq+0x2e4>
 80084ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80084e2:	e087      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	ee07 3a90 	vmov	s15, r3
 80084ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008650 <HAL_RCC_GetSysClockFreq+0x2e8>
 80084f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f6:	4b51      	ldr	r3, [pc, #324]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fe:	ee07 3a90 	vmov	s15, r3
 8008502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008506:	ed97 6a02 	vldr	s12, [r7, #8]
 800850a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800864c <HAL_RCC_GetSysClockFreq+0x2e4>
 800850e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800851a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008526:	e065      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008532:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800853a:	4b40      	ldr	r3, [pc, #256]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800854a:	ed97 6a02 	vldr	s12, [r7, #8]
 800854e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800864c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800855a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800855e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800856a:	e043      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008576:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008658 <HAL_RCC_GetSysClockFreq+0x2f0>
 800857a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857e:	4b2f      	ldr	r3, [pc, #188]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008592:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800864c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800859a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ae:	e021      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	ee07 3a90 	vmov	s15, r3
 80085b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2ec>
 80085be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085c2:	4b1e      	ldr	r3, [pc, #120]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80085d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800864c <HAL_RCC_GetSysClockFreq+0x2e4>
 80085da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085f2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80085f4:	4b11      	ldr	r3, [pc, #68]	; (800863c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f8:	0a5b      	lsrs	r3, r3, #9
 80085fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085fe:	3301      	adds	r3, #1
 8008600:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	ee07 3a90 	vmov	s15, r3
 8008608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800860c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008618:	ee17 3a90 	vmov	r3, s15
 800861c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800861e:	e005      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	61bb      	str	r3, [r7, #24]
    break;
 8008624:	e002      	b.n	800862c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008626:	4b07      	ldr	r3, [pc, #28]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008628:	61bb      	str	r3, [r7, #24]
    break;
 800862a:	bf00      	nop
  }

  return sysclockfreq;
 800862c:	69bb      	ldr	r3, [r7, #24]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3724      	adds	r7, #36	; 0x24
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	58024400 	.word	0x58024400
 8008640:	03d09000 	.word	0x03d09000
 8008644:	003d0900 	.word	0x003d0900
 8008648:	017d7840 	.word	0x017d7840
 800864c:	46000000 	.word	0x46000000
 8008650:	4c742400 	.word	0x4c742400
 8008654:	4a742400 	.word	0x4a742400
 8008658:	4bbebc20 	.word	0x4bbebc20

0800865c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008662:	f7ff fe81 	bl	8008368 <HAL_RCC_GetSysClockFreq>
 8008666:	4602      	mov	r2, r0
 8008668:	4b10      	ldr	r3, [pc, #64]	; (80086ac <HAL_RCC_GetHCLKFreq+0x50>)
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	f003 030f 	and.w	r3, r3, #15
 8008672:	490f      	ldr	r1, [pc, #60]	; (80086b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008674:	5ccb      	ldrb	r3, [r1, r3]
 8008676:	f003 031f 	and.w	r3, r3, #31
 800867a:	fa22 f303 	lsr.w	r3, r2, r3
 800867e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008680:	4b0a      	ldr	r3, [pc, #40]	; (80086ac <HAL_RCC_GetHCLKFreq+0x50>)
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	f003 030f 	and.w	r3, r3, #15
 8008688:	4a09      	ldr	r2, [pc, #36]	; (80086b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800868a:	5cd3      	ldrb	r3, [r2, r3]
 800868c:	f003 031f 	and.w	r3, r3, #31
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	fa22 f303 	lsr.w	r3, r2, r3
 8008696:	4a07      	ldr	r2, [pc, #28]	; (80086b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008698:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800869a:	4a07      	ldr	r2, [pc, #28]	; (80086b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80086a0:	4b04      	ldr	r3, [pc, #16]	; (80086b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80086a2:	681b      	ldr	r3, [r3, #0]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	58024400 	.word	0x58024400
 80086b0:	0800e93c 	.word	0x0800e93c
 80086b4:	24000010 	.word	0x24000010
 80086b8:	2400000c 	.word	0x2400000c

080086bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80086c0:	f7ff ffcc 	bl	800865c <HAL_RCC_GetHCLKFreq>
 80086c4:	4602      	mov	r2, r0
 80086c6:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	091b      	lsrs	r3, r3, #4
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	4904      	ldr	r1, [pc, #16]	; (80086e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80086d2:	5ccb      	ldrb	r3, [r1, r3]
 80086d4:	f003 031f 	and.w	r3, r3, #31
 80086d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80086dc:	4618      	mov	r0, r3
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	58024400 	.word	0x58024400
 80086e4:	0800e93c 	.word	0x0800e93c

080086e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80086ec:	f7ff ffb6 	bl	800865c <HAL_RCC_GetHCLKFreq>
 80086f0:	4602      	mov	r2, r0
 80086f2:	4b06      	ldr	r3, [pc, #24]	; (800870c <HAL_RCC_GetPCLK2Freq+0x24>)
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	0a1b      	lsrs	r3, r3, #8
 80086f8:	f003 0307 	and.w	r3, r3, #7
 80086fc:	4904      	ldr	r1, [pc, #16]	; (8008710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80086fe:	5ccb      	ldrb	r3, [r1, r3]
 8008700:	f003 031f 	and.w	r3, r3, #31
 8008704:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008708:	4618      	mov	r0, r3
 800870a:	bd80      	pop	{r7, pc}
 800870c:	58024400 	.word	0x58024400
 8008710:	0800e93c 	.word	0x0800e93c

08008714 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800871c:	2300      	movs	r3, #0
 800871e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008720:	2300      	movs	r3, #0
 8008722:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d03f      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008734:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008738:	d02a      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800873a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800873e:	d824      	bhi.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008740:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008744:	d018      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800874a:	d81e      	bhi.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008754:	d007      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008756:	e018      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008758:	4bab      	ldr	r3, [pc, #684]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	4aaa      	ldr	r2, [pc, #680]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800875e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008764:	e015      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	3304      	adds	r3, #4
 800876a:	2102      	movs	r1, #2
 800876c:	4618      	mov	r0, r3
 800876e:	f001 f9cf 	bl	8009b10 <RCCEx_PLL2_Config>
 8008772:	4603      	mov	r3, r0
 8008774:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008776:	e00c      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	2102      	movs	r1, #2
 800877e:	4618      	mov	r0, r3
 8008780:	f001 fa78 	bl	8009c74 <RCCEx_PLL3_Config>
 8008784:	4603      	mov	r3, r0
 8008786:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008788:	e003      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	75fb      	strb	r3, [r7, #23]
      break;
 800878e:	e000      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008792:	7dfb      	ldrb	r3, [r7, #23]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d109      	bne.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008798:	4b9b      	ldr	r3, [pc, #620]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800879a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087a4:	4998      	ldr	r1, [pc, #608]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	650b      	str	r3, [r1, #80]	; 0x50
 80087aa:	e001      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d03d      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d826      	bhi.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80087c4:	a201      	add	r2, pc, #4	; (adr r2, 80087cc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80087c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ca:	bf00      	nop
 80087cc:	080087e1 	.word	0x080087e1
 80087d0:	080087ef 	.word	0x080087ef
 80087d4:	08008801 	.word	0x08008801
 80087d8:	08008819 	.word	0x08008819
 80087dc:	08008819 	.word	0x08008819
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e0:	4b89      	ldr	r3, [pc, #548]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	4a88      	ldr	r2, [pc, #544]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80087e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087ec:	e015      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3304      	adds	r3, #4
 80087f2:	2100      	movs	r1, #0
 80087f4:	4618      	mov	r0, r3
 80087f6:	f001 f98b 	bl	8009b10 <RCCEx_PLL2_Config>
 80087fa:	4603      	mov	r3, r0
 80087fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087fe:	e00c      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3324      	adds	r3, #36	; 0x24
 8008804:	2100      	movs	r1, #0
 8008806:	4618      	mov	r0, r3
 8008808:	f001 fa34 	bl	8009c74 <RCCEx_PLL3_Config>
 800880c:	4603      	mov	r3, r0
 800880e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008810:	e003      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	75fb      	strb	r3, [r7, #23]
      break;
 8008816:	e000      	b.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008818:	bf00      	nop
    }

    if(ret == HAL_OK)
 800881a:	7dfb      	ldrb	r3, [r7, #23]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d109      	bne.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008820:	4b79      	ldr	r3, [pc, #484]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008824:	f023 0207 	bic.w	r2, r3, #7
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882c:	4976      	ldr	r1, [pc, #472]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800882e:	4313      	orrs	r3, r2
 8008830:	650b      	str	r3, [r1, #80]	; 0x50
 8008832:	e001      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008834:	7dfb      	ldrb	r3, [r7, #23]
 8008836:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008840:	2b00      	cmp	r3, #0
 8008842:	d042      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800884c:	d02b      	beq.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800884e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008852:	d825      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008854:	2bc0      	cmp	r3, #192	; 0xc0
 8008856:	d028      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008858:	2bc0      	cmp	r3, #192	; 0xc0
 800885a:	d821      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800885c:	2b80      	cmp	r3, #128	; 0x80
 800885e:	d016      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008860:	2b80      	cmp	r3, #128	; 0x80
 8008862:	d81d      	bhi.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008868:	2b40      	cmp	r3, #64	; 0x40
 800886a:	d007      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800886c:	e018      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800886e:	4b66      	ldr	r3, [pc, #408]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	4a65      	ldr	r2, [pc, #404]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800887a:	e017      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3304      	adds	r3, #4
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f001 f944 	bl	8009b10 <RCCEx_PLL2_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800888c:	e00e      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3324      	adds	r3, #36	; 0x24
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f001 f9ed 	bl	8009c74 <RCCEx_PLL3_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800889e:	e005      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	75fb      	strb	r3, [r7, #23]
      break;
 80088a4:	e002      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80088a6:	bf00      	nop
 80088a8:	e000      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80088aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80088b2:	4b55      	ldr	r3, [pc, #340]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088be:	4952      	ldr	r1, [pc, #328]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	650b      	str	r3, [r1, #80]	; 0x50
 80088c4:	e001      	b.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d049      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088e0:	d030      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80088e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088e6:	d82a      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80088e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088ec:	d02c      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80088ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088f2:	d824      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80088f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088f8:	d018      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80088fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088fe:	d81e      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008904:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008908:	d007      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800890a:	e018      	b.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800890c:	4b3e      	ldr	r3, [pc, #248]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	4a3d      	ldr	r2, [pc, #244]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008918:	e017      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3304      	adds	r3, #4
 800891e:	2100      	movs	r1, #0
 8008920:	4618      	mov	r0, r3
 8008922:	f001 f8f5 	bl	8009b10 <RCCEx_PLL2_Config>
 8008926:	4603      	mov	r3, r0
 8008928:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800892a:	e00e      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3324      	adds	r3, #36	; 0x24
 8008930:	2100      	movs	r1, #0
 8008932:	4618      	mov	r0, r3
 8008934:	f001 f99e 	bl	8009c74 <RCCEx_PLL3_Config>
 8008938:	4603      	mov	r3, r0
 800893a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800893c:	e005      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	75fb      	strb	r3, [r7, #23]
      break;
 8008942:	e002      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008944:	bf00      	nop
 8008946:	e000      	b.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008950:	4b2d      	ldr	r3, [pc, #180]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008954:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800895e:	492a      	ldr	r1, [pc, #168]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008960:	4313      	orrs	r3, r2
 8008962:	658b      	str	r3, [r1, #88]	; 0x58
 8008964:	e001      	b.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008972:	2b00      	cmp	r3, #0
 8008974:	d04c      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800897c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008980:	d030      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008986:	d82a      	bhi.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008988:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800898c:	d02c      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800898e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008992:	d824      	bhi.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008994:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008998:	d018      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800899a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800899e:	d81e      	bhi.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d003      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 80089a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089a8:	d007      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80089aa:	e018      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ac:	4b16      	ldr	r3, [pc, #88]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	4a15      	ldr	r2, [pc, #84]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089b8:	e017      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3304      	adds	r3, #4
 80089be:	2100      	movs	r1, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 f8a5 	bl	8009b10 <RCCEx_PLL2_Config>
 80089c6:	4603      	mov	r3, r0
 80089c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80089ca:	e00e      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3324      	adds	r3, #36	; 0x24
 80089d0:	2100      	movs	r1, #0
 80089d2:	4618      	mov	r0, r3
 80089d4:	f001 f94e 	bl	8009c74 <RCCEx_PLL3_Config>
 80089d8:	4603      	mov	r3, r0
 80089da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089dc:	e005      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	75fb      	strb	r3, [r7, #23]
      break;
 80089e2:	e002      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80089e4:	bf00      	nop
 80089e6:	e000      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80089e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10d      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80089f0:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80089f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80089fe:	4902      	ldr	r1, [pc, #8]	; (8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	658b      	str	r3, [r1, #88]	; 0x58
 8008a04:	e004      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008a06:	bf00      	nop
 8008a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0c:	7dfb      	ldrb	r3, [r7, #23]
 8008a0e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d032      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a20:	2b30      	cmp	r3, #48	; 0x30
 8008a22:	d01c      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008a24:	2b30      	cmp	r3, #48	; 0x30
 8008a26:	d817      	bhi.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008a28:	2b20      	cmp	r3, #32
 8008a2a:	d00c      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008a2c:	2b20      	cmp	r3, #32
 8008a2e:	d813      	bhi.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d016      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008a34:	2b10      	cmp	r3, #16
 8008a36:	d10f      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a38:	4baf      	ldr	r3, [pc, #700]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3c:	4aae      	ldr	r2, [pc, #696]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a44:	e00e      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	3304      	adds	r3, #4
 8008a4a:	2102      	movs	r1, #2
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f001 f85f 	bl	8009b10 <RCCEx_PLL2_Config>
 8008a52:	4603      	mov	r3, r0
 8008a54:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a56:	e005      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a5c:	e002      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008a5e:	bf00      	nop
 8008a60:	e000      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d109      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a6a:	4ba3      	ldr	r3, [pc, #652]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a76:	49a0      	ldr	r1, [pc, #640]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a7c:	e001      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a7e:	7dfb      	ldrb	r3, [r7, #23]
 8008a80:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d047      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a96:	d030      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a9c:	d82a      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008a9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008aa2:	d02c      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008aa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008aa8:	d824      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aae:	d018      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ab4:	d81e      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008abe:	d007      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008ac0:	e018      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac2:	4b8d      	ldr	r3, [pc, #564]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac6:	4a8c      	ldr	r2, [pc, #560]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008acc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ace:	e017      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 f81a 	bl	8009b10 <RCCEx_PLL2_Config>
 8008adc:	4603      	mov	r3, r0
 8008ade:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ae0:	e00e      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3324      	adds	r3, #36	; 0x24
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f001 f8c3 	bl	8009c74 <RCCEx_PLL3_Config>
 8008aee:	4603      	mov	r3, r0
 8008af0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008af2:	e005      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	75fb      	strb	r3, [r7, #23]
      break;
 8008af8:	e002      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008afa:	bf00      	nop
 8008afc:	e000      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b00:	7dfb      	ldrb	r3, [r7, #23]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b06:	4b7c      	ldr	r3, [pc, #496]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b12:	4979      	ldr	r1, [pc, #484]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008b14:	4313      	orrs	r3, r2
 8008b16:	650b      	str	r3, [r1, #80]	; 0x50
 8008b18:	e001      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1a:	7dfb      	ldrb	r3, [r7, #23]
 8008b1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d049      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b32:	d02e      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b38:	d828      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008b3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b3e:	d02a      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b44:	d822      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008b46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b4a:	d026      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008b4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b50:	d81c      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b56:	d010      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b5c:	d816      	bhi.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d01d      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b66:	d111      	bne.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 ffce 	bl	8009b10 <RCCEx_PLL2_Config>
 8008b74:	4603      	mov	r3, r0
 8008b76:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b78:	e012      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3324      	adds	r3, #36	; 0x24
 8008b7e:	2101      	movs	r1, #1
 8008b80:	4618      	mov	r0, r3
 8008b82:	f001 f877 	bl	8009c74 <RCCEx_PLL3_Config>
 8008b86:	4603      	mov	r3, r0
 8008b88:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b8a:	e009      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b90:	e006      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b92:	bf00      	nop
 8008b94:	e004      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b96:	bf00      	nop
 8008b98:	e002      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b9a:	bf00      	nop
 8008b9c:	e000      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d109      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008ba6:	4b54      	ldr	r3, [pc, #336]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008baa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb2:	4951      	ldr	r1, [pc, #324]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	650b      	str	r3, [r1, #80]	; 0x50
 8008bb8:	e001      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d04b      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bd4:	d02e      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bda:	d828      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be0:	d02a      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be6:	d822      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008be8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bec:	d026      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008bee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bf2:	d81c      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bf8:	d010      	beq.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bfe:	d816      	bhi.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d01d      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c08:	d111      	bne.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	2101      	movs	r1, #1
 8008c10:	4618      	mov	r0, r3
 8008c12:	f000 ff7d 	bl	8009b10 <RCCEx_PLL2_Config>
 8008c16:	4603      	mov	r3, r0
 8008c18:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008c1a:	e012      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3324      	adds	r3, #36	; 0x24
 8008c20:	2101      	movs	r1, #1
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 f826 	bl	8009c74 <RCCEx_PLL3_Config>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008c2c:	e009      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	75fb      	strb	r3, [r7, #23]
      break;
 8008c32:	e006      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008c34:	bf00      	nop
 8008c36:	e004      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008c38:	bf00      	nop
 8008c3a:	e002      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008c3c:	bf00      	nop
 8008c3e:	e000      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008c40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10a      	bne.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008c48:	4b2b      	ldr	r3, [pc, #172]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c56:	4928      	ldr	r1, [pc, #160]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	658b      	str	r3, [r1, #88]	; 0x58
 8008c5c:	e001      	b.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
 8008c60:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d02f      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c76:	d00e      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008c78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c7c:	d814      	bhi.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d015      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c86:	d10f      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c88:	4b1b      	ldr	r3, [pc, #108]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	4a1a      	ldr	r2, [pc, #104]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c94:	e00c      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 ff37 	bl	8009b10 <RCCEx_PLL2_Config>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008ca6:	e003      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	75fb      	strb	r3, [r7, #23]
      break;
 8008cac:	e000      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008cae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d109      	bne.n	8008cca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008cb6:	4b10      	ldr	r3, [pc, #64]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc2:	490d      	ldr	r1, [pc, #52]	; (8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	650b      	str	r3, [r1, #80]	; 0x50
 8008cc8:	e001      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d033      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d81c      	bhi.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008ce2:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008d23 	.word	0x08008d23
 8008cec:	08008cfd 	.word	0x08008cfd
 8008cf0:	08008d0b 	.word	0x08008d0b
 8008cf4:	08008d23 	.word	0x08008d23
 8008cf8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cfc:	4bb8      	ldr	r3, [pc, #736]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	4ab7      	ldr	r2, [pc, #732]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008d08:	e00c      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	2102      	movs	r1, #2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 fefd 	bl	8009b10 <RCCEx_PLL2_Config>
 8008d16:	4603      	mov	r3, r0
 8008d18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008d1a:	e003      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008d20:	e000      	b.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008d22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d24:	7dfb      	ldrb	r3, [r7, #23]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d109      	bne.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008d2a:	4bad      	ldr	r3, [pc, #692]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2e:	f023 0203 	bic.w	r2, r3, #3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d36:	49aa      	ldr	r1, [pc, #680]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d3c:	e001      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d3e:	7dfb      	ldrb	r3, [r7, #23]
 8008d40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 8086 	beq.w	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d50:	4ba4      	ldr	r3, [pc, #656]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4aa3      	ldr	r2, [pc, #652]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d5c:	f7f9 f896 	bl	8001e8c <HAL_GetTick>
 8008d60:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d62:	e009      	b.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d64:	f7f9 f892 	bl	8001e8c <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b64      	cmp	r3, #100	; 0x64
 8008d70:	d902      	bls.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	75fb      	strb	r3, [r7, #23]
        break;
 8008d76:	e005      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d78:	4b9a      	ldr	r3, [pc, #616]	; (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d0ef      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008d84:	7dfb      	ldrb	r3, [r7, #23]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d166      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d8a:	4b95      	ldr	r3, [pc, #596]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008d8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d94:	4053      	eors	r3, r2
 8008d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d013      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d9e:	4b90      	ldr	r3, [pc, #576]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008da6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008da8:	4b8d      	ldr	r3, [pc, #564]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dac:	4a8c      	ldr	r2, [pc, #560]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008db4:	4b8a      	ldr	r3, [pc, #552]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db8:	4a89      	ldr	r2, [pc, #548]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dbe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008dc0:	4a87      	ldr	r2, [pc, #540]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd0:	d115      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd2:	f7f9 f85b 	bl	8001e8c <HAL_GetTick>
 8008dd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dd8:	e00b      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dda:	f7f9 f857 	bl	8001e8c <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d902      	bls.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	75fb      	strb	r3, [r7, #23]
            break;
 8008df0:	e005      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008df2:	4b7b      	ldr	r3, [pc, #492]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0ed      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008dfe:	7dfb      	ldrb	r3, [r7, #23]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d126      	bne.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e12:	d10d      	bne.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008e14:	4b72      	ldr	r3, [pc, #456]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e22:	0919      	lsrs	r1, r3, #4
 8008e24:	4b70      	ldr	r3, [pc, #448]	; (8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008e26:	400b      	ands	r3, r1
 8008e28:	496d      	ldr	r1, [pc, #436]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	610b      	str	r3, [r1, #16]
 8008e2e:	e005      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008e30:	4b6b      	ldr	r3, [pc, #428]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	4a6a      	ldr	r2, [pc, #424]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e3a:	6113      	str	r3, [r2, #16]
 8008e3c:	4b68      	ldr	r3, [pc, #416]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e4a:	4965      	ldr	r1, [pc, #404]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	670b      	str	r3, [r1, #112]	; 0x70
 8008e50:	e004      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	75bb      	strb	r3, [r7, #22]
 8008e56:	e001      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d07e      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e6c:	2b28      	cmp	r3, #40	; 0x28
 8008e6e:	d867      	bhi.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008e70:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008f47 	.word	0x08008f47
 8008e7c:	08008f41 	.word	0x08008f41
 8008e80:	08008f41 	.word	0x08008f41
 8008e84:	08008f41 	.word	0x08008f41
 8008e88:	08008f41 	.word	0x08008f41
 8008e8c:	08008f41 	.word	0x08008f41
 8008e90:	08008f41 	.word	0x08008f41
 8008e94:	08008f41 	.word	0x08008f41
 8008e98:	08008f1d 	.word	0x08008f1d
 8008e9c:	08008f41 	.word	0x08008f41
 8008ea0:	08008f41 	.word	0x08008f41
 8008ea4:	08008f41 	.word	0x08008f41
 8008ea8:	08008f41 	.word	0x08008f41
 8008eac:	08008f41 	.word	0x08008f41
 8008eb0:	08008f41 	.word	0x08008f41
 8008eb4:	08008f41 	.word	0x08008f41
 8008eb8:	08008f2f 	.word	0x08008f2f
 8008ebc:	08008f41 	.word	0x08008f41
 8008ec0:	08008f41 	.word	0x08008f41
 8008ec4:	08008f41 	.word	0x08008f41
 8008ec8:	08008f41 	.word	0x08008f41
 8008ecc:	08008f41 	.word	0x08008f41
 8008ed0:	08008f41 	.word	0x08008f41
 8008ed4:	08008f41 	.word	0x08008f41
 8008ed8:	08008f47 	.word	0x08008f47
 8008edc:	08008f41 	.word	0x08008f41
 8008ee0:	08008f41 	.word	0x08008f41
 8008ee4:	08008f41 	.word	0x08008f41
 8008ee8:	08008f41 	.word	0x08008f41
 8008eec:	08008f41 	.word	0x08008f41
 8008ef0:	08008f41 	.word	0x08008f41
 8008ef4:	08008f41 	.word	0x08008f41
 8008ef8:	08008f47 	.word	0x08008f47
 8008efc:	08008f41 	.word	0x08008f41
 8008f00:	08008f41 	.word	0x08008f41
 8008f04:	08008f41 	.word	0x08008f41
 8008f08:	08008f41 	.word	0x08008f41
 8008f0c:	08008f41 	.word	0x08008f41
 8008f10:	08008f41 	.word	0x08008f41
 8008f14:	08008f41 	.word	0x08008f41
 8008f18:	08008f47 	.word	0x08008f47
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	2101      	movs	r1, #1
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fdf4 	bl	8009b10 <RCCEx_PLL2_Config>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008f2c:	e00c      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	3324      	adds	r3, #36	; 0x24
 8008f32:	2101      	movs	r1, #1
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 fe9d 	bl	8009c74 <RCCEx_PLL3_Config>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008f3e:	e003      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	75fb      	strb	r3, [r7, #23]
      break;
 8008f44:	e000      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d109      	bne.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f4e:	4b24      	ldr	r3, [pc, #144]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f52:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f5a:	4921      	ldr	r1, [pc, #132]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	654b      	str	r3, [r1, #84]	; 0x54
 8008f60:	e001      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 0302 	and.w	r3, r3, #2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d03e      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f76:	2b05      	cmp	r3, #5
 8008f78:	d820      	bhi.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008f7a:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f80:	08008fc3 	.word	0x08008fc3
 8008f84:	08008f99 	.word	0x08008f99
 8008f88:	08008fab 	.word	0x08008fab
 8008f8c:	08008fc3 	.word	0x08008fc3
 8008f90:	08008fc3 	.word	0x08008fc3
 8008f94:	08008fc3 	.word	0x08008fc3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 fdb6 	bl	8009b10 <RCCEx_PLL2_Config>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008fa8:	e00c      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	3324      	adds	r3, #36	; 0x24
 8008fae:	2101      	movs	r1, #1
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 fe5f 	bl	8009c74 <RCCEx_PLL3_Config>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008fba:	e003      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008fc0:	e000      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fc4:	7dfb      	ldrb	r3, [r7, #23]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d110      	bne.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008fca:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fce:	f023 0207 	bic.w	r2, r3, #7
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fd6:	4902      	ldr	r1, [pc, #8]	; (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	654b      	str	r3, [r1, #84]	; 0x54
 8008fdc:	e008      	b.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008fde:	bf00      	nop
 8008fe0:	58024400 	.word	0x58024400
 8008fe4:	58024800 	.word	0x58024800
 8008fe8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0304 	and.w	r3, r3, #4
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d039      	beq.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009002:	2b05      	cmp	r3, #5
 8009004:	d820      	bhi.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	0800904f 	.word	0x0800904f
 8009010:	08009025 	.word	0x08009025
 8009014:	08009037 	.word	0x08009037
 8009018:	0800904f 	.word	0x0800904f
 800901c:	0800904f 	.word	0x0800904f
 8009020:	0800904f 	.word	0x0800904f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3304      	adds	r3, #4
 8009028:	2101      	movs	r1, #1
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fd70 	bl	8009b10 <RCCEx_PLL2_Config>
 8009030:	4603      	mov	r3, r0
 8009032:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009034:	e00c      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3324      	adds	r3, #36	; 0x24
 800903a:	2101      	movs	r1, #1
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fe19 	bl	8009c74 <RCCEx_PLL3_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009046:	e003      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	75fb      	strb	r3, [r7, #23]
      break;
 800904c:	e000      	b.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800904e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009056:	4bb7      	ldr	r3, [pc, #732]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800905a:	f023 0207 	bic.w	r2, r3, #7
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009064:	49b3      	ldr	r1, [pc, #716]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009066:	4313      	orrs	r3, r2
 8009068:	658b      	str	r3, [r1, #88]	; 0x58
 800906a:	e001      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800906c:	7dfb      	ldrb	r3, [r7, #23]
 800906e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0320 	and.w	r3, r3, #32
 8009078:	2b00      	cmp	r3, #0
 800907a:	d04b      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009082:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009086:	d02e      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800908c:	d828      	bhi.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800908e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009092:	d02a      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009098:	d822      	bhi.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800909a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800909e:	d026      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80090a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090a4:	d81c      	bhi.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80090a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090aa:	d010      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80090ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090b0:	d816      	bhi.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d01d      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80090b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090ba:	d111      	bne.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	3304      	adds	r3, #4
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fd24 	bl	8009b10 <RCCEx_PLL2_Config>
 80090c8:	4603      	mov	r3, r0
 80090ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80090cc:	e012      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3324      	adds	r3, #36	; 0x24
 80090d2:	2102      	movs	r1, #2
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 fdcd 	bl	8009c74 <RCCEx_PLL3_Config>
 80090da:	4603      	mov	r3, r0
 80090dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80090de:	e009      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	75fb      	strb	r3, [r7, #23]
      break;
 80090e4:	e006      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80090e6:	bf00      	nop
 80090e8:	e004      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80090ea:	bf00      	nop
 80090ec:	e002      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80090ee:	bf00      	nop
 80090f0:	e000      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80090f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10a      	bne.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090fa:	4b8e      	ldr	r3, [pc, #568]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80090fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009108:	498a      	ldr	r1, [pc, #552]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800910a:	4313      	orrs	r3, r2
 800910c:	654b      	str	r3, [r1, #84]	; 0x54
 800910e:	e001      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009110:	7dfb      	ldrb	r3, [r7, #23]
 8009112:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911c:	2b00      	cmp	r3, #0
 800911e:	d04b      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009126:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800912a:	d02e      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800912c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009130:	d828      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009136:	d02a      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800913c:	d822      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800913e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009142:	d026      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009148:	d81c      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800914a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800914e:	d010      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009154:	d816      	bhi.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d01d      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800915a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800915e:	d111      	bne.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	3304      	adds	r3, #4
 8009164:	2100      	movs	r1, #0
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fcd2 	bl	8009b10 <RCCEx_PLL2_Config>
 800916c:	4603      	mov	r3, r0
 800916e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009170:	e012      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	3324      	adds	r3, #36	; 0x24
 8009176:	2102      	movs	r1, #2
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fd7b 	bl	8009c74 <RCCEx_PLL3_Config>
 800917e:	4603      	mov	r3, r0
 8009180:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009182:	e009      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	75fb      	strb	r3, [r7, #23]
      break;
 8009188:	e006      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800918a:	bf00      	nop
 800918c:	e004      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800918e:	bf00      	nop
 8009190:	e002      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009192:	bf00      	nop
 8009194:	e000      	b.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009198:	7dfb      	ldrb	r3, [r7, #23]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10a      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800919e:	4b65      	ldr	r3, [pc, #404]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80091a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091ac:	4961      	ldr	r1, [pc, #388]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	658b      	str	r3, [r1, #88]	; 0x58
 80091b2:	e001      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d04b      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80091ce:	d02e      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80091d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80091d4:	d828      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80091d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091da:	d02a      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80091dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091e0:	d822      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80091e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80091e6:	d026      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80091e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80091ec:	d81c      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80091ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091f2:	d010      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80091f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091f8:	d816      	bhi.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d01d      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80091fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009202:	d111      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	3304      	adds	r3, #4
 8009208:	2100      	movs	r1, #0
 800920a:	4618      	mov	r0, r3
 800920c:	f000 fc80 	bl	8009b10 <RCCEx_PLL2_Config>
 8009210:	4603      	mov	r3, r0
 8009212:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009214:	e012      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3324      	adds	r3, #36	; 0x24
 800921a:	2102      	movs	r1, #2
 800921c:	4618      	mov	r0, r3
 800921e:	f000 fd29 	bl	8009c74 <RCCEx_PLL3_Config>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009226:	e009      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	75fb      	strb	r3, [r7, #23]
      break;
 800922c:	e006      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800922e:	bf00      	nop
 8009230:	e004      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009232:	bf00      	nop
 8009234:	e002      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009236:	bf00      	nop
 8009238:	e000      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800923a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800923c:	7dfb      	ldrb	r3, [r7, #23]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009242:	4b3c      	ldr	r3, [pc, #240]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009250:	4938      	ldr	r1, [pc, #224]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009252:	4313      	orrs	r3, r2
 8009254:	658b      	str	r3, [r1, #88]	; 0x58
 8009256:	e001      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	7dfb      	ldrb	r3, [r7, #23]
 800925a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0308 	and.w	r3, r3, #8
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01a      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800926e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009272:	d10a      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	3324      	adds	r3, #36	; 0x24
 8009278:	2102      	movs	r1, #2
 800927a:	4618      	mov	r0, r3
 800927c:	f000 fcfa 	bl	8009c74 <RCCEx_PLL3_Config>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800928a:	4b2a      	ldr	r3, [pc, #168]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800928c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009298:	4926      	ldr	r1, [pc, #152]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800929a:	4313      	orrs	r3, r2
 800929c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 0310 	and.w	r3, r3, #16
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d01a      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b4:	d10a      	bne.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3324      	adds	r3, #36	; 0x24
 80092ba:	2102      	movs	r1, #2
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 fcd9 	bl	8009c74 <RCCEx_PLL3_Config>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80092cc:	4b19      	ldr	r3, [pc, #100]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80092ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092da:	4916      	ldr	r1, [pc, #88]	; (8009334 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d036      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80092f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092f6:	d01f      	beq.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80092f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092fc:	d817      	bhi.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009306:	d009      	beq.n	800931c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009308:	e011      	b.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	3304      	adds	r3, #4
 800930e:	2100      	movs	r1, #0
 8009310:	4618      	mov	r0, r3
 8009312:	f000 fbfd 	bl	8009b10 <RCCEx_PLL2_Config>
 8009316:	4603      	mov	r3, r0
 8009318:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800931a:	e00e      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3324      	adds	r3, #36	; 0x24
 8009320:	2102      	movs	r1, #2
 8009322:	4618      	mov	r0, r3
 8009324:	f000 fca6 	bl	8009c74 <RCCEx_PLL3_Config>
 8009328:	4603      	mov	r3, r0
 800932a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800932c:	e005      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	75fb      	strb	r3, [r7, #23]
      break;
 8009332:	e002      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009334:	58024400 	.word	0x58024400
      break;
 8009338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10a      	bne.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009340:	4b93      	ldr	r3, [pc, #588]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800934e:	4990      	ldr	r1, [pc, #576]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009350:	4313      	orrs	r3, r2
 8009352:	658b      	str	r3, [r1, #88]	; 0x58
 8009354:	e001      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d033      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800936c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009370:	d01c      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009372:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009376:	d816      	bhi.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800937c:	d003      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800937e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009382:	d007      	beq.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009384:	e00f      	b.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009386:	4b82      	ldr	r3, [pc, #520]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938a:	4a81      	ldr	r2, [pc, #516]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800938c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009390:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009392:	e00c      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	3324      	adds	r3, #36	; 0x24
 8009398:	2101      	movs	r1, #1
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fc6a 	bl	8009c74 <RCCEx_PLL3_Config>
 80093a0:	4603      	mov	r3, r0
 80093a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80093a4:	e003      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	75fb      	strb	r3, [r7, #23]
      break;
 80093aa:	e000      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80093ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10a      	bne.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093b4:	4b76      	ldr	r3, [pc, #472]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80093b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c2:	4973      	ldr	r1, [pc, #460]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	654b      	str	r3, [r1, #84]	; 0x54
 80093c8:	e001      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
 80093cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d029      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d003      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80093e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093e6:	d007      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80093e8:	e00f      	b.n	800940a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093ea:	4b69      	ldr	r3, [pc, #420]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80093ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ee:	4a68      	ldr	r2, [pc, #416]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80093f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80093f6:	e00b      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3304      	adds	r3, #4
 80093fc:	2102      	movs	r1, #2
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fb86 	bl	8009b10 <RCCEx_PLL2_Config>
 8009404:	4603      	mov	r3, r0
 8009406:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009408:	e002      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	75fb      	strb	r3, [r7, #23]
      break;
 800940e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009410:	7dfb      	ldrb	r3, [r7, #23]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d109      	bne.n	800942a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009416:	4b5e      	ldr	r3, [pc, #376]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800941a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009422:	495b      	ldr	r1, [pc, #364]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009424:	4313      	orrs	r3, r2
 8009426:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009428:	e001      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800942a:	7dfb      	ldrb	r3, [r7, #23]
 800942c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00a      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	3324      	adds	r3, #36	; 0x24
 800943e:	2102      	movs	r1, #2
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fc17 	bl	8009c74 <RCCEx_PLL3_Config>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d030      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009464:	d017      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009466:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800946a:	d811      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800946c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009470:	d013      	beq.n	800949a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009476:	d80b      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009478:	2b00      	cmp	r3, #0
 800947a:	d010      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800947c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009480:	d106      	bne.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009482:	4b43      	ldr	r3, [pc, #268]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009486:	4a42      	ldr	r2, [pc, #264]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800948c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800948e:	e007      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	75fb      	strb	r3, [r7, #23]
      break;
 8009494:	e004      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009496:	bf00      	nop
 8009498:	e002      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800949a:	bf00      	nop
 800949c:	e000      	b.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800949e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094a0:	7dfb      	ldrb	r3, [r7, #23]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d109      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094a6:	4b3a      	ldr	r3, [pc, #232]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b2:	4937      	ldr	r1, [pc, #220]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	654b      	str	r3, [r1, #84]	; 0x54
 80094b8:	e001      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d008      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80094ca:	4b31      	ldr	r3, [pc, #196]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d6:	492e      	ldr	r1, [pc, #184]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d009      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80094e8:	4b29      	ldr	r3, [pc, #164]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80094f6:	4926      	ldr	r1, [pc, #152]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d008      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009508:	4b21      	ldr	r3, [pc, #132]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800950a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800950c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009514:	491e      	ldr	r1, [pc, #120]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009516:	4313      	orrs	r3, r2
 8009518:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00d      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009526:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	4a19      	ldr	r2, [pc, #100]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800952c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009530:	6113      	str	r3, [r2, #16]
 8009532:	4b17      	ldr	r3, [pc, #92]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009534:	691a      	ldr	r2, [r3, #16]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800953c:	4914      	ldr	r1, [pc, #80]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800953e:	4313      	orrs	r3, r2
 8009540:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	da08      	bge.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800954a:	4b11      	ldr	r3, [pc, #68]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800954c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800954e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009556:	490e      	ldr	r1, [pc, #56]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009558:	4313      	orrs	r3, r2
 800955a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d009      	beq.n	800957c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009568:	4b09      	ldr	r3, [pc, #36]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800956a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009576:	4906      	ldr	r1, [pc, #24]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009578:	4313      	orrs	r3, r2
 800957a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800957c:	7dbb      	ldrb	r3, [r7, #22]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	e000      	b.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
}
 8009588:	4618      	mov	r0, r3
 800958a:	3718      	adds	r7, #24
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	58024400 	.word	0x58024400

08009594 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009598:	f7ff f860 	bl	800865c <HAL_RCC_GetHCLKFreq>
 800959c:	4602      	mov	r2, r0
 800959e:	4b06      	ldr	r3, [pc, #24]	; (80095b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	091b      	lsrs	r3, r3, #4
 80095a4:	f003 0307 	and.w	r3, r3, #7
 80095a8:	4904      	ldr	r1, [pc, #16]	; (80095bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095aa:	5ccb      	ldrb	r3, [r1, r3]
 80095ac:	f003 031f 	and.w	r3, r3, #31
 80095b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	58024400 	.word	0x58024400
 80095bc:	0800e93c 	.word	0x0800e93c

080095c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b089      	sub	sp, #36	; 0x24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095c8:	4ba1      	ldr	r3, [pc, #644]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095cc:	f003 0303 	and.w	r3, r3, #3
 80095d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80095d2:	4b9f      	ldr	r3, [pc, #636]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d6:	0b1b      	lsrs	r3, r3, #12
 80095d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095de:	4b9c      	ldr	r3, [pc, #624]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	091b      	lsrs	r3, r3, #4
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80095ea:	4b99      	ldr	r3, [pc, #612]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ee:	08db      	lsrs	r3, r3, #3
 80095f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	fb02 f303 	mul.w	r3, r2, r3
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009602:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 8111 	beq.w	8009830 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	2b02      	cmp	r3, #2
 8009612:	f000 8083 	beq.w	800971c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	2b02      	cmp	r3, #2
 800961a:	f200 80a1 	bhi.w	8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d056      	beq.n	80096d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800962a:	e099      	b.n	8009760 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800962c:	4b88      	ldr	r3, [pc, #544]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b00      	cmp	r3, #0
 8009636:	d02d      	beq.n	8009694 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009638:	4b85      	ldr	r3, [pc, #532]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	08db      	lsrs	r3, r3, #3
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	4a84      	ldr	r2, [pc, #528]	; (8009854 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009644:	fa22 f303 	lsr.w	r3, r2, r3
 8009648:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	ee07 3a90 	vmov	s15, r3
 8009650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009662:	4b7b      	ldr	r3, [pc, #492]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009672:	ed97 6a03 	vldr	s12, [r7, #12]
 8009676:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800967a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009692:	e087      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800969e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800985c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80096a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096a6:	4b6a      	ldr	r3, [pc, #424]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ae:	ee07 3a90 	vmov	s15, r3
 80096b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096d6:	e065      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ea:	4b59      	ldr	r3, [pc, #356]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f2:	ee07 3a90 	vmov	s15, r3
 80096f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80096fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800970e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800971a:	e043      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800972a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800972e:	4b48      	ldr	r3, [pc, #288]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009736:	ee07 3a90 	vmov	s15, r3
 800973a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800973e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009742:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800974a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800974e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800975e:	e021      	b.n	80097a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009860 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800976e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009772:	4b37      	ldr	r3, [pc, #220]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009782:	ed97 6a03 	vldr	s12, [r7, #12]
 8009786:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009858 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800978a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800978e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800979a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800979e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097a4:	4b2a      	ldr	r3, [pc, #168]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a8:	0a5b      	lsrs	r3, r3, #9
 80097aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ae:	ee07 3a90 	vmov	s15, r3
 80097b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097be:	edd7 6a07 	vldr	s13, [r7, #28]
 80097c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097ca:	ee17 2a90 	vmov	r2, s15
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80097d2:	4b1f      	ldr	r3, [pc, #124]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	0c1b      	lsrs	r3, r3, #16
 80097d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097dc:	ee07 3a90 	vmov	s15, r3
 80097e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80097f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097f8:	ee17 2a90 	vmov	r2, s15
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009800:	4b13      	ldr	r3, [pc, #76]	; (8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009804:	0e1b      	lsrs	r3, r3, #24
 8009806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800980a:	ee07 3a90 	vmov	s15, r3
 800980e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800981a:	edd7 6a07 	vldr	s13, [r7, #28]
 800981e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009826:	ee17 2a90 	vmov	r2, s15
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800982e:	e008      	b.n	8009842 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	609a      	str	r2, [r3, #8]
}
 8009842:	bf00      	nop
 8009844:	3724      	adds	r7, #36	; 0x24
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	58024400 	.word	0x58024400
 8009854:	03d09000 	.word	0x03d09000
 8009858:	46000000 	.word	0x46000000
 800985c:	4c742400 	.word	0x4c742400
 8009860:	4a742400 	.word	0x4a742400
 8009864:	4bbebc20 	.word	0x4bbebc20

08009868 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009868:	b480      	push	{r7}
 800986a:	b089      	sub	sp, #36	; 0x24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009870:	4ba1      	ldr	r3, [pc, #644]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800987a:	4b9f      	ldr	r3, [pc, #636]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800987c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987e:	0d1b      	lsrs	r3, r3, #20
 8009880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009884:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009886:	4b9c      	ldr	r3, [pc, #624]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	0a1b      	lsrs	r3, r3, #8
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009892:	4b99      	ldr	r3, [pc, #612]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009896:	08db      	lsrs	r3, r3, #3
 8009898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	fb02 f303 	mul.w	r3, r2, r3
 80098a2:	ee07 3a90 	vmov	s15, r3
 80098a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 8111 	beq.w	8009ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	f000 8083 	beq.w	80099c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	f200 80a1 	bhi.w	8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d056      	beq.n	8009980 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098d2:	e099      	b.n	8009a08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098d4:	4b88      	ldr	r3, [pc, #544]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 0320 	and.w	r3, r3, #32
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d02d      	beq.n	800993c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098e0:	4b85      	ldr	r3, [pc, #532]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	08db      	lsrs	r3, r3, #3
 80098e6:	f003 0303 	and.w	r3, r3, #3
 80098ea:	4a84      	ldr	r2, [pc, #528]	; (8009afc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80098ec:	fa22 f303 	lsr.w	r3, r2, r3
 80098f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	ee07 3a90 	vmov	s15, r3
 80098f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990a:	4b7b      	ldr	r3, [pc, #492]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991a:	ed97 6a03 	vldr	s12, [r7, #12]
 800991e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800992e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009936:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800993a:	e087      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	ee07 3a90 	vmov	s15, r3
 8009942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009946:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800994a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800994e:	4b6a      	ldr	r3, [pc, #424]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009962:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800996e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800997e:	e065      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800998e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009992:	4b59      	ldr	r3, [pc, #356]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80099a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099c2:	e043      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d6:	4b48      	ldr	r3, [pc, #288]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a06:	e021      	b.n	8009a4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	ee07 3a90 	vmov	s15, r3
 8009a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a1a:	4b37      	ldr	r3, [pc, #220]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009a4c:	4b2a      	ldr	r3, [pc, #168]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a50:	0a5b      	lsrs	r3, r3, #9
 8009a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a72:	ee17 2a90 	vmov	r2, s15
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009a7a:	4b1f      	ldr	r3, [pc, #124]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	0c1b      	lsrs	r3, r3, #16
 8009a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a84:	ee07 3a90 	vmov	s15, r3
 8009a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009aa0:	ee17 2a90 	vmov	r2, s15
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009aa8:	4b13      	ldr	r3, [pc, #76]	; (8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	0e1b      	lsrs	r3, r3, #24
 8009aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ace:	ee17 2a90 	vmov	r2, s15
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009ad6:	e008      	b.n	8009aea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	609a      	str	r2, [r3, #8]
}
 8009aea:	bf00      	nop
 8009aec:	3724      	adds	r7, #36	; 0x24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	58024400 	.word	0x58024400
 8009afc:	03d09000 	.word	0x03d09000
 8009b00:	46000000 	.word	0x46000000
 8009b04:	4c742400 	.word	0x4c742400
 8009b08:	4a742400 	.word	0x4a742400
 8009b0c:	4bbebc20 	.word	0x4bbebc20

08009b10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b1e:	4b53      	ldr	r3, [pc, #332]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b22:	f003 0303 	and.w	r3, r3, #3
 8009b26:	2b03      	cmp	r3, #3
 8009b28:	d101      	bne.n	8009b2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e099      	b.n	8009c62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009b2e:	4b4f      	ldr	r3, [pc, #316]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a4e      	ldr	r2, [pc, #312]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b3a:	f7f8 f9a7 	bl	8001e8c <HAL_GetTick>
 8009b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b40:	e008      	b.n	8009b54 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b42:	f7f8 f9a3 	bl	8001e8c <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d901      	bls.n	8009b54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e086      	b.n	8009c62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b54:	4b45      	ldr	r3, [pc, #276]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1f0      	bne.n	8009b42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b60:	4b42      	ldr	r3, [pc, #264]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	031b      	lsls	r3, r3, #12
 8009b6e:	493f      	ldr	r1, [pc, #252]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009b70:	4313      	orrs	r3, r2
 8009b72:	628b      	str	r3, [r1, #40]	; 0x28
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	3b01      	subs	r3, #1
 8009b84:	025b      	lsls	r3, r3, #9
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	041b      	lsls	r3, r3, #16
 8009b92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009b96:	431a      	orrs	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	061b      	lsls	r3, r3, #24
 8009ba0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ba4:	4931      	ldr	r1, [pc, #196]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009baa:	4b30      	ldr	r3, [pc, #192]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	492d      	ldr	r1, [pc, #180]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009bbc:	4b2b      	ldr	r3, [pc, #172]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	f023 0220 	bic.w	r2, r3, #32
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	4928      	ldr	r1, [pc, #160]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009bce:	4b27      	ldr	r3, [pc, #156]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd2:	4a26      	ldr	r2, [pc, #152]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bd4:	f023 0310 	bic.w	r3, r3, #16
 8009bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009bda:	4b24      	ldr	r3, [pc, #144]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bde:	4b24      	ldr	r3, [pc, #144]	; (8009c70 <RCCEx_PLL2_Config+0x160>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	69d2      	ldr	r2, [r2, #28]
 8009be6:	00d2      	lsls	r2, r2, #3
 8009be8:	4920      	ldr	r1, [pc, #128]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009bee:	4b1f      	ldr	r3, [pc, #124]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf2:	4a1e      	ldr	r2, [pc, #120]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009bf4:	f043 0310 	orr.w	r3, r3, #16
 8009bf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d106      	bne.n	8009c0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c00:	4b1a      	ldr	r3, [pc, #104]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c04:	4a19      	ldr	r2, [pc, #100]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c0c:	e00f      	b.n	8009c2e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d106      	bne.n	8009c22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c14:	4b15      	ldr	r3, [pc, #84]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	4a14      	ldr	r2, [pc, #80]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c20:	e005      	b.n	8009c2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c22:	4b12      	ldr	r3, [pc, #72]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c26:	4a11      	ldr	r2, [pc, #68]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009c2e:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a0e      	ldr	r2, [pc, #56]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c3a:	f7f8 f927 	bl	8001e8c <HAL_GetTick>
 8009c3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c40:	e008      	b.n	8009c54 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009c42:	f7f8 f923 	bl	8001e8c <HAL_GetTick>
 8009c46:	4602      	mov	r2, r0
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d901      	bls.n	8009c54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e006      	b.n	8009c62 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <RCCEx_PLL2_Config+0x15c>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d0f0      	beq.n	8009c42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	58024400 	.word	0x58024400
 8009c70:	ffff0007 	.word	0xffff0007

08009c74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c82:	4b53      	ldr	r3, [pc, #332]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c86:	f003 0303 	and.w	r3, r3, #3
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d101      	bne.n	8009c92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e099      	b.n	8009dc6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009c92:	4b4f      	ldr	r3, [pc, #316]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a4e      	ldr	r2, [pc, #312]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c9e:	f7f8 f8f5 	bl	8001e8c <HAL_GetTick>
 8009ca2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ca4:	e008      	b.n	8009cb8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009ca6:	f7f8 f8f1 	bl	8001e8c <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d901      	bls.n	8009cb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e086      	b.n	8009dc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cb8:	4b45      	ldr	r3, [pc, #276]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1f0      	bne.n	8009ca6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009cc4:	4b42      	ldr	r3, [pc, #264]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	051b      	lsls	r3, r3, #20
 8009cd2:	493f      	ldr	r1, [pc, #252]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	628b      	str	r3, [r1, #40]	; 0x28
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	025b      	lsls	r3, r3, #9
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	431a      	orrs	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	041b      	lsls	r3, r3, #16
 8009cf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	3b01      	subs	r3, #1
 8009d02:	061b      	lsls	r3, r3, #24
 8009d04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d08:	4931      	ldr	r1, [pc, #196]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d0e:	4b30      	ldr	r3, [pc, #192]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	492d      	ldr	r1, [pc, #180]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d20:	4b2b      	ldr	r3, [pc, #172]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	4928      	ldr	r1, [pc, #160]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d32:	4b27      	ldr	r3, [pc, #156]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d36:	4a26      	ldr	r2, [pc, #152]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d3e:	4b24      	ldr	r3, [pc, #144]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d42:	4b24      	ldr	r3, [pc, #144]	; (8009dd4 <RCCEx_PLL3_Config+0x160>)
 8009d44:	4013      	ands	r3, r2
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	69d2      	ldr	r2, [r2, #28]
 8009d4a:	00d2      	lsls	r2, r2, #3
 8009d4c:	4920      	ldr	r1, [pc, #128]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d52:	4b1f      	ldr	r3, [pc, #124]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	4a1e      	ldr	r2, [pc, #120]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d106      	bne.n	8009d72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d64:	4b1a      	ldr	r3, [pc, #104]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d68:	4a19      	ldr	r2, [pc, #100]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d70:	e00f      	b.n	8009d92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d106      	bne.n	8009d86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d78:	4b15      	ldr	r3, [pc, #84]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	4a14      	ldr	r2, [pc, #80]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d84:	e005      	b.n	8009d92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d86:	4b12      	ldr	r3, [pc, #72]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	4a11      	ldr	r2, [pc, #68]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009d92:	4b0f      	ldr	r3, [pc, #60]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a0e      	ldr	r2, [pc, #56]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d9e:	f7f8 f875 	bl	8001e8c <HAL_GetTick>
 8009da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009da4:	e008      	b.n	8009db8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009da6:	f7f8 f871 	bl	8001e8c <HAL_GetTick>
 8009daa:	4602      	mov	r2, r0
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d901      	bls.n	8009db8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e006      	b.n	8009dc6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009db8:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <RCCEx_PLL3_Config+0x15c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d0f0      	beq.n	8009da6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	58024400 	.word	0x58024400
 8009dd4:	ffff0007 	.word	0xffff0007

08009dd8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e0eb      	b.n	8009fc6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a75      	ldr	r2, [pc, #468]	; (8009fd0 <HAL_SPI_Init+0x1f8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d00f      	beq.n	8009e1e <HAL_SPI_Init+0x46>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a74      	ldr	r2, [pc, #464]	; (8009fd4 <HAL_SPI_Init+0x1fc>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d00a      	beq.n	8009e1e <HAL_SPI_Init+0x46>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a72      	ldr	r2, [pc, #456]	; (8009fd8 <HAL_SPI_Init+0x200>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d005      	beq.n	8009e1e <HAL_SPI_Init+0x46>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	2b0f      	cmp	r3, #15
 8009e18:	d901      	bls.n	8009e1e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e0d3      	b.n	8009fc6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f8dc 	bl	8009fdc <SPI_GetPacketSize>
 8009e24:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a69      	ldr	r2, [pc, #420]	; (8009fd0 <HAL_SPI_Init+0x1f8>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d00c      	beq.n	8009e4a <HAL_SPI_Init+0x72>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a67      	ldr	r2, [pc, #412]	; (8009fd4 <HAL_SPI_Init+0x1fc>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d007      	beq.n	8009e4a <HAL_SPI_Init+0x72>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a66      	ldr	r2, [pc, #408]	; (8009fd8 <HAL_SPI_Init+0x200>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d002      	beq.n	8009e4a <HAL_SPI_Init+0x72>
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d811      	bhi.n	8009e6e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e4e:	4a60      	ldr	r2, [pc, #384]	; (8009fd0 <HAL_SPI_Init+0x1f8>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d009      	beq.n	8009e68 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a5e      	ldr	r2, [pc, #376]	; (8009fd4 <HAL_SPI_Init+0x1fc>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d004      	beq.n	8009e68 <HAL_SPI_Init+0x90>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a5d      	ldr	r2, [pc, #372]	; (8009fd8 <HAL_SPI_Init+0x200>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d104      	bne.n	8009e72 <HAL_SPI_Init+0x9a>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2b10      	cmp	r3, #16
 8009e6c:	d901      	bls.n	8009e72 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e0a9      	b.n	8009fc6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7f7 fc42 	bl	8001710 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0201 	bic.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	699b      	ldr	r3, [r3, #24]
 8009ea8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009eac:	d119      	bne.n	8009ee2 <HAL_SPI_Init+0x10a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eb6:	d103      	bne.n	8009ec0 <HAL_SPI_Init+0xe8>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d008      	beq.n	8009ed2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10c      	bne.n	8009ee2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ed0:	d107      	bne.n	8009ee2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ee0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	69da      	ldr	r2, [r3, #28]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eea:	431a      	orrs	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	431a      	orrs	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef4:	ea42 0103 	orr.w	r1, r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	68da      	ldr	r2, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	430a      	orrs	r2, r1
 8009f02:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	431a      	orrs	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	431a      	orrs	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6a1b      	ldr	r3, [r3, #32]
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	431a      	orrs	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f36:	431a      	orrs	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f42:	ea42 0103 	orr.w	r1, r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d113      	bne.n	8009f82 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f6c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f80:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f022 0201 	bic.w	r2, r2, #1
 8009f90:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	40013000 	.word	0x40013000
 8009fd4:	40003800 	.word	0x40003800
 8009fd8:	40003c00 	.word	0x40003c00

08009fdc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe8:	095b      	lsrs	r3, r3, #5
 8009fea:	3301      	adds	r3, #1
 8009fec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	3307      	adds	r3, #7
 8009ffa:	08db      	lsrs	r3, r3, #3
 8009ffc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	fb02 f303 	mul.w	r3, r2, r3
}
 800a006:	4618      	mov	r0, r3
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b082      	sub	sp, #8
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e049      	b.n	800a0b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d106      	bne.n	800a03e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7f7 fbcf 	bl	80017dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2202      	movs	r2, #2
 800a042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3304      	adds	r3, #4
 800a04e:	4619      	mov	r1, r3
 800a050:	4610      	mov	r0, r2
 800a052:	f000 f9ed 	bl	800a430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d001      	beq.n	800a0d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e04f      	b.n	800a178 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68da      	ldr	r2, [r3, #12]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f042 0201 	orr.w	r2, r2, #1
 800a0ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a23      	ldr	r2, [pc, #140]	; (800a184 <HAL_TIM_Base_Start_IT+0xc4>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d01d      	beq.n	800a136 <HAL_TIM_Base_Start_IT+0x76>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a102:	d018      	beq.n	800a136 <HAL_TIM_Base_Start_IT+0x76>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a1f      	ldr	r2, [pc, #124]	; (800a188 <HAL_TIM_Base_Start_IT+0xc8>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d013      	beq.n	800a136 <HAL_TIM_Base_Start_IT+0x76>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a1e      	ldr	r2, [pc, #120]	; (800a18c <HAL_TIM_Base_Start_IT+0xcc>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d00e      	beq.n	800a136 <HAL_TIM_Base_Start_IT+0x76>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a1c      	ldr	r2, [pc, #112]	; (800a190 <HAL_TIM_Base_Start_IT+0xd0>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d009      	beq.n	800a136 <HAL_TIM_Base_Start_IT+0x76>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a1b      	ldr	r2, [pc, #108]	; (800a194 <HAL_TIM_Base_Start_IT+0xd4>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d004      	beq.n	800a136 <HAL_TIM_Base_Start_IT+0x76>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a19      	ldr	r2, [pc, #100]	; (800a198 <HAL_TIM_Base_Start_IT+0xd8>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d115      	bne.n	800a162 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	689a      	ldr	r2, [r3, #8]
 800a13c:	4b17      	ldr	r3, [pc, #92]	; (800a19c <HAL_TIM_Base_Start_IT+0xdc>)
 800a13e:	4013      	ands	r3, r2
 800a140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b06      	cmp	r3, #6
 800a146:	d015      	beq.n	800a174 <HAL_TIM_Base_Start_IT+0xb4>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a14e:	d011      	beq.n	800a174 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f042 0201 	orr.w	r2, r2, #1
 800a15e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a160:	e008      	b.n	800a174 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681a      	ldr	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f042 0201 	orr.w	r2, r2, #1
 800a170:	601a      	str	r2, [r3, #0]
 800a172:	e000      	b.n	800a176 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a174:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	40010000 	.word	0x40010000
 800a188:	40000400 	.word	0x40000400
 800a18c:	40000800 	.word	0x40000800
 800a190:	40000c00 	.word	0x40000c00
 800a194:	40010400 	.word	0x40010400
 800a198:	40001800 	.word	0x40001800
 800a19c:	00010007 	.word	0x00010007

0800a1a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f003 0302 	and.w	r3, r3, #2
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d122      	bne.n	800a1fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	f003 0302 	and.w	r3, r3, #2
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d11b      	bne.n	800a1fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f06f 0202 	mvn.w	r2, #2
 800a1cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f905 	bl	800a3f2 <HAL_TIM_IC_CaptureCallback>
 800a1e8:	e005      	b.n	800a1f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f8f7 	bl	800a3de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f908 	bl	800a406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	f003 0304 	and.w	r3, r3, #4
 800a206:	2b04      	cmp	r3, #4
 800a208:	d122      	bne.n	800a250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f003 0304 	and.w	r3, r3, #4
 800a214:	2b04      	cmp	r3, #4
 800a216:	d11b      	bne.n	800a250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f06f 0204 	mvn.w	r2, #4
 800a220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2202      	movs	r2, #2
 800a226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	699b      	ldr	r3, [r3, #24]
 800a22e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f000 f8db 	bl	800a3f2 <HAL_TIM_IC_CaptureCallback>
 800a23c:	e005      	b.n	800a24a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f8cd 	bl	800a3de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f8de 	bl	800a406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	f003 0308 	and.w	r3, r3, #8
 800a25a:	2b08      	cmp	r3, #8
 800a25c:	d122      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f003 0308 	and.w	r3, r3, #8
 800a268:	2b08      	cmp	r3, #8
 800a26a:	d11b      	bne.n	800a2a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f06f 0208 	mvn.w	r2, #8
 800a274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2204      	movs	r2, #4
 800a27a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f8b1 	bl	800a3f2 <HAL_TIM_IC_CaptureCallback>
 800a290:	e005      	b.n	800a29e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f8a3 	bl	800a3de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f8b4 	bl	800a406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	f003 0310 	and.w	r3, r3, #16
 800a2ae:	2b10      	cmp	r3, #16
 800a2b0:	d122      	bne.n	800a2f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	f003 0310 	and.w	r3, r3, #16
 800a2bc:	2b10      	cmp	r3, #16
 800a2be:	d11b      	bne.n	800a2f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f06f 0210 	mvn.w	r2, #16
 800a2c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2208      	movs	r2, #8
 800a2ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	69db      	ldr	r3, [r3, #28]
 800a2d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d003      	beq.n	800a2e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f887 	bl	800a3f2 <HAL_TIM_IC_CaptureCallback>
 800a2e4:	e005      	b.n	800a2f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f879 	bl	800a3de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f88a 	bl	800a406 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	2b01      	cmp	r3, #1
 800a304:	d10e      	bne.n	800a324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	2b01      	cmp	r3, #1
 800a312:	d107      	bne.n	800a324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f06f 0201 	mvn.w	r2, #1
 800a31c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7f7 fb7e 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32e:	2b80      	cmp	r3, #128	; 0x80
 800a330:	d10e      	bne.n	800a350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a33c:	2b80      	cmp	r3, #128	; 0x80
 800a33e:	d107      	bne.n	800a350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f99c 	bl	800a688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a35a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a35e:	d10e      	bne.n	800a37e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a36a:	2b80      	cmp	r3, #128	; 0x80
 800a36c:	d107      	bne.n	800a37e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f98f 	bl	800a69c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a388:	2b40      	cmp	r3, #64	; 0x40
 800a38a:	d10e      	bne.n	800a3aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a396:	2b40      	cmp	r3, #64	; 0x40
 800a398:	d107      	bne.n	800a3aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f838 	bl	800a41a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	f003 0320 	and.w	r3, r3, #32
 800a3b4:	2b20      	cmp	r3, #32
 800a3b6:	d10e      	bne.n	800a3d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	f003 0320 	and.w	r3, r3, #32
 800a3c2:	2b20      	cmp	r3, #32
 800a3c4:	d107      	bne.n	800a3d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f06f 0220 	mvn.w	r2, #32
 800a3ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f94f 	bl	800a674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b083      	sub	sp, #12
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a3e6:	bf00      	nop
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b083      	sub	sp, #12
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a3fa:	bf00      	nop
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a406:	b480      	push	{r7}
 800a408:	b083      	sub	sp, #12
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a40e:	bf00      	nop
 800a410:	370c      	adds	r7, #12
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a422:	bf00      	nop
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr
	...

0800a430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a430:	b480      	push	{r7}
 800a432:	b085      	sub	sp, #20
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	4a40      	ldr	r2, [pc, #256]	; (800a544 <TIM_Base_SetConfig+0x114>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d013      	beq.n	800a470 <TIM_Base_SetConfig+0x40>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a44e:	d00f      	beq.n	800a470 <TIM_Base_SetConfig+0x40>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a3d      	ldr	r2, [pc, #244]	; (800a548 <TIM_Base_SetConfig+0x118>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d00b      	beq.n	800a470 <TIM_Base_SetConfig+0x40>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a3c      	ldr	r2, [pc, #240]	; (800a54c <TIM_Base_SetConfig+0x11c>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d007      	beq.n	800a470 <TIM_Base_SetConfig+0x40>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a3b      	ldr	r2, [pc, #236]	; (800a550 <TIM_Base_SetConfig+0x120>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d003      	beq.n	800a470 <TIM_Base_SetConfig+0x40>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a3a      	ldr	r2, [pc, #232]	; (800a554 <TIM_Base_SetConfig+0x124>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d108      	bne.n	800a482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	4313      	orrs	r3, r2
 800a480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a2f      	ldr	r2, [pc, #188]	; (800a544 <TIM_Base_SetConfig+0x114>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d01f      	beq.n	800a4ca <TIM_Base_SetConfig+0x9a>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a490:	d01b      	beq.n	800a4ca <TIM_Base_SetConfig+0x9a>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a2c      	ldr	r2, [pc, #176]	; (800a548 <TIM_Base_SetConfig+0x118>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d017      	beq.n	800a4ca <TIM_Base_SetConfig+0x9a>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a2b      	ldr	r2, [pc, #172]	; (800a54c <TIM_Base_SetConfig+0x11c>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d013      	beq.n	800a4ca <TIM_Base_SetConfig+0x9a>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a2a      	ldr	r2, [pc, #168]	; (800a550 <TIM_Base_SetConfig+0x120>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d00f      	beq.n	800a4ca <TIM_Base_SetConfig+0x9a>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4a29      	ldr	r2, [pc, #164]	; (800a554 <TIM_Base_SetConfig+0x124>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d00b      	beq.n	800a4ca <TIM_Base_SetConfig+0x9a>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a28      	ldr	r2, [pc, #160]	; (800a558 <TIM_Base_SetConfig+0x128>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d007      	beq.n	800a4ca <TIM_Base_SetConfig+0x9a>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a27      	ldr	r2, [pc, #156]	; (800a55c <TIM_Base_SetConfig+0x12c>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d003      	beq.n	800a4ca <TIM_Base_SetConfig+0x9a>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a26      	ldr	r2, [pc, #152]	; (800a560 <TIM_Base_SetConfig+0x130>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d108      	bne.n	800a4dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	689a      	ldr	r2, [r3, #8]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a10      	ldr	r2, [pc, #64]	; (800a544 <TIM_Base_SetConfig+0x114>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d00f      	beq.n	800a528 <TIM_Base_SetConfig+0xf8>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a12      	ldr	r2, [pc, #72]	; (800a554 <TIM_Base_SetConfig+0x124>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d00b      	beq.n	800a528 <TIM_Base_SetConfig+0xf8>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a11      	ldr	r2, [pc, #68]	; (800a558 <TIM_Base_SetConfig+0x128>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d007      	beq.n	800a528 <TIM_Base_SetConfig+0xf8>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a10      	ldr	r2, [pc, #64]	; (800a55c <TIM_Base_SetConfig+0x12c>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d003      	beq.n	800a528 <TIM_Base_SetConfig+0xf8>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a0f      	ldr	r2, [pc, #60]	; (800a560 <TIM_Base_SetConfig+0x130>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d103      	bne.n	800a530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	691a      	ldr	r2, [r3, #16]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	615a      	str	r2, [r3, #20]
}
 800a536:	bf00      	nop
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr
 800a542:	bf00      	nop
 800a544:	40010000 	.word	0x40010000
 800a548:	40000400 	.word	0x40000400
 800a54c:	40000800 	.word	0x40000800
 800a550:	40000c00 	.word	0x40000c00
 800a554:	40010400 	.word	0x40010400
 800a558:	40014000 	.word	0x40014000
 800a55c:	40014400 	.word	0x40014400
 800a560:	40014800 	.word	0x40014800

0800a564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a574:	2b01      	cmp	r3, #1
 800a576:	d101      	bne.n	800a57c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a578:	2302      	movs	r3, #2
 800a57a:	e068      	b.n	800a64e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2202      	movs	r2, #2
 800a588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a2e      	ldr	r2, [pc, #184]	; (800a65c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d004      	beq.n	800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a2d      	ldr	r2, [pc, #180]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d108      	bne.n	800a5c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a1e      	ldr	r2, [pc, #120]	; (800a65c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d01d      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ee:	d018      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a1b      	ldr	r2, [pc, #108]	; (800a664 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d013      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a1a      	ldr	r2, [pc, #104]	; (800a668 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d00e      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a18      	ldr	r2, [pc, #96]	; (800a66c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d009      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a13      	ldr	r2, [pc, #76]	; (800a660 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d004      	beq.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a14      	ldr	r2, [pc, #80]	; (800a670 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d10c      	bne.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	4313      	orrs	r3, r2
 800a632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	40010000 	.word	0x40010000
 800a660:	40010400 	.word	0x40010400
 800a664:	40000400 	.word	0x40000400
 800a668:	40000800 	.word	0x40000800
 800a66c:	40000c00 	.word	0x40000c00
 800a670:	40001800 	.word	0x40001800

0800a674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d101      	bne.n	800a6c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e042      	b.n	800a748 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f7f7 f8a9 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2224      	movs	r2, #36	; 0x24
 800a6de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 0201 	bic.w	r2, r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fb90 	bl	800ae18 <UART_SetConfig>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d101      	bne.n	800a702 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e022      	b.n	800a748 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f001 f8e4 	bl	800b8d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a71e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	689a      	ldr	r2, [r3, #8]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a72e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0201 	orr.w	r2, r2, #1
 800a73e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f001 f96b 	bl	800ba1c <UART_CheckIdleState>
 800a746:	4603      	mov	r3, r0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	4613      	mov	r3, r2
 800a75c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a764:	2b20      	cmp	r3, #32
 800a766:	d168      	bne.n	800a83a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d002      	beq.n	800a774 <HAL_UART_Transmit_DMA+0x24>
 800a76e:	88fb      	ldrh	r3, [r7, #6]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e061      	b.n	800a83c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d101      	bne.n	800a786 <HAL_UART_Transmit_DMA+0x36>
 800a782:	2302      	movs	r3, #2
 800a784:	e05a      	b.n	800a83c <HAL_UART_Transmit_DMA+0xec>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	88fa      	ldrh	r2, [r7, #6]
 800a798:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	88fa      	ldrh	r2, [r7, #6]
 800a7a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2221      	movs	r2, #33	; 0x21
 800a7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d02c      	beq.n	800a816 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7c0:	4a20      	ldr	r2, [pc, #128]	; (800a844 <HAL_UART_Transmit_DMA+0xf4>)
 800a7c2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7c8:	4a1f      	ldr	r2, [pc, #124]	; (800a848 <HAL_UART_Transmit_DMA+0xf8>)
 800a7ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7d0:	4a1e      	ldr	r2, [pc, #120]	; (800a84c <HAL_UART_Transmit_DMA+0xfc>)
 800a7d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7d8:	2200      	movs	r2, #0
 800a7da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	3328      	adds	r3, #40	; 0x28
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	88fb      	ldrh	r3, [r7, #6]
 800a7f0:	f7f7 fff4 	bl	80027dc <HAL_DMA_Start_IT>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00d      	beq.n	800a816 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2210      	movs	r2, #16
 800a7fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2220      	movs	r2, #32
 800a80e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800a812:	2301      	movs	r3, #1
 800a814:	e012      	b.n	800a83c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2240      	movs	r2, #64	; 0x40
 800a81c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	689a      	ldr	r2, [r3, #8]
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a834:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	e000      	b.n	800a83c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800a83a:	2302      	movs	r3, #2
  }
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	0800bc55 	.word	0x0800bc55
 800a848:	0800bca5 	.word	0x0800bca5
 800a84c:	0800bcc1 	.word	0x0800bcc1

0800a850 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b088      	sub	sp, #32
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	69db      	ldr	r3, [r3, #28]
 800a85e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a870:	69fa      	ldr	r2, [r7, #28]
 800a872:	f640 030f 	movw	r3, #2063	; 0x80f
 800a876:	4013      	ands	r3, r2
 800a878:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d118      	bne.n	800a8b2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	f003 0320 	and.w	r3, r3, #32
 800a886:	2b00      	cmp	r3, #0
 800a888:	d013      	beq.n	800a8b2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	f003 0320 	and.w	r3, r3, #32
 800a890:	2b00      	cmp	r3, #0
 800a892:	d104      	bne.n	800a89e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a894:	697b      	ldr	r3, [r7, #20]
 800a896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d009      	beq.n	800a8b2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 8282 	beq.w	800adac <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	4798      	blx	r3
      }
      return;
 800a8b0:	e27c      	b.n	800adac <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	f000 80ef 	beq.w	800aa98 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a8ba:	697a      	ldr	r2, [r7, #20]
 800a8bc:	4b73      	ldr	r3, [pc, #460]	; (800aa8c <HAL_UART_IRQHandler+0x23c>)
 800a8be:	4013      	ands	r3, r2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d105      	bne.n	800a8d0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a8c4:	69ba      	ldr	r2, [r7, #24]
 800a8c6:	4b72      	ldr	r3, [pc, #456]	; (800aa90 <HAL_UART_IRQHandler+0x240>)
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f000 80e4 	beq.w	800aa98 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	f003 0301 	and.w	r3, r3, #1
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d010      	beq.n	800a8fc <HAL_UART_IRQHandler+0xac>
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00b      	beq.n	800a8fc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8f2:	f043 0201 	orr.w	r2, r3, #1
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	f003 0302 	and.w	r3, r3, #2
 800a902:	2b00      	cmp	r3, #0
 800a904:	d010      	beq.n	800a928 <HAL_UART_IRQHandler+0xd8>
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00b      	beq.n	800a928 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2202      	movs	r2, #2
 800a916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a91e:	f043 0204 	orr.w	r2, r3, #4
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	f003 0304 	and.w	r3, r3, #4
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d010      	beq.n	800a954 <HAL_UART_IRQHandler+0x104>
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f003 0301 	and.w	r3, r3, #1
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00b      	beq.n	800a954 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2204      	movs	r2, #4
 800a942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a94a:	f043 0202 	orr.w	r2, r3, #2
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	f003 0308 	and.w	r3, r3, #8
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d015      	beq.n	800a98a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	f003 0320 	and.w	r3, r3, #32
 800a964:	2b00      	cmp	r3, #0
 800a966:	d104      	bne.n	800a972 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	4b48      	ldr	r3, [pc, #288]	; (800aa8c <HAL_UART_IRQHandler+0x23c>)
 800a96c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00b      	beq.n	800a98a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2208      	movs	r2, #8
 800a978:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a980:	f043 0208 	orr.w	r2, r3, #8
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a990:	2b00      	cmp	r3, #0
 800a992:	d011      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x168>
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00c      	beq.n	800a9b8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ae:	f043 0220 	orr.w	r2, r3, #32
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 81f6 	beq.w	800adb0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a9c4:	69fb      	ldr	r3, [r7, #28]
 800a9c6:	f003 0320 	and.w	r3, r3, #32
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d011      	beq.n	800a9f2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	f003 0320 	and.w	r3, r3, #32
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d104      	bne.n	800a9e2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d007      	beq.n	800a9f2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa04:	2b40      	cmp	r3, #64	; 0x40
 800aa06:	d004      	beq.n	800aa12 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d031      	beq.n	800aa76 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f001 f8ec 	bl	800bbf0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa22:	2b40      	cmp	r3, #64	; 0x40
 800aa24:	d123      	bne.n	800aa6e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	689a      	ldr	r2, [r3, #8]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa34:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d013      	beq.n	800aa66 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa42:	4a14      	ldr	r2, [pc, #80]	; (800aa94 <HAL_UART_IRQHandler+0x244>)
 800aa44:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7f8 fc4e 	bl	80032ec <HAL_DMA_Abort_IT>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d017      	beq.n	800aa86 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800aa60:	4610      	mov	r0, r2
 800aa62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa64:	e00f      	b.n	800aa86 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f9c0 	bl	800adec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa6c:	e00b      	b.n	800aa86 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f9bc 	bl	800adec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa74:	e007      	b.n	800aa86 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 f9b8 	bl	800adec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800aa84:	e194      	b.n	800adb0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa86:	bf00      	nop
    return;
 800aa88:	e192      	b.n	800adb0 <HAL_UART_IRQHandler+0x560>
 800aa8a:	bf00      	nop
 800aa8c:	10000001 	.word	0x10000001
 800aa90:	04000120 	.word	0x04000120
 800aa94:	0800bd41 	.word	0x0800bd41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	f040 810f 	bne.w	800acc0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	f003 0310 	and.w	r3, r3, #16
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 8109 	beq.w	800acc0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	f003 0310 	and.w	r3, r3, #16
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 8103 	beq.w	800acc0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2210      	movs	r2, #16
 800aac0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aacc:	2b40      	cmp	r3, #64	; 0x40
 800aace:	f040 80bb 	bne.w	800ac48 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a96      	ldr	r2, [pc, #600]	; (800ad34 <HAL_UART_IRQHandler+0x4e4>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d059      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a94      	ldr	r2, [pc, #592]	; (800ad38 <HAL_UART_IRQHandler+0x4e8>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d053      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a92      	ldr	r2, [pc, #584]	; (800ad3c <HAL_UART_IRQHandler+0x4ec>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d04d      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a90      	ldr	r2, [pc, #576]	; (800ad40 <HAL_UART_IRQHandler+0x4f0>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d047      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a8e      	ldr	r2, [pc, #568]	; (800ad44 <HAL_UART_IRQHandler+0x4f4>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d041      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a8c      	ldr	r2, [pc, #560]	; (800ad48 <HAL_UART_IRQHandler+0x4f8>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d03b      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a8a      	ldr	r2, [pc, #552]	; (800ad4c <HAL_UART_IRQHandler+0x4fc>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d035      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a88      	ldr	r2, [pc, #544]	; (800ad50 <HAL_UART_IRQHandler+0x500>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d02f      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a86      	ldr	r2, [pc, #536]	; (800ad54 <HAL_UART_IRQHandler+0x504>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d029      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a84      	ldr	r2, [pc, #528]	; (800ad58 <HAL_UART_IRQHandler+0x508>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d023      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a82      	ldr	r2, [pc, #520]	; (800ad5c <HAL_UART_IRQHandler+0x50c>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d01d      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a80      	ldr	r2, [pc, #512]	; (800ad60 <HAL_UART_IRQHandler+0x510>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d017      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a7e      	ldr	r2, [pc, #504]	; (800ad64 <HAL_UART_IRQHandler+0x514>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d011      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a7c      	ldr	r2, [pc, #496]	; (800ad68 <HAL_UART_IRQHandler+0x518>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d00b      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a7a      	ldr	r2, [pc, #488]	; (800ad6c <HAL_UART_IRQHandler+0x51c>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d005      	beq.n	800ab92 <HAL_UART_IRQHandler+0x342>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a78      	ldr	r2, [pc, #480]	; (800ad70 <HAL_UART_IRQHandler+0x520>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d105      	bne.n	800ab9e <HAL_UART_IRQHandler+0x34e>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	e004      	b.n	800aba8 <HAL_UART_IRQHandler+0x358>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800abaa:	893b      	ldrh	r3, [r7, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f000 8101 	beq.w	800adb4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800abb8:	893a      	ldrh	r2, [r7, #8]
 800abba:	429a      	cmp	r2, r3
 800abbc:	f080 80fa 	bcs.w	800adb4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	893a      	ldrh	r2, [r7, #8]
 800abc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abcc:	69db      	ldr	r3, [r3, #28]
 800abce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abd2:	d02b      	beq.n	800ac2c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800abe2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689a      	ldr	r2, [r3, #8]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f022 0201 	bic.w	r2, r2, #1
 800abf2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	689a      	ldr	r2, [r3, #8]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac02:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2220      	movs	r2, #32
 800ac08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 0210 	bic.w	r2, r2, #16
 800ac20:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7f8 f842 	bl	8002cb0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f8dd 	bl	800ae00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac46:	e0b5      	b.n	800adb4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 80a8 	beq.w	800adb8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800ac68:	897b      	ldrh	r3, [r7, #10]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f000 80a4 	beq.w	800adb8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac7e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6899      	ldr	r1, [r3, #8]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	4b3a      	ldr	r3, [pc, #232]	; (800ad74 <HAL_UART_IRQHandler+0x524>)
 800ac8c:	400b      	ands	r3, r1
 800ac8e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2220      	movs	r2, #32
 800ac94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f022 0210 	bic.w	r2, r2, #16
 800acb2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800acb4:	897b      	ldrh	r3, [r7, #10]
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f8a1 	bl	800ae00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800acbe:	e07b      	b.n	800adb8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00d      	beq.n	800ace6 <HAL_UART_IRQHandler+0x496>
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d008      	beq.n	800ace6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800acdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 f85e 	bl	800bda0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ace4:	e06b      	b.n	800adbe <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acec:	2b00      	cmp	r3, #0
 800acee:	d012      	beq.n	800ad16 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d104      	bne.n	800ad04 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d008      	beq.n	800ad16 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d057      	beq.n	800adbc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	4798      	blx	r3
    }
    return;
 800ad14:	e052      	b.n	800adbc <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d02b      	beq.n	800ad78 <HAL_UART_IRQHandler+0x528>
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d026      	beq.n	800ad78 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f001 f81e 	bl	800bd6c <UART_EndTransmit_IT>
    return;
 800ad30:	e045      	b.n	800adbe <HAL_UART_IRQHandler+0x56e>
 800ad32:	bf00      	nop
 800ad34:	40020010 	.word	0x40020010
 800ad38:	40020028 	.word	0x40020028
 800ad3c:	40020040 	.word	0x40020040
 800ad40:	40020058 	.word	0x40020058
 800ad44:	40020070 	.word	0x40020070
 800ad48:	40020088 	.word	0x40020088
 800ad4c:	400200a0 	.word	0x400200a0
 800ad50:	400200b8 	.word	0x400200b8
 800ad54:	40020410 	.word	0x40020410
 800ad58:	40020428 	.word	0x40020428
 800ad5c:	40020440 	.word	0x40020440
 800ad60:	40020458 	.word	0x40020458
 800ad64:	40020470 	.word	0x40020470
 800ad68:	40020488 	.word	0x40020488
 800ad6c:	400204a0 	.word	0x400204a0
 800ad70:	400204b8 	.word	0x400204b8
 800ad74:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d008      	beq.n	800ad94 <HAL_UART_IRQHandler+0x544>
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f001 f81b 	bl	800bdc8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ad92:	e014      	b.n	800adbe <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00f      	beq.n	800adbe <HAL_UART_IRQHandler+0x56e>
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	da0c      	bge.n	800adbe <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f001 f805 	bl	800bdb4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800adaa:	e008      	b.n	800adbe <HAL_UART_IRQHandler+0x56e>
      return;
 800adac:	bf00      	nop
 800adae:	e006      	b.n	800adbe <HAL_UART_IRQHandler+0x56e>
    return;
 800adb0:	bf00      	nop
 800adb2:	e004      	b.n	800adbe <HAL_UART_IRQHandler+0x56e>
      return;
 800adb4:	bf00      	nop
 800adb6:	e002      	b.n	800adbe <HAL_UART_IRQHandler+0x56e>
      return;
 800adb8:	bf00      	nop
 800adba:	e000      	b.n	800adbe <HAL_UART_IRQHandler+0x56e>
    return;
 800adbc:	bf00      	nop
  }
}
 800adbe:	3720      	adds	r7, #32
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ae0c:	bf00      	nop
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae18:	b5b0      	push	{r4, r5, r7, lr}
 800ae1a:	b08e      	sub	sp, #56	; 0x38
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	689a      	ldr	r2, [r3, #8]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	695b      	ldr	r3, [r3, #20]
 800ae34:	431a      	orrs	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	69db      	ldr	r3, [r3, #28]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	4bbf      	ldr	r3, [pc, #764]	; (800b144 <UART_SetConfig+0x32c>)
 800ae46:	4013      	ands	r3, r2
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	6812      	ldr	r2, [r2, #0]
 800ae4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae4e:	430b      	orrs	r3, r1
 800ae50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	68da      	ldr	r2, [r3, #12]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	430a      	orrs	r2, r1
 800ae66:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4ab5      	ldr	r2, [pc, #724]	; (800b148 <UART_SetConfig+0x330>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d004      	beq.n	800ae82 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a1b      	ldr	r3, [r3, #32]
 800ae7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	4bb0      	ldr	r3, [pc, #704]	; (800b14c <UART_SetConfig+0x334>)
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	6812      	ldr	r2, [r2, #0]
 800ae90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae92:	430b      	orrs	r3, r1
 800ae94:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9c:	f023 010f 	bic.w	r1, r3, #15
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4aa7      	ldr	r2, [pc, #668]	; (800b150 <UART_SetConfig+0x338>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d176      	bne.n	800afa4 <UART_SetConfig+0x18c>
 800aeb6:	4ba7      	ldr	r3, [pc, #668]	; (800b154 <UART_SetConfig+0x33c>)
 800aeb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aebe:	2b28      	cmp	r3, #40	; 0x28
 800aec0:	d86c      	bhi.n	800af9c <UART_SetConfig+0x184>
 800aec2:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <UART_SetConfig+0xb0>)
 800aec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec8:	0800af6d 	.word	0x0800af6d
 800aecc:	0800af9d 	.word	0x0800af9d
 800aed0:	0800af9d 	.word	0x0800af9d
 800aed4:	0800af9d 	.word	0x0800af9d
 800aed8:	0800af9d 	.word	0x0800af9d
 800aedc:	0800af9d 	.word	0x0800af9d
 800aee0:	0800af9d 	.word	0x0800af9d
 800aee4:	0800af9d 	.word	0x0800af9d
 800aee8:	0800af75 	.word	0x0800af75
 800aeec:	0800af9d 	.word	0x0800af9d
 800aef0:	0800af9d 	.word	0x0800af9d
 800aef4:	0800af9d 	.word	0x0800af9d
 800aef8:	0800af9d 	.word	0x0800af9d
 800aefc:	0800af9d 	.word	0x0800af9d
 800af00:	0800af9d 	.word	0x0800af9d
 800af04:	0800af9d 	.word	0x0800af9d
 800af08:	0800af7d 	.word	0x0800af7d
 800af0c:	0800af9d 	.word	0x0800af9d
 800af10:	0800af9d 	.word	0x0800af9d
 800af14:	0800af9d 	.word	0x0800af9d
 800af18:	0800af9d 	.word	0x0800af9d
 800af1c:	0800af9d 	.word	0x0800af9d
 800af20:	0800af9d 	.word	0x0800af9d
 800af24:	0800af9d 	.word	0x0800af9d
 800af28:	0800af85 	.word	0x0800af85
 800af2c:	0800af9d 	.word	0x0800af9d
 800af30:	0800af9d 	.word	0x0800af9d
 800af34:	0800af9d 	.word	0x0800af9d
 800af38:	0800af9d 	.word	0x0800af9d
 800af3c:	0800af9d 	.word	0x0800af9d
 800af40:	0800af9d 	.word	0x0800af9d
 800af44:	0800af9d 	.word	0x0800af9d
 800af48:	0800af8d 	.word	0x0800af8d
 800af4c:	0800af9d 	.word	0x0800af9d
 800af50:	0800af9d 	.word	0x0800af9d
 800af54:	0800af9d 	.word	0x0800af9d
 800af58:	0800af9d 	.word	0x0800af9d
 800af5c:	0800af9d 	.word	0x0800af9d
 800af60:	0800af9d 	.word	0x0800af9d
 800af64:	0800af9d 	.word	0x0800af9d
 800af68:	0800af95 	.word	0x0800af95
 800af6c:	2301      	movs	r3, #1
 800af6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af72:	e222      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af74:	2304      	movs	r3, #4
 800af76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af7a:	e21e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af7c:	2308      	movs	r3, #8
 800af7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af82:	e21a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af84:	2310      	movs	r3, #16
 800af86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af8a:	e216      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af8c:	2320      	movs	r3, #32
 800af8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af92:	e212      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af94:	2340      	movs	r3, #64	; 0x40
 800af96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af9a:	e20e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af9c:	2380      	movs	r3, #128	; 0x80
 800af9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afa2:	e20a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a6b      	ldr	r2, [pc, #428]	; (800b158 <UART_SetConfig+0x340>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d130      	bne.n	800b010 <UART_SetConfig+0x1f8>
 800afae:	4b69      	ldr	r3, [pc, #420]	; (800b154 <UART_SetConfig+0x33c>)
 800afb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb2:	f003 0307 	and.w	r3, r3, #7
 800afb6:	2b05      	cmp	r3, #5
 800afb8:	d826      	bhi.n	800b008 <UART_SetConfig+0x1f0>
 800afba:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <UART_SetConfig+0x1a8>)
 800afbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc0:	0800afd9 	.word	0x0800afd9
 800afc4:	0800afe1 	.word	0x0800afe1
 800afc8:	0800afe9 	.word	0x0800afe9
 800afcc:	0800aff1 	.word	0x0800aff1
 800afd0:	0800aff9 	.word	0x0800aff9
 800afd4:	0800b001 	.word	0x0800b001
 800afd8:	2300      	movs	r3, #0
 800afda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afde:	e1ec      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800afe0:	2304      	movs	r3, #4
 800afe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe6:	e1e8      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800afe8:	2308      	movs	r3, #8
 800afea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afee:	e1e4      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800aff0:	2310      	movs	r3, #16
 800aff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aff6:	e1e0      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800aff8:	2320      	movs	r3, #32
 800affa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affe:	e1dc      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b000:	2340      	movs	r3, #64	; 0x40
 800b002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b006:	e1d8      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b008:	2380      	movs	r3, #128	; 0x80
 800b00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b00e:	e1d4      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a51      	ldr	r2, [pc, #324]	; (800b15c <UART_SetConfig+0x344>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d130      	bne.n	800b07c <UART_SetConfig+0x264>
 800b01a:	4b4e      	ldr	r3, [pc, #312]	; (800b154 <UART_SetConfig+0x33c>)
 800b01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b01e:	f003 0307 	and.w	r3, r3, #7
 800b022:	2b05      	cmp	r3, #5
 800b024:	d826      	bhi.n	800b074 <UART_SetConfig+0x25c>
 800b026:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <UART_SetConfig+0x214>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b045 	.word	0x0800b045
 800b030:	0800b04d 	.word	0x0800b04d
 800b034:	0800b055 	.word	0x0800b055
 800b038:	0800b05d 	.word	0x0800b05d
 800b03c:	0800b065 	.word	0x0800b065
 800b040:	0800b06d 	.word	0x0800b06d
 800b044:	2300      	movs	r3, #0
 800b046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b04a:	e1b6      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b04c:	2304      	movs	r3, #4
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b052:	e1b2      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b054:	2308      	movs	r3, #8
 800b056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b05a:	e1ae      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b05c:	2310      	movs	r3, #16
 800b05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b062:	e1aa      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b064:	2320      	movs	r3, #32
 800b066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b06a:	e1a6      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b06c:	2340      	movs	r3, #64	; 0x40
 800b06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b072:	e1a2      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b074:	2380      	movs	r3, #128	; 0x80
 800b076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b07a:	e19e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a37      	ldr	r2, [pc, #220]	; (800b160 <UART_SetConfig+0x348>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d130      	bne.n	800b0e8 <UART_SetConfig+0x2d0>
 800b086:	4b33      	ldr	r3, [pc, #204]	; (800b154 <UART_SetConfig+0x33c>)
 800b088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	2b05      	cmp	r3, #5
 800b090:	d826      	bhi.n	800b0e0 <UART_SetConfig+0x2c8>
 800b092:	a201      	add	r2, pc, #4	; (adr r2, 800b098 <UART_SetConfig+0x280>)
 800b094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b098:	0800b0b1 	.word	0x0800b0b1
 800b09c:	0800b0b9 	.word	0x0800b0b9
 800b0a0:	0800b0c1 	.word	0x0800b0c1
 800b0a4:	0800b0c9 	.word	0x0800b0c9
 800b0a8:	0800b0d1 	.word	0x0800b0d1
 800b0ac:	0800b0d9 	.word	0x0800b0d9
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0b6:	e180      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0b8:	2304      	movs	r3, #4
 800b0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0be:	e17c      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0c0:	2308      	movs	r3, #8
 800b0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c6:	e178      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ce:	e174      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0d0:	2320      	movs	r3, #32
 800b0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d6:	e170      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0d8:	2340      	movs	r3, #64	; 0x40
 800b0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0de:	e16c      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0e0:	2380      	movs	r3, #128	; 0x80
 800b0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0e6:	e168      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a1d      	ldr	r2, [pc, #116]	; (800b164 <UART_SetConfig+0x34c>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d142      	bne.n	800b178 <UART_SetConfig+0x360>
 800b0f2:	4b18      	ldr	r3, [pc, #96]	; (800b154 <UART_SetConfig+0x33c>)
 800b0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f6:	f003 0307 	and.w	r3, r3, #7
 800b0fa:	2b05      	cmp	r3, #5
 800b0fc:	d838      	bhi.n	800b170 <UART_SetConfig+0x358>
 800b0fe:	a201      	add	r2, pc, #4	; (adr r2, 800b104 <UART_SetConfig+0x2ec>)
 800b100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b104:	0800b11d 	.word	0x0800b11d
 800b108:	0800b125 	.word	0x0800b125
 800b10c:	0800b12d 	.word	0x0800b12d
 800b110:	0800b135 	.word	0x0800b135
 800b114:	0800b13d 	.word	0x0800b13d
 800b118:	0800b169 	.word	0x0800b169
 800b11c:	2300      	movs	r3, #0
 800b11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b122:	e14a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b124:	2304      	movs	r3, #4
 800b126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b12a:	e146      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b12c:	2308      	movs	r3, #8
 800b12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b132:	e142      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b134:	2310      	movs	r3, #16
 800b136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13a:	e13e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b13c:	2320      	movs	r3, #32
 800b13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b142:	e13a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b144:	cfff69f3 	.word	0xcfff69f3
 800b148:	58000c00 	.word	0x58000c00
 800b14c:	11fff4ff 	.word	0x11fff4ff
 800b150:	40011000 	.word	0x40011000
 800b154:	58024400 	.word	0x58024400
 800b158:	40004400 	.word	0x40004400
 800b15c:	40004800 	.word	0x40004800
 800b160:	40004c00 	.word	0x40004c00
 800b164:	40005000 	.word	0x40005000
 800b168:	2340      	movs	r3, #64	; 0x40
 800b16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b16e:	e124      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b170:	2380      	movs	r3, #128	; 0x80
 800b172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b176:	e120      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4acc      	ldr	r2, [pc, #816]	; (800b4b0 <UART_SetConfig+0x698>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d176      	bne.n	800b270 <UART_SetConfig+0x458>
 800b182:	4bcc      	ldr	r3, [pc, #816]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b18a:	2b28      	cmp	r3, #40	; 0x28
 800b18c:	d86c      	bhi.n	800b268 <UART_SetConfig+0x450>
 800b18e:	a201      	add	r2, pc, #4	; (adr r2, 800b194 <UART_SetConfig+0x37c>)
 800b190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b194:	0800b239 	.word	0x0800b239
 800b198:	0800b269 	.word	0x0800b269
 800b19c:	0800b269 	.word	0x0800b269
 800b1a0:	0800b269 	.word	0x0800b269
 800b1a4:	0800b269 	.word	0x0800b269
 800b1a8:	0800b269 	.word	0x0800b269
 800b1ac:	0800b269 	.word	0x0800b269
 800b1b0:	0800b269 	.word	0x0800b269
 800b1b4:	0800b241 	.word	0x0800b241
 800b1b8:	0800b269 	.word	0x0800b269
 800b1bc:	0800b269 	.word	0x0800b269
 800b1c0:	0800b269 	.word	0x0800b269
 800b1c4:	0800b269 	.word	0x0800b269
 800b1c8:	0800b269 	.word	0x0800b269
 800b1cc:	0800b269 	.word	0x0800b269
 800b1d0:	0800b269 	.word	0x0800b269
 800b1d4:	0800b249 	.word	0x0800b249
 800b1d8:	0800b269 	.word	0x0800b269
 800b1dc:	0800b269 	.word	0x0800b269
 800b1e0:	0800b269 	.word	0x0800b269
 800b1e4:	0800b269 	.word	0x0800b269
 800b1e8:	0800b269 	.word	0x0800b269
 800b1ec:	0800b269 	.word	0x0800b269
 800b1f0:	0800b269 	.word	0x0800b269
 800b1f4:	0800b251 	.word	0x0800b251
 800b1f8:	0800b269 	.word	0x0800b269
 800b1fc:	0800b269 	.word	0x0800b269
 800b200:	0800b269 	.word	0x0800b269
 800b204:	0800b269 	.word	0x0800b269
 800b208:	0800b269 	.word	0x0800b269
 800b20c:	0800b269 	.word	0x0800b269
 800b210:	0800b269 	.word	0x0800b269
 800b214:	0800b259 	.word	0x0800b259
 800b218:	0800b269 	.word	0x0800b269
 800b21c:	0800b269 	.word	0x0800b269
 800b220:	0800b269 	.word	0x0800b269
 800b224:	0800b269 	.word	0x0800b269
 800b228:	0800b269 	.word	0x0800b269
 800b22c:	0800b269 	.word	0x0800b269
 800b230:	0800b269 	.word	0x0800b269
 800b234:	0800b261 	.word	0x0800b261
 800b238:	2301      	movs	r3, #1
 800b23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b23e:	e0bc      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b240:	2304      	movs	r3, #4
 800b242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b246:	e0b8      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b248:	2308      	movs	r3, #8
 800b24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24e:	e0b4      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b250:	2310      	movs	r3, #16
 800b252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b256:	e0b0      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b258:	2320      	movs	r3, #32
 800b25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b25e:	e0ac      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b260:	2340      	movs	r3, #64	; 0x40
 800b262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b266:	e0a8      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b268:	2380      	movs	r3, #128	; 0x80
 800b26a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b26e:	e0a4      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a90      	ldr	r2, [pc, #576]	; (800b4b8 <UART_SetConfig+0x6a0>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d130      	bne.n	800b2dc <UART_SetConfig+0x4c4>
 800b27a:	4b8e      	ldr	r3, [pc, #568]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	2b05      	cmp	r3, #5
 800b284:	d826      	bhi.n	800b2d4 <UART_SetConfig+0x4bc>
 800b286:	a201      	add	r2, pc, #4	; (adr r2, 800b28c <UART_SetConfig+0x474>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b2a5 	.word	0x0800b2a5
 800b290:	0800b2ad 	.word	0x0800b2ad
 800b294:	0800b2b5 	.word	0x0800b2b5
 800b298:	0800b2bd 	.word	0x0800b2bd
 800b29c:	0800b2c5 	.word	0x0800b2c5
 800b2a0:	0800b2cd 	.word	0x0800b2cd
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2aa:	e086      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2ac:	2304      	movs	r3, #4
 800b2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2b2:	e082      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2b4:	2308      	movs	r3, #8
 800b2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ba:	e07e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2bc:	2310      	movs	r3, #16
 800b2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c2:	e07a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2c4:	2320      	movs	r3, #32
 800b2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ca:	e076      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2cc:	2340      	movs	r3, #64	; 0x40
 800b2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2d2:	e072      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2d4:	2380      	movs	r3, #128	; 0x80
 800b2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2da:	e06e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a76      	ldr	r2, [pc, #472]	; (800b4bc <UART_SetConfig+0x6a4>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d130      	bne.n	800b348 <UART_SetConfig+0x530>
 800b2e6:	4b73      	ldr	r3, [pc, #460]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ea:	f003 0307 	and.w	r3, r3, #7
 800b2ee:	2b05      	cmp	r3, #5
 800b2f0:	d826      	bhi.n	800b340 <UART_SetConfig+0x528>
 800b2f2:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <UART_SetConfig+0x4e0>)
 800b2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f8:	0800b311 	.word	0x0800b311
 800b2fc:	0800b319 	.word	0x0800b319
 800b300:	0800b321 	.word	0x0800b321
 800b304:	0800b329 	.word	0x0800b329
 800b308:	0800b331 	.word	0x0800b331
 800b30c:	0800b339 	.word	0x0800b339
 800b310:	2300      	movs	r3, #0
 800b312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b316:	e050      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b318:	2304      	movs	r3, #4
 800b31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b31e:	e04c      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b320:	2308      	movs	r3, #8
 800b322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b326:	e048      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b328:	2310      	movs	r3, #16
 800b32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b32e:	e044      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b330:	2320      	movs	r3, #32
 800b332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b336:	e040      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b338:	2340      	movs	r3, #64	; 0x40
 800b33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33e:	e03c      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b340:	2380      	movs	r3, #128	; 0x80
 800b342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b346:	e038      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a5c      	ldr	r2, [pc, #368]	; (800b4c0 <UART_SetConfig+0x6a8>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d130      	bne.n	800b3b4 <UART_SetConfig+0x59c>
 800b352:	4b58      	ldr	r3, [pc, #352]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b356:	f003 0307 	and.w	r3, r3, #7
 800b35a:	2b05      	cmp	r3, #5
 800b35c:	d826      	bhi.n	800b3ac <UART_SetConfig+0x594>
 800b35e:	a201      	add	r2, pc, #4	; (adr r2, 800b364 <UART_SetConfig+0x54c>)
 800b360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b364:	0800b37d 	.word	0x0800b37d
 800b368:	0800b385 	.word	0x0800b385
 800b36c:	0800b38d 	.word	0x0800b38d
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b39d 	.word	0x0800b39d
 800b378:	0800b3a5 	.word	0x0800b3a5
 800b37c:	2302      	movs	r3, #2
 800b37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b382:	e01a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b384:	2304      	movs	r3, #4
 800b386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38a:	e016      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b38c:	2308      	movs	r3, #8
 800b38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b392:	e012      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b394:	2310      	movs	r3, #16
 800b396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b39a:	e00e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b39c:	2320      	movs	r3, #32
 800b39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3a2:	e00a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b3a4:	2340      	movs	r3, #64	; 0x40
 800b3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3aa:	e006      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b3ac:	2380      	movs	r3, #128	; 0x80
 800b3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3b2:	e002      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b3b4:	2380      	movs	r3, #128	; 0x80
 800b3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a40      	ldr	r2, [pc, #256]	; (800b4c0 <UART_SetConfig+0x6a8>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	f040 80ef 	bne.w	800b5a4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b3c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3ca:	2b20      	cmp	r3, #32
 800b3cc:	dc46      	bgt.n	800b45c <UART_SetConfig+0x644>
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	f2c0 8081 	blt.w	800b4d6 <UART_SetConfig+0x6be>
 800b3d4:	3b02      	subs	r3, #2
 800b3d6:	2b1e      	cmp	r3, #30
 800b3d8:	d87d      	bhi.n	800b4d6 <UART_SetConfig+0x6be>
 800b3da:	a201      	add	r2, pc, #4	; (adr r2, 800b3e0 <UART_SetConfig+0x5c8>)
 800b3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e0:	0800b463 	.word	0x0800b463
 800b3e4:	0800b4d7 	.word	0x0800b4d7
 800b3e8:	0800b46b 	.word	0x0800b46b
 800b3ec:	0800b4d7 	.word	0x0800b4d7
 800b3f0:	0800b4d7 	.word	0x0800b4d7
 800b3f4:	0800b4d7 	.word	0x0800b4d7
 800b3f8:	0800b47b 	.word	0x0800b47b
 800b3fc:	0800b4d7 	.word	0x0800b4d7
 800b400:	0800b4d7 	.word	0x0800b4d7
 800b404:	0800b4d7 	.word	0x0800b4d7
 800b408:	0800b4d7 	.word	0x0800b4d7
 800b40c:	0800b4d7 	.word	0x0800b4d7
 800b410:	0800b4d7 	.word	0x0800b4d7
 800b414:	0800b4d7 	.word	0x0800b4d7
 800b418:	0800b48b 	.word	0x0800b48b
 800b41c:	0800b4d7 	.word	0x0800b4d7
 800b420:	0800b4d7 	.word	0x0800b4d7
 800b424:	0800b4d7 	.word	0x0800b4d7
 800b428:	0800b4d7 	.word	0x0800b4d7
 800b42c:	0800b4d7 	.word	0x0800b4d7
 800b430:	0800b4d7 	.word	0x0800b4d7
 800b434:	0800b4d7 	.word	0x0800b4d7
 800b438:	0800b4d7 	.word	0x0800b4d7
 800b43c:	0800b4d7 	.word	0x0800b4d7
 800b440:	0800b4d7 	.word	0x0800b4d7
 800b444:	0800b4d7 	.word	0x0800b4d7
 800b448:	0800b4d7 	.word	0x0800b4d7
 800b44c:	0800b4d7 	.word	0x0800b4d7
 800b450:	0800b4d7 	.word	0x0800b4d7
 800b454:	0800b4d7 	.word	0x0800b4d7
 800b458:	0800b4c9 	.word	0x0800b4c9
 800b45c:	2b40      	cmp	r3, #64	; 0x40
 800b45e:	d036      	beq.n	800b4ce <UART_SetConfig+0x6b6>
 800b460:	e039      	b.n	800b4d6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b462:	f7fe f897 	bl	8009594 <HAL_RCCEx_GetD3PCLK1Freq>
 800b466:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b468:	e03b      	b.n	800b4e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b46a:	f107 0314 	add.w	r3, r7, #20
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fe f8a6 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b478:	e033      	b.n	800b4e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b47a:	f107 0308 	add.w	r3, r7, #8
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe f9f2 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b488:	e02b      	b.n	800b4e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b48a:	4b0a      	ldr	r3, [pc, #40]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0320 	and.w	r3, r3, #32
 800b492:	2b00      	cmp	r3, #0
 800b494:	d009      	beq.n	800b4aa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b496:	4b07      	ldr	r3, [pc, #28]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	08db      	lsrs	r3, r3, #3
 800b49c:	f003 0303 	and.w	r3, r3, #3
 800b4a0:	4a08      	ldr	r2, [pc, #32]	; (800b4c4 <UART_SetConfig+0x6ac>)
 800b4a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4a8:	e01b      	b.n	800b4e2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b4aa:	4b06      	ldr	r3, [pc, #24]	; (800b4c4 <UART_SetConfig+0x6ac>)
 800b4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4ae:	e018      	b.n	800b4e2 <UART_SetConfig+0x6ca>
 800b4b0:	40011400 	.word	0x40011400
 800b4b4:	58024400 	.word	0x58024400
 800b4b8:	40007800 	.word	0x40007800
 800b4bc:	40007c00 	.word	0x40007c00
 800b4c0:	58000c00 	.word	0x58000c00
 800b4c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4c8:	4bc4      	ldr	r3, [pc, #784]	; (800b7dc <UART_SetConfig+0x9c4>)
 800b4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4cc:	e009      	b.n	800b4e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4d4:	e005      	b.n	800b4e2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b4e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 81da 	beq.w	800b89e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ee:	4abc      	ldr	r2, [pc, #752]	; (800b7e0 <UART_SetConfig+0x9c8>)
 800b4f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4fc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	4613      	mov	r3, r2
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	4413      	add	r3, r2
 800b508:	6a3a      	ldr	r2, [r7, #32]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d305      	bcc.n	800b51a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b514:	6a3a      	ldr	r2, [r7, #32]
 800b516:	429a      	cmp	r2, r3
 800b518:	d903      	bls.n	800b522 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b520:	e1bd      	b.n	800b89e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b524:	4618      	mov	r0, r3
 800b526:	f04f 0100 	mov.w	r1, #0
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	4aac      	ldr	r2, [pc, #688]	; (800b7e0 <UART_SetConfig+0x9c8>)
 800b530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b534:	b29a      	uxth	r2, r3
 800b536:	f04f 0300 	mov.w	r3, #0
 800b53a:	f7f4 ff29 	bl	8000390 <__aeabi_uldivmod>
 800b53e:	4602      	mov	r2, r0
 800b540:	460b      	mov	r3, r1
 800b542:	4610      	mov	r0, r2
 800b544:	4619      	mov	r1, r3
 800b546:	f04f 0200 	mov.w	r2, #0
 800b54a:	f04f 0300 	mov.w	r3, #0
 800b54e:	020b      	lsls	r3, r1, #8
 800b550:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b554:	0202      	lsls	r2, r0, #8
 800b556:	6879      	ldr	r1, [r7, #4]
 800b558:	6849      	ldr	r1, [r1, #4]
 800b55a:	0849      	lsrs	r1, r1, #1
 800b55c:	4608      	mov	r0, r1
 800b55e:	f04f 0100 	mov.w	r1, #0
 800b562:	1814      	adds	r4, r2, r0
 800b564:	eb43 0501 	adc.w	r5, r3, r1
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	461a      	mov	r2, r3
 800b56e:	f04f 0300 	mov.w	r3, #0
 800b572:	4620      	mov	r0, r4
 800b574:	4629      	mov	r1, r5
 800b576:	f7f4 ff0b 	bl	8000390 <__aeabi_uldivmod>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4613      	mov	r3, r2
 800b580:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b588:	d308      	bcc.n	800b59c <UART_SetConfig+0x784>
 800b58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b590:	d204      	bcs.n	800b59c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b598:	60da      	str	r2, [r3, #12]
 800b59a:	e180      	b.n	800b89e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b5a2:	e17c      	b.n	800b89e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	69db      	ldr	r3, [r3, #28]
 800b5a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5ac:	f040 80bf 	bne.w	800b72e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800b5b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b5b4:	2b20      	cmp	r3, #32
 800b5b6:	dc49      	bgt.n	800b64c <UART_SetConfig+0x834>
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	db7c      	blt.n	800b6b6 <UART_SetConfig+0x89e>
 800b5bc:	2b20      	cmp	r3, #32
 800b5be:	d87a      	bhi.n	800b6b6 <UART_SetConfig+0x89e>
 800b5c0:	a201      	add	r2, pc, #4	; (adr r2, 800b5c8 <UART_SetConfig+0x7b0>)
 800b5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c6:	bf00      	nop
 800b5c8:	0800b653 	.word	0x0800b653
 800b5cc:	0800b65b 	.word	0x0800b65b
 800b5d0:	0800b6b7 	.word	0x0800b6b7
 800b5d4:	0800b6b7 	.word	0x0800b6b7
 800b5d8:	0800b663 	.word	0x0800b663
 800b5dc:	0800b6b7 	.word	0x0800b6b7
 800b5e0:	0800b6b7 	.word	0x0800b6b7
 800b5e4:	0800b6b7 	.word	0x0800b6b7
 800b5e8:	0800b673 	.word	0x0800b673
 800b5ec:	0800b6b7 	.word	0x0800b6b7
 800b5f0:	0800b6b7 	.word	0x0800b6b7
 800b5f4:	0800b6b7 	.word	0x0800b6b7
 800b5f8:	0800b6b7 	.word	0x0800b6b7
 800b5fc:	0800b6b7 	.word	0x0800b6b7
 800b600:	0800b6b7 	.word	0x0800b6b7
 800b604:	0800b6b7 	.word	0x0800b6b7
 800b608:	0800b683 	.word	0x0800b683
 800b60c:	0800b6b7 	.word	0x0800b6b7
 800b610:	0800b6b7 	.word	0x0800b6b7
 800b614:	0800b6b7 	.word	0x0800b6b7
 800b618:	0800b6b7 	.word	0x0800b6b7
 800b61c:	0800b6b7 	.word	0x0800b6b7
 800b620:	0800b6b7 	.word	0x0800b6b7
 800b624:	0800b6b7 	.word	0x0800b6b7
 800b628:	0800b6b7 	.word	0x0800b6b7
 800b62c:	0800b6b7 	.word	0x0800b6b7
 800b630:	0800b6b7 	.word	0x0800b6b7
 800b634:	0800b6b7 	.word	0x0800b6b7
 800b638:	0800b6b7 	.word	0x0800b6b7
 800b63c:	0800b6b7 	.word	0x0800b6b7
 800b640:	0800b6b7 	.word	0x0800b6b7
 800b644:	0800b6b7 	.word	0x0800b6b7
 800b648:	0800b6a9 	.word	0x0800b6a9
 800b64c:	2b40      	cmp	r3, #64	; 0x40
 800b64e:	d02e      	beq.n	800b6ae <UART_SetConfig+0x896>
 800b650:	e031      	b.n	800b6b6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b652:	f7fd f833 	bl	80086bc <HAL_RCC_GetPCLK1Freq>
 800b656:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b658:	e033      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b65a:	f7fd f845 	bl	80086e8 <HAL_RCC_GetPCLK2Freq>
 800b65e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b660:	e02f      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b662:	f107 0314 	add.w	r3, r7, #20
 800b666:	4618      	mov	r0, r3
 800b668:	f7fd ffaa 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b670:	e027      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b672:	f107 0308 	add.w	r3, r7, #8
 800b676:	4618      	mov	r0, r3
 800b678:	f7fe f8f6 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b680:	e01f      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b682:	4b58      	ldr	r3, [pc, #352]	; (800b7e4 <UART_SetConfig+0x9cc>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f003 0320 	and.w	r3, r3, #32
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d009      	beq.n	800b6a2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b68e:	4b55      	ldr	r3, [pc, #340]	; (800b7e4 <UART_SetConfig+0x9cc>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	08db      	lsrs	r3, r3, #3
 800b694:	f003 0303 	and.w	r3, r3, #3
 800b698:	4a53      	ldr	r2, [pc, #332]	; (800b7e8 <UART_SetConfig+0x9d0>)
 800b69a:	fa22 f303 	lsr.w	r3, r2, r3
 800b69e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6a0:	e00f      	b.n	800b6c2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b6a2:	4b51      	ldr	r3, [pc, #324]	; (800b7e8 <UART_SetConfig+0x9d0>)
 800b6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6a6:	e00c      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6a8:	4b4c      	ldr	r3, [pc, #304]	; (800b7dc <UART_SetConfig+0x9c4>)
 800b6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6ac:	e009      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6b4:	e005      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b6c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 80ea 	beq.w	800b89e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ce:	4a44      	ldr	r2, [pc, #272]	; (800b7e0 <UART_SetConfig+0x9c8>)
 800b6d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6dc:	005a      	lsls	r2, r3, #1
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	085b      	lsrs	r3, r3, #1
 800b6e4:	441a      	add	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	2b0f      	cmp	r3, #15
 800b6f6:	d916      	bls.n	800b726 <UART_SetConfig+0x90e>
 800b6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6fe:	d212      	bcs.n	800b726 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b702:	b29b      	uxth	r3, r3
 800b704:	f023 030f 	bic.w	r3, r3, #15
 800b708:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70c:	085b      	lsrs	r3, r3, #1
 800b70e:	b29b      	uxth	r3, r3
 800b710:	f003 0307 	and.w	r3, r3, #7
 800b714:	b29a      	uxth	r2, r3
 800b716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b718:	4313      	orrs	r3, r2
 800b71a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b722:	60da      	str	r2, [r3, #12]
 800b724:	e0bb      	b.n	800b89e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b726:	2301      	movs	r3, #1
 800b728:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b72c:	e0b7      	b.n	800b89e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b72e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b732:	2b20      	cmp	r3, #32
 800b734:	dc4a      	bgt.n	800b7cc <UART_SetConfig+0x9b4>
 800b736:	2b00      	cmp	r3, #0
 800b738:	f2c0 8086 	blt.w	800b848 <UART_SetConfig+0xa30>
 800b73c:	2b20      	cmp	r3, #32
 800b73e:	f200 8083 	bhi.w	800b848 <UART_SetConfig+0xa30>
 800b742:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <UART_SetConfig+0x930>)
 800b744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b748:	0800b7d3 	.word	0x0800b7d3
 800b74c:	0800b7ed 	.word	0x0800b7ed
 800b750:	0800b849 	.word	0x0800b849
 800b754:	0800b849 	.word	0x0800b849
 800b758:	0800b7f5 	.word	0x0800b7f5
 800b75c:	0800b849 	.word	0x0800b849
 800b760:	0800b849 	.word	0x0800b849
 800b764:	0800b849 	.word	0x0800b849
 800b768:	0800b805 	.word	0x0800b805
 800b76c:	0800b849 	.word	0x0800b849
 800b770:	0800b849 	.word	0x0800b849
 800b774:	0800b849 	.word	0x0800b849
 800b778:	0800b849 	.word	0x0800b849
 800b77c:	0800b849 	.word	0x0800b849
 800b780:	0800b849 	.word	0x0800b849
 800b784:	0800b849 	.word	0x0800b849
 800b788:	0800b815 	.word	0x0800b815
 800b78c:	0800b849 	.word	0x0800b849
 800b790:	0800b849 	.word	0x0800b849
 800b794:	0800b849 	.word	0x0800b849
 800b798:	0800b849 	.word	0x0800b849
 800b79c:	0800b849 	.word	0x0800b849
 800b7a0:	0800b849 	.word	0x0800b849
 800b7a4:	0800b849 	.word	0x0800b849
 800b7a8:	0800b849 	.word	0x0800b849
 800b7ac:	0800b849 	.word	0x0800b849
 800b7b0:	0800b849 	.word	0x0800b849
 800b7b4:	0800b849 	.word	0x0800b849
 800b7b8:	0800b849 	.word	0x0800b849
 800b7bc:	0800b849 	.word	0x0800b849
 800b7c0:	0800b849 	.word	0x0800b849
 800b7c4:	0800b849 	.word	0x0800b849
 800b7c8:	0800b83b 	.word	0x0800b83b
 800b7cc:	2b40      	cmp	r3, #64	; 0x40
 800b7ce:	d037      	beq.n	800b840 <UART_SetConfig+0xa28>
 800b7d0:	e03a      	b.n	800b848 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7d2:	f7fc ff73 	bl	80086bc <HAL_RCC_GetPCLK1Freq>
 800b7d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7d8:	e03c      	b.n	800b854 <UART_SetConfig+0xa3c>
 800b7da:	bf00      	nop
 800b7dc:	003d0900 	.word	0x003d0900
 800b7e0:	0800e954 	.word	0x0800e954
 800b7e4:	58024400 	.word	0x58024400
 800b7e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7ec:	f7fc ff7c 	bl	80086e8 <HAL_RCC_GetPCLK2Freq>
 800b7f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7f2:	e02f      	b.n	800b854 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7f4:	f107 0314 	add.w	r3, r7, #20
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7fd fee1 	bl	80095c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b802:	e027      	b.n	800b854 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b804:	f107 0308 	add.w	r3, r7, #8
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fe f82d 	bl	8009868 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b812:	e01f      	b.n	800b854 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b814:	4b2c      	ldr	r3, [pc, #176]	; (800b8c8 <UART_SetConfig+0xab0>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0320 	and.w	r3, r3, #32
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d009      	beq.n	800b834 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b820:	4b29      	ldr	r3, [pc, #164]	; (800b8c8 <UART_SetConfig+0xab0>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	08db      	lsrs	r3, r3, #3
 800b826:	f003 0303 	and.w	r3, r3, #3
 800b82a:	4a28      	ldr	r2, [pc, #160]	; (800b8cc <UART_SetConfig+0xab4>)
 800b82c:	fa22 f303 	lsr.w	r3, r2, r3
 800b830:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b832:	e00f      	b.n	800b854 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b834:	4b25      	ldr	r3, [pc, #148]	; (800b8cc <UART_SetConfig+0xab4>)
 800b836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b838:	e00c      	b.n	800b854 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b83a:	4b25      	ldr	r3, [pc, #148]	; (800b8d0 <UART_SetConfig+0xab8>)
 800b83c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b83e:	e009      	b.n	800b854 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b844:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b846:	e005      	b.n	800b854 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b848:	2300      	movs	r3, #0
 800b84a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b852:	bf00      	nop
    }

    if (pclk != 0U)
 800b854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b856:	2b00      	cmp	r3, #0
 800b858:	d021      	beq.n	800b89e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85e:	4a1d      	ldr	r2, [pc, #116]	; (800b8d4 <UART_SetConfig+0xabc>)
 800b860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b864:	461a      	mov	r2, r3
 800b866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b868:	fbb3 f2f2 	udiv	r2, r3, r2
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	085b      	lsrs	r3, r3, #1
 800b872:	441a      	add	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	2b0f      	cmp	r3, #15
 800b884:	d908      	bls.n	800b898 <UART_SetConfig+0xa80>
 800b886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b88c:	d204      	bcs.n	800b898 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b894:	60da      	str	r2, [r3, #12]
 800b896:	e002      	b.n	800b89e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b8ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3738      	adds	r7, #56	; 0x38
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bdb0      	pop	{r4, r5, r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	58024400 	.word	0x58024400
 800b8cc:	03d09000 	.word	0x03d09000
 800b8d0:	003d0900 	.word	0x003d0900
 800b8d4:	0800e954 	.word	0x0800e954

0800b8d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e4:	f003 0301 	and.w	r3, r3, #1
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00a      	beq.n	800b902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	430a      	orrs	r2, r1
 800b900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b906:	f003 0302 	and.w	r3, r3, #2
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	430a      	orrs	r2, r1
 800b922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b928:	f003 0304 	and.w	r3, r3, #4
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00a      	beq.n	800b946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	430a      	orrs	r2, r1
 800b944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94a:	f003 0308 	and.w	r3, r3, #8
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00a      	beq.n	800b968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	430a      	orrs	r2, r1
 800b966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96c:	f003 0310 	and.w	r3, r3, #16
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00a      	beq.n	800b98a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	430a      	orrs	r2, r1
 800b988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98e:	f003 0320 	and.w	r3, r3, #32
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00a      	beq.n	800b9ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d01a      	beq.n	800b9ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9d6:	d10a      	bne.n	800b9ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	430a      	orrs	r2, r1
 800b9ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	605a      	str	r2, [r3, #4]
  }
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af02      	add	r7, sp, #8
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba2c:	f7f6 fa2e 	bl	8001e8c <HAL_GetTick>
 800ba30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 0308 	and.w	r3, r3, #8
 800ba3c:	2b08      	cmp	r3, #8
 800ba3e:	d10e      	bne.n	800ba5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f82f 	bl	800bab2 <UART_WaitOnFlagUntilTimeout>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	e025      	b.n	800baaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 0304 	and.w	r3, r3, #4
 800ba68:	2b04      	cmp	r3, #4
 800ba6a:	d10e      	bne.n	800ba8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f819 	bl	800bab2 <UART_WaitOnFlagUntilTimeout>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e00f      	b.n	800baaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2220      	movs	r2, #32
 800ba8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	603b      	str	r3, [r7, #0]
 800babe:	4613      	mov	r3, r2
 800bac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bac2:	e062      	b.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baca:	d05e      	beq.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bacc:	f7f6 f9de 	bl	8001e8c <HAL_GetTick>
 800bad0:	4602      	mov	r2, r0
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	69ba      	ldr	r2, [r7, #24]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d302      	bcc.n	800bae2 <UART_WaitOnFlagUntilTimeout+0x30>
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d11d      	bne.n	800bb1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800baf0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f022 0201 	bic.w	r2, r2, #1
 800bb00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2220      	movs	r2, #32
 800bb06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	e045      	b.n	800bbaa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 0304 	and.w	r3, r3, #4
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d02e      	beq.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	69db      	ldr	r3, [r3, #28]
 800bb32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb3a:	d126      	bne.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb54:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	689a      	ldr	r2, [r3, #8]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f022 0201 	bic.w	r2, r2, #1
 800bb64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2220      	movs	r2, #32
 800bb6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2220      	movs	r2, #32
 800bb72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2220      	movs	r2, #32
 800bb7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e00f      	b.n	800bbaa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	69da      	ldr	r2, [r3, #28]
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	4013      	ands	r3, r2
 800bb94:	68ba      	ldr	r2, [r7, #8]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	bf0c      	ite	eq
 800bb9a:	2301      	moveq	r3, #1
 800bb9c:	2300      	movne	r3, #0
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	79fb      	ldrb	r3, [r7, #7]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d08d      	beq.n	800bac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bbc8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	689a      	ldr	r2, [r3, #8]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800bbd8:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2220      	movs	r2, #32
 800bbde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800bbe2:	bf00      	nop
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr
	...

0800bbf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bc06:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6899      	ldr	r1, [r3, #8]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	4b0f      	ldr	r3, [pc, #60]	; (800bc50 <UART_EndRxTransfer+0x60>)
 800bc14:	400b      	ands	r3, r1
 800bc16:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d107      	bne.n	800bc30 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f022 0210 	bic.w	r2, r2, #16
 800bc2e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2220      	movs	r2, #32
 800bc34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bc44:	bf00      	nop
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr
 800bc50:	effffffe 	.word	0xeffffffe

0800bc54 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc60:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc6a:	d014      	beq.n	800bc96 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	689a      	ldr	r2, [r3, #8]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc82:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc92:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc94:	e002      	b.n	800bc9c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800bc96:	68f8      	ldr	r0, [r7, #12]
 800bc98:	f7ff f894 	bl	800adc4 <HAL_UART_TxCpltCallback>
}
 800bc9c:	bf00      	nop
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7ff f890 	bl	800add8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcb8:	bf00      	nop
 800bcba:	3710      	adds	r7, #16
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b086      	sub	sp, #24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bccc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcd4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcdc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce8:	2b80      	cmp	r3, #128	; 0x80
 800bcea:	d109      	bne.n	800bd00 <UART_DMAError+0x40>
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	2b21      	cmp	r3, #33	; 0x21
 800bcf0:	d106      	bne.n	800bd00 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bcfa:	6978      	ldr	r0, [r7, #20]
 800bcfc:	f7ff ff59 	bl	800bbb2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0a:	2b40      	cmp	r3, #64	; 0x40
 800bd0c:	d109      	bne.n	800bd22 <UART_DMAError+0x62>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2b22      	cmp	r3, #34	; 0x22
 800bd12:	d106      	bne.n	800bd22 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bd1c:	6978      	ldr	r0, [r7, #20]
 800bd1e:	f7ff ff67 	bl	800bbf0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd28:	f043 0210 	orr.w	r2, r3, #16
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd32:	6978      	ldr	r0, [r7, #20]
 800bd34:	f7ff f85a 	bl	800adec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd38:	bf00      	nop
 800bd3a:	3718      	adds	r7, #24
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f7ff f844 	bl	800adec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd64:	bf00      	nop
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd82:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2220      	movs	r2, #32
 800bd88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f7ff f816 	bl	800adc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd98:	bf00      	nop
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bdbc:	bf00      	nop
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d101      	bne.n	800bdf2 <HAL_UARTEx_DisableFifoMode+0x16>
 800bdee:	2302      	movs	r3, #2
 800bdf0:	e027      	b.n	800be42 <HAL_UARTEx_DisableFifoMode+0x66>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2224      	movs	r2, #36	; 0x24
 800bdfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f022 0201 	bic.w	r2, r2, #1
 800be18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800be20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2220      	movs	r2, #32
 800be34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b084      	sub	sp, #16
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
 800be56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d101      	bne.n	800be66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800be62:	2302      	movs	r3, #2
 800be64:	e02d      	b.n	800bec2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2201      	movs	r2, #1
 800be6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2224      	movs	r2, #36	; 0x24
 800be72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f022 0201 	bic.w	r2, r2, #1
 800be8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	683a      	ldr	r2, [r7, #0]
 800be9e:	430a      	orrs	r2, r1
 800bea0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f000 f850 	bl	800bf48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2220      	movs	r2, #32
 800beb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800beda:	2b01      	cmp	r3, #1
 800bedc:	d101      	bne.n	800bee2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bede:	2302      	movs	r3, #2
 800bee0:	e02d      	b.n	800bf3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2201      	movs	r2, #1
 800bee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2224      	movs	r2, #36	; 0x24
 800beee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f022 0201 	bic.w	r2, r2, #1
 800bf08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	683a      	ldr	r2, [r7, #0]
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 f812 	bl	800bf48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2220      	movs	r2, #32
 800bf30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
	...

0800bf48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d108      	bne.n	800bf6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bf68:	e031      	b.n	800bfce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bf6a:	2310      	movs	r3, #16
 800bf6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bf6e:	2310      	movs	r3, #16
 800bf70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	0e5b      	lsrs	r3, r3, #25
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	f003 0307 	and.w	r3, r3, #7
 800bf80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	0f5b      	lsrs	r3, r3, #29
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	f003 0307 	and.w	r3, r3, #7
 800bf90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bf92:	7bbb      	ldrb	r3, [r7, #14]
 800bf94:	7b3a      	ldrb	r2, [r7, #12]
 800bf96:	4911      	ldr	r1, [pc, #68]	; (800bfdc <UARTEx_SetNbDataToProcess+0x94>)
 800bf98:	5c8a      	ldrb	r2, [r1, r2]
 800bf9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bf9e:	7b3a      	ldrb	r2, [r7, #12]
 800bfa0:	490f      	ldr	r1, [pc, #60]	; (800bfe0 <UARTEx_SetNbDataToProcess+0x98>)
 800bfa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bfa4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfa8:	b29a      	uxth	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
 800bfb2:	7b7a      	ldrb	r2, [r7, #13]
 800bfb4:	4909      	ldr	r1, [pc, #36]	; (800bfdc <UARTEx_SetNbDataToProcess+0x94>)
 800bfb6:	5c8a      	ldrb	r2, [r1, r2]
 800bfb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bfbc:	7b7a      	ldrb	r2, [r7, #13]
 800bfbe:	4908      	ldr	r1, [pc, #32]	; (800bfe0 <UARTEx_SetNbDataToProcess+0x98>)
 800bfc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bfc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bfce:	bf00      	nop
 800bfd0:	3714      	adds	r7, #20
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	0800e96c 	.word	0x0800e96c
 800bfe0:	0800e974 	.word	0x0800e974

0800bfe4 <__errno>:
 800bfe4:	4b01      	ldr	r3, [pc, #4]	; (800bfec <__errno+0x8>)
 800bfe6:	6818      	ldr	r0, [r3, #0]
 800bfe8:	4770      	bx	lr
 800bfea:	bf00      	nop
 800bfec:	2400001c 	.word	0x2400001c

0800bff0 <__libc_init_array>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	4d0d      	ldr	r5, [pc, #52]	; (800c028 <__libc_init_array+0x38>)
 800bff4:	4c0d      	ldr	r4, [pc, #52]	; (800c02c <__libc_init_array+0x3c>)
 800bff6:	1b64      	subs	r4, r4, r5
 800bff8:	10a4      	asrs	r4, r4, #2
 800bffa:	2600      	movs	r6, #0
 800bffc:	42a6      	cmp	r6, r4
 800bffe:	d109      	bne.n	800c014 <__libc_init_array+0x24>
 800c000:	4d0b      	ldr	r5, [pc, #44]	; (800c030 <__libc_init_array+0x40>)
 800c002:	4c0c      	ldr	r4, [pc, #48]	; (800c034 <__libc_init_array+0x44>)
 800c004:	f002 fc78 	bl	800e8f8 <_init>
 800c008:	1b64      	subs	r4, r4, r5
 800c00a:	10a4      	asrs	r4, r4, #2
 800c00c:	2600      	movs	r6, #0
 800c00e:	42a6      	cmp	r6, r4
 800c010:	d105      	bne.n	800c01e <__libc_init_array+0x2e>
 800c012:	bd70      	pop	{r4, r5, r6, pc}
 800c014:	f855 3b04 	ldr.w	r3, [r5], #4
 800c018:	4798      	blx	r3
 800c01a:	3601      	adds	r6, #1
 800c01c:	e7ee      	b.n	800bffc <__libc_init_array+0xc>
 800c01e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c022:	4798      	blx	r3
 800c024:	3601      	adds	r6, #1
 800c026:	e7f2      	b.n	800c00e <__libc_init_array+0x1e>
 800c028:	0800ed64 	.word	0x0800ed64
 800c02c:	0800ed64 	.word	0x0800ed64
 800c030:	0800ed64 	.word	0x0800ed64
 800c034:	0800ed68 	.word	0x0800ed68

0800c038 <memset>:
 800c038:	4402      	add	r2, r0
 800c03a:	4603      	mov	r3, r0
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d100      	bne.n	800c042 <memset+0xa>
 800c040:	4770      	bx	lr
 800c042:	f803 1b01 	strb.w	r1, [r3], #1
 800c046:	e7f9      	b.n	800c03c <memset+0x4>

0800c048 <__cvt>:
 800c048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c04a:	ed2d 8b02 	vpush	{d8}
 800c04e:	eeb0 8b40 	vmov.f64	d8, d0
 800c052:	b085      	sub	sp, #20
 800c054:	4617      	mov	r7, r2
 800c056:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c058:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c05a:	ee18 2a90 	vmov	r2, s17
 800c05e:	f025 0520 	bic.w	r5, r5, #32
 800c062:	2a00      	cmp	r2, #0
 800c064:	bfb6      	itet	lt
 800c066:	222d      	movlt	r2, #45	; 0x2d
 800c068:	2200      	movge	r2, #0
 800c06a:	eeb1 8b40 	vneglt.f64	d8, d0
 800c06e:	2d46      	cmp	r5, #70	; 0x46
 800c070:	460c      	mov	r4, r1
 800c072:	701a      	strb	r2, [r3, #0]
 800c074:	d004      	beq.n	800c080 <__cvt+0x38>
 800c076:	2d45      	cmp	r5, #69	; 0x45
 800c078:	d100      	bne.n	800c07c <__cvt+0x34>
 800c07a:	3401      	adds	r4, #1
 800c07c:	2102      	movs	r1, #2
 800c07e:	e000      	b.n	800c082 <__cvt+0x3a>
 800c080:	2103      	movs	r1, #3
 800c082:	ab03      	add	r3, sp, #12
 800c084:	9301      	str	r3, [sp, #4]
 800c086:	ab02      	add	r3, sp, #8
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	4622      	mov	r2, r4
 800c08c:	4633      	mov	r3, r6
 800c08e:	eeb0 0b48 	vmov.f64	d0, d8
 800c092:	f000 fcc1 	bl	800ca18 <_dtoa_r>
 800c096:	2d47      	cmp	r5, #71	; 0x47
 800c098:	d109      	bne.n	800c0ae <__cvt+0x66>
 800c09a:	07fb      	lsls	r3, r7, #31
 800c09c:	d407      	bmi.n	800c0ae <__cvt+0x66>
 800c09e:	9b03      	ldr	r3, [sp, #12]
 800c0a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0a2:	1a1b      	subs	r3, r3, r0
 800c0a4:	6013      	str	r3, [r2, #0]
 800c0a6:	b005      	add	sp, #20
 800c0a8:	ecbd 8b02 	vpop	{d8}
 800c0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0ae:	2d46      	cmp	r5, #70	; 0x46
 800c0b0:	eb00 0204 	add.w	r2, r0, r4
 800c0b4:	d10c      	bne.n	800c0d0 <__cvt+0x88>
 800c0b6:	7803      	ldrb	r3, [r0, #0]
 800c0b8:	2b30      	cmp	r3, #48	; 0x30
 800c0ba:	d107      	bne.n	800c0cc <__cvt+0x84>
 800c0bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c4:	bf1c      	itt	ne
 800c0c6:	f1c4 0401 	rsbne	r4, r4, #1
 800c0ca:	6034      	strne	r4, [r6, #0]
 800c0cc:	6833      	ldr	r3, [r6, #0]
 800c0ce:	441a      	add	r2, r3
 800c0d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c0d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d8:	bf08      	it	eq
 800c0da:	9203      	streq	r2, [sp, #12]
 800c0dc:	2130      	movs	r1, #48	; 0x30
 800c0de:	9b03      	ldr	r3, [sp, #12]
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d2dc      	bcs.n	800c09e <__cvt+0x56>
 800c0e4:	1c5c      	adds	r4, r3, #1
 800c0e6:	9403      	str	r4, [sp, #12]
 800c0e8:	7019      	strb	r1, [r3, #0]
 800c0ea:	e7f8      	b.n	800c0de <__cvt+0x96>

0800c0ec <__exponent>:
 800c0ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2900      	cmp	r1, #0
 800c0f2:	bfb8      	it	lt
 800c0f4:	4249      	neglt	r1, r1
 800c0f6:	f803 2b02 	strb.w	r2, [r3], #2
 800c0fa:	bfb4      	ite	lt
 800c0fc:	222d      	movlt	r2, #45	; 0x2d
 800c0fe:	222b      	movge	r2, #43	; 0x2b
 800c100:	2909      	cmp	r1, #9
 800c102:	7042      	strb	r2, [r0, #1]
 800c104:	dd2a      	ble.n	800c15c <__exponent+0x70>
 800c106:	f10d 0407 	add.w	r4, sp, #7
 800c10a:	46a4      	mov	ip, r4
 800c10c:	270a      	movs	r7, #10
 800c10e:	46a6      	mov	lr, r4
 800c110:	460a      	mov	r2, r1
 800c112:	fb91 f6f7 	sdiv	r6, r1, r7
 800c116:	fb07 1516 	mls	r5, r7, r6, r1
 800c11a:	3530      	adds	r5, #48	; 0x30
 800c11c:	2a63      	cmp	r2, #99	; 0x63
 800c11e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c122:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c126:	4631      	mov	r1, r6
 800c128:	dcf1      	bgt.n	800c10e <__exponent+0x22>
 800c12a:	3130      	adds	r1, #48	; 0x30
 800c12c:	f1ae 0502 	sub.w	r5, lr, #2
 800c130:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c134:	1c44      	adds	r4, r0, #1
 800c136:	4629      	mov	r1, r5
 800c138:	4561      	cmp	r1, ip
 800c13a:	d30a      	bcc.n	800c152 <__exponent+0x66>
 800c13c:	f10d 0209 	add.w	r2, sp, #9
 800c140:	eba2 020e 	sub.w	r2, r2, lr
 800c144:	4565      	cmp	r5, ip
 800c146:	bf88      	it	hi
 800c148:	2200      	movhi	r2, #0
 800c14a:	4413      	add	r3, r2
 800c14c:	1a18      	subs	r0, r3, r0
 800c14e:	b003      	add	sp, #12
 800c150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c152:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c156:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c15a:	e7ed      	b.n	800c138 <__exponent+0x4c>
 800c15c:	2330      	movs	r3, #48	; 0x30
 800c15e:	3130      	adds	r1, #48	; 0x30
 800c160:	7083      	strb	r3, [r0, #2]
 800c162:	70c1      	strb	r1, [r0, #3]
 800c164:	1d03      	adds	r3, r0, #4
 800c166:	e7f1      	b.n	800c14c <__exponent+0x60>

0800c168 <_printf_float>:
 800c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	b08b      	sub	sp, #44	; 0x2c
 800c16e:	460c      	mov	r4, r1
 800c170:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c174:	4616      	mov	r6, r2
 800c176:	461f      	mov	r7, r3
 800c178:	4605      	mov	r5, r0
 800c17a:	f001 fac5 	bl	800d708 <_localeconv_r>
 800c17e:	f8d0 b000 	ldr.w	fp, [r0]
 800c182:	4658      	mov	r0, fp
 800c184:	f7f4 f8ac 	bl	80002e0 <strlen>
 800c188:	2300      	movs	r3, #0
 800c18a:	9308      	str	r3, [sp, #32]
 800c18c:	f8d8 3000 	ldr.w	r3, [r8]
 800c190:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c194:	6822      	ldr	r2, [r4, #0]
 800c196:	3307      	adds	r3, #7
 800c198:	f023 0307 	bic.w	r3, r3, #7
 800c19c:	f103 0108 	add.w	r1, r3, #8
 800c1a0:	f8c8 1000 	str.w	r1, [r8]
 800c1a4:	4682      	mov	sl, r0
 800c1a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1aa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c1ae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800c410 <_printf_float+0x2a8>
 800c1b2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c1b6:	eeb0 6bc0 	vabs.f64	d6, d0
 800c1ba:	eeb4 6b47 	vcmp.f64	d6, d7
 800c1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c2:	dd24      	ble.n	800c20e <_printf_float+0xa6>
 800c1c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1cc:	d502      	bpl.n	800c1d4 <_printf_float+0x6c>
 800c1ce:	232d      	movs	r3, #45	; 0x2d
 800c1d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1d4:	4b90      	ldr	r3, [pc, #576]	; (800c418 <_printf_float+0x2b0>)
 800c1d6:	4891      	ldr	r0, [pc, #580]	; (800c41c <_printf_float+0x2b4>)
 800c1d8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c1dc:	bf94      	ite	ls
 800c1de:	4698      	movls	r8, r3
 800c1e0:	4680      	movhi	r8, r0
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	6123      	str	r3, [r4, #16]
 800c1e6:	f022 0204 	bic.w	r2, r2, #4
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	6022      	str	r2, [r4, #0]
 800c1ee:	9304      	str	r3, [sp, #16]
 800c1f0:	9700      	str	r7, [sp, #0]
 800c1f2:	4633      	mov	r3, r6
 800c1f4:	aa09      	add	r2, sp, #36	; 0x24
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4628      	mov	r0, r5
 800c1fa:	f000 f9d3 	bl	800c5a4 <_printf_common>
 800c1fe:	3001      	adds	r0, #1
 800c200:	f040 808a 	bne.w	800c318 <_printf_float+0x1b0>
 800c204:	f04f 30ff 	mov.w	r0, #4294967295
 800c208:	b00b      	add	sp, #44	; 0x2c
 800c20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20e:	eeb4 0b40 	vcmp.f64	d0, d0
 800c212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c216:	d709      	bvc.n	800c22c <_printf_float+0xc4>
 800c218:	ee10 3a90 	vmov	r3, s1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	bfbc      	itt	lt
 800c220:	232d      	movlt	r3, #45	; 0x2d
 800c222:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c226:	487e      	ldr	r0, [pc, #504]	; (800c420 <_printf_float+0x2b8>)
 800c228:	4b7e      	ldr	r3, [pc, #504]	; (800c424 <_printf_float+0x2bc>)
 800c22a:	e7d5      	b.n	800c1d8 <_printf_float+0x70>
 800c22c:	6863      	ldr	r3, [r4, #4]
 800c22e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c232:	9104      	str	r1, [sp, #16]
 800c234:	1c59      	adds	r1, r3, #1
 800c236:	d13c      	bne.n	800c2b2 <_printf_float+0x14a>
 800c238:	2306      	movs	r3, #6
 800c23a:	6063      	str	r3, [r4, #4]
 800c23c:	2300      	movs	r3, #0
 800c23e:	9303      	str	r3, [sp, #12]
 800c240:	ab08      	add	r3, sp, #32
 800c242:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c246:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c24a:	ab07      	add	r3, sp, #28
 800c24c:	6861      	ldr	r1, [r4, #4]
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	6022      	str	r2, [r4, #0]
 800c252:	f10d 031b 	add.w	r3, sp, #27
 800c256:	4628      	mov	r0, r5
 800c258:	f7ff fef6 	bl	800c048 <__cvt>
 800c25c:	9b04      	ldr	r3, [sp, #16]
 800c25e:	9907      	ldr	r1, [sp, #28]
 800c260:	2b47      	cmp	r3, #71	; 0x47
 800c262:	4680      	mov	r8, r0
 800c264:	d108      	bne.n	800c278 <_printf_float+0x110>
 800c266:	1cc8      	adds	r0, r1, #3
 800c268:	db02      	blt.n	800c270 <_printf_float+0x108>
 800c26a:	6863      	ldr	r3, [r4, #4]
 800c26c:	4299      	cmp	r1, r3
 800c26e:	dd41      	ble.n	800c2f4 <_printf_float+0x18c>
 800c270:	f1a9 0902 	sub.w	r9, r9, #2
 800c274:	fa5f f989 	uxtb.w	r9, r9
 800c278:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c27c:	d820      	bhi.n	800c2c0 <_printf_float+0x158>
 800c27e:	3901      	subs	r1, #1
 800c280:	464a      	mov	r2, r9
 800c282:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c286:	9107      	str	r1, [sp, #28]
 800c288:	f7ff ff30 	bl	800c0ec <__exponent>
 800c28c:	9a08      	ldr	r2, [sp, #32]
 800c28e:	9004      	str	r0, [sp, #16]
 800c290:	1813      	adds	r3, r2, r0
 800c292:	2a01      	cmp	r2, #1
 800c294:	6123      	str	r3, [r4, #16]
 800c296:	dc02      	bgt.n	800c29e <_printf_float+0x136>
 800c298:	6822      	ldr	r2, [r4, #0]
 800c29a:	07d2      	lsls	r2, r2, #31
 800c29c:	d501      	bpl.n	800c2a2 <_printf_float+0x13a>
 800c29e:	3301      	adds	r3, #1
 800c2a0:	6123      	str	r3, [r4, #16]
 800c2a2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d0a2      	beq.n	800c1f0 <_printf_float+0x88>
 800c2aa:	232d      	movs	r3, #45	; 0x2d
 800c2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2b0:	e79e      	b.n	800c1f0 <_printf_float+0x88>
 800c2b2:	9904      	ldr	r1, [sp, #16]
 800c2b4:	2947      	cmp	r1, #71	; 0x47
 800c2b6:	d1c1      	bne.n	800c23c <_printf_float+0xd4>
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1bf      	bne.n	800c23c <_printf_float+0xd4>
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e7bc      	b.n	800c23a <_printf_float+0xd2>
 800c2c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c2c4:	d118      	bne.n	800c2f8 <_printf_float+0x190>
 800c2c6:	2900      	cmp	r1, #0
 800c2c8:	6863      	ldr	r3, [r4, #4]
 800c2ca:	dd0b      	ble.n	800c2e4 <_printf_float+0x17c>
 800c2cc:	6121      	str	r1, [r4, #16]
 800c2ce:	b913      	cbnz	r3, 800c2d6 <_printf_float+0x16e>
 800c2d0:	6822      	ldr	r2, [r4, #0]
 800c2d2:	07d0      	lsls	r0, r2, #31
 800c2d4:	d502      	bpl.n	800c2dc <_printf_float+0x174>
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	440b      	add	r3, r1
 800c2da:	6123      	str	r3, [r4, #16]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	65a1      	str	r1, [r4, #88]	; 0x58
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	e7de      	b.n	800c2a2 <_printf_float+0x13a>
 800c2e4:	b913      	cbnz	r3, 800c2ec <_printf_float+0x184>
 800c2e6:	6822      	ldr	r2, [r4, #0]
 800c2e8:	07d2      	lsls	r2, r2, #31
 800c2ea:	d501      	bpl.n	800c2f0 <_printf_float+0x188>
 800c2ec:	3302      	adds	r3, #2
 800c2ee:	e7f4      	b.n	800c2da <_printf_float+0x172>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e7f2      	b.n	800c2da <_printf_float+0x172>
 800c2f4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c2f8:	9b08      	ldr	r3, [sp, #32]
 800c2fa:	4299      	cmp	r1, r3
 800c2fc:	db05      	blt.n	800c30a <_printf_float+0x1a2>
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	6121      	str	r1, [r4, #16]
 800c302:	07d8      	lsls	r0, r3, #31
 800c304:	d5ea      	bpl.n	800c2dc <_printf_float+0x174>
 800c306:	1c4b      	adds	r3, r1, #1
 800c308:	e7e7      	b.n	800c2da <_printf_float+0x172>
 800c30a:	2900      	cmp	r1, #0
 800c30c:	bfd4      	ite	le
 800c30e:	f1c1 0202 	rsble	r2, r1, #2
 800c312:	2201      	movgt	r2, #1
 800c314:	4413      	add	r3, r2
 800c316:	e7e0      	b.n	800c2da <_printf_float+0x172>
 800c318:	6823      	ldr	r3, [r4, #0]
 800c31a:	055a      	lsls	r2, r3, #21
 800c31c:	d407      	bmi.n	800c32e <_printf_float+0x1c6>
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	4642      	mov	r2, r8
 800c322:	4631      	mov	r1, r6
 800c324:	4628      	mov	r0, r5
 800c326:	47b8      	blx	r7
 800c328:	3001      	adds	r0, #1
 800c32a:	d12a      	bne.n	800c382 <_printf_float+0x21a>
 800c32c:	e76a      	b.n	800c204 <_printf_float+0x9c>
 800c32e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c332:	f240 80e2 	bls.w	800c4fa <_printf_float+0x392>
 800c336:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c33a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c342:	d133      	bne.n	800c3ac <_printf_float+0x244>
 800c344:	4a38      	ldr	r2, [pc, #224]	; (800c428 <_printf_float+0x2c0>)
 800c346:	2301      	movs	r3, #1
 800c348:	4631      	mov	r1, r6
 800c34a:	4628      	mov	r0, r5
 800c34c:	47b8      	blx	r7
 800c34e:	3001      	adds	r0, #1
 800c350:	f43f af58 	beq.w	800c204 <_printf_float+0x9c>
 800c354:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c358:	429a      	cmp	r2, r3
 800c35a:	db02      	blt.n	800c362 <_printf_float+0x1fa>
 800c35c:	6823      	ldr	r3, [r4, #0]
 800c35e:	07d8      	lsls	r0, r3, #31
 800c360:	d50f      	bpl.n	800c382 <_printf_float+0x21a>
 800c362:	4653      	mov	r3, sl
 800c364:	465a      	mov	r2, fp
 800c366:	4631      	mov	r1, r6
 800c368:	4628      	mov	r0, r5
 800c36a:	47b8      	blx	r7
 800c36c:	3001      	adds	r0, #1
 800c36e:	f43f af49 	beq.w	800c204 <_printf_float+0x9c>
 800c372:	f04f 0800 	mov.w	r8, #0
 800c376:	f104 091a 	add.w	r9, r4, #26
 800c37a:	9b08      	ldr	r3, [sp, #32]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	4543      	cmp	r3, r8
 800c380:	dc09      	bgt.n	800c396 <_printf_float+0x22e>
 800c382:	6823      	ldr	r3, [r4, #0]
 800c384:	079b      	lsls	r3, r3, #30
 800c386:	f100 8108 	bmi.w	800c59a <_printf_float+0x432>
 800c38a:	68e0      	ldr	r0, [r4, #12]
 800c38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c38e:	4298      	cmp	r0, r3
 800c390:	bfb8      	it	lt
 800c392:	4618      	movlt	r0, r3
 800c394:	e738      	b.n	800c208 <_printf_float+0xa0>
 800c396:	2301      	movs	r3, #1
 800c398:	464a      	mov	r2, r9
 800c39a:	4631      	mov	r1, r6
 800c39c:	4628      	mov	r0, r5
 800c39e:	47b8      	blx	r7
 800c3a0:	3001      	adds	r0, #1
 800c3a2:	f43f af2f 	beq.w	800c204 <_printf_float+0x9c>
 800c3a6:	f108 0801 	add.w	r8, r8, #1
 800c3aa:	e7e6      	b.n	800c37a <_printf_float+0x212>
 800c3ac:	9b07      	ldr	r3, [sp, #28]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	dc3c      	bgt.n	800c42c <_printf_float+0x2c4>
 800c3b2:	4a1d      	ldr	r2, [pc, #116]	; (800c428 <_printf_float+0x2c0>)
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	47b8      	blx	r7
 800c3bc:	3001      	adds	r0, #1
 800c3be:	f43f af21 	beq.w	800c204 <_printf_float+0x9c>
 800c3c2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	d102      	bne.n	800c3d0 <_printf_float+0x268>
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	07d9      	lsls	r1, r3, #31
 800c3ce:	d5d8      	bpl.n	800c382 <_printf_float+0x21a>
 800c3d0:	4653      	mov	r3, sl
 800c3d2:	465a      	mov	r2, fp
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	47b8      	blx	r7
 800c3da:	3001      	adds	r0, #1
 800c3dc:	f43f af12 	beq.w	800c204 <_printf_float+0x9c>
 800c3e0:	f04f 0900 	mov.w	r9, #0
 800c3e4:	f104 0a1a 	add.w	sl, r4, #26
 800c3e8:	9b07      	ldr	r3, [sp, #28]
 800c3ea:	425b      	negs	r3, r3
 800c3ec:	454b      	cmp	r3, r9
 800c3ee:	dc01      	bgt.n	800c3f4 <_printf_float+0x28c>
 800c3f0:	9b08      	ldr	r3, [sp, #32]
 800c3f2:	e795      	b.n	800c320 <_printf_float+0x1b8>
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	4652      	mov	r2, sl
 800c3f8:	4631      	mov	r1, r6
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	47b8      	blx	r7
 800c3fe:	3001      	adds	r0, #1
 800c400:	f43f af00 	beq.w	800c204 <_printf_float+0x9c>
 800c404:	f109 0901 	add.w	r9, r9, #1
 800c408:	e7ee      	b.n	800c3e8 <_printf_float+0x280>
 800c40a:	bf00      	nop
 800c40c:	f3af 8000 	nop.w
 800c410:	ffffffff 	.word	0xffffffff
 800c414:	7fefffff 	.word	0x7fefffff
 800c418:	0800e980 	.word	0x0800e980
 800c41c:	0800e984 	.word	0x0800e984
 800c420:	0800e98c 	.word	0x0800e98c
 800c424:	0800e988 	.word	0x0800e988
 800c428:	0800e990 	.word	0x0800e990
 800c42c:	9a08      	ldr	r2, [sp, #32]
 800c42e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c430:	429a      	cmp	r2, r3
 800c432:	bfa8      	it	ge
 800c434:	461a      	movge	r2, r3
 800c436:	2a00      	cmp	r2, #0
 800c438:	4691      	mov	r9, r2
 800c43a:	dc38      	bgt.n	800c4ae <_printf_float+0x346>
 800c43c:	2300      	movs	r3, #0
 800c43e:	9305      	str	r3, [sp, #20]
 800c440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c444:	f104 021a 	add.w	r2, r4, #26
 800c448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c44a:	9905      	ldr	r1, [sp, #20]
 800c44c:	9304      	str	r3, [sp, #16]
 800c44e:	eba3 0309 	sub.w	r3, r3, r9
 800c452:	428b      	cmp	r3, r1
 800c454:	dc33      	bgt.n	800c4be <_printf_float+0x356>
 800c456:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	db3c      	blt.n	800c4d8 <_printf_float+0x370>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	07da      	lsls	r2, r3, #31
 800c462:	d439      	bmi.n	800c4d8 <_printf_float+0x370>
 800c464:	9a08      	ldr	r2, [sp, #32]
 800c466:	9b04      	ldr	r3, [sp, #16]
 800c468:	9907      	ldr	r1, [sp, #28]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	eba2 0901 	sub.w	r9, r2, r1
 800c470:	4599      	cmp	r9, r3
 800c472:	bfa8      	it	ge
 800c474:	4699      	movge	r9, r3
 800c476:	f1b9 0f00 	cmp.w	r9, #0
 800c47a:	dc35      	bgt.n	800c4e8 <_printf_float+0x380>
 800c47c:	f04f 0800 	mov.w	r8, #0
 800c480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c484:	f104 0a1a 	add.w	sl, r4, #26
 800c488:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c48c:	1a9b      	subs	r3, r3, r2
 800c48e:	eba3 0309 	sub.w	r3, r3, r9
 800c492:	4543      	cmp	r3, r8
 800c494:	f77f af75 	ble.w	800c382 <_printf_float+0x21a>
 800c498:	2301      	movs	r3, #1
 800c49a:	4652      	mov	r2, sl
 800c49c:	4631      	mov	r1, r6
 800c49e:	4628      	mov	r0, r5
 800c4a0:	47b8      	blx	r7
 800c4a2:	3001      	adds	r0, #1
 800c4a4:	f43f aeae 	beq.w	800c204 <_printf_float+0x9c>
 800c4a8:	f108 0801 	add.w	r8, r8, #1
 800c4ac:	e7ec      	b.n	800c488 <_printf_float+0x320>
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	4631      	mov	r1, r6
 800c4b2:	4642      	mov	r2, r8
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	47b8      	blx	r7
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	d1bf      	bne.n	800c43c <_printf_float+0x2d4>
 800c4bc:	e6a2      	b.n	800c204 <_printf_float+0x9c>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	4631      	mov	r1, r6
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	9204      	str	r2, [sp, #16]
 800c4c6:	47b8      	blx	r7
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	f43f ae9b 	beq.w	800c204 <_printf_float+0x9c>
 800c4ce:	9b05      	ldr	r3, [sp, #20]
 800c4d0:	9a04      	ldr	r2, [sp, #16]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	9305      	str	r3, [sp, #20]
 800c4d6:	e7b7      	b.n	800c448 <_printf_float+0x2e0>
 800c4d8:	4653      	mov	r3, sl
 800c4da:	465a      	mov	r2, fp
 800c4dc:	4631      	mov	r1, r6
 800c4de:	4628      	mov	r0, r5
 800c4e0:	47b8      	blx	r7
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	d1be      	bne.n	800c464 <_printf_float+0x2fc>
 800c4e6:	e68d      	b.n	800c204 <_printf_float+0x9c>
 800c4e8:	9a04      	ldr	r2, [sp, #16]
 800c4ea:	464b      	mov	r3, r9
 800c4ec:	4442      	add	r2, r8
 800c4ee:	4631      	mov	r1, r6
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	47b8      	blx	r7
 800c4f4:	3001      	adds	r0, #1
 800c4f6:	d1c1      	bne.n	800c47c <_printf_float+0x314>
 800c4f8:	e684      	b.n	800c204 <_printf_float+0x9c>
 800c4fa:	9a08      	ldr	r2, [sp, #32]
 800c4fc:	2a01      	cmp	r2, #1
 800c4fe:	dc01      	bgt.n	800c504 <_printf_float+0x39c>
 800c500:	07db      	lsls	r3, r3, #31
 800c502:	d537      	bpl.n	800c574 <_printf_float+0x40c>
 800c504:	2301      	movs	r3, #1
 800c506:	4642      	mov	r2, r8
 800c508:	4631      	mov	r1, r6
 800c50a:	4628      	mov	r0, r5
 800c50c:	47b8      	blx	r7
 800c50e:	3001      	adds	r0, #1
 800c510:	f43f ae78 	beq.w	800c204 <_printf_float+0x9c>
 800c514:	4653      	mov	r3, sl
 800c516:	465a      	mov	r2, fp
 800c518:	4631      	mov	r1, r6
 800c51a:	4628      	mov	r0, r5
 800c51c:	47b8      	blx	r7
 800c51e:	3001      	adds	r0, #1
 800c520:	f43f ae70 	beq.w	800c204 <_printf_float+0x9c>
 800c524:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c528:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c530:	d01b      	beq.n	800c56a <_printf_float+0x402>
 800c532:	9b08      	ldr	r3, [sp, #32]
 800c534:	f108 0201 	add.w	r2, r8, #1
 800c538:	3b01      	subs	r3, #1
 800c53a:	4631      	mov	r1, r6
 800c53c:	4628      	mov	r0, r5
 800c53e:	47b8      	blx	r7
 800c540:	3001      	adds	r0, #1
 800c542:	d10e      	bne.n	800c562 <_printf_float+0x3fa>
 800c544:	e65e      	b.n	800c204 <_printf_float+0x9c>
 800c546:	2301      	movs	r3, #1
 800c548:	464a      	mov	r2, r9
 800c54a:	4631      	mov	r1, r6
 800c54c:	4628      	mov	r0, r5
 800c54e:	47b8      	blx	r7
 800c550:	3001      	adds	r0, #1
 800c552:	f43f ae57 	beq.w	800c204 <_printf_float+0x9c>
 800c556:	f108 0801 	add.w	r8, r8, #1
 800c55a:	9b08      	ldr	r3, [sp, #32]
 800c55c:	3b01      	subs	r3, #1
 800c55e:	4543      	cmp	r3, r8
 800c560:	dcf1      	bgt.n	800c546 <_printf_float+0x3de>
 800c562:	9b04      	ldr	r3, [sp, #16]
 800c564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c568:	e6db      	b.n	800c322 <_printf_float+0x1ba>
 800c56a:	f04f 0800 	mov.w	r8, #0
 800c56e:	f104 091a 	add.w	r9, r4, #26
 800c572:	e7f2      	b.n	800c55a <_printf_float+0x3f2>
 800c574:	2301      	movs	r3, #1
 800c576:	4642      	mov	r2, r8
 800c578:	e7df      	b.n	800c53a <_printf_float+0x3d2>
 800c57a:	2301      	movs	r3, #1
 800c57c:	464a      	mov	r2, r9
 800c57e:	4631      	mov	r1, r6
 800c580:	4628      	mov	r0, r5
 800c582:	47b8      	blx	r7
 800c584:	3001      	adds	r0, #1
 800c586:	f43f ae3d 	beq.w	800c204 <_printf_float+0x9c>
 800c58a:	f108 0801 	add.w	r8, r8, #1
 800c58e:	68e3      	ldr	r3, [r4, #12]
 800c590:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c592:	1a5b      	subs	r3, r3, r1
 800c594:	4543      	cmp	r3, r8
 800c596:	dcf0      	bgt.n	800c57a <_printf_float+0x412>
 800c598:	e6f7      	b.n	800c38a <_printf_float+0x222>
 800c59a:	f04f 0800 	mov.w	r8, #0
 800c59e:	f104 0919 	add.w	r9, r4, #25
 800c5a2:	e7f4      	b.n	800c58e <_printf_float+0x426>

0800c5a4 <_printf_common>:
 800c5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a8:	4616      	mov	r6, r2
 800c5aa:	4699      	mov	r9, r3
 800c5ac:	688a      	ldr	r2, [r1, #8]
 800c5ae:	690b      	ldr	r3, [r1, #16]
 800c5b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	bfb8      	it	lt
 800c5b8:	4613      	movlt	r3, r2
 800c5ba:	6033      	str	r3, [r6, #0]
 800c5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5c0:	4607      	mov	r7, r0
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	b10a      	cbz	r2, 800c5ca <_printf_common+0x26>
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	6033      	str	r3, [r6, #0]
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	0699      	lsls	r1, r3, #26
 800c5ce:	bf42      	ittt	mi
 800c5d0:	6833      	ldrmi	r3, [r6, #0]
 800c5d2:	3302      	addmi	r3, #2
 800c5d4:	6033      	strmi	r3, [r6, #0]
 800c5d6:	6825      	ldr	r5, [r4, #0]
 800c5d8:	f015 0506 	ands.w	r5, r5, #6
 800c5dc:	d106      	bne.n	800c5ec <_printf_common+0x48>
 800c5de:	f104 0a19 	add.w	sl, r4, #25
 800c5e2:	68e3      	ldr	r3, [r4, #12]
 800c5e4:	6832      	ldr	r2, [r6, #0]
 800c5e6:	1a9b      	subs	r3, r3, r2
 800c5e8:	42ab      	cmp	r3, r5
 800c5ea:	dc26      	bgt.n	800c63a <_printf_common+0x96>
 800c5ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5f0:	1e13      	subs	r3, r2, #0
 800c5f2:	6822      	ldr	r2, [r4, #0]
 800c5f4:	bf18      	it	ne
 800c5f6:	2301      	movne	r3, #1
 800c5f8:	0692      	lsls	r2, r2, #26
 800c5fa:	d42b      	bmi.n	800c654 <_printf_common+0xb0>
 800c5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c600:	4649      	mov	r1, r9
 800c602:	4638      	mov	r0, r7
 800c604:	47c0      	blx	r8
 800c606:	3001      	adds	r0, #1
 800c608:	d01e      	beq.n	800c648 <_printf_common+0xa4>
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	68e5      	ldr	r5, [r4, #12]
 800c60e:	6832      	ldr	r2, [r6, #0]
 800c610:	f003 0306 	and.w	r3, r3, #6
 800c614:	2b04      	cmp	r3, #4
 800c616:	bf08      	it	eq
 800c618:	1aad      	subeq	r5, r5, r2
 800c61a:	68a3      	ldr	r3, [r4, #8]
 800c61c:	6922      	ldr	r2, [r4, #16]
 800c61e:	bf0c      	ite	eq
 800c620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c624:	2500      	movne	r5, #0
 800c626:	4293      	cmp	r3, r2
 800c628:	bfc4      	itt	gt
 800c62a:	1a9b      	subgt	r3, r3, r2
 800c62c:	18ed      	addgt	r5, r5, r3
 800c62e:	2600      	movs	r6, #0
 800c630:	341a      	adds	r4, #26
 800c632:	42b5      	cmp	r5, r6
 800c634:	d11a      	bne.n	800c66c <_printf_common+0xc8>
 800c636:	2000      	movs	r0, #0
 800c638:	e008      	b.n	800c64c <_printf_common+0xa8>
 800c63a:	2301      	movs	r3, #1
 800c63c:	4652      	mov	r2, sl
 800c63e:	4649      	mov	r1, r9
 800c640:	4638      	mov	r0, r7
 800c642:	47c0      	blx	r8
 800c644:	3001      	adds	r0, #1
 800c646:	d103      	bne.n	800c650 <_printf_common+0xac>
 800c648:	f04f 30ff 	mov.w	r0, #4294967295
 800c64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c650:	3501      	adds	r5, #1
 800c652:	e7c6      	b.n	800c5e2 <_printf_common+0x3e>
 800c654:	18e1      	adds	r1, r4, r3
 800c656:	1c5a      	adds	r2, r3, #1
 800c658:	2030      	movs	r0, #48	; 0x30
 800c65a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c65e:	4422      	add	r2, r4
 800c660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c668:	3302      	adds	r3, #2
 800c66a:	e7c7      	b.n	800c5fc <_printf_common+0x58>
 800c66c:	2301      	movs	r3, #1
 800c66e:	4622      	mov	r2, r4
 800c670:	4649      	mov	r1, r9
 800c672:	4638      	mov	r0, r7
 800c674:	47c0      	blx	r8
 800c676:	3001      	adds	r0, #1
 800c678:	d0e6      	beq.n	800c648 <_printf_common+0xa4>
 800c67a:	3601      	adds	r6, #1
 800c67c:	e7d9      	b.n	800c632 <_printf_common+0x8e>
	...

0800c680 <_printf_i>:
 800c680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c684:	460c      	mov	r4, r1
 800c686:	4691      	mov	r9, r2
 800c688:	7e27      	ldrb	r7, [r4, #24]
 800c68a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c68c:	2f78      	cmp	r7, #120	; 0x78
 800c68e:	4680      	mov	r8, r0
 800c690:	469a      	mov	sl, r3
 800c692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c696:	d807      	bhi.n	800c6a8 <_printf_i+0x28>
 800c698:	2f62      	cmp	r7, #98	; 0x62
 800c69a:	d80a      	bhi.n	800c6b2 <_printf_i+0x32>
 800c69c:	2f00      	cmp	r7, #0
 800c69e:	f000 80d8 	beq.w	800c852 <_printf_i+0x1d2>
 800c6a2:	2f58      	cmp	r7, #88	; 0x58
 800c6a4:	f000 80a3 	beq.w	800c7ee <_printf_i+0x16e>
 800c6a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6b0:	e03a      	b.n	800c728 <_printf_i+0xa8>
 800c6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c6b6:	2b15      	cmp	r3, #21
 800c6b8:	d8f6      	bhi.n	800c6a8 <_printf_i+0x28>
 800c6ba:	a001      	add	r0, pc, #4	; (adr r0, 800c6c0 <_printf_i+0x40>)
 800c6bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c6c0:	0800c719 	.word	0x0800c719
 800c6c4:	0800c72d 	.word	0x0800c72d
 800c6c8:	0800c6a9 	.word	0x0800c6a9
 800c6cc:	0800c6a9 	.word	0x0800c6a9
 800c6d0:	0800c6a9 	.word	0x0800c6a9
 800c6d4:	0800c6a9 	.word	0x0800c6a9
 800c6d8:	0800c72d 	.word	0x0800c72d
 800c6dc:	0800c6a9 	.word	0x0800c6a9
 800c6e0:	0800c6a9 	.word	0x0800c6a9
 800c6e4:	0800c6a9 	.word	0x0800c6a9
 800c6e8:	0800c6a9 	.word	0x0800c6a9
 800c6ec:	0800c839 	.word	0x0800c839
 800c6f0:	0800c75d 	.word	0x0800c75d
 800c6f4:	0800c81b 	.word	0x0800c81b
 800c6f8:	0800c6a9 	.word	0x0800c6a9
 800c6fc:	0800c6a9 	.word	0x0800c6a9
 800c700:	0800c85b 	.word	0x0800c85b
 800c704:	0800c6a9 	.word	0x0800c6a9
 800c708:	0800c75d 	.word	0x0800c75d
 800c70c:	0800c6a9 	.word	0x0800c6a9
 800c710:	0800c6a9 	.word	0x0800c6a9
 800c714:	0800c823 	.word	0x0800c823
 800c718:	680b      	ldr	r3, [r1, #0]
 800c71a:	1d1a      	adds	r2, r3, #4
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	600a      	str	r2, [r1, #0]
 800c720:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c728:	2301      	movs	r3, #1
 800c72a:	e0a3      	b.n	800c874 <_printf_i+0x1f4>
 800c72c:	6825      	ldr	r5, [r4, #0]
 800c72e:	6808      	ldr	r0, [r1, #0]
 800c730:	062e      	lsls	r6, r5, #24
 800c732:	f100 0304 	add.w	r3, r0, #4
 800c736:	d50a      	bpl.n	800c74e <_printf_i+0xce>
 800c738:	6805      	ldr	r5, [r0, #0]
 800c73a:	600b      	str	r3, [r1, #0]
 800c73c:	2d00      	cmp	r5, #0
 800c73e:	da03      	bge.n	800c748 <_printf_i+0xc8>
 800c740:	232d      	movs	r3, #45	; 0x2d
 800c742:	426d      	negs	r5, r5
 800c744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c748:	485e      	ldr	r0, [pc, #376]	; (800c8c4 <_printf_i+0x244>)
 800c74a:	230a      	movs	r3, #10
 800c74c:	e019      	b.n	800c782 <_printf_i+0x102>
 800c74e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c752:	6805      	ldr	r5, [r0, #0]
 800c754:	600b      	str	r3, [r1, #0]
 800c756:	bf18      	it	ne
 800c758:	b22d      	sxthne	r5, r5
 800c75a:	e7ef      	b.n	800c73c <_printf_i+0xbc>
 800c75c:	680b      	ldr	r3, [r1, #0]
 800c75e:	6825      	ldr	r5, [r4, #0]
 800c760:	1d18      	adds	r0, r3, #4
 800c762:	6008      	str	r0, [r1, #0]
 800c764:	0628      	lsls	r0, r5, #24
 800c766:	d501      	bpl.n	800c76c <_printf_i+0xec>
 800c768:	681d      	ldr	r5, [r3, #0]
 800c76a:	e002      	b.n	800c772 <_printf_i+0xf2>
 800c76c:	0669      	lsls	r1, r5, #25
 800c76e:	d5fb      	bpl.n	800c768 <_printf_i+0xe8>
 800c770:	881d      	ldrh	r5, [r3, #0]
 800c772:	4854      	ldr	r0, [pc, #336]	; (800c8c4 <_printf_i+0x244>)
 800c774:	2f6f      	cmp	r7, #111	; 0x6f
 800c776:	bf0c      	ite	eq
 800c778:	2308      	moveq	r3, #8
 800c77a:	230a      	movne	r3, #10
 800c77c:	2100      	movs	r1, #0
 800c77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c782:	6866      	ldr	r6, [r4, #4]
 800c784:	60a6      	str	r6, [r4, #8]
 800c786:	2e00      	cmp	r6, #0
 800c788:	bfa2      	ittt	ge
 800c78a:	6821      	ldrge	r1, [r4, #0]
 800c78c:	f021 0104 	bicge.w	r1, r1, #4
 800c790:	6021      	strge	r1, [r4, #0]
 800c792:	b90d      	cbnz	r5, 800c798 <_printf_i+0x118>
 800c794:	2e00      	cmp	r6, #0
 800c796:	d04d      	beq.n	800c834 <_printf_i+0x1b4>
 800c798:	4616      	mov	r6, r2
 800c79a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c79e:	fb03 5711 	mls	r7, r3, r1, r5
 800c7a2:	5dc7      	ldrb	r7, [r0, r7]
 800c7a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c7a8:	462f      	mov	r7, r5
 800c7aa:	42bb      	cmp	r3, r7
 800c7ac:	460d      	mov	r5, r1
 800c7ae:	d9f4      	bls.n	800c79a <_printf_i+0x11a>
 800c7b0:	2b08      	cmp	r3, #8
 800c7b2:	d10b      	bne.n	800c7cc <_printf_i+0x14c>
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	07df      	lsls	r7, r3, #31
 800c7b8:	d508      	bpl.n	800c7cc <_printf_i+0x14c>
 800c7ba:	6923      	ldr	r3, [r4, #16]
 800c7bc:	6861      	ldr	r1, [r4, #4]
 800c7be:	4299      	cmp	r1, r3
 800c7c0:	bfde      	ittt	le
 800c7c2:	2330      	movle	r3, #48	; 0x30
 800c7c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c7c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c7cc:	1b92      	subs	r2, r2, r6
 800c7ce:	6122      	str	r2, [r4, #16]
 800c7d0:	f8cd a000 	str.w	sl, [sp]
 800c7d4:	464b      	mov	r3, r9
 800c7d6:	aa03      	add	r2, sp, #12
 800c7d8:	4621      	mov	r1, r4
 800c7da:	4640      	mov	r0, r8
 800c7dc:	f7ff fee2 	bl	800c5a4 <_printf_common>
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	d14c      	bne.n	800c87e <_printf_i+0x1fe>
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e8:	b004      	add	sp, #16
 800c7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ee:	4835      	ldr	r0, [pc, #212]	; (800c8c4 <_printf_i+0x244>)
 800c7f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c7f4:	6823      	ldr	r3, [r4, #0]
 800c7f6:	680e      	ldr	r6, [r1, #0]
 800c7f8:	061f      	lsls	r7, r3, #24
 800c7fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800c7fe:	600e      	str	r6, [r1, #0]
 800c800:	d514      	bpl.n	800c82c <_printf_i+0x1ac>
 800c802:	07d9      	lsls	r1, r3, #31
 800c804:	bf44      	itt	mi
 800c806:	f043 0320 	orrmi.w	r3, r3, #32
 800c80a:	6023      	strmi	r3, [r4, #0]
 800c80c:	b91d      	cbnz	r5, 800c816 <_printf_i+0x196>
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	f023 0320 	bic.w	r3, r3, #32
 800c814:	6023      	str	r3, [r4, #0]
 800c816:	2310      	movs	r3, #16
 800c818:	e7b0      	b.n	800c77c <_printf_i+0xfc>
 800c81a:	6823      	ldr	r3, [r4, #0]
 800c81c:	f043 0320 	orr.w	r3, r3, #32
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	2378      	movs	r3, #120	; 0x78
 800c824:	4828      	ldr	r0, [pc, #160]	; (800c8c8 <_printf_i+0x248>)
 800c826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c82a:	e7e3      	b.n	800c7f4 <_printf_i+0x174>
 800c82c:	065e      	lsls	r6, r3, #25
 800c82e:	bf48      	it	mi
 800c830:	b2ad      	uxthmi	r5, r5
 800c832:	e7e6      	b.n	800c802 <_printf_i+0x182>
 800c834:	4616      	mov	r6, r2
 800c836:	e7bb      	b.n	800c7b0 <_printf_i+0x130>
 800c838:	680b      	ldr	r3, [r1, #0]
 800c83a:	6826      	ldr	r6, [r4, #0]
 800c83c:	6960      	ldr	r0, [r4, #20]
 800c83e:	1d1d      	adds	r5, r3, #4
 800c840:	600d      	str	r5, [r1, #0]
 800c842:	0635      	lsls	r5, r6, #24
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	d501      	bpl.n	800c84c <_printf_i+0x1cc>
 800c848:	6018      	str	r0, [r3, #0]
 800c84a:	e002      	b.n	800c852 <_printf_i+0x1d2>
 800c84c:	0671      	lsls	r1, r6, #25
 800c84e:	d5fb      	bpl.n	800c848 <_printf_i+0x1c8>
 800c850:	8018      	strh	r0, [r3, #0]
 800c852:	2300      	movs	r3, #0
 800c854:	6123      	str	r3, [r4, #16]
 800c856:	4616      	mov	r6, r2
 800c858:	e7ba      	b.n	800c7d0 <_printf_i+0x150>
 800c85a:	680b      	ldr	r3, [r1, #0]
 800c85c:	1d1a      	adds	r2, r3, #4
 800c85e:	600a      	str	r2, [r1, #0]
 800c860:	681e      	ldr	r6, [r3, #0]
 800c862:	6862      	ldr	r2, [r4, #4]
 800c864:	2100      	movs	r1, #0
 800c866:	4630      	mov	r0, r6
 800c868:	f7f3 fd42 	bl	80002f0 <memchr>
 800c86c:	b108      	cbz	r0, 800c872 <_printf_i+0x1f2>
 800c86e:	1b80      	subs	r0, r0, r6
 800c870:	6060      	str	r0, [r4, #4]
 800c872:	6863      	ldr	r3, [r4, #4]
 800c874:	6123      	str	r3, [r4, #16]
 800c876:	2300      	movs	r3, #0
 800c878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c87c:	e7a8      	b.n	800c7d0 <_printf_i+0x150>
 800c87e:	6923      	ldr	r3, [r4, #16]
 800c880:	4632      	mov	r2, r6
 800c882:	4649      	mov	r1, r9
 800c884:	4640      	mov	r0, r8
 800c886:	47d0      	blx	sl
 800c888:	3001      	adds	r0, #1
 800c88a:	d0ab      	beq.n	800c7e4 <_printf_i+0x164>
 800c88c:	6823      	ldr	r3, [r4, #0]
 800c88e:	079b      	lsls	r3, r3, #30
 800c890:	d413      	bmi.n	800c8ba <_printf_i+0x23a>
 800c892:	68e0      	ldr	r0, [r4, #12]
 800c894:	9b03      	ldr	r3, [sp, #12]
 800c896:	4298      	cmp	r0, r3
 800c898:	bfb8      	it	lt
 800c89a:	4618      	movlt	r0, r3
 800c89c:	e7a4      	b.n	800c7e8 <_printf_i+0x168>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	4632      	mov	r2, r6
 800c8a2:	4649      	mov	r1, r9
 800c8a4:	4640      	mov	r0, r8
 800c8a6:	47d0      	blx	sl
 800c8a8:	3001      	adds	r0, #1
 800c8aa:	d09b      	beq.n	800c7e4 <_printf_i+0x164>
 800c8ac:	3501      	adds	r5, #1
 800c8ae:	68e3      	ldr	r3, [r4, #12]
 800c8b0:	9903      	ldr	r1, [sp, #12]
 800c8b2:	1a5b      	subs	r3, r3, r1
 800c8b4:	42ab      	cmp	r3, r5
 800c8b6:	dcf2      	bgt.n	800c89e <_printf_i+0x21e>
 800c8b8:	e7eb      	b.n	800c892 <_printf_i+0x212>
 800c8ba:	2500      	movs	r5, #0
 800c8bc:	f104 0619 	add.w	r6, r4, #25
 800c8c0:	e7f5      	b.n	800c8ae <_printf_i+0x22e>
 800c8c2:	bf00      	nop
 800c8c4:	0800e992 	.word	0x0800e992
 800c8c8:	0800e9a3 	.word	0x0800e9a3

0800c8cc <iprintf>:
 800c8cc:	b40f      	push	{r0, r1, r2, r3}
 800c8ce:	4b0a      	ldr	r3, [pc, #40]	; (800c8f8 <iprintf+0x2c>)
 800c8d0:	b513      	push	{r0, r1, r4, lr}
 800c8d2:	681c      	ldr	r4, [r3, #0]
 800c8d4:	b124      	cbz	r4, 800c8e0 <iprintf+0x14>
 800c8d6:	69a3      	ldr	r3, [r4, #24]
 800c8d8:	b913      	cbnz	r3, 800c8e0 <iprintf+0x14>
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f000 fe76 	bl	800d5cc <__sinit>
 800c8e0:	ab05      	add	r3, sp, #20
 800c8e2:	9a04      	ldr	r2, [sp, #16]
 800c8e4:	68a1      	ldr	r1, [r4, #8]
 800c8e6:	9301      	str	r3, [sp, #4]
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	f001 fb8d 	bl	800e008 <_vfiprintf_r>
 800c8ee:	b002      	add	sp, #8
 800c8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8f4:	b004      	add	sp, #16
 800c8f6:	4770      	bx	lr
 800c8f8:	2400001c 	.word	0x2400001c

0800c8fc <quorem>:
 800c8fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c900:	6903      	ldr	r3, [r0, #16]
 800c902:	690c      	ldr	r4, [r1, #16]
 800c904:	42a3      	cmp	r3, r4
 800c906:	4607      	mov	r7, r0
 800c908:	f2c0 8081 	blt.w	800ca0e <quorem+0x112>
 800c90c:	3c01      	subs	r4, #1
 800c90e:	f101 0814 	add.w	r8, r1, #20
 800c912:	f100 0514 	add.w	r5, r0, #20
 800c916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c91a:	9301      	str	r3, [sp, #4]
 800c91c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c924:	3301      	adds	r3, #1
 800c926:	429a      	cmp	r2, r3
 800c928:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c92c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c930:	fbb2 f6f3 	udiv	r6, r2, r3
 800c934:	d331      	bcc.n	800c99a <quorem+0x9e>
 800c936:	f04f 0e00 	mov.w	lr, #0
 800c93a:	4640      	mov	r0, r8
 800c93c:	46ac      	mov	ip, r5
 800c93e:	46f2      	mov	sl, lr
 800c940:	f850 2b04 	ldr.w	r2, [r0], #4
 800c944:	b293      	uxth	r3, r2
 800c946:	fb06 e303 	mla	r3, r6, r3, lr
 800c94a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c94e:	b29b      	uxth	r3, r3
 800c950:	ebaa 0303 	sub.w	r3, sl, r3
 800c954:	0c12      	lsrs	r2, r2, #16
 800c956:	f8dc a000 	ldr.w	sl, [ip]
 800c95a:	fb06 e202 	mla	r2, r6, r2, lr
 800c95e:	fa13 f38a 	uxtah	r3, r3, sl
 800c962:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c966:	fa1f fa82 	uxth.w	sl, r2
 800c96a:	f8dc 2000 	ldr.w	r2, [ip]
 800c96e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c972:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c976:	b29b      	uxth	r3, r3
 800c978:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c97c:	4581      	cmp	r9, r0
 800c97e:	f84c 3b04 	str.w	r3, [ip], #4
 800c982:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c986:	d2db      	bcs.n	800c940 <quorem+0x44>
 800c988:	f855 300b 	ldr.w	r3, [r5, fp]
 800c98c:	b92b      	cbnz	r3, 800c99a <quorem+0x9e>
 800c98e:	9b01      	ldr	r3, [sp, #4]
 800c990:	3b04      	subs	r3, #4
 800c992:	429d      	cmp	r5, r3
 800c994:	461a      	mov	r2, r3
 800c996:	d32e      	bcc.n	800c9f6 <quorem+0xfa>
 800c998:	613c      	str	r4, [r7, #16]
 800c99a:	4638      	mov	r0, r7
 800c99c:	f001 f950 	bl	800dc40 <__mcmp>
 800c9a0:	2800      	cmp	r0, #0
 800c9a2:	db24      	blt.n	800c9ee <quorem+0xf2>
 800c9a4:	3601      	adds	r6, #1
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	f04f 0c00 	mov.w	ip, #0
 800c9ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800c9b0:	f8d0 e000 	ldr.w	lr, [r0]
 800c9b4:	b293      	uxth	r3, r2
 800c9b6:	ebac 0303 	sub.w	r3, ip, r3
 800c9ba:	0c12      	lsrs	r2, r2, #16
 800c9bc:	fa13 f38e 	uxtah	r3, r3, lr
 800c9c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c9c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9c8:	b29b      	uxth	r3, r3
 800c9ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9ce:	45c1      	cmp	r9, r8
 800c9d0:	f840 3b04 	str.w	r3, [r0], #4
 800c9d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c9d8:	d2e8      	bcs.n	800c9ac <quorem+0xb0>
 800c9da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9e2:	b922      	cbnz	r2, 800c9ee <quorem+0xf2>
 800c9e4:	3b04      	subs	r3, #4
 800c9e6:	429d      	cmp	r5, r3
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	d30a      	bcc.n	800ca02 <quorem+0x106>
 800c9ec:	613c      	str	r4, [r7, #16]
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	b003      	add	sp, #12
 800c9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f6:	6812      	ldr	r2, [r2, #0]
 800c9f8:	3b04      	subs	r3, #4
 800c9fa:	2a00      	cmp	r2, #0
 800c9fc:	d1cc      	bne.n	800c998 <quorem+0x9c>
 800c9fe:	3c01      	subs	r4, #1
 800ca00:	e7c7      	b.n	800c992 <quorem+0x96>
 800ca02:	6812      	ldr	r2, [r2, #0]
 800ca04:	3b04      	subs	r3, #4
 800ca06:	2a00      	cmp	r2, #0
 800ca08:	d1f0      	bne.n	800c9ec <quorem+0xf0>
 800ca0a:	3c01      	subs	r4, #1
 800ca0c:	e7eb      	b.n	800c9e6 <quorem+0xea>
 800ca0e:	2000      	movs	r0, #0
 800ca10:	e7ee      	b.n	800c9f0 <quorem+0xf4>
 800ca12:	0000      	movs	r0, r0
 800ca14:	0000      	movs	r0, r0
	...

0800ca18 <_dtoa_r>:
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	ec59 8b10 	vmov	r8, r9, d0
 800ca20:	b095      	sub	sp, #84	; 0x54
 800ca22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca24:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800ca26:	9107      	str	r1, [sp, #28]
 800ca28:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ca2c:	4606      	mov	r6, r0
 800ca2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ca30:	9310      	str	r3, [sp, #64]	; 0x40
 800ca32:	b975      	cbnz	r5, 800ca52 <_dtoa_r+0x3a>
 800ca34:	2010      	movs	r0, #16
 800ca36:	f000 fe6f 	bl	800d718 <malloc>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	6270      	str	r0, [r6, #36]	; 0x24
 800ca3e:	b920      	cbnz	r0, 800ca4a <_dtoa_r+0x32>
 800ca40:	4bab      	ldr	r3, [pc, #684]	; (800ccf0 <_dtoa_r+0x2d8>)
 800ca42:	21ea      	movs	r1, #234	; 0xea
 800ca44:	48ab      	ldr	r0, [pc, #684]	; (800ccf4 <_dtoa_r+0x2dc>)
 800ca46:	f001 fd35 	bl	800e4b4 <__assert_func>
 800ca4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca4e:	6005      	str	r5, [r0, #0]
 800ca50:	60c5      	str	r5, [r0, #12]
 800ca52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca54:	6819      	ldr	r1, [r3, #0]
 800ca56:	b151      	cbz	r1, 800ca6e <_dtoa_r+0x56>
 800ca58:	685a      	ldr	r2, [r3, #4]
 800ca5a:	604a      	str	r2, [r1, #4]
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	4093      	lsls	r3, r2
 800ca60:	608b      	str	r3, [r1, #8]
 800ca62:	4630      	mov	r0, r6
 800ca64:	f000 feae 	bl	800d7c4 <_Bfree>
 800ca68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	f1b9 0300 	subs.w	r3, r9, #0
 800ca72:	bfbb      	ittet	lt
 800ca74:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ca78:	9303      	strlt	r3, [sp, #12]
 800ca7a:	2300      	movge	r3, #0
 800ca7c:	2201      	movlt	r2, #1
 800ca7e:	bfac      	ite	ge
 800ca80:	6023      	strge	r3, [r4, #0]
 800ca82:	6022      	strlt	r2, [r4, #0]
 800ca84:	4b9c      	ldr	r3, [pc, #624]	; (800ccf8 <_dtoa_r+0x2e0>)
 800ca86:	9c03      	ldr	r4, [sp, #12]
 800ca88:	43a3      	bics	r3, r4
 800ca8a:	d11a      	bne.n	800cac2 <_dtoa_r+0xaa>
 800ca8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca8e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca92:	6013      	str	r3, [r2, #0]
 800ca94:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ca98:	ea53 0308 	orrs.w	r3, r3, r8
 800ca9c:	f000 8512 	beq.w	800d4c4 <_dtoa_r+0xaac>
 800caa0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800caa2:	b953      	cbnz	r3, 800caba <_dtoa_r+0xa2>
 800caa4:	4b95      	ldr	r3, [pc, #596]	; (800ccfc <_dtoa_r+0x2e4>)
 800caa6:	e01f      	b.n	800cae8 <_dtoa_r+0xd0>
 800caa8:	4b95      	ldr	r3, [pc, #596]	; (800cd00 <_dtoa_r+0x2e8>)
 800caaa:	9300      	str	r3, [sp, #0]
 800caac:	3308      	adds	r3, #8
 800caae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cab0:	6013      	str	r3, [r2, #0]
 800cab2:	9800      	ldr	r0, [sp, #0]
 800cab4:	b015      	add	sp, #84	; 0x54
 800cab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caba:	4b90      	ldr	r3, [pc, #576]	; (800ccfc <_dtoa_r+0x2e4>)
 800cabc:	9300      	str	r3, [sp, #0]
 800cabe:	3303      	adds	r3, #3
 800cac0:	e7f5      	b.n	800caae <_dtoa_r+0x96>
 800cac2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cac6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800caca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cace:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cad2:	d10b      	bne.n	800caec <_dtoa_r+0xd4>
 800cad4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cad6:	2301      	movs	r3, #1
 800cad8:	6013      	str	r3, [r2, #0]
 800cada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f000 84ee 	beq.w	800d4be <_dtoa_r+0xaa6>
 800cae2:	4888      	ldr	r0, [pc, #544]	; (800cd04 <_dtoa_r+0x2ec>)
 800cae4:	6018      	str	r0, [r3, #0]
 800cae6:	1e43      	subs	r3, r0, #1
 800cae8:	9300      	str	r3, [sp, #0]
 800caea:	e7e2      	b.n	800cab2 <_dtoa_r+0x9a>
 800caec:	a913      	add	r1, sp, #76	; 0x4c
 800caee:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800caf2:	aa12      	add	r2, sp, #72	; 0x48
 800caf4:	4630      	mov	r0, r6
 800caf6:	f001 f947 	bl	800dd88 <__d2b>
 800cafa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800cafe:	4605      	mov	r5, r0
 800cb00:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cb02:	2900      	cmp	r1, #0
 800cb04:	d047      	beq.n	800cb96 <_dtoa_r+0x17e>
 800cb06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cb08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cb0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cb10:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800cb14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cb18:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cb1c:	2400      	movs	r4, #0
 800cb1e:	ec43 2b16 	vmov	d6, r2, r3
 800cb22:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800cb26:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ccd8 <_dtoa_r+0x2c0>
 800cb2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cb2e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800cce0 <_dtoa_r+0x2c8>
 800cb32:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cb36:	eeb0 7b46 	vmov.f64	d7, d6
 800cb3a:	ee06 1a90 	vmov	s13, r1
 800cb3e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800cb42:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800cce8 <_dtoa_r+0x2d0>
 800cb46:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cb4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cb4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cb52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb56:	ee16 ba90 	vmov	fp, s13
 800cb5a:	9411      	str	r4, [sp, #68]	; 0x44
 800cb5c:	d508      	bpl.n	800cb70 <_dtoa_r+0x158>
 800cb5e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cb62:	eeb4 6b47 	vcmp.f64	d6, d7
 800cb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb6a:	bf18      	it	ne
 800cb6c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800cb70:	f1bb 0f16 	cmp.w	fp, #22
 800cb74:	d832      	bhi.n	800cbdc <_dtoa_r+0x1c4>
 800cb76:	4b64      	ldr	r3, [pc, #400]	; (800cd08 <_dtoa_r+0x2f0>)
 800cb78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cb7c:	ed93 7b00 	vldr	d7, [r3]
 800cb80:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800cb84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb8c:	d501      	bpl.n	800cb92 <_dtoa_r+0x17a>
 800cb8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb92:	2300      	movs	r3, #0
 800cb94:	e023      	b.n	800cbde <_dtoa_r+0x1c6>
 800cb96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cb98:	4401      	add	r1, r0
 800cb9a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800cb9e:	2b20      	cmp	r3, #32
 800cba0:	bfc3      	ittte	gt
 800cba2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cba6:	fa04 f303 	lslgt.w	r3, r4, r3
 800cbaa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800cbae:	f1c3 0320 	rsble	r3, r3, #32
 800cbb2:	bfc6      	itte	gt
 800cbb4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800cbb8:	ea43 0308 	orrgt.w	r3, r3, r8
 800cbbc:	fa08 f303 	lslle.w	r3, r8, r3
 800cbc0:	ee07 3a90 	vmov	s15, r3
 800cbc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cbc8:	3901      	subs	r1, #1
 800cbca:	ed8d 7b00 	vstr	d7, [sp]
 800cbce:	9c01      	ldr	r4, [sp, #4]
 800cbd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbd4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800cbd8:	2401      	movs	r4, #1
 800cbda:	e7a0      	b.n	800cb1e <_dtoa_r+0x106>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbe0:	1a43      	subs	r3, r0, r1
 800cbe2:	1e5a      	subs	r2, r3, #1
 800cbe4:	bf45      	ittet	mi
 800cbe6:	f1c3 0301 	rsbmi	r3, r3, #1
 800cbea:	9305      	strmi	r3, [sp, #20]
 800cbec:	2300      	movpl	r3, #0
 800cbee:	2300      	movmi	r3, #0
 800cbf0:	9206      	str	r2, [sp, #24]
 800cbf2:	bf54      	ite	pl
 800cbf4:	9305      	strpl	r3, [sp, #20]
 800cbf6:	9306      	strmi	r3, [sp, #24]
 800cbf8:	f1bb 0f00 	cmp.w	fp, #0
 800cbfc:	db18      	blt.n	800cc30 <_dtoa_r+0x218>
 800cbfe:	9b06      	ldr	r3, [sp, #24]
 800cc00:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800cc04:	445b      	add	r3, fp
 800cc06:	9306      	str	r3, [sp, #24]
 800cc08:	2300      	movs	r3, #0
 800cc0a:	9a07      	ldr	r2, [sp, #28]
 800cc0c:	2a09      	cmp	r2, #9
 800cc0e:	d849      	bhi.n	800cca4 <_dtoa_r+0x28c>
 800cc10:	2a05      	cmp	r2, #5
 800cc12:	bfc4      	itt	gt
 800cc14:	3a04      	subgt	r2, #4
 800cc16:	9207      	strgt	r2, [sp, #28]
 800cc18:	9a07      	ldr	r2, [sp, #28]
 800cc1a:	f1a2 0202 	sub.w	r2, r2, #2
 800cc1e:	bfcc      	ite	gt
 800cc20:	2400      	movgt	r4, #0
 800cc22:	2401      	movle	r4, #1
 800cc24:	2a03      	cmp	r2, #3
 800cc26:	d848      	bhi.n	800ccba <_dtoa_r+0x2a2>
 800cc28:	e8df f002 	tbb	[pc, r2]
 800cc2c:	3a2c2e0b 	.word	0x3a2c2e0b
 800cc30:	9b05      	ldr	r3, [sp, #20]
 800cc32:	2200      	movs	r2, #0
 800cc34:	eba3 030b 	sub.w	r3, r3, fp
 800cc38:	9305      	str	r3, [sp, #20]
 800cc3a:	920e      	str	r2, [sp, #56]	; 0x38
 800cc3c:	f1cb 0300 	rsb	r3, fp, #0
 800cc40:	e7e3      	b.n	800cc0a <_dtoa_r+0x1f2>
 800cc42:	2200      	movs	r2, #0
 800cc44:	9208      	str	r2, [sp, #32]
 800cc46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc48:	2a00      	cmp	r2, #0
 800cc4a:	dc39      	bgt.n	800ccc0 <_dtoa_r+0x2a8>
 800cc4c:	f04f 0a01 	mov.w	sl, #1
 800cc50:	46d1      	mov	r9, sl
 800cc52:	4652      	mov	r2, sl
 800cc54:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cc58:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	6079      	str	r1, [r7, #4]
 800cc5e:	2004      	movs	r0, #4
 800cc60:	f100 0c14 	add.w	ip, r0, #20
 800cc64:	4594      	cmp	ip, r2
 800cc66:	6879      	ldr	r1, [r7, #4]
 800cc68:	d92f      	bls.n	800ccca <_dtoa_r+0x2b2>
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	930c      	str	r3, [sp, #48]	; 0x30
 800cc6e:	f000 fd69 	bl	800d744 <_Balloc>
 800cc72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc74:	9000      	str	r0, [sp, #0]
 800cc76:	4602      	mov	r2, r0
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d149      	bne.n	800cd10 <_dtoa_r+0x2f8>
 800cc7c:	4b23      	ldr	r3, [pc, #140]	; (800cd0c <_dtoa_r+0x2f4>)
 800cc7e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cc82:	e6df      	b.n	800ca44 <_dtoa_r+0x2c>
 800cc84:	2201      	movs	r2, #1
 800cc86:	e7dd      	b.n	800cc44 <_dtoa_r+0x22c>
 800cc88:	2200      	movs	r2, #0
 800cc8a:	9208      	str	r2, [sp, #32]
 800cc8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc8e:	eb0b 0a02 	add.w	sl, fp, r2
 800cc92:	f10a 0901 	add.w	r9, sl, #1
 800cc96:	464a      	mov	r2, r9
 800cc98:	2a01      	cmp	r2, #1
 800cc9a:	bfb8      	it	lt
 800cc9c:	2201      	movlt	r2, #1
 800cc9e:	e7db      	b.n	800cc58 <_dtoa_r+0x240>
 800cca0:	2201      	movs	r2, #1
 800cca2:	e7f2      	b.n	800cc8a <_dtoa_r+0x272>
 800cca4:	2401      	movs	r4, #1
 800cca6:	2200      	movs	r2, #0
 800cca8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ccac:	f04f 3aff 	mov.w	sl, #4294967295
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	46d1      	mov	r9, sl
 800ccb4:	2212      	movs	r2, #18
 800ccb6:	9109      	str	r1, [sp, #36]	; 0x24
 800ccb8:	e7ce      	b.n	800cc58 <_dtoa_r+0x240>
 800ccba:	2201      	movs	r2, #1
 800ccbc:	9208      	str	r2, [sp, #32]
 800ccbe:	e7f5      	b.n	800ccac <_dtoa_r+0x294>
 800ccc0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ccc4:	46d1      	mov	r9, sl
 800ccc6:	4652      	mov	r2, sl
 800ccc8:	e7c6      	b.n	800cc58 <_dtoa_r+0x240>
 800ccca:	3101      	adds	r1, #1
 800cccc:	6079      	str	r1, [r7, #4]
 800ccce:	0040      	lsls	r0, r0, #1
 800ccd0:	e7c6      	b.n	800cc60 <_dtoa_r+0x248>
 800ccd2:	bf00      	nop
 800ccd4:	f3af 8000 	nop.w
 800ccd8:	636f4361 	.word	0x636f4361
 800ccdc:	3fd287a7 	.word	0x3fd287a7
 800cce0:	8b60c8b3 	.word	0x8b60c8b3
 800cce4:	3fc68a28 	.word	0x3fc68a28
 800cce8:	509f79fb 	.word	0x509f79fb
 800ccec:	3fd34413 	.word	0x3fd34413
 800ccf0:	0800e9c1 	.word	0x0800e9c1
 800ccf4:	0800e9d8 	.word	0x0800e9d8
 800ccf8:	7ff00000 	.word	0x7ff00000
 800ccfc:	0800e9bd 	.word	0x0800e9bd
 800cd00:	0800e9b4 	.word	0x0800e9b4
 800cd04:	0800e991 	.word	0x0800e991
 800cd08:	0800eb30 	.word	0x0800eb30
 800cd0c:	0800ea37 	.word	0x0800ea37
 800cd10:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800cd12:	9900      	ldr	r1, [sp, #0]
 800cd14:	6011      	str	r1, [r2, #0]
 800cd16:	f1b9 0f0e 	cmp.w	r9, #14
 800cd1a:	d872      	bhi.n	800ce02 <_dtoa_r+0x3ea>
 800cd1c:	2c00      	cmp	r4, #0
 800cd1e:	d070      	beq.n	800ce02 <_dtoa_r+0x3ea>
 800cd20:	f1bb 0f00 	cmp.w	fp, #0
 800cd24:	f340 80a6 	ble.w	800ce74 <_dtoa_r+0x45c>
 800cd28:	49ca      	ldr	r1, [pc, #808]	; (800d054 <_dtoa_r+0x63c>)
 800cd2a:	f00b 020f 	and.w	r2, fp, #15
 800cd2e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800cd32:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cd36:	ed92 7b00 	vldr	d7, [r2]
 800cd3a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800cd3e:	f000 808d 	beq.w	800ce5c <_dtoa_r+0x444>
 800cd42:	4ac5      	ldr	r2, [pc, #788]	; (800d058 <_dtoa_r+0x640>)
 800cd44:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800cd48:	ed92 6b08 	vldr	d6, [r2, #32]
 800cd4c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800cd50:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cd54:	f001 010f 	and.w	r1, r1, #15
 800cd58:	2203      	movs	r2, #3
 800cd5a:	48bf      	ldr	r0, [pc, #764]	; (800d058 <_dtoa_r+0x640>)
 800cd5c:	2900      	cmp	r1, #0
 800cd5e:	d17f      	bne.n	800ce60 <_dtoa_r+0x448>
 800cd60:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cd64:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cd68:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cd6e:	2900      	cmp	r1, #0
 800cd70:	f000 80b2 	beq.w	800ced8 <_dtoa_r+0x4c0>
 800cd74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cd78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cd80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd84:	f140 80a8 	bpl.w	800ced8 <_dtoa_r+0x4c0>
 800cd88:	f1b9 0f00 	cmp.w	r9, #0
 800cd8c:	f000 80a4 	beq.w	800ced8 <_dtoa_r+0x4c0>
 800cd90:	f1ba 0f00 	cmp.w	sl, #0
 800cd94:	dd31      	ble.n	800cdfa <_dtoa_r+0x3e2>
 800cd96:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800cd9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cda2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cda6:	3201      	adds	r2, #1
 800cda8:	4650      	mov	r0, sl
 800cdaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cdae:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800cdb2:	ee07 2a90 	vmov	s15, r2
 800cdb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cdba:	eea7 5b06 	vfma.f64	d5, d7, d6
 800cdbe:	ed8d 5b02 	vstr	d5, [sp, #8]
 800cdc2:	9c03      	ldr	r4, [sp, #12]
 800cdc4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cdc8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	f040 8086 	bne.w	800cede <_dtoa_r+0x4c6>
 800cdd2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cdd6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cdda:	ec42 1b17 	vmov	d7, r1, r2
 800cdde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cde2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde6:	f300 8272 	bgt.w	800d2ce <_dtoa_r+0x8b6>
 800cdea:	eeb1 7b47 	vneg.f64	d7, d7
 800cdee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf6:	f100 8267 	bmi.w	800d2c8 <_dtoa_r+0x8b0>
 800cdfa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800cdfe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ce02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ce04:	2a00      	cmp	r2, #0
 800ce06:	f2c0 8129 	blt.w	800d05c <_dtoa_r+0x644>
 800ce0a:	f1bb 0f0e 	cmp.w	fp, #14
 800ce0e:	f300 8125 	bgt.w	800d05c <_dtoa_r+0x644>
 800ce12:	4b90      	ldr	r3, [pc, #576]	; (800d054 <_dtoa_r+0x63c>)
 800ce14:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ce18:	ed93 6b00 	vldr	d6, [r3]
 800ce1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f280 80c3 	bge.w	800cfaa <_dtoa_r+0x592>
 800ce24:	f1b9 0f00 	cmp.w	r9, #0
 800ce28:	f300 80bf 	bgt.w	800cfaa <_dtoa_r+0x592>
 800ce2c:	f040 824c 	bne.w	800d2c8 <_dtoa_r+0x8b0>
 800ce30:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ce34:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ce38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce44:	464c      	mov	r4, r9
 800ce46:	464f      	mov	r7, r9
 800ce48:	f280 8222 	bge.w	800d290 <_dtoa_r+0x878>
 800ce4c:	f8dd 8000 	ldr.w	r8, [sp]
 800ce50:	2331      	movs	r3, #49	; 0x31
 800ce52:	f808 3b01 	strb.w	r3, [r8], #1
 800ce56:	f10b 0b01 	add.w	fp, fp, #1
 800ce5a:	e21e      	b.n	800d29a <_dtoa_r+0x882>
 800ce5c:	2202      	movs	r2, #2
 800ce5e:	e77c      	b.n	800cd5a <_dtoa_r+0x342>
 800ce60:	07cc      	lsls	r4, r1, #31
 800ce62:	d504      	bpl.n	800ce6e <_dtoa_r+0x456>
 800ce64:	ed90 6b00 	vldr	d6, [r0]
 800ce68:	3201      	adds	r2, #1
 800ce6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ce6e:	1049      	asrs	r1, r1, #1
 800ce70:	3008      	adds	r0, #8
 800ce72:	e773      	b.n	800cd5c <_dtoa_r+0x344>
 800ce74:	d02e      	beq.n	800ced4 <_dtoa_r+0x4bc>
 800ce76:	f1cb 0100 	rsb	r1, fp, #0
 800ce7a:	4a76      	ldr	r2, [pc, #472]	; (800d054 <_dtoa_r+0x63c>)
 800ce7c:	f001 000f 	and.w	r0, r1, #15
 800ce80:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ce84:	ed92 7b00 	vldr	d7, [r2]
 800ce88:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ce8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ce90:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ce94:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800ce98:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ce9c:	486e      	ldr	r0, [pc, #440]	; (800d058 <_dtoa_r+0x640>)
 800ce9e:	1109      	asrs	r1, r1, #4
 800cea0:	2400      	movs	r4, #0
 800cea2:	2202      	movs	r2, #2
 800cea4:	b939      	cbnz	r1, 800ceb6 <_dtoa_r+0x49e>
 800cea6:	2c00      	cmp	r4, #0
 800cea8:	f43f af60 	beq.w	800cd6c <_dtoa_r+0x354>
 800ceac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ceb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ceb4:	e75a      	b.n	800cd6c <_dtoa_r+0x354>
 800ceb6:	07cf      	lsls	r7, r1, #31
 800ceb8:	d509      	bpl.n	800cece <_dtoa_r+0x4b6>
 800ceba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800cebe:	ed90 7b00 	vldr	d7, [r0]
 800cec2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cec6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ceca:	3201      	adds	r2, #1
 800cecc:	2401      	movs	r4, #1
 800cece:	1049      	asrs	r1, r1, #1
 800ced0:	3008      	adds	r0, #8
 800ced2:	e7e7      	b.n	800cea4 <_dtoa_r+0x48c>
 800ced4:	2202      	movs	r2, #2
 800ced6:	e749      	b.n	800cd6c <_dtoa_r+0x354>
 800ced8:	465f      	mov	r7, fp
 800ceda:	4648      	mov	r0, r9
 800cedc:	e765      	b.n	800cdaa <_dtoa_r+0x392>
 800cede:	ec42 1b17 	vmov	d7, r1, r2
 800cee2:	4a5c      	ldr	r2, [pc, #368]	; (800d054 <_dtoa_r+0x63c>)
 800cee4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cee8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ceec:	9a00      	ldr	r2, [sp, #0]
 800ceee:	1814      	adds	r4, r2, r0
 800cef0:	9a08      	ldr	r2, [sp, #32]
 800cef2:	b352      	cbz	r2, 800cf4a <_dtoa_r+0x532>
 800cef4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800cef8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800cefc:	f8dd 8000 	ldr.w	r8, [sp]
 800cf00:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cf04:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cf08:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cf0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cf10:	ee14 2a90 	vmov	r2, s9
 800cf14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cf18:	3230      	adds	r2, #48	; 0x30
 800cf1a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cf1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf26:	f808 2b01 	strb.w	r2, [r8], #1
 800cf2a:	d439      	bmi.n	800cfa0 <_dtoa_r+0x588>
 800cf2c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cf30:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf38:	d472      	bmi.n	800d020 <_dtoa_r+0x608>
 800cf3a:	45a0      	cmp	r8, r4
 800cf3c:	f43f af5d 	beq.w	800cdfa <_dtoa_r+0x3e2>
 800cf40:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cf44:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cf48:	e7e0      	b.n	800cf0c <_dtoa_r+0x4f4>
 800cf4a:	f8dd 8000 	ldr.w	r8, [sp]
 800cf4e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cf52:	4621      	mov	r1, r4
 800cf54:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cf58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cf5c:	ee14 2a90 	vmov	r2, s9
 800cf60:	3230      	adds	r2, #48	; 0x30
 800cf62:	f808 2b01 	strb.w	r2, [r8], #1
 800cf66:	45a0      	cmp	r8, r4
 800cf68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cf6c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cf70:	d118      	bne.n	800cfa4 <_dtoa_r+0x58c>
 800cf72:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cf76:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cf7a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cf7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf82:	dc4d      	bgt.n	800d020 <_dtoa_r+0x608>
 800cf84:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cf88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf90:	f57f af33 	bpl.w	800cdfa <_dtoa_r+0x3e2>
 800cf94:	4688      	mov	r8, r1
 800cf96:	3901      	subs	r1, #1
 800cf98:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800cf9c:	2b30      	cmp	r3, #48	; 0x30
 800cf9e:	d0f9      	beq.n	800cf94 <_dtoa_r+0x57c>
 800cfa0:	46bb      	mov	fp, r7
 800cfa2:	e02a      	b.n	800cffa <_dtoa_r+0x5e2>
 800cfa4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cfa8:	e7d6      	b.n	800cf58 <_dtoa_r+0x540>
 800cfaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cfae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800cfb2:	f8dd 8000 	ldr.w	r8, [sp]
 800cfb6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cfba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cfbe:	ee15 3a10 	vmov	r3, s10
 800cfc2:	3330      	adds	r3, #48	; 0x30
 800cfc4:	f808 3b01 	strb.w	r3, [r8], #1
 800cfc8:	9b00      	ldr	r3, [sp, #0]
 800cfca:	eba8 0303 	sub.w	r3, r8, r3
 800cfce:	4599      	cmp	r9, r3
 800cfd0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cfd4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cfd8:	d133      	bne.n	800d042 <_dtoa_r+0x62a>
 800cfda:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cfde:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe6:	dc1a      	bgt.n	800d01e <_dtoa_r+0x606>
 800cfe8:	eeb4 7b46 	vcmp.f64	d7, d6
 800cfec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff0:	d103      	bne.n	800cffa <_dtoa_r+0x5e2>
 800cff2:	ee15 3a10 	vmov	r3, s10
 800cff6:	07d9      	lsls	r1, r3, #31
 800cff8:	d411      	bmi.n	800d01e <_dtoa_r+0x606>
 800cffa:	4629      	mov	r1, r5
 800cffc:	4630      	mov	r0, r6
 800cffe:	f000 fbe1 	bl	800d7c4 <_Bfree>
 800d002:	2300      	movs	r3, #0
 800d004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d006:	f888 3000 	strb.w	r3, [r8]
 800d00a:	f10b 0301 	add.w	r3, fp, #1
 800d00e:	6013      	str	r3, [r2, #0]
 800d010:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d012:	2b00      	cmp	r3, #0
 800d014:	f43f ad4d 	beq.w	800cab2 <_dtoa_r+0x9a>
 800d018:	f8c3 8000 	str.w	r8, [r3]
 800d01c:	e549      	b.n	800cab2 <_dtoa_r+0x9a>
 800d01e:	465f      	mov	r7, fp
 800d020:	4643      	mov	r3, r8
 800d022:	4698      	mov	r8, r3
 800d024:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d028:	2a39      	cmp	r2, #57	; 0x39
 800d02a:	d106      	bne.n	800d03a <_dtoa_r+0x622>
 800d02c:	9a00      	ldr	r2, [sp, #0]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d1f7      	bne.n	800d022 <_dtoa_r+0x60a>
 800d032:	9900      	ldr	r1, [sp, #0]
 800d034:	2230      	movs	r2, #48	; 0x30
 800d036:	3701      	adds	r7, #1
 800d038:	700a      	strb	r2, [r1, #0]
 800d03a:	781a      	ldrb	r2, [r3, #0]
 800d03c:	3201      	adds	r2, #1
 800d03e:	701a      	strb	r2, [r3, #0]
 800d040:	e7ae      	b.n	800cfa0 <_dtoa_r+0x588>
 800d042:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d046:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d04e:	d1b2      	bne.n	800cfb6 <_dtoa_r+0x59e>
 800d050:	e7d3      	b.n	800cffa <_dtoa_r+0x5e2>
 800d052:	bf00      	nop
 800d054:	0800eb30 	.word	0x0800eb30
 800d058:	0800eb08 	.word	0x0800eb08
 800d05c:	9908      	ldr	r1, [sp, #32]
 800d05e:	2900      	cmp	r1, #0
 800d060:	f000 80d1 	beq.w	800d206 <_dtoa_r+0x7ee>
 800d064:	9907      	ldr	r1, [sp, #28]
 800d066:	2901      	cmp	r1, #1
 800d068:	f300 80b4 	bgt.w	800d1d4 <_dtoa_r+0x7bc>
 800d06c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d06e:	2900      	cmp	r1, #0
 800d070:	f000 80ac 	beq.w	800d1cc <_dtoa_r+0x7b4>
 800d074:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d078:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d07c:	461c      	mov	r4, r3
 800d07e:	930a      	str	r3, [sp, #40]	; 0x28
 800d080:	9b05      	ldr	r3, [sp, #20]
 800d082:	4413      	add	r3, r2
 800d084:	9305      	str	r3, [sp, #20]
 800d086:	9b06      	ldr	r3, [sp, #24]
 800d088:	2101      	movs	r1, #1
 800d08a:	4413      	add	r3, r2
 800d08c:	4630      	mov	r0, r6
 800d08e:	9306      	str	r3, [sp, #24]
 800d090:	f000 fc54 	bl	800d93c <__i2b>
 800d094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d096:	4607      	mov	r7, r0
 800d098:	f1b8 0f00 	cmp.w	r8, #0
 800d09c:	dd0d      	ble.n	800d0ba <_dtoa_r+0x6a2>
 800d09e:	9a06      	ldr	r2, [sp, #24]
 800d0a0:	2a00      	cmp	r2, #0
 800d0a2:	dd0a      	ble.n	800d0ba <_dtoa_r+0x6a2>
 800d0a4:	4542      	cmp	r2, r8
 800d0a6:	9905      	ldr	r1, [sp, #20]
 800d0a8:	bfa8      	it	ge
 800d0aa:	4642      	movge	r2, r8
 800d0ac:	1a89      	subs	r1, r1, r2
 800d0ae:	9105      	str	r1, [sp, #20]
 800d0b0:	9906      	ldr	r1, [sp, #24]
 800d0b2:	eba8 0802 	sub.w	r8, r8, r2
 800d0b6:	1a8a      	subs	r2, r1, r2
 800d0b8:	9206      	str	r2, [sp, #24]
 800d0ba:	b303      	cbz	r3, 800d0fe <_dtoa_r+0x6e6>
 800d0bc:	9a08      	ldr	r2, [sp, #32]
 800d0be:	2a00      	cmp	r2, #0
 800d0c0:	f000 80a6 	beq.w	800d210 <_dtoa_r+0x7f8>
 800d0c4:	2c00      	cmp	r4, #0
 800d0c6:	dd13      	ble.n	800d0f0 <_dtoa_r+0x6d8>
 800d0c8:	4639      	mov	r1, r7
 800d0ca:	4622      	mov	r2, r4
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d0d0:	f000 fcf0 	bl	800dab4 <__pow5mult>
 800d0d4:	462a      	mov	r2, r5
 800d0d6:	4601      	mov	r1, r0
 800d0d8:	4607      	mov	r7, r0
 800d0da:	4630      	mov	r0, r6
 800d0dc:	f000 fc44 	bl	800d968 <__multiply>
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	900a      	str	r0, [sp, #40]	; 0x28
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	f000 fb6d 	bl	800d7c4 <_Bfree>
 800d0ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0ee:	4615      	mov	r5, r2
 800d0f0:	1b1a      	subs	r2, r3, r4
 800d0f2:	d004      	beq.n	800d0fe <_dtoa_r+0x6e6>
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	f000 fcdc 	bl	800dab4 <__pow5mult>
 800d0fc:	4605      	mov	r5, r0
 800d0fe:	2101      	movs	r1, #1
 800d100:	4630      	mov	r0, r6
 800d102:	f000 fc1b 	bl	800d93c <__i2b>
 800d106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d108:	2b00      	cmp	r3, #0
 800d10a:	4604      	mov	r4, r0
 800d10c:	f340 8082 	ble.w	800d214 <_dtoa_r+0x7fc>
 800d110:	461a      	mov	r2, r3
 800d112:	4601      	mov	r1, r0
 800d114:	4630      	mov	r0, r6
 800d116:	f000 fccd 	bl	800dab4 <__pow5mult>
 800d11a:	9b07      	ldr	r3, [sp, #28]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	4604      	mov	r4, r0
 800d120:	dd7b      	ble.n	800d21a <_dtoa_r+0x802>
 800d122:	2300      	movs	r3, #0
 800d124:	930a      	str	r3, [sp, #40]	; 0x28
 800d126:	6922      	ldr	r2, [r4, #16]
 800d128:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d12c:	6910      	ldr	r0, [r2, #16]
 800d12e:	f000 fbb5 	bl	800d89c <__hi0bits>
 800d132:	f1c0 0020 	rsb	r0, r0, #32
 800d136:	9b06      	ldr	r3, [sp, #24]
 800d138:	4418      	add	r0, r3
 800d13a:	f010 001f 	ands.w	r0, r0, #31
 800d13e:	f000 808d 	beq.w	800d25c <_dtoa_r+0x844>
 800d142:	f1c0 0220 	rsb	r2, r0, #32
 800d146:	2a04      	cmp	r2, #4
 800d148:	f340 8086 	ble.w	800d258 <_dtoa_r+0x840>
 800d14c:	f1c0 001c 	rsb	r0, r0, #28
 800d150:	9b05      	ldr	r3, [sp, #20]
 800d152:	4403      	add	r3, r0
 800d154:	9305      	str	r3, [sp, #20]
 800d156:	9b06      	ldr	r3, [sp, #24]
 800d158:	4403      	add	r3, r0
 800d15a:	4480      	add	r8, r0
 800d15c:	9306      	str	r3, [sp, #24]
 800d15e:	9b05      	ldr	r3, [sp, #20]
 800d160:	2b00      	cmp	r3, #0
 800d162:	dd05      	ble.n	800d170 <_dtoa_r+0x758>
 800d164:	4629      	mov	r1, r5
 800d166:	461a      	mov	r2, r3
 800d168:	4630      	mov	r0, r6
 800d16a:	f000 fcfd 	bl	800db68 <__lshift>
 800d16e:	4605      	mov	r5, r0
 800d170:	9b06      	ldr	r3, [sp, #24]
 800d172:	2b00      	cmp	r3, #0
 800d174:	dd05      	ble.n	800d182 <_dtoa_r+0x76a>
 800d176:	4621      	mov	r1, r4
 800d178:	461a      	mov	r2, r3
 800d17a:	4630      	mov	r0, r6
 800d17c:	f000 fcf4 	bl	800db68 <__lshift>
 800d180:	4604      	mov	r4, r0
 800d182:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d184:	2b00      	cmp	r3, #0
 800d186:	d06b      	beq.n	800d260 <_dtoa_r+0x848>
 800d188:	4621      	mov	r1, r4
 800d18a:	4628      	mov	r0, r5
 800d18c:	f000 fd58 	bl	800dc40 <__mcmp>
 800d190:	2800      	cmp	r0, #0
 800d192:	da65      	bge.n	800d260 <_dtoa_r+0x848>
 800d194:	2300      	movs	r3, #0
 800d196:	4629      	mov	r1, r5
 800d198:	220a      	movs	r2, #10
 800d19a:	4630      	mov	r0, r6
 800d19c:	f000 fb34 	bl	800d808 <__multadd>
 800d1a0:	9b08      	ldr	r3, [sp, #32]
 800d1a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1a6:	4605      	mov	r5, r0
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f000 8192 	beq.w	800d4d2 <_dtoa_r+0xaba>
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	220a      	movs	r2, #10
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	f000 fb27 	bl	800d808 <__multadd>
 800d1ba:	f1ba 0f00 	cmp.w	sl, #0
 800d1be:	4607      	mov	r7, r0
 800d1c0:	f300 808e 	bgt.w	800d2e0 <_dtoa_r+0x8c8>
 800d1c4:	9b07      	ldr	r3, [sp, #28]
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	dc51      	bgt.n	800d26e <_dtoa_r+0x856>
 800d1ca:	e089      	b.n	800d2e0 <_dtoa_r+0x8c8>
 800d1cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d1ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d1d2:	e751      	b.n	800d078 <_dtoa_r+0x660>
 800d1d4:	f109 34ff 	add.w	r4, r9, #4294967295
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	bfbf      	itttt	lt
 800d1dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d1de:	1ae3      	sublt	r3, r4, r3
 800d1e0:	18d2      	addlt	r2, r2, r3
 800d1e2:	4613      	movlt	r3, r2
 800d1e4:	bfb7      	itett	lt
 800d1e6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d1e8:	1b1c      	subge	r4, r3, r4
 800d1ea:	4623      	movlt	r3, r4
 800d1ec:	2400      	movlt	r4, #0
 800d1ee:	f1b9 0f00 	cmp.w	r9, #0
 800d1f2:	bfb5      	itete	lt
 800d1f4:	9a05      	ldrlt	r2, [sp, #20]
 800d1f6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800d1fa:	eba2 0809 	sublt.w	r8, r2, r9
 800d1fe:	464a      	movge	r2, r9
 800d200:	bfb8      	it	lt
 800d202:	2200      	movlt	r2, #0
 800d204:	e73b      	b.n	800d07e <_dtoa_r+0x666>
 800d206:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d20a:	9f08      	ldr	r7, [sp, #32]
 800d20c:	461c      	mov	r4, r3
 800d20e:	e743      	b.n	800d098 <_dtoa_r+0x680>
 800d210:	461a      	mov	r2, r3
 800d212:	e76f      	b.n	800d0f4 <_dtoa_r+0x6dc>
 800d214:	9b07      	ldr	r3, [sp, #28]
 800d216:	2b01      	cmp	r3, #1
 800d218:	dc18      	bgt.n	800d24c <_dtoa_r+0x834>
 800d21a:	9b02      	ldr	r3, [sp, #8]
 800d21c:	b9b3      	cbnz	r3, 800d24c <_dtoa_r+0x834>
 800d21e:	9b03      	ldr	r3, [sp, #12]
 800d220:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d224:	b9a2      	cbnz	r2, 800d250 <_dtoa_r+0x838>
 800d226:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d22a:	0d12      	lsrs	r2, r2, #20
 800d22c:	0512      	lsls	r2, r2, #20
 800d22e:	b18a      	cbz	r2, 800d254 <_dtoa_r+0x83c>
 800d230:	9b05      	ldr	r3, [sp, #20]
 800d232:	3301      	adds	r3, #1
 800d234:	9305      	str	r3, [sp, #20]
 800d236:	9b06      	ldr	r3, [sp, #24]
 800d238:	3301      	adds	r3, #1
 800d23a:	9306      	str	r3, [sp, #24]
 800d23c:	2301      	movs	r3, #1
 800d23e:	930a      	str	r3, [sp, #40]	; 0x28
 800d240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d242:	2b00      	cmp	r3, #0
 800d244:	f47f af6f 	bne.w	800d126 <_dtoa_r+0x70e>
 800d248:	2001      	movs	r0, #1
 800d24a:	e774      	b.n	800d136 <_dtoa_r+0x71e>
 800d24c:	2300      	movs	r3, #0
 800d24e:	e7f6      	b.n	800d23e <_dtoa_r+0x826>
 800d250:	9b02      	ldr	r3, [sp, #8]
 800d252:	e7f4      	b.n	800d23e <_dtoa_r+0x826>
 800d254:	920a      	str	r2, [sp, #40]	; 0x28
 800d256:	e7f3      	b.n	800d240 <_dtoa_r+0x828>
 800d258:	d081      	beq.n	800d15e <_dtoa_r+0x746>
 800d25a:	4610      	mov	r0, r2
 800d25c:	301c      	adds	r0, #28
 800d25e:	e777      	b.n	800d150 <_dtoa_r+0x738>
 800d260:	f1b9 0f00 	cmp.w	r9, #0
 800d264:	dc37      	bgt.n	800d2d6 <_dtoa_r+0x8be>
 800d266:	9b07      	ldr	r3, [sp, #28]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	dd34      	ble.n	800d2d6 <_dtoa_r+0x8be>
 800d26c:	46ca      	mov	sl, r9
 800d26e:	f1ba 0f00 	cmp.w	sl, #0
 800d272:	d10d      	bne.n	800d290 <_dtoa_r+0x878>
 800d274:	4621      	mov	r1, r4
 800d276:	4653      	mov	r3, sl
 800d278:	2205      	movs	r2, #5
 800d27a:	4630      	mov	r0, r6
 800d27c:	f000 fac4 	bl	800d808 <__multadd>
 800d280:	4601      	mov	r1, r0
 800d282:	4604      	mov	r4, r0
 800d284:	4628      	mov	r0, r5
 800d286:	f000 fcdb 	bl	800dc40 <__mcmp>
 800d28a:	2800      	cmp	r0, #0
 800d28c:	f73f adde 	bgt.w	800ce4c <_dtoa_r+0x434>
 800d290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d292:	f8dd 8000 	ldr.w	r8, [sp]
 800d296:	ea6f 0b03 	mvn.w	fp, r3
 800d29a:	f04f 0900 	mov.w	r9, #0
 800d29e:	4621      	mov	r1, r4
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	f000 fa8f 	bl	800d7c4 <_Bfree>
 800d2a6:	2f00      	cmp	r7, #0
 800d2a8:	f43f aea7 	beq.w	800cffa <_dtoa_r+0x5e2>
 800d2ac:	f1b9 0f00 	cmp.w	r9, #0
 800d2b0:	d005      	beq.n	800d2be <_dtoa_r+0x8a6>
 800d2b2:	45b9      	cmp	r9, r7
 800d2b4:	d003      	beq.n	800d2be <_dtoa_r+0x8a6>
 800d2b6:	4649      	mov	r1, r9
 800d2b8:	4630      	mov	r0, r6
 800d2ba:	f000 fa83 	bl	800d7c4 <_Bfree>
 800d2be:	4639      	mov	r1, r7
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	f000 fa7f 	bl	800d7c4 <_Bfree>
 800d2c6:	e698      	b.n	800cffa <_dtoa_r+0x5e2>
 800d2c8:	2400      	movs	r4, #0
 800d2ca:	4627      	mov	r7, r4
 800d2cc:	e7e0      	b.n	800d290 <_dtoa_r+0x878>
 800d2ce:	46bb      	mov	fp, r7
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	4607      	mov	r7, r0
 800d2d4:	e5ba      	b.n	800ce4c <_dtoa_r+0x434>
 800d2d6:	9b08      	ldr	r3, [sp, #32]
 800d2d8:	46ca      	mov	sl, r9
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 8100 	beq.w	800d4e0 <_dtoa_r+0xac8>
 800d2e0:	f1b8 0f00 	cmp.w	r8, #0
 800d2e4:	dd05      	ble.n	800d2f2 <_dtoa_r+0x8da>
 800d2e6:	4639      	mov	r1, r7
 800d2e8:	4642      	mov	r2, r8
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f000 fc3c 	bl	800db68 <__lshift>
 800d2f0:	4607      	mov	r7, r0
 800d2f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d05d      	beq.n	800d3b4 <_dtoa_r+0x99c>
 800d2f8:	6879      	ldr	r1, [r7, #4]
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	f000 fa22 	bl	800d744 <_Balloc>
 800d300:	4680      	mov	r8, r0
 800d302:	b928      	cbnz	r0, 800d310 <_dtoa_r+0x8f8>
 800d304:	4b82      	ldr	r3, [pc, #520]	; (800d510 <_dtoa_r+0xaf8>)
 800d306:	4602      	mov	r2, r0
 800d308:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d30c:	f7ff bb9a 	b.w	800ca44 <_dtoa_r+0x2c>
 800d310:	693a      	ldr	r2, [r7, #16]
 800d312:	3202      	adds	r2, #2
 800d314:	0092      	lsls	r2, r2, #2
 800d316:	f107 010c 	add.w	r1, r7, #12
 800d31a:	300c      	adds	r0, #12
 800d31c:	f000 fa04 	bl	800d728 <memcpy>
 800d320:	2201      	movs	r2, #1
 800d322:	4641      	mov	r1, r8
 800d324:	4630      	mov	r0, r6
 800d326:	f000 fc1f 	bl	800db68 <__lshift>
 800d32a:	9b00      	ldr	r3, [sp, #0]
 800d32c:	3301      	adds	r3, #1
 800d32e:	9305      	str	r3, [sp, #20]
 800d330:	9b00      	ldr	r3, [sp, #0]
 800d332:	4453      	add	r3, sl
 800d334:	9309      	str	r3, [sp, #36]	; 0x24
 800d336:	9b02      	ldr	r3, [sp, #8]
 800d338:	f003 0301 	and.w	r3, r3, #1
 800d33c:	46b9      	mov	r9, r7
 800d33e:	9308      	str	r3, [sp, #32]
 800d340:	4607      	mov	r7, r0
 800d342:	9b05      	ldr	r3, [sp, #20]
 800d344:	4621      	mov	r1, r4
 800d346:	3b01      	subs	r3, #1
 800d348:	4628      	mov	r0, r5
 800d34a:	9302      	str	r3, [sp, #8]
 800d34c:	f7ff fad6 	bl	800c8fc <quorem>
 800d350:	4603      	mov	r3, r0
 800d352:	3330      	adds	r3, #48	; 0x30
 800d354:	9006      	str	r0, [sp, #24]
 800d356:	4649      	mov	r1, r9
 800d358:	4628      	mov	r0, r5
 800d35a:	930a      	str	r3, [sp, #40]	; 0x28
 800d35c:	f000 fc70 	bl	800dc40 <__mcmp>
 800d360:	463a      	mov	r2, r7
 800d362:	4682      	mov	sl, r0
 800d364:	4621      	mov	r1, r4
 800d366:	4630      	mov	r0, r6
 800d368:	f000 fc86 	bl	800dc78 <__mdiff>
 800d36c:	68c2      	ldr	r2, [r0, #12]
 800d36e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d370:	4680      	mov	r8, r0
 800d372:	bb0a      	cbnz	r2, 800d3b8 <_dtoa_r+0x9a0>
 800d374:	4601      	mov	r1, r0
 800d376:	4628      	mov	r0, r5
 800d378:	f000 fc62 	bl	800dc40 <__mcmp>
 800d37c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d37e:	4602      	mov	r2, r0
 800d380:	4641      	mov	r1, r8
 800d382:	4630      	mov	r0, r6
 800d384:	920e      	str	r2, [sp, #56]	; 0x38
 800d386:	930a      	str	r3, [sp, #40]	; 0x28
 800d388:	f000 fa1c 	bl	800d7c4 <_Bfree>
 800d38c:	9b07      	ldr	r3, [sp, #28]
 800d38e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d390:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d394:	ea43 0102 	orr.w	r1, r3, r2
 800d398:	9b08      	ldr	r3, [sp, #32]
 800d39a:	430b      	orrs	r3, r1
 800d39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d39e:	d10d      	bne.n	800d3bc <_dtoa_r+0x9a4>
 800d3a0:	2b39      	cmp	r3, #57	; 0x39
 800d3a2:	d029      	beq.n	800d3f8 <_dtoa_r+0x9e0>
 800d3a4:	f1ba 0f00 	cmp.w	sl, #0
 800d3a8:	dd01      	ble.n	800d3ae <_dtoa_r+0x996>
 800d3aa:	9b06      	ldr	r3, [sp, #24]
 800d3ac:	3331      	adds	r3, #49	; 0x31
 800d3ae:	9a02      	ldr	r2, [sp, #8]
 800d3b0:	7013      	strb	r3, [r2, #0]
 800d3b2:	e774      	b.n	800d29e <_dtoa_r+0x886>
 800d3b4:	4638      	mov	r0, r7
 800d3b6:	e7b8      	b.n	800d32a <_dtoa_r+0x912>
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	e7e1      	b.n	800d380 <_dtoa_r+0x968>
 800d3bc:	f1ba 0f00 	cmp.w	sl, #0
 800d3c0:	db06      	blt.n	800d3d0 <_dtoa_r+0x9b8>
 800d3c2:	9907      	ldr	r1, [sp, #28]
 800d3c4:	ea41 0a0a 	orr.w	sl, r1, sl
 800d3c8:	9908      	ldr	r1, [sp, #32]
 800d3ca:	ea5a 0101 	orrs.w	r1, sl, r1
 800d3ce:	d120      	bne.n	800d412 <_dtoa_r+0x9fa>
 800d3d0:	2a00      	cmp	r2, #0
 800d3d2:	ddec      	ble.n	800d3ae <_dtoa_r+0x996>
 800d3d4:	4629      	mov	r1, r5
 800d3d6:	2201      	movs	r2, #1
 800d3d8:	4630      	mov	r0, r6
 800d3da:	9305      	str	r3, [sp, #20]
 800d3dc:	f000 fbc4 	bl	800db68 <__lshift>
 800d3e0:	4621      	mov	r1, r4
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	f000 fc2c 	bl	800dc40 <__mcmp>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	9b05      	ldr	r3, [sp, #20]
 800d3ec:	dc02      	bgt.n	800d3f4 <_dtoa_r+0x9dc>
 800d3ee:	d1de      	bne.n	800d3ae <_dtoa_r+0x996>
 800d3f0:	07da      	lsls	r2, r3, #31
 800d3f2:	d5dc      	bpl.n	800d3ae <_dtoa_r+0x996>
 800d3f4:	2b39      	cmp	r3, #57	; 0x39
 800d3f6:	d1d8      	bne.n	800d3aa <_dtoa_r+0x992>
 800d3f8:	9a02      	ldr	r2, [sp, #8]
 800d3fa:	2339      	movs	r3, #57	; 0x39
 800d3fc:	7013      	strb	r3, [r2, #0]
 800d3fe:	4643      	mov	r3, r8
 800d400:	4698      	mov	r8, r3
 800d402:	3b01      	subs	r3, #1
 800d404:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d408:	2a39      	cmp	r2, #57	; 0x39
 800d40a:	d051      	beq.n	800d4b0 <_dtoa_r+0xa98>
 800d40c:	3201      	adds	r2, #1
 800d40e:	701a      	strb	r2, [r3, #0]
 800d410:	e745      	b.n	800d29e <_dtoa_r+0x886>
 800d412:	2a00      	cmp	r2, #0
 800d414:	dd03      	ble.n	800d41e <_dtoa_r+0xa06>
 800d416:	2b39      	cmp	r3, #57	; 0x39
 800d418:	d0ee      	beq.n	800d3f8 <_dtoa_r+0x9e0>
 800d41a:	3301      	adds	r3, #1
 800d41c:	e7c7      	b.n	800d3ae <_dtoa_r+0x996>
 800d41e:	9a05      	ldr	r2, [sp, #20]
 800d420:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d422:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d426:	428a      	cmp	r2, r1
 800d428:	d02b      	beq.n	800d482 <_dtoa_r+0xa6a>
 800d42a:	4629      	mov	r1, r5
 800d42c:	2300      	movs	r3, #0
 800d42e:	220a      	movs	r2, #10
 800d430:	4630      	mov	r0, r6
 800d432:	f000 f9e9 	bl	800d808 <__multadd>
 800d436:	45b9      	cmp	r9, r7
 800d438:	4605      	mov	r5, r0
 800d43a:	f04f 0300 	mov.w	r3, #0
 800d43e:	f04f 020a 	mov.w	r2, #10
 800d442:	4649      	mov	r1, r9
 800d444:	4630      	mov	r0, r6
 800d446:	d107      	bne.n	800d458 <_dtoa_r+0xa40>
 800d448:	f000 f9de 	bl	800d808 <__multadd>
 800d44c:	4681      	mov	r9, r0
 800d44e:	4607      	mov	r7, r0
 800d450:	9b05      	ldr	r3, [sp, #20]
 800d452:	3301      	adds	r3, #1
 800d454:	9305      	str	r3, [sp, #20]
 800d456:	e774      	b.n	800d342 <_dtoa_r+0x92a>
 800d458:	f000 f9d6 	bl	800d808 <__multadd>
 800d45c:	4639      	mov	r1, r7
 800d45e:	4681      	mov	r9, r0
 800d460:	2300      	movs	r3, #0
 800d462:	220a      	movs	r2, #10
 800d464:	4630      	mov	r0, r6
 800d466:	f000 f9cf 	bl	800d808 <__multadd>
 800d46a:	4607      	mov	r7, r0
 800d46c:	e7f0      	b.n	800d450 <_dtoa_r+0xa38>
 800d46e:	f1ba 0f00 	cmp.w	sl, #0
 800d472:	9a00      	ldr	r2, [sp, #0]
 800d474:	bfcc      	ite	gt
 800d476:	46d0      	movgt	r8, sl
 800d478:	f04f 0801 	movle.w	r8, #1
 800d47c:	4490      	add	r8, r2
 800d47e:	f04f 0900 	mov.w	r9, #0
 800d482:	4629      	mov	r1, r5
 800d484:	2201      	movs	r2, #1
 800d486:	4630      	mov	r0, r6
 800d488:	9302      	str	r3, [sp, #8]
 800d48a:	f000 fb6d 	bl	800db68 <__lshift>
 800d48e:	4621      	mov	r1, r4
 800d490:	4605      	mov	r5, r0
 800d492:	f000 fbd5 	bl	800dc40 <__mcmp>
 800d496:	2800      	cmp	r0, #0
 800d498:	dcb1      	bgt.n	800d3fe <_dtoa_r+0x9e6>
 800d49a:	d102      	bne.n	800d4a2 <_dtoa_r+0xa8a>
 800d49c:	9b02      	ldr	r3, [sp, #8]
 800d49e:	07db      	lsls	r3, r3, #31
 800d4a0:	d4ad      	bmi.n	800d3fe <_dtoa_r+0x9e6>
 800d4a2:	4643      	mov	r3, r8
 800d4a4:	4698      	mov	r8, r3
 800d4a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4aa:	2a30      	cmp	r2, #48	; 0x30
 800d4ac:	d0fa      	beq.n	800d4a4 <_dtoa_r+0xa8c>
 800d4ae:	e6f6      	b.n	800d29e <_dtoa_r+0x886>
 800d4b0:	9a00      	ldr	r2, [sp, #0]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d1a4      	bne.n	800d400 <_dtoa_r+0x9e8>
 800d4b6:	f10b 0b01 	add.w	fp, fp, #1
 800d4ba:	2331      	movs	r3, #49	; 0x31
 800d4bc:	e778      	b.n	800d3b0 <_dtoa_r+0x998>
 800d4be:	4b15      	ldr	r3, [pc, #84]	; (800d514 <_dtoa_r+0xafc>)
 800d4c0:	f7ff bb12 	b.w	800cae8 <_dtoa_r+0xd0>
 800d4c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	f47f aaee 	bne.w	800caa8 <_dtoa_r+0x90>
 800d4cc:	4b12      	ldr	r3, [pc, #72]	; (800d518 <_dtoa_r+0xb00>)
 800d4ce:	f7ff bb0b 	b.w	800cae8 <_dtoa_r+0xd0>
 800d4d2:	f1ba 0f00 	cmp.w	sl, #0
 800d4d6:	dc03      	bgt.n	800d4e0 <_dtoa_r+0xac8>
 800d4d8:	9b07      	ldr	r3, [sp, #28]
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	f73f aec7 	bgt.w	800d26e <_dtoa_r+0x856>
 800d4e0:	f8dd 8000 	ldr.w	r8, [sp]
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f7ff fa08 	bl	800c8fc <quorem>
 800d4ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d4f0:	f808 3b01 	strb.w	r3, [r8], #1
 800d4f4:	9a00      	ldr	r2, [sp, #0]
 800d4f6:	eba8 0202 	sub.w	r2, r8, r2
 800d4fa:	4592      	cmp	sl, r2
 800d4fc:	ddb7      	ble.n	800d46e <_dtoa_r+0xa56>
 800d4fe:	4629      	mov	r1, r5
 800d500:	2300      	movs	r3, #0
 800d502:	220a      	movs	r2, #10
 800d504:	4630      	mov	r0, r6
 800d506:	f000 f97f 	bl	800d808 <__multadd>
 800d50a:	4605      	mov	r5, r0
 800d50c:	e7ea      	b.n	800d4e4 <_dtoa_r+0xacc>
 800d50e:	bf00      	nop
 800d510:	0800ea37 	.word	0x0800ea37
 800d514:	0800e990 	.word	0x0800e990
 800d518:	0800e9b4 	.word	0x0800e9b4

0800d51c <std>:
 800d51c:	2300      	movs	r3, #0
 800d51e:	b510      	push	{r4, lr}
 800d520:	4604      	mov	r4, r0
 800d522:	e9c0 3300 	strd	r3, r3, [r0]
 800d526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d52a:	6083      	str	r3, [r0, #8]
 800d52c:	8181      	strh	r1, [r0, #12]
 800d52e:	6643      	str	r3, [r0, #100]	; 0x64
 800d530:	81c2      	strh	r2, [r0, #14]
 800d532:	6183      	str	r3, [r0, #24]
 800d534:	4619      	mov	r1, r3
 800d536:	2208      	movs	r2, #8
 800d538:	305c      	adds	r0, #92	; 0x5c
 800d53a:	f7fe fd7d 	bl	800c038 <memset>
 800d53e:	4b05      	ldr	r3, [pc, #20]	; (800d554 <std+0x38>)
 800d540:	6263      	str	r3, [r4, #36]	; 0x24
 800d542:	4b05      	ldr	r3, [pc, #20]	; (800d558 <std+0x3c>)
 800d544:	62a3      	str	r3, [r4, #40]	; 0x28
 800d546:	4b05      	ldr	r3, [pc, #20]	; (800d55c <std+0x40>)
 800d548:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d54a:	4b05      	ldr	r3, [pc, #20]	; (800d560 <std+0x44>)
 800d54c:	6224      	str	r4, [r4, #32]
 800d54e:	6323      	str	r3, [r4, #48]	; 0x30
 800d550:	bd10      	pop	{r4, pc}
 800d552:	bf00      	nop
 800d554:	0800e289 	.word	0x0800e289
 800d558:	0800e2ab 	.word	0x0800e2ab
 800d55c:	0800e2e3 	.word	0x0800e2e3
 800d560:	0800e307 	.word	0x0800e307

0800d564 <_cleanup_r>:
 800d564:	4901      	ldr	r1, [pc, #4]	; (800d56c <_cleanup_r+0x8>)
 800d566:	f000 b8af 	b.w	800d6c8 <_fwalk_reent>
 800d56a:	bf00      	nop
 800d56c:	0800e61d 	.word	0x0800e61d

0800d570 <__sfmoreglue>:
 800d570:	b570      	push	{r4, r5, r6, lr}
 800d572:	1e4a      	subs	r2, r1, #1
 800d574:	2568      	movs	r5, #104	; 0x68
 800d576:	4355      	muls	r5, r2
 800d578:	460e      	mov	r6, r1
 800d57a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d57e:	f000 fcbf 	bl	800df00 <_malloc_r>
 800d582:	4604      	mov	r4, r0
 800d584:	b140      	cbz	r0, 800d598 <__sfmoreglue+0x28>
 800d586:	2100      	movs	r1, #0
 800d588:	e9c0 1600 	strd	r1, r6, [r0]
 800d58c:	300c      	adds	r0, #12
 800d58e:	60a0      	str	r0, [r4, #8]
 800d590:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d594:	f7fe fd50 	bl	800c038 <memset>
 800d598:	4620      	mov	r0, r4
 800d59a:	bd70      	pop	{r4, r5, r6, pc}

0800d59c <__sfp_lock_acquire>:
 800d59c:	4801      	ldr	r0, [pc, #4]	; (800d5a4 <__sfp_lock_acquire+0x8>)
 800d59e:	f000 b8b8 	b.w	800d712 <__retarget_lock_acquire_recursive>
 800d5a2:	bf00      	nop
 800d5a4:	24000588 	.word	0x24000588

0800d5a8 <__sfp_lock_release>:
 800d5a8:	4801      	ldr	r0, [pc, #4]	; (800d5b0 <__sfp_lock_release+0x8>)
 800d5aa:	f000 b8b3 	b.w	800d714 <__retarget_lock_release_recursive>
 800d5ae:	bf00      	nop
 800d5b0:	24000588 	.word	0x24000588

0800d5b4 <__sinit_lock_acquire>:
 800d5b4:	4801      	ldr	r0, [pc, #4]	; (800d5bc <__sinit_lock_acquire+0x8>)
 800d5b6:	f000 b8ac 	b.w	800d712 <__retarget_lock_acquire_recursive>
 800d5ba:	bf00      	nop
 800d5bc:	24000583 	.word	0x24000583

0800d5c0 <__sinit_lock_release>:
 800d5c0:	4801      	ldr	r0, [pc, #4]	; (800d5c8 <__sinit_lock_release+0x8>)
 800d5c2:	f000 b8a7 	b.w	800d714 <__retarget_lock_release_recursive>
 800d5c6:	bf00      	nop
 800d5c8:	24000583 	.word	0x24000583

0800d5cc <__sinit>:
 800d5cc:	b510      	push	{r4, lr}
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	f7ff fff0 	bl	800d5b4 <__sinit_lock_acquire>
 800d5d4:	69a3      	ldr	r3, [r4, #24]
 800d5d6:	b11b      	cbz	r3, 800d5e0 <__sinit+0x14>
 800d5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5dc:	f7ff bff0 	b.w	800d5c0 <__sinit_lock_release>
 800d5e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d5e4:	6523      	str	r3, [r4, #80]	; 0x50
 800d5e6:	4b13      	ldr	r3, [pc, #76]	; (800d634 <__sinit+0x68>)
 800d5e8:	4a13      	ldr	r2, [pc, #76]	; (800d638 <__sinit+0x6c>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800d5ee:	42a3      	cmp	r3, r4
 800d5f0:	bf04      	itt	eq
 800d5f2:	2301      	moveq	r3, #1
 800d5f4:	61a3      	streq	r3, [r4, #24]
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	f000 f820 	bl	800d63c <__sfp>
 800d5fc:	6060      	str	r0, [r4, #4]
 800d5fe:	4620      	mov	r0, r4
 800d600:	f000 f81c 	bl	800d63c <__sfp>
 800d604:	60a0      	str	r0, [r4, #8]
 800d606:	4620      	mov	r0, r4
 800d608:	f000 f818 	bl	800d63c <__sfp>
 800d60c:	2200      	movs	r2, #0
 800d60e:	60e0      	str	r0, [r4, #12]
 800d610:	2104      	movs	r1, #4
 800d612:	6860      	ldr	r0, [r4, #4]
 800d614:	f7ff ff82 	bl	800d51c <std>
 800d618:	68a0      	ldr	r0, [r4, #8]
 800d61a:	2201      	movs	r2, #1
 800d61c:	2109      	movs	r1, #9
 800d61e:	f7ff ff7d 	bl	800d51c <std>
 800d622:	68e0      	ldr	r0, [r4, #12]
 800d624:	2202      	movs	r2, #2
 800d626:	2112      	movs	r1, #18
 800d628:	f7ff ff78 	bl	800d51c <std>
 800d62c:	2301      	movs	r3, #1
 800d62e:	61a3      	str	r3, [r4, #24]
 800d630:	e7d2      	b.n	800d5d8 <__sinit+0xc>
 800d632:	bf00      	nop
 800d634:	0800e97c 	.word	0x0800e97c
 800d638:	0800d565 	.word	0x0800d565

0800d63c <__sfp>:
 800d63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63e:	4607      	mov	r7, r0
 800d640:	f7ff ffac 	bl	800d59c <__sfp_lock_acquire>
 800d644:	4b1e      	ldr	r3, [pc, #120]	; (800d6c0 <__sfp+0x84>)
 800d646:	681e      	ldr	r6, [r3, #0]
 800d648:	69b3      	ldr	r3, [r6, #24]
 800d64a:	b913      	cbnz	r3, 800d652 <__sfp+0x16>
 800d64c:	4630      	mov	r0, r6
 800d64e:	f7ff ffbd 	bl	800d5cc <__sinit>
 800d652:	3648      	adds	r6, #72	; 0x48
 800d654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d658:	3b01      	subs	r3, #1
 800d65a:	d503      	bpl.n	800d664 <__sfp+0x28>
 800d65c:	6833      	ldr	r3, [r6, #0]
 800d65e:	b30b      	cbz	r3, 800d6a4 <__sfp+0x68>
 800d660:	6836      	ldr	r6, [r6, #0]
 800d662:	e7f7      	b.n	800d654 <__sfp+0x18>
 800d664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d668:	b9d5      	cbnz	r5, 800d6a0 <__sfp+0x64>
 800d66a:	4b16      	ldr	r3, [pc, #88]	; (800d6c4 <__sfp+0x88>)
 800d66c:	60e3      	str	r3, [r4, #12]
 800d66e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d672:	6665      	str	r5, [r4, #100]	; 0x64
 800d674:	f000 f84c 	bl	800d710 <__retarget_lock_init_recursive>
 800d678:	f7ff ff96 	bl	800d5a8 <__sfp_lock_release>
 800d67c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d680:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d684:	6025      	str	r5, [r4, #0]
 800d686:	61a5      	str	r5, [r4, #24]
 800d688:	2208      	movs	r2, #8
 800d68a:	4629      	mov	r1, r5
 800d68c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d690:	f7fe fcd2 	bl	800c038 <memset>
 800d694:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d698:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d69c:	4620      	mov	r0, r4
 800d69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6a0:	3468      	adds	r4, #104	; 0x68
 800d6a2:	e7d9      	b.n	800d658 <__sfp+0x1c>
 800d6a4:	2104      	movs	r1, #4
 800d6a6:	4638      	mov	r0, r7
 800d6a8:	f7ff ff62 	bl	800d570 <__sfmoreglue>
 800d6ac:	4604      	mov	r4, r0
 800d6ae:	6030      	str	r0, [r6, #0]
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	d1d5      	bne.n	800d660 <__sfp+0x24>
 800d6b4:	f7ff ff78 	bl	800d5a8 <__sfp_lock_release>
 800d6b8:	230c      	movs	r3, #12
 800d6ba:	603b      	str	r3, [r7, #0]
 800d6bc:	e7ee      	b.n	800d69c <__sfp+0x60>
 800d6be:	bf00      	nop
 800d6c0:	0800e97c 	.word	0x0800e97c
 800d6c4:	ffff0001 	.word	0xffff0001

0800d6c8 <_fwalk_reent>:
 800d6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6cc:	4606      	mov	r6, r0
 800d6ce:	4688      	mov	r8, r1
 800d6d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6d4:	2700      	movs	r7, #0
 800d6d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6da:	f1b9 0901 	subs.w	r9, r9, #1
 800d6de:	d505      	bpl.n	800d6ec <_fwalk_reent+0x24>
 800d6e0:	6824      	ldr	r4, [r4, #0]
 800d6e2:	2c00      	cmp	r4, #0
 800d6e4:	d1f7      	bne.n	800d6d6 <_fwalk_reent+0xe>
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6ec:	89ab      	ldrh	r3, [r5, #12]
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d907      	bls.n	800d702 <_fwalk_reent+0x3a>
 800d6f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	d003      	beq.n	800d702 <_fwalk_reent+0x3a>
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	47c0      	blx	r8
 800d700:	4307      	orrs	r7, r0
 800d702:	3568      	adds	r5, #104	; 0x68
 800d704:	e7e9      	b.n	800d6da <_fwalk_reent+0x12>
	...

0800d708 <_localeconv_r>:
 800d708:	4800      	ldr	r0, [pc, #0]	; (800d70c <_localeconv_r+0x4>)
 800d70a:	4770      	bx	lr
 800d70c:	24000170 	.word	0x24000170

0800d710 <__retarget_lock_init_recursive>:
 800d710:	4770      	bx	lr

0800d712 <__retarget_lock_acquire_recursive>:
 800d712:	4770      	bx	lr

0800d714 <__retarget_lock_release_recursive>:
 800d714:	4770      	bx	lr
	...

0800d718 <malloc>:
 800d718:	4b02      	ldr	r3, [pc, #8]	; (800d724 <malloc+0xc>)
 800d71a:	4601      	mov	r1, r0
 800d71c:	6818      	ldr	r0, [r3, #0]
 800d71e:	f000 bbef 	b.w	800df00 <_malloc_r>
 800d722:	bf00      	nop
 800d724:	2400001c 	.word	0x2400001c

0800d728 <memcpy>:
 800d728:	440a      	add	r2, r1
 800d72a:	4291      	cmp	r1, r2
 800d72c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d730:	d100      	bne.n	800d734 <memcpy+0xc>
 800d732:	4770      	bx	lr
 800d734:	b510      	push	{r4, lr}
 800d736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d73a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d73e:	4291      	cmp	r1, r2
 800d740:	d1f9      	bne.n	800d736 <memcpy+0xe>
 800d742:	bd10      	pop	{r4, pc}

0800d744 <_Balloc>:
 800d744:	b570      	push	{r4, r5, r6, lr}
 800d746:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d748:	4604      	mov	r4, r0
 800d74a:	460d      	mov	r5, r1
 800d74c:	b976      	cbnz	r6, 800d76c <_Balloc+0x28>
 800d74e:	2010      	movs	r0, #16
 800d750:	f7ff ffe2 	bl	800d718 <malloc>
 800d754:	4602      	mov	r2, r0
 800d756:	6260      	str	r0, [r4, #36]	; 0x24
 800d758:	b920      	cbnz	r0, 800d764 <_Balloc+0x20>
 800d75a:	4b18      	ldr	r3, [pc, #96]	; (800d7bc <_Balloc+0x78>)
 800d75c:	4818      	ldr	r0, [pc, #96]	; (800d7c0 <_Balloc+0x7c>)
 800d75e:	2166      	movs	r1, #102	; 0x66
 800d760:	f000 fea8 	bl	800e4b4 <__assert_func>
 800d764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d768:	6006      	str	r6, [r0, #0]
 800d76a:	60c6      	str	r6, [r0, #12]
 800d76c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d76e:	68f3      	ldr	r3, [r6, #12]
 800d770:	b183      	cbz	r3, 800d794 <_Balloc+0x50>
 800d772:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d774:	68db      	ldr	r3, [r3, #12]
 800d776:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d77a:	b9b8      	cbnz	r0, 800d7ac <_Balloc+0x68>
 800d77c:	2101      	movs	r1, #1
 800d77e:	fa01 f605 	lsl.w	r6, r1, r5
 800d782:	1d72      	adds	r2, r6, #5
 800d784:	0092      	lsls	r2, r2, #2
 800d786:	4620      	mov	r0, r4
 800d788:	f000 fb5a 	bl	800de40 <_calloc_r>
 800d78c:	b160      	cbz	r0, 800d7a8 <_Balloc+0x64>
 800d78e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d792:	e00e      	b.n	800d7b2 <_Balloc+0x6e>
 800d794:	2221      	movs	r2, #33	; 0x21
 800d796:	2104      	movs	r1, #4
 800d798:	4620      	mov	r0, r4
 800d79a:	f000 fb51 	bl	800de40 <_calloc_r>
 800d79e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7a0:	60f0      	str	r0, [r6, #12]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1e4      	bne.n	800d772 <_Balloc+0x2e>
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}
 800d7ac:	6802      	ldr	r2, [r0, #0]
 800d7ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d7b8:	e7f7      	b.n	800d7aa <_Balloc+0x66>
 800d7ba:	bf00      	nop
 800d7bc:	0800e9c1 	.word	0x0800e9c1
 800d7c0:	0800eaa8 	.word	0x0800eaa8

0800d7c4 <_Bfree>:
 800d7c4:	b570      	push	{r4, r5, r6, lr}
 800d7c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	460c      	mov	r4, r1
 800d7cc:	b976      	cbnz	r6, 800d7ec <_Bfree+0x28>
 800d7ce:	2010      	movs	r0, #16
 800d7d0:	f7ff ffa2 	bl	800d718 <malloc>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	6268      	str	r0, [r5, #36]	; 0x24
 800d7d8:	b920      	cbnz	r0, 800d7e4 <_Bfree+0x20>
 800d7da:	4b09      	ldr	r3, [pc, #36]	; (800d800 <_Bfree+0x3c>)
 800d7dc:	4809      	ldr	r0, [pc, #36]	; (800d804 <_Bfree+0x40>)
 800d7de:	218a      	movs	r1, #138	; 0x8a
 800d7e0:	f000 fe68 	bl	800e4b4 <__assert_func>
 800d7e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7e8:	6006      	str	r6, [r0, #0]
 800d7ea:	60c6      	str	r6, [r0, #12]
 800d7ec:	b13c      	cbz	r4, 800d7fe <_Bfree+0x3a>
 800d7ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7f0:	6862      	ldr	r2, [r4, #4]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7f8:	6021      	str	r1, [r4, #0]
 800d7fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7fe:	bd70      	pop	{r4, r5, r6, pc}
 800d800:	0800e9c1 	.word	0x0800e9c1
 800d804:	0800eaa8 	.word	0x0800eaa8

0800d808 <__multadd>:
 800d808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d80c:	690e      	ldr	r6, [r1, #16]
 800d80e:	4607      	mov	r7, r0
 800d810:	4698      	mov	r8, r3
 800d812:	460c      	mov	r4, r1
 800d814:	f101 0014 	add.w	r0, r1, #20
 800d818:	2300      	movs	r3, #0
 800d81a:	6805      	ldr	r5, [r0, #0]
 800d81c:	b2a9      	uxth	r1, r5
 800d81e:	fb02 8101 	mla	r1, r2, r1, r8
 800d822:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d826:	0c2d      	lsrs	r5, r5, #16
 800d828:	fb02 c505 	mla	r5, r2, r5, ip
 800d82c:	b289      	uxth	r1, r1
 800d82e:	3301      	adds	r3, #1
 800d830:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d834:	429e      	cmp	r6, r3
 800d836:	f840 1b04 	str.w	r1, [r0], #4
 800d83a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d83e:	dcec      	bgt.n	800d81a <__multadd+0x12>
 800d840:	f1b8 0f00 	cmp.w	r8, #0
 800d844:	d022      	beq.n	800d88c <__multadd+0x84>
 800d846:	68a3      	ldr	r3, [r4, #8]
 800d848:	42b3      	cmp	r3, r6
 800d84a:	dc19      	bgt.n	800d880 <__multadd+0x78>
 800d84c:	6861      	ldr	r1, [r4, #4]
 800d84e:	4638      	mov	r0, r7
 800d850:	3101      	adds	r1, #1
 800d852:	f7ff ff77 	bl	800d744 <_Balloc>
 800d856:	4605      	mov	r5, r0
 800d858:	b928      	cbnz	r0, 800d866 <__multadd+0x5e>
 800d85a:	4602      	mov	r2, r0
 800d85c:	4b0d      	ldr	r3, [pc, #52]	; (800d894 <__multadd+0x8c>)
 800d85e:	480e      	ldr	r0, [pc, #56]	; (800d898 <__multadd+0x90>)
 800d860:	21b5      	movs	r1, #181	; 0xb5
 800d862:	f000 fe27 	bl	800e4b4 <__assert_func>
 800d866:	6922      	ldr	r2, [r4, #16]
 800d868:	3202      	adds	r2, #2
 800d86a:	f104 010c 	add.w	r1, r4, #12
 800d86e:	0092      	lsls	r2, r2, #2
 800d870:	300c      	adds	r0, #12
 800d872:	f7ff ff59 	bl	800d728 <memcpy>
 800d876:	4621      	mov	r1, r4
 800d878:	4638      	mov	r0, r7
 800d87a:	f7ff ffa3 	bl	800d7c4 <_Bfree>
 800d87e:	462c      	mov	r4, r5
 800d880:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d884:	3601      	adds	r6, #1
 800d886:	f8c3 8014 	str.w	r8, [r3, #20]
 800d88a:	6126      	str	r6, [r4, #16]
 800d88c:	4620      	mov	r0, r4
 800d88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d892:	bf00      	nop
 800d894:	0800ea37 	.word	0x0800ea37
 800d898:	0800eaa8 	.word	0x0800eaa8

0800d89c <__hi0bits>:
 800d89c:	0c03      	lsrs	r3, r0, #16
 800d89e:	041b      	lsls	r3, r3, #16
 800d8a0:	b9d3      	cbnz	r3, 800d8d8 <__hi0bits+0x3c>
 800d8a2:	0400      	lsls	r0, r0, #16
 800d8a4:	2310      	movs	r3, #16
 800d8a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d8aa:	bf04      	itt	eq
 800d8ac:	0200      	lsleq	r0, r0, #8
 800d8ae:	3308      	addeq	r3, #8
 800d8b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d8b4:	bf04      	itt	eq
 800d8b6:	0100      	lsleq	r0, r0, #4
 800d8b8:	3304      	addeq	r3, #4
 800d8ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d8be:	bf04      	itt	eq
 800d8c0:	0080      	lsleq	r0, r0, #2
 800d8c2:	3302      	addeq	r3, #2
 800d8c4:	2800      	cmp	r0, #0
 800d8c6:	db05      	blt.n	800d8d4 <__hi0bits+0x38>
 800d8c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d8cc:	f103 0301 	add.w	r3, r3, #1
 800d8d0:	bf08      	it	eq
 800d8d2:	2320      	moveq	r3, #32
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	4770      	bx	lr
 800d8d8:	2300      	movs	r3, #0
 800d8da:	e7e4      	b.n	800d8a6 <__hi0bits+0xa>

0800d8dc <__lo0bits>:
 800d8dc:	6803      	ldr	r3, [r0, #0]
 800d8de:	f013 0207 	ands.w	r2, r3, #7
 800d8e2:	4601      	mov	r1, r0
 800d8e4:	d00b      	beq.n	800d8fe <__lo0bits+0x22>
 800d8e6:	07da      	lsls	r2, r3, #31
 800d8e8:	d424      	bmi.n	800d934 <__lo0bits+0x58>
 800d8ea:	0798      	lsls	r0, r3, #30
 800d8ec:	bf49      	itett	mi
 800d8ee:	085b      	lsrmi	r3, r3, #1
 800d8f0:	089b      	lsrpl	r3, r3, #2
 800d8f2:	2001      	movmi	r0, #1
 800d8f4:	600b      	strmi	r3, [r1, #0]
 800d8f6:	bf5c      	itt	pl
 800d8f8:	600b      	strpl	r3, [r1, #0]
 800d8fa:	2002      	movpl	r0, #2
 800d8fc:	4770      	bx	lr
 800d8fe:	b298      	uxth	r0, r3
 800d900:	b9b0      	cbnz	r0, 800d930 <__lo0bits+0x54>
 800d902:	0c1b      	lsrs	r3, r3, #16
 800d904:	2010      	movs	r0, #16
 800d906:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d90a:	bf04      	itt	eq
 800d90c:	0a1b      	lsreq	r3, r3, #8
 800d90e:	3008      	addeq	r0, #8
 800d910:	071a      	lsls	r2, r3, #28
 800d912:	bf04      	itt	eq
 800d914:	091b      	lsreq	r3, r3, #4
 800d916:	3004      	addeq	r0, #4
 800d918:	079a      	lsls	r2, r3, #30
 800d91a:	bf04      	itt	eq
 800d91c:	089b      	lsreq	r3, r3, #2
 800d91e:	3002      	addeq	r0, #2
 800d920:	07da      	lsls	r2, r3, #31
 800d922:	d403      	bmi.n	800d92c <__lo0bits+0x50>
 800d924:	085b      	lsrs	r3, r3, #1
 800d926:	f100 0001 	add.w	r0, r0, #1
 800d92a:	d005      	beq.n	800d938 <__lo0bits+0x5c>
 800d92c:	600b      	str	r3, [r1, #0]
 800d92e:	4770      	bx	lr
 800d930:	4610      	mov	r0, r2
 800d932:	e7e8      	b.n	800d906 <__lo0bits+0x2a>
 800d934:	2000      	movs	r0, #0
 800d936:	4770      	bx	lr
 800d938:	2020      	movs	r0, #32
 800d93a:	4770      	bx	lr

0800d93c <__i2b>:
 800d93c:	b510      	push	{r4, lr}
 800d93e:	460c      	mov	r4, r1
 800d940:	2101      	movs	r1, #1
 800d942:	f7ff feff 	bl	800d744 <_Balloc>
 800d946:	4602      	mov	r2, r0
 800d948:	b928      	cbnz	r0, 800d956 <__i2b+0x1a>
 800d94a:	4b05      	ldr	r3, [pc, #20]	; (800d960 <__i2b+0x24>)
 800d94c:	4805      	ldr	r0, [pc, #20]	; (800d964 <__i2b+0x28>)
 800d94e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d952:	f000 fdaf 	bl	800e4b4 <__assert_func>
 800d956:	2301      	movs	r3, #1
 800d958:	6144      	str	r4, [r0, #20]
 800d95a:	6103      	str	r3, [r0, #16]
 800d95c:	bd10      	pop	{r4, pc}
 800d95e:	bf00      	nop
 800d960:	0800ea37 	.word	0x0800ea37
 800d964:	0800eaa8 	.word	0x0800eaa8

0800d968 <__multiply>:
 800d968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96c:	4614      	mov	r4, r2
 800d96e:	690a      	ldr	r2, [r1, #16]
 800d970:	6923      	ldr	r3, [r4, #16]
 800d972:	429a      	cmp	r2, r3
 800d974:	bfb8      	it	lt
 800d976:	460b      	movlt	r3, r1
 800d978:	460d      	mov	r5, r1
 800d97a:	bfbc      	itt	lt
 800d97c:	4625      	movlt	r5, r4
 800d97e:	461c      	movlt	r4, r3
 800d980:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d984:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d988:	68ab      	ldr	r3, [r5, #8]
 800d98a:	6869      	ldr	r1, [r5, #4]
 800d98c:	eb0a 0709 	add.w	r7, sl, r9
 800d990:	42bb      	cmp	r3, r7
 800d992:	b085      	sub	sp, #20
 800d994:	bfb8      	it	lt
 800d996:	3101      	addlt	r1, #1
 800d998:	f7ff fed4 	bl	800d744 <_Balloc>
 800d99c:	b930      	cbnz	r0, 800d9ac <__multiply+0x44>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	4b42      	ldr	r3, [pc, #264]	; (800daac <__multiply+0x144>)
 800d9a2:	4843      	ldr	r0, [pc, #268]	; (800dab0 <__multiply+0x148>)
 800d9a4:	f240 115d 	movw	r1, #349	; 0x15d
 800d9a8:	f000 fd84 	bl	800e4b4 <__assert_func>
 800d9ac:	f100 0614 	add.w	r6, r0, #20
 800d9b0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d9b4:	4633      	mov	r3, r6
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	4543      	cmp	r3, r8
 800d9ba:	d31e      	bcc.n	800d9fa <__multiply+0x92>
 800d9bc:	f105 0c14 	add.w	ip, r5, #20
 800d9c0:	f104 0314 	add.w	r3, r4, #20
 800d9c4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d9c8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d9cc:	9202      	str	r2, [sp, #8]
 800d9ce:	ebac 0205 	sub.w	r2, ip, r5
 800d9d2:	3a15      	subs	r2, #21
 800d9d4:	f022 0203 	bic.w	r2, r2, #3
 800d9d8:	3204      	adds	r2, #4
 800d9da:	f105 0115 	add.w	r1, r5, #21
 800d9de:	458c      	cmp	ip, r1
 800d9e0:	bf38      	it	cc
 800d9e2:	2204      	movcc	r2, #4
 800d9e4:	9201      	str	r2, [sp, #4]
 800d9e6:	9a02      	ldr	r2, [sp, #8]
 800d9e8:	9303      	str	r3, [sp, #12]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d808      	bhi.n	800da00 <__multiply+0x98>
 800d9ee:	2f00      	cmp	r7, #0
 800d9f0:	dc55      	bgt.n	800da9e <__multiply+0x136>
 800d9f2:	6107      	str	r7, [r0, #16]
 800d9f4:	b005      	add	sp, #20
 800d9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fa:	f843 2b04 	str.w	r2, [r3], #4
 800d9fe:	e7db      	b.n	800d9b8 <__multiply+0x50>
 800da00:	f8b3 a000 	ldrh.w	sl, [r3]
 800da04:	f1ba 0f00 	cmp.w	sl, #0
 800da08:	d020      	beq.n	800da4c <__multiply+0xe4>
 800da0a:	f105 0e14 	add.w	lr, r5, #20
 800da0e:	46b1      	mov	r9, r6
 800da10:	2200      	movs	r2, #0
 800da12:	f85e 4b04 	ldr.w	r4, [lr], #4
 800da16:	f8d9 b000 	ldr.w	fp, [r9]
 800da1a:	b2a1      	uxth	r1, r4
 800da1c:	fa1f fb8b 	uxth.w	fp, fp
 800da20:	fb0a b101 	mla	r1, sl, r1, fp
 800da24:	4411      	add	r1, r2
 800da26:	f8d9 2000 	ldr.w	r2, [r9]
 800da2a:	0c24      	lsrs	r4, r4, #16
 800da2c:	0c12      	lsrs	r2, r2, #16
 800da2e:	fb0a 2404 	mla	r4, sl, r4, r2
 800da32:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800da36:	b289      	uxth	r1, r1
 800da38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800da3c:	45f4      	cmp	ip, lr
 800da3e:	f849 1b04 	str.w	r1, [r9], #4
 800da42:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800da46:	d8e4      	bhi.n	800da12 <__multiply+0xaa>
 800da48:	9901      	ldr	r1, [sp, #4]
 800da4a:	5072      	str	r2, [r6, r1]
 800da4c:	9a03      	ldr	r2, [sp, #12]
 800da4e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800da52:	3304      	adds	r3, #4
 800da54:	f1b9 0f00 	cmp.w	r9, #0
 800da58:	d01f      	beq.n	800da9a <__multiply+0x132>
 800da5a:	6834      	ldr	r4, [r6, #0]
 800da5c:	f105 0114 	add.w	r1, r5, #20
 800da60:	46b6      	mov	lr, r6
 800da62:	f04f 0a00 	mov.w	sl, #0
 800da66:	880a      	ldrh	r2, [r1, #0]
 800da68:	f8be b002 	ldrh.w	fp, [lr, #2]
 800da6c:	fb09 b202 	mla	r2, r9, r2, fp
 800da70:	4492      	add	sl, r2
 800da72:	b2a4      	uxth	r4, r4
 800da74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800da78:	f84e 4b04 	str.w	r4, [lr], #4
 800da7c:	f851 4b04 	ldr.w	r4, [r1], #4
 800da80:	f8be 2000 	ldrh.w	r2, [lr]
 800da84:	0c24      	lsrs	r4, r4, #16
 800da86:	fb09 2404 	mla	r4, r9, r4, r2
 800da8a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800da8e:	458c      	cmp	ip, r1
 800da90:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800da94:	d8e7      	bhi.n	800da66 <__multiply+0xfe>
 800da96:	9a01      	ldr	r2, [sp, #4]
 800da98:	50b4      	str	r4, [r6, r2]
 800da9a:	3604      	adds	r6, #4
 800da9c:	e7a3      	b.n	800d9e6 <__multiply+0x7e>
 800da9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d1a5      	bne.n	800d9f2 <__multiply+0x8a>
 800daa6:	3f01      	subs	r7, #1
 800daa8:	e7a1      	b.n	800d9ee <__multiply+0x86>
 800daaa:	bf00      	nop
 800daac:	0800ea37 	.word	0x0800ea37
 800dab0:	0800eaa8 	.word	0x0800eaa8

0800dab4 <__pow5mult>:
 800dab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dab8:	4615      	mov	r5, r2
 800daba:	f012 0203 	ands.w	r2, r2, #3
 800dabe:	4606      	mov	r6, r0
 800dac0:	460f      	mov	r7, r1
 800dac2:	d007      	beq.n	800dad4 <__pow5mult+0x20>
 800dac4:	4c25      	ldr	r4, [pc, #148]	; (800db5c <__pow5mult+0xa8>)
 800dac6:	3a01      	subs	r2, #1
 800dac8:	2300      	movs	r3, #0
 800daca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dace:	f7ff fe9b 	bl	800d808 <__multadd>
 800dad2:	4607      	mov	r7, r0
 800dad4:	10ad      	asrs	r5, r5, #2
 800dad6:	d03d      	beq.n	800db54 <__pow5mult+0xa0>
 800dad8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dada:	b97c      	cbnz	r4, 800dafc <__pow5mult+0x48>
 800dadc:	2010      	movs	r0, #16
 800dade:	f7ff fe1b 	bl	800d718 <malloc>
 800dae2:	4602      	mov	r2, r0
 800dae4:	6270      	str	r0, [r6, #36]	; 0x24
 800dae6:	b928      	cbnz	r0, 800daf4 <__pow5mult+0x40>
 800dae8:	4b1d      	ldr	r3, [pc, #116]	; (800db60 <__pow5mult+0xac>)
 800daea:	481e      	ldr	r0, [pc, #120]	; (800db64 <__pow5mult+0xb0>)
 800daec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800daf0:	f000 fce0 	bl	800e4b4 <__assert_func>
 800daf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800daf8:	6004      	str	r4, [r0, #0]
 800dafa:	60c4      	str	r4, [r0, #12]
 800dafc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800db00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db04:	b94c      	cbnz	r4, 800db1a <__pow5mult+0x66>
 800db06:	f240 2171 	movw	r1, #625	; 0x271
 800db0a:	4630      	mov	r0, r6
 800db0c:	f7ff ff16 	bl	800d93c <__i2b>
 800db10:	2300      	movs	r3, #0
 800db12:	f8c8 0008 	str.w	r0, [r8, #8]
 800db16:	4604      	mov	r4, r0
 800db18:	6003      	str	r3, [r0, #0]
 800db1a:	f04f 0900 	mov.w	r9, #0
 800db1e:	07eb      	lsls	r3, r5, #31
 800db20:	d50a      	bpl.n	800db38 <__pow5mult+0x84>
 800db22:	4639      	mov	r1, r7
 800db24:	4622      	mov	r2, r4
 800db26:	4630      	mov	r0, r6
 800db28:	f7ff ff1e 	bl	800d968 <__multiply>
 800db2c:	4639      	mov	r1, r7
 800db2e:	4680      	mov	r8, r0
 800db30:	4630      	mov	r0, r6
 800db32:	f7ff fe47 	bl	800d7c4 <_Bfree>
 800db36:	4647      	mov	r7, r8
 800db38:	106d      	asrs	r5, r5, #1
 800db3a:	d00b      	beq.n	800db54 <__pow5mult+0xa0>
 800db3c:	6820      	ldr	r0, [r4, #0]
 800db3e:	b938      	cbnz	r0, 800db50 <__pow5mult+0x9c>
 800db40:	4622      	mov	r2, r4
 800db42:	4621      	mov	r1, r4
 800db44:	4630      	mov	r0, r6
 800db46:	f7ff ff0f 	bl	800d968 <__multiply>
 800db4a:	6020      	str	r0, [r4, #0]
 800db4c:	f8c0 9000 	str.w	r9, [r0]
 800db50:	4604      	mov	r4, r0
 800db52:	e7e4      	b.n	800db1e <__pow5mult+0x6a>
 800db54:	4638      	mov	r0, r7
 800db56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db5a:	bf00      	nop
 800db5c:	0800ebf8 	.word	0x0800ebf8
 800db60:	0800e9c1 	.word	0x0800e9c1
 800db64:	0800eaa8 	.word	0x0800eaa8

0800db68 <__lshift>:
 800db68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db6c:	460c      	mov	r4, r1
 800db6e:	6849      	ldr	r1, [r1, #4]
 800db70:	6923      	ldr	r3, [r4, #16]
 800db72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db76:	68a3      	ldr	r3, [r4, #8]
 800db78:	4607      	mov	r7, r0
 800db7a:	4691      	mov	r9, r2
 800db7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db80:	f108 0601 	add.w	r6, r8, #1
 800db84:	42b3      	cmp	r3, r6
 800db86:	db0b      	blt.n	800dba0 <__lshift+0x38>
 800db88:	4638      	mov	r0, r7
 800db8a:	f7ff fddb 	bl	800d744 <_Balloc>
 800db8e:	4605      	mov	r5, r0
 800db90:	b948      	cbnz	r0, 800dba6 <__lshift+0x3e>
 800db92:	4602      	mov	r2, r0
 800db94:	4b28      	ldr	r3, [pc, #160]	; (800dc38 <__lshift+0xd0>)
 800db96:	4829      	ldr	r0, [pc, #164]	; (800dc3c <__lshift+0xd4>)
 800db98:	f240 11d9 	movw	r1, #473	; 0x1d9
 800db9c:	f000 fc8a 	bl	800e4b4 <__assert_func>
 800dba0:	3101      	adds	r1, #1
 800dba2:	005b      	lsls	r3, r3, #1
 800dba4:	e7ee      	b.n	800db84 <__lshift+0x1c>
 800dba6:	2300      	movs	r3, #0
 800dba8:	f100 0114 	add.w	r1, r0, #20
 800dbac:	f100 0210 	add.w	r2, r0, #16
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	4553      	cmp	r3, sl
 800dbb4:	db33      	blt.n	800dc1e <__lshift+0xb6>
 800dbb6:	6920      	ldr	r0, [r4, #16]
 800dbb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbbc:	f104 0314 	add.w	r3, r4, #20
 800dbc0:	f019 091f 	ands.w	r9, r9, #31
 800dbc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dbc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dbcc:	d02b      	beq.n	800dc26 <__lshift+0xbe>
 800dbce:	f1c9 0e20 	rsb	lr, r9, #32
 800dbd2:	468a      	mov	sl, r1
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	fa00 f009 	lsl.w	r0, r0, r9
 800dbdc:	4302      	orrs	r2, r0
 800dbde:	f84a 2b04 	str.w	r2, [sl], #4
 800dbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbe6:	459c      	cmp	ip, r3
 800dbe8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dbec:	d8f3      	bhi.n	800dbd6 <__lshift+0x6e>
 800dbee:	ebac 0304 	sub.w	r3, ip, r4
 800dbf2:	3b15      	subs	r3, #21
 800dbf4:	f023 0303 	bic.w	r3, r3, #3
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	f104 0015 	add.w	r0, r4, #21
 800dbfe:	4584      	cmp	ip, r0
 800dc00:	bf38      	it	cc
 800dc02:	2304      	movcc	r3, #4
 800dc04:	50ca      	str	r2, [r1, r3]
 800dc06:	b10a      	cbz	r2, 800dc0c <__lshift+0xa4>
 800dc08:	f108 0602 	add.w	r6, r8, #2
 800dc0c:	3e01      	subs	r6, #1
 800dc0e:	4638      	mov	r0, r7
 800dc10:	612e      	str	r6, [r5, #16]
 800dc12:	4621      	mov	r1, r4
 800dc14:	f7ff fdd6 	bl	800d7c4 <_Bfree>
 800dc18:	4628      	mov	r0, r5
 800dc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc22:	3301      	adds	r3, #1
 800dc24:	e7c5      	b.n	800dbb2 <__lshift+0x4a>
 800dc26:	3904      	subs	r1, #4
 800dc28:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc30:	459c      	cmp	ip, r3
 800dc32:	d8f9      	bhi.n	800dc28 <__lshift+0xc0>
 800dc34:	e7ea      	b.n	800dc0c <__lshift+0xa4>
 800dc36:	bf00      	nop
 800dc38:	0800ea37 	.word	0x0800ea37
 800dc3c:	0800eaa8 	.word	0x0800eaa8

0800dc40 <__mcmp>:
 800dc40:	b530      	push	{r4, r5, lr}
 800dc42:	6902      	ldr	r2, [r0, #16]
 800dc44:	690c      	ldr	r4, [r1, #16]
 800dc46:	1b12      	subs	r2, r2, r4
 800dc48:	d10e      	bne.n	800dc68 <__mcmp+0x28>
 800dc4a:	f100 0314 	add.w	r3, r0, #20
 800dc4e:	3114      	adds	r1, #20
 800dc50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dc54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dc58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dc5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dc60:	42a5      	cmp	r5, r4
 800dc62:	d003      	beq.n	800dc6c <__mcmp+0x2c>
 800dc64:	d305      	bcc.n	800dc72 <__mcmp+0x32>
 800dc66:	2201      	movs	r2, #1
 800dc68:	4610      	mov	r0, r2
 800dc6a:	bd30      	pop	{r4, r5, pc}
 800dc6c:	4283      	cmp	r3, r0
 800dc6e:	d3f3      	bcc.n	800dc58 <__mcmp+0x18>
 800dc70:	e7fa      	b.n	800dc68 <__mcmp+0x28>
 800dc72:	f04f 32ff 	mov.w	r2, #4294967295
 800dc76:	e7f7      	b.n	800dc68 <__mcmp+0x28>

0800dc78 <__mdiff>:
 800dc78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	460c      	mov	r4, r1
 800dc7e:	4606      	mov	r6, r0
 800dc80:	4611      	mov	r1, r2
 800dc82:	4620      	mov	r0, r4
 800dc84:	4617      	mov	r7, r2
 800dc86:	f7ff ffdb 	bl	800dc40 <__mcmp>
 800dc8a:	1e05      	subs	r5, r0, #0
 800dc8c:	d110      	bne.n	800dcb0 <__mdiff+0x38>
 800dc8e:	4629      	mov	r1, r5
 800dc90:	4630      	mov	r0, r6
 800dc92:	f7ff fd57 	bl	800d744 <_Balloc>
 800dc96:	b930      	cbnz	r0, 800dca6 <__mdiff+0x2e>
 800dc98:	4b39      	ldr	r3, [pc, #228]	; (800dd80 <__mdiff+0x108>)
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	f240 2132 	movw	r1, #562	; 0x232
 800dca0:	4838      	ldr	r0, [pc, #224]	; (800dd84 <__mdiff+0x10c>)
 800dca2:	f000 fc07 	bl	800e4b4 <__assert_func>
 800dca6:	2301      	movs	r3, #1
 800dca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb0:	bfa4      	itt	ge
 800dcb2:	463b      	movge	r3, r7
 800dcb4:	4627      	movge	r7, r4
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	6879      	ldr	r1, [r7, #4]
 800dcba:	bfa6      	itte	ge
 800dcbc:	461c      	movge	r4, r3
 800dcbe:	2500      	movge	r5, #0
 800dcc0:	2501      	movlt	r5, #1
 800dcc2:	f7ff fd3f 	bl	800d744 <_Balloc>
 800dcc6:	b920      	cbnz	r0, 800dcd2 <__mdiff+0x5a>
 800dcc8:	4b2d      	ldr	r3, [pc, #180]	; (800dd80 <__mdiff+0x108>)
 800dcca:	4602      	mov	r2, r0
 800dccc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dcd0:	e7e6      	b.n	800dca0 <__mdiff+0x28>
 800dcd2:	693e      	ldr	r6, [r7, #16]
 800dcd4:	60c5      	str	r5, [r0, #12]
 800dcd6:	6925      	ldr	r5, [r4, #16]
 800dcd8:	f107 0114 	add.w	r1, r7, #20
 800dcdc:	f104 0914 	add.w	r9, r4, #20
 800dce0:	f100 0e14 	add.w	lr, r0, #20
 800dce4:	f107 0210 	add.w	r2, r7, #16
 800dce8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dcec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dcf0:	46f2      	mov	sl, lr
 800dcf2:	2700      	movs	r7, #0
 800dcf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dcf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dcfc:	fa1f f883 	uxth.w	r8, r3
 800dd00:	fa17 f78b 	uxtah	r7, r7, fp
 800dd04:	0c1b      	lsrs	r3, r3, #16
 800dd06:	eba7 0808 	sub.w	r8, r7, r8
 800dd0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dd0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dd12:	fa1f f888 	uxth.w	r8, r8
 800dd16:	141f      	asrs	r7, r3, #16
 800dd18:	454d      	cmp	r5, r9
 800dd1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dd1e:	f84a 3b04 	str.w	r3, [sl], #4
 800dd22:	d8e7      	bhi.n	800dcf4 <__mdiff+0x7c>
 800dd24:	1b2b      	subs	r3, r5, r4
 800dd26:	3b15      	subs	r3, #21
 800dd28:	f023 0303 	bic.w	r3, r3, #3
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	3415      	adds	r4, #21
 800dd30:	42a5      	cmp	r5, r4
 800dd32:	bf38      	it	cc
 800dd34:	2304      	movcc	r3, #4
 800dd36:	4419      	add	r1, r3
 800dd38:	4473      	add	r3, lr
 800dd3a:	469e      	mov	lr, r3
 800dd3c:	460d      	mov	r5, r1
 800dd3e:	4565      	cmp	r5, ip
 800dd40:	d30e      	bcc.n	800dd60 <__mdiff+0xe8>
 800dd42:	f10c 0203 	add.w	r2, ip, #3
 800dd46:	1a52      	subs	r2, r2, r1
 800dd48:	f022 0203 	bic.w	r2, r2, #3
 800dd4c:	3903      	subs	r1, #3
 800dd4e:	458c      	cmp	ip, r1
 800dd50:	bf38      	it	cc
 800dd52:	2200      	movcc	r2, #0
 800dd54:	441a      	add	r2, r3
 800dd56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dd5a:	b17b      	cbz	r3, 800dd7c <__mdiff+0x104>
 800dd5c:	6106      	str	r6, [r0, #16]
 800dd5e:	e7a5      	b.n	800dcac <__mdiff+0x34>
 800dd60:	f855 8b04 	ldr.w	r8, [r5], #4
 800dd64:	fa17 f488 	uxtah	r4, r7, r8
 800dd68:	1422      	asrs	r2, r4, #16
 800dd6a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dd6e:	b2a4      	uxth	r4, r4
 800dd70:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dd74:	f84e 4b04 	str.w	r4, [lr], #4
 800dd78:	1417      	asrs	r7, r2, #16
 800dd7a:	e7e0      	b.n	800dd3e <__mdiff+0xc6>
 800dd7c:	3e01      	subs	r6, #1
 800dd7e:	e7ea      	b.n	800dd56 <__mdiff+0xde>
 800dd80:	0800ea37 	.word	0x0800ea37
 800dd84:	0800eaa8 	.word	0x0800eaa8

0800dd88 <__d2b>:
 800dd88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd8c:	4689      	mov	r9, r1
 800dd8e:	2101      	movs	r1, #1
 800dd90:	ec57 6b10 	vmov	r6, r7, d0
 800dd94:	4690      	mov	r8, r2
 800dd96:	f7ff fcd5 	bl	800d744 <_Balloc>
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	b930      	cbnz	r0, 800ddac <__d2b+0x24>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	4b25      	ldr	r3, [pc, #148]	; (800de38 <__d2b+0xb0>)
 800dda2:	4826      	ldr	r0, [pc, #152]	; (800de3c <__d2b+0xb4>)
 800dda4:	f240 310a 	movw	r1, #778	; 0x30a
 800dda8:	f000 fb84 	bl	800e4b4 <__assert_func>
 800ddac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ddb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ddb4:	bb35      	cbnz	r5, 800de04 <__d2b+0x7c>
 800ddb6:	2e00      	cmp	r6, #0
 800ddb8:	9301      	str	r3, [sp, #4]
 800ddba:	d028      	beq.n	800de0e <__d2b+0x86>
 800ddbc:	4668      	mov	r0, sp
 800ddbe:	9600      	str	r6, [sp, #0]
 800ddc0:	f7ff fd8c 	bl	800d8dc <__lo0bits>
 800ddc4:	9900      	ldr	r1, [sp, #0]
 800ddc6:	b300      	cbz	r0, 800de0a <__d2b+0x82>
 800ddc8:	9a01      	ldr	r2, [sp, #4]
 800ddca:	f1c0 0320 	rsb	r3, r0, #32
 800ddce:	fa02 f303 	lsl.w	r3, r2, r3
 800ddd2:	430b      	orrs	r3, r1
 800ddd4:	40c2      	lsrs	r2, r0
 800ddd6:	6163      	str	r3, [r4, #20]
 800ddd8:	9201      	str	r2, [sp, #4]
 800ddda:	9b01      	ldr	r3, [sp, #4]
 800dddc:	61a3      	str	r3, [r4, #24]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	bf14      	ite	ne
 800dde2:	2202      	movne	r2, #2
 800dde4:	2201      	moveq	r2, #1
 800dde6:	6122      	str	r2, [r4, #16]
 800dde8:	b1d5      	cbz	r5, 800de20 <__d2b+0x98>
 800ddea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddee:	4405      	add	r5, r0
 800ddf0:	f8c9 5000 	str.w	r5, [r9]
 800ddf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddf8:	f8c8 0000 	str.w	r0, [r8]
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	b003      	add	sp, #12
 800de00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de08:	e7d5      	b.n	800ddb6 <__d2b+0x2e>
 800de0a:	6161      	str	r1, [r4, #20]
 800de0c:	e7e5      	b.n	800ddda <__d2b+0x52>
 800de0e:	a801      	add	r0, sp, #4
 800de10:	f7ff fd64 	bl	800d8dc <__lo0bits>
 800de14:	9b01      	ldr	r3, [sp, #4]
 800de16:	6163      	str	r3, [r4, #20]
 800de18:	2201      	movs	r2, #1
 800de1a:	6122      	str	r2, [r4, #16]
 800de1c:	3020      	adds	r0, #32
 800de1e:	e7e3      	b.n	800dde8 <__d2b+0x60>
 800de20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de28:	f8c9 0000 	str.w	r0, [r9]
 800de2c:	6918      	ldr	r0, [r3, #16]
 800de2e:	f7ff fd35 	bl	800d89c <__hi0bits>
 800de32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de36:	e7df      	b.n	800ddf8 <__d2b+0x70>
 800de38:	0800ea37 	.word	0x0800ea37
 800de3c:	0800eaa8 	.word	0x0800eaa8

0800de40 <_calloc_r>:
 800de40:	b513      	push	{r0, r1, r4, lr}
 800de42:	434a      	muls	r2, r1
 800de44:	4611      	mov	r1, r2
 800de46:	9201      	str	r2, [sp, #4]
 800de48:	f000 f85a 	bl	800df00 <_malloc_r>
 800de4c:	4604      	mov	r4, r0
 800de4e:	b118      	cbz	r0, 800de58 <_calloc_r+0x18>
 800de50:	9a01      	ldr	r2, [sp, #4]
 800de52:	2100      	movs	r1, #0
 800de54:	f7fe f8f0 	bl	800c038 <memset>
 800de58:	4620      	mov	r0, r4
 800de5a:	b002      	add	sp, #8
 800de5c:	bd10      	pop	{r4, pc}
	...

0800de60 <_free_r>:
 800de60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de62:	2900      	cmp	r1, #0
 800de64:	d048      	beq.n	800def8 <_free_r+0x98>
 800de66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de6a:	9001      	str	r0, [sp, #4]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f1a1 0404 	sub.w	r4, r1, #4
 800de72:	bfb8      	it	lt
 800de74:	18e4      	addlt	r4, r4, r3
 800de76:	f000 fca7 	bl	800e7c8 <__malloc_lock>
 800de7a:	4a20      	ldr	r2, [pc, #128]	; (800defc <_free_r+0x9c>)
 800de7c:	9801      	ldr	r0, [sp, #4]
 800de7e:	6813      	ldr	r3, [r2, #0]
 800de80:	4615      	mov	r5, r2
 800de82:	b933      	cbnz	r3, 800de92 <_free_r+0x32>
 800de84:	6063      	str	r3, [r4, #4]
 800de86:	6014      	str	r4, [r2, #0]
 800de88:	b003      	add	sp, #12
 800de8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de8e:	f000 bca1 	b.w	800e7d4 <__malloc_unlock>
 800de92:	42a3      	cmp	r3, r4
 800de94:	d90b      	bls.n	800deae <_free_r+0x4e>
 800de96:	6821      	ldr	r1, [r4, #0]
 800de98:	1862      	adds	r2, r4, r1
 800de9a:	4293      	cmp	r3, r2
 800de9c:	bf04      	itt	eq
 800de9e:	681a      	ldreq	r2, [r3, #0]
 800dea0:	685b      	ldreq	r3, [r3, #4]
 800dea2:	6063      	str	r3, [r4, #4]
 800dea4:	bf04      	itt	eq
 800dea6:	1852      	addeq	r2, r2, r1
 800dea8:	6022      	streq	r2, [r4, #0]
 800deaa:	602c      	str	r4, [r5, #0]
 800deac:	e7ec      	b.n	800de88 <_free_r+0x28>
 800deae:	461a      	mov	r2, r3
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	b10b      	cbz	r3, 800deb8 <_free_r+0x58>
 800deb4:	42a3      	cmp	r3, r4
 800deb6:	d9fa      	bls.n	800deae <_free_r+0x4e>
 800deb8:	6811      	ldr	r1, [r2, #0]
 800deba:	1855      	adds	r5, r2, r1
 800debc:	42a5      	cmp	r5, r4
 800debe:	d10b      	bne.n	800ded8 <_free_r+0x78>
 800dec0:	6824      	ldr	r4, [r4, #0]
 800dec2:	4421      	add	r1, r4
 800dec4:	1854      	adds	r4, r2, r1
 800dec6:	42a3      	cmp	r3, r4
 800dec8:	6011      	str	r1, [r2, #0]
 800deca:	d1dd      	bne.n	800de88 <_free_r+0x28>
 800decc:	681c      	ldr	r4, [r3, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	6053      	str	r3, [r2, #4]
 800ded2:	4421      	add	r1, r4
 800ded4:	6011      	str	r1, [r2, #0]
 800ded6:	e7d7      	b.n	800de88 <_free_r+0x28>
 800ded8:	d902      	bls.n	800dee0 <_free_r+0x80>
 800deda:	230c      	movs	r3, #12
 800dedc:	6003      	str	r3, [r0, #0]
 800dede:	e7d3      	b.n	800de88 <_free_r+0x28>
 800dee0:	6825      	ldr	r5, [r4, #0]
 800dee2:	1961      	adds	r1, r4, r5
 800dee4:	428b      	cmp	r3, r1
 800dee6:	bf04      	itt	eq
 800dee8:	6819      	ldreq	r1, [r3, #0]
 800deea:	685b      	ldreq	r3, [r3, #4]
 800deec:	6063      	str	r3, [r4, #4]
 800deee:	bf04      	itt	eq
 800def0:	1949      	addeq	r1, r1, r5
 800def2:	6021      	streq	r1, [r4, #0]
 800def4:	6054      	str	r4, [r2, #4]
 800def6:	e7c7      	b.n	800de88 <_free_r+0x28>
 800def8:	b003      	add	sp, #12
 800defa:	bd30      	pop	{r4, r5, pc}
 800defc:	24000218 	.word	0x24000218

0800df00 <_malloc_r>:
 800df00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df02:	1ccd      	adds	r5, r1, #3
 800df04:	f025 0503 	bic.w	r5, r5, #3
 800df08:	3508      	adds	r5, #8
 800df0a:	2d0c      	cmp	r5, #12
 800df0c:	bf38      	it	cc
 800df0e:	250c      	movcc	r5, #12
 800df10:	2d00      	cmp	r5, #0
 800df12:	4606      	mov	r6, r0
 800df14:	db01      	blt.n	800df1a <_malloc_r+0x1a>
 800df16:	42a9      	cmp	r1, r5
 800df18:	d903      	bls.n	800df22 <_malloc_r+0x22>
 800df1a:	230c      	movs	r3, #12
 800df1c:	6033      	str	r3, [r6, #0]
 800df1e:	2000      	movs	r0, #0
 800df20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df22:	f000 fc51 	bl	800e7c8 <__malloc_lock>
 800df26:	4921      	ldr	r1, [pc, #132]	; (800dfac <_malloc_r+0xac>)
 800df28:	680a      	ldr	r2, [r1, #0]
 800df2a:	4614      	mov	r4, r2
 800df2c:	b99c      	cbnz	r4, 800df56 <_malloc_r+0x56>
 800df2e:	4f20      	ldr	r7, [pc, #128]	; (800dfb0 <_malloc_r+0xb0>)
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	b923      	cbnz	r3, 800df3e <_malloc_r+0x3e>
 800df34:	4621      	mov	r1, r4
 800df36:	4630      	mov	r0, r6
 800df38:	f000 f996 	bl	800e268 <_sbrk_r>
 800df3c:	6038      	str	r0, [r7, #0]
 800df3e:	4629      	mov	r1, r5
 800df40:	4630      	mov	r0, r6
 800df42:	f000 f991 	bl	800e268 <_sbrk_r>
 800df46:	1c43      	adds	r3, r0, #1
 800df48:	d123      	bne.n	800df92 <_malloc_r+0x92>
 800df4a:	230c      	movs	r3, #12
 800df4c:	6033      	str	r3, [r6, #0]
 800df4e:	4630      	mov	r0, r6
 800df50:	f000 fc40 	bl	800e7d4 <__malloc_unlock>
 800df54:	e7e3      	b.n	800df1e <_malloc_r+0x1e>
 800df56:	6823      	ldr	r3, [r4, #0]
 800df58:	1b5b      	subs	r3, r3, r5
 800df5a:	d417      	bmi.n	800df8c <_malloc_r+0x8c>
 800df5c:	2b0b      	cmp	r3, #11
 800df5e:	d903      	bls.n	800df68 <_malloc_r+0x68>
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	441c      	add	r4, r3
 800df64:	6025      	str	r5, [r4, #0]
 800df66:	e004      	b.n	800df72 <_malloc_r+0x72>
 800df68:	6863      	ldr	r3, [r4, #4]
 800df6a:	42a2      	cmp	r2, r4
 800df6c:	bf0c      	ite	eq
 800df6e:	600b      	streq	r3, [r1, #0]
 800df70:	6053      	strne	r3, [r2, #4]
 800df72:	4630      	mov	r0, r6
 800df74:	f000 fc2e 	bl	800e7d4 <__malloc_unlock>
 800df78:	f104 000b 	add.w	r0, r4, #11
 800df7c:	1d23      	adds	r3, r4, #4
 800df7e:	f020 0007 	bic.w	r0, r0, #7
 800df82:	1ac2      	subs	r2, r0, r3
 800df84:	d0cc      	beq.n	800df20 <_malloc_r+0x20>
 800df86:	1a1b      	subs	r3, r3, r0
 800df88:	50a3      	str	r3, [r4, r2]
 800df8a:	e7c9      	b.n	800df20 <_malloc_r+0x20>
 800df8c:	4622      	mov	r2, r4
 800df8e:	6864      	ldr	r4, [r4, #4]
 800df90:	e7cc      	b.n	800df2c <_malloc_r+0x2c>
 800df92:	1cc4      	adds	r4, r0, #3
 800df94:	f024 0403 	bic.w	r4, r4, #3
 800df98:	42a0      	cmp	r0, r4
 800df9a:	d0e3      	beq.n	800df64 <_malloc_r+0x64>
 800df9c:	1a21      	subs	r1, r4, r0
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f000 f962 	bl	800e268 <_sbrk_r>
 800dfa4:	3001      	adds	r0, #1
 800dfa6:	d1dd      	bne.n	800df64 <_malloc_r+0x64>
 800dfa8:	e7cf      	b.n	800df4a <_malloc_r+0x4a>
 800dfaa:	bf00      	nop
 800dfac:	24000218 	.word	0x24000218
 800dfb0:	2400021c 	.word	0x2400021c

0800dfb4 <__sfputc_r>:
 800dfb4:	6893      	ldr	r3, [r2, #8]
 800dfb6:	3b01      	subs	r3, #1
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	b410      	push	{r4}
 800dfbc:	6093      	str	r3, [r2, #8]
 800dfbe:	da08      	bge.n	800dfd2 <__sfputc_r+0x1e>
 800dfc0:	6994      	ldr	r4, [r2, #24]
 800dfc2:	42a3      	cmp	r3, r4
 800dfc4:	db01      	blt.n	800dfca <__sfputc_r+0x16>
 800dfc6:	290a      	cmp	r1, #10
 800dfc8:	d103      	bne.n	800dfd2 <__sfputc_r+0x1e>
 800dfca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfce:	f000 b99f 	b.w	800e310 <__swbuf_r>
 800dfd2:	6813      	ldr	r3, [r2, #0]
 800dfd4:	1c58      	adds	r0, r3, #1
 800dfd6:	6010      	str	r0, [r2, #0]
 800dfd8:	7019      	strb	r1, [r3, #0]
 800dfda:	4608      	mov	r0, r1
 800dfdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfe0:	4770      	bx	lr

0800dfe2 <__sfputs_r>:
 800dfe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfe4:	4606      	mov	r6, r0
 800dfe6:	460f      	mov	r7, r1
 800dfe8:	4614      	mov	r4, r2
 800dfea:	18d5      	adds	r5, r2, r3
 800dfec:	42ac      	cmp	r4, r5
 800dfee:	d101      	bne.n	800dff4 <__sfputs_r+0x12>
 800dff0:	2000      	movs	r0, #0
 800dff2:	e007      	b.n	800e004 <__sfputs_r+0x22>
 800dff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff8:	463a      	mov	r2, r7
 800dffa:	4630      	mov	r0, r6
 800dffc:	f7ff ffda 	bl	800dfb4 <__sfputc_r>
 800e000:	1c43      	adds	r3, r0, #1
 800e002:	d1f3      	bne.n	800dfec <__sfputs_r+0xa>
 800e004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e008 <_vfiprintf_r>:
 800e008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e00c:	460d      	mov	r5, r1
 800e00e:	b09d      	sub	sp, #116	; 0x74
 800e010:	4614      	mov	r4, r2
 800e012:	4698      	mov	r8, r3
 800e014:	4606      	mov	r6, r0
 800e016:	b118      	cbz	r0, 800e020 <_vfiprintf_r+0x18>
 800e018:	6983      	ldr	r3, [r0, #24]
 800e01a:	b90b      	cbnz	r3, 800e020 <_vfiprintf_r+0x18>
 800e01c:	f7ff fad6 	bl	800d5cc <__sinit>
 800e020:	4b89      	ldr	r3, [pc, #548]	; (800e248 <_vfiprintf_r+0x240>)
 800e022:	429d      	cmp	r5, r3
 800e024:	d11b      	bne.n	800e05e <_vfiprintf_r+0x56>
 800e026:	6875      	ldr	r5, [r6, #4]
 800e028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e02a:	07d9      	lsls	r1, r3, #31
 800e02c:	d405      	bmi.n	800e03a <_vfiprintf_r+0x32>
 800e02e:	89ab      	ldrh	r3, [r5, #12]
 800e030:	059a      	lsls	r2, r3, #22
 800e032:	d402      	bmi.n	800e03a <_vfiprintf_r+0x32>
 800e034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e036:	f7ff fb6c 	bl	800d712 <__retarget_lock_acquire_recursive>
 800e03a:	89ab      	ldrh	r3, [r5, #12]
 800e03c:	071b      	lsls	r3, r3, #28
 800e03e:	d501      	bpl.n	800e044 <_vfiprintf_r+0x3c>
 800e040:	692b      	ldr	r3, [r5, #16]
 800e042:	b9eb      	cbnz	r3, 800e080 <_vfiprintf_r+0x78>
 800e044:	4629      	mov	r1, r5
 800e046:	4630      	mov	r0, r6
 800e048:	f000 f9c6 	bl	800e3d8 <__swsetup_r>
 800e04c:	b1c0      	cbz	r0, 800e080 <_vfiprintf_r+0x78>
 800e04e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e050:	07dc      	lsls	r4, r3, #31
 800e052:	d50e      	bpl.n	800e072 <_vfiprintf_r+0x6a>
 800e054:	f04f 30ff 	mov.w	r0, #4294967295
 800e058:	b01d      	add	sp, #116	; 0x74
 800e05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05e:	4b7b      	ldr	r3, [pc, #492]	; (800e24c <_vfiprintf_r+0x244>)
 800e060:	429d      	cmp	r5, r3
 800e062:	d101      	bne.n	800e068 <_vfiprintf_r+0x60>
 800e064:	68b5      	ldr	r5, [r6, #8]
 800e066:	e7df      	b.n	800e028 <_vfiprintf_r+0x20>
 800e068:	4b79      	ldr	r3, [pc, #484]	; (800e250 <_vfiprintf_r+0x248>)
 800e06a:	429d      	cmp	r5, r3
 800e06c:	bf08      	it	eq
 800e06e:	68f5      	ldreq	r5, [r6, #12]
 800e070:	e7da      	b.n	800e028 <_vfiprintf_r+0x20>
 800e072:	89ab      	ldrh	r3, [r5, #12]
 800e074:	0598      	lsls	r0, r3, #22
 800e076:	d4ed      	bmi.n	800e054 <_vfiprintf_r+0x4c>
 800e078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e07a:	f7ff fb4b 	bl	800d714 <__retarget_lock_release_recursive>
 800e07e:	e7e9      	b.n	800e054 <_vfiprintf_r+0x4c>
 800e080:	2300      	movs	r3, #0
 800e082:	9309      	str	r3, [sp, #36]	; 0x24
 800e084:	2320      	movs	r3, #32
 800e086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e08a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e08e:	2330      	movs	r3, #48	; 0x30
 800e090:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e254 <_vfiprintf_r+0x24c>
 800e094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e098:	f04f 0901 	mov.w	r9, #1
 800e09c:	4623      	mov	r3, r4
 800e09e:	469a      	mov	sl, r3
 800e0a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0a4:	b10a      	cbz	r2, 800e0aa <_vfiprintf_r+0xa2>
 800e0a6:	2a25      	cmp	r2, #37	; 0x25
 800e0a8:	d1f9      	bne.n	800e09e <_vfiprintf_r+0x96>
 800e0aa:	ebba 0b04 	subs.w	fp, sl, r4
 800e0ae:	d00b      	beq.n	800e0c8 <_vfiprintf_r+0xc0>
 800e0b0:	465b      	mov	r3, fp
 800e0b2:	4622      	mov	r2, r4
 800e0b4:	4629      	mov	r1, r5
 800e0b6:	4630      	mov	r0, r6
 800e0b8:	f7ff ff93 	bl	800dfe2 <__sfputs_r>
 800e0bc:	3001      	adds	r0, #1
 800e0be:	f000 80aa 	beq.w	800e216 <_vfiprintf_r+0x20e>
 800e0c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0c4:	445a      	add	r2, fp
 800e0c6:	9209      	str	r2, [sp, #36]	; 0x24
 800e0c8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f000 80a2 	beq.w	800e216 <_vfiprintf_r+0x20e>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e0d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0dc:	f10a 0a01 	add.w	sl, sl, #1
 800e0e0:	9304      	str	r3, [sp, #16]
 800e0e2:	9307      	str	r3, [sp, #28]
 800e0e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0e8:	931a      	str	r3, [sp, #104]	; 0x68
 800e0ea:	4654      	mov	r4, sl
 800e0ec:	2205      	movs	r2, #5
 800e0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f2:	4858      	ldr	r0, [pc, #352]	; (800e254 <_vfiprintf_r+0x24c>)
 800e0f4:	f7f2 f8fc 	bl	80002f0 <memchr>
 800e0f8:	9a04      	ldr	r2, [sp, #16]
 800e0fa:	b9d8      	cbnz	r0, 800e134 <_vfiprintf_r+0x12c>
 800e0fc:	06d1      	lsls	r1, r2, #27
 800e0fe:	bf44      	itt	mi
 800e100:	2320      	movmi	r3, #32
 800e102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e106:	0713      	lsls	r3, r2, #28
 800e108:	bf44      	itt	mi
 800e10a:	232b      	movmi	r3, #43	; 0x2b
 800e10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e110:	f89a 3000 	ldrb.w	r3, [sl]
 800e114:	2b2a      	cmp	r3, #42	; 0x2a
 800e116:	d015      	beq.n	800e144 <_vfiprintf_r+0x13c>
 800e118:	9a07      	ldr	r2, [sp, #28]
 800e11a:	4654      	mov	r4, sl
 800e11c:	2000      	movs	r0, #0
 800e11e:	f04f 0c0a 	mov.w	ip, #10
 800e122:	4621      	mov	r1, r4
 800e124:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e128:	3b30      	subs	r3, #48	; 0x30
 800e12a:	2b09      	cmp	r3, #9
 800e12c:	d94e      	bls.n	800e1cc <_vfiprintf_r+0x1c4>
 800e12e:	b1b0      	cbz	r0, 800e15e <_vfiprintf_r+0x156>
 800e130:	9207      	str	r2, [sp, #28]
 800e132:	e014      	b.n	800e15e <_vfiprintf_r+0x156>
 800e134:	eba0 0308 	sub.w	r3, r0, r8
 800e138:	fa09 f303 	lsl.w	r3, r9, r3
 800e13c:	4313      	orrs	r3, r2
 800e13e:	9304      	str	r3, [sp, #16]
 800e140:	46a2      	mov	sl, r4
 800e142:	e7d2      	b.n	800e0ea <_vfiprintf_r+0xe2>
 800e144:	9b03      	ldr	r3, [sp, #12]
 800e146:	1d19      	adds	r1, r3, #4
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	9103      	str	r1, [sp, #12]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	bfbb      	ittet	lt
 800e150:	425b      	neglt	r3, r3
 800e152:	f042 0202 	orrlt.w	r2, r2, #2
 800e156:	9307      	strge	r3, [sp, #28]
 800e158:	9307      	strlt	r3, [sp, #28]
 800e15a:	bfb8      	it	lt
 800e15c:	9204      	strlt	r2, [sp, #16]
 800e15e:	7823      	ldrb	r3, [r4, #0]
 800e160:	2b2e      	cmp	r3, #46	; 0x2e
 800e162:	d10c      	bne.n	800e17e <_vfiprintf_r+0x176>
 800e164:	7863      	ldrb	r3, [r4, #1]
 800e166:	2b2a      	cmp	r3, #42	; 0x2a
 800e168:	d135      	bne.n	800e1d6 <_vfiprintf_r+0x1ce>
 800e16a:	9b03      	ldr	r3, [sp, #12]
 800e16c:	1d1a      	adds	r2, r3, #4
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	9203      	str	r2, [sp, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	bfb8      	it	lt
 800e176:	f04f 33ff 	movlt.w	r3, #4294967295
 800e17a:	3402      	adds	r4, #2
 800e17c:	9305      	str	r3, [sp, #20]
 800e17e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e264 <_vfiprintf_r+0x25c>
 800e182:	7821      	ldrb	r1, [r4, #0]
 800e184:	2203      	movs	r2, #3
 800e186:	4650      	mov	r0, sl
 800e188:	f7f2 f8b2 	bl	80002f0 <memchr>
 800e18c:	b140      	cbz	r0, 800e1a0 <_vfiprintf_r+0x198>
 800e18e:	2340      	movs	r3, #64	; 0x40
 800e190:	eba0 000a 	sub.w	r0, r0, sl
 800e194:	fa03 f000 	lsl.w	r0, r3, r0
 800e198:	9b04      	ldr	r3, [sp, #16]
 800e19a:	4303      	orrs	r3, r0
 800e19c:	3401      	adds	r4, #1
 800e19e:	9304      	str	r3, [sp, #16]
 800e1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1a4:	482c      	ldr	r0, [pc, #176]	; (800e258 <_vfiprintf_r+0x250>)
 800e1a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1aa:	2206      	movs	r2, #6
 800e1ac:	f7f2 f8a0 	bl	80002f0 <memchr>
 800e1b0:	2800      	cmp	r0, #0
 800e1b2:	d03f      	beq.n	800e234 <_vfiprintf_r+0x22c>
 800e1b4:	4b29      	ldr	r3, [pc, #164]	; (800e25c <_vfiprintf_r+0x254>)
 800e1b6:	bb1b      	cbnz	r3, 800e200 <_vfiprintf_r+0x1f8>
 800e1b8:	9b03      	ldr	r3, [sp, #12]
 800e1ba:	3307      	adds	r3, #7
 800e1bc:	f023 0307 	bic.w	r3, r3, #7
 800e1c0:	3308      	adds	r3, #8
 800e1c2:	9303      	str	r3, [sp, #12]
 800e1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1c6:	443b      	add	r3, r7
 800e1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ca:	e767      	b.n	800e09c <_vfiprintf_r+0x94>
 800e1cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1d0:	460c      	mov	r4, r1
 800e1d2:	2001      	movs	r0, #1
 800e1d4:	e7a5      	b.n	800e122 <_vfiprintf_r+0x11a>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	3401      	adds	r4, #1
 800e1da:	9305      	str	r3, [sp, #20]
 800e1dc:	4619      	mov	r1, r3
 800e1de:	f04f 0c0a 	mov.w	ip, #10
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1e8:	3a30      	subs	r2, #48	; 0x30
 800e1ea:	2a09      	cmp	r2, #9
 800e1ec:	d903      	bls.n	800e1f6 <_vfiprintf_r+0x1ee>
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d0c5      	beq.n	800e17e <_vfiprintf_r+0x176>
 800e1f2:	9105      	str	r1, [sp, #20]
 800e1f4:	e7c3      	b.n	800e17e <_vfiprintf_r+0x176>
 800e1f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	e7f0      	b.n	800e1e2 <_vfiprintf_r+0x1da>
 800e200:	ab03      	add	r3, sp, #12
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	462a      	mov	r2, r5
 800e206:	4b16      	ldr	r3, [pc, #88]	; (800e260 <_vfiprintf_r+0x258>)
 800e208:	a904      	add	r1, sp, #16
 800e20a:	4630      	mov	r0, r6
 800e20c:	f7fd ffac 	bl	800c168 <_printf_float>
 800e210:	4607      	mov	r7, r0
 800e212:	1c78      	adds	r0, r7, #1
 800e214:	d1d6      	bne.n	800e1c4 <_vfiprintf_r+0x1bc>
 800e216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e218:	07d9      	lsls	r1, r3, #31
 800e21a:	d405      	bmi.n	800e228 <_vfiprintf_r+0x220>
 800e21c:	89ab      	ldrh	r3, [r5, #12]
 800e21e:	059a      	lsls	r2, r3, #22
 800e220:	d402      	bmi.n	800e228 <_vfiprintf_r+0x220>
 800e222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e224:	f7ff fa76 	bl	800d714 <__retarget_lock_release_recursive>
 800e228:	89ab      	ldrh	r3, [r5, #12]
 800e22a:	065b      	lsls	r3, r3, #25
 800e22c:	f53f af12 	bmi.w	800e054 <_vfiprintf_r+0x4c>
 800e230:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e232:	e711      	b.n	800e058 <_vfiprintf_r+0x50>
 800e234:	ab03      	add	r3, sp, #12
 800e236:	9300      	str	r3, [sp, #0]
 800e238:	462a      	mov	r2, r5
 800e23a:	4b09      	ldr	r3, [pc, #36]	; (800e260 <_vfiprintf_r+0x258>)
 800e23c:	a904      	add	r1, sp, #16
 800e23e:	4630      	mov	r0, r6
 800e240:	f7fe fa1e 	bl	800c680 <_printf_i>
 800e244:	e7e4      	b.n	800e210 <_vfiprintf_r+0x208>
 800e246:	bf00      	nop
 800e248:	0800ea68 	.word	0x0800ea68
 800e24c:	0800ea88 	.word	0x0800ea88
 800e250:	0800ea48 	.word	0x0800ea48
 800e254:	0800ec04 	.word	0x0800ec04
 800e258:	0800ec0e 	.word	0x0800ec0e
 800e25c:	0800c169 	.word	0x0800c169
 800e260:	0800dfe3 	.word	0x0800dfe3
 800e264:	0800ec0a 	.word	0x0800ec0a

0800e268 <_sbrk_r>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	4d06      	ldr	r5, [pc, #24]	; (800e284 <_sbrk_r+0x1c>)
 800e26c:	2300      	movs	r3, #0
 800e26e:	4604      	mov	r4, r0
 800e270:	4608      	mov	r0, r1
 800e272:	602b      	str	r3, [r5, #0]
 800e274:	f7f3 fc98 	bl	8001ba8 <_sbrk>
 800e278:	1c43      	adds	r3, r0, #1
 800e27a:	d102      	bne.n	800e282 <_sbrk_r+0x1a>
 800e27c:	682b      	ldr	r3, [r5, #0]
 800e27e:	b103      	cbz	r3, 800e282 <_sbrk_r+0x1a>
 800e280:	6023      	str	r3, [r4, #0]
 800e282:	bd38      	pop	{r3, r4, r5, pc}
 800e284:	2400058c 	.word	0x2400058c

0800e288 <__sread>:
 800e288:	b510      	push	{r4, lr}
 800e28a:	460c      	mov	r4, r1
 800e28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e290:	f000 faa6 	bl	800e7e0 <_read_r>
 800e294:	2800      	cmp	r0, #0
 800e296:	bfab      	itete	ge
 800e298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e29a:	89a3      	ldrhlt	r3, [r4, #12]
 800e29c:	181b      	addge	r3, r3, r0
 800e29e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2a2:	bfac      	ite	ge
 800e2a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2a6:	81a3      	strhlt	r3, [r4, #12]
 800e2a8:	bd10      	pop	{r4, pc}

0800e2aa <__swrite>:
 800e2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ae:	461f      	mov	r7, r3
 800e2b0:	898b      	ldrh	r3, [r1, #12]
 800e2b2:	05db      	lsls	r3, r3, #23
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	4616      	mov	r6, r2
 800e2ba:	d505      	bpl.n	800e2c8 <__swrite+0x1e>
 800e2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f000 f9f8 	bl	800e6b8 <_lseek_r>
 800e2c8:	89a3      	ldrh	r3, [r4, #12]
 800e2ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2d2:	81a3      	strh	r3, [r4, #12]
 800e2d4:	4632      	mov	r2, r6
 800e2d6:	463b      	mov	r3, r7
 800e2d8:	4628      	mov	r0, r5
 800e2da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2de:	f000 b869 	b.w	800e3b4 <_write_r>

0800e2e2 <__sseek>:
 800e2e2:	b510      	push	{r4, lr}
 800e2e4:	460c      	mov	r4, r1
 800e2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ea:	f000 f9e5 	bl	800e6b8 <_lseek_r>
 800e2ee:	1c43      	adds	r3, r0, #1
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	bf15      	itete	ne
 800e2f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e2fe:	81a3      	strheq	r3, [r4, #12]
 800e300:	bf18      	it	ne
 800e302:	81a3      	strhne	r3, [r4, #12]
 800e304:	bd10      	pop	{r4, pc}

0800e306 <__sclose>:
 800e306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e30a:	f000 b8f1 	b.w	800e4f0 <_close_r>
	...

0800e310 <__swbuf_r>:
 800e310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e312:	460e      	mov	r6, r1
 800e314:	4614      	mov	r4, r2
 800e316:	4605      	mov	r5, r0
 800e318:	b118      	cbz	r0, 800e322 <__swbuf_r+0x12>
 800e31a:	6983      	ldr	r3, [r0, #24]
 800e31c:	b90b      	cbnz	r3, 800e322 <__swbuf_r+0x12>
 800e31e:	f7ff f955 	bl	800d5cc <__sinit>
 800e322:	4b21      	ldr	r3, [pc, #132]	; (800e3a8 <__swbuf_r+0x98>)
 800e324:	429c      	cmp	r4, r3
 800e326:	d12b      	bne.n	800e380 <__swbuf_r+0x70>
 800e328:	686c      	ldr	r4, [r5, #4]
 800e32a:	69a3      	ldr	r3, [r4, #24]
 800e32c:	60a3      	str	r3, [r4, #8]
 800e32e:	89a3      	ldrh	r3, [r4, #12]
 800e330:	071a      	lsls	r2, r3, #28
 800e332:	d52f      	bpl.n	800e394 <__swbuf_r+0x84>
 800e334:	6923      	ldr	r3, [r4, #16]
 800e336:	b36b      	cbz	r3, 800e394 <__swbuf_r+0x84>
 800e338:	6923      	ldr	r3, [r4, #16]
 800e33a:	6820      	ldr	r0, [r4, #0]
 800e33c:	1ac0      	subs	r0, r0, r3
 800e33e:	6963      	ldr	r3, [r4, #20]
 800e340:	b2f6      	uxtb	r6, r6
 800e342:	4283      	cmp	r3, r0
 800e344:	4637      	mov	r7, r6
 800e346:	dc04      	bgt.n	800e352 <__swbuf_r+0x42>
 800e348:	4621      	mov	r1, r4
 800e34a:	4628      	mov	r0, r5
 800e34c:	f000 f966 	bl	800e61c <_fflush_r>
 800e350:	bb30      	cbnz	r0, 800e3a0 <__swbuf_r+0x90>
 800e352:	68a3      	ldr	r3, [r4, #8]
 800e354:	3b01      	subs	r3, #1
 800e356:	60a3      	str	r3, [r4, #8]
 800e358:	6823      	ldr	r3, [r4, #0]
 800e35a:	1c5a      	adds	r2, r3, #1
 800e35c:	6022      	str	r2, [r4, #0]
 800e35e:	701e      	strb	r6, [r3, #0]
 800e360:	6963      	ldr	r3, [r4, #20]
 800e362:	3001      	adds	r0, #1
 800e364:	4283      	cmp	r3, r0
 800e366:	d004      	beq.n	800e372 <__swbuf_r+0x62>
 800e368:	89a3      	ldrh	r3, [r4, #12]
 800e36a:	07db      	lsls	r3, r3, #31
 800e36c:	d506      	bpl.n	800e37c <__swbuf_r+0x6c>
 800e36e:	2e0a      	cmp	r6, #10
 800e370:	d104      	bne.n	800e37c <__swbuf_r+0x6c>
 800e372:	4621      	mov	r1, r4
 800e374:	4628      	mov	r0, r5
 800e376:	f000 f951 	bl	800e61c <_fflush_r>
 800e37a:	b988      	cbnz	r0, 800e3a0 <__swbuf_r+0x90>
 800e37c:	4638      	mov	r0, r7
 800e37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e380:	4b0a      	ldr	r3, [pc, #40]	; (800e3ac <__swbuf_r+0x9c>)
 800e382:	429c      	cmp	r4, r3
 800e384:	d101      	bne.n	800e38a <__swbuf_r+0x7a>
 800e386:	68ac      	ldr	r4, [r5, #8]
 800e388:	e7cf      	b.n	800e32a <__swbuf_r+0x1a>
 800e38a:	4b09      	ldr	r3, [pc, #36]	; (800e3b0 <__swbuf_r+0xa0>)
 800e38c:	429c      	cmp	r4, r3
 800e38e:	bf08      	it	eq
 800e390:	68ec      	ldreq	r4, [r5, #12]
 800e392:	e7ca      	b.n	800e32a <__swbuf_r+0x1a>
 800e394:	4621      	mov	r1, r4
 800e396:	4628      	mov	r0, r5
 800e398:	f000 f81e 	bl	800e3d8 <__swsetup_r>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d0cb      	beq.n	800e338 <__swbuf_r+0x28>
 800e3a0:	f04f 37ff 	mov.w	r7, #4294967295
 800e3a4:	e7ea      	b.n	800e37c <__swbuf_r+0x6c>
 800e3a6:	bf00      	nop
 800e3a8:	0800ea68 	.word	0x0800ea68
 800e3ac:	0800ea88 	.word	0x0800ea88
 800e3b0:	0800ea48 	.word	0x0800ea48

0800e3b4 <_write_r>:
 800e3b4:	b538      	push	{r3, r4, r5, lr}
 800e3b6:	4d07      	ldr	r5, [pc, #28]	; (800e3d4 <_write_r+0x20>)
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	4608      	mov	r0, r1
 800e3bc:	4611      	mov	r1, r2
 800e3be:	2200      	movs	r2, #0
 800e3c0:	602a      	str	r2, [r5, #0]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	f7f2 fcfc 	bl	8000dc0 <_write>
 800e3c8:	1c43      	adds	r3, r0, #1
 800e3ca:	d102      	bne.n	800e3d2 <_write_r+0x1e>
 800e3cc:	682b      	ldr	r3, [r5, #0]
 800e3ce:	b103      	cbz	r3, 800e3d2 <_write_r+0x1e>
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	bd38      	pop	{r3, r4, r5, pc}
 800e3d4:	2400058c 	.word	0x2400058c

0800e3d8 <__swsetup_r>:
 800e3d8:	4b32      	ldr	r3, [pc, #200]	; (800e4a4 <__swsetup_r+0xcc>)
 800e3da:	b570      	push	{r4, r5, r6, lr}
 800e3dc:	681d      	ldr	r5, [r3, #0]
 800e3de:	4606      	mov	r6, r0
 800e3e0:	460c      	mov	r4, r1
 800e3e2:	b125      	cbz	r5, 800e3ee <__swsetup_r+0x16>
 800e3e4:	69ab      	ldr	r3, [r5, #24]
 800e3e6:	b913      	cbnz	r3, 800e3ee <__swsetup_r+0x16>
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	f7ff f8ef 	bl	800d5cc <__sinit>
 800e3ee:	4b2e      	ldr	r3, [pc, #184]	; (800e4a8 <__swsetup_r+0xd0>)
 800e3f0:	429c      	cmp	r4, r3
 800e3f2:	d10f      	bne.n	800e414 <__swsetup_r+0x3c>
 800e3f4:	686c      	ldr	r4, [r5, #4]
 800e3f6:	89a3      	ldrh	r3, [r4, #12]
 800e3f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3fc:	0719      	lsls	r1, r3, #28
 800e3fe:	d42c      	bmi.n	800e45a <__swsetup_r+0x82>
 800e400:	06dd      	lsls	r5, r3, #27
 800e402:	d411      	bmi.n	800e428 <__swsetup_r+0x50>
 800e404:	2309      	movs	r3, #9
 800e406:	6033      	str	r3, [r6, #0]
 800e408:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e40c:	81a3      	strh	r3, [r4, #12]
 800e40e:	f04f 30ff 	mov.w	r0, #4294967295
 800e412:	e03e      	b.n	800e492 <__swsetup_r+0xba>
 800e414:	4b25      	ldr	r3, [pc, #148]	; (800e4ac <__swsetup_r+0xd4>)
 800e416:	429c      	cmp	r4, r3
 800e418:	d101      	bne.n	800e41e <__swsetup_r+0x46>
 800e41a:	68ac      	ldr	r4, [r5, #8]
 800e41c:	e7eb      	b.n	800e3f6 <__swsetup_r+0x1e>
 800e41e:	4b24      	ldr	r3, [pc, #144]	; (800e4b0 <__swsetup_r+0xd8>)
 800e420:	429c      	cmp	r4, r3
 800e422:	bf08      	it	eq
 800e424:	68ec      	ldreq	r4, [r5, #12]
 800e426:	e7e6      	b.n	800e3f6 <__swsetup_r+0x1e>
 800e428:	0758      	lsls	r0, r3, #29
 800e42a:	d512      	bpl.n	800e452 <__swsetup_r+0x7a>
 800e42c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e42e:	b141      	cbz	r1, 800e442 <__swsetup_r+0x6a>
 800e430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e434:	4299      	cmp	r1, r3
 800e436:	d002      	beq.n	800e43e <__swsetup_r+0x66>
 800e438:	4630      	mov	r0, r6
 800e43a:	f7ff fd11 	bl	800de60 <_free_r>
 800e43e:	2300      	movs	r3, #0
 800e440:	6363      	str	r3, [r4, #52]	; 0x34
 800e442:	89a3      	ldrh	r3, [r4, #12]
 800e444:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e448:	81a3      	strh	r3, [r4, #12]
 800e44a:	2300      	movs	r3, #0
 800e44c:	6063      	str	r3, [r4, #4]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	f043 0308 	orr.w	r3, r3, #8
 800e458:	81a3      	strh	r3, [r4, #12]
 800e45a:	6923      	ldr	r3, [r4, #16]
 800e45c:	b94b      	cbnz	r3, 800e472 <__swsetup_r+0x9a>
 800e45e:	89a3      	ldrh	r3, [r4, #12]
 800e460:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e468:	d003      	beq.n	800e472 <__swsetup_r+0x9a>
 800e46a:	4621      	mov	r1, r4
 800e46c:	4630      	mov	r0, r6
 800e46e:	f000 f959 	bl	800e724 <__smakebuf_r>
 800e472:	89a0      	ldrh	r0, [r4, #12]
 800e474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e478:	f010 0301 	ands.w	r3, r0, #1
 800e47c:	d00a      	beq.n	800e494 <__swsetup_r+0xbc>
 800e47e:	2300      	movs	r3, #0
 800e480:	60a3      	str	r3, [r4, #8]
 800e482:	6963      	ldr	r3, [r4, #20]
 800e484:	425b      	negs	r3, r3
 800e486:	61a3      	str	r3, [r4, #24]
 800e488:	6923      	ldr	r3, [r4, #16]
 800e48a:	b943      	cbnz	r3, 800e49e <__swsetup_r+0xc6>
 800e48c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e490:	d1ba      	bne.n	800e408 <__swsetup_r+0x30>
 800e492:	bd70      	pop	{r4, r5, r6, pc}
 800e494:	0781      	lsls	r1, r0, #30
 800e496:	bf58      	it	pl
 800e498:	6963      	ldrpl	r3, [r4, #20]
 800e49a:	60a3      	str	r3, [r4, #8]
 800e49c:	e7f4      	b.n	800e488 <__swsetup_r+0xb0>
 800e49e:	2000      	movs	r0, #0
 800e4a0:	e7f7      	b.n	800e492 <__swsetup_r+0xba>
 800e4a2:	bf00      	nop
 800e4a4:	2400001c 	.word	0x2400001c
 800e4a8:	0800ea68 	.word	0x0800ea68
 800e4ac:	0800ea88 	.word	0x0800ea88
 800e4b0:	0800ea48 	.word	0x0800ea48

0800e4b4 <__assert_func>:
 800e4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4b6:	4614      	mov	r4, r2
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	4b09      	ldr	r3, [pc, #36]	; (800e4e0 <__assert_func+0x2c>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4605      	mov	r5, r0
 800e4c0:	68d8      	ldr	r0, [r3, #12]
 800e4c2:	b14c      	cbz	r4, 800e4d8 <__assert_func+0x24>
 800e4c4:	4b07      	ldr	r3, [pc, #28]	; (800e4e4 <__assert_func+0x30>)
 800e4c6:	9100      	str	r1, [sp, #0]
 800e4c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e4cc:	4906      	ldr	r1, [pc, #24]	; (800e4e8 <__assert_func+0x34>)
 800e4ce:	462b      	mov	r3, r5
 800e4d0:	f000 f8e0 	bl	800e694 <fiprintf>
 800e4d4:	f000 f9a3 	bl	800e81e <abort>
 800e4d8:	4b04      	ldr	r3, [pc, #16]	; (800e4ec <__assert_func+0x38>)
 800e4da:	461c      	mov	r4, r3
 800e4dc:	e7f3      	b.n	800e4c6 <__assert_func+0x12>
 800e4de:	bf00      	nop
 800e4e0:	2400001c 	.word	0x2400001c
 800e4e4:	0800ec15 	.word	0x0800ec15
 800e4e8:	0800ec22 	.word	0x0800ec22
 800e4ec:	0800ec50 	.word	0x0800ec50

0800e4f0 <_close_r>:
 800e4f0:	b538      	push	{r3, r4, r5, lr}
 800e4f2:	4d06      	ldr	r5, [pc, #24]	; (800e50c <_close_r+0x1c>)
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	4608      	mov	r0, r1
 800e4fa:	602b      	str	r3, [r5, #0]
 800e4fc:	f7f3 fb1f 	bl	8001b3e <_close>
 800e500:	1c43      	adds	r3, r0, #1
 800e502:	d102      	bne.n	800e50a <_close_r+0x1a>
 800e504:	682b      	ldr	r3, [r5, #0]
 800e506:	b103      	cbz	r3, 800e50a <_close_r+0x1a>
 800e508:	6023      	str	r3, [r4, #0]
 800e50a:	bd38      	pop	{r3, r4, r5, pc}
 800e50c:	2400058c 	.word	0x2400058c

0800e510 <__sflush_r>:
 800e510:	898a      	ldrh	r2, [r1, #12]
 800e512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e516:	4605      	mov	r5, r0
 800e518:	0710      	lsls	r0, r2, #28
 800e51a:	460c      	mov	r4, r1
 800e51c:	d458      	bmi.n	800e5d0 <__sflush_r+0xc0>
 800e51e:	684b      	ldr	r3, [r1, #4]
 800e520:	2b00      	cmp	r3, #0
 800e522:	dc05      	bgt.n	800e530 <__sflush_r+0x20>
 800e524:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e526:	2b00      	cmp	r3, #0
 800e528:	dc02      	bgt.n	800e530 <__sflush_r+0x20>
 800e52a:	2000      	movs	r0, #0
 800e52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e532:	2e00      	cmp	r6, #0
 800e534:	d0f9      	beq.n	800e52a <__sflush_r+0x1a>
 800e536:	2300      	movs	r3, #0
 800e538:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e53c:	682f      	ldr	r7, [r5, #0]
 800e53e:	602b      	str	r3, [r5, #0]
 800e540:	d032      	beq.n	800e5a8 <__sflush_r+0x98>
 800e542:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e544:	89a3      	ldrh	r3, [r4, #12]
 800e546:	075a      	lsls	r2, r3, #29
 800e548:	d505      	bpl.n	800e556 <__sflush_r+0x46>
 800e54a:	6863      	ldr	r3, [r4, #4]
 800e54c:	1ac0      	subs	r0, r0, r3
 800e54e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e550:	b10b      	cbz	r3, 800e556 <__sflush_r+0x46>
 800e552:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e554:	1ac0      	subs	r0, r0, r3
 800e556:	2300      	movs	r3, #0
 800e558:	4602      	mov	r2, r0
 800e55a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e55c:	6a21      	ldr	r1, [r4, #32]
 800e55e:	4628      	mov	r0, r5
 800e560:	47b0      	blx	r6
 800e562:	1c43      	adds	r3, r0, #1
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	d106      	bne.n	800e576 <__sflush_r+0x66>
 800e568:	6829      	ldr	r1, [r5, #0]
 800e56a:	291d      	cmp	r1, #29
 800e56c:	d82c      	bhi.n	800e5c8 <__sflush_r+0xb8>
 800e56e:	4a2a      	ldr	r2, [pc, #168]	; (800e618 <__sflush_r+0x108>)
 800e570:	40ca      	lsrs	r2, r1
 800e572:	07d6      	lsls	r6, r2, #31
 800e574:	d528      	bpl.n	800e5c8 <__sflush_r+0xb8>
 800e576:	2200      	movs	r2, #0
 800e578:	6062      	str	r2, [r4, #4]
 800e57a:	04d9      	lsls	r1, r3, #19
 800e57c:	6922      	ldr	r2, [r4, #16]
 800e57e:	6022      	str	r2, [r4, #0]
 800e580:	d504      	bpl.n	800e58c <__sflush_r+0x7c>
 800e582:	1c42      	adds	r2, r0, #1
 800e584:	d101      	bne.n	800e58a <__sflush_r+0x7a>
 800e586:	682b      	ldr	r3, [r5, #0]
 800e588:	b903      	cbnz	r3, 800e58c <__sflush_r+0x7c>
 800e58a:	6560      	str	r0, [r4, #84]	; 0x54
 800e58c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e58e:	602f      	str	r7, [r5, #0]
 800e590:	2900      	cmp	r1, #0
 800e592:	d0ca      	beq.n	800e52a <__sflush_r+0x1a>
 800e594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e598:	4299      	cmp	r1, r3
 800e59a:	d002      	beq.n	800e5a2 <__sflush_r+0x92>
 800e59c:	4628      	mov	r0, r5
 800e59e:	f7ff fc5f 	bl	800de60 <_free_r>
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	6360      	str	r0, [r4, #52]	; 0x34
 800e5a6:	e7c1      	b.n	800e52c <__sflush_r+0x1c>
 800e5a8:	6a21      	ldr	r1, [r4, #32]
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	47b0      	blx	r6
 800e5b0:	1c41      	adds	r1, r0, #1
 800e5b2:	d1c7      	bne.n	800e544 <__sflush_r+0x34>
 800e5b4:	682b      	ldr	r3, [r5, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d0c4      	beq.n	800e544 <__sflush_r+0x34>
 800e5ba:	2b1d      	cmp	r3, #29
 800e5bc:	d001      	beq.n	800e5c2 <__sflush_r+0xb2>
 800e5be:	2b16      	cmp	r3, #22
 800e5c0:	d101      	bne.n	800e5c6 <__sflush_r+0xb6>
 800e5c2:	602f      	str	r7, [r5, #0]
 800e5c4:	e7b1      	b.n	800e52a <__sflush_r+0x1a>
 800e5c6:	89a3      	ldrh	r3, [r4, #12]
 800e5c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5cc:	81a3      	strh	r3, [r4, #12]
 800e5ce:	e7ad      	b.n	800e52c <__sflush_r+0x1c>
 800e5d0:	690f      	ldr	r7, [r1, #16]
 800e5d2:	2f00      	cmp	r7, #0
 800e5d4:	d0a9      	beq.n	800e52a <__sflush_r+0x1a>
 800e5d6:	0793      	lsls	r3, r2, #30
 800e5d8:	680e      	ldr	r6, [r1, #0]
 800e5da:	bf08      	it	eq
 800e5dc:	694b      	ldreq	r3, [r1, #20]
 800e5de:	600f      	str	r7, [r1, #0]
 800e5e0:	bf18      	it	ne
 800e5e2:	2300      	movne	r3, #0
 800e5e4:	eba6 0807 	sub.w	r8, r6, r7
 800e5e8:	608b      	str	r3, [r1, #8]
 800e5ea:	f1b8 0f00 	cmp.w	r8, #0
 800e5ee:	dd9c      	ble.n	800e52a <__sflush_r+0x1a>
 800e5f0:	6a21      	ldr	r1, [r4, #32]
 800e5f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5f4:	4643      	mov	r3, r8
 800e5f6:	463a      	mov	r2, r7
 800e5f8:	4628      	mov	r0, r5
 800e5fa:	47b0      	blx	r6
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	dc06      	bgt.n	800e60e <__sflush_r+0xfe>
 800e600:	89a3      	ldrh	r3, [r4, #12]
 800e602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e606:	81a3      	strh	r3, [r4, #12]
 800e608:	f04f 30ff 	mov.w	r0, #4294967295
 800e60c:	e78e      	b.n	800e52c <__sflush_r+0x1c>
 800e60e:	4407      	add	r7, r0
 800e610:	eba8 0800 	sub.w	r8, r8, r0
 800e614:	e7e9      	b.n	800e5ea <__sflush_r+0xda>
 800e616:	bf00      	nop
 800e618:	20400001 	.word	0x20400001

0800e61c <_fflush_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	690b      	ldr	r3, [r1, #16]
 800e620:	4605      	mov	r5, r0
 800e622:	460c      	mov	r4, r1
 800e624:	b913      	cbnz	r3, 800e62c <_fflush_r+0x10>
 800e626:	2500      	movs	r5, #0
 800e628:	4628      	mov	r0, r5
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	b118      	cbz	r0, 800e636 <_fflush_r+0x1a>
 800e62e:	6983      	ldr	r3, [r0, #24]
 800e630:	b90b      	cbnz	r3, 800e636 <_fflush_r+0x1a>
 800e632:	f7fe ffcb 	bl	800d5cc <__sinit>
 800e636:	4b14      	ldr	r3, [pc, #80]	; (800e688 <_fflush_r+0x6c>)
 800e638:	429c      	cmp	r4, r3
 800e63a:	d11b      	bne.n	800e674 <_fflush_r+0x58>
 800e63c:	686c      	ldr	r4, [r5, #4]
 800e63e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d0ef      	beq.n	800e626 <_fflush_r+0xa>
 800e646:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e648:	07d0      	lsls	r0, r2, #31
 800e64a:	d404      	bmi.n	800e656 <_fflush_r+0x3a>
 800e64c:	0599      	lsls	r1, r3, #22
 800e64e:	d402      	bmi.n	800e656 <_fflush_r+0x3a>
 800e650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e652:	f7ff f85e 	bl	800d712 <__retarget_lock_acquire_recursive>
 800e656:	4628      	mov	r0, r5
 800e658:	4621      	mov	r1, r4
 800e65a:	f7ff ff59 	bl	800e510 <__sflush_r>
 800e65e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e660:	07da      	lsls	r2, r3, #31
 800e662:	4605      	mov	r5, r0
 800e664:	d4e0      	bmi.n	800e628 <_fflush_r+0xc>
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	059b      	lsls	r3, r3, #22
 800e66a:	d4dd      	bmi.n	800e628 <_fflush_r+0xc>
 800e66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e66e:	f7ff f851 	bl	800d714 <__retarget_lock_release_recursive>
 800e672:	e7d9      	b.n	800e628 <_fflush_r+0xc>
 800e674:	4b05      	ldr	r3, [pc, #20]	; (800e68c <_fflush_r+0x70>)
 800e676:	429c      	cmp	r4, r3
 800e678:	d101      	bne.n	800e67e <_fflush_r+0x62>
 800e67a:	68ac      	ldr	r4, [r5, #8]
 800e67c:	e7df      	b.n	800e63e <_fflush_r+0x22>
 800e67e:	4b04      	ldr	r3, [pc, #16]	; (800e690 <_fflush_r+0x74>)
 800e680:	429c      	cmp	r4, r3
 800e682:	bf08      	it	eq
 800e684:	68ec      	ldreq	r4, [r5, #12]
 800e686:	e7da      	b.n	800e63e <_fflush_r+0x22>
 800e688:	0800ea68 	.word	0x0800ea68
 800e68c:	0800ea88 	.word	0x0800ea88
 800e690:	0800ea48 	.word	0x0800ea48

0800e694 <fiprintf>:
 800e694:	b40e      	push	{r1, r2, r3}
 800e696:	b503      	push	{r0, r1, lr}
 800e698:	4601      	mov	r1, r0
 800e69a:	ab03      	add	r3, sp, #12
 800e69c:	4805      	ldr	r0, [pc, #20]	; (800e6b4 <fiprintf+0x20>)
 800e69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6a2:	6800      	ldr	r0, [r0, #0]
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	f7ff fcaf 	bl	800e008 <_vfiprintf_r>
 800e6aa:	b002      	add	sp, #8
 800e6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6b0:	b003      	add	sp, #12
 800e6b2:	4770      	bx	lr
 800e6b4:	2400001c 	.word	0x2400001c

0800e6b8 <_lseek_r>:
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4d07      	ldr	r5, [pc, #28]	; (800e6d8 <_lseek_r+0x20>)
 800e6bc:	4604      	mov	r4, r0
 800e6be:	4608      	mov	r0, r1
 800e6c0:	4611      	mov	r1, r2
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	602a      	str	r2, [r5, #0]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	f7f3 fa60 	bl	8001b8c <_lseek>
 800e6cc:	1c43      	adds	r3, r0, #1
 800e6ce:	d102      	bne.n	800e6d6 <_lseek_r+0x1e>
 800e6d0:	682b      	ldr	r3, [r5, #0]
 800e6d2:	b103      	cbz	r3, 800e6d6 <_lseek_r+0x1e>
 800e6d4:	6023      	str	r3, [r4, #0]
 800e6d6:	bd38      	pop	{r3, r4, r5, pc}
 800e6d8:	2400058c 	.word	0x2400058c

0800e6dc <__swhatbuf_r>:
 800e6dc:	b570      	push	{r4, r5, r6, lr}
 800e6de:	460e      	mov	r6, r1
 800e6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e4:	2900      	cmp	r1, #0
 800e6e6:	b096      	sub	sp, #88	; 0x58
 800e6e8:	4614      	mov	r4, r2
 800e6ea:	461d      	mov	r5, r3
 800e6ec:	da07      	bge.n	800e6fe <__swhatbuf_r+0x22>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	602b      	str	r3, [r5, #0]
 800e6f2:	89b3      	ldrh	r3, [r6, #12]
 800e6f4:	061a      	lsls	r2, r3, #24
 800e6f6:	d410      	bmi.n	800e71a <__swhatbuf_r+0x3e>
 800e6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6fc:	e00e      	b.n	800e71c <__swhatbuf_r+0x40>
 800e6fe:	466a      	mov	r2, sp
 800e700:	f000 f894 	bl	800e82c <_fstat_r>
 800e704:	2800      	cmp	r0, #0
 800e706:	dbf2      	blt.n	800e6ee <__swhatbuf_r+0x12>
 800e708:	9a01      	ldr	r2, [sp, #4]
 800e70a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e70e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e712:	425a      	negs	r2, r3
 800e714:	415a      	adcs	r2, r3
 800e716:	602a      	str	r2, [r5, #0]
 800e718:	e7ee      	b.n	800e6f8 <__swhatbuf_r+0x1c>
 800e71a:	2340      	movs	r3, #64	; 0x40
 800e71c:	2000      	movs	r0, #0
 800e71e:	6023      	str	r3, [r4, #0]
 800e720:	b016      	add	sp, #88	; 0x58
 800e722:	bd70      	pop	{r4, r5, r6, pc}

0800e724 <__smakebuf_r>:
 800e724:	898b      	ldrh	r3, [r1, #12]
 800e726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e728:	079d      	lsls	r5, r3, #30
 800e72a:	4606      	mov	r6, r0
 800e72c:	460c      	mov	r4, r1
 800e72e:	d507      	bpl.n	800e740 <__smakebuf_r+0x1c>
 800e730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	6123      	str	r3, [r4, #16]
 800e738:	2301      	movs	r3, #1
 800e73a:	6163      	str	r3, [r4, #20]
 800e73c:	b002      	add	sp, #8
 800e73e:	bd70      	pop	{r4, r5, r6, pc}
 800e740:	ab01      	add	r3, sp, #4
 800e742:	466a      	mov	r2, sp
 800e744:	f7ff ffca 	bl	800e6dc <__swhatbuf_r>
 800e748:	9900      	ldr	r1, [sp, #0]
 800e74a:	4605      	mov	r5, r0
 800e74c:	4630      	mov	r0, r6
 800e74e:	f7ff fbd7 	bl	800df00 <_malloc_r>
 800e752:	b948      	cbnz	r0, 800e768 <__smakebuf_r+0x44>
 800e754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e758:	059a      	lsls	r2, r3, #22
 800e75a:	d4ef      	bmi.n	800e73c <__smakebuf_r+0x18>
 800e75c:	f023 0303 	bic.w	r3, r3, #3
 800e760:	f043 0302 	orr.w	r3, r3, #2
 800e764:	81a3      	strh	r3, [r4, #12]
 800e766:	e7e3      	b.n	800e730 <__smakebuf_r+0xc>
 800e768:	4b0d      	ldr	r3, [pc, #52]	; (800e7a0 <__smakebuf_r+0x7c>)
 800e76a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	6020      	str	r0, [r4, #0]
 800e770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e774:	81a3      	strh	r3, [r4, #12]
 800e776:	9b00      	ldr	r3, [sp, #0]
 800e778:	6163      	str	r3, [r4, #20]
 800e77a:	9b01      	ldr	r3, [sp, #4]
 800e77c:	6120      	str	r0, [r4, #16]
 800e77e:	b15b      	cbz	r3, 800e798 <__smakebuf_r+0x74>
 800e780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e784:	4630      	mov	r0, r6
 800e786:	f000 f863 	bl	800e850 <_isatty_r>
 800e78a:	b128      	cbz	r0, 800e798 <__smakebuf_r+0x74>
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	f023 0303 	bic.w	r3, r3, #3
 800e792:	f043 0301 	orr.w	r3, r3, #1
 800e796:	81a3      	strh	r3, [r4, #12]
 800e798:	89a0      	ldrh	r0, [r4, #12]
 800e79a:	4305      	orrs	r5, r0
 800e79c:	81a5      	strh	r5, [r4, #12]
 800e79e:	e7cd      	b.n	800e73c <__smakebuf_r+0x18>
 800e7a0:	0800d565 	.word	0x0800d565

0800e7a4 <__ascii_mbtowc>:
 800e7a4:	b082      	sub	sp, #8
 800e7a6:	b901      	cbnz	r1, 800e7aa <__ascii_mbtowc+0x6>
 800e7a8:	a901      	add	r1, sp, #4
 800e7aa:	b142      	cbz	r2, 800e7be <__ascii_mbtowc+0x1a>
 800e7ac:	b14b      	cbz	r3, 800e7c2 <__ascii_mbtowc+0x1e>
 800e7ae:	7813      	ldrb	r3, [r2, #0]
 800e7b0:	600b      	str	r3, [r1, #0]
 800e7b2:	7812      	ldrb	r2, [r2, #0]
 800e7b4:	1e10      	subs	r0, r2, #0
 800e7b6:	bf18      	it	ne
 800e7b8:	2001      	movne	r0, #1
 800e7ba:	b002      	add	sp, #8
 800e7bc:	4770      	bx	lr
 800e7be:	4610      	mov	r0, r2
 800e7c0:	e7fb      	b.n	800e7ba <__ascii_mbtowc+0x16>
 800e7c2:	f06f 0001 	mvn.w	r0, #1
 800e7c6:	e7f8      	b.n	800e7ba <__ascii_mbtowc+0x16>

0800e7c8 <__malloc_lock>:
 800e7c8:	4801      	ldr	r0, [pc, #4]	; (800e7d0 <__malloc_lock+0x8>)
 800e7ca:	f7fe bfa2 	b.w	800d712 <__retarget_lock_acquire_recursive>
 800e7ce:	bf00      	nop
 800e7d0:	24000584 	.word	0x24000584

0800e7d4 <__malloc_unlock>:
 800e7d4:	4801      	ldr	r0, [pc, #4]	; (800e7dc <__malloc_unlock+0x8>)
 800e7d6:	f7fe bf9d 	b.w	800d714 <__retarget_lock_release_recursive>
 800e7da:	bf00      	nop
 800e7dc:	24000584 	.word	0x24000584

0800e7e0 <_read_r>:
 800e7e0:	b538      	push	{r3, r4, r5, lr}
 800e7e2:	4d07      	ldr	r5, [pc, #28]	; (800e800 <_read_r+0x20>)
 800e7e4:	4604      	mov	r4, r0
 800e7e6:	4608      	mov	r0, r1
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	602a      	str	r2, [r5, #0]
 800e7ee:	461a      	mov	r2, r3
 800e7f0:	f7f3 f988 	bl	8001b04 <_read>
 800e7f4:	1c43      	adds	r3, r0, #1
 800e7f6:	d102      	bne.n	800e7fe <_read_r+0x1e>
 800e7f8:	682b      	ldr	r3, [r5, #0]
 800e7fa:	b103      	cbz	r3, 800e7fe <_read_r+0x1e>
 800e7fc:	6023      	str	r3, [r4, #0]
 800e7fe:	bd38      	pop	{r3, r4, r5, pc}
 800e800:	2400058c 	.word	0x2400058c

0800e804 <__ascii_wctomb>:
 800e804:	b149      	cbz	r1, 800e81a <__ascii_wctomb+0x16>
 800e806:	2aff      	cmp	r2, #255	; 0xff
 800e808:	bf85      	ittet	hi
 800e80a:	238a      	movhi	r3, #138	; 0x8a
 800e80c:	6003      	strhi	r3, [r0, #0]
 800e80e:	700a      	strbls	r2, [r1, #0]
 800e810:	f04f 30ff 	movhi.w	r0, #4294967295
 800e814:	bf98      	it	ls
 800e816:	2001      	movls	r0, #1
 800e818:	4770      	bx	lr
 800e81a:	4608      	mov	r0, r1
 800e81c:	4770      	bx	lr

0800e81e <abort>:
 800e81e:	b508      	push	{r3, lr}
 800e820:	2006      	movs	r0, #6
 800e822:	f000 f84d 	bl	800e8c0 <raise>
 800e826:	2001      	movs	r0, #1
 800e828:	f7f3 f962 	bl	8001af0 <_exit>

0800e82c <_fstat_r>:
 800e82c:	b538      	push	{r3, r4, r5, lr}
 800e82e:	4d07      	ldr	r5, [pc, #28]	; (800e84c <_fstat_r+0x20>)
 800e830:	2300      	movs	r3, #0
 800e832:	4604      	mov	r4, r0
 800e834:	4608      	mov	r0, r1
 800e836:	4611      	mov	r1, r2
 800e838:	602b      	str	r3, [r5, #0]
 800e83a:	f7f3 f98c 	bl	8001b56 <_fstat>
 800e83e:	1c43      	adds	r3, r0, #1
 800e840:	d102      	bne.n	800e848 <_fstat_r+0x1c>
 800e842:	682b      	ldr	r3, [r5, #0]
 800e844:	b103      	cbz	r3, 800e848 <_fstat_r+0x1c>
 800e846:	6023      	str	r3, [r4, #0]
 800e848:	bd38      	pop	{r3, r4, r5, pc}
 800e84a:	bf00      	nop
 800e84c:	2400058c 	.word	0x2400058c

0800e850 <_isatty_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4d06      	ldr	r5, [pc, #24]	; (800e86c <_isatty_r+0x1c>)
 800e854:	2300      	movs	r3, #0
 800e856:	4604      	mov	r4, r0
 800e858:	4608      	mov	r0, r1
 800e85a:	602b      	str	r3, [r5, #0]
 800e85c:	f7f3 f98b 	bl	8001b76 <_isatty>
 800e860:	1c43      	adds	r3, r0, #1
 800e862:	d102      	bne.n	800e86a <_isatty_r+0x1a>
 800e864:	682b      	ldr	r3, [r5, #0]
 800e866:	b103      	cbz	r3, 800e86a <_isatty_r+0x1a>
 800e868:	6023      	str	r3, [r4, #0]
 800e86a:	bd38      	pop	{r3, r4, r5, pc}
 800e86c:	2400058c 	.word	0x2400058c

0800e870 <_raise_r>:
 800e870:	291f      	cmp	r1, #31
 800e872:	b538      	push	{r3, r4, r5, lr}
 800e874:	4604      	mov	r4, r0
 800e876:	460d      	mov	r5, r1
 800e878:	d904      	bls.n	800e884 <_raise_r+0x14>
 800e87a:	2316      	movs	r3, #22
 800e87c:	6003      	str	r3, [r0, #0]
 800e87e:	f04f 30ff 	mov.w	r0, #4294967295
 800e882:	bd38      	pop	{r3, r4, r5, pc}
 800e884:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e886:	b112      	cbz	r2, 800e88e <_raise_r+0x1e>
 800e888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e88c:	b94b      	cbnz	r3, 800e8a2 <_raise_r+0x32>
 800e88e:	4620      	mov	r0, r4
 800e890:	f000 f830 	bl	800e8f4 <_getpid_r>
 800e894:	462a      	mov	r2, r5
 800e896:	4601      	mov	r1, r0
 800e898:	4620      	mov	r0, r4
 800e89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e89e:	f000 b817 	b.w	800e8d0 <_kill_r>
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d00a      	beq.n	800e8bc <_raise_r+0x4c>
 800e8a6:	1c59      	adds	r1, r3, #1
 800e8a8:	d103      	bne.n	800e8b2 <_raise_r+0x42>
 800e8aa:	2316      	movs	r3, #22
 800e8ac:	6003      	str	r3, [r0, #0]
 800e8ae:	2001      	movs	r0, #1
 800e8b0:	e7e7      	b.n	800e882 <_raise_r+0x12>
 800e8b2:	2400      	movs	r4, #0
 800e8b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	4798      	blx	r3
 800e8bc:	2000      	movs	r0, #0
 800e8be:	e7e0      	b.n	800e882 <_raise_r+0x12>

0800e8c0 <raise>:
 800e8c0:	4b02      	ldr	r3, [pc, #8]	; (800e8cc <raise+0xc>)
 800e8c2:	4601      	mov	r1, r0
 800e8c4:	6818      	ldr	r0, [r3, #0]
 800e8c6:	f7ff bfd3 	b.w	800e870 <_raise_r>
 800e8ca:	bf00      	nop
 800e8cc:	2400001c 	.word	0x2400001c

0800e8d0 <_kill_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4d07      	ldr	r5, [pc, #28]	; (800e8f0 <_kill_r+0x20>)
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	4611      	mov	r1, r2
 800e8dc:	602b      	str	r3, [r5, #0]
 800e8de:	f7f3 f8f7 	bl	8001ad0 <_kill>
 800e8e2:	1c43      	adds	r3, r0, #1
 800e8e4:	d102      	bne.n	800e8ec <_kill_r+0x1c>
 800e8e6:	682b      	ldr	r3, [r5, #0]
 800e8e8:	b103      	cbz	r3, 800e8ec <_kill_r+0x1c>
 800e8ea:	6023      	str	r3, [r4, #0]
 800e8ec:	bd38      	pop	{r3, r4, r5, pc}
 800e8ee:	bf00      	nop
 800e8f0:	2400058c 	.word	0x2400058c

0800e8f4 <_getpid_r>:
 800e8f4:	f7f3 b8e4 	b.w	8001ac0 <_getpid>

0800e8f8 <_init>:
 800e8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8fa:	bf00      	nop
 800e8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8fe:	bc08      	pop	{r3}
 800e900:	469e      	mov	lr, r3
 800e902:	4770      	bx	lr

0800e904 <_fini>:
 800e904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e906:	bf00      	nop
 800e908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e90a:	bc08      	pop	{r3}
 800e90c:	469e      	mov	lr, r3
 800e90e:	4770      	bx	lr
