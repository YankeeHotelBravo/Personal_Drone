
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd10  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800ffb0  0800ffb0  0001ffb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010414  08010414  00020414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801041c  0801041c  0002041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010420  08010420  00020420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001ec  24000000  08010424  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000039c  240001ec  08010610  000301ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000588  08010610  00030588  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029659  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f42  00000000  00000000  00059873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001728  00000000  00000000  0005d7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001638  00000000  00000000  0005eee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000390c4  00000000  00000000  00060518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d9c5  00000000  00000000  000995dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168134  00000000  00000000  000b6fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021f0d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007164  00000000  00000000  0021f128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001ec 	.word	0x240001ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ff98 	.word	0x0800ff98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f0 	.word	0x240001f0
 80002dc:	0800ff98 	.word	0x0800ff98

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15f;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af04      	add	r7, sp, #16
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	4608      	mov	r0, r1
 8000692:	4611      	mov	r1, r2
 8000694:	461a      	mov	r2, r3
 8000696:	4603      	mov	r3, r0
 8000698:	70fb      	strb	r3, [r7, #3]
 800069a:	460b      	mov	r3, r1
 800069c:	70bb      	strb	r3, [r7, #2]
 800069e:	4613      	mov	r3, r2
 80006a0:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d81b      	bhi.n	80006e0 <MPU9250_Init+0x58>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <MPU9250_Init+0x28>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d1 	.word	0x080006d1
 80006bc:	080006d9 	.word	0x080006d9
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80006c0:	4b5d      	ldr	r3, [pc, #372]	; (8000838 <MPU9250_Init+0x1b0>)
 80006c2:	4a5e      	ldr	r2, [pc, #376]	; (800083c <MPU9250_Init+0x1b4>)
 80006c4:	601a      	str	r2, [r3, #0]
		break;
 80006c6:	e00c      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80006c8:	4b5b      	ldr	r3, [pc, #364]	; (8000838 <MPU9250_Init+0x1b0>)
 80006ca:	4a5d      	ldr	r2, [pc, #372]	; (8000840 <MPU9250_Init+0x1b8>)
 80006cc:	601a      	str	r2, [r3, #0]
		break;
 80006ce:	e008      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80006d0:	4b59      	ldr	r3, [pc, #356]	; (8000838 <MPU9250_Init+0x1b0>)
 80006d2:	4a5c      	ldr	r2, [pc, #368]	; (8000844 <MPU9250_Init+0x1bc>)
 80006d4:	601a      	str	r2, [r3, #0]
		break;
 80006d6:	e004      	b.n	80006e2 <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80006d8:	4b57      	ldr	r3, [pc, #348]	; (8000838 <MPU9250_Init+0x1b0>)
 80006da:	4a5b      	ldr	r2, [pc, #364]	; (8000848 <MPU9250_Init+0x1c0>)
 80006dc:	601a      	str	r2, [r3, #0]
		break;
 80006de:	e000      	b.n	80006e2 <MPU9250_Init+0x5a>
	default:
		break;
 80006e0:	bf00      	nop
	}

	switch(Acc_FS)
 80006e2:	78bb      	ldrb	r3, [r7, #2]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81f      	bhi.n	8000728 <MPU9250_Init+0xa0>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <MPU9250_Init+0x68>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	0800070b 	.word	0x0800070b
 80006f8:	08000715 	.word	0x08000715
 80006fc:	0800071f 	.word	0x0800071f
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000700:	4b52      	ldr	r3, [pc, #328]	; (800084c <MPU9250_Init+0x1c4>)
 8000702:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000706:	601a      	str	r2, [r3, #0]
		break;
 8000708:	e00f      	b.n	800072a <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 800070a:	4b50      	ldr	r3, [pc, #320]	; (800084c <MPU9250_Init+0x1c4>)
 800070c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000710:	601a      	str	r2, [r3, #0]
		break;
 8000712:	e00a      	b.n	800072a <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 8000714:	4b4d      	ldr	r3, [pc, #308]	; (800084c <MPU9250_Init+0x1c4>)
 8000716:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800071a:	601a      	str	r2, [r3, #0]
		break;
 800071c:	e005      	b.n	800072a <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 800071e:	4b4b      	ldr	r3, [pc, #300]	; (800084c <MPU9250_Init+0x1c4>)
 8000720:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8000724:	601a      	str	r2, [r3, #0]
		break;
 8000726:	e000      	b.n	800072a <MPU9250_Init+0xa2>
	default:
		break;
 8000728:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 800072a:	2364      	movs	r3, #100	; 0x64
 800072c:	9302      	str	r3, [sp, #8]
 800072e:	2301      	movs	r3, #1
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	4b47      	ldr	r3, [pc, #284]	; (8000850 <MPU9250_Init+0x1c8>)
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2301      	movs	r3, #1
 8000738:	2275      	movs	r2, #117	; 0x75
 800073a:	21d0      	movs	r1, #208	; 0xd0
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f005 fac3 	bl	8005cc8 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 8000742:	4b43      	ldr	r3, [pc, #268]	; (8000850 <MPU9250_Init+0x1c8>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b71      	cmp	r3, #113	; 0x71
 8000748:	d171      	bne.n	800082e <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <MPU9250_Init+0x1cc>)
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	9302      	str	r3, [sp, #8]
 8000754:	2301      	movs	r3, #1
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <MPU9250_Init+0x1cc>)
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	2219      	movs	r2, #25
 8000760:	21d0      	movs	r1, #208	; 0xd0
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f005 f99c 	bl	8005aa0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000768:	200a      	movs	r0, #10
 800076a:	f001 ff91 	bl	8002690 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 800076e:	4a39      	ldr	r2, [pc, #228]	; (8000854 <MPU9250_Init+0x1cc>)
 8000770:	787b      	ldrb	r3, [r7, #1]
 8000772:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000774:	2364      	movs	r3, #100	; 0x64
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2301      	movs	r3, #1
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <MPU9250_Init+0x1cc>)
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	221a      	movs	r2, #26
 8000784:	21d0      	movs	r1, #208	; 0xd0
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f005 f98a 	bl	8005aa0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800078c:	200a      	movs	r0, #10
 800078e:	f001 ff7f 	bl	8002690 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	00db      	lsls	r3, r3, #3
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MPU9250_Init+0x1cc>)
 800079a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 800079c:	2364      	movs	r3, #100	; 0x64
 800079e:	9302      	str	r3, [sp, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	9301      	str	r3, [sp, #4]
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <MPU9250_Init+0x1cc>)
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	221b      	movs	r2, #27
 80007ac:	21d0      	movs	r1, #208	; 0xd0
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f005 f976 	bl	8005aa0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007b4:	200a      	movs	r0, #10
 80007b6:	f001 ff6b 	bl	8002690 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80007ba:	78bb      	ldrb	r3, [r7, #2]
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MPU9250_Init+0x1cc>)
 80007c2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9302      	str	r3, [sp, #8]
 80007c8:	2301      	movs	r3, #1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MPU9250_Init+0x1cc>)
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2301      	movs	r3, #1
 80007d2:	221c      	movs	r2, #28
 80007d4:	21d0      	movs	r1, #208	; 0xd0
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f005 f962 	bl	8005aa0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80007dc:	200a      	movs	r0, #10
 80007de:	f001 ff57 	bl	8002690 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MPU9250_Init+0x1cc>)
 80007e4:	7c3b      	ldrb	r3, [r7, #16]
 80007e6:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	9302      	str	r3, [sp, #8]
 80007ec:	2301      	movs	r3, #1
 80007ee:	9301      	str	r3, [sp, #4]
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <MPU9250_Init+0x1cc>)
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2301      	movs	r3, #1
 80007f6:	221d      	movs	r2, #29
 80007f8:	21d0      	movs	r1, #208	; 0xd0
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f005 f950 	bl	8005aa0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f001 ff45 	bl	8002690 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MPU9250_Init+0x1cc>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800080c:	2364      	movs	r3, #100	; 0x64
 800080e:	9302      	str	r3, [sp, #8]
 8000810:	2301      	movs	r3, #1
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MPU9250_Init+0x1cc>)
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	226b      	movs	r2, #107	; 0x6b
 800081c:	21d0      	movs	r1, #208	; 0xd0
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f005 f93e 	bl	8005aa0 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000824:	200a      	movs	r0, #10
 8000826:	f001 ff33 	bl	8002690 <HAL_Delay>

		return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <MPU9250_Init+0x1a8>
	}
	else
	{
		return 0;
 800082e:	2300      	movs	r3, #0
	}
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	24000000 	.word	0x24000000
 800083c:	43030000 	.word	0x43030000
 8000840:	42830000 	.word	0x42830000
 8000844:	42033333 	.word	0x42033333
 8000848:	41833333 	.word	0x41833333
 800084c:	24000004 	.word	0x24000004
 8000850:	24000289 	.word	0x24000289
 8000854:	2400021d 	.word	0x2400021d

08000858 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af04      	add	r7, sp, #16
 800085e:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	9302      	str	r3, [sp, #8]
 800086a:	2301      	movs	r3, #1
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	226a      	movs	r2, #106	; 0x6a
 8000876:	21d0      	movs	r1, #208	; 0xd0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f005 f911 	bl	8005aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800087e:	200a      	movs	r0, #10
 8000880:	f001 ff06 	bl	8002690 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000886:	2202      	movs	r2, #2
 8000888:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MPU9250_Bypass+0x58>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2301      	movs	r3, #1
 8000898:	2237      	movs	r2, #55	; 0x37
 800089a:	21d0      	movs	r1, #208	; 0xd0
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f005 f8ff 	bl	8005aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008a2:	200a      	movs	r0, #10
 80008a4:	f001 fef4 	bl	8002690 <HAL_Delay>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2400021d 	.word	0x2400021d

080008b4 <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af04      	add	r7, sp, #16
 80008ba:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <MPU9250_Master+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 80008c2:	2364      	movs	r3, #100	; 0x64
 80008c4:	9302      	str	r3, [sp, #8]
 80008c6:	2301      	movs	r3, #1
 80008c8:	9301      	str	r3, [sp, #4]
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MPU9250_Master+0xa0>)
 80008cc:	9300      	str	r3, [sp, #0]
 80008ce:	2301      	movs	r3, #1
 80008d0:	2237      	movs	r2, #55	; 0x37
 80008d2:	21d0      	movs	r1, #208	; 0xd0
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f005 f8e3 	bl	8005aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008da:	200a      	movs	r0, #10
 80008dc:	f001 fed8 	bl	8002690 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 80008e0:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MPU9250_Master+0xa0>)
 80008e2:	2220      	movs	r2, #32
 80008e4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 80008e6:	2364      	movs	r3, #100	; 0x64
 80008e8:	9302      	str	r3, [sp, #8]
 80008ea:	2301      	movs	r3, #1
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MPU9250_Master+0xa0>)
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2301      	movs	r3, #1
 80008f4:	226a      	movs	r2, #106	; 0x6a
 80008f6:	21d0      	movs	r1, #208	; 0xd0
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f005 f8d1 	bl	8005aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 80008fe:	200a      	movs	r0, #10
 8000900:	f001 fec6 	bl	8002690 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MPU9250_Master+0xa0>)
 8000906:	220d      	movs	r2, #13
 8000908:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	9302      	str	r3, [sp, #8]
 800090e:	2301      	movs	r3, #1
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MPU9250_Master+0xa0>)
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2301      	movs	r3, #1
 8000918:	2224      	movs	r2, #36	; 0x24
 800091a:	21d0      	movs	r1, #208	; 0xd0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f005 f8bf 	bl	8005aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000922:	200a      	movs	r0, #10
 8000924:	f001 feb4 	bl	8002690 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MPU9250_Master+0xa0>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	9302      	str	r3, [sp, #8]
 8000932:	2301      	movs	r3, #1
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MPU9250_Master+0xa0>)
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2301      	movs	r3, #1
 800093c:	226b      	movs	r2, #107	; 0x6b
 800093e:	21d0      	movs	r1, #208	; 0xd0
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f005 f8ad 	bl	8005aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000946:	200a      	movs	r0, #10
 8000948:	f001 fea2 	bl	8002690 <HAL_Delay>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2400021d 	.word	0x2400021d

08000958 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *Datastruct)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af04      	add	r7, sp, #16
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000962:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000964:	2216      	movs	r2, #22
 8000966:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000968:	2364      	movs	r3, #100	; 0x64
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	2301      	movs	r3, #1
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MPU9250_AK8963_Setup+0xa0>)
 8000972:	9300      	str	r3, [sp, #0]
 8000974:	2301      	movs	r3, #1
 8000976:	220a      	movs	r2, #10
 8000978:	2118      	movs	r1, #24
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f005 f890 	bl	8005aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000980:	200a      	movs	r0, #10
 8000982:	f001 fe85 	bl	8002690 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000986:	2364      	movs	r3, #100	; 0x64
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	2303      	movs	r3, #3
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	2301      	movs	r3, #1
 8000994:	2210      	movs	r2, #16
 8000996:	2118      	movs	r1, #24
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f005 f995 	bl	8005cc8 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 800099e:	200a      	movs	r0, #10
 80009a0:	f001 fe76 	bl	8002690 <HAL_Delay>

	Datastruct->ASAX = MPU9250_rx_buf[0];
 80009a4:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	Datastruct->ASAY = MPU9250_rx_buf[1];
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009b0:	785a      	ldrb	r2, [r3, #1]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Datastruct->ASAZ = MPU9250_rx_buf[2];
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MPU9250_AK8963_Setup+0xa4>)
 80009ba:	789a      	ldrb	r2, [r3, #2]
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 80009c2:	2364      	movs	r3, #100	; 0x64
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	2303      	movs	r3, #3
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	2200      	movs	r2, #0
 80009d2:	2118      	movs	r1, #24
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f005 f977 	bl	8005cc8 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 80009da:	200a      	movs	r0, #10
 80009dc:	f001 fe58 	bl	8002690 <HAL_Delay>

	if(AK8963_WAI == 0b01001000)
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <MPU9250_AK8963_Setup+0xa8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b48      	cmp	r3, #72	; 0x48
 80009e6:	d101      	bne.n	80009ec <MPU9250_AK8963_Setup+0x94>
	{
		return 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e000      	b.n	80009ee <MPU9250_AK8963_Setup+0x96>
	}
	else return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2400021d 	.word	0x2400021d
 80009fc:	2400028c 	.word	0x2400028c
 8000a00:	24000288 	.word	0x24000288

08000a04 <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af04      	add	r7, sp, #16
 8000a0a:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a0e:	228c      	movs	r2, #140	; 0x8c
 8000a10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000a12:	2364      	movs	r3, #100	; 0x64
 8000a14:	9302      	str	r3, [sp, #8]
 8000a16:	2301      	movs	r3, #1
 8000a18:	9301      	str	r3, [sp, #4]
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2301      	movs	r3, #1
 8000a20:	2225      	movs	r2, #37	; 0x25
 8000a22:	21d0      	movs	r1, #208	; 0xd0
 8000a24:	6878      	ldr	r0, [r7, #4]
 8000a26:	f005 f83b 	bl	8005aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f001 fe30 	bl	8002690 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000a36:	2364      	movs	r3, #100	; 0x64
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	2301      	movs	r3, #1
 8000a44:	2226      	movs	r2, #38	; 0x26
 8000a46:	21d0      	movs	r1, #208	; 0xd0
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f005 f829 	bl	8005aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f001 fe1e 	bl	8002690 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a56:	2287      	movs	r2, #135	; 0x87
 8000a58:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000a5a:	2364      	movs	r3, #100	; 0x64
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MPU9250_Slave0_Enable+0x7c>)
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	2227      	movs	r2, #39	; 0x27
 8000a6a:	21d0      	movs	r1, #208	; 0xd0
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f005 f817 	bl	8005aa0 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a72:	200a      	movs	r0, #10
 8000a74:	f001 fe0c 	bl	8002690 <HAL_Delay>
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2400021d 	.word	0x2400021d

08000a84 <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000a8c:	2314      	movs	r3, #20
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <MPU9250_Read_All+0x24>)
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2301      	movs	r3, #1
 8000a96:	223b      	movs	r2, #59	; 0x3b
 8000a98:	21d0      	movs	r1, #208	; 0xd0
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f005 fa2e 	bl	8005efc <HAL_I2C_Mem_Read_DMA>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2400028c 	.word	0x2400028c
 8000aac:	00000000 	.word	0x00000000

08000ab0 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = (MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000ab8:	4bb7      	ldr	r3, [pc, #732]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	4bb5      	ldr	r3, [pc, #724]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ac2:	785b      	ldrb	r3, [r3, #1]
 8000ac4:	b21b      	sxth	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = -(MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000ace:	4bb2      	ldr	r3, [pc, #712]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ad0:	789b      	ldrb	r3, [r3, #2]
 8000ad2:	021b      	lsls	r3, r3, #8
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	4bb0      	ldr	r3, [pc, #704]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000ad8:	78db      	ldrb	r3, [r3, #3]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	b21a      	sxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = -(MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000aec:	4baa      	ldr	r3, [pc, #680]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	4ba8      	ldr	r3, [pc, #672]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	425b      	negs	r3, r3
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000b0a:	4ba3      	ldr	r3, [pc, #652]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b0c:	7a1b      	ldrb	r3, [r3, #8]
 8000b0e:	021b      	lsls	r3, r3, #8
 8000b10:	b21a      	sxth	r2, r3
 8000b12:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b14:	7a5b      	ldrb	r3, [r3, #9]
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000b20:	4b9d      	ldr	r3, [pc, #628]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b22:	7a9b      	ldrb	r3, [r3, #10]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	4b9b      	ldr	r3, [pc, #620]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b2a:	7adb      	ldrb	r3, [r3, #11]
 8000b2c:	b21b      	sxth	r3, r3
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	b21b      	sxth	r3, r3
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	425b      	negs	r3, r3
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000b3e:	4b96      	ldr	r3, [pc, #600]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b40:	7b1b      	ldrb	r3, [r3, #12]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	4b94      	ldr	r3, [pc, #592]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b48:	7b5b      	ldrb	r3, [r3, #13]
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	425b      	negs	r3, r3
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000b5c:	4b8e      	ldr	r3, [pc, #568]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b5e:	7bdb      	ldrb	r3, [r3, #15]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	4b8c      	ldr	r3, [pc, #560]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b66:	7b9b      	ldrb	r3, [r3, #14]
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	425b      	negs	r3, r3
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b21a      	sxth	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	85da      	strh	r2, [r3, #46]	; 0x2e
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000b7a:	4b87      	ldr	r3, [pc, #540]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b7c:	7c5b      	ldrb	r3, [r3, #17]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b21a      	sxth	r2, r3
 8000b82:	4b85      	ldr	r3, [pc, #532]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b84:	7c1b      	ldrb	r3, [r3, #16]
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000b90:	4b81      	ldr	r3, [pc, #516]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b92:	7cdb      	ldrb	r3, [r3, #19]
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	b21a      	sxth	r2, r3
 8000b98:	4b7f      	ldr	r3, [pc, #508]	; (8000d98 <MPU9250_Parsing+0x2e8>)
 8000b9a:	7c9b      	ldrb	r3, [r3, #18]
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	861a      	strh	r2, [r3, #48]	; 0x30

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bb4:	4b79      	ldr	r3, [pc, #484]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000bb6:	ed93 7a00 	vldr	s14, [r3]
 8000bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bc2:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000bc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000bda:	ee07 3a90 	vmov	s15, r3
 8000bde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000be2:	4b6e      	ldr	r3, [pc, #440]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000be4:	ed93 7a00 	vldr	s14, [r3]
 8000be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bf0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000bf4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bf8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000c08:	ee07 3a90 	vmov	s15, r3
 8000c0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c10:	4b62      	ldr	r3, [pc, #392]	; (8000d9c <MPU9250_Parsing+0x2ec>)
 8000c12:	ed93 7a00 	vldr	s14, [r3]
 8000c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1e:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8000d90 <MPU9250_Parsing+0x2e0>
 8000c22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c3e:	4b58      	ldr	r3, [pc, #352]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c40:	ed93 7a00 	vldr	s14, [r3]
 8000c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c5c:	4b50      	ldr	r3, [pc, #320]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c5e:	ed93 7a00 	vldr	s14, [r3]
 8000c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Az_Raw / MPU9250_Acc_LSB;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c72:	ee07 3a90 	vmov	s15, r3
 8000c76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000c7a:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <MPU9250_Parsing+0x2f0>)
 8000c7c:	ed93 7a00 	vldr	s14, [r3]
 8000c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8000c90:	461a      	mov	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c98:	3b80      	subs	r3, #128	; 0x80
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da00      	bge.n	8000ca0 <MPU9250_Parsing+0x1f0>
 8000c9e:	33ff      	adds	r3, #255	; 0xff
 8000ca0:	121b      	asrs	r3, r3, #8
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	fb03 f302 	mul.w	r3, r3, r2
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cb0:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000cb2:	ed93 7a00 	vldr	s14, [r3]
 8000cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8000cce:	3b80      	subs	r3, #128	; 0x80
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	da00      	bge.n	8000cd6 <MPU9250_Parsing+0x226>
 8000cd4:	33ff      	adds	r3, #255	; 0xff
 8000cd6:	121b      	asrs	r3, r3, #8
 8000cd8:	3301      	adds	r3, #1
 8000cda:	fb03 f302 	mul.w	r3, r3, r2
 8000cde:	ee07 3a90 	vmov	s15, r3
 8000ce2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000ce8:	ed93 7a00 	vldr	s14, [r3]
 8000cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000d04:	3b80      	subs	r3, #128	; 0x80
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	da00      	bge.n	8000d0c <MPU9250_Parsing+0x25c>
 8000d0a:	33ff      	adds	r3, #255	; 0xff
 8000d0c:	121b      	asrs	r3, r3, #8
 8000d0e:	3301      	adds	r3, #1
 8000d10:	fb03 f302 	mul.w	r3, r3, r2
 8000d14:	ee07 3a90 	vmov	s15, r3
 8000d18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MPU9250_Parsing+0x2f4>)
 8000d1e:	ed93 7a00 	vldr	s14, [r3]
 8000d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	ed93 7a08 	vldr	s14, [r3, #32]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000d74:	ee07 3a90 	vmov	s15, r3
 8000d78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8000d8c:	e00c      	b.n	8000da8 <MPU9250_Parsing+0x2f8>
 8000d8e:	bf00      	nop
 8000d90:	a252dd11 	.word	0xa252dd11
 8000d94:	3f91df46 	.word	0x3f91df46
 8000d98:	2400028c 	.word	0x2400028c
 8000d9c:	24000000 	.word	0x24000000
 8000da0:	24000004 	.word	0x24000004
 8000da4:	24000008 	.word	0x24000008
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8000dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	DataStruct->My -= DataStruct->My_Offset;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8000dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8000dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = (MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000df8:	4ba1      	ldr	r3, [pc, #644]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	4b9f      	ldr	r3, [pc, #636]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e02:	785b      	ldrb	r3, [r3, #1]
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b21a      	sxth	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = -(MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000e0e:	4b9c      	ldr	r3, [pc, #624]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	4b9a      	ldr	r3, [pc, #616]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e18:	78db      	ldrb	r3, [r3, #3]
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	425b      	negs	r3, r3
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	b21a      	sxth	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = -(MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000e2c:	4b94      	ldr	r3, [pc, #592]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	4b92      	ldr	r3, [pc, #584]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e36:	795b      	ldrb	r3, [r3, #5]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	425b      	negs	r3, r3
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	b21a      	sxth	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000e4a:	4b8d      	ldr	r3, [pc, #564]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e4c:	7a1b      	ldrb	r3, [r3, #8]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	4b8b      	ldr	r3, [pc, #556]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e54:	7a5b      	ldrb	r3, [r3, #9]
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000e60:	4b87      	ldr	r3, [pc, #540]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e62:	7a9b      	ldrb	r3, [r3, #10]
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	4b85      	ldr	r3, [pc, #532]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e6a:	7adb      	ldrb	r3, [r3, #11]
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	425b      	negs	r3, r3
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b21a      	sxth	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000e7e:	4b80      	ldr	r3, [pc, #512]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e80:	7b1b      	ldrb	r3, [r3, #12]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b21a      	sxth	r2, r3
 8000e86:	4b7e      	ldr	r3, [pc, #504]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e88:	7b5b      	ldrb	r3, [r3, #13]
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	b21b      	sxth	r3, r3
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	425b      	negs	r3, r3
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000e9c:	4b78      	ldr	r3, [pc, #480]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000e9e:	7bdb      	ldrb	r3, [r3, #15]
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	b21a      	sxth	r2, r3
 8000ea4:	4b76      	ldr	r3, [pc, #472]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000ea6:	7b9b      	ldrb	r3, [r3, #14]
 8000ea8:	b21b      	sxth	r3, r3
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	85da      	strh	r2, [r3, #46]	; 0x2e
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000eba:	4b71      	ldr	r3, [pc, #452]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000ebc:	7c5b      	ldrb	r3, [r3, #17]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	4b6f      	ldr	r3, [pc, #444]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000ec4:	7c1b      	ldrb	r3, [r3, #16]
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000ed0:	4b6b      	ldr	r3, [pc, #428]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000ed2:	7cdb      	ldrb	r3, [r3, #19]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	4b69      	ldr	r3, [pc, #420]	; (8001080 <MPU9250_Parsing_NoOffset+0x290>)
 8000eda:	7c9b      	ldrb	r3, [r3, #18]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	861a      	strh	r2, [r3, #48]	; 0x30

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ef4:	4b63      	ldr	r3, [pc, #396]	; (8001084 <MPU9250_Parsing_NoOffset+0x294>)
 8000ef6:	ed93 7a00 	vldr	s14, [r3]
 8000efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f02:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8001078 <MPU9250_Parsing_NoOffset+0x288>
 8000f06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f22:	4b58      	ldr	r3, [pc, #352]	; (8001084 <MPU9250_Parsing_NoOffset+0x294>)
 8000f24:	ed93 7a00 	vldr	s14, [r3]
 8000f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f30:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8001078 <MPU9250_Parsing_NoOffset+0x288>
 8000f34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f50:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <MPU9250_Parsing_NoOffset+0x294>)
 8000f52:	ed93 7a00 	vldr	s14, [r3]
 8000f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f5e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8001078 <MPU9250_Parsing_NoOffset+0x288>
 8000f62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f7e:	4b42      	ldr	r3, [pc, #264]	; (8001088 <MPU9250_Parsing_NoOffset+0x298>)
 8000f80:	ed93 7a00 	vldr	s14, [r3]
 8000f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	; (8001088 <MPU9250_Parsing_NoOffset+0x298>)
 8000f9e:	ed93 7a00 	vldr	s14, [r3]
 8000fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = DataStruct->Az_Raw / MPU9250_Acc_LSB;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fba:	4b33      	ldr	r3, [pc, #204]	; (8001088 <MPU9250_Parsing_NoOffset+0x298>)
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000fd8:	3b80      	subs	r3, #128	; 0x80
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	da00      	bge.n	8000fe0 <MPU9250_Parsing_NoOffset+0x1f0>
 8000fde:	33ff      	adds	r3, #255	; 0xff
 8000fe0:	121b      	asrs	r3, r3, #8
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	fb03 f302 	mul.w	r3, r3, r2
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ff0:	4b26      	ldr	r3, [pc, #152]	; (800108c <MPU9250_Parsing_NoOffset+0x29c>)
 8000ff2:	ed93 7a00 	vldr	s14, [r3]
 8000ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800100e:	3b80      	subs	r3, #128	; 0x80
 8001010:	2b00      	cmp	r3, #0
 8001012:	da00      	bge.n	8001016 <MPU9250_Parsing_NoOffset+0x226>
 8001014:	33ff      	adds	r3, #255	; 0xff
 8001016:	121b      	asrs	r3, r3, #8
 8001018:	3301      	adds	r3, #1
 800101a:	fb03 f302 	mul.w	r3, r3, r2
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <MPU9250_Parsing_NoOffset+0x29c>)
 8001028:	ed93 7a00 	vldr	s14, [r3]
 800102c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001044:	3b80      	subs	r3, #128	; 0x80
 8001046:	2b00      	cmp	r3, #0
 8001048:	da00      	bge.n	800104c <MPU9250_Parsing_NoOffset+0x25c>
 800104a:	33ff      	adds	r3, #255	; 0xff
 800104c:	121b      	asrs	r3, r3, #8
 800104e:	3301      	adds	r3, #1
 8001050:	fb03 f302 	mul.w	r3, r3, r2
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800105c:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MPU9250_Parsing_NoOffset+0x29c>)
 800105e:	ed93 7a00 	vldr	s14, [r3]
 8001062:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	a252dd11 	.word	0xa252dd11
 800107c:	3f91df46 	.word	0x3f91df46
 8001080:	2400028c 	.word	0x2400028c
 8001084:	24000000 	.word	0x24000000
 8001088:	24000004 	.word	0x24000004
 800108c:	24000008 	.word	0x24000008

08001090 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	68b9      	ldr	r1, [r7, #8]
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <_write+0x24>)
 80010a6:	f00a fe47 	bl	800bd38 <HAL_UART_Transmit_DMA>
}
 80010aa:	bf00      	nop
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	24000364 	.word	0x24000364

080010b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010be:	f001 fa55 	bl	800256c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c2:	f000 f93f 	bl	8001344 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010c6:	f000 f9bb 	bl	8001440 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ca:	f000 fb15 	bl	80016f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ce:	f000 faeb 	bl	80016a8 <MX_DMA_Init>
  MX_TIM7_Init();
 80010d2:	f000 fa67 	bl	80015a4 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80010d6:	f000 fa9b 	bl	8001610 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80010da:	f000 f9cd 	bl	8001478 <MX_I2C1_Init>
  MX_SPI1_Init();
 80010de:	f000 fa0b 	bl	80014f8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80010e2:	488c      	ldr	r0, [pc, #560]	; (8001314 <main+0x25c>)
 80010e4:	f00a fae0 	bl	800b6a8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 80010e8:	e009      	b.n	80010fe <main+0x46>
	{
		if(tim1_10ms_flag == 1)
 80010ea:	4b8b      	ldr	r3, [pc, #556]	; (8001318 <main+0x260>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d105      	bne.n	80010fe <main+0x46>
		{
			tim1_10ms_flag = 0;
 80010f2:	4b89      	ldr	r3, [pc, #548]	; (8001318 <main+0x260>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialization Failed \n");
 80010f8:	4888      	ldr	r0, [pc, #544]	; (800131c <main+0x264>)
 80010fa:	f00c ff49 	bl	800df90 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 80010fe:	2303      	movs	r3, #3
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2303      	movs	r3, #3
 8001104:	2203      	movs	r2, #3
 8001106:	2103      	movs	r1, #3
 8001108:	4885      	ldr	r0, [pc, #532]	; (8001320 <main+0x268>)
 800110a:	f7ff fabd 	bl	8000688 <MPU9250_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0ea      	beq.n	80010ea <main+0x32>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8001114:	4882      	ldr	r0, [pc, #520]	; (8001320 <main+0x268>)
 8001116:	f7ff fb9f 	bl	8000858 <MPU9250_Bypass>
//	MPU9250_AK8963_Setup(&hi2c1, &MPU9250);
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 800111a:	e009      	b.n	8001130 <main+0x78>
	{
		if(tim1_10ms_flag == 1)
 800111c:	4b7e      	ldr	r3, [pc, #504]	; (8001318 <main+0x260>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d105      	bne.n	8001130 <main+0x78>
		{
			tim1_10ms_flag = 0;
 8001124:	4b7c      	ldr	r3, [pc, #496]	; (8001318 <main+0x260>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialization Failed \n");
 800112a:	487e      	ldr	r0, [pc, #504]	; (8001324 <main+0x26c>)
 800112c:	f00c ff30 	bl	800df90 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8001130:	497d      	ldr	r1, [pc, #500]	; (8001328 <main+0x270>)
 8001132:	487b      	ldr	r0, [pc, #492]	; (8001320 <main+0x268>)
 8001134:	f7ff fc10 	bl	8000958 <MPU9250_AK8963_Setup>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0ee      	beq.n	800111c <main+0x64>
		}
	}
	MPU9250_Master(&hi2c1);
 800113e:	4878      	ldr	r0, [pc, #480]	; (8001320 <main+0x268>)
 8001140:	f7ff fbb8 	bl	80008b4 <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8001144:	4876      	ldr	r0, [pc, #472]	; (8001320 <main+0x268>)
 8001146:	f7ff fc5d 	bl	8000a04 <MPU9250_Slave0_Enable>


	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 800114a:	f001 f811 	bl	8002170 <W25qxx_Init>


	//Compass Calibration
	int SwC = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
	if(SwC == 1500)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001158:	4293      	cmp	r3, r2
 800115a:	f040 80a0 	bne.w	800129e <main+0x1e6>
	{
		for(int i =0;i<20;i++)
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	e00b      	b.n	800117c <main+0xc4>
		{
			MPU9250_Read_All(&hi2c1);
 8001164:	486e      	ldr	r0, [pc, #440]	; (8001320 <main+0x268>)
 8001166:	f7ff fc8d 	bl	8000a84 <MPU9250_Read_All>
			HAL_Delay(20);
 800116a:	2014      	movs	r0, #20
 800116c:	f001 fa90 	bl	8002690 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8001170:	486d      	ldr	r0, [pc, #436]	; (8001328 <main+0x270>)
 8001172:	f7ff fe3d 	bl	8000df0 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<20;i++)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3301      	adds	r3, #1
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b13      	cmp	r3, #19
 8001180:	ddf0      	ble.n	8001164 <main+0xac>
		}
		MPU9250.Mx_Max = MPU9250.Mx_Raw;
 8001182:	4b69      	ldr	r3, [pc, #420]	; (8001328 <main+0x270>)
 8001184:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001190:	4b65      	ldr	r3, [pc, #404]	; (8001328 <main+0x270>)
 8001192:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		MPU9250.Mx_Min = MPU9250.Mx_Raw;
 8001196:	4b64      	ldr	r3, [pc, #400]	; (8001328 <main+0x270>)
 8001198:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	4b60      	ldr	r3, [pc, #384]	; (8001328 <main+0x270>)
 80011a6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
		MPU9250.My_Max = MPU9250.My_Raw;
 80011aa:	4b5f      	ldr	r3, [pc, #380]	; (8001328 <main+0x270>)
 80011ac:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b8:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <main+0x270>)
 80011ba:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		MPU9250.My_Min = MPU9250.My_Raw;
 80011be:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <main+0x270>)
 80011c0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011cc:	4b56      	ldr	r3, [pc, #344]	; (8001328 <main+0x270>)
 80011ce:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		MPU9250.Mz_Max = MPU9250.Mz_Raw;
 80011d2:	4b55      	ldr	r3, [pc, #340]	; (8001328 <main+0x270>)
 80011d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80011d8:	ee07 3a90 	vmov	s15, r3
 80011dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e0:	4b51      	ldr	r3, [pc, #324]	; (8001328 <main+0x270>)
 80011e2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		MPU9250.Mz_Min = MPU9250.Mz_Raw;
 80011e6:	4b50      	ldr	r3, [pc, #320]	; (8001328 <main+0x270>)
 80011e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f4:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <main+0x270>)
 80011f6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

		while(SwC != 1000)
 80011fa:	e00d      	b.n	8001218 <main+0x160>
		{
//			Is_iBus_Received();
			MPU9250_Read_All(&hi2c1);
 80011fc:	4848      	ldr	r0, [pc, #288]	; (8001320 <main+0x268>)
 80011fe:	f7ff fc41 	bl	8000a84 <MPU9250_Read_All>
			HAL_Delay(10);
 8001202:	200a      	movs	r0, #10
 8001204:	f001 fa44 	bl	8002690 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8001208:	4847      	ldr	r0, [pc, #284]	; (8001328 <main+0x270>)
 800120a:	f7ff fdf1 	bl	8000df0 <MPU9250_Parsing_NoOffset>
			if(MPU9250.My > MPU9250.My) MPU9250.My_Max = MPU9250.My_Raw;
			if(MPU9250.My < MPU9250.My) MPU9250.My_Min = MPU9250.My_Raw;

			if(MPU9250.Mz > MPU9250.Mz) MPU9250.Mz_Max = MPU9250.Mz_Raw;
			if(MPU9250.Mz < MPU9250.Mz) MPU9250.Mz_Min = MPU9250.Mz_Raw;
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 800120e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001212:	4846      	ldr	r0, [pc, #280]	; (800132c <main+0x274>)
 8001214:	f004 fb99 	bl	800594a <HAL_GPIO_TogglePin>
		while(SwC != 1000)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800121e:	d1ed      	bne.n	80011fc <main+0x144>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 8001220:	4b41      	ldr	r3, [pc, #260]	; (8001328 <main+0x270>)
 8001222:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001226:	4b40      	ldr	r3, [pc, #256]	; (8001328 <main+0x270>)
 8001228:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800122c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001230:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001234:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001238:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <main+0x270>)
 800123a:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 800123e:	4b3a      	ldr	r3, [pc, #232]	; (8001328 <main+0x270>)
 8001240:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8001244:	4b38      	ldr	r3, [pc, #224]	; (8001328 <main+0x270>)
 8001246:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800124a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800124e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001256:	4b34      	ldr	r3, [pc, #208]	; (8001328 <main+0x270>)
 8001258:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 800125c:	4b32      	ldr	r3, [pc, #200]	; (8001328 <main+0x270>)
 800125e:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001262:	4b31      	ldr	r3, [pc, #196]	; (8001328 <main+0x270>)
 8001264:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001270:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <main+0x270>)
 8001276:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 800127a:	4a2d      	ldr	r2, [pc, #180]	; (8001330 <main+0x278>)
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <main+0x270>)
 800127e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001280:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 8001282:	4a2c      	ldr	r2, [pc, #176]	; (8001334 <main+0x27c>)
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <main+0x270>)
 8001286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001288:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 800128a:	4a2b      	ldr	r2, [pc, #172]	; (8001338 <main+0x280>)
 800128c:	4b26      	ldr	r3, [pc, #152]	; (8001328 <main+0x270>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	6013      	str	r3, [r2, #0]


		W25qxx_WritePage(Mag_Calib, 0, 0, 12);
 8001292:	230c      	movs	r3, #12
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	4825      	ldr	r0, [pc, #148]	; (8001330 <main+0x278>)
 800129a:	f001 f83b 	bl	8002314 <W25qxx_WritePage>
	}

	HAL_Delay(100);
 800129e:	2064      	movs	r0, #100	; 0x64
 80012a0:	f001 f9f6 	bl	8002690 <HAL_Delay>
	W25qxx_ReadPage(Mag_Calib, 0, 0, 12);
 80012a4:	230c      	movs	r3, #12
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	4821      	ldr	r0, [pc, #132]	; (8001330 <main+0x278>)
 80012ac:	f001 f8b6 	bl	800241c <W25qxx_ReadPage>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <main+0x278>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <main+0x270>)
 80012b6:	6513      	str	r3, [r2, #80]	; 0x50
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <main+0x27c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <main+0x270>)
 80012be:	6553      	str	r3, [r2, #84]	; 0x54
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <main+0x280>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <main+0x270>)
 80012c6:	6593      	str	r3, [r2, #88]	; 0x58


	while (1)
	{

		if(MPU9250_DRDY == 1)
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <main+0x284>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d105      	bne.n	80012dc <main+0x224>
		{
			MPU9250_DRDY = 0;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <main+0x284>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
			MPU9250_Parsing(&MPU9250);
 80012d6:	4814      	ldr	r0, [pc, #80]	; (8001328 <main+0x270>)
 80012d8:	f7ff fbea 	bl	8000ab0 <MPU9250_Parsing>
		}

		if(tim1_2ms_flag == 1)
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <main+0x288>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d10f      	bne.n	8001304 <main+0x24c>
		{
			tim1_2ms_flag = 0;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <main+0x288>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	2102      	movs	r1, #2
 80012ee:	480f      	ldr	r0, [pc, #60]	; (800132c <main+0x274>)
 80012f0:	f004 fb12 	bl	8005918 <HAL_GPIO_WritePin>
			MPU9250_Read_All(&hi2c1);
 80012f4:	480a      	ldr	r0, [pc, #40]	; (8001320 <main+0x268>)
 80012f6:	f7ff fbc5 	bl	8000a84 <MPU9250_Read_All>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2102      	movs	r1, #2
 80012fe:	480b      	ldr	r0, [pc, #44]	; (800132c <main+0x274>)
 8001300:	f004 fb0a 	bl	8005918 <HAL_GPIO_WritePin>
		}

		//Print
		if(tim1_10ms_flag == 1)
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <main+0x260>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d1dd      	bne.n	80012c8 <main+0x210>
		{
			tim1_10ms_flag = 0;
 800130c:	4b02      	ldr	r3, [pc, #8]	; (8001318 <main+0x260>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
		if(MPU9250_DRDY == 1)
 8001312:	e7d9      	b.n	80012c8 <main+0x210>
 8001314:	24000500 	.word	0x24000500
 8001318:	2400020c 	.word	0x2400020c
 800131c:	0800ffb0 	.word	0x0800ffb0
 8001320:	240002a0 	.word	0x240002a0
 8001324:	0800ffd0 	.word	0x0800ffd0
 8001328:	24000220 	.word	0x24000220
 800132c:	58020000 	.word	0x58020000
 8001330:	240004f4 	.word	0x240004f4
 8001334:	240004f8 	.word	0x240004f8
 8001338:	240004fc 	.word	0x240004fc
 800133c:	24000208 	.word	0x24000208
 8001340:	2400020b 	.word	0x2400020b

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b09c      	sub	sp, #112	; 0x70
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134e:	224c      	movs	r2, #76	; 0x4c
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f00c f964 	bl	800d620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	1d3b      	adds	r3, r7, #4
 800135a:	2220      	movs	r2, #32
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f00c f95e 	bl	800d620 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001364:	2002      	movs	r0, #2
 8001366:	f006 fd55 	bl	8007e14 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	4b32      	ldr	r3, [pc, #200]	; (8001438 <SystemClock_Config+0xf4>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a31      	ldr	r2, [pc, #196]	; (8001438 <SystemClock_Config+0xf4>)
 8001374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b2f      	ldr	r3, [pc, #188]	; (8001438 <SystemClock_Config+0xf4>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <SystemClock_Config+0xf8>)
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	4a2c      	ldr	r2, [pc, #176]	; (800143c <SystemClock_Config+0xf8>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001390:	4b2a      	ldr	r3, [pc, #168]	; (800143c <SystemClock_Config+0xf8>)
 8001392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800139c:	bf00      	nop
 800139e:	4b26      	ldr	r3, [pc, #152]	; (8001438 <SystemClock_Config+0xf4>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013aa:	d1f8      	bne.n	800139e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80013ac:	2303      	movs	r3, #3
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ba:	2340      	movs	r3, #64	; 0x40
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	2302      	movs	r3, #2
 80013c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80013c6:	2305      	movs	r3, #5
 80013c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013ca:	23c0      	movs	r3, #192	; 0xc0
 80013cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80013da:	2308      	movs	r3, #8
 80013dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013de:	2300      	movs	r3, #0
 80013e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ea:	4618      	mov	r0, r3
 80013ec:	f006 fd4c 	bl	8007e88 <HAL_RCC_OscConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80013f6:	f000 f9e7 	bl	80017c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fa:	233f      	movs	r3, #63	; 0x3f
 80013fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fe:	2303      	movs	r3, #3
 8001400:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001406:	2308      	movs	r3, #8
 8001408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800140a:	2340      	movs	r3, #64	; 0x40
 800140c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800140e:	2340      	movs	r3, #64	; 0x40
 8001410:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001418:	2340      	movs	r3, #64	; 0x40
 800141a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	2104      	movs	r1, #4
 8001420:	4618      	mov	r0, r3
 8001422:	f007 f941 	bl	80086a8 <HAL_RCC_ClockConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800142c:	f000 f9cc 	bl	80017c8 <Error_Handler>
  }
}
 8001430:	bf00      	nop
 8001432:	3770      	adds	r7, #112	; 0x70
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	58024800 	.word	0x58024800
 800143c:	58000400 	.word	0x58000400

08001440 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0b0      	sub	sp, #192	; 0xc0
 8001444:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	22bc      	movs	r2, #188	; 0xbc
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f00c f8e7 	bl	800d620 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001452:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001456:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001458:	2300      	movs	r3, #0
 800145a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4618      	mov	r0, r3
 8001460:	f007 fcae 	bl	8008dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 800146a:	f000 f9ad 	bl	80017c8 <Error_Handler>
  }
}
 800146e:	bf00      	nop
 8001470:	37c0      	adds	r7, #192	; 0xc0
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <MX_I2C1_Init+0x74>)
 800147e:	4a1c      	ldr	r2, [pc, #112]	; (80014f0 <MX_I2C1_Init+0x78>)
 8001480:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <MX_I2C1_Init+0x74>)
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <MX_I2C1_Init+0x7c>)
 8001486:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001488:	4b18      	ldr	r3, [pc, #96]	; (80014ec <MX_I2C1_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <MX_I2C1_Init+0x74>)
 8001490:	2201      	movs	r2, #1
 8001492:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <MX_I2C1_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800149a:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_I2C1_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_I2C1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_I2C1_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_I2C1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <MX_I2C1_Init+0x74>)
 80014b4:	f004 fa64 	bl	8005980 <HAL_I2C_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014be:	f000 f983 	bl	80017c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014c2:	2100      	movs	r1, #0
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <MX_I2C1_Init+0x74>)
 80014c6:	f006 fc0d 	bl	8007ce4 <HAL_I2CEx_ConfigAnalogFilter>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014d0:	f000 f97a 	bl	80017c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014d4:	2100      	movs	r1, #0
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_I2C1_Init+0x74>)
 80014d8:	f006 fc4f 	bl	8007d7a <HAL_I2CEx_ConfigDigitalFilter>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014e2:	f000 f971 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	240002a0 	.word	0x240002a0
 80014f0:	40005400 	.word	0x40005400
 80014f4:	00b03fdb 	.word	0x00b03fdb

080014f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <MX_SPI1_Init+0xa4>)
 80014fe:	4a28      	ldr	r2, [pc, #160]	; (80015a0 <MX_SPI1_Init+0xa8>)
 8001500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001502:	4b26      	ldr	r3, [pc, #152]	; (800159c <MX_SPI1_Init+0xa4>)
 8001504:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <MX_SPI1_Init+0xa4>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <MX_SPI1_Init+0xa4>)
 8001512:	2207      	movs	r2, #7
 8001514:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_SPI1_Init+0xa4>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <MX_SPI1_Init+0xa4>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <MX_SPI1_Init+0xa4>)
 8001524:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001528:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800152a:	4b1c      	ldr	r3, [pc, #112]	; (800159c <MX_SPI1_Init+0xa4>)
 800152c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001530:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_SPI1_Init+0xa4>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_SPI1_Init+0xa4>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <MX_SPI1_Init+0xa4>)
 8001540:	2200      	movs	r2, #0
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_SPI1_Init+0xa4>)
 8001546:	2200      	movs	r2, #0
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_SPI1_Init+0xa4>)
 800154c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001550:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_SPI1_Init+0xa4>)
 8001554:	2200      	movs	r2, #0
 8001556:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <MX_SPI1_Init+0xa4>)
 800155a:	2200      	movs	r2, #0
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_SPI1_Init+0xa4>)
 8001560:	2200      	movs	r2, #0
 8001562:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <MX_SPI1_Init+0xa4>)
 8001566:	2200      	movs	r2, #0
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_SPI1_Init+0xa4>)
 800156c:	2200      	movs	r2, #0
 800156e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <MX_SPI1_Init+0xa4>)
 8001572:	2200      	movs	r2, #0
 8001574:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_SPI1_Init+0xa4>)
 8001578:	2200      	movs	r2, #0
 800157a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <MX_SPI1_Init+0xa4>)
 800157e:	2200      	movs	r2, #0
 8001580:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_SPI1_Init+0xa4>)
 8001584:	2200      	movs	r2, #0
 8001586:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <MX_SPI1_Init+0xa4>)
 800158a:	f008 ff7b 	bl	800a484 <HAL_SPI_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001594:	f000 f918 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	2400046c 	.word	0x2400046c
 80015a0:	40013000 	.word	0x40013000

080015a4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_TIM7_Init+0x64>)
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <MX_TIM7_Init+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_TIM7_Init+0x64>)
 80015bc:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80015c0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_TIM7_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_TIM7_Init+0x64>)
 80015ca:	2205      	movs	r2, #5
 80015cc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_TIM7_Init+0x64>)
 80015d0:	2280      	movs	r2, #128	; 0x80
 80015d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <MX_TIM7_Init+0x64>)
 80015d6:	f00a f810 	bl	800b5fa <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015e0:	f000 f8f2 	bl	80017c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_TIM7_Init+0x64>)
 80015f2:	f00a faab 	bl	800bb4c <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015fc:	f000 f8e4 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	24000500 	.word	0x24000500
 800160c:	40001400 	.word	0x40001400

08001610 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001614:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 8001616:	4a23      	ldr	r2, [pc, #140]	; (80016a4 <MX_USART1_UART_Init+0x94>)
 8001618:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 800161c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001620:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001622:	4b1f      	ldr	r3, [pc, #124]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 8001636:	220c      	movs	r2, #12
 8001638:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001652:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001658:	4811      	ldr	r0, [pc, #68]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 800165a:	f00a fb1d 	bl	800bc98 <HAL_UART_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001664:	f000 f8b0 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 800166c:	f00b fee3 	bl	800d436 <HAL_UARTEx_SetTxFifoThreshold>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001676:	f000 f8a7 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800167a:	2100      	movs	r1, #0
 800167c:	4808      	ldr	r0, [pc, #32]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 800167e:	f00b ff18 	bl	800d4b2 <HAL_UARTEx_SetRxFifoThreshold>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001688:	f000 f89e 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_USART1_UART_Init+0x90>)
 800168e:	f00b fe99 	bl	800d3c4 <HAL_UARTEx_DisableFifoMode>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001698:	f000 f896 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	24000364 	.word	0x24000364
 80016a4:	40011000 	.word	0x40011000

080016a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_DMA_Init+0x4c>)
 80016b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016b4:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <MX_DMA_Init+0x4c>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <MX_DMA_Init+0x4c>)
 80016c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	200b      	movs	r0, #11
 80016d2:	f001 f8e8 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016d6:	200b      	movs	r0, #11
 80016d8:	f001 f8ff 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2100      	movs	r1, #0
 80016e0:	200c      	movs	r0, #12
 80016e2:	f001 f8e0 	bl	80028a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016e6:	200c      	movs	r0, #12
 80016e8:	f001 f8f7 	bl	80028da <HAL_NVIC_EnableIRQ>

}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	58024400 	.word	0x58024400

080016f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
 800170c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800170e:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001714:	4a29      	ldr	r2, [pc, #164]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <MX_GPIO_Init+0xc4>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001732:	4a22      	ldr	r2, [pc, #136]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <MX_GPIO_Init+0xc4>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <MX_GPIO_Init+0xc4>)
 800174c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001750:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <MX_GPIO_Init+0xc4>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <MX_GPIO_Init+0xc4>)
 800175c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	2102      	movs	r1, #2
 800176c:	4814      	ldr	r0, [pc, #80]	; (80017c0 <MX_GPIO_Init+0xc8>)
 800176e:	f004 f8d3 	bl	8005918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	2140      	movs	r1, #64	; 0x40
 8001776:	4813      	ldr	r0, [pc, #76]	; (80017c4 <MX_GPIO_Init+0xcc>)
 8001778:	f004 f8ce 	bl	8005918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800177c:	2302      	movs	r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	4619      	mov	r1, r3
 8001792:	480b      	ldr	r0, [pc, #44]	; (80017c0 <MX_GPIO_Init+0xc8>)
 8001794:	f003 ff10 	bl	80055b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001798:	2340      	movs	r3, #64	; 0x40
 800179a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179c:	2301      	movs	r3, #1
 800179e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4619      	mov	r1, r3
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_GPIO_Init+0xcc>)
 80017b0:	f003 ff02 	bl	80055b8 <HAL_GPIO_Init>

}
 80017b4:	bf00      	nop
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	58024400 	.word	0x58024400
 80017c0:	58020000 	.word	0x58020000
 80017c4:	58020400 	.word	0x58020400

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017d0:	e7fe      	b.n	80017d0 <Error_Handler+0x8>
	...

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <HAL_MspInit+0x30>)
 80017dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017e0:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_MspInit+0x30>)
 80017e2:	f043 0302 	orr.w	r3, r3, #2
 80017e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_MspInit+0x30>)
 80017ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	607b      	str	r3, [r7, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	58024400 	.word	0x58024400

08001808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b0b8      	sub	sp, #224	; 0xe0
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	22bc      	movs	r2, #188	; 0xbc
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f00b fef9 	bl	800d620 <memset>
  if(hi2c->Instance==I2C1)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a3f      	ldr	r2, [pc, #252]	; (8001930 <HAL_I2C_MspInit+0x128>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d177      	bne.n	8001928 <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001838:	2308      	movs	r3, #8
 800183a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4618      	mov	r0, r3
 8001848:	f007 faba 	bl	8008dc0 <HAL_RCCEx_PeriphCLKConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001852:	f7ff ffb9 	bl	80017c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4b37      	ldr	r3, [pc, #220]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	4a35      	ldr	r2, [pc, #212]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 800185e:	f043 0302 	orr.w	r3, r3, #2
 8001862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001866:	4b33      	ldr	r3, [pc, #204]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001874:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001878:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187c:	2312      	movs	r3, #18
 800187e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800188e:	2304      	movs	r3, #4
 8001890:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001894:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001898:	4619      	mov	r1, r3
 800189a:	4827      	ldr	r0, [pc, #156]	; (8001938 <HAL_I2C_MspInit+0x130>)
 800189c:	f003 fe8c 	bl	80055b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 80018a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018a6:	4a23      	ldr	r2, [pc, #140]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 80018a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <HAL_I2C_MspInit+0x12c>)
 80018b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 80018be:	4b1f      	ldr	r3, [pc, #124]	; (800193c <HAL_I2C_MspInit+0x134>)
 80018c0:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <HAL_I2C_MspInit+0x138>)
 80018c2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_I2C_MspInit+0x134>)
 80018c6:	2221      	movs	r2, #33	; 0x21
 80018c8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	; (800193c <HAL_I2C_MspInit+0x134>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_I2C_MspInit+0x134>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_I2C_MspInit+0x134>)
 80018d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018dc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_I2C_MspInit+0x134>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_I2C_MspInit+0x134>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_I2C_MspInit+0x134>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_I2C_MspInit+0x134>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_I2C_MspInit+0x134>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80018fc:	480f      	ldr	r0, [pc, #60]	; (800193c <HAL_I2C_MspInit+0x134>)
 80018fe:	f001 f807 	bl	8002910 <HAL_DMA_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8001908:	f7ff ff5e 	bl	80017c8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a0b      	ldr	r2, [pc, #44]	; (800193c <HAL_I2C_MspInit+0x134>)
 8001910:	63da      	str	r2, [r3, #60]	; 0x3c
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_I2C_MspInit+0x134>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	201f      	movs	r0, #31
 800191e:	f000 ffc2 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001922:	201f      	movs	r0, #31
 8001924:	f000 ffd9 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001928:	bf00      	nop
 800192a:	37e0      	adds	r7, #224	; 0xe0
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40005400 	.word	0x40005400
 8001934:	58024400 	.word	0x58024400
 8001938:	58020400 	.word	0x58020400
 800193c:	240003f4 	.word	0x240003f4
 8001940:	40020028 	.word	0x40020028

08001944 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b0b8      	sub	sp, #224	; 0xe0
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	22bc      	movs	r2, #188	; 0xbc
 8001962:	2100      	movs	r1, #0
 8001964:	4618      	mov	r0, r3
 8001966:	f00b fe5b 	bl	800d620 <memset>
  if(hspi->Instance==SPI1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a25      	ldr	r2, [pc, #148]	; (8001a04 <HAL_SPI_MspInit+0xc0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d142      	bne.n	80019fa <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800197a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800197e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001980:	f107 0310 	add.w	r3, r7, #16
 8001984:	4618      	mov	r0, r3
 8001986:	f007 fa1b 	bl	8008dc0 <HAL_RCCEx_PeriphCLKConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001990:	f7ff ff1a 	bl	80017c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001994:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_SPI_MspInit+0xc4>)
 8001996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800199a:	4a1b      	ldr	r2, [pc, #108]	; (8001a08 <HAL_SPI_MspInit+0xc4>)
 800199c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_SPI_MspInit+0xc4>)
 80019a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_SPI_MspInit+0xc4>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <HAL_SPI_MspInit+0xc4>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_SPI_MspInit+0xc4>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019d0:	23e0      	movs	r3, #224	; 0xe0
 80019d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019e8:	2305      	movs	r3, #5
 80019ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019f2:	4619      	mov	r1, r3
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <HAL_SPI_MspInit+0xc8>)
 80019f6:	f003 fddf 	bl	80055b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019fa:	bf00      	nop
 80019fc:	37e0      	adds	r7, #224	; 0xe0
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40013000 	.word	0x40013000
 8001a08:	58024400 	.word	0x58024400
 8001a0c:	58020000 	.word	0x58020000

08001a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <HAL_TIM_Base_MspInit+0x48>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d116      	bne.n	8001a50 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_TIM_Base_MspInit+0x4c>)
 8001a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a28:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <HAL_TIM_Base_MspInit+0x4c>)
 8001a2a:	f043 0320 	orr.w	r3, r3, #32
 8001a2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_TIM_Base_MspInit+0x4c>)
 8001a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a38:	f003 0320 	and.w	r3, r3, #32
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2037      	movs	r0, #55	; 0x37
 8001a46:	f000 ff2e 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a4a:	2037      	movs	r0, #55	; 0x37
 8001a4c:	f000 ff45 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40001400 	.word	0x40001400
 8001a5c:	58024400 	.word	0x58024400

08001a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b0b8      	sub	sp, #224	; 0xe0
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	22bc      	movs	r2, #188	; 0xbc
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00b fdcd 	bl	800d620 <memset>
  if(huart->Instance==USART1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a3f      	ldr	r2, [pc, #252]	; (8001b88 <HAL_UART_MspInit+0x128>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d177      	bne.n	8001b80 <HAL_UART_MspInit+0x120>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f007 f98e 	bl	8008dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001aaa:	f7ff fe8d 	bl	80017c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_UART_MspInit+0x12c>)
 8001ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab4:	4a35      	ldr	r2, [pc, #212]	; (8001b8c <HAL_UART_MspInit+0x12c>)
 8001ab6:	f043 0310 	orr.w	r3, r3, #16
 8001aba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001abe:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_UART_MspInit+0x12c>)
 8001ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <HAL_UART_MspInit+0x12c>)
 8001ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad2:	4a2e      	ldr	r2, [pc, #184]	; (8001b8c <HAL_UART_MspInit+0x12c>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_UART_MspInit+0x12c>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001aea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001aee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001b04:	2304      	movs	r3, #4
 8001b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b0e:	4619      	mov	r1, r3
 8001b10:	481f      	ldr	r0, [pc, #124]	; (8001b90 <HAL_UART_MspInit+0x130>)
 8001b12:	f003 fd51 	bl	80055b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8001b16:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b18:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <HAL_UART_MspInit+0x138>)
 8001b1a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001b1c:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b1e:	222a      	movs	r2, #42	; 0x2a
 8001b20:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b24:	2240      	movs	r2, #64	; 0x40
 8001b26:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b34:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b42:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b54:	480f      	ldr	r0, [pc, #60]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b56:	f000 fedb 	bl	8002910 <HAL_DMA_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8001b60:	f7ff fe32 	bl	80017c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b68:	679a      	str	r2, [r3, #120]	; 0x78
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_UART_MspInit+0x134>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2025      	movs	r0, #37	; 0x25
 8001b76:	f000 fe96 	bl	80028a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b7a:	2025      	movs	r0, #37	; 0x25
 8001b7c:	f000 fead 	bl	80028da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	37e0      	adds	r7, #224	; 0xe0
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	58020400 	.word	0x58020400
 8001b94:	240002ec 	.word	0x240002ec
 8001b98:	40020010 	.word	0x40020010

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler+0x4>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f000 fd32 	bl	8002650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DMA1_Stream0_IRQHandler+0x10>)
 8001bf6:	f002 f9b3 	bl	8003f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	240002ec 	.word	0x240002ec

08001c04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA1_Stream1_IRQHandler+0x10>)
 8001c0a:	f002 f9a9 	bl	8003f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	240003f4 	.word	0x240003f4

08001c18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <I2C1_EV_IRQHandler+0x10>)
 8001c1e:	f004 fa65 	bl	80060ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	240002a0 	.word	0x240002a0

08001c2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <USART1_IRQHandler+0x10>)
 8001c32:	f00a f901 	bl	800be38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	24000364 	.word	0x24000364

08001c40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <TIM7_IRQHandler+0x10>)
 8001c46:	f009 fd9f 	bl	800b788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	24000500 	.word	0x24000500

08001c54 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d11f      	bne.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x52>
	{
		tim1_2ms_count++;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c70:	701a      	strb	r2, [r3, #0]
		if(tim1_2ms_count == 2)
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d105      	bne.n	8001c86 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			tim1_2ms_count = 0;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
			tim1_2ms_flag = 1;
 8001c80:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
		}
		tim1_10ms_count++;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c90:	701a      	strb	r2, [r3, #0]
		if(tim1_10ms_count == 10)
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b0a      	cmp	r3, #10
 8001c98:	d105      	bne.n	8001ca6 <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			tim1_10ms_count = 0;
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
			tim1_10ms_flag = 1;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40001400 	.word	0x40001400
 8001cb8:	24000209 	.word	0x24000209
 8001cbc:	2400020b 	.word	0x2400020b
 8001cc0:	2400020a 	.word	0x2400020a
 8001cc4:	2400020c 	.word	0x2400020c

08001cc8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(hi2c->Instance == I2C1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_I2C_MemRxCpltCallback+0x24>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d102      	bne.n	8001ce0 <HAL_I2C_MemRxCpltCallback+0x18>
  {
	  MPU9250_DRDY = 1;
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_I2C_MemRxCpltCallback+0x28>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40005400 	.word	0x40005400
 8001cf0:	24000208 	.word	0x24000208

08001cf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
	return 1;
 8001cf8:	2301      	movs	r3, #1
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_kill>:

int _kill(int pid, int sig)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d0e:	f00b fc5d 	bl	800d5cc <__errno>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2216      	movs	r2, #22
 8001d16:	601a      	str	r2, [r3, #0]
	return -1;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_exit>:

void _exit (int status)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ffe7 	bl	8001d04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d36:	e7fe      	b.n	8001d36 <_exit+0x12>

08001d38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e00a      	b.n	8001d60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d4a:	f3af 8000 	nop.w
 8001d4e:	4601      	mov	r1, r0
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	60ba      	str	r2, [r7, #8]
 8001d56:	b2ca      	uxtb	r2, r1
 8001d58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbf0      	blt.n	8001d4a <_read+0x12>
	}

return len;
 8001d68:	687b      	ldr	r3, [r7, #4]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
	return -1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_isatty>:

int _isatty(int file)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
	return 1;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
	return 0;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <_sbrk+0x5c>)
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <_sbrk+0x60>)
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <_sbrk+0x64>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d102      	bne.n	8001dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <_sbrk+0x64>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <_sbrk+0x68>)
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <_sbrk+0x64>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4413      	add	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d207      	bcs.n	8001e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e0c:	f00b fbde 	bl	800d5cc <__errno>
 8001e10:	4603      	mov	r3, r0
 8001e12:	220c      	movs	r2, #12
 8001e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e16:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1a:	e009      	b.n	8001e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	4a05      	ldr	r2, [pc, #20]	; (8001e40 <_sbrk+0x64>)
 8001e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	24080000 	.word	0x24080000
 8001e3c:	00000400 	.word	0x00000400
 8001e40:	24000210 	.word	0x24000210
 8001e44:	24000588 	.word	0x24000588

08001e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e4c:	4b39      	ldr	r3, [pc, #228]	; (8001f34 <SystemInit+0xec>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	4a38      	ldr	r2, [pc, #224]	; (8001f34 <SystemInit+0xec>)
 8001e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e5c:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <SystemInit+0xf0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	2b06      	cmp	r3, #6
 8001e66:	d807      	bhi.n	8001e78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e68:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <SystemInit+0xf0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f023 030f 	bic.w	r3, r3, #15
 8001e70:	4a31      	ldr	r2, [pc, #196]	; (8001f38 <SystemInit+0xf0>)
 8001e72:	f043 0307 	orr.w	r3, r3, #7
 8001e76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e78:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <SystemInit+0xf4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2f      	ldr	r2, [pc, #188]	; (8001f3c <SystemInit+0xf4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <SystemInit+0xf4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e8a:	4b2c      	ldr	r3, [pc, #176]	; (8001f3c <SystemInit+0xf4>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	492b      	ldr	r1, [pc, #172]	; (8001f3c <SystemInit+0xf4>)
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <SystemInit+0xf8>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e96:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <SystemInit+0xf0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <SystemInit+0xf0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 030f 	bic.w	r3, r3, #15
 8001eaa:	4a23      	ldr	r2, [pc, #140]	; (8001f38 <SystemInit+0xf0>)
 8001eac:	f043 0307 	orr.w	r3, r3, #7
 8001eb0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <SystemInit+0xf4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <SystemInit+0xf4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <SystemInit+0xf4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <SystemInit+0xf4>)
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <SystemInit+0xfc>)
 8001ec8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <SystemInit+0xf4>)
 8001ecc:	4a1e      	ldr	r2, [pc, #120]	; (8001f48 <SystemInit+0x100>)
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <SystemInit+0xf4>)
 8001ed2:	4a1e      	ldr	r2, [pc, #120]	; (8001f4c <SystemInit+0x104>)
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ed6:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <SystemInit+0xf4>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001edc:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <SystemInit+0xf4>)
 8001ede:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <SystemInit+0x104>)
 8001ee0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ee2:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <SystemInit+0xf4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <SystemInit+0xf4>)
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <SystemInit+0x104>)
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <SystemInit+0xf4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <SystemInit+0xf4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <SystemInit+0xf4>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <SystemInit+0xf4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <SystemInit+0x108>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <SystemInit+0x10c>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f12:	d202      	bcs.n	8001f1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <SystemInit+0x110>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <SystemInit+0x114>)
 8001f1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f20:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SystemInit+0xec>)
 8001f24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f28:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00
 8001f38:	52002000 	.word	0x52002000
 8001f3c:	58024400 	.word	0x58024400
 8001f40:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f44:	02020200 	.word	0x02020200
 8001f48:	01ff0000 	.word	0x01ff0000
 8001f4c:	01010280 	.word	0x01010280
 8001f50:	5c001000 	.word	0x5c001000
 8001f54:	ffff0000 	.word	0xffff0000
 8001f58:	51008108 	.word	0x51008108
 8001f5c:	52004000 	.word	0x52004000

08001f60 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8001f6a:	f107 020f 	add.w	r2, r7, #15
 8001f6e:	1df9      	adds	r1, r7, #7
 8001f70:	2364      	movs	r3, #100	; 0x64
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2301      	movs	r3, #1
 8001f76:	4804      	ldr	r0, [pc, #16]	; (8001f88 <W25qxx_Spi+0x28>)
 8001f78:	f008 ff6a 	bl	800ae50 <HAL_SPI_TransmitReceive>
	return ret;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2400046c 	.word	0x2400046c

08001f8c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2140      	movs	r1, #64	; 0x40
 8001fa6:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <W25qxx_ReadID+0x68>)
 8001fa8:	f003 fcb6 	bl	8005918 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8001fac:	209f      	movs	r0, #159	; 0x9f
 8001fae:	f7ff ffd7 	bl	8001f60 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fb2:	20a5      	movs	r0, #165	; 0xa5
 8001fb4:	f7ff ffd4 	bl	8001f60 <W25qxx_Spi>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fbc:	20a5      	movs	r0, #165	; 0xa5
 8001fbe:	f7ff ffcf 	bl	8001f60 <W25qxx_Spi>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8001fc6:	20a5      	movs	r0, #165	; 0xa5
 8001fc8:	f7ff ffca 	bl	8001f60 <W25qxx_Spi>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	2140      	movs	r1, #64	; 0x40
 8001fd4:	4807      	ldr	r0, [pc, #28]	; (8001ff4 <W25qxx_ReadID+0x68>)
 8001fd6:	f003 fc9f 	bl	8005918 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	041a      	lsls	r2, r3, #16
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
	return Temp;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	58020400 	.word	0x58020400

08001ff8 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2140      	movs	r1, #64	; 0x40
 8002002:	4816      	ldr	r0, [pc, #88]	; (800205c <W25qxx_ReadUniqID+0x64>)
 8002004:	f003 fc88 	bl	8005918 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8002008:	204b      	movs	r0, #75	; 0x4b
 800200a:	f7ff ffa9 	bl	8001f60 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800200e:	2300      	movs	r3, #0
 8002010:	71fb      	strb	r3, [r7, #7]
 8002012:	e005      	b.n	8002020 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002014:	20a5      	movs	r0, #165	; 0xa5
 8002016:	f7ff ffa3 	bl	8001f60 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	3301      	adds	r3, #1
 800201e:	71fb      	strb	r3, [r7, #7]
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d9f6      	bls.n	8002014 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	71bb      	strb	r3, [r7, #6]
 800202a:	e00b      	b.n	8002044 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800202c:	79bc      	ldrb	r4, [r7, #6]
 800202e:	20a5      	movs	r0, #165	; 0xa5
 8002030:	f7ff ff96 	bl	8001f60 <W25qxx_Spi>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <W25qxx_ReadUniqID+0x68>)
 800203a:	4423      	add	r3, r4
 800203c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	3301      	adds	r3, #1
 8002042:	71bb      	strb	r3, [r7, #6]
 8002044:	79bb      	ldrb	r3, [r7, #6]
 8002046:	2b07      	cmp	r3, #7
 8002048:	d9f0      	bls.n	800202c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	2140      	movs	r1, #64	; 0x40
 800204e:	4803      	ldr	r0, [pc, #12]	; (800205c <W25qxx_ReadUniqID+0x64>)
 8002050:	f003 fc62 	bl	8005918 <HAL_GPIO_WritePin>
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bd90      	pop	{r4, r7, pc}
 800205c:	58020400 	.word	0x58020400
 8002060:	2400054c 	.word	0x2400054c

08002064 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	2140      	movs	r1, #64	; 0x40
 800206c:	4807      	ldr	r0, [pc, #28]	; (800208c <W25qxx_WriteEnable+0x28>)
 800206e:	f003 fc53 	bl	8005918 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8002072:	2006      	movs	r0, #6
 8002074:	f7ff ff74 	bl	8001f60 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	4803      	ldr	r0, [pc, #12]	; (800208c <W25qxx_WriteEnable+0x28>)
 800207e:	f003 fc4b 	bl	8005918 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8002082:	2001      	movs	r0, #1
 8002084:	f000 fb04 	bl	8002690 <HAL_Delay>
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	58020400 	.word	0x58020400

08002090 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	2140      	movs	r1, #64	; 0x40
 80020a2:	481c      	ldr	r0, [pc, #112]	; (8002114 <W25qxx_ReadStatusRegister+0x84>)
 80020a4:	f003 fc38 	bl	8005918 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d10c      	bne.n	80020c8 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80020ae:	2005      	movs	r0, #5
 80020b0:	f7ff ff56 	bl	8001f60 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020b4:	20a5      	movs	r0, #165	; 0xa5
 80020b6:	f7ff ff53 	bl	8001f60 <W25qxx_Spi>
 80020ba:	4603      	mov	r3, r0
 80020bc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80020be:	4a16      	ldr	r2, [pc, #88]	; (8002118 <W25qxx_ReadStatusRegister+0x88>)
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80020c6:	e01b      	b.n	8002100 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d10c      	bne.n	80020e8 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80020ce:	2035      	movs	r0, #53	; 0x35
 80020d0:	f7ff ff46 	bl	8001f60 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020d4:	20a5      	movs	r0, #165	; 0xa5
 80020d6:	f7ff ff43 	bl	8001f60 <W25qxx_Spi>
 80020da:	4603      	mov	r3, r0
 80020dc:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <W25qxx_ReadStatusRegister+0x88>)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80020e6:	e00b      	b.n	8002100 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 80020e8:	2015      	movs	r0, #21
 80020ea:	f7ff ff39 	bl	8001f60 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80020ee:	20a5      	movs	r0, #165	; 0xa5
 80020f0:	f7ff ff36 	bl	8001f60 <W25qxx_Spi>
 80020f4:	4603      	mov	r3, r0
 80020f6:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <W25qxx_ReadStatusRegister+0x88>)
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002100:	2201      	movs	r2, #1
 8002102:	2140      	movs	r1, #64	; 0x40
 8002104:	4803      	ldr	r0, [pc, #12]	; (8002114 <W25qxx_ReadStatusRegister+0x84>)
 8002106:	f003 fc07 	bl	8005918 <HAL_GPIO_WritePin>
	return status;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	58020400 	.word	0x58020400
 8002118:	2400054c 	.word	0x2400054c

0800211c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002120:	2001      	movs	r0, #1
 8002122:	f000 fab5 	bl	8002690 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	2140      	movs	r1, #64	; 0x40
 800212a:	480f      	ldr	r0, [pc, #60]	; (8002168 <W25qxx_WaitForWriteEnd+0x4c>)
 800212c:	f003 fbf4 	bl	8005918 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8002130:	2005      	movs	r0, #5
 8002132:	f7ff ff15 	bl	8001f60 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002136:	20a5      	movs	r0, #165	; 0xa5
 8002138:	f7ff ff12 	bl	8001f60 <W25qxx_Spi>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <W25qxx_WaitForWriteEnd+0x50>)
 8002142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8002146:	2001      	movs	r0, #1
 8002148:	f000 faa2 	bl	8002690 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <W25qxx_WaitForWriteEnd+0x50>)
 800214e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ed      	bne.n	8002136 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800215a:	2201      	movs	r2, #1
 800215c:	2140      	movs	r1, #64	; 0x40
 800215e:	4802      	ldr	r0, [pc, #8]	; (8002168 <W25qxx_WaitForWriteEnd+0x4c>)
 8002160:	f003 fbda 	bl	8005918 <HAL_GPIO_WritePin>
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	58020400 	.word	0x58020400
 800216c:	2400054c 	.word	0x2400054c

08002170 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8002176:	4b65      	ldr	r3, [pc, #404]	; (800230c <W25qxx_Init+0x19c>)
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800217e:	e002      	b.n	8002186 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8002180:	2001      	movs	r0, #1
 8002182:	f000 fa85 	bl	8002690 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8002186:	f000 fa77 	bl	8002678 <HAL_GetTick>
 800218a:	4603      	mov	r3, r0
 800218c:	2b63      	cmp	r3, #99	; 0x63
 800218e:	d9f7      	bls.n	8002180 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002190:	2201      	movs	r2, #1
 8002192:	2140      	movs	r1, #64	; 0x40
 8002194:	485e      	ldr	r0, [pc, #376]	; (8002310 <W25qxx_Init+0x1a0>)
 8002196:	f003 fbbf 	bl	8005918 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800219a:	2064      	movs	r0, #100	; 0x64
 800219c:	f000 fa78 	bl	8002690 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80021a0:	f7ff fef4 	bl	8001f8c <W25qxx_ReadID>
 80021a4:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	3b11      	subs	r3, #17
 80021ac:	2b0f      	cmp	r3, #15
 80021ae:	d86c      	bhi.n	800228a <W25qxx_Init+0x11a>
 80021b0:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <W25qxx_Init+0x48>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	0800227d 	.word	0x0800227d
 80021bc:	0800226f 	.word	0x0800226f
 80021c0:	08002261 	.word	0x08002261
 80021c4:	08002253 	.word	0x08002253
 80021c8:	08002245 	.word	0x08002245
 80021cc:	08002237 	.word	0x08002237
 80021d0:	08002229 	.word	0x08002229
 80021d4:	08002219 	.word	0x08002219
 80021d8:	08002209 	.word	0x08002209
 80021dc:	0800228b 	.word	0x0800228b
 80021e0:	0800228b 	.word	0x0800228b
 80021e4:	0800228b 	.word	0x0800228b
 80021e8:	0800228b 	.word	0x0800228b
 80021ec:	0800228b 	.word	0x0800228b
 80021f0:	0800228b 	.word	0x0800228b
 80021f4:	080021f9 	.word	0x080021f9
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 80021f8:	4b44      	ldr	r3, [pc, #272]	; (800230c <W25qxx_Init+0x19c>)
 80021fa:	220a      	movs	r2, #10
 80021fc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <W25qxx_Init+0x19c>)
 8002200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002204:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8002206:	e046      	b.n	8002296 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8002208:	4b40      	ldr	r3, [pc, #256]	; (800230c <W25qxx_Init+0x19c>)
 800220a:	2209      	movs	r2, #9
 800220c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 800220e:	4b3f      	ldr	r3, [pc, #252]	; (800230c <W25qxx_Init+0x19c>)
 8002210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002214:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8002216:	e03e      	b.n	8002296 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8002218:	4b3c      	ldr	r3, [pc, #240]	; (800230c <W25qxx_Init+0x19c>)
 800221a:	2208      	movs	r2, #8
 800221c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 800221e:	4b3b      	ldr	r3, [pc, #236]	; (800230c <W25qxx_Init+0x19c>)
 8002220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002224:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8002226:	e036      	b.n	8002296 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <W25qxx_Init+0x19c>)
 800222a:	2207      	movs	r2, #7
 800222c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800222e:	4b37      	ldr	r3, [pc, #220]	; (800230c <W25qxx_Init+0x19c>)
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8002234:	e02f      	b.n	8002296 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8002236:	4b35      	ldr	r3, [pc, #212]	; (800230c <W25qxx_Init+0x19c>)
 8002238:	2206      	movs	r2, #6
 800223a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 800223c:	4b33      	ldr	r3, [pc, #204]	; (800230c <W25qxx_Init+0x19c>)
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8002242:	e028      	b.n	8002296 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002244:	4b31      	ldr	r3, [pc, #196]	; (800230c <W25qxx_Init+0x19c>)
 8002246:	2205      	movs	r2, #5
 8002248:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 800224a:	4b30      	ldr	r3, [pc, #192]	; (800230c <W25qxx_Init+0x19c>)
 800224c:	2220      	movs	r2, #32
 800224e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8002250:	e021      	b.n	8002296 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002252:	4b2e      	ldr	r3, [pc, #184]	; (800230c <W25qxx_Init+0x19c>)
 8002254:	2204      	movs	r2, #4
 8002256:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002258:	4b2c      	ldr	r3, [pc, #176]	; (800230c <W25qxx_Init+0x19c>)
 800225a:	2210      	movs	r2, #16
 800225c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 800225e:	e01a      	b.n	8002296 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002260:	4b2a      	ldr	r3, [pc, #168]	; (800230c <W25qxx_Init+0x19c>)
 8002262:	2203      	movs	r2, #3
 8002264:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8002266:	4b29      	ldr	r3, [pc, #164]	; (800230c <W25qxx_Init+0x19c>)
 8002268:	2208      	movs	r2, #8
 800226a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 800226c:	e013      	b.n	8002296 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <W25qxx_Init+0x19c>)
 8002270:	2202      	movs	r2, #2
 8002272:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <W25qxx_Init+0x19c>)
 8002276:	2204      	movs	r2, #4
 8002278:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 800227a:	e00c      	b.n	8002296 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800227c:	4b23      	ldr	r3, [pc, #140]	; (800230c <W25qxx_Init+0x19c>)
 800227e:	2201      	movs	r2, #1
 8002280:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <W25qxx_Init+0x19c>)
 8002284:	2202      	movs	r2, #2
 8002286:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8002288:	e005      	b.n	8002296 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <W25qxx_Init+0x19c>)
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8002292:	2300      	movs	r3, #0
 8002294:	e036      	b.n	8002304 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <W25qxx_Init+0x19c>)
 8002298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <W25qxx_Init+0x19c>)
 80022a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a4:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80022a6:	4b19      	ldr	r3, [pc, #100]	; (800230c <W25qxx_Init+0x19c>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	4a17      	ldr	r2, [pc, #92]	; (800230c <W25qxx_Init+0x19c>)
 80022ae:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <W25qxx_Init+0x19c>)
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	4a15      	ldr	r2, [pc, #84]	; (800230c <W25qxx_Init+0x19c>)
 80022b6:	6912      	ldr	r2, [r2, #16]
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <W25qxx_Init+0x19c>)
 80022be:	8952      	ldrh	r2, [r2, #10]
 80022c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80022c4:	4a11      	ldr	r2, [pc, #68]	; (800230c <W25qxx_Init+0x19c>)
 80022c6:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <W25qxx_Init+0x19c>)
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <W25qxx_Init+0x19c>)
 80022d0:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <W25qxx_Init+0x19c>)
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4a0d      	ldr	r2, [pc, #52]	; (800230c <W25qxx_Init+0x19c>)
 80022d8:	6912      	ldr	r2, [r2, #16]
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	0a9b      	lsrs	r3, r3, #10
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <W25qxx_Init+0x19c>)
 80022e2:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80022e4:	f7ff fe88 	bl	8001ff8 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80022e8:	2001      	movs	r0, #1
 80022ea:	f7ff fed1 	bl	8002090 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80022ee:	2002      	movs	r0, #2
 80022f0:	f7ff fece 	bl	8002090 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f7ff fecb 	bl	8002090 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <W25qxx_Init+0x19c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	2400054c 	.word	0x2400054c
 8002310:	58020400 	.word	0x58020400

08002314 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8002322:	e002      	b.n	800232a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002324:	2001      	movs	r0, #1
 8002326:	f000 f9b3 	bl	8002690 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800232a:	4b39      	ldr	r3, [pc, #228]	; (8002410 <W25qxx_WritePage+0xfc>)
 800232c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002330:	2b01      	cmp	r3, #1
 8002332:	d0f7      	beq.n	8002324 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8002334:	4b36      	ldr	r3, [pc, #216]	; (8002410 <W25qxx_WritePage+0xfc>)
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	4a33      	ldr	r2, [pc, #204]	; (8002410 <W25qxx_WritePage+0xfc>)
 8002344:	8952      	ldrh	r2, [r2, #10]
 8002346:	4293      	cmp	r3, r2
 8002348:	d802      	bhi.n	8002350 <W25qxx_WritePage+0x3c>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <W25qxx_WritePage+0xfc>)
 8002352:	895b      	ldrh	r3, [r3, #10]
 8002354:	461a      	mov	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	4413      	add	r3, r2
 8002362:	4a2b      	ldr	r2, [pc, #172]	; (8002410 <W25qxx_WritePage+0xfc>)
 8002364:	8952      	ldrh	r2, [r2, #10]
 8002366:	4293      	cmp	r3, r2
 8002368:	d905      	bls.n	8002376 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <W25qxx_WritePage+0xfc>)
 800236c:	895b      	ldrh	r3, [r3, #10]
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8002376:	f7ff fed1 	bl	800211c <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 800237a:	f7ff fe73 	bl	8002064 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	2140      	movs	r1, #64	; 0x40
 8002382:	4824      	ldr	r0, [pc, #144]	; (8002414 <W25qxx_WritePage+0x100>)
 8002384:	f003 fac8 	bl	8005918 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <W25qxx_WritePage+0xfc>)
 800238a:	895b      	ldrh	r3, [r3, #10]
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	fb03 f302 	mul.w	r3, r3, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <W25qxx_WritePage+0xfc>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d909      	bls.n	80023b6 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80023a2:	2012      	movs	r0, #18
 80023a4:	f7ff fddc 	bl	8001f60 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	0e1b      	lsrs	r3, r3, #24
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fdd6 	bl	8001f60 <W25qxx_Spi>
 80023b4:	e002      	b.n	80023bc <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80023b6:	2002      	movs	r0, #2
 80023b8:	f7ff fdd2 	bl	8001f60 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff fdcc 	bl	8001f60 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fdc6 	bl	8001f60 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fdc1 	bl	8001f60 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	2364      	movs	r3, #100	; 0x64
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	480c      	ldr	r0, [pc, #48]	; (8002418 <W25qxx_WritePage+0x104>)
 80023e8:	f008 f94e 	bl	800a688 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80023ec:	2201      	movs	r2, #1
 80023ee:	2140      	movs	r1, #64	; 0x40
 80023f0:	4808      	ldr	r0, [pc, #32]	; (8002414 <W25qxx_WritePage+0x100>)
 80023f2:	f003 fa91 	bl	8005918 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80023f6:	f7ff fe91 	bl	800211c <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f000 f948 	bl	8002690 <HAL_Delay>
	w25qxx.Lock = 0;
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <W25qxx_WritePage+0xfc>)
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2400054c 	.word	0x2400054c
 8002414:	58020400 	.word	0x58020400
 8002418:	2400046c 	.word	0x2400046c

0800241c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800242a:	e002      	b.n	8002432 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 800242c:	2001      	movs	r0, #1
 800242e:	f000 f92f 	bl	8002690 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8002432:	4b36      	ldr	r3, [pc, #216]	; (800250c <W25qxx_ReadPage+0xf0>)
 8002434:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002438:	2b01      	cmp	r3, #1
 800243a:	d0f7      	beq.n	800242c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 800243c:	4b33      	ldr	r3, [pc, #204]	; (800250c <W25qxx_ReadPage+0xf0>)
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8002444:	4b31      	ldr	r3, [pc, #196]	; (800250c <W25qxx_ReadPage+0xf0>)
 8002446:	895b      	ldrh	r3, [r3, #10]
 8002448:	461a      	mov	r2, r3
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	4293      	cmp	r3, r2
 800244e:	d802      	bhi.n	8002456 <W25qxx_ReadPage+0x3a>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d102      	bne.n	800245c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8002456:	4b2d      	ldr	r3, [pc, #180]	; (800250c <W25qxx_ReadPage+0xf0>)
 8002458:	895b      	ldrh	r3, [r3, #10]
 800245a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	4413      	add	r3, r2
 8002462:	4a2a      	ldr	r2, [pc, #168]	; (800250c <W25qxx_ReadPage+0xf0>)
 8002464:	8952      	ldrh	r2, [r2, #10]
 8002466:	4293      	cmp	r3, r2
 8002468:	d905      	bls.n	8002476 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <W25qxx_ReadPage+0xf0>)
 800246c:	895b      	ldrh	r3, [r3, #10]
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8002476:	4b25      	ldr	r3, [pc, #148]	; (800250c <W25qxx_ReadPage+0xf0>)
 8002478:	895b      	ldrh	r3, [r3, #10]
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	fb03 f302 	mul.w	r3, r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	2140      	movs	r1, #64	; 0x40
 800248c:	4820      	ldr	r0, [pc, #128]	; (8002510 <W25qxx_ReadPage+0xf4>)
 800248e:	f003 fa43 	bl	8005918 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002492:	4b1e      	ldr	r3, [pc, #120]	; (800250c <W25qxx_ReadPage+0xf0>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b08      	cmp	r3, #8
 8002498:	d909      	bls.n	80024ae <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 800249a:	200c      	movs	r0, #12
 800249c:	f7ff fd60 	bl	8001f60 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	0e1b      	lsrs	r3, r3, #24
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fd5a 	bl	8001f60 <W25qxx_Spi>
 80024ac:	e002      	b.n	80024b4 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80024ae:	200b      	movs	r0, #11
 80024b0:	f7ff fd56 	bl	8001f60 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fd50 	bl	8001f60 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fd4a 	bl	8001f60 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fd45 	bl	8001f60 <W25qxx_Spi>
	W25qxx_Spi(0);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f7ff fd42 	bl	8001f60 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	2364      	movs	r3, #100	; 0x64
 80024e2:	68f9      	ldr	r1, [r7, #12]
 80024e4:	480b      	ldr	r0, [pc, #44]	; (8002514 <W25qxx_ReadPage+0xf8>)
 80024e6:	f008 fac1 	bl	800aa6c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80024ea:	2201      	movs	r2, #1
 80024ec:	2140      	movs	r1, #64	; 0x40
 80024ee:	4808      	ldr	r0, [pc, #32]	; (8002510 <W25qxx_ReadPage+0xf4>)
 80024f0:	f003 fa12 	bl	8005918 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80024f4:	2001      	movs	r0, #1
 80024f6:	f000 f8cb 	bl	8002690 <HAL_Delay>
	w25qxx.Lock = 0;
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <W25qxx_ReadPage+0xf0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2400054c 	.word	0x2400054c
 8002510:	58020400 	.word	0x58020400
 8002514:	2400046c 	.word	0x2400046c

08002518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002550 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800251c:	f7ff fc94 	bl	8001e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002520:	480c      	ldr	r0, [pc, #48]	; (8002554 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002522:	490d      	ldr	r1, [pc, #52]	; (8002558 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002524:	4a0d      	ldr	r2, [pc, #52]	; (800255c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002528:	e002      	b.n	8002530 <LoopCopyDataInit>

0800252a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800252c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252e:	3304      	adds	r3, #4

08002530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002534:	d3f9      	bcc.n	800252a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002538:	4c0a      	ldr	r4, [pc, #40]	; (8002564 <LoopFillZerobss+0x22>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800253c:	e001      	b.n	8002542 <LoopFillZerobss>

0800253e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002540:	3204      	adds	r2, #4

08002542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002544:	d3fb      	bcc.n	800253e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002546:	f00b f847 	bl	800d5d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254a:	f7fe fdb5 	bl	80010b8 <main>
  bx  lr
 800254e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002550:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002554:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002558:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 800255c:	08010424 	.word	0x08010424
  ldr r2, =_sbss
 8002560:	240001ec 	.word	0x240001ec
  ldr r4, =_ebss
 8002564:	24000588 	.word	0x24000588

08002568 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002568:	e7fe      	b.n	8002568 <ADC3_IRQHandler>
	...

0800256c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002572:	2003      	movs	r0, #3
 8002574:	f000 f98c 	bl	8002890 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002578:	f006 fa4c 	bl	8008a14 <HAL_RCC_GetSysClockFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_Init+0x68>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	4913      	ldr	r1, [pc, #76]	; (80025d8 <HAL_Init+0x6c>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
 8002594:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_Init+0x68>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <HAL_Init+0x6c>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	4a0b      	ldr	r2, [pc, #44]	; (80025dc <HAL_Init+0x70>)
 80025ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025b0:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_Init+0x74>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025b6:	200f      	movs	r0, #15
 80025b8:	f000 f814 	bl	80025e4 <HAL_InitTick>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e002      	b.n	80025cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80025c6:	f7ff f905 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	58024400 	.word	0x58024400
 80025d8:	0800fff0 	.word	0x0800fff0
 80025dc:	24000010 	.word	0x24000010
 80025e0:	2400000c 	.word	0x2400000c

080025e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_InitTick+0x60>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e021      	b.n	800263c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_InitTick+0x64>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <HAL_InitTick+0x60>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002606:	fbb3 f3f1 	udiv	r3, r3, r1
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f000 f971 	bl	80028f6 <HAL_SYSTICK_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e00e      	b.n	800263c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b0f      	cmp	r3, #15
 8002622:	d80a      	bhi.n	800263a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002624:	2200      	movs	r2, #0
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	f04f 30ff 	mov.w	r0, #4294967295
 800262c:	f000 f93b 	bl	80028a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002630:	4a06      	ldr	r2, [pc, #24]	; (800264c <HAL_InitTick+0x68>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e000      	b.n	800263c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	24000018 	.word	0x24000018
 8002648:	2400000c 	.word	0x2400000c
 800264c:	24000014 	.word	0x24000014

08002650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_IncTick+0x20>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_IncTick+0x24>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4413      	add	r3, r2
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_IncTick+0x24>)
 8002662:	6013      	str	r3, [r2, #0]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	24000018 	.word	0x24000018
 8002674:	24000574 	.word	0x24000574

08002678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return uwTick;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_GetTick+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	24000574 	.word	0x24000574

08002690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff ffee 	bl	8002678 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d005      	beq.n	80026b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_Delay+0x44>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026b6:	bf00      	nop
 80026b8:	f7ff ffde 	bl	8002678 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d8f7      	bhi.n	80026b8 <HAL_Delay+0x28>
  {
  }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	24000018 	.word	0x24000018

080026d8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <HAL_GetREVID+0x14>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	0c1b      	lsrs	r3, r3, #16
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	5c001000 	.word	0x5c001000

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <__NVIC_SetPriorityGrouping+0x40>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	4313      	orrs	r3, r2
 800271c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271e:	4a04      	ldr	r2, [pc, #16]	; (8002730 <__NVIC_SetPriorityGrouping+0x40>)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60d3      	str	r3, [r2, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000ed00 	.word	0xe000ed00
 8002734:	05fa0000 	.word	0x05fa0000

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	; (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	; (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	; (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	; 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	; 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800285c:	d301      	bcc.n	8002862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800285e:	2301      	movs	r3, #1
 8002860:	e00f      	b.n	8002882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <SysTick_Config+0x40>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3b01      	subs	r3, #1
 8002868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286a:	210f      	movs	r1, #15
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f7ff ff8e 	bl	8002790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <SysTick_Config+0x40>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <SysTick_Config+0x40>)
 800287c:	2207      	movs	r2, #7
 800287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	e000e010 	.word	0xe000e010

08002890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff29 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028b4:	f7ff ff40 	bl	8002738 <__NVIC_GetPriorityGrouping>
 80028b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff ff90 	bl	80027e4 <NVIC_EncodePriority>
 80028c4:	4602      	mov	r2, r0
 80028c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff ff5f 	bl	8002790 <__NVIC_SetPriority>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff33 	bl	8002754 <__NVIC_EnableIRQ>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffa4 	bl	800284c <SysTick_Config>
 8002904:	4603      	mov	r3, r0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff feae 	bl	8002678 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e316      	b.n	8002f56 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a66      	ldr	r2, [pc, #408]	; (8002ac8 <HAL_DMA_Init+0x1b8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d04a      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a65      	ldr	r2, [pc, #404]	; (8002acc <HAL_DMA_Init+0x1bc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d045      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a63      	ldr	r2, [pc, #396]	; (8002ad0 <HAL_DMA_Init+0x1c0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d040      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a62      	ldr	r2, [pc, #392]	; (8002ad4 <HAL_DMA_Init+0x1c4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d03b      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a60      	ldr	r2, [pc, #384]	; (8002ad8 <HAL_DMA_Init+0x1c8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d036      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a5f      	ldr	r2, [pc, #380]	; (8002adc <HAL_DMA_Init+0x1cc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d031      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a5d      	ldr	r2, [pc, #372]	; (8002ae0 <HAL_DMA_Init+0x1d0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d02c      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a5c      	ldr	r2, [pc, #368]	; (8002ae4 <HAL_DMA_Init+0x1d4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d027      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a5a      	ldr	r2, [pc, #360]	; (8002ae8 <HAL_DMA_Init+0x1d8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d022      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a59      	ldr	r2, [pc, #356]	; (8002aec <HAL_DMA_Init+0x1dc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d01d      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <HAL_DMA_Init+0x1e0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d018      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a56      	ldr	r2, [pc, #344]	; (8002af4 <HAL_DMA_Init+0x1e4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d013      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a54      	ldr	r2, [pc, #336]	; (8002af8 <HAL_DMA_Init+0x1e8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00e      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a53      	ldr	r2, [pc, #332]	; (8002afc <HAL_DMA_Init+0x1ec>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a51      	ldr	r2, [pc, #324]	; (8002b00 <HAL_DMA_Init+0x1f0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d004      	beq.n	80029c8 <HAL_DMA_Init+0xb8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a50      	ldr	r2, [pc, #320]	; (8002b04 <HAL_DMA_Init+0x1f4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d101      	bne.n	80029cc <HAL_DMA_Init+0xbc>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <HAL_DMA_Init+0xbe>
 80029cc:	2300      	movs	r3, #0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f000 813b 	beq.w	8002c4a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a37      	ldr	r2, [pc, #220]	; (8002ac8 <HAL_DMA_Init+0x1b8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d04a      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a36      	ldr	r2, [pc, #216]	; (8002acc <HAL_DMA_Init+0x1bc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d045      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a34      	ldr	r2, [pc, #208]	; (8002ad0 <HAL_DMA_Init+0x1c0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d040      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a33      	ldr	r2, [pc, #204]	; (8002ad4 <HAL_DMA_Init+0x1c4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d03b      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a31      	ldr	r2, [pc, #196]	; (8002ad8 <HAL_DMA_Init+0x1c8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d036      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a30      	ldr	r2, [pc, #192]	; (8002adc <HAL_DMA_Init+0x1cc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d031      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a2e      	ldr	r2, [pc, #184]	; (8002ae0 <HAL_DMA_Init+0x1d0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d02c      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a2d      	ldr	r2, [pc, #180]	; (8002ae4 <HAL_DMA_Init+0x1d4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d027      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a2b      	ldr	r2, [pc, #172]	; (8002ae8 <HAL_DMA_Init+0x1d8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d022      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a2a      	ldr	r2, [pc, #168]	; (8002aec <HAL_DMA_Init+0x1dc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d01d      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a28      	ldr	r2, [pc, #160]	; (8002af0 <HAL_DMA_Init+0x1e0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d018      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a27      	ldr	r2, [pc, #156]	; (8002af4 <HAL_DMA_Init+0x1e4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d013      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <HAL_DMA_Init+0x1e8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00e      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a24      	ldr	r2, [pc, #144]	; (8002afc <HAL_DMA_Init+0x1ec>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d009      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a22      	ldr	r2, [pc, #136]	; (8002b00 <HAL_DMA_Init+0x1f0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_DMA_Init+0x174>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a21      	ldr	r2, [pc, #132]	; (8002b04 <HAL_DMA_Init+0x1f4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d108      	bne.n	8002a96 <HAL_DMA_Init+0x186>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e007      	b.n	8002aa6 <HAL_DMA_Init+0x196>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002aa6:	e02f      	b.n	8002b08 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aa8:	f7ff fde6 	bl	8002678 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d928      	bls.n	8002b08 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2203      	movs	r2, #3
 8002ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e246      	b.n	8002f56 <HAL_DMA_Init+0x646>
 8002ac8:	40020010 	.word	0x40020010
 8002acc:	40020028 	.word	0x40020028
 8002ad0:	40020040 	.word	0x40020040
 8002ad4:	40020058 	.word	0x40020058
 8002ad8:	40020070 	.word	0x40020070
 8002adc:	40020088 	.word	0x40020088
 8002ae0:	400200a0 	.word	0x400200a0
 8002ae4:	400200b8 	.word	0x400200b8
 8002ae8:	40020410 	.word	0x40020410
 8002aec:	40020428 	.word	0x40020428
 8002af0:	40020440 	.word	0x40020440
 8002af4:	40020458 	.word	0x40020458
 8002af8:	40020470 	.word	0x40020470
 8002afc:	40020488 	.word	0x40020488
 8002b00:	400204a0 	.word	0x400204a0
 8002b04:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1c8      	bne.n	8002aa8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4b83      	ldr	r3, [pc, #524]	; (8002d30 <HAL_DMA_Init+0x420>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b2e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b3a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b46:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d107      	bne.n	8002b6c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	4313      	orrs	r3, r2
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002b6c:	4b71      	ldr	r3, [pc, #452]	; (8002d34 <HAL_DMA_Init+0x424>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b71      	ldr	r3, [pc, #452]	; (8002d38 <HAL_DMA_Init+0x428>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b78:	d328      	bcc.n	8002bcc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b28      	cmp	r3, #40	; 0x28
 8002b80:	d903      	bls.n	8002b8a <HAL_DMA_Init+0x27a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b2e      	cmp	r3, #46	; 0x2e
 8002b88:	d917      	bls.n	8002bba <HAL_DMA_Init+0x2aa>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b90:	d903      	bls.n	8002b9a <HAL_DMA_Init+0x28a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b42      	cmp	r3, #66	; 0x42
 8002b98:	d90f      	bls.n	8002bba <HAL_DMA_Init+0x2aa>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b46      	cmp	r3, #70	; 0x46
 8002ba0:	d903      	bls.n	8002baa <HAL_DMA_Init+0x29a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b48      	cmp	r3, #72	; 0x48
 8002ba8:	d907      	bls.n	8002bba <HAL_DMA_Init+0x2aa>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b4e      	cmp	r3, #78	; 0x4e
 8002bb0:	d905      	bls.n	8002bbe <HAL_DMA_Init+0x2ae>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b52      	cmp	r3, #82	; 0x52
 8002bb8:	d801      	bhi.n	8002bbe <HAL_DMA_Init+0x2ae>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_DMA_Init+0x2b0>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bca:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f023 0307 	bic.w	r3, r3, #7
 8002be2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d117      	bne.n	8002c26 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00e      	beq.n	8002c26 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f002 fb4b 	bl	80052a4 <DMA_CheckFifoParam>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2240      	movs	r2, #64	; 0x40
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e197      	b.n	8002f56 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f002 fa86 	bl	8005140 <DMA_CalcBaseAndBitshift>
 8002c34:	4603      	mov	r3, r0
 8002c36:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	223f      	movs	r2, #63	; 0x3f
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	e0cd      	b.n	8002de6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <HAL_DMA_Init+0x42c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d022      	beq.n	8002c9a <HAL_DMA_Init+0x38a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a39      	ldr	r2, [pc, #228]	; (8002d40 <HAL_DMA_Init+0x430>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01d      	beq.n	8002c9a <HAL_DMA_Init+0x38a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a38      	ldr	r2, [pc, #224]	; (8002d44 <HAL_DMA_Init+0x434>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d018      	beq.n	8002c9a <HAL_DMA_Init+0x38a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a36      	ldr	r2, [pc, #216]	; (8002d48 <HAL_DMA_Init+0x438>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <HAL_DMA_Init+0x38a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a35      	ldr	r2, [pc, #212]	; (8002d4c <HAL_DMA_Init+0x43c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00e      	beq.n	8002c9a <HAL_DMA_Init+0x38a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a33      	ldr	r2, [pc, #204]	; (8002d50 <HAL_DMA_Init+0x440>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d009      	beq.n	8002c9a <HAL_DMA_Init+0x38a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a32      	ldr	r2, [pc, #200]	; (8002d54 <HAL_DMA_Init+0x444>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d004      	beq.n	8002c9a <HAL_DMA_Init+0x38a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a30      	ldr	r2, [pc, #192]	; (8002d58 <HAL_DMA_Init+0x448>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d101      	bne.n	8002c9e <HAL_DMA_Init+0x38e>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_DMA_Init+0x390>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8097 	beq.w	8002dd4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a24      	ldr	r2, [pc, #144]	; (8002d3c <HAL_DMA_Init+0x42c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d021      	beq.n	8002cf4 <HAL_DMA_Init+0x3e4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <HAL_DMA_Init+0x430>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01c      	beq.n	8002cf4 <HAL_DMA_Init+0x3e4>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a21      	ldr	r2, [pc, #132]	; (8002d44 <HAL_DMA_Init+0x434>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d017      	beq.n	8002cf4 <HAL_DMA_Init+0x3e4>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1f      	ldr	r2, [pc, #124]	; (8002d48 <HAL_DMA_Init+0x438>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d012      	beq.n	8002cf4 <HAL_DMA_Init+0x3e4>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_DMA_Init+0x43c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_DMA_Init+0x3e4>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <HAL_DMA_Init+0x440>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d008      	beq.n	8002cf4 <HAL_DMA_Init+0x3e4>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_DMA_Init+0x444>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA_Init+0x3e4>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <HAL_DMA_Init+0x448>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_DMA_Init+0x44c>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d020      	beq.n	8002d60 <HAL_DMA_Init+0x450>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b80      	cmp	r3, #128	; 0x80
 8002d24:	d102      	bne.n	8002d2c <HAL_DMA_Init+0x41c>
 8002d26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d2a:	e01a      	b.n	8002d62 <HAL_DMA_Init+0x452>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e018      	b.n	8002d62 <HAL_DMA_Init+0x452>
 8002d30:	fe10803f 	.word	0xfe10803f
 8002d34:	5c001000 	.word	0x5c001000
 8002d38:	ffff0000 	.word	0xffff0000
 8002d3c:	58025408 	.word	0x58025408
 8002d40:	5802541c 	.word	0x5802541c
 8002d44:	58025430 	.word	0x58025430
 8002d48:	58025444 	.word	0x58025444
 8002d4c:	58025458 	.word	0x58025458
 8002d50:	5802546c 	.word	0x5802546c
 8002d54:	58025480 	.word	0x58025480
 8002d58:	58025494 	.word	0x58025494
 8002d5c:	fffe000f 	.word	0xfffe000f
 8002d60:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68d2      	ldr	r2, [r2, #12]
 8002d66:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d90:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b6e      	ldr	r3, [pc, #440]	; (8002f60 <HAL_DMA_Init+0x650>)
 8002da8:	4413      	add	r3, r2
 8002daa:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <HAL_DMA_Init+0x654>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f002 f9c1 	bl	8005140 <DMA_CalcBaseAndBitshift>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc6:	f003 031f 	and.w	r3, r3, #31
 8002dca:	2201      	movs	r2, #1
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	e008      	b.n	8002de6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0b7      	b.n	8002f56 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a5f      	ldr	r2, [pc, #380]	; (8002f68 <HAL_DMA_Init+0x658>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d072      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a5d      	ldr	r2, [pc, #372]	; (8002f6c <HAL_DMA_Init+0x65c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d06d      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a5c      	ldr	r2, [pc, #368]	; (8002f70 <HAL_DMA_Init+0x660>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d068      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a5a      	ldr	r2, [pc, #360]	; (8002f74 <HAL_DMA_Init+0x664>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d063      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a59      	ldr	r2, [pc, #356]	; (8002f78 <HAL_DMA_Init+0x668>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d05e      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a57      	ldr	r2, [pc, #348]	; (8002f7c <HAL_DMA_Init+0x66c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d059      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a56      	ldr	r2, [pc, #344]	; (8002f80 <HAL_DMA_Init+0x670>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d054      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a54      	ldr	r2, [pc, #336]	; (8002f84 <HAL_DMA_Init+0x674>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d04f      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a53      	ldr	r2, [pc, #332]	; (8002f88 <HAL_DMA_Init+0x678>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d04a      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a51      	ldr	r2, [pc, #324]	; (8002f8c <HAL_DMA_Init+0x67c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d045      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a50      	ldr	r2, [pc, #320]	; (8002f90 <HAL_DMA_Init+0x680>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d040      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a4e      	ldr	r2, [pc, #312]	; (8002f94 <HAL_DMA_Init+0x684>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d03b      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a4d      	ldr	r2, [pc, #308]	; (8002f98 <HAL_DMA_Init+0x688>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d036      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a4b      	ldr	r2, [pc, #300]	; (8002f9c <HAL_DMA_Init+0x68c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d031      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a4a      	ldr	r2, [pc, #296]	; (8002fa0 <HAL_DMA_Init+0x690>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d02c      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a48      	ldr	r2, [pc, #288]	; (8002fa4 <HAL_DMA_Init+0x694>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d027      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a47      	ldr	r2, [pc, #284]	; (8002fa8 <HAL_DMA_Init+0x698>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d022      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a45      	ldr	r2, [pc, #276]	; (8002fac <HAL_DMA_Init+0x69c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01d      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a44      	ldr	r2, [pc, #272]	; (8002fb0 <HAL_DMA_Init+0x6a0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d018      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a42      	ldr	r2, [pc, #264]	; (8002fb4 <HAL_DMA_Init+0x6a4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a41      	ldr	r2, [pc, #260]	; (8002fb8 <HAL_DMA_Init+0x6a8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a3f      	ldr	r2, [pc, #252]	; (8002fbc <HAL_DMA_Init+0x6ac>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a3e      	ldr	r2, [pc, #248]	; (8002fc0 <HAL_DMA_Init+0x6b0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_DMA_Init+0x5c6>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a3c      	ldr	r2, [pc, #240]	; (8002fc4 <HAL_DMA_Init+0x6b4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d101      	bne.n	8002eda <HAL_DMA_Init+0x5ca>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_DMA_Init+0x5cc>
 8002eda:	2300      	movs	r3, #0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d032      	beq.n	8002f46 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f002 fa5b 	bl	800539c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b80      	cmp	r3, #128	; 0x80
 8002eec:	d102      	bne.n	8002ef4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f08:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d010      	beq.n	8002f34 <HAL_DMA_Init+0x624>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d80c      	bhi.n	8002f34 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f002 fad8 	bl	80054d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	e008      	b.n	8002f46 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	a7fdabf8 	.word	0xa7fdabf8
 8002f64:	cccccccd 	.word	0xcccccccd
 8002f68:	40020010 	.word	0x40020010
 8002f6c:	40020028 	.word	0x40020028
 8002f70:	40020040 	.word	0x40020040
 8002f74:	40020058 	.word	0x40020058
 8002f78:	40020070 	.word	0x40020070
 8002f7c:	40020088 	.word	0x40020088
 8002f80:	400200a0 	.word	0x400200a0
 8002f84:	400200b8 	.word	0x400200b8
 8002f88:	40020410 	.word	0x40020410
 8002f8c:	40020428 	.word	0x40020428
 8002f90:	40020440 	.word	0x40020440
 8002f94:	40020458 	.word	0x40020458
 8002f98:	40020470 	.word	0x40020470
 8002f9c:	40020488 	.word	0x40020488
 8002fa0:	400204a0 	.word	0x400204a0
 8002fa4:	400204b8 	.word	0x400204b8
 8002fa8:	58025408 	.word	0x58025408
 8002fac:	5802541c 	.word	0x5802541c
 8002fb0:	58025430 	.word	0x58025430
 8002fb4:	58025444 	.word	0x58025444
 8002fb8:	58025458 	.word	0x58025458
 8002fbc:	5802546c 	.word	0x5802546c
 8002fc0:	58025480 	.word	0x58025480
 8002fc4:	58025494 	.word	0x58025494

08002fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e226      	b.n	8003432 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_DMA_Start_IT+0x2a>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e21f      	b.n	8003432 <HAL_DMA_Start_IT+0x46a>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	f040 820a 	bne.w	800341c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a68      	ldr	r2, [pc, #416]	; (80031bc <HAL_DMA_Start_IT+0x1f4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d04a      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a66      	ldr	r2, [pc, #408]	; (80031c0 <HAL_DMA_Start_IT+0x1f8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d045      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a65      	ldr	r2, [pc, #404]	; (80031c4 <HAL_DMA_Start_IT+0x1fc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d040      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a63      	ldr	r2, [pc, #396]	; (80031c8 <HAL_DMA_Start_IT+0x200>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d03b      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a62      	ldr	r2, [pc, #392]	; (80031cc <HAL_DMA_Start_IT+0x204>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d036      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a60      	ldr	r2, [pc, #384]	; (80031d0 <HAL_DMA_Start_IT+0x208>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d031      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a5f      	ldr	r2, [pc, #380]	; (80031d4 <HAL_DMA_Start_IT+0x20c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d02c      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a5d      	ldr	r2, [pc, #372]	; (80031d8 <HAL_DMA_Start_IT+0x210>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d027      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a5c      	ldr	r2, [pc, #368]	; (80031dc <HAL_DMA_Start_IT+0x214>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d022      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a5a      	ldr	r2, [pc, #360]	; (80031e0 <HAL_DMA_Start_IT+0x218>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d01d      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a59      	ldr	r2, [pc, #356]	; (80031e4 <HAL_DMA_Start_IT+0x21c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d018      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a57      	ldr	r2, [pc, #348]	; (80031e8 <HAL_DMA_Start_IT+0x220>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d013      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a56      	ldr	r2, [pc, #344]	; (80031ec <HAL_DMA_Start_IT+0x224>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00e      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a54      	ldr	r2, [pc, #336]	; (80031f0 <HAL_DMA_Start_IT+0x228>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d009      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a53      	ldr	r2, [pc, #332]	; (80031f4 <HAL_DMA_Start_IT+0x22c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d004      	beq.n	80030b6 <HAL_DMA_Start_IT+0xee>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a51      	ldr	r2, [pc, #324]	; (80031f8 <HAL_DMA_Start_IT+0x230>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d108      	bne.n	80030c8 <HAL_DMA_Start_IT+0x100>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	e007      	b.n	80030d8 <HAL_DMA_Start_IT+0x110>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f001 fe82 	bl	8004de8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a34      	ldr	r2, [pc, #208]	; (80031bc <HAL_DMA_Start_IT+0x1f4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d04a      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a33      	ldr	r2, [pc, #204]	; (80031c0 <HAL_DMA_Start_IT+0x1f8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d045      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a31      	ldr	r2, [pc, #196]	; (80031c4 <HAL_DMA_Start_IT+0x1fc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d040      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a30      	ldr	r2, [pc, #192]	; (80031c8 <HAL_DMA_Start_IT+0x200>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d03b      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2e      	ldr	r2, [pc, #184]	; (80031cc <HAL_DMA_Start_IT+0x204>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d036      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2d      	ldr	r2, [pc, #180]	; (80031d0 <HAL_DMA_Start_IT+0x208>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d031      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a2b      	ldr	r2, [pc, #172]	; (80031d4 <HAL_DMA_Start_IT+0x20c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02c      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a2a      	ldr	r2, [pc, #168]	; (80031d8 <HAL_DMA_Start_IT+0x210>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d027      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a28      	ldr	r2, [pc, #160]	; (80031dc <HAL_DMA_Start_IT+0x214>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d022      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a27      	ldr	r2, [pc, #156]	; (80031e0 <HAL_DMA_Start_IT+0x218>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d01d      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a25      	ldr	r2, [pc, #148]	; (80031e4 <HAL_DMA_Start_IT+0x21c>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d018      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a24      	ldr	r2, [pc, #144]	; (80031e8 <HAL_DMA_Start_IT+0x220>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d013      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a22      	ldr	r2, [pc, #136]	; (80031ec <HAL_DMA_Start_IT+0x224>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00e      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <HAL_DMA_Start_IT+0x228>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <HAL_DMA_Start_IT+0x22c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_DMA_Start_IT+0x1bc>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1e      	ldr	r2, [pc, #120]	; (80031f8 <HAL_DMA_Start_IT+0x230>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d101      	bne.n	8003188 <HAL_DMA_Start_IT+0x1c0>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_DMA_Start_IT+0x1c2>
 8003188:	2300      	movs	r3, #0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d036      	beq.n	80031fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 021e 	bic.w	r2, r3, #30
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0216 	orr.w	r2, r2, #22
 80031a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03e      	beq.n	8003228 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0208 	orr.w	r2, r2, #8
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e035      	b.n	8003228 <HAL_DMA_Start_IT+0x260>
 80031bc:	40020010 	.word	0x40020010
 80031c0:	40020028 	.word	0x40020028
 80031c4:	40020040 	.word	0x40020040
 80031c8:	40020058 	.word	0x40020058
 80031cc:	40020070 	.word	0x40020070
 80031d0:	40020088 	.word	0x40020088
 80031d4:	400200a0 	.word	0x400200a0
 80031d8:	400200b8 	.word	0x400200b8
 80031dc:	40020410 	.word	0x40020410
 80031e0:	40020428 	.word	0x40020428
 80031e4:	40020440 	.word	0x40020440
 80031e8:	40020458 	.word	0x40020458
 80031ec:	40020470 	.word	0x40020470
 80031f0:	40020488 	.word	0x40020488
 80031f4:	400204a0 	.word	0x400204a0
 80031f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 020e 	bic.w	r2, r3, #14
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 020a 	orr.w	r2, r2, #10
 800320e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0204 	orr.w	r2, r2, #4
 8003226:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a83      	ldr	r2, [pc, #524]	; (800343c <HAL_DMA_Start_IT+0x474>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d072      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a82      	ldr	r2, [pc, #520]	; (8003440 <HAL_DMA_Start_IT+0x478>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d06d      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a80      	ldr	r2, [pc, #512]	; (8003444 <HAL_DMA_Start_IT+0x47c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d068      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a7f      	ldr	r2, [pc, #508]	; (8003448 <HAL_DMA_Start_IT+0x480>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d063      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7d      	ldr	r2, [pc, #500]	; (800344c <HAL_DMA_Start_IT+0x484>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d05e      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7c      	ldr	r2, [pc, #496]	; (8003450 <HAL_DMA_Start_IT+0x488>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d059      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a7a      	ldr	r2, [pc, #488]	; (8003454 <HAL_DMA_Start_IT+0x48c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d054      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a79      	ldr	r2, [pc, #484]	; (8003458 <HAL_DMA_Start_IT+0x490>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d04f      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a77      	ldr	r2, [pc, #476]	; (800345c <HAL_DMA_Start_IT+0x494>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d04a      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a76      	ldr	r2, [pc, #472]	; (8003460 <HAL_DMA_Start_IT+0x498>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d045      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a74      	ldr	r2, [pc, #464]	; (8003464 <HAL_DMA_Start_IT+0x49c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d040      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a73      	ldr	r2, [pc, #460]	; (8003468 <HAL_DMA_Start_IT+0x4a0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d03b      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a71      	ldr	r2, [pc, #452]	; (800346c <HAL_DMA_Start_IT+0x4a4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d036      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a70      	ldr	r2, [pc, #448]	; (8003470 <HAL_DMA_Start_IT+0x4a8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d031      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a6e      	ldr	r2, [pc, #440]	; (8003474 <HAL_DMA_Start_IT+0x4ac>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d02c      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6d      	ldr	r2, [pc, #436]	; (8003478 <HAL_DMA_Start_IT+0x4b0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d027      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a6b      	ldr	r2, [pc, #428]	; (800347c <HAL_DMA_Start_IT+0x4b4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d022      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a6a      	ldr	r2, [pc, #424]	; (8003480 <HAL_DMA_Start_IT+0x4b8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d01d      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a68      	ldr	r2, [pc, #416]	; (8003484 <HAL_DMA_Start_IT+0x4bc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d018      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a67      	ldr	r2, [pc, #412]	; (8003488 <HAL_DMA_Start_IT+0x4c0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d013      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a65      	ldr	r2, [pc, #404]	; (800348c <HAL_DMA_Start_IT+0x4c4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00e      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a64      	ldr	r2, [pc, #400]	; (8003490 <HAL_DMA_Start_IT+0x4c8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d009      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a62      	ldr	r2, [pc, #392]	; (8003494 <HAL_DMA_Start_IT+0x4cc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d004      	beq.n	8003318 <HAL_DMA_Start_IT+0x350>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a61      	ldr	r2, [pc, #388]	; (8003498 <HAL_DMA_Start_IT+0x4d0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d101      	bne.n	800331c <HAL_DMA_Start_IT+0x354>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_DMA_Start_IT+0x356>
 800331c:	2300      	movs	r3, #0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01a      	beq.n	8003358 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800333a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800333e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003352:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003356:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a37      	ldr	r2, [pc, #220]	; (800343c <HAL_DMA_Start_IT+0x474>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d04a      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a36      	ldr	r2, [pc, #216]	; (8003440 <HAL_DMA_Start_IT+0x478>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d045      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a34      	ldr	r2, [pc, #208]	; (8003444 <HAL_DMA_Start_IT+0x47c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d040      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a33      	ldr	r2, [pc, #204]	; (8003448 <HAL_DMA_Start_IT+0x480>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d03b      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a31      	ldr	r2, [pc, #196]	; (800344c <HAL_DMA_Start_IT+0x484>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d036      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a30      	ldr	r2, [pc, #192]	; (8003450 <HAL_DMA_Start_IT+0x488>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d031      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a2e      	ldr	r2, [pc, #184]	; (8003454 <HAL_DMA_Start_IT+0x48c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d02c      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a2d      	ldr	r2, [pc, #180]	; (8003458 <HAL_DMA_Start_IT+0x490>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d027      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a2b      	ldr	r2, [pc, #172]	; (800345c <HAL_DMA_Start_IT+0x494>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d022      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2a      	ldr	r2, [pc, #168]	; (8003460 <HAL_DMA_Start_IT+0x498>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d01d      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a28      	ldr	r2, [pc, #160]	; (8003464 <HAL_DMA_Start_IT+0x49c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d018      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a27      	ldr	r2, [pc, #156]	; (8003468 <HAL_DMA_Start_IT+0x4a0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a25      	ldr	r2, [pc, #148]	; (800346c <HAL_DMA_Start_IT+0x4a4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a24      	ldr	r2, [pc, #144]	; (8003470 <HAL_DMA_Start_IT+0x4a8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a22      	ldr	r2, [pc, #136]	; (8003474 <HAL_DMA_Start_IT+0x4ac>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_DMA_Start_IT+0x430>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a21      	ldr	r2, [pc, #132]	; (8003478 <HAL_DMA_Start_IT+0x4b0>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d108      	bne.n	800340a <HAL_DMA_Start_IT+0x442>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e012      	b.n	8003430 <HAL_DMA_Start_IT+0x468>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0201 	orr.w	r2, r2, #1
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e009      	b.n	8003430 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800342a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003430:	7dfb      	ldrb	r3, [r7, #23]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40020010 	.word	0x40020010
 8003440:	40020028 	.word	0x40020028
 8003444:	40020040 	.word	0x40020040
 8003448:	40020058 	.word	0x40020058
 800344c:	40020070 	.word	0x40020070
 8003450:	40020088 	.word	0x40020088
 8003454:	400200a0 	.word	0x400200a0
 8003458:	400200b8 	.word	0x400200b8
 800345c:	40020410 	.word	0x40020410
 8003460:	40020428 	.word	0x40020428
 8003464:	40020440 	.word	0x40020440
 8003468:	40020458 	.word	0x40020458
 800346c:	40020470 	.word	0x40020470
 8003470:	40020488 	.word	0x40020488
 8003474:	400204a0 	.word	0x400204a0
 8003478:	400204b8 	.word	0x400204b8
 800347c:	58025408 	.word	0x58025408
 8003480:	5802541c 	.word	0x5802541c
 8003484:	58025430 	.word	0x58025430
 8003488:	58025444 	.word	0x58025444
 800348c:	58025458 	.word	0x58025458
 8003490:	5802546c 	.word	0x5802546c
 8003494:	58025480 	.word	0x58025480
 8003498:	58025494 	.word	0x58025494

0800349c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80034a4:	f7ff f8e8 	bl	8002678 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e2dc      	b.n	8003a6e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d008      	beq.n	80034d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e2cd      	b.n	8003a6e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a76      	ldr	r2, [pc, #472]	; (80036b0 <HAL_DMA_Abort+0x214>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d04a      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a74      	ldr	r2, [pc, #464]	; (80036b4 <HAL_DMA_Abort+0x218>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d045      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a73      	ldr	r2, [pc, #460]	; (80036b8 <HAL_DMA_Abort+0x21c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d040      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a71      	ldr	r2, [pc, #452]	; (80036bc <HAL_DMA_Abort+0x220>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d03b      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a70      	ldr	r2, [pc, #448]	; (80036c0 <HAL_DMA_Abort+0x224>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d036      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a6e      	ldr	r2, [pc, #440]	; (80036c4 <HAL_DMA_Abort+0x228>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d031      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6d      	ldr	r2, [pc, #436]	; (80036c8 <HAL_DMA_Abort+0x22c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d02c      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6b      	ldr	r2, [pc, #428]	; (80036cc <HAL_DMA_Abort+0x230>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d027      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a6a      	ldr	r2, [pc, #424]	; (80036d0 <HAL_DMA_Abort+0x234>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d022      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a68      	ldr	r2, [pc, #416]	; (80036d4 <HAL_DMA_Abort+0x238>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01d      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a67      	ldr	r2, [pc, #412]	; (80036d8 <HAL_DMA_Abort+0x23c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d018      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a65      	ldr	r2, [pc, #404]	; (80036dc <HAL_DMA_Abort+0x240>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a64      	ldr	r2, [pc, #400]	; (80036e0 <HAL_DMA_Abort+0x244>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00e      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a62      	ldr	r2, [pc, #392]	; (80036e4 <HAL_DMA_Abort+0x248>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d009      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a61      	ldr	r2, [pc, #388]	; (80036e8 <HAL_DMA_Abort+0x24c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d004      	beq.n	8003572 <HAL_DMA_Abort+0xd6>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5f      	ldr	r2, [pc, #380]	; (80036ec <HAL_DMA_Abort+0x250>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_DMA_Abort+0xda>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_DMA_Abort+0xdc>
 8003576:	2300      	movs	r3, #0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 021e 	bic.w	r2, r2, #30
 800358a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	e00a      	b.n	80035ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 020e 	bic.w	r2, r2, #14
 80035b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a3c      	ldr	r2, [pc, #240]	; (80036b0 <HAL_DMA_Abort+0x214>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d072      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a3a      	ldr	r2, [pc, #232]	; (80036b4 <HAL_DMA_Abort+0x218>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d06d      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a39      	ldr	r2, [pc, #228]	; (80036b8 <HAL_DMA_Abort+0x21c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d068      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a37      	ldr	r2, [pc, #220]	; (80036bc <HAL_DMA_Abort+0x220>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d063      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a36      	ldr	r2, [pc, #216]	; (80036c0 <HAL_DMA_Abort+0x224>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d05e      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a34      	ldr	r2, [pc, #208]	; (80036c4 <HAL_DMA_Abort+0x228>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d059      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a33      	ldr	r2, [pc, #204]	; (80036c8 <HAL_DMA_Abort+0x22c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d054      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a31      	ldr	r2, [pc, #196]	; (80036cc <HAL_DMA_Abort+0x230>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d04f      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a30      	ldr	r2, [pc, #192]	; (80036d0 <HAL_DMA_Abort+0x234>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d04a      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a2e      	ldr	r2, [pc, #184]	; (80036d4 <HAL_DMA_Abort+0x238>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d045      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a2d      	ldr	r2, [pc, #180]	; (80036d8 <HAL_DMA_Abort+0x23c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d040      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2b      	ldr	r2, [pc, #172]	; (80036dc <HAL_DMA_Abort+0x240>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d03b      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <HAL_DMA_Abort+0x244>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d036      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a28      	ldr	r2, [pc, #160]	; (80036e4 <HAL_DMA_Abort+0x248>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d031      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <HAL_DMA_Abort+0x24c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d02c      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a25      	ldr	r2, [pc, #148]	; (80036ec <HAL_DMA_Abort+0x250>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d027      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <HAL_DMA_Abort+0x254>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d022      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <HAL_DMA_Abort+0x258>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d01d      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <HAL_DMA_Abort+0x25c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d018      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_DMA_Abort+0x260>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1e      	ldr	r2, [pc, #120]	; (8003700 <HAL_DMA_Abort+0x264>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00e      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1c      	ldr	r2, [pc, #112]	; (8003704 <HAL_DMA_Abort+0x268>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d009      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_DMA_Abort+0x26c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d004      	beq.n	80036aa <HAL_DMA_Abort+0x20e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <HAL_DMA_Abort+0x270>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d132      	bne.n	8003710 <HAL_DMA_Abort+0x274>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e031      	b.n	8003712 <HAL_DMA_Abort+0x276>
 80036ae:	bf00      	nop
 80036b0:	40020010 	.word	0x40020010
 80036b4:	40020028 	.word	0x40020028
 80036b8:	40020040 	.word	0x40020040
 80036bc:	40020058 	.word	0x40020058
 80036c0:	40020070 	.word	0x40020070
 80036c4:	40020088 	.word	0x40020088
 80036c8:	400200a0 	.word	0x400200a0
 80036cc:	400200b8 	.word	0x400200b8
 80036d0:	40020410 	.word	0x40020410
 80036d4:	40020428 	.word	0x40020428
 80036d8:	40020440 	.word	0x40020440
 80036dc:	40020458 	.word	0x40020458
 80036e0:	40020470 	.word	0x40020470
 80036e4:	40020488 	.word	0x40020488
 80036e8:	400204a0 	.word	0x400204a0
 80036ec:	400204b8 	.word	0x400204b8
 80036f0:	58025408 	.word	0x58025408
 80036f4:	5802541c 	.word	0x5802541c
 80036f8:	58025430 	.word	0x58025430
 80036fc:	58025444 	.word	0x58025444
 8003700:	58025458 	.word	0x58025458
 8003704:	5802546c 	.word	0x5802546c
 8003708:	58025480 	.word	0x58025480
 800370c:	58025494 	.word	0x58025494
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003724:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6d      	ldr	r2, [pc, #436]	; (80038e0 <HAL_DMA_Abort+0x444>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d04a      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a6b      	ldr	r2, [pc, #428]	; (80038e4 <HAL_DMA_Abort+0x448>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d045      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a6a      	ldr	r2, [pc, #424]	; (80038e8 <HAL_DMA_Abort+0x44c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d040      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a68      	ldr	r2, [pc, #416]	; (80038ec <HAL_DMA_Abort+0x450>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d03b      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a67      	ldr	r2, [pc, #412]	; (80038f0 <HAL_DMA_Abort+0x454>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d036      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a65      	ldr	r2, [pc, #404]	; (80038f4 <HAL_DMA_Abort+0x458>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d031      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a64      	ldr	r2, [pc, #400]	; (80038f8 <HAL_DMA_Abort+0x45c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d02c      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a62      	ldr	r2, [pc, #392]	; (80038fc <HAL_DMA_Abort+0x460>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d027      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a61      	ldr	r2, [pc, #388]	; (8003900 <HAL_DMA_Abort+0x464>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d022      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a5f      	ldr	r2, [pc, #380]	; (8003904 <HAL_DMA_Abort+0x468>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01d      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a5e      	ldr	r2, [pc, #376]	; (8003908 <HAL_DMA_Abort+0x46c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d018      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a5c      	ldr	r2, [pc, #368]	; (800390c <HAL_DMA_Abort+0x470>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a5b      	ldr	r2, [pc, #364]	; (8003910 <HAL_DMA_Abort+0x474>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00e      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a59      	ldr	r2, [pc, #356]	; (8003914 <HAL_DMA_Abort+0x478>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d009      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a58      	ldr	r2, [pc, #352]	; (8003918 <HAL_DMA_Abort+0x47c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_DMA_Abort+0x32a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a56      	ldr	r2, [pc, #344]	; (800391c <HAL_DMA_Abort+0x480>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d108      	bne.n	80037d8 <HAL_DMA_Abort+0x33c>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0201 	bic.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e007      	b.n	80037e8 <HAL_DMA_Abort+0x34c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80037e8:	e013      	b.n	8003812 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ea:	f7fe ff45 	bl	8002678 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b05      	cmp	r3, #5
 80037f6:	d90c      	bls.n	8003812 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2220      	movs	r2, #32
 80037fc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2203      	movs	r2, #3
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e12d      	b.n	8003a6e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e5      	bne.n	80037ea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a2f      	ldr	r2, [pc, #188]	; (80038e0 <HAL_DMA_Abort+0x444>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d04a      	beq.n	80038be <HAL_DMA_Abort+0x422>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2d      	ldr	r2, [pc, #180]	; (80038e4 <HAL_DMA_Abort+0x448>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d045      	beq.n	80038be <HAL_DMA_Abort+0x422>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a2c      	ldr	r2, [pc, #176]	; (80038e8 <HAL_DMA_Abort+0x44c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d040      	beq.n	80038be <HAL_DMA_Abort+0x422>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2a      	ldr	r2, [pc, #168]	; (80038ec <HAL_DMA_Abort+0x450>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d03b      	beq.n	80038be <HAL_DMA_Abort+0x422>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a29      	ldr	r2, [pc, #164]	; (80038f0 <HAL_DMA_Abort+0x454>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d036      	beq.n	80038be <HAL_DMA_Abort+0x422>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a27      	ldr	r2, [pc, #156]	; (80038f4 <HAL_DMA_Abort+0x458>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d031      	beq.n	80038be <HAL_DMA_Abort+0x422>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a26      	ldr	r2, [pc, #152]	; (80038f8 <HAL_DMA_Abort+0x45c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d02c      	beq.n	80038be <HAL_DMA_Abort+0x422>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a24      	ldr	r2, [pc, #144]	; (80038fc <HAL_DMA_Abort+0x460>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d027      	beq.n	80038be <HAL_DMA_Abort+0x422>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a23      	ldr	r2, [pc, #140]	; (8003900 <HAL_DMA_Abort+0x464>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d022      	beq.n	80038be <HAL_DMA_Abort+0x422>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a21      	ldr	r2, [pc, #132]	; (8003904 <HAL_DMA_Abort+0x468>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d01d      	beq.n	80038be <HAL_DMA_Abort+0x422>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a20      	ldr	r2, [pc, #128]	; (8003908 <HAL_DMA_Abort+0x46c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <HAL_DMA_Abort+0x422>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1e      	ldr	r2, [pc, #120]	; (800390c <HAL_DMA_Abort+0x470>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_DMA_Abort+0x422>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <HAL_DMA_Abort+0x474>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00e      	beq.n	80038be <HAL_DMA_Abort+0x422>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <HAL_DMA_Abort+0x478>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d009      	beq.n	80038be <HAL_DMA_Abort+0x422>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1a      	ldr	r2, [pc, #104]	; (8003918 <HAL_DMA_Abort+0x47c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_DMA_Abort+0x422>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a18      	ldr	r2, [pc, #96]	; (800391c <HAL_DMA_Abort+0x480>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_DMA_Abort+0x426>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <HAL_DMA_Abort+0x428>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d02b      	beq.n	8003920 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	223f      	movs	r2, #63	; 0x3f
 80038d8:	409a      	lsls	r2, r3
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	609a      	str	r2, [r3, #8]
 80038de:	e02a      	b.n	8003936 <HAL_DMA_Abort+0x49a>
 80038e0:	40020010 	.word	0x40020010
 80038e4:	40020028 	.word	0x40020028
 80038e8:	40020040 	.word	0x40020040
 80038ec:	40020058 	.word	0x40020058
 80038f0:	40020070 	.word	0x40020070
 80038f4:	40020088 	.word	0x40020088
 80038f8:	400200a0 	.word	0x400200a0
 80038fc:	400200b8 	.word	0x400200b8
 8003900:	40020410 	.word	0x40020410
 8003904:	40020428 	.word	0x40020428
 8003908:	40020440 	.word	0x40020440
 800390c:	40020458 	.word	0x40020458
 8003910:	40020470 	.word	0x40020470
 8003914:	40020488 	.word	0x40020488
 8003918:	400204a0 	.word	0x400204a0
 800391c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	f003 031f 	and.w	r3, r3, #31
 800392e:	2201      	movs	r2, #1
 8003930:	409a      	lsls	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a4f      	ldr	r2, [pc, #316]	; (8003a78 <HAL_DMA_Abort+0x5dc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d072      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a4d      	ldr	r2, [pc, #308]	; (8003a7c <HAL_DMA_Abort+0x5e0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d06d      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a4c      	ldr	r2, [pc, #304]	; (8003a80 <HAL_DMA_Abort+0x5e4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d068      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a4a      	ldr	r2, [pc, #296]	; (8003a84 <HAL_DMA_Abort+0x5e8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d063      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a49      	ldr	r2, [pc, #292]	; (8003a88 <HAL_DMA_Abort+0x5ec>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d05e      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a47      	ldr	r2, [pc, #284]	; (8003a8c <HAL_DMA_Abort+0x5f0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d059      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a46      	ldr	r2, [pc, #280]	; (8003a90 <HAL_DMA_Abort+0x5f4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d054      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a44      	ldr	r2, [pc, #272]	; (8003a94 <HAL_DMA_Abort+0x5f8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d04f      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a43      	ldr	r2, [pc, #268]	; (8003a98 <HAL_DMA_Abort+0x5fc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d04a      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a41      	ldr	r2, [pc, #260]	; (8003a9c <HAL_DMA_Abort+0x600>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d045      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a40      	ldr	r2, [pc, #256]	; (8003aa0 <HAL_DMA_Abort+0x604>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d040      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a3e      	ldr	r2, [pc, #248]	; (8003aa4 <HAL_DMA_Abort+0x608>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d03b      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a3d      	ldr	r2, [pc, #244]	; (8003aa8 <HAL_DMA_Abort+0x60c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d036      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a3b      	ldr	r2, [pc, #236]	; (8003aac <HAL_DMA_Abort+0x610>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d031      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a3a      	ldr	r2, [pc, #232]	; (8003ab0 <HAL_DMA_Abort+0x614>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d02c      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a38      	ldr	r2, [pc, #224]	; (8003ab4 <HAL_DMA_Abort+0x618>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d027      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a37      	ldr	r2, [pc, #220]	; (8003ab8 <HAL_DMA_Abort+0x61c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d022      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a35      	ldr	r2, [pc, #212]	; (8003abc <HAL_DMA_Abort+0x620>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01d      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a34      	ldr	r2, [pc, #208]	; (8003ac0 <HAL_DMA_Abort+0x624>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d018      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a32      	ldr	r2, [pc, #200]	; (8003ac4 <HAL_DMA_Abort+0x628>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a31      	ldr	r2, [pc, #196]	; (8003ac8 <HAL_DMA_Abort+0x62c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2f      	ldr	r2, [pc, #188]	; (8003acc <HAL_DMA_Abort+0x630>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a2e      	ldr	r2, [pc, #184]	; (8003ad0 <HAL_DMA_Abort+0x634>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_DMA_Abort+0x58a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <HAL_DMA_Abort+0x638>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_DMA_Abort+0x58e>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_DMA_Abort+0x590>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a38:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00c      	beq.n	8003a5c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a50:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a5a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40020010 	.word	0x40020010
 8003a7c:	40020028 	.word	0x40020028
 8003a80:	40020040 	.word	0x40020040
 8003a84:	40020058 	.word	0x40020058
 8003a88:	40020070 	.word	0x40020070
 8003a8c:	40020088 	.word	0x40020088
 8003a90:	400200a0 	.word	0x400200a0
 8003a94:	400200b8 	.word	0x400200b8
 8003a98:	40020410 	.word	0x40020410
 8003a9c:	40020428 	.word	0x40020428
 8003aa0:	40020440 	.word	0x40020440
 8003aa4:	40020458 	.word	0x40020458
 8003aa8:	40020470 	.word	0x40020470
 8003aac:	40020488 	.word	0x40020488
 8003ab0:	400204a0 	.word	0x400204a0
 8003ab4:	400204b8 	.word	0x400204b8
 8003ab8:	58025408 	.word	0x58025408
 8003abc:	5802541c 	.word	0x5802541c
 8003ac0:	58025430 	.word	0x58025430
 8003ac4:	58025444 	.word	0x58025444
 8003ac8:	58025458 	.word	0x58025458
 8003acc:	5802546c 	.word	0x5802546c
 8003ad0:	58025480 	.word	0x58025480
 8003ad4:	58025494 	.word	0x58025494

08003ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e205      	b.n	8003ef6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d004      	beq.n	8003b00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2280      	movs	r2, #128	; 0x80
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e1fa      	b.n	8003ef6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a8c      	ldr	r2, [pc, #560]	; (8003d38 <HAL_DMA_Abort_IT+0x260>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d04a      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a8b      	ldr	r2, [pc, #556]	; (8003d3c <HAL_DMA_Abort_IT+0x264>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d045      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a89      	ldr	r2, [pc, #548]	; (8003d40 <HAL_DMA_Abort_IT+0x268>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d040      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a88      	ldr	r2, [pc, #544]	; (8003d44 <HAL_DMA_Abort_IT+0x26c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d03b      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a86      	ldr	r2, [pc, #536]	; (8003d48 <HAL_DMA_Abort_IT+0x270>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d036      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a85      	ldr	r2, [pc, #532]	; (8003d4c <HAL_DMA_Abort_IT+0x274>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d031      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a83      	ldr	r2, [pc, #524]	; (8003d50 <HAL_DMA_Abort_IT+0x278>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d02c      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a82      	ldr	r2, [pc, #520]	; (8003d54 <HAL_DMA_Abort_IT+0x27c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d027      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a80      	ldr	r2, [pc, #512]	; (8003d58 <HAL_DMA_Abort_IT+0x280>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d022      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a7f      	ldr	r2, [pc, #508]	; (8003d5c <HAL_DMA_Abort_IT+0x284>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d01d      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a7d      	ldr	r2, [pc, #500]	; (8003d60 <HAL_DMA_Abort_IT+0x288>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d018      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a7c      	ldr	r2, [pc, #496]	; (8003d64 <HAL_DMA_Abort_IT+0x28c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d013      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a7a      	ldr	r2, [pc, #488]	; (8003d68 <HAL_DMA_Abort_IT+0x290>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00e      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a79      	ldr	r2, [pc, #484]	; (8003d6c <HAL_DMA_Abort_IT+0x294>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a77      	ldr	r2, [pc, #476]	; (8003d70 <HAL_DMA_Abort_IT+0x298>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0xc8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a76      	ldr	r2, [pc, #472]	; (8003d74 <HAL_DMA_Abort_IT+0x29c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <HAL_DMA_Abort_IT+0xcc>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_DMA_Abort_IT+0xce>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d065      	beq.n	8003c76 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2204      	movs	r2, #4
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a60      	ldr	r2, [pc, #384]	; (8003d38 <HAL_DMA_Abort_IT+0x260>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04a      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a5e      	ldr	r2, [pc, #376]	; (8003d3c <HAL_DMA_Abort_IT+0x264>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d045      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a5d      	ldr	r2, [pc, #372]	; (8003d40 <HAL_DMA_Abort_IT+0x268>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d040      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a5b      	ldr	r2, [pc, #364]	; (8003d44 <HAL_DMA_Abort_IT+0x26c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a5a      	ldr	r2, [pc, #360]	; (8003d48 <HAL_DMA_Abort_IT+0x270>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d036      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a58      	ldr	r2, [pc, #352]	; (8003d4c <HAL_DMA_Abort_IT+0x274>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d031      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a57      	ldr	r2, [pc, #348]	; (8003d50 <HAL_DMA_Abort_IT+0x278>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02c      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a55      	ldr	r2, [pc, #340]	; (8003d54 <HAL_DMA_Abort_IT+0x27c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d027      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a54      	ldr	r2, [pc, #336]	; (8003d58 <HAL_DMA_Abort_IT+0x280>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a52      	ldr	r2, [pc, #328]	; (8003d5c <HAL_DMA_Abort_IT+0x284>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a51      	ldr	r2, [pc, #324]	; (8003d60 <HAL_DMA_Abort_IT+0x288>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a4f      	ldr	r2, [pc, #316]	; (8003d64 <HAL_DMA_Abort_IT+0x28c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a4e      	ldr	r2, [pc, #312]	; (8003d68 <HAL_DMA_Abort_IT+0x290>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a4c      	ldr	r2, [pc, #304]	; (8003d6c <HAL_DMA_Abort_IT+0x294>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a4b      	ldr	r2, [pc, #300]	; (8003d70 <HAL_DMA_Abort_IT+0x298>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x17a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a49      	ldr	r2, [pc, #292]	; (8003d74 <HAL_DMA_Abort_IT+0x29c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <HAL_DMA_Abort_IT+0x18c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e147      	b.n	8003ef4 <HAL_DMA_Abort_IT+0x41c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e13e      	b.n	8003ef4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 020e 	bic.w	r2, r2, #14
 8003c84:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2b      	ldr	r2, [pc, #172]	; (8003d38 <HAL_DMA_Abort_IT+0x260>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d04a      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <HAL_DMA_Abort_IT+0x264>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d045      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a28      	ldr	r2, [pc, #160]	; (8003d40 <HAL_DMA_Abort_IT+0x268>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d040      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <HAL_DMA_Abort_IT+0x26c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d03b      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a25      	ldr	r2, [pc, #148]	; (8003d48 <HAL_DMA_Abort_IT+0x270>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d036      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a23      	ldr	r2, [pc, #140]	; (8003d4c <HAL_DMA_Abort_IT+0x274>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a22      	ldr	r2, [pc, #136]	; (8003d50 <HAL_DMA_Abort_IT+0x278>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d02c      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a20      	ldr	r2, [pc, #128]	; (8003d54 <HAL_DMA_Abort_IT+0x27c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d027      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <HAL_DMA_Abort_IT+0x280>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <HAL_DMA_Abort_IT+0x284>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d01d      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_DMA_Abort_IT+0x288>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <HAL_DMA_Abort_IT+0x28c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_DMA_Abort_IT+0x290>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a17      	ldr	r2, [pc, #92]	; (8003d6c <HAL_DMA_Abort_IT+0x294>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <HAL_DMA_Abort_IT+0x298>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_DMA_Abort_IT+0x24e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a14      	ldr	r2, [pc, #80]	; (8003d74 <HAL_DMA_Abort_IT+0x29c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d128      	bne.n	8003d78 <HAL_DMA_Abort_IT+0x2a0>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0201 	bic.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e027      	b.n	8003d88 <HAL_DMA_Abort_IT+0x2b0>
 8003d38:	40020010 	.word	0x40020010
 8003d3c:	40020028 	.word	0x40020028
 8003d40:	40020040 	.word	0x40020040
 8003d44:	40020058 	.word	0x40020058
 8003d48:	40020070 	.word	0x40020070
 8003d4c:	40020088 	.word	0x40020088
 8003d50:	400200a0 	.word	0x400200a0
 8003d54:	400200b8 	.word	0x400200b8
 8003d58:	40020410 	.word	0x40020410
 8003d5c:	40020428 	.word	0x40020428
 8003d60:	40020440 	.word	0x40020440
 8003d64:	40020458 	.word	0x40020458
 8003d68:	40020470 	.word	0x40020470
 8003d6c:	40020488 	.word	0x40020488
 8003d70:	400204a0 	.word	0x400204a0
 8003d74:	400204b8 	.word	0x400204b8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a5c      	ldr	r2, [pc, #368]	; (8003f00 <HAL_DMA_Abort_IT+0x428>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d072      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a5b      	ldr	r2, [pc, #364]	; (8003f04 <HAL_DMA_Abort_IT+0x42c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d06d      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a59      	ldr	r2, [pc, #356]	; (8003f08 <HAL_DMA_Abort_IT+0x430>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d068      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a58      	ldr	r2, [pc, #352]	; (8003f0c <HAL_DMA_Abort_IT+0x434>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d063      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a56      	ldr	r2, [pc, #344]	; (8003f10 <HAL_DMA_Abort_IT+0x438>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d05e      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a55      	ldr	r2, [pc, #340]	; (8003f14 <HAL_DMA_Abort_IT+0x43c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d059      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a53      	ldr	r2, [pc, #332]	; (8003f18 <HAL_DMA_Abort_IT+0x440>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d054      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a52      	ldr	r2, [pc, #328]	; (8003f1c <HAL_DMA_Abort_IT+0x444>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d04f      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a50      	ldr	r2, [pc, #320]	; (8003f20 <HAL_DMA_Abort_IT+0x448>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d04a      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <HAL_DMA_Abort_IT+0x44c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d045      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a4d      	ldr	r2, [pc, #308]	; (8003f28 <HAL_DMA_Abort_IT+0x450>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d040      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a4c      	ldr	r2, [pc, #304]	; (8003f2c <HAL_DMA_Abort_IT+0x454>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d03b      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a4a      	ldr	r2, [pc, #296]	; (8003f30 <HAL_DMA_Abort_IT+0x458>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d036      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a49      	ldr	r2, [pc, #292]	; (8003f34 <HAL_DMA_Abort_IT+0x45c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d031      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a47      	ldr	r2, [pc, #284]	; (8003f38 <HAL_DMA_Abort_IT+0x460>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d02c      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a46      	ldr	r2, [pc, #280]	; (8003f3c <HAL_DMA_Abort_IT+0x464>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d027      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a44      	ldr	r2, [pc, #272]	; (8003f40 <HAL_DMA_Abort_IT+0x468>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d022      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a43      	ldr	r2, [pc, #268]	; (8003f44 <HAL_DMA_Abort_IT+0x46c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d01d      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a41      	ldr	r2, [pc, #260]	; (8003f48 <HAL_DMA_Abort_IT+0x470>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d018      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a40      	ldr	r2, [pc, #256]	; (8003f4c <HAL_DMA_Abort_IT+0x474>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d013      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a3e      	ldr	r2, [pc, #248]	; (8003f50 <HAL_DMA_Abort_IT+0x478>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00e      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a3d      	ldr	r2, [pc, #244]	; (8003f54 <HAL_DMA_Abort_IT+0x47c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a3b      	ldr	r2, [pc, #236]	; (8003f58 <HAL_DMA_Abort_IT+0x480>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x3a0>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a3a      	ldr	r2, [pc, #232]	; (8003f5c <HAL_DMA_Abort_IT+0x484>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d101      	bne.n	8003e7c <HAL_DMA_Abort_IT+0x3a4>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_DMA_Abort_IT+0x3a6>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d028      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e90:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e96:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	f003 031f 	and.w	r3, r3, #31
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003eb0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00c      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ed2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40020010 	.word	0x40020010
 8003f04:	40020028 	.word	0x40020028
 8003f08:	40020040 	.word	0x40020040
 8003f0c:	40020058 	.word	0x40020058
 8003f10:	40020070 	.word	0x40020070
 8003f14:	40020088 	.word	0x40020088
 8003f18:	400200a0 	.word	0x400200a0
 8003f1c:	400200b8 	.word	0x400200b8
 8003f20:	40020410 	.word	0x40020410
 8003f24:	40020428 	.word	0x40020428
 8003f28:	40020440 	.word	0x40020440
 8003f2c:	40020458 	.word	0x40020458
 8003f30:	40020470 	.word	0x40020470
 8003f34:	40020488 	.word	0x40020488
 8003f38:	400204a0 	.word	0x400204a0
 8003f3c:	400204b8 	.word	0x400204b8
 8003f40:	58025408 	.word	0x58025408
 8003f44:	5802541c 	.word	0x5802541c
 8003f48:	58025430 	.word	0x58025430
 8003f4c:	58025444 	.word	0x58025444
 8003f50:	58025458 	.word	0x58025458
 8003f54:	5802546c 	.word	0x5802546c
 8003f58:	58025480 	.word	0x58025480
 8003f5c:	58025494 	.word	0x58025494

08003f60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b08a      	sub	sp, #40	; 0x28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f6c:	4b67      	ldr	r3, [pc, #412]	; (800410c <HAL_DMA_IRQHandler+0x1ac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a67      	ldr	r2, [pc, #412]	; (8004110 <HAL_DMA_IRQHandler+0x1b0>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	0a9b      	lsrs	r3, r3, #10
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a5f      	ldr	r2, [pc, #380]	; (8004114 <HAL_DMA_IRQHandler+0x1b4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d04a      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a5d      	ldr	r2, [pc, #372]	; (8004118 <HAL_DMA_IRQHandler+0x1b8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d045      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5c      	ldr	r2, [pc, #368]	; (800411c <HAL_DMA_IRQHandler+0x1bc>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d040      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a5a      	ldr	r2, [pc, #360]	; (8004120 <HAL_DMA_IRQHandler+0x1c0>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d03b      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a59      	ldr	r2, [pc, #356]	; (8004124 <HAL_DMA_IRQHandler+0x1c4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d036      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a57      	ldr	r2, [pc, #348]	; (8004128 <HAL_DMA_IRQHandler+0x1c8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d031      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a56      	ldr	r2, [pc, #344]	; (800412c <HAL_DMA_IRQHandler+0x1cc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d02c      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a54      	ldr	r2, [pc, #336]	; (8004130 <HAL_DMA_IRQHandler+0x1d0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d027      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a53      	ldr	r2, [pc, #332]	; (8004134 <HAL_DMA_IRQHandler+0x1d4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d022      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a51      	ldr	r2, [pc, #324]	; (8004138 <HAL_DMA_IRQHandler+0x1d8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01d      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a50      	ldr	r2, [pc, #320]	; (800413c <HAL_DMA_IRQHandler+0x1dc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d018      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a4e      	ldr	r2, [pc, #312]	; (8004140 <HAL_DMA_IRQHandler+0x1e0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a4d      	ldr	r2, [pc, #308]	; (8004144 <HAL_DMA_IRQHandler+0x1e4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00e      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a4b      	ldr	r2, [pc, #300]	; (8004148 <HAL_DMA_IRQHandler+0x1e8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a4a      	ldr	r2, [pc, #296]	; (800414c <HAL_DMA_IRQHandler+0x1ec>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_DMA_IRQHandler+0xd2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a48      	ldr	r2, [pc, #288]	; (8004150 <HAL_DMA_IRQHandler+0x1f0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <HAL_DMA_IRQHandler+0xd6>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_DMA_IRQHandler+0xd8>
 8004036:	2300      	movs	r3, #0
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 842b 	beq.w	8004894 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	2208      	movs	r2, #8
 8004048:	409a      	lsls	r2, r3
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80a2 	beq.w	8004198 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a2e      	ldr	r2, [pc, #184]	; (8004114 <HAL_DMA_IRQHandler+0x1b4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d04a      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2d      	ldr	r2, [pc, #180]	; (8004118 <HAL_DMA_IRQHandler+0x1b8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d045      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2b      	ldr	r2, [pc, #172]	; (800411c <HAL_DMA_IRQHandler+0x1bc>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d040      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <HAL_DMA_IRQHandler+0x1c0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d03b      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a28      	ldr	r2, [pc, #160]	; (8004124 <HAL_DMA_IRQHandler+0x1c4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d036      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a27      	ldr	r2, [pc, #156]	; (8004128 <HAL_DMA_IRQHandler+0x1c8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d031      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a25      	ldr	r2, [pc, #148]	; (800412c <HAL_DMA_IRQHandler+0x1cc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02c      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a24      	ldr	r2, [pc, #144]	; (8004130 <HAL_DMA_IRQHandler+0x1d0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d027      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a22      	ldr	r2, [pc, #136]	; (8004134 <HAL_DMA_IRQHandler+0x1d4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d022      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a21      	ldr	r2, [pc, #132]	; (8004138 <HAL_DMA_IRQHandler+0x1d8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d01d      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1f      	ldr	r2, [pc, #124]	; (800413c <HAL_DMA_IRQHandler+0x1dc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d018      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1e      	ldr	r2, [pc, #120]	; (8004140 <HAL_DMA_IRQHandler+0x1e0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d013      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <HAL_DMA_IRQHandler+0x1e4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00e      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <HAL_DMA_IRQHandler+0x1e8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d009      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a19      	ldr	r2, [pc, #100]	; (800414c <HAL_DMA_IRQHandler+0x1ec>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x194>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a18      	ldr	r2, [pc, #96]	; (8004150 <HAL_DMA_IRQHandler+0x1f0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d12f      	bne.n	8004154 <HAL_DMA_IRQHandler+0x1f4>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bf14      	ite	ne
 8004102:	2301      	movne	r3, #1
 8004104:	2300      	moveq	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	e02e      	b.n	8004168 <HAL_DMA_IRQHandler+0x208>
 800410a:	bf00      	nop
 800410c:	2400000c 	.word	0x2400000c
 8004110:	1b4e81b5 	.word	0x1b4e81b5
 8004114:	40020010 	.word	0x40020010
 8004118:	40020028 	.word	0x40020028
 800411c:	40020040 	.word	0x40020040
 8004120:	40020058 	.word	0x40020058
 8004124:	40020070 	.word	0x40020070
 8004128:	40020088 	.word	0x40020088
 800412c:	400200a0 	.word	0x400200a0
 8004130:	400200b8 	.word	0x400200b8
 8004134:	40020410 	.word	0x40020410
 8004138:	40020428 	.word	0x40020428
 800413c:	40020440 	.word	0x40020440
 8004140:	40020458 	.word	0x40020458
 8004144:	40020470 	.word	0x40020470
 8004148:	40020488 	.word	0x40020488
 800414c:	400204a0 	.word	0x400204a0
 8004150:	400204b8 	.word	0x400204b8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	bf14      	ite	ne
 8004162:	2301      	movne	r3, #1
 8004164:	2300      	moveq	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d015      	beq.n	8004198 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0204 	bic.w	r2, r2, #4
 800417a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2208      	movs	r2, #8
 8004186:	409a      	lsls	r2, r3
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	f043 0201 	orr.w	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	fa22 f303 	lsr.w	r3, r2, r3
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d06e      	beq.n	800428c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a69      	ldr	r2, [pc, #420]	; (8004358 <HAL_DMA_IRQHandler+0x3f8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d04a      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a67      	ldr	r2, [pc, #412]	; (800435c <HAL_DMA_IRQHandler+0x3fc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d045      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a66      	ldr	r2, [pc, #408]	; (8004360 <HAL_DMA_IRQHandler+0x400>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d040      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a64      	ldr	r2, [pc, #400]	; (8004364 <HAL_DMA_IRQHandler+0x404>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d03b      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a63      	ldr	r2, [pc, #396]	; (8004368 <HAL_DMA_IRQHandler+0x408>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d036      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a61      	ldr	r2, [pc, #388]	; (800436c <HAL_DMA_IRQHandler+0x40c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d031      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a60      	ldr	r2, [pc, #384]	; (8004370 <HAL_DMA_IRQHandler+0x410>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d02c      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a5e      	ldr	r2, [pc, #376]	; (8004374 <HAL_DMA_IRQHandler+0x414>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d027      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a5d      	ldr	r2, [pc, #372]	; (8004378 <HAL_DMA_IRQHandler+0x418>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d022      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a5b      	ldr	r2, [pc, #364]	; (800437c <HAL_DMA_IRQHandler+0x41c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01d      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a5a      	ldr	r2, [pc, #360]	; (8004380 <HAL_DMA_IRQHandler+0x420>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d018      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a58      	ldr	r2, [pc, #352]	; (8004384 <HAL_DMA_IRQHandler+0x424>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d013      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a57      	ldr	r2, [pc, #348]	; (8004388 <HAL_DMA_IRQHandler+0x428>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d00e      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a55      	ldr	r2, [pc, #340]	; (800438c <HAL_DMA_IRQHandler+0x42c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d009      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a54      	ldr	r2, [pc, #336]	; (8004390 <HAL_DMA_IRQHandler+0x430>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d004      	beq.n	800424e <HAL_DMA_IRQHandler+0x2ee>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a52      	ldr	r2, [pc, #328]	; (8004394 <HAL_DMA_IRQHandler+0x434>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10a      	bne.n	8004264 <HAL_DMA_IRQHandler+0x304>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e003      	b.n	800426c <HAL_DMA_IRQHandler+0x30c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2300      	movs	r3, #0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	2201      	movs	r2, #1
 800427a:	409a      	lsls	r2, r3
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004284:	f043 0202 	orr.w	r2, r3, #2
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	2204      	movs	r2, #4
 8004296:	409a      	lsls	r2, r3
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 808f 	beq.w	80043c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a2c      	ldr	r2, [pc, #176]	; (8004358 <HAL_DMA_IRQHandler+0x3f8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d04a      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a2a      	ldr	r2, [pc, #168]	; (800435c <HAL_DMA_IRQHandler+0x3fc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d045      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a29      	ldr	r2, [pc, #164]	; (8004360 <HAL_DMA_IRQHandler+0x400>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d040      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a27      	ldr	r2, [pc, #156]	; (8004364 <HAL_DMA_IRQHandler+0x404>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d03b      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a26      	ldr	r2, [pc, #152]	; (8004368 <HAL_DMA_IRQHandler+0x408>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d036      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a24      	ldr	r2, [pc, #144]	; (800436c <HAL_DMA_IRQHandler+0x40c>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d031      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a23      	ldr	r2, [pc, #140]	; (8004370 <HAL_DMA_IRQHandler+0x410>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d02c      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a21      	ldr	r2, [pc, #132]	; (8004374 <HAL_DMA_IRQHandler+0x414>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d027      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a20      	ldr	r2, [pc, #128]	; (8004378 <HAL_DMA_IRQHandler+0x418>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d022      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a1e      	ldr	r2, [pc, #120]	; (800437c <HAL_DMA_IRQHandler+0x41c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01d      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a1d      	ldr	r2, [pc, #116]	; (8004380 <HAL_DMA_IRQHandler+0x420>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d018      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <HAL_DMA_IRQHandler+0x424>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d013      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <HAL_DMA_IRQHandler+0x428>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00e      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a18      	ldr	r2, [pc, #96]	; (800438c <HAL_DMA_IRQHandler+0x42c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a17      	ldr	r2, [pc, #92]	; (8004390 <HAL_DMA_IRQHandler+0x430>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <HAL_DMA_IRQHandler+0x3e2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a15      	ldr	r2, [pc, #84]	; (8004394 <HAL_DMA_IRQHandler+0x434>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d12a      	bne.n	8004398 <HAL_DMA_IRQHandler+0x438>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf14      	ite	ne
 8004350:	2301      	movne	r3, #1
 8004352:	2300      	moveq	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e023      	b.n	80043a0 <HAL_DMA_IRQHandler+0x440>
 8004358:	40020010 	.word	0x40020010
 800435c:	40020028 	.word	0x40020028
 8004360:	40020040 	.word	0x40020040
 8004364:	40020058 	.word	0x40020058
 8004368:	40020070 	.word	0x40020070
 800436c:	40020088 	.word	0x40020088
 8004370:	400200a0 	.word	0x400200a0
 8004374:	400200b8 	.word	0x400200b8
 8004378:	40020410 	.word	0x40020410
 800437c:	40020428 	.word	0x40020428
 8004380:	40020440 	.word	0x40020440
 8004384:	40020458 	.word	0x40020458
 8004388:	40020470 	.word	0x40020470
 800438c:	40020488 	.word	0x40020488
 8004390:	400204a0 	.word	0x400204a0
 8004394:	400204b8 	.word	0x400204b8
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00d      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2204      	movs	r2, #4
 80043ae:	409a      	lsls	r2, r3
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b8:	f043 0204 	orr.w	r2, r3, #4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2210      	movs	r2, #16
 80043ca:	409a      	lsls	r2, r3
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80a6 	beq.w	8004522 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a85      	ldr	r2, [pc, #532]	; (80045f0 <HAL_DMA_IRQHandler+0x690>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d04a      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a83      	ldr	r2, [pc, #524]	; (80045f4 <HAL_DMA_IRQHandler+0x694>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d045      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a82      	ldr	r2, [pc, #520]	; (80045f8 <HAL_DMA_IRQHandler+0x698>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d040      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a80      	ldr	r2, [pc, #512]	; (80045fc <HAL_DMA_IRQHandler+0x69c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d03b      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a7f      	ldr	r2, [pc, #508]	; (8004600 <HAL_DMA_IRQHandler+0x6a0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d036      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a7d      	ldr	r2, [pc, #500]	; (8004604 <HAL_DMA_IRQHandler+0x6a4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d031      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a7c      	ldr	r2, [pc, #496]	; (8004608 <HAL_DMA_IRQHandler+0x6a8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d02c      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a7a      	ldr	r2, [pc, #488]	; (800460c <HAL_DMA_IRQHandler+0x6ac>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d027      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a79      	ldr	r2, [pc, #484]	; (8004610 <HAL_DMA_IRQHandler+0x6b0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a77      	ldr	r2, [pc, #476]	; (8004614 <HAL_DMA_IRQHandler+0x6b4>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01d      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a76      	ldr	r2, [pc, #472]	; (8004618 <HAL_DMA_IRQHandler+0x6b8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a74      	ldr	r2, [pc, #464]	; (800461c <HAL_DMA_IRQHandler+0x6bc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a73      	ldr	r2, [pc, #460]	; (8004620 <HAL_DMA_IRQHandler+0x6c0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a71      	ldr	r2, [pc, #452]	; (8004624 <HAL_DMA_IRQHandler+0x6c4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a70      	ldr	r2, [pc, #448]	; (8004628 <HAL_DMA_IRQHandler+0x6c8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_DMA_IRQHandler+0x516>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a6e      	ldr	r2, [pc, #440]	; (800462c <HAL_DMA_IRQHandler+0x6cc>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10a      	bne.n	800448c <HAL_DMA_IRQHandler+0x52c>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf14      	ite	ne
 8004484:	2301      	movne	r3, #1
 8004486:	2300      	moveq	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e009      	b.n	80044a0 <HAL_DMA_IRQHandler+0x540>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b00      	cmp	r3, #0
 8004498:	bf14      	ite	ne
 800449a:	2301      	movne	r3, #1
 800449c:	2300      	moveq	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d03e      	beq.n	8004522 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	2210      	movs	r2, #16
 80044ae:	409a      	lsls	r2, r3
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d018      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d108      	bne.n	80044e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d024      	beq.n	8004522 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
 80044e0:	e01f      	b.n	8004522 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01b      	beq.n	8004522 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
 80044f2:	e016      	b.n	8004522 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0208 	bic.w	r2, r2, #8
 8004510:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004526:	f003 031f 	and.w	r3, r3, #31
 800452a:	2220      	movs	r2, #32
 800452c:	409a      	lsls	r2, r3
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	4013      	ands	r3, r2
 8004532:	2b00      	cmp	r3, #0
 8004534:	f000 8110 	beq.w	8004758 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a2c      	ldr	r2, [pc, #176]	; (80045f0 <HAL_DMA_IRQHandler+0x690>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d04a      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a2b      	ldr	r2, [pc, #172]	; (80045f4 <HAL_DMA_IRQHandler+0x694>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d045      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a29      	ldr	r2, [pc, #164]	; (80045f8 <HAL_DMA_IRQHandler+0x698>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d040      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a28      	ldr	r2, [pc, #160]	; (80045fc <HAL_DMA_IRQHandler+0x69c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d03b      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a26      	ldr	r2, [pc, #152]	; (8004600 <HAL_DMA_IRQHandler+0x6a0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d036      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a25      	ldr	r2, [pc, #148]	; (8004604 <HAL_DMA_IRQHandler+0x6a4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d031      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a23      	ldr	r2, [pc, #140]	; (8004608 <HAL_DMA_IRQHandler+0x6a8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d02c      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a22      	ldr	r2, [pc, #136]	; (800460c <HAL_DMA_IRQHandler+0x6ac>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d027      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a20      	ldr	r2, [pc, #128]	; (8004610 <HAL_DMA_IRQHandler+0x6b0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d022      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1f      	ldr	r2, [pc, #124]	; (8004614 <HAL_DMA_IRQHandler+0x6b4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d01d      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <HAL_DMA_IRQHandler+0x6b8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d018      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a1c      	ldr	r2, [pc, #112]	; (800461c <HAL_DMA_IRQHandler+0x6bc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d013      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <HAL_DMA_IRQHandler+0x6c0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a19      	ldr	r2, [pc, #100]	; (8004624 <HAL_DMA_IRQHandler+0x6c4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a17      	ldr	r2, [pc, #92]	; (8004628 <HAL_DMA_IRQHandler+0x6c8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x678>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a16      	ldr	r2, [pc, #88]	; (800462c <HAL_DMA_IRQHandler+0x6cc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d12b      	bne.n	8004630 <HAL_DMA_IRQHandler+0x6d0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	bf14      	ite	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	2300      	moveq	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	e02a      	b.n	8004644 <HAL_DMA_IRQHandler+0x6e4>
 80045ee:	bf00      	nop
 80045f0:	40020010 	.word	0x40020010
 80045f4:	40020028 	.word	0x40020028
 80045f8:	40020040 	.word	0x40020040
 80045fc:	40020058 	.word	0x40020058
 8004600:	40020070 	.word	0x40020070
 8004604:	40020088 	.word	0x40020088
 8004608:	400200a0 	.word	0x400200a0
 800460c:	400200b8 	.word	0x400200b8
 8004610:	40020410 	.word	0x40020410
 8004614:	40020428 	.word	0x40020428
 8004618:	40020440 	.word	0x40020440
 800461c:	40020458 	.word	0x40020458
 8004620:	40020470 	.word	0x40020470
 8004624:	40020488 	.word	0x40020488
 8004628:	400204a0 	.word	0x400204a0
 800462c:	400204b8 	.word	0x400204b8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	bf14      	ite	ne
 800463e:	2301      	movne	r3, #1
 8004640:	2300      	moveq	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 8087 	beq.w	8004758 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	2220      	movs	r2, #32
 8004654:	409a      	lsls	r2, r3
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b04      	cmp	r3, #4
 8004664:	d139      	bne.n	80046da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0216 	bic.w	r2, r2, #22
 8004674:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695a      	ldr	r2, [r3, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004684:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <HAL_DMA_IRQHandler+0x736>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0208 	bic.w	r2, r2, #8
 80046a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	223f      	movs	r2, #63	; 0x3f
 80046b0:	409a      	lsls	r2, r3
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 834a 	beq.w	8004d64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	4798      	blx	r3
          }
          return;
 80046d8:	e344      	b.n	8004d64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d018      	beq.n	800471a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d108      	bne.n	8004708 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d02c      	beq.n	8004758 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	4798      	blx	r3
 8004706:	e027      	b.n	8004758 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d023      	beq.n	8004758 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4798      	blx	r3
 8004718:	e01e      	b.n	8004758 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10f      	bne.n	8004748 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0210 	bic.w	r2, r2, #16
 8004736:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8306 	beq.w	8004d6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 8088 	beq.w	8004880 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2204      	movs	r2, #4
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a7a      	ldr	r2, [pc, #488]	; (8004968 <HAL_DMA_IRQHandler+0xa08>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d04a      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a79      	ldr	r2, [pc, #484]	; (800496c <HAL_DMA_IRQHandler+0xa0c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d045      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a77      	ldr	r2, [pc, #476]	; (8004970 <HAL_DMA_IRQHandler+0xa10>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d040      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a76      	ldr	r2, [pc, #472]	; (8004974 <HAL_DMA_IRQHandler+0xa14>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d03b      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a74      	ldr	r2, [pc, #464]	; (8004978 <HAL_DMA_IRQHandler+0xa18>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d036      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a73      	ldr	r2, [pc, #460]	; (800497c <HAL_DMA_IRQHandler+0xa1c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d031      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a71      	ldr	r2, [pc, #452]	; (8004980 <HAL_DMA_IRQHandler+0xa20>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d02c      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a70      	ldr	r2, [pc, #448]	; (8004984 <HAL_DMA_IRQHandler+0xa24>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d027      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a6e      	ldr	r2, [pc, #440]	; (8004988 <HAL_DMA_IRQHandler+0xa28>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d022      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6d      	ldr	r2, [pc, #436]	; (800498c <HAL_DMA_IRQHandler+0xa2c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d01d      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a6b      	ldr	r2, [pc, #428]	; (8004990 <HAL_DMA_IRQHandler+0xa30>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d018      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a6a      	ldr	r2, [pc, #424]	; (8004994 <HAL_DMA_IRQHandler+0xa34>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d013      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a68      	ldr	r2, [pc, #416]	; (8004998 <HAL_DMA_IRQHandler+0xa38>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00e      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a67      	ldr	r2, [pc, #412]	; (800499c <HAL_DMA_IRQHandler+0xa3c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d009      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a65      	ldr	r2, [pc, #404]	; (80049a0 <HAL_DMA_IRQHandler+0xa40>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d004      	beq.n	8004818 <HAL_DMA_IRQHandler+0x8b8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a64      	ldr	r2, [pc, #400]	; (80049a4 <HAL_DMA_IRQHandler+0xa44>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d108      	bne.n	800482a <HAL_DMA_IRQHandler+0x8ca>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e007      	b.n	800483a <HAL_DMA_IRQHandler+0x8da>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3301      	adds	r3, #1
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004842:	429a      	cmp	r2, r3
 8004844:	d307      	bcc.n	8004856 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f2      	bne.n	800483a <HAL_DMA_IRQHandler+0x8da>
 8004854:	e000      	b.n	8004858 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004856:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2203      	movs	r2, #3
 8004872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004876:	e003      	b.n	8004880 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8272 	beq.w	8004d6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
 8004892:	e26c      	b.n	8004d6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a43      	ldr	r2, [pc, #268]	; (80049a8 <HAL_DMA_IRQHandler+0xa48>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d022      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x984>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a42      	ldr	r2, [pc, #264]	; (80049ac <HAL_DMA_IRQHandler+0xa4c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d01d      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x984>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a40      	ldr	r2, [pc, #256]	; (80049b0 <HAL_DMA_IRQHandler+0xa50>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d018      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x984>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a3f      	ldr	r2, [pc, #252]	; (80049b4 <HAL_DMA_IRQHandler+0xa54>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x984>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a3d      	ldr	r2, [pc, #244]	; (80049b8 <HAL_DMA_IRQHandler+0xa58>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x984>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a3c      	ldr	r2, [pc, #240]	; (80049bc <HAL_DMA_IRQHandler+0xa5c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x984>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a3a      	ldr	r2, [pc, #232]	; (80049c0 <HAL_DMA_IRQHandler+0xa60>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x984>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a39      	ldr	r2, [pc, #228]	; (80049c4 <HAL_DMA_IRQHandler+0xa64>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d101      	bne.n	80048e8 <HAL_DMA_IRQHandler+0x988>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <HAL_DMA_IRQHandler+0x98a>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 823f 	beq.w	8004d6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	2204      	movs	r2, #4
 8004902:	409a      	lsls	r2, r3
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80cd 	beq.w	8004aa8 <HAL_DMA_IRQHandler+0xb48>
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 80c7 	beq.w	8004aa8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2204      	movs	r2, #4
 8004924:	409a      	lsls	r2, r3
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d049      	beq.n	80049c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8210 	beq.w	8004d68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004950:	e20a      	b.n	8004d68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8206 	beq.w	8004d68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004964:	e200      	b.n	8004d68 <HAL_DMA_IRQHandler+0xe08>
 8004966:	bf00      	nop
 8004968:	40020010 	.word	0x40020010
 800496c:	40020028 	.word	0x40020028
 8004970:	40020040 	.word	0x40020040
 8004974:	40020058 	.word	0x40020058
 8004978:	40020070 	.word	0x40020070
 800497c:	40020088 	.word	0x40020088
 8004980:	400200a0 	.word	0x400200a0
 8004984:	400200b8 	.word	0x400200b8
 8004988:	40020410 	.word	0x40020410
 800498c:	40020428 	.word	0x40020428
 8004990:	40020440 	.word	0x40020440
 8004994:	40020458 	.word	0x40020458
 8004998:	40020470 	.word	0x40020470
 800499c:	40020488 	.word	0x40020488
 80049a0:	400204a0 	.word	0x400204a0
 80049a4:	400204b8 	.word	0x400204b8
 80049a8:	58025408 	.word	0x58025408
 80049ac:	5802541c 	.word	0x5802541c
 80049b0:	58025430 	.word	0x58025430
 80049b4:	58025444 	.word	0x58025444
 80049b8:	58025458 	.word	0x58025458
 80049bc:	5802546c 	.word	0x5802546c
 80049c0:	58025480 	.word	0x58025480
 80049c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d160      	bne.n	8004a94 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a8c      	ldr	r2, [pc, #560]	; (8004c08 <HAL_DMA_IRQHandler+0xca8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d04a      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a8a      	ldr	r2, [pc, #552]	; (8004c0c <HAL_DMA_IRQHandler+0xcac>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d045      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a89      	ldr	r2, [pc, #548]	; (8004c10 <HAL_DMA_IRQHandler+0xcb0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d040      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a87      	ldr	r2, [pc, #540]	; (8004c14 <HAL_DMA_IRQHandler+0xcb4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d03b      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a86      	ldr	r2, [pc, #536]	; (8004c18 <HAL_DMA_IRQHandler+0xcb8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d036      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a84      	ldr	r2, [pc, #528]	; (8004c1c <HAL_DMA_IRQHandler+0xcbc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d031      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a83      	ldr	r2, [pc, #524]	; (8004c20 <HAL_DMA_IRQHandler+0xcc0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d02c      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a81      	ldr	r2, [pc, #516]	; (8004c24 <HAL_DMA_IRQHandler+0xcc4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d027      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a80      	ldr	r2, [pc, #512]	; (8004c28 <HAL_DMA_IRQHandler+0xcc8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d022      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a7e      	ldr	r2, [pc, #504]	; (8004c2c <HAL_DMA_IRQHandler+0xccc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d01d      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7d      	ldr	r2, [pc, #500]	; (8004c30 <HAL_DMA_IRQHandler+0xcd0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d018      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a7b      	ldr	r2, [pc, #492]	; (8004c34 <HAL_DMA_IRQHandler+0xcd4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a7a      	ldr	r2, [pc, #488]	; (8004c38 <HAL_DMA_IRQHandler+0xcd8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00e      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a78      	ldr	r2, [pc, #480]	; (8004c3c <HAL_DMA_IRQHandler+0xcdc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d009      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a77      	ldr	r2, [pc, #476]	; (8004c40 <HAL_DMA_IRQHandler+0xce0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d004      	beq.n	8004a72 <HAL_DMA_IRQHandler+0xb12>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a75      	ldr	r2, [pc, #468]	; (8004c44 <HAL_DMA_IRQHandler+0xce4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d108      	bne.n	8004a84 <HAL_DMA_IRQHandler+0xb24>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0208 	bic.w	r2, r2, #8
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	e007      	b.n	8004a94 <HAL_DMA_IRQHandler+0xb34>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0204 	bic.w	r2, r2, #4
 8004a92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8165 	beq.w	8004d68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aa6:	e15f      	b.n	8004d68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 80c5 	beq.w	8004c48 <HAL_DMA_IRQHandler+0xce8>
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80bf 	beq.w	8004c48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ace:	f003 031f 	and.w	r3, r3, #31
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d018      	beq.n	8004b16 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 813a 	beq.w	8004d6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b00:	e134      	b.n	8004d6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8130 	beq.w	8004d6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b14:	e12a      	b.n	8004d6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d168      	bne.n	8004bf2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <HAL_DMA_IRQHandler+0xca8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d04a      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a37      	ldr	r2, [pc, #220]	; (8004c0c <HAL_DMA_IRQHandler+0xcac>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d045      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a35      	ldr	r2, [pc, #212]	; (8004c10 <HAL_DMA_IRQHandler+0xcb0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d040      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a34      	ldr	r2, [pc, #208]	; (8004c14 <HAL_DMA_IRQHandler+0xcb4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d03b      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <HAL_DMA_IRQHandler+0xcb8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d036      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a31      	ldr	r2, [pc, #196]	; (8004c1c <HAL_DMA_IRQHandler+0xcbc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d031      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <HAL_DMA_IRQHandler+0xcc0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d02c      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <HAL_DMA_IRQHandler+0xcc4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d027      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a2c      	ldr	r2, [pc, #176]	; (8004c28 <HAL_DMA_IRQHandler+0xcc8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d022      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2b      	ldr	r2, [pc, #172]	; (8004c2c <HAL_DMA_IRQHandler+0xccc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d01d      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a29      	ldr	r2, [pc, #164]	; (8004c30 <HAL_DMA_IRQHandler+0xcd0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d018      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <HAL_DMA_IRQHandler+0xcd4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a26      	ldr	r2, [pc, #152]	; (8004c38 <HAL_DMA_IRQHandler+0xcd8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00e      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a25      	ldr	r2, [pc, #148]	; (8004c3c <HAL_DMA_IRQHandler+0xcdc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d009      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a23      	ldr	r2, [pc, #140]	; (8004c40 <HAL_DMA_IRQHandler+0xce0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xc60>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a22      	ldr	r2, [pc, #136]	; (8004c44 <HAL_DMA_IRQHandler+0xce4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d108      	bne.n	8004bd2 <HAL_DMA_IRQHandler+0xc72>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0214 	bic.w	r2, r2, #20
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e007      	b.n	8004be2 <HAL_DMA_IRQHandler+0xc82>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 020a 	bic.w	r2, r2, #10
 8004be0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80b8 	beq.w	8004d6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c04:	e0b2      	b.n	8004d6c <HAL_DMA_IRQHandler+0xe0c>
 8004c06:	bf00      	nop
 8004c08:	40020010 	.word	0x40020010
 8004c0c:	40020028 	.word	0x40020028
 8004c10:	40020040 	.word	0x40020040
 8004c14:	40020058 	.word	0x40020058
 8004c18:	40020070 	.word	0x40020070
 8004c1c:	40020088 	.word	0x40020088
 8004c20:	400200a0 	.word	0x400200a0
 8004c24:	400200b8 	.word	0x400200b8
 8004c28:	40020410 	.word	0x40020410
 8004c2c:	40020428 	.word	0x40020428
 8004c30:	40020440 	.word	0x40020440
 8004c34:	40020458 	.word	0x40020458
 8004c38:	40020470 	.word	0x40020470
 8004c3c:	40020488 	.word	0x40020488
 8004c40:	400204a0 	.word	0x400204a0
 8004c44:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	2208      	movs	r2, #8
 8004c52:	409a      	lsls	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8088 	beq.w	8004d6e <HAL_DMA_IRQHandler+0xe0e>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8082 	beq.w	8004d6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a41      	ldr	r2, [pc, #260]	; (8004d74 <HAL_DMA_IRQHandler+0xe14>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d04a      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a3f      	ldr	r2, [pc, #252]	; (8004d78 <HAL_DMA_IRQHandler+0xe18>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d045      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a3e      	ldr	r2, [pc, #248]	; (8004d7c <HAL_DMA_IRQHandler+0xe1c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d040      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a3c      	ldr	r2, [pc, #240]	; (8004d80 <HAL_DMA_IRQHandler+0xe20>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d03b      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a3b      	ldr	r2, [pc, #236]	; (8004d84 <HAL_DMA_IRQHandler+0xe24>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d036      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a39      	ldr	r2, [pc, #228]	; (8004d88 <HAL_DMA_IRQHandler+0xe28>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d031      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a38      	ldr	r2, [pc, #224]	; (8004d8c <HAL_DMA_IRQHandler+0xe2c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d02c      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a36      	ldr	r2, [pc, #216]	; (8004d90 <HAL_DMA_IRQHandler+0xe30>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d027      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a35      	ldr	r2, [pc, #212]	; (8004d94 <HAL_DMA_IRQHandler+0xe34>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d022      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a33      	ldr	r2, [pc, #204]	; (8004d98 <HAL_DMA_IRQHandler+0xe38>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d01d      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a32      	ldr	r2, [pc, #200]	; (8004d9c <HAL_DMA_IRQHandler+0xe3c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d018      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a30      	ldr	r2, [pc, #192]	; (8004da0 <HAL_DMA_IRQHandler+0xe40>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a2f      	ldr	r2, [pc, #188]	; (8004da4 <HAL_DMA_IRQHandler+0xe44>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d00e      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2d      	ldr	r2, [pc, #180]	; (8004da8 <HAL_DMA_IRQHandler+0xe48>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d009      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <HAL_DMA_IRQHandler+0xe4c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <HAL_DMA_IRQHandler+0xdaa>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2a      	ldr	r2, [pc, #168]	; (8004db0 <HAL_DMA_IRQHandler+0xe50>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <HAL_DMA_IRQHandler+0xdbc>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 021c 	bic.w	r2, r2, #28
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e007      	b.n	8004d2c <HAL_DMA_IRQHandler+0xdcc>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 020e 	bic.w	r2, r2, #14
 8004d2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2201      	movs	r2, #1
 8004d36:	409a      	lsls	r2, r3
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d009      	beq.n	8004d6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	4798      	blx	r3
 8004d62:	e004      	b.n	8004d6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004d64:	bf00      	nop
 8004d66:	e002      	b.n	8004d6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d68:	bf00      	nop
 8004d6a:	e000      	b.n	8004d6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004d6e:	3728      	adds	r7, #40	; 0x28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40020010 	.word	0x40020010
 8004d78:	40020028 	.word	0x40020028
 8004d7c:	40020040 	.word	0x40020040
 8004d80:	40020058 	.word	0x40020058
 8004d84:	40020070 	.word	0x40020070
 8004d88:	40020088 	.word	0x40020088
 8004d8c:	400200a0 	.word	0x400200a0
 8004d90:	400200b8 	.word	0x400200b8
 8004d94:	40020410 	.word	0x40020410
 8004d98:	40020428 	.word	0x40020428
 8004d9c:	40020440 	.word	0x40020440
 8004da0:	40020458 	.word	0x40020458
 8004da4:	40020470 	.word	0x40020470
 8004da8:	40020488 	.word	0x40020488
 8004dac:	400204a0 	.word	0x400204a0
 8004db0:	400204b8 	.word	0x400204b8

08004db4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dc2:	b2db      	uxtb	r3, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e00:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a84      	ldr	r2, [pc, #528]	; (8005018 <DMA_SetConfig+0x230>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d072      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a82      	ldr	r2, [pc, #520]	; (800501c <DMA_SetConfig+0x234>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d06d      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a81      	ldr	r2, [pc, #516]	; (8005020 <DMA_SetConfig+0x238>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d068      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a7f      	ldr	r2, [pc, #508]	; (8005024 <DMA_SetConfig+0x23c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d063      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a7e      	ldr	r2, [pc, #504]	; (8005028 <DMA_SetConfig+0x240>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d05e      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a7c      	ldr	r2, [pc, #496]	; (800502c <DMA_SetConfig+0x244>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d059      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a7b      	ldr	r2, [pc, #492]	; (8005030 <DMA_SetConfig+0x248>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d054      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a79      	ldr	r2, [pc, #484]	; (8005034 <DMA_SetConfig+0x24c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d04f      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a78      	ldr	r2, [pc, #480]	; (8005038 <DMA_SetConfig+0x250>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d04a      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a76      	ldr	r2, [pc, #472]	; (800503c <DMA_SetConfig+0x254>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d045      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a75      	ldr	r2, [pc, #468]	; (8005040 <DMA_SetConfig+0x258>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d040      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a73      	ldr	r2, [pc, #460]	; (8005044 <DMA_SetConfig+0x25c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d03b      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a72      	ldr	r2, [pc, #456]	; (8005048 <DMA_SetConfig+0x260>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d036      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a70      	ldr	r2, [pc, #448]	; (800504c <DMA_SetConfig+0x264>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d031      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a6f      	ldr	r2, [pc, #444]	; (8005050 <DMA_SetConfig+0x268>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d02c      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a6d      	ldr	r2, [pc, #436]	; (8005054 <DMA_SetConfig+0x26c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d027      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a6c      	ldr	r2, [pc, #432]	; (8005058 <DMA_SetConfig+0x270>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d022      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6a      	ldr	r2, [pc, #424]	; (800505c <DMA_SetConfig+0x274>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01d      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a69      	ldr	r2, [pc, #420]	; (8005060 <DMA_SetConfig+0x278>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d018      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a67      	ldr	r2, [pc, #412]	; (8005064 <DMA_SetConfig+0x27c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a66      	ldr	r2, [pc, #408]	; (8005068 <DMA_SetConfig+0x280>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00e      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a64      	ldr	r2, [pc, #400]	; (800506c <DMA_SetConfig+0x284>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a63      	ldr	r2, [pc, #396]	; (8005070 <DMA_SetConfig+0x288>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <DMA_SetConfig+0x10a>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a61      	ldr	r2, [pc, #388]	; (8005074 <DMA_SetConfig+0x28c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d101      	bne.n	8004ef6 <DMA_SetConfig+0x10e>
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e000      	b.n	8004ef8 <DMA_SetConfig+0x110>
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f04:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d004      	beq.n	8004f18 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f16:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3e      	ldr	r2, [pc, #248]	; (8005018 <DMA_SetConfig+0x230>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d04a      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a3d      	ldr	r2, [pc, #244]	; (800501c <DMA_SetConfig+0x234>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d045      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a3b      	ldr	r2, [pc, #236]	; (8005020 <DMA_SetConfig+0x238>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d040      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a3a      	ldr	r2, [pc, #232]	; (8005024 <DMA_SetConfig+0x23c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d03b      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a38      	ldr	r2, [pc, #224]	; (8005028 <DMA_SetConfig+0x240>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d036      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a37      	ldr	r2, [pc, #220]	; (800502c <DMA_SetConfig+0x244>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d031      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a35      	ldr	r2, [pc, #212]	; (8005030 <DMA_SetConfig+0x248>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d02c      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a34      	ldr	r2, [pc, #208]	; (8005034 <DMA_SetConfig+0x24c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d027      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a32      	ldr	r2, [pc, #200]	; (8005038 <DMA_SetConfig+0x250>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d022      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a31      	ldr	r2, [pc, #196]	; (800503c <DMA_SetConfig+0x254>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d01d      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2f      	ldr	r2, [pc, #188]	; (8005040 <DMA_SetConfig+0x258>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d018      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a2e      	ldr	r2, [pc, #184]	; (8005044 <DMA_SetConfig+0x25c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d013      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2c      	ldr	r2, [pc, #176]	; (8005048 <DMA_SetConfig+0x260>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00e      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2b      	ldr	r2, [pc, #172]	; (800504c <DMA_SetConfig+0x264>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d009      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a29      	ldr	r2, [pc, #164]	; (8005050 <DMA_SetConfig+0x268>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d004      	beq.n	8004fb8 <DMA_SetConfig+0x1d0>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a28      	ldr	r2, [pc, #160]	; (8005054 <DMA_SetConfig+0x26c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d101      	bne.n	8004fbc <DMA_SetConfig+0x1d4>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <DMA_SetConfig+0x1d6>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d05a      	beq.n	8005078 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	223f      	movs	r2, #63	; 0x3f
 8004fcc:	409a      	lsls	r2, r3
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fe0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d108      	bne.n	8005004 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005002:	e087      	b.n	8005114 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	60da      	str	r2, [r3, #12]
}
 8005014:	e07e      	b.n	8005114 <DMA_SetConfig+0x32c>
 8005016:	bf00      	nop
 8005018:	40020010 	.word	0x40020010
 800501c:	40020028 	.word	0x40020028
 8005020:	40020040 	.word	0x40020040
 8005024:	40020058 	.word	0x40020058
 8005028:	40020070 	.word	0x40020070
 800502c:	40020088 	.word	0x40020088
 8005030:	400200a0 	.word	0x400200a0
 8005034:	400200b8 	.word	0x400200b8
 8005038:	40020410 	.word	0x40020410
 800503c:	40020428 	.word	0x40020428
 8005040:	40020440 	.word	0x40020440
 8005044:	40020458 	.word	0x40020458
 8005048:	40020470 	.word	0x40020470
 800504c:	40020488 	.word	0x40020488
 8005050:	400204a0 	.word	0x400204a0
 8005054:	400204b8 	.word	0x400204b8
 8005058:	58025408 	.word	0x58025408
 800505c:	5802541c 	.word	0x5802541c
 8005060:	58025430 	.word	0x58025430
 8005064:	58025444 	.word	0x58025444
 8005068:	58025458 	.word	0x58025458
 800506c:	5802546c 	.word	0x5802546c
 8005070:	58025480 	.word	0x58025480
 8005074:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a28      	ldr	r2, [pc, #160]	; (8005120 <DMA_SetConfig+0x338>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d022      	beq.n	80050c8 <DMA_SetConfig+0x2e0>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a27      	ldr	r2, [pc, #156]	; (8005124 <DMA_SetConfig+0x33c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d01d      	beq.n	80050c8 <DMA_SetConfig+0x2e0>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a25      	ldr	r2, [pc, #148]	; (8005128 <DMA_SetConfig+0x340>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d018      	beq.n	80050c8 <DMA_SetConfig+0x2e0>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a24      	ldr	r2, [pc, #144]	; (800512c <DMA_SetConfig+0x344>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <DMA_SetConfig+0x2e0>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a22      	ldr	r2, [pc, #136]	; (8005130 <DMA_SetConfig+0x348>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00e      	beq.n	80050c8 <DMA_SetConfig+0x2e0>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a21      	ldr	r2, [pc, #132]	; (8005134 <DMA_SetConfig+0x34c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d009      	beq.n	80050c8 <DMA_SetConfig+0x2e0>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1f      	ldr	r2, [pc, #124]	; (8005138 <DMA_SetConfig+0x350>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <DMA_SetConfig+0x2e0>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1e      	ldr	r2, [pc, #120]	; (800513c <DMA_SetConfig+0x354>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d101      	bne.n	80050cc <DMA_SetConfig+0x2e4>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <DMA_SetConfig+0x2e6>
 80050cc:	2300      	movs	r3, #0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d020      	beq.n	8005114 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	2201      	movs	r2, #1
 80050dc:	409a      	lsls	r2, r3
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b40      	cmp	r3, #64	; 0x40
 80050f0:	d108      	bne.n	8005104 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	60da      	str	r2, [r3, #12]
}
 8005102:	e007      	b.n	8005114 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	60da      	str	r2, [r3, #12]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	58025408 	.word	0x58025408
 8005124:	5802541c 	.word	0x5802541c
 8005128:	58025430 	.word	0x58025430
 800512c:	58025444 	.word	0x58025444
 8005130:	58025458 	.word	0x58025458
 8005134:	5802546c 	.word	0x5802546c
 8005138:	58025480 	.word	0x58025480
 800513c:	58025494 	.word	0x58025494

08005140 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a42      	ldr	r2, [pc, #264]	; (8005258 <DMA_CalcBaseAndBitshift+0x118>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d04a      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a41      	ldr	r2, [pc, #260]	; (800525c <DMA_CalcBaseAndBitshift+0x11c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d045      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a3f      	ldr	r2, [pc, #252]	; (8005260 <DMA_CalcBaseAndBitshift+0x120>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d040      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a3e      	ldr	r2, [pc, #248]	; (8005264 <DMA_CalcBaseAndBitshift+0x124>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d03b      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a3c      	ldr	r2, [pc, #240]	; (8005268 <DMA_CalcBaseAndBitshift+0x128>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d036      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3b      	ldr	r2, [pc, #236]	; (800526c <DMA_CalcBaseAndBitshift+0x12c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d031      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a39      	ldr	r2, [pc, #228]	; (8005270 <DMA_CalcBaseAndBitshift+0x130>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d02c      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a38      	ldr	r2, [pc, #224]	; (8005274 <DMA_CalcBaseAndBitshift+0x134>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d027      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a36      	ldr	r2, [pc, #216]	; (8005278 <DMA_CalcBaseAndBitshift+0x138>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d022      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a35      	ldr	r2, [pc, #212]	; (800527c <DMA_CalcBaseAndBitshift+0x13c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d01d      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a33      	ldr	r2, [pc, #204]	; (8005280 <DMA_CalcBaseAndBitshift+0x140>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d018      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a32      	ldr	r2, [pc, #200]	; (8005284 <DMA_CalcBaseAndBitshift+0x144>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d013      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a30      	ldr	r2, [pc, #192]	; (8005288 <DMA_CalcBaseAndBitshift+0x148>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00e      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a2f      	ldr	r2, [pc, #188]	; (800528c <DMA_CalcBaseAndBitshift+0x14c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a2d      	ldr	r2, [pc, #180]	; (8005290 <DMA_CalcBaseAndBitshift+0x150>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <DMA_CalcBaseAndBitshift+0xa8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a2c      	ldr	r2, [pc, #176]	; (8005294 <DMA_CalcBaseAndBitshift+0x154>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d101      	bne.n	80051ec <DMA_CalcBaseAndBitshift+0xac>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <DMA_CalcBaseAndBitshift+0xae>
 80051ec:	2300      	movs	r3, #0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d024      	beq.n	800523c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	3b10      	subs	r3, #16
 80051fa:	4a27      	ldr	r2, [pc, #156]	; (8005298 <DMA_CalcBaseAndBitshift+0x158>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	4a24      	ldr	r2, [pc, #144]	; (800529c <DMA_CalcBaseAndBitshift+0x15c>)
 800520c:	5cd3      	ldrb	r3, [r2, r3]
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b03      	cmp	r3, #3
 8005218:	d908      	bls.n	800522c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <DMA_CalcBaseAndBitshift+0x160>)
 8005222:	4013      	ands	r3, r2
 8005224:	1d1a      	adds	r2, r3, #4
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	659a      	str	r2, [r3, #88]	; 0x58
 800522a:	e00d      	b.n	8005248 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <DMA_CalcBaseAndBitshift+0x160>)
 8005234:	4013      	ands	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6593      	str	r3, [r2, #88]	; 0x58
 800523a:	e005      	b.n	8005248 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	40020010 	.word	0x40020010
 800525c:	40020028 	.word	0x40020028
 8005260:	40020040 	.word	0x40020040
 8005264:	40020058 	.word	0x40020058
 8005268:	40020070 	.word	0x40020070
 800526c:	40020088 	.word	0x40020088
 8005270:	400200a0 	.word	0x400200a0
 8005274:	400200b8 	.word	0x400200b8
 8005278:	40020410 	.word	0x40020410
 800527c:	40020428 	.word	0x40020428
 8005280:	40020440 	.word	0x40020440
 8005284:	40020458 	.word	0x40020458
 8005288:	40020470 	.word	0x40020470
 800528c:	40020488 	.word	0x40020488
 8005290:	400204a0 	.word	0x400204a0
 8005294:	400204b8 	.word	0x400204b8
 8005298:	aaaaaaab 	.word	0xaaaaaaab
 800529c:	08010000 	.word	0x08010000
 80052a0:	fffffc00 	.word	0xfffffc00

080052a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d120      	bne.n	80052fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d858      	bhi.n	8005372 <DMA_CheckFifoParam+0xce>
 80052c0:	a201      	add	r2, pc, #4	; (adr r2, 80052c8 <DMA_CheckFifoParam+0x24>)
 80052c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c6:	bf00      	nop
 80052c8:	080052d9 	.word	0x080052d9
 80052cc:	080052eb 	.word	0x080052eb
 80052d0:	080052d9 	.word	0x080052d9
 80052d4:	08005373 	.word	0x08005373
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d048      	beq.n	8005376 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052e8:	e045      	b.n	8005376 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052f2:	d142      	bne.n	800537a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052f8:	e03f      	b.n	800537a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005302:	d123      	bne.n	800534c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	2b03      	cmp	r3, #3
 800530a:	d838      	bhi.n	800537e <DMA_CheckFifoParam+0xda>
 800530c:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <DMA_CheckFifoParam+0x70>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005325 	.word	0x08005325
 8005318:	0800532b 	.word	0x0800532b
 800531c:	08005325 	.word	0x08005325
 8005320:	0800533d 	.word	0x0800533d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
        break;
 8005328:	e030      	b.n	800538c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d025      	beq.n	8005382 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800533a:	e022      	b.n	8005382 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005344:	d11f      	bne.n	8005386 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800534a:	e01c      	b.n	8005386 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005350:	2b02      	cmp	r3, #2
 8005352:	d902      	bls.n	800535a <DMA_CheckFifoParam+0xb6>
 8005354:	2b03      	cmp	r3, #3
 8005356:	d003      	beq.n	8005360 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005358:	e018      	b.n	800538c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	73fb      	strb	r3, [r7, #15]
        break;
 800535e:	e015      	b.n	800538c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00e      	beq.n	800538a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	73fb      	strb	r3, [r7, #15]
    break;
 8005370:	e00b      	b.n	800538a <DMA_CheckFifoParam+0xe6>
        break;
 8005372:	bf00      	nop
 8005374:	e00a      	b.n	800538c <DMA_CheckFifoParam+0xe8>
        break;
 8005376:	bf00      	nop
 8005378:	e008      	b.n	800538c <DMA_CheckFifoParam+0xe8>
        break;
 800537a:	bf00      	nop
 800537c:	e006      	b.n	800538c <DMA_CheckFifoParam+0xe8>
        break;
 800537e:	bf00      	nop
 8005380:	e004      	b.n	800538c <DMA_CheckFifoParam+0xe8>
        break;
 8005382:	bf00      	nop
 8005384:	e002      	b.n	800538c <DMA_CheckFifoParam+0xe8>
        break;
 8005386:	bf00      	nop
 8005388:	e000      	b.n	800538c <DMA_CheckFifoParam+0xe8>
    break;
 800538a:	bf00      	nop
    }
  }

  return status;
 800538c:	7bfb      	ldrb	r3, [r7, #15]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop

0800539c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a38      	ldr	r2, [pc, #224]	; (8005490 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d022      	beq.n	80053fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a36      	ldr	r2, [pc, #216]	; (8005494 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01d      	beq.n	80053fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a35      	ldr	r2, [pc, #212]	; (8005498 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d018      	beq.n	80053fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a33      	ldr	r2, [pc, #204]	; (800549c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a32      	ldr	r2, [pc, #200]	; (80054a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a30      	ldr	r2, [pc, #192]	; (80054a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a2f      	ldr	r2, [pc, #188]	; (80054a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2d      	ldr	r2, [pc, #180]	; (80054ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d101      	bne.n	80053fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80053fe:	2300      	movs	r3, #0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01a      	beq.n	800543a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	3b08      	subs	r3, #8
 800540c:	4a28      	ldr	r2, [pc, #160]	; (80054b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4b26      	ldr	r3, [pc, #152]	; (80054b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	461a      	mov	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a24      	ldr	r2, [pc, #144]	; (80054b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005428:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 031f 	and.w	r3, r3, #31
 8005430:	2201      	movs	r2, #1
 8005432:	409a      	lsls	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005438:	e024      	b.n	8005484 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	3b10      	subs	r3, #16
 8005442:	4a1e      	ldr	r2, [pc, #120]	; (80054bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d806      	bhi.n	8005462 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d902      	bls.n	8005462 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3308      	adds	r3, #8
 8005460:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4b18      	ldr	r3, [pc, #96]	; (80054c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	461a      	mov	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a16      	ldr	r2, [pc, #88]	; (80054cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005474:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f003 031f 	and.w	r3, r3, #31
 800547c:	2201      	movs	r2, #1
 800547e:	409a      	lsls	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	58025408 	.word	0x58025408
 8005494:	5802541c 	.word	0x5802541c
 8005498:	58025430 	.word	0x58025430
 800549c:	58025444 	.word	0x58025444
 80054a0:	58025458 	.word	0x58025458
 80054a4:	5802546c 	.word	0x5802546c
 80054a8:	58025480 	.word	0x58025480
 80054ac:	58025494 	.word	0x58025494
 80054b0:	cccccccd 	.word	0xcccccccd
 80054b4:	16009600 	.word	0x16009600
 80054b8:	58025880 	.word	0x58025880
 80054bc:	aaaaaaab 	.word	0xaaaaaaab
 80054c0:	400204b8 	.word	0x400204b8
 80054c4:	4002040f 	.word	0x4002040f
 80054c8:	10008200 	.word	0x10008200
 80054cc:	40020880 	.word	0x40020880

080054d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d04a      	beq.n	800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d847      	bhi.n	800557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a25      	ldr	r2, [pc, #148]	; (8005588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d022      	beq.n	800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a24      	ldr	r2, [pc, #144]	; (800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d01d      	beq.n	800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a22      	ldr	r2, [pc, #136]	; (8005590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a21      	ldr	r2, [pc, #132]	; (8005594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1f      	ldr	r2, [pc, #124]	; (8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1e      	ldr	r2, [pc, #120]	; (800559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d101      	bne.n	8005540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005540:	2300      	movs	r3, #0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	4b17      	ldr	r3, [pc, #92]	; (80055a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	461a      	mov	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a15      	ldr	r2, [pc, #84]	; (80055ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005558:	671a      	str	r2, [r3, #112]	; 0x70
 800555a:	e009      	b.n	8005570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	461a      	mov	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a11      	ldr	r2, [pc, #68]	; (80055b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800556e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3b01      	subs	r3, #1
 8005574:	2201      	movs	r2, #1
 8005576:	409a      	lsls	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	58025408 	.word	0x58025408
 800558c:	5802541c 	.word	0x5802541c
 8005590:	58025430 	.word	0x58025430
 8005594:	58025444 	.word	0x58025444
 8005598:	58025458 	.word	0x58025458
 800559c:	5802546c 	.word	0x5802546c
 80055a0:	58025480 	.word	0x58025480
 80055a4:	58025494 	.word	0x58025494
 80055a8:	1600963f 	.word	0x1600963f
 80055ac:	58025940 	.word	0x58025940
 80055b0:	1000823f 	.word	0x1000823f
 80055b4:	40020940 	.word	0x40020940

080055b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b089      	sub	sp, #36	; 0x24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80055c6:	4b89      	ldr	r3, [pc, #548]	; (80057ec <HAL_GPIO_Init+0x234>)
 80055c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055ca:	e194      	b.n	80058f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	2101      	movs	r1, #1
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	fa01 f303 	lsl.w	r3, r1, r3
 80055d8:	4013      	ands	r3, r2
 80055da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8186 	beq.w	80058f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d00b      	beq.n	8005604 <HAL_GPIO_Init+0x4c>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d007      	beq.n	8005604 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055f8:	2b11      	cmp	r3, #17
 80055fa:	d003      	beq.n	8005604 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b12      	cmp	r3, #18
 8005602:	d130      	bne.n	8005666 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	2203      	movs	r2, #3
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	43db      	mvns	r3, r3
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	4013      	ands	r3, r2
 800561a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4313      	orrs	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800563a:	2201      	movs	r2, #1
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4013      	ands	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	f003 0201 	and.w	r2, r3, #1
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	2203      	movs	r2, #3
 8005672:	fa02 f303 	lsl.w	r3, r2, r3
 8005676:	43db      	mvns	r3, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4013      	ands	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	689a      	ldr	r2, [r3, #8]
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	4313      	orrs	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d003      	beq.n	80056a6 <HAL_GPIO_Init+0xee>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b12      	cmp	r3, #18
 80056a4:	d123      	bne.n	80056ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	08da      	lsrs	r2, r3, #3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3208      	adds	r2, #8
 80056ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	220f      	movs	r2, #15
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	43db      	mvns	r3, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4013      	ands	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4313      	orrs	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	08da      	lsrs	r2, r3, #3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3208      	adds	r2, #8
 80056e8:	69b9      	ldr	r1, [r7, #24]
 80056ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	2203      	movs	r2, #3
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	43db      	mvns	r3, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4013      	ands	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f003 0203 	and.w	r2, r3, #3
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4313      	orrs	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80e0 	beq.w	80058f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005730:	4b2f      	ldr	r3, [pc, #188]	; (80057f0 <HAL_GPIO_Init+0x238>)
 8005732:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005736:	4a2e      	ldr	r2, [pc, #184]	; (80057f0 <HAL_GPIO_Init+0x238>)
 8005738:	f043 0302 	orr.w	r3, r3, #2
 800573c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005740:	4b2b      	ldr	r3, [pc, #172]	; (80057f0 <HAL_GPIO_Init+0x238>)
 8005742:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800574e:	4a29      	ldr	r2, [pc, #164]	; (80057f4 <HAL_GPIO_Init+0x23c>)
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	089b      	lsrs	r3, r3, #2
 8005754:	3302      	adds	r3, #2
 8005756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800575a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	220f      	movs	r2, #15
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	43db      	mvns	r3, r3
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	4013      	ands	r3, r2
 8005770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <HAL_GPIO_Init+0x240>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d052      	beq.n	8005820 <HAL_GPIO_Init+0x268>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <HAL_GPIO_Init+0x244>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d031      	beq.n	80057e6 <HAL_GPIO_Init+0x22e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <HAL_GPIO_Init+0x248>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d02b      	beq.n	80057e2 <HAL_GPIO_Init+0x22a>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <HAL_GPIO_Init+0x24c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d025      	beq.n	80057de <HAL_GPIO_Init+0x226>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a1c      	ldr	r2, [pc, #112]	; (8005808 <HAL_GPIO_Init+0x250>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d01f      	beq.n	80057da <HAL_GPIO_Init+0x222>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_GPIO_Init+0x254>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d019      	beq.n	80057d6 <HAL_GPIO_Init+0x21e>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a1a      	ldr	r2, [pc, #104]	; (8005810 <HAL_GPIO_Init+0x258>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_GPIO_Init+0x21a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <HAL_GPIO_Init+0x25c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00d      	beq.n	80057ce <HAL_GPIO_Init+0x216>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a18      	ldr	r2, [pc, #96]	; (8005818 <HAL_GPIO_Init+0x260>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <HAL_GPIO_Init+0x212>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a17      	ldr	r2, [pc, #92]	; (800581c <HAL_GPIO_Init+0x264>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d101      	bne.n	80057c6 <HAL_GPIO_Init+0x20e>
 80057c2:	2309      	movs	r3, #9
 80057c4:	e02d      	b.n	8005822 <HAL_GPIO_Init+0x26a>
 80057c6:	230a      	movs	r3, #10
 80057c8:	e02b      	b.n	8005822 <HAL_GPIO_Init+0x26a>
 80057ca:	2308      	movs	r3, #8
 80057cc:	e029      	b.n	8005822 <HAL_GPIO_Init+0x26a>
 80057ce:	2307      	movs	r3, #7
 80057d0:	e027      	b.n	8005822 <HAL_GPIO_Init+0x26a>
 80057d2:	2306      	movs	r3, #6
 80057d4:	e025      	b.n	8005822 <HAL_GPIO_Init+0x26a>
 80057d6:	2305      	movs	r3, #5
 80057d8:	e023      	b.n	8005822 <HAL_GPIO_Init+0x26a>
 80057da:	2304      	movs	r3, #4
 80057dc:	e021      	b.n	8005822 <HAL_GPIO_Init+0x26a>
 80057de:	2303      	movs	r3, #3
 80057e0:	e01f      	b.n	8005822 <HAL_GPIO_Init+0x26a>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e01d      	b.n	8005822 <HAL_GPIO_Init+0x26a>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e01b      	b.n	8005822 <HAL_GPIO_Init+0x26a>
 80057ea:	bf00      	nop
 80057ec:	58000080 	.word	0x58000080
 80057f0:	58024400 	.word	0x58024400
 80057f4:	58000400 	.word	0x58000400
 80057f8:	58020000 	.word	0x58020000
 80057fc:	58020400 	.word	0x58020400
 8005800:	58020800 	.word	0x58020800
 8005804:	58020c00 	.word	0x58020c00
 8005808:	58021000 	.word	0x58021000
 800580c:	58021400 	.word	0x58021400
 8005810:	58021800 	.word	0x58021800
 8005814:	58021c00 	.word	0x58021c00
 8005818:	58022000 	.word	0x58022000
 800581c:	58022400 	.word	0x58022400
 8005820:	2300      	movs	r3, #0
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	f002 0203 	and.w	r2, r2, #3
 8005828:	0092      	lsls	r2, r2, #2
 800582a:	4093      	lsls	r3, r2
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005832:	4938      	ldr	r1, [pc, #224]	; (8005914 <HAL_GPIO_Init+0x35c>)
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	089b      	lsrs	r3, r3, #2
 8005838:	3302      	adds	r3, #2
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	43db      	mvns	r3, r3
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	4013      	ands	r3, r2
 80058a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	4013      	ands	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80058e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	3301      	adds	r3, #1
 80058f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	f47f ae63 	bne.w	80055cc <HAL_GPIO_Init+0x14>
  }
}
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	3724      	adds	r7, #36	; 0x24
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	58000400 	.word	0x58000400

08005918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	807b      	strh	r3, [r7, #2]
 8005924:	4613      	mov	r3, r2
 8005926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005928:	787b      	ldrb	r3, [r7, #1]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800592e:	887a      	ldrh	r2, [r7, #2]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005934:	e003      	b.n	800593e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005936:	887b      	ldrh	r3, [r7, #2]
 8005938:	041a      	lsls	r2, r3, #16
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	619a      	str	r2, [r3, #24]
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800594a:	b480      	push	{r7}
 800594c:	b085      	sub	sp, #20
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800595c:	887a      	ldrh	r2, [r7, #2]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4013      	ands	r3, r2
 8005962:	041a      	lsls	r2, r3, #16
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	43d9      	mvns	r1, r3
 8005968:	887b      	ldrh	r3, [r7, #2]
 800596a:	400b      	ands	r3, r1
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	619a      	str	r2, [r3, #24]
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e07f      	b.n	8005a92 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fb ff2e 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2224      	movs	r2, #36	; 0x24
 80059b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d107      	bne.n	80059fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059f6:	609a      	str	r2, [r3, #8]
 80059f8:	e006      	b.n	8005a08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d104      	bne.n	8005a1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <HAL_I2C_Init+0x11c>)
 8005a26:	430b      	orrs	r3, r1
 8005a28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	ea42 0103 	orr.w	r1, r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	021a      	lsls	r2, r3, #8
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69d9      	ldr	r1, [r3, #28]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	02008000 	.word	0x02008000

08005aa0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	461a      	mov	r2, r3
 8005aae:	4603      	mov	r3, r0
 8005ab0:	817b      	strh	r3, [r7, #10]
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	813b      	strh	r3, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	f040 80f9 	bne.w	8005cba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <HAL_I2C_Mem_Write+0x34>
 8005ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ada:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0ed      	b.n	8005cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_I2C_Mem_Write+0x4e>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e0e6      	b.n	8005cbc <HAL_I2C_Mem_Write+0x21c>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005af6:	f7fc fdbf 	bl	8002678 <HAL_GetTick>
 8005afa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	2319      	movs	r3, #25
 8005b02:	2201      	movs	r2, #1
 8005b04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f001 fed9 	bl	80078c0 <I2C_WaitOnFlagUntilTimeout>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0d1      	b.n	8005cbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2221      	movs	r2, #33	; 0x21
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2240      	movs	r2, #64	; 0x40
 8005b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a3a      	ldr	r2, [r7, #32]
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b40:	88f8      	ldrh	r0, [r7, #6]
 8005b42:	893a      	ldrh	r2, [r7, #8]
 8005b44:	8979      	ldrh	r1, [r7, #10]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	4603      	mov	r3, r0
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f000 ff19 	bl	8006988 <I2C_RequestMemoryWrite>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e0a9      	b.n	8005cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2bff      	cmp	r3, #255	; 0xff
 8005b70:	d90e      	bls.n	8005b90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	22ff      	movs	r2, #255	; 0xff
 8005b76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	8979      	ldrh	r1, [r7, #10]
 8005b80:	2300      	movs	r3, #0
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f001 ffbb 	bl	8007b04 <I2C_TransferConfig>
 8005b8e:	e00f      	b.n	8005bb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	8979      	ldrh	r1, [r7, #10]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f001 ffaa 	bl	8007b04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f001 fec3 	bl	8007940 <I2C_WaitOnTXISFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e07b      	b.n	8005cbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	781a      	ldrb	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d034      	beq.n	8005c68 <HAL_I2C_Mem_Write+0x1c8>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d130      	bne.n	8005c68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2180      	movs	r1, #128	; 0x80
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f001 fe55 	bl	80078c0 <I2C_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e04d      	b.n	8005cbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2bff      	cmp	r3, #255	; 0xff
 8005c28:	d90e      	bls.n	8005c48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	22ff      	movs	r2, #255	; 0xff
 8005c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	8979      	ldrh	r1, [r7, #10]
 8005c38:	2300      	movs	r3, #0
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f001 ff5f 	bl	8007b04 <I2C_TransferConfig>
 8005c46:	e00f      	b.n	8005c68 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	8979      	ldrh	r1, [r7, #10]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f001 ff4e 	bl	8007b04 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d19e      	bne.n	8005bb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f001 fea2 	bl	80079c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e01a      	b.n	8005cbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6859      	ldr	r1, [r3, #4]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <HAL_I2C_Mem_Write+0x224>)
 8005c9a:	400b      	ands	r3, r1
 8005c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e000      	b.n	8005cbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005cba:	2302      	movs	r3, #2
  }
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	fe00e800 	.word	0xfe00e800

08005cc8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	817b      	strh	r3, [r7, #10]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	813b      	strh	r3, [r7, #8]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b20      	cmp	r3, #32
 8005cec:	f040 80fd 	bne.w	8005eea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <HAL_I2C_Mem_Read+0x34>
 8005cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d105      	bne.n	8005d08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0f1      	b.n	8005eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_I2C_Mem_Read+0x4e>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e0ea      	b.n	8005eec <HAL_I2C_Mem_Read+0x224>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d1e:	f7fc fcab 	bl	8002678 <HAL_GetTick>
 8005d22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	2319      	movs	r3, #25
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f001 fdc5 	bl	80078c0 <I2C_WaitOnFlagUntilTimeout>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0d5      	b.n	8005eec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2222      	movs	r2, #34	; 0x22
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2240      	movs	r2, #64	; 0x40
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a3a      	ldr	r2, [r7, #32]
 8005d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d68:	88f8      	ldrh	r0, [r7, #6]
 8005d6a:	893a      	ldrh	r2, [r7, #8]
 8005d6c:	8979      	ldrh	r1, [r7, #10]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	4603      	mov	r3, r0
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fe59 	bl	8006a30 <I2C_RequestMemoryRead>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0ad      	b.n	8005eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2bff      	cmp	r3, #255	; 0xff
 8005d98:	d90e      	bls.n	8005db8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	22ff      	movs	r2, #255	; 0xff
 8005d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	8979      	ldrh	r1, [r7, #10]
 8005da8:	4b52      	ldr	r3, [pc, #328]	; (8005ef4 <HAL_I2C_Mem_Read+0x22c>)
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f001 fea7 	bl	8007b04 <I2C_TransferConfig>
 8005db6:	e00f      	b.n	8005dd8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	8979      	ldrh	r1, [r7, #10]
 8005dca:	4b4a      	ldr	r3, [pc, #296]	; (8005ef4 <HAL_I2C_Mem_Read+0x22c>)
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f001 fe96 	bl	8007b04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	2200      	movs	r2, #0
 8005de0:	2104      	movs	r1, #4
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f001 fd6c 	bl	80078c0 <I2C_WaitOnFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e07c      	b.n	8005eec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d034      	beq.n	8005e98 <HAL_I2C_Mem_Read+0x1d0>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d130      	bne.n	8005e98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2180      	movs	r1, #128	; 0x80
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f001 fd3d 	bl	80078c0 <I2C_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e04d      	b.n	8005eec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2bff      	cmp	r3, #255	; 0xff
 8005e58:	d90e      	bls.n	8005e78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	22ff      	movs	r2, #255	; 0xff
 8005e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	8979      	ldrh	r1, [r7, #10]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f001 fe47 	bl	8007b04 <I2C_TransferConfig>
 8005e76:	e00f      	b.n	8005e98 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	8979      	ldrh	r1, [r7, #10]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f001 fe36 	bl	8007b04 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d19a      	bne.n	8005dd8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f001 fd8a 	bl	80079c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e01a      	b.n	8005eec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_I2C_Mem_Read+0x230>)
 8005eca:	400b      	ands	r3, r1
 8005ecc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e000      	b.n	8005eec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005eea:	2302      	movs	r3, #2
  }
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	80002400 	.word	0x80002400
 8005ef8:	fe00e800 	.word	0xfe00e800

08005efc <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	; 0x28
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	4608      	mov	r0, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	817b      	strh	r3, [r7, #10]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	813b      	strh	r3, [r7, #8]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	f040 80d5 	bne.w	80060ce <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d002      	beq.n	8005f30 <HAL_I2C_Mem_Read_DMA+0x34>
 8005f2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d105      	bne.n	8005f3c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0c9      	b.n	80060d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f4a:	d101      	bne.n	8005f50 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e0bf      	b.n	80060d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <HAL_I2C_Mem_Read_DMA+0x62>
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e0b8      	b.n	80060d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f66:	f7fc fb87 	bl	8002678 <HAL_GetTick>
 8005f6a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2222      	movs	r2, #34	; 0x22
 8005f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2240      	movs	r2, #64	; 0x40
 8005f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8005f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a51      	ldr	r2, [pc, #324]	; (80060d8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8005f92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4a51      	ldr	r2, [pc, #324]	; (80060dc <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8005f98:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2bff      	cmp	r3, #255	; 0xff
 8005fa2:	d906      	bls.n	8005fb2 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	22ff      	movs	r2, #255	; 0xff
 8005fa8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005faa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fae:	61fb      	str	r3, [r7, #28]
 8005fb0:	e007      	b.n	8005fc2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005fbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fc0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005fc2:	88f8      	ldrh	r0, [r7, #6]
 8005fc4:	893a      	ldrh	r2, [r7, #8]
 8005fc6:	8979      	ldrh	r1, [r7, #10]
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	2319      	movs	r3, #25
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 fd2c 	bl	8006a30 <I2C_RequestMemoryRead>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e072      	b.n	80060d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d020      	beq.n	8006034 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	4a3a      	ldr	r2, [pc, #232]	; (80060e0 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8005ff8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	4a39      	ldr	r2, [pc, #228]	; (80060e4 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8006000:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	2200      	movs	r2, #0
 8006008:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	2200      	movs	r2, #0
 8006010:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3324      	adds	r3, #36	; 0x24
 800601c:	4619      	mov	r1, r3
 800601e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006024:	f7fc ffd0 	bl	8002fc8 <HAL_DMA_Start_IT>
 8006028:	4603      	mov	r3, r0
 800602a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800602c:	7dfb      	ldrb	r3, [r7, #23]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d139      	bne.n	80060a6 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8006032:	e013      	b.n	800605c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e039      	b.n	80060d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006060:	b2da      	uxtb	r2, r3
 8006062:	8979      	ldrh	r1, [r7, #10]
 8006064:	4b20      	ldr	r3, [pc, #128]	; (80060e8 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f001 fd4a 	bl	8007b04 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800608a:	2110      	movs	r1, #16
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f001 fd67 	bl	8007b60 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060a0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e014      	b.n	80060d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ba:	f043 0210 	orr.w	r2, r3, #16
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80060ce:	2302      	movs	r3, #2
  }
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	ffff0000 	.word	0xffff0000
 80060dc:	080063e3 	.word	0x080063e3
 80060e0:	0800757f 	.word	0x0800757f
 80060e4:	08007615 	.word	0x08007615
 80060e8:	80002400 	.word	0x80002400

080060ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	68f9      	ldr	r1, [r7, #12]
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	4798      	blx	r3
  }
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
 800617c:	4613      	mov	r3, r2
 800617e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <I2C_Slave_ISR_IT+0x24>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e0ec      	b.n	80063da <I2C_Slave_ISR_IT+0x1fe>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	095b      	lsrs	r3, r3, #5
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d009      	beq.n	8006228 <I2C_Slave_ISR_IT+0x4c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006220:	6939      	ldr	r1, [r7, #16]
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 fe42 	bl	8006eac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d04d      	beq.n	80062d0 <I2C_Slave_ISR_IT+0xf4>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	091b      	lsrs	r3, r3, #4
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d047      	beq.n	80062d0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d128      	bne.n	800629c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b28      	cmp	r3, #40	; 0x28
 8006254:	d108      	bne.n	8006268 <I2C_Slave_ISR_IT+0x8c>
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800625c:	d104      	bne.n	8006268 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800625e:	6939      	ldr	r1, [r7, #16]
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f001 f81b 	bl	800729c <I2C_ITListenCplt>
 8006266:	e032      	b.n	80062ce <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b29      	cmp	r3, #41	; 0x29
 8006272:	d10e      	bne.n	8006292 <I2C_Slave_ISR_IT+0xb6>
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800627a:	d00a      	beq.n	8006292 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2210      	movs	r2, #16
 8006282:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f001 f956 	bl	8007536 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 fce5 	bl	8006c5a <I2C_ITSlaveSeqCplt>
 8006290:	e01d      	b.n	80062ce <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2210      	movs	r2, #16
 8006298:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800629a:	e096      	b.n	80063ca <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2210      	movs	r2, #16
 80062a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a8:	f043 0204 	orr.w	r2, r3, #4
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <I2C_Slave_ISR_IT+0xe4>
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062bc:	f040 8085 	bne.w	80063ca <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c4:	4619      	mov	r1, r3
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f001 f83e 	bl	8007348 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80062cc:	e07d      	b.n	80063ca <I2C_Slave_ISR_IT+0x1ee>
 80062ce:	e07c      	b.n	80063ca <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	089b      	lsrs	r3, r3, #2
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d030      	beq.n	800633e <I2C_Slave_ISR_IT+0x162>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	089b      	lsrs	r3, r3, #2
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d02a      	beq.n	800633e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d018      	beq.n	8006324 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	b2d2      	uxtb	r2, r2
 80062fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	1c5a      	adds	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800630e:	3b01      	subs	r3, #1
 8006310:	b29a      	uxth	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d14f      	bne.n	80063ce <I2C_Slave_ISR_IT+0x1f2>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006334:	d04b      	beq.n	80063ce <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fc8f 	bl	8006c5a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800633c:	e047      	b.n	80063ce <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	08db      	lsrs	r3, r3, #3
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	08db      	lsrs	r3, r3, #3
 800634e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006352:	2b00      	cmp	r3, #0
 8006354:	d004      	beq.n	8006360 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006356:	6939      	ldr	r1, [r7, #16]
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 fbbd 	bl	8006ad8 <I2C_ITAddrCplt>
 800635e:	e037      	b.n	80063d0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	085b      	lsrs	r3, r3, #1
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	d031      	beq.n	80063d0 <I2C_Slave_ISR_IT+0x1f4>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d02b      	beq.n	80063d0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	d018      	beq.n	80063b4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	781a      	ldrb	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639c:	b29b      	uxth	r3, r3
 800639e:	3b01      	subs	r3, #1
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80063b2:	e00d      	b.n	80063d0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063ba:	d002      	beq.n	80063c2 <I2C_Slave_ISR_IT+0x1e6>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f000 fc49 	bl	8006c5a <I2C_ITSlaveSeqCplt>
 80063c8:	e002      	b.n	80063d0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80063ca:	bf00      	nop
 80063cc:	e000      	b.n	80063d0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80063ce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b088      	sub	sp, #32
 80063e6:	af02      	add	r7, sp, #8
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <I2C_Master_ISR_DMA+0x1a>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e0e1      	b.n	80065c0 <I2C_Master_ISR_DMA+0x1de>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	091b      	lsrs	r3, r3, #4
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d017      	beq.n	8006440 <I2C_Master_ISR_DMA+0x5e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	091b      	lsrs	r3, r3, #4
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d011      	beq.n	8006440 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2210      	movs	r2, #16
 8006422:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006428:	f043 0204 	orr.w	r2, r3, #4
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006430:	2120      	movs	r1, #32
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f001 fb94 	bl	8007b60 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f001 f87c 	bl	8007536 <I2C_Flush_TXDR>
 800643e:	e0ba      	b.n	80065b6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	09db      	lsrs	r3, r3, #7
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d072      	beq.n	8006532 <I2C_Master_ISR_DMA+0x150>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	099b      	lsrs	r3, r3, #6
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d06c      	beq.n	8006532 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006466:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d04e      	beq.n	8006510 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	b29b      	uxth	r3, r3
 800647a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800647e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	2bff      	cmp	r3, #255	; 0xff
 8006488:	d906      	bls.n	8006498 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	22ff      	movs	r2, #255	; 0xff
 800648e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	e010      	b.n	80064ba <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064aa:	d003      	beq.n	80064b4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	e002      	b.n	80064ba <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80064b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064b8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	8a79      	ldrh	r1, [r7, #18]
 80064c2:	2300      	movs	r3, #0
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f001 fb1b 	bl	8007b04 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b22      	cmp	r3, #34	; 0x22
 80064ea:	d108      	bne.n	80064fe <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064fa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80064fc:	e05b      	b.n	80065b6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800650c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800650e:	e052      	b.n	80065b6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800651e:	d003      	beq.n	8006528 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 fb5d 	bl	8006be0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006526:	e046      	b.n	80065b6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006528:	2140      	movs	r1, #64	; 0x40
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 ff0c 	bl	8007348 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006530:	e041      	b.n	80065b6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	099b      	lsrs	r3, r3, #6
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d029      	beq.n	8006592 <I2C_Master_ISR_DMA+0x1b0>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	099b      	lsrs	r3, r3, #6
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d023      	beq.n	8006592 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654e:	b29b      	uxth	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d119      	bne.n	8006588 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006562:	d027      	beq.n	80065b4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800656c:	d108      	bne.n	8006580 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800657c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800657e:	e019      	b.n	80065b4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 fb2d 	bl	8006be0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006586:	e015      	b.n	80065b4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006588:	2140      	movs	r1, #64	; 0x40
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 fedc 	bl	8007348 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006590:	e010      	b.n	80065b4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00b      	beq.n	80065b6 <I2C_Master_ISR_DMA+0x1d4>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d005      	beq.n	80065b6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80065aa:	68b9      	ldr	r1, [r7, #8]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fbb3 	bl	8006d18 <I2C_ITMasterCplt>
 80065b2:	e000      	b.n	80065b6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80065b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d101      	bne.n	80065ec <I2C_Slave_ISR_DMA+0x24>
 80065e8:	2302      	movs	r3, #2
 80065ea:	e1c8      	b.n	800697e <I2C_Slave_ISR_DMA+0x3b6>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	095b      	lsrs	r3, r3, #5
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d009      	beq.n	8006614 <I2C_Slave_ISR_DMA+0x4c>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fc4c 	bl	8006eac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	091b      	lsrs	r3, r3, #4
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8199 	beq.w	8006954 <I2C_Slave_ISR_DMA+0x38c>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	091b      	lsrs	r3, r3, #4
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 8192 	beq.w	8006954 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	0b9b      	lsrs	r3, r3, #14
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d106      	bne.n	800664a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	0bdb      	lsrs	r3, r3, #15
 8006640:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 817e 	beq.w	8006946 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d07c      	beq.n	800674c <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	0bdb      	lsrs	r3, r3, #15
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d076      	beq.n	800674c <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a8d      	ldr	r2, [pc, #564]	; (800689c <I2C_Slave_ISR_DMA+0x2d4>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d059      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a8b      	ldr	r2, [pc, #556]	; (80068a0 <I2C_Slave_ISR_DMA+0x2d8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d053      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a89      	ldr	r2, [pc, #548]	; (80068a4 <I2C_Slave_ISR_DMA+0x2dc>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d04d      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a87      	ldr	r2, [pc, #540]	; (80068a8 <I2C_Slave_ISR_DMA+0x2e0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d047      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a85      	ldr	r2, [pc, #532]	; (80068ac <I2C_Slave_ISR_DMA+0x2e4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d041      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a83      	ldr	r2, [pc, #524]	; (80068b0 <I2C_Slave_ISR_DMA+0x2e8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d03b      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a81      	ldr	r2, [pc, #516]	; (80068b4 <I2C_Slave_ISR_DMA+0x2ec>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d035      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a7f      	ldr	r2, [pc, #508]	; (80068b8 <I2C_Slave_ISR_DMA+0x2f0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d02f      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a7d      	ldr	r2, [pc, #500]	; (80068bc <I2C_Slave_ISR_DMA+0x2f4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d029      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a7b      	ldr	r2, [pc, #492]	; (80068c0 <I2C_Slave_ISR_DMA+0x2f8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d023      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a79      	ldr	r2, [pc, #484]	; (80068c4 <I2C_Slave_ISR_DMA+0x2fc>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d01d      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a77      	ldr	r2, [pc, #476]	; (80068c8 <I2C_Slave_ISR_DMA+0x300>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d017      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a75      	ldr	r2, [pc, #468]	; (80068cc <I2C_Slave_ISR_DMA+0x304>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d011      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a73      	ldr	r2, [pc, #460]	; (80068d0 <I2C_Slave_ISR_DMA+0x308>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00b      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a71      	ldr	r2, [pc, #452]	; (80068d4 <I2C_Slave_ISR_DMA+0x30c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d005      	beq.n	800671e <I2C_Slave_ISR_DMA+0x156>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a6f      	ldr	r2, [pc, #444]	; (80068d8 <I2C_Slave_ISR_DMA+0x310>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d109      	bne.n	8006732 <I2C_Slave_ISR_DMA+0x16a>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	bf0c      	ite	eq
 800672a:	2301      	moveq	r3, #1
 800672c:	2300      	movne	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	e008      	b.n	8006744 <I2C_Slave_ISR_DMA+0x17c>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	bf0c      	ite	eq
 800673e:	2301      	moveq	r3, #1
 8006740:	2300      	movne	r3, #0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8006748:	2301      	movs	r3, #1
 800674a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	2b00      	cmp	r3, #0
 8006752:	d07c      	beq.n	800684e <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	0b9b      	lsrs	r3, r3, #14
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b00      	cmp	r3, #0
 800675e:	d076      	beq.n	800684e <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a4d      	ldr	r2, [pc, #308]	; (800689c <I2C_Slave_ISR_DMA+0x2d4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d059      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a4b      	ldr	r2, [pc, #300]	; (80068a0 <I2C_Slave_ISR_DMA+0x2d8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d053      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a49      	ldr	r2, [pc, #292]	; (80068a4 <I2C_Slave_ISR_DMA+0x2dc>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d04d      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a47      	ldr	r2, [pc, #284]	; (80068a8 <I2C_Slave_ISR_DMA+0x2e0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d047      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a45      	ldr	r2, [pc, #276]	; (80068ac <I2C_Slave_ISR_DMA+0x2e4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d041      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a43      	ldr	r2, [pc, #268]	; (80068b0 <I2C_Slave_ISR_DMA+0x2e8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d03b      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a41      	ldr	r2, [pc, #260]	; (80068b4 <I2C_Slave_ISR_DMA+0x2ec>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d035      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a3f      	ldr	r2, [pc, #252]	; (80068b8 <I2C_Slave_ISR_DMA+0x2f0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d02f      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a3d      	ldr	r2, [pc, #244]	; (80068bc <I2C_Slave_ISR_DMA+0x2f4>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d029      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a3b      	ldr	r2, [pc, #236]	; (80068c0 <I2C_Slave_ISR_DMA+0x2f8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d023      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a39      	ldr	r2, [pc, #228]	; (80068c4 <I2C_Slave_ISR_DMA+0x2fc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d01d      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a37      	ldr	r2, [pc, #220]	; (80068c8 <I2C_Slave_ISR_DMA+0x300>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d017      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a35      	ldr	r2, [pc, #212]	; (80068cc <I2C_Slave_ISR_DMA+0x304>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d011      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a33      	ldr	r2, [pc, #204]	; (80068d0 <I2C_Slave_ISR_DMA+0x308>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00b      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a31      	ldr	r2, [pc, #196]	; (80068d4 <I2C_Slave_ISR_DMA+0x30c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d005      	beq.n	8006820 <I2C_Slave_ISR_DMA+0x258>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a2f      	ldr	r2, [pc, #188]	; (80068d8 <I2C_Slave_ISR_DMA+0x310>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d109      	bne.n	8006834 <I2C_Slave_ISR_DMA+0x26c>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	bf0c      	ite	eq
 800682c:	2301      	moveq	r3, #1
 800682e:	2300      	movne	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	e008      	b.n	8006846 <I2C_Slave_ISR_DMA+0x27e>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	bf0c      	ite	eq
 8006840:	2301      	moveq	r3, #1
 8006842:	2300      	movne	r3, #0
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 800684a:	2301      	movs	r3, #1
 800684c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d148      	bne.n	80068e6 <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b28      	cmp	r3, #40	; 0x28
 800685e:	d108      	bne.n	8006872 <I2C_Slave_ISR_DMA+0x2aa>
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006866:	d104      	bne.n	8006872 <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fd16 	bl	800729c <I2C_ITListenCplt>
 8006870:	e068      	b.n	8006944 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b29      	cmp	r3, #41	; 0x29
 800687c:	d12e      	bne.n	80068dc <I2C_Slave_ISR_DMA+0x314>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006884:	d02a      	beq.n	80068dc <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2210      	movs	r2, #16
 800688c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 fe51 	bl	8007536 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f9e0 	bl	8006c5a <I2C_ITSlaveSeqCplt>
 800689a:	e053      	b.n	8006944 <I2C_Slave_ISR_DMA+0x37c>
 800689c:	40020010 	.word	0x40020010
 80068a0:	40020028 	.word	0x40020028
 80068a4:	40020040 	.word	0x40020040
 80068a8:	40020058 	.word	0x40020058
 80068ac:	40020070 	.word	0x40020070
 80068b0:	40020088 	.word	0x40020088
 80068b4:	400200a0 	.word	0x400200a0
 80068b8:	400200b8 	.word	0x400200b8
 80068bc:	40020410 	.word	0x40020410
 80068c0:	40020428 	.word	0x40020428
 80068c4:	40020440 	.word	0x40020440
 80068c8:	40020458 	.word	0x40020458
 80068cc:	40020470 	.word	0x40020470
 80068d0:	40020488 	.word	0x40020488
 80068d4:	400204a0 	.word	0x400204a0
 80068d8:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2210      	movs	r2, #16
 80068e2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80068e4:	e034      	b.n	8006950 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2210      	movs	r2, #16
 80068ec:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f2:	f043 0204 	orr.w	r2, r3, #4
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006900:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <I2C_Slave_ISR_DMA+0x348>
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800690e:	d11f      	bne.n	8006950 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006910:	7dfb      	ldrb	r3, [r7, #23]
 8006912:	2b21      	cmp	r3, #33	; 0x21
 8006914:	d002      	beq.n	800691c <I2C_Slave_ISR_DMA+0x354>
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	2b29      	cmp	r3, #41	; 0x29
 800691a:	d103      	bne.n	8006924 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2221      	movs	r2, #33	; 0x21
 8006920:	631a      	str	r2, [r3, #48]	; 0x30
 8006922:	e008      	b.n	8006936 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	2b22      	cmp	r3, #34	; 0x22
 8006928:	d002      	beq.n	8006930 <I2C_Slave_ISR_DMA+0x368>
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	2b2a      	cmp	r3, #42	; 0x2a
 800692e:	d102      	bne.n	8006936 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2222      	movs	r2, #34	; 0x22
 8006934:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693a:	4619      	mov	r1, r3
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 fd03 	bl	8007348 <I2C_ITError>
      if (treatdmanack == 1U)
 8006942:	e005      	b.n	8006950 <I2C_Slave_ISR_DMA+0x388>
 8006944:	e004      	b.n	8006950 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2210      	movs	r2, #16
 800694c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800694e:	e011      	b.n	8006974 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8006950:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006952:	e00f      	b.n	8006974 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	08db      	lsrs	r3, r3, #3
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d009      	beq.n	8006974 <I2C_Slave_ISR_DMA+0x3ac>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	08db      	lsrs	r3, r3, #3
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f8b2 	bl	8006ad8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop

08006988 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	4608      	mov	r0, r1
 8006992:	4611      	mov	r1, r2
 8006994:	461a      	mov	r2, r3
 8006996:	4603      	mov	r3, r0
 8006998:	817b      	strh	r3, [r7, #10]
 800699a:	460b      	mov	r3, r1
 800699c:	813b      	strh	r3, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80069a2:	88fb      	ldrh	r3, [r7, #6]
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	8979      	ldrh	r1, [r7, #10]
 80069a8:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <I2C_RequestMemoryWrite+0xa4>)
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f001 f8a7 	bl	8007b04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	69b9      	ldr	r1, [r7, #24]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 ffc0 	bl	8007940 <I2C_WaitOnTXISFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e02c      	b.n	8006a24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d105      	bne.n	80069dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069d0:	893b      	ldrh	r3, [r7, #8]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	629a      	str	r2, [r3, #40]	; 0x28
 80069da:	e015      	b.n	8006a08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069dc:	893b      	ldrh	r3, [r7, #8]
 80069de:	0a1b      	lsrs	r3, r3, #8
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	69b9      	ldr	r1, [r7, #24]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 ffa6 	bl	8007940 <I2C_WaitOnTXISFlagUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e012      	b.n	8006a24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069fe:	893b      	ldrh	r3, [r7, #8]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2180      	movs	r1, #128	; 0x80
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 ff54 	bl	80078c0 <I2C_WaitOnFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	80002000 	.word	0x80002000

08006a30 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	4608      	mov	r0, r1
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	817b      	strh	r3, [r7, #10]
 8006a42:	460b      	mov	r3, r1
 8006a44:	813b      	strh	r3, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	8979      	ldrh	r1, [r7, #10]
 8006a50:	4b20      	ldr	r3, [pc, #128]	; (8006ad4 <I2C_RequestMemoryRead+0xa4>)
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f001 f854 	bl	8007b04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	69b9      	ldr	r1, [r7, #24]
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 ff6d 	bl	8007940 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e02c      	b.n	8006aca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a70:	88fb      	ldrh	r3, [r7, #6]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d105      	bne.n	8006a82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a76:	893b      	ldrh	r3, [r7, #8]
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a80:	e015      	b.n	8006aae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a82:	893b      	ldrh	r3, [r7, #8]
 8006a84:	0a1b      	lsrs	r3, r3, #8
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	69b9      	ldr	r1, [r7, #24]
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 ff53 	bl	8007940 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e012      	b.n	8006aca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa4:	893b      	ldrh	r3, [r7, #8]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2140      	movs	r1, #64	; 0x40
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 ff01 	bl	80078c0 <I2C_WaitOnFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	80002000 	.word	0x80002000

08006ad8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006aee:	2b28      	cmp	r3, #40	; 0x28
 8006af0:	d16a      	bne.n	8006bc8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	0c1b      	lsrs	r3, r3, #16
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	0c1b      	lsrs	r3, r3, #16
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006b10:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b1e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006b2c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d138      	bne.n	8006ba8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8006b36:	897b      	ldrh	r3, [r7, #10]
 8006b38:	09db      	lsrs	r3, r3, #7
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	89bb      	ldrh	r3, [r7, #12]
 8006b3e:	4053      	eors	r3, r2
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f003 0306 	and.w	r3, r3, #6
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d11c      	bne.n	8006b84 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006b4a:	897b      	ldrh	r3, [r7, #10]
 8006b4c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b52:	1c5a      	adds	r2, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d13b      	bne.n	8006bd8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2208      	movs	r2, #8
 8006b6c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b76:	89ba      	ldrh	r2, [r7, #12]
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff faf7 	bl	8006170 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b82:	e029      	b.n	8006bd8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006b84:	893b      	ldrh	r3, [r7, #8]
 8006b86:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f84b 	bl	8007c28 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b9a:	89ba      	ldrh	r2, [r7, #12]
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff fae5 	bl	8006170 <HAL_I2C_AddrCallback>
}
 8006ba6:	e017      	b.n	8006bd8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ba8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 f83b 	bl	8007c28 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bba:	89ba      	ldrh	r2, [r7, #12]
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff fad5 	bl	8006170 <HAL_I2C_AddrCallback>
}
 8006bc6:	e007      	b.n	8006bd8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2208      	movs	r2, #8
 8006bce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b21      	cmp	r3, #33	; 0x21
 8006bfa:	d115      	bne.n	8006c28 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2211      	movs	r2, #17
 8006c08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c10:	2101      	movs	r1, #1
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 f808 	bl	8007c28 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7ff fa7d 	bl	8006120 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c26:	e014      	b.n	8006c52 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2212      	movs	r2, #18
 8006c34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c3c:	2102      	movs	r1, #2
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fff2 	bl	8007c28 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f7ff fa71 	bl	8006134 <HAL_I2C_MasterRxCpltCallback>
}
 8006c52:	bf00      	nop
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	0b9b      	lsrs	r3, r3, #14
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	e00d      	b.n	8006cac <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0bdb      	lsrs	r3, r3, #15
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d007      	beq.n	8006cac <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006caa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b29      	cmp	r3, #41	; 0x29
 8006cb6:	d112      	bne.n	8006cde <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2228      	movs	r2, #40	; 0x28
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2221      	movs	r2, #33	; 0x21
 8006cc4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 ffad 	bl	8007c28 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff fa36 	bl	8006148 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006cdc:	e017      	b.n	8006d0e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce8:	d111      	bne.n	8006d0e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2228      	movs	r2, #40	; 0x28
 8006cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2222      	movs	r2, #34	; 0x22
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006cf8:	2102      	movs	r1, #2
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 ff94 	bl	8007c28 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff fa27 	bl	800615c <HAL_I2C_SlaveRxCpltCallback>
}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b21      	cmp	r3, #33	; 0x21
 8006d38:	d107      	bne.n	8006d4a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 ff73 	bl	8007c28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2211      	movs	r2, #17
 8006d46:	631a      	str	r2, [r3, #48]	; 0x30
 8006d48:	e00c      	b.n	8006d64 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b22      	cmp	r3, #34	; 0x22
 8006d54:	d106      	bne.n	8006d64 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006d56:	2102      	movs	r1, #2
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 ff65 	bl	8007c28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2212      	movs	r2, #18
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6859      	ldr	r1, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4b4d      	ldr	r3, [pc, #308]	; (8006ea4 <I2C_ITMasterCplt+0x18c>)
 8006d70:	400b      	ands	r3, r1
 8006d72:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a4a      	ldr	r2, [pc, #296]	; (8006ea8 <I2C_ITMasterCplt+0x190>)
 8006d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	091b      	lsrs	r3, r3, #4
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2210      	movs	r2, #16
 8006d92:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d98:	f043 0204 	orr.w	r2, r3, #4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b60      	cmp	r3, #96	; 0x60
 8006daa:	d10b      	bne.n	8006dc4 <I2C_ITMasterCplt+0xac>
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	089b      	lsrs	r3, r3, #2
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fbb6 	bl	8007536 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dce:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b60      	cmp	r3, #96	; 0x60
 8006dda:	d002      	beq.n	8006de2 <I2C_ITMasterCplt+0xca>
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d006      	beq.n	8006df0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 faad 	bl	8007348 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006dee:	e054      	b.n	8006e9a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b21      	cmp	r3, #33	; 0x21
 8006dfa:	d124      	bne.n	8006e46 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b40      	cmp	r3, #64	; 0x40
 8006e14:	d10b      	bne.n	8006e2e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff f9ba 	bl	80061a0 <HAL_I2C_MemTxCpltCallback>
}
 8006e2c:	e035      	b.n	8006e9a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff f96e 	bl	8006120 <HAL_I2C_MasterTxCpltCallback>
}
 8006e44:	e029      	b.n	8006e9a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b22      	cmp	r3, #34	; 0x22
 8006e50:	d123      	bne.n	8006e9a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2220      	movs	r2, #32
 8006e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b40      	cmp	r3, #64	; 0x40
 8006e6a:	d10b      	bne.n	8006e84 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fa ff23 	bl	8001cc8 <HAL_I2C_MemRxCpltCallback>
}
 8006e82:	e00a      	b.n	8006e9a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff f94d 	bl	8006134 <HAL_I2C_MasterRxCpltCallback>
}
 8006e9a:	bf00      	nop
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	fe00e800 	.word	0xfe00e800
 8006ea8:	ffff0000 	.word	0xffff0000

08006eac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ec8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b21      	cmp	r3, #33	; 0x21
 8006ed6:	d002      	beq.n	8006ede <I2C_ITSlaveCplt+0x32>
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	2b29      	cmp	r3, #41	; 0x29
 8006edc:	d108      	bne.n	8006ef0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ede:	f248 0101 	movw	r1, #32769	; 0x8001
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fea0 	bl	8007c28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2221      	movs	r2, #33	; 0x21
 8006eec:	631a      	str	r2, [r3, #48]	; 0x30
 8006eee:	e00d      	b.n	8006f0c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b22      	cmp	r3, #34	; 0x22
 8006ef4:	d002      	beq.n	8006efc <I2C_ITSlaveCplt+0x50>
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8006efa:	d107      	bne.n	8006f0c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006efc:	f248 0102 	movw	r1, #32770	; 0x8002
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fe91 	bl	8007c28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2222      	movs	r2, #34	; 0x22
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f1a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6859      	ldr	r1, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	4b80      	ldr	r3, [pc, #512]	; (8007128 <I2C_ITSlaveCplt+0x27c>)
 8006f28:	400b      	ands	r3, r1
 8006f2a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fb02 	bl	8007536 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	0b9b      	lsrs	r3, r3, #14
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d07a      	beq.n	8007034 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f4c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 8111 	beq.w	800717a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a73      	ldr	r2, [pc, #460]	; (800712c <I2C_ITSlaveCplt+0x280>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d059      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a71      	ldr	r2, [pc, #452]	; (8007130 <I2C_ITSlaveCplt+0x284>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d053      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a6f      	ldr	r2, [pc, #444]	; (8007134 <I2C_ITSlaveCplt+0x288>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d04d      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a6d      	ldr	r2, [pc, #436]	; (8007138 <I2C_ITSlaveCplt+0x28c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d047      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a6b      	ldr	r2, [pc, #428]	; (800713c <I2C_ITSlaveCplt+0x290>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d041      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a69      	ldr	r2, [pc, #420]	; (8007140 <I2C_ITSlaveCplt+0x294>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d03b      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a67      	ldr	r2, [pc, #412]	; (8007144 <I2C_ITSlaveCplt+0x298>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d035      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a65      	ldr	r2, [pc, #404]	; (8007148 <I2C_ITSlaveCplt+0x29c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d02f      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a63      	ldr	r2, [pc, #396]	; (800714c <I2C_ITSlaveCplt+0x2a0>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d029      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a61      	ldr	r2, [pc, #388]	; (8007150 <I2C_ITSlaveCplt+0x2a4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d023      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a5f      	ldr	r2, [pc, #380]	; (8007154 <I2C_ITSlaveCplt+0x2a8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d01d      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a5d      	ldr	r2, [pc, #372]	; (8007158 <I2C_ITSlaveCplt+0x2ac>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d017      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a5b      	ldr	r2, [pc, #364]	; (800715c <I2C_ITSlaveCplt+0x2b0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d011      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a59      	ldr	r2, [pc, #356]	; (8007160 <I2C_ITSlaveCplt+0x2b4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00b      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a57      	ldr	r2, [pc, #348]	; (8007164 <I2C_ITSlaveCplt+0x2b8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d005      	beq.n	8007018 <I2C_ITSlaveCplt+0x16c>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a55      	ldr	r2, [pc, #340]	; (8007168 <I2C_ITSlaveCplt+0x2bc>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d105      	bne.n	8007024 <I2C_ITSlaveCplt+0x178>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	b29b      	uxth	r3, r3
 8007022:	e004      	b.n	800702e <I2C_ITSlaveCplt+0x182>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	b29b      	uxth	r3, r3
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	8553      	strh	r3, [r2, #42]	; 0x2a
 8007032:	e0a2      	b.n	800717a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	0bdb      	lsrs	r3, r3, #15
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 809c 	beq.w	800717a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007050:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 808f 	beq.w	800717a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a32      	ldr	r2, [pc, #200]	; (800712c <I2C_ITSlaveCplt+0x280>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d059      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a30      	ldr	r2, [pc, #192]	; (8007130 <I2C_ITSlaveCplt+0x284>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d053      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a2e      	ldr	r2, [pc, #184]	; (8007134 <I2C_ITSlaveCplt+0x288>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d04d      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a2c      	ldr	r2, [pc, #176]	; (8007138 <I2C_ITSlaveCplt+0x28c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d047      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a2a      	ldr	r2, [pc, #168]	; (800713c <I2C_ITSlaveCplt+0x290>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d041      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a28      	ldr	r2, [pc, #160]	; (8007140 <I2C_ITSlaveCplt+0x294>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d03b      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a26      	ldr	r2, [pc, #152]	; (8007144 <I2C_ITSlaveCplt+0x298>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d035      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a24      	ldr	r2, [pc, #144]	; (8007148 <I2C_ITSlaveCplt+0x29c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d02f      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a22      	ldr	r2, [pc, #136]	; (800714c <I2C_ITSlaveCplt+0x2a0>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d029      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a20      	ldr	r2, [pc, #128]	; (8007150 <I2C_ITSlaveCplt+0x2a4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d023      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1e      	ldr	r2, [pc, #120]	; (8007154 <I2C_ITSlaveCplt+0x2a8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d01d      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1c      	ldr	r2, [pc, #112]	; (8007158 <I2C_ITSlaveCplt+0x2ac>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d017      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1a      	ldr	r2, [pc, #104]	; (800715c <I2C_ITSlaveCplt+0x2b0>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d011      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a18      	ldr	r2, [pc, #96]	; (8007160 <I2C_ITSlaveCplt+0x2b4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00b      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a16      	ldr	r2, [pc, #88]	; (8007164 <I2C_ITSlaveCplt+0x2b8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d005      	beq.n	800711c <I2C_ITSlaveCplt+0x270>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a14      	ldr	r2, [pc, #80]	; (8007168 <I2C_ITSlaveCplt+0x2bc>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d127      	bne.n	800716c <I2C_ITSlaveCplt+0x2c0>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	b29b      	uxth	r3, r3
 8007126:	e026      	b.n	8007176 <I2C_ITSlaveCplt+0x2ca>
 8007128:	fe00e800 	.word	0xfe00e800
 800712c:	40020010 	.word	0x40020010
 8007130:	40020028 	.word	0x40020028
 8007134:	40020040 	.word	0x40020040
 8007138:	40020058 	.word	0x40020058
 800713c:	40020070 	.word	0x40020070
 8007140:	40020088 	.word	0x40020088
 8007144:	400200a0 	.word	0x400200a0
 8007148:	400200b8 	.word	0x400200b8
 800714c:	40020410 	.word	0x40020410
 8007150:	40020428 	.word	0x40020428
 8007154:	40020440 	.word	0x40020440
 8007158:	40020458 	.word	0x40020458
 800715c:	40020470 	.word	0x40020470
 8007160:	40020488 	.word	0x40020488
 8007164:	400204a0 	.word	0x400204a0
 8007168:	400204b8 	.word	0x400204b8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	b29b      	uxth	r3, r3
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	089b      	lsrs	r3, r3, #2
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d020      	beq.n	80071c8 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f023 0304 	bic.w	r3, r3, #4
 800718c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	b2d2      	uxtb	r2, r2
 800719a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00c      	beq.n	80071c8 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071be:	b29b      	uxth	r3, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d6:	f043 0204 	orr.w	r2, r3, #4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d010      	beq.n	8007216 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f8a4 	bl	8007348 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b28      	cmp	r3, #40	; 0x28
 800720a:	d141      	bne.n	8007290 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800720c:	6979      	ldr	r1, [r7, #20]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f844 	bl	800729c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007214:	e03c      	b.n	8007290 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800721e:	d014      	beq.n	800724a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7ff fd1a 	bl	8006c5a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a1b      	ldr	r2, [pc, #108]	; (8007298 <I2C_ITSlaveCplt+0x3ec>)
 800722a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2220      	movs	r2, #32
 8007230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fe ffa2 	bl	800618c <HAL_I2C_ListenCpltCallback>
}
 8007248:	e022      	b.n	8007290 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b22      	cmp	r3, #34	; 0x22
 8007254:	d10e      	bne.n	8007274 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7fe ff75 	bl	800615c <HAL_I2C_SlaveRxCpltCallback>
}
 8007272:	e00d      	b.n	8007290 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fe ff5c 	bl	8006148 <HAL_I2C_SlaveTxCpltCallback>
}
 8007290:	bf00      	nop
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	ffff0000 	.word	0xffff0000

0800729c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a26      	ldr	r2, [pc, #152]	; (8007344 <I2C_ITListenCplt+0xa8>)
 80072aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	089b      	lsrs	r3, r3, #2
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d022      	beq.n	800731a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d012      	beq.n	800731a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007304:	b29b      	uxth	r3, r3
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007312:	f043 0204 	orr.w	r2, r3, #4
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800731a:	f248 0103 	movw	r1, #32771	; 0x8003
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fc82 	bl	8007c28 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2210      	movs	r2, #16
 800732a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7fe ff29 	bl	800618c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	ffff0000 	.word	0xffff0000

08007348 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a5d      	ldr	r2, [pc, #372]	; (80074dc <I2C_ITError+0x194>)
 8007366:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	2b28      	cmp	r3, #40	; 0x28
 800737e:	d005      	beq.n	800738c <I2C_ITError+0x44>
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	2b29      	cmp	r3, #41	; 0x29
 8007384:	d002      	beq.n	800738c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	2b2a      	cmp	r3, #42	; 0x2a
 800738a:	d10b      	bne.n	80073a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800738c:	2103      	movs	r1, #3
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fc4a 	bl	8007c28 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2228      	movs	r2, #40	; 0x28
 8007398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a50      	ldr	r2, [pc, #320]	; (80074e0 <I2C_ITError+0x198>)
 80073a0:	635a      	str	r2, [r3, #52]	; 0x34
 80073a2:	e011      	b.n	80073c8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80073a4:	f248 0103 	movw	r1, #32771	; 0x8003
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 fc3d 	bl	8007c28 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b60      	cmp	r3, #96	; 0x60
 80073b8:	d003      	beq.n	80073c2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2220      	movs	r2, #32
 80073be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073cc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d039      	beq.n	800744a <I2C_ITError+0x102>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2b11      	cmp	r3, #17
 80073da:	d002      	beq.n	80073e2 <I2C_ITError+0x9a>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b21      	cmp	r3, #33	; 0x21
 80073e0:	d133      	bne.n	800744a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073f0:	d107      	bne.n	8007402 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007400:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	4618      	mov	r0, r3
 8007408:	f7fd fcd4 	bl	8004db4 <HAL_DMA_GetState>
 800740c:	4603      	mov	r3, r0
 800740e:	2b01      	cmp	r3, #1
 8007410:	d017      	beq.n	8007442 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	4a33      	ldr	r2, [pc, #204]	; (80074e4 <I2C_ITError+0x19c>)
 8007418:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007426:	4618      	mov	r0, r3
 8007428:	f7fc fb56 	bl	8003ad8 <HAL_DMA_Abort_IT>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d04d      	beq.n	80074ce <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007440:	e045      	b.n	80074ce <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 f850 	bl	80074e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007448:	e041      	b.n	80074ce <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744e:	2b00      	cmp	r3, #0
 8007450:	d039      	beq.n	80074c6 <I2C_ITError+0x17e>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b12      	cmp	r3, #18
 8007456:	d002      	beq.n	800745e <I2C_ITError+0x116>
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2b22      	cmp	r3, #34	; 0x22
 800745c:	d133      	bne.n	80074c6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746c:	d107      	bne.n	800747e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800747c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	4618      	mov	r0, r3
 8007484:	f7fd fc96 	bl	8004db4 <HAL_DMA_GetState>
 8007488:	4603      	mov	r3, r0
 800748a:	2b01      	cmp	r3, #1
 800748c:	d017      	beq.n	80074be <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	4a14      	ldr	r2, [pc, #80]	; (80074e4 <I2C_ITError+0x19c>)
 8007494:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fc fb18 	bl	8003ad8 <HAL_DMA_Abort_IT>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d011      	beq.n	80074d2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80074b8:	4610      	mov	r0, r2
 80074ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074bc:	e009      	b.n	80074d2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f812 	bl	80074e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074c4:	e005      	b.n	80074d2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f80e 	bl	80074e8 <I2C_TreatErrorCallback>
  }
}
 80074cc:	e002      	b.n	80074d4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80074d2:	bf00      	nop
}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	ffff0000 	.word	0xffff0000
 80074e0:	080061dd 	.word	0x080061dd
 80074e4:	08007885 	.word	0x08007885

080074e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b60      	cmp	r3, #96	; 0x60
 80074fa:	d10e      	bne.n	800751a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2220      	movs	r2, #32
 8007500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fe fe58 	bl	80061c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007518:	e009      	b.n	800752e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7fe fe43 	bl	80061b4 <HAL_I2C_ErrorCallback>
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b02      	cmp	r3, #2
 800754a:	d103      	bne.n	8007554 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2200      	movs	r2, #0
 8007552:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b01      	cmp	r3, #1
 8007560:	d007      	beq.n	8007572 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	699a      	ldr	r2, [r3, #24]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f042 0201 	orr.w	r2, r2, #1
 8007570:	619a      	str	r2, [r3, #24]
  }
}
 8007572:	bf00      	nop
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800759a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80075a6:	2120      	movs	r1, #32
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fad9 	bl	8007b60 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80075ae:	e02d      	b.n	800760c <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80075b8:	441a      	add	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	2bff      	cmp	r3, #255	; 0xff
 80075c6:	d903      	bls.n	80075d0 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	22ff      	movs	r2, #255	; 0xff
 80075cc:	851a      	strh	r2, [r3, #40]	; 0x28
 80075ce:	e004      	b.n	80075da <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3324      	adds	r3, #36	; 0x24
 80075e4:	4619      	mov	r1, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	461a      	mov	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f0:	f7fb fcea 	bl	8002fc8 <HAL_DMA_Start_IT>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d004      	beq.n	8007604 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80075fa:	2110      	movs	r1, #16
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff fea3 	bl	8007348 <I2C_ITError>
}
 8007602:	e003      	b.n	800760c <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007604:	2140      	movs	r1, #64	; 0x40
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 faaa 	bl	8007b60 <I2C_Enable_IRQ>
}
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007624:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762a:	2b00      	cmp	r3, #0
 800762c:	d076      	beq.n	800771c <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a83      	ldr	r2, [pc, #524]	; (8007844 <I2C_DMAError+0x230>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d059      	beq.n	80076ee <I2C_DMAError+0xda>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a81      	ldr	r2, [pc, #516]	; (8007848 <I2C_DMAError+0x234>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d053      	beq.n	80076ee <I2C_DMAError+0xda>
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a7f      	ldr	r2, [pc, #508]	; (800784c <I2C_DMAError+0x238>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d04d      	beq.n	80076ee <I2C_DMAError+0xda>
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a7d      	ldr	r2, [pc, #500]	; (8007850 <I2C_DMAError+0x23c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d047      	beq.n	80076ee <I2C_DMAError+0xda>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a7b      	ldr	r2, [pc, #492]	; (8007854 <I2C_DMAError+0x240>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d041      	beq.n	80076ee <I2C_DMAError+0xda>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a79      	ldr	r2, [pc, #484]	; (8007858 <I2C_DMAError+0x244>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d03b      	beq.n	80076ee <I2C_DMAError+0xda>
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a77      	ldr	r2, [pc, #476]	; (800785c <I2C_DMAError+0x248>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d035      	beq.n	80076ee <I2C_DMAError+0xda>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a75      	ldr	r2, [pc, #468]	; (8007860 <I2C_DMAError+0x24c>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d02f      	beq.n	80076ee <I2C_DMAError+0xda>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a73      	ldr	r2, [pc, #460]	; (8007864 <I2C_DMAError+0x250>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d029      	beq.n	80076ee <I2C_DMAError+0xda>
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a71      	ldr	r2, [pc, #452]	; (8007868 <I2C_DMAError+0x254>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d023      	beq.n	80076ee <I2C_DMAError+0xda>
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a6f      	ldr	r2, [pc, #444]	; (800786c <I2C_DMAError+0x258>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01d      	beq.n	80076ee <I2C_DMAError+0xda>
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a6d      	ldr	r2, [pc, #436]	; (8007870 <I2C_DMAError+0x25c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d017      	beq.n	80076ee <I2C_DMAError+0xda>
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a6b      	ldr	r2, [pc, #428]	; (8007874 <I2C_DMAError+0x260>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d011      	beq.n	80076ee <I2C_DMAError+0xda>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a69      	ldr	r2, [pc, #420]	; (8007878 <I2C_DMAError+0x264>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00b      	beq.n	80076ee <I2C_DMAError+0xda>
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a67      	ldr	r2, [pc, #412]	; (800787c <I2C_DMAError+0x268>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d005      	beq.n	80076ee <I2C_DMAError+0xda>
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a65      	ldr	r2, [pc, #404]	; (8007880 <I2C_DMAError+0x26c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d109      	bne.n	8007702 <I2C_DMAError+0xee>
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	bf0c      	ite	eq
 80076fa:	2301      	moveq	r3, #1
 80076fc:	2300      	movne	r3, #0
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	e008      	b.n	8007714 <I2C_DMAError+0x100>
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	bf0c      	ite	eq
 800770e:	2301      	moveq	r3, #1
 8007710:	2300      	movne	r3, #0
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8007718:	2301      	movs	r3, #1
 800771a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d076      	beq.n	8007812 <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a46      	ldr	r2, [pc, #280]	; (8007844 <I2C_DMAError+0x230>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d059      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a44      	ldr	r2, [pc, #272]	; (8007848 <I2C_DMAError+0x234>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d053      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a42      	ldr	r2, [pc, #264]	; (800784c <I2C_DMAError+0x238>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d04d      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a40      	ldr	r2, [pc, #256]	; (8007850 <I2C_DMAError+0x23c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d047      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a3e      	ldr	r2, [pc, #248]	; (8007854 <I2C_DMAError+0x240>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d041      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a3c      	ldr	r2, [pc, #240]	; (8007858 <I2C_DMAError+0x244>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d03b      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a3a      	ldr	r2, [pc, #232]	; (800785c <I2C_DMAError+0x248>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d035      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a38      	ldr	r2, [pc, #224]	; (8007860 <I2C_DMAError+0x24c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d02f      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a36      	ldr	r2, [pc, #216]	; (8007864 <I2C_DMAError+0x250>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d029      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a34      	ldr	r2, [pc, #208]	; (8007868 <I2C_DMAError+0x254>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d023      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a32      	ldr	r2, [pc, #200]	; (800786c <I2C_DMAError+0x258>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d01d      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a30      	ldr	r2, [pc, #192]	; (8007870 <I2C_DMAError+0x25c>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d017      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a2e      	ldr	r2, [pc, #184]	; (8007874 <I2C_DMAError+0x260>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d011      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a2c      	ldr	r2, [pc, #176]	; (8007878 <I2C_DMAError+0x264>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d00b      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a2a      	ldr	r2, [pc, #168]	; (800787c <I2C_DMAError+0x268>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d005      	beq.n	80077e4 <I2C_DMAError+0x1d0>
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a28      	ldr	r2, [pc, #160]	; (8007880 <I2C_DMAError+0x26c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d109      	bne.n	80077f8 <I2C_DMAError+0x1e4>
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	bf0c      	ite	eq
 80077f0:	2301      	moveq	r3, #1
 80077f2:	2300      	movne	r3, #0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	e008      	b.n	800780a <I2C_DMAError+0x1f6>
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	bf0c      	ite	eq
 8007804:	2301      	moveq	r3, #1
 8007806:	2300      	movne	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 800780e:	2301      	movs	r3, #1
 8007810:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7fd fadc 	bl	8004dd0 <HAL_DMA_GetError>
 8007818:	4603      	mov	r3, r0
 800781a:	2b02      	cmp	r3, #2
 800781c:	d00e      	beq.n	800783c <I2C_DMAError+0x228>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00b      	beq.n	800783c <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007832:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007834:	2110      	movs	r1, #16
 8007836:	68b8      	ldr	r0, [r7, #8]
 8007838:	f7ff fd86 	bl	8007348 <I2C_ITError>
  }
}
 800783c:	bf00      	nop
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	40020010 	.word	0x40020010
 8007848:	40020028 	.word	0x40020028
 800784c:	40020040 	.word	0x40020040
 8007850:	40020058 	.word	0x40020058
 8007854:	40020070 	.word	0x40020070
 8007858:	40020088 	.word	0x40020088
 800785c:	400200a0 	.word	0x400200a0
 8007860:	400200b8 	.word	0x400200b8
 8007864:	40020410 	.word	0x40020410
 8007868:	40020428 	.word	0x40020428
 800786c:	40020440 	.word	0x40020440
 8007870:	40020458 	.word	0x40020458
 8007874:	40020470 	.word	0x40020470
 8007878:	40020488 	.word	0x40020488
 800787c:	400204a0 	.word	0x400204a0
 8007880:	400204b8 	.word	0x400204b8

08007884 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007890:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	2200      	movs	r2, #0
 80078a0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ae:	2200      	movs	r2, #0
 80078b0:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f7ff fe18 	bl	80074e8 <I2C_TreatErrorCallback>
}
 80078b8:	bf00      	nop
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	4613      	mov	r3, r2
 80078ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078d0:	e022      	b.n	8007918 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d8:	d01e      	beq.n	8007918 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078da:	f7fa fecd 	bl	8002678 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d302      	bcc.n	80078f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d113      	bne.n	8007918 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f4:	f043 0220 	orr.w	r2, r3, #32
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2220      	movs	r2, #32
 8007900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e00f      	b.n	8007938 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699a      	ldr	r2, [r3, #24]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	4013      	ands	r3, r2
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	429a      	cmp	r2, r3
 8007926:	bf0c      	ite	eq
 8007928:	2301      	moveq	r3, #1
 800792a:	2300      	movne	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	461a      	mov	r2, r3
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	429a      	cmp	r2, r3
 8007934:	d0cd      	beq.n	80078d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800794c:	e02c      	b.n	80079a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 f870 	bl	8007a38 <I2C_IsAcknowledgeFailed>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e02a      	b.n	80079b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007968:	d01e      	beq.n	80079a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800796a:	f7fa fe85 	bl	8002678 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	429a      	cmp	r2, r3
 8007978:	d302      	bcc.n	8007980 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d113      	bne.n	80079a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007984:	f043 0220 	orr.w	r2, r3, #32
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2220      	movs	r2, #32
 8007990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e007      	b.n	80079b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d1cb      	bne.n	800794e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079cc:	e028      	b.n	8007a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	68b9      	ldr	r1, [r7, #8]
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f830 	bl	8007a38 <I2C_IsAcknowledgeFailed>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e026      	b.n	8007a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e2:	f7fa fe49 	bl	8002678 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d302      	bcc.n	80079f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d113      	bne.n	8007a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fc:	f043 0220 	orr.w	r2, r3, #32
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2220      	movs	r2, #32
 8007a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e007      	b.n	8007a30 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	d1cf      	bne.n	80079ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	f003 0310 	and.w	r3, r3, #16
 8007a4e:	2b10      	cmp	r3, #16
 8007a50:	d151      	bne.n	8007af6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a52:	e022      	b.n	8007a9a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5a:	d01e      	beq.n	8007a9a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a5c:	f7fa fe0c 	bl	8002678 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d302      	bcc.n	8007a72 <I2C_IsAcknowledgeFailed+0x3a>
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d113      	bne.n	8007a9a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a76:	f043 0220 	orr.w	r2, r3, #32
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e02e      	b.n	8007af8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	d1d5      	bne.n	8007a54 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2210      	movs	r2, #16
 8007aae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f7ff fd3c 	bl	8007536 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6859      	ldr	r1, [r3, #4]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <I2C_IsAcknowledgeFailed+0xc8>)
 8007aca:	400b      	ands	r3, r1
 8007acc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad2:	f043 0204 	orr.w	r2, r3, #4
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2220      	movs	r2, #32
 8007ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e000      	b.n	8007af8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	fe00e800 	.word	0xfe00e800

08007b04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	607b      	str	r3, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	817b      	strh	r3, [r7, #10]
 8007b12:	4613      	mov	r3, r2
 8007b14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	0d5b      	lsrs	r3, r3, #21
 8007b20:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b24:	4b0d      	ldr	r3, [pc, #52]	; (8007b5c <I2C_TransferConfig+0x58>)
 8007b26:	430b      	orrs	r3, r1
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	ea02 0103 	and.w	r1, r2, r3
 8007b2e:	897b      	ldrh	r3, [r7, #10]
 8007b30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007b34:	7a7b      	ldrb	r3, [r7, #9]
 8007b36:	041b      	lsls	r3, r3, #16
 8007b38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	431a      	orrs	r2, r3
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	431a      	orrs	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	03ff63ff 	.word	0x03ff63ff

08007b60 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b74:	4a2a      	ldr	r2, [pc, #168]	; (8007c20 <I2C_Enable_IRQ+0xc0>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d004      	beq.n	8007b84 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007b7e:	4a29      	ldr	r2, [pc, #164]	; (8007c24 <I2C_Enable_IRQ+0xc4>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d11d      	bne.n	8007bc0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007b84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	da03      	bge.n	8007b94 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007b92:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007b94:	887b      	ldrh	r3, [r7, #2]
 8007b96:	2b10      	cmp	r3, #16
 8007b98:	d103      	bne.n	8007ba2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007ba0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ba2:	887b      	ldrh	r3, [r7, #2]
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d103      	bne.n	8007bb0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007bae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007bb0:	887b      	ldrh	r3, [r7, #2]
 8007bb2:	2b40      	cmp	r3, #64	; 0x40
 8007bb4:	d125      	bne.n	8007c02 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bbc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007bbe:	e020      	b.n	8007c02 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007bc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da03      	bge.n	8007bd0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007bce:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007bd0:	887b      	ldrh	r3, [r7, #2]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007be0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007be2:	887b      	ldrh	r3, [r7, #2]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007bf2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007bf4:	887b      	ldrh	r3, [r7, #2]
 8007bf6:	2b20      	cmp	r3, #32
 8007bf8:	d103      	bne.n	8007c02 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f043 0320 	orr.w	r3, r3, #32
 8007c00:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6819      	ldr	r1, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	601a      	str	r2, [r3, #0]
}
 8007c12:	bf00      	nop
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	080063e3 	.word	0x080063e3
 8007c24:	080065c9 	.word	0x080065c9

08007c28 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007c38:	887b      	ldrh	r3, [r7, #2]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00f      	beq.n	8007c62 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007c48:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c56:	2b28      	cmp	r3, #40	; 0x28
 8007c58:	d003      	beq.n	8007c62 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007c60:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007c62:	887b      	ldrh	r3, [r7, #2]
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00f      	beq.n	8007c8c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007c72:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c80:	2b28      	cmp	r3, #40	; 0x28
 8007c82:	d003      	beq.n	8007c8c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007c8a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007c8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	da03      	bge.n	8007c9c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007c9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007c9c:	887b      	ldrh	r3, [r7, #2]
 8007c9e:	2b10      	cmp	r3, #16
 8007ca0:	d103      	bne.n	8007caa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007ca8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007caa:	887b      	ldrh	r3, [r7, #2]
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d103      	bne.n	8007cb8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f043 0320 	orr.w	r3, r3, #32
 8007cb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007cb8:	887b      	ldrh	r3, [r7, #2]
 8007cba:	2b40      	cmp	r3, #64	; 0x40
 8007cbc:	d103      	bne.n	8007cc6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6819      	ldr	r1, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	43da      	mvns	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	400a      	ands	r2, r1
 8007cd6:	601a      	str	r2, [r3, #0]
}
 8007cd8:	bf00      	nop
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b20      	cmp	r3, #32
 8007cf8:	d138      	bne.n	8007d6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e032      	b.n	8007d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2224      	movs	r2, #36	; 0x24
 8007d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0201 	bic.w	r2, r2, #1
 8007d26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6819      	ldr	r1, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0201 	orr.w	r2, r2, #1
 8007d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	e000      	b.n	8007d6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d6c:	2302      	movs	r3, #2
  }
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr

08007d7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d7a:	b480      	push	{r7}
 8007d7c:	b085      	sub	sp, #20
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b20      	cmp	r3, #32
 8007d8e:	d139      	bne.n	8007e04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e033      	b.n	8007e06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2224      	movs	r2, #36	; 0x24
 8007daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0201 	bic.w	r2, r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007dcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	021b      	lsls	r3, r3, #8
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0201 	orr.w	r2, r2, #1
 8007dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	e000      	b.n	8007e06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e04:	2302      	movs	r3, #2
  }
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
	...

08007e14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007e1c:	4b19      	ldr	r3, [pc, #100]	; (8007e84 <HAL_PWREx_ConfigSupply+0x70>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d00a      	beq.n	8007e3e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e28:	4b16      	ldr	r3, [pc, #88]	; (8007e84 <HAL_PWREx_ConfigSupply+0x70>)
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f003 0307 	and.w	r3, r3, #7
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d001      	beq.n	8007e3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e01f      	b.n	8007e7a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	e01d      	b.n	8007e7a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e3e:	4b11      	ldr	r3, [pc, #68]	; (8007e84 <HAL_PWREx_ConfigSupply+0x70>)
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f023 0207 	bic.w	r2, r3, #7
 8007e46:	490f      	ldr	r1, [pc, #60]	; (8007e84 <HAL_PWREx_ConfigSupply+0x70>)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e4e:	f7fa fc13 	bl	8002678 <HAL_GetTick>
 8007e52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e54:	e009      	b.n	8007e6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007e56:	f7fa fc0f 	bl	8002678 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e64:	d901      	bls.n	8007e6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e007      	b.n	8007e7a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007e6a:	4b06      	ldr	r3, [pc, #24]	; (8007e84 <HAL_PWREx_ConfigSupply+0x70>)
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e76:	d1ee      	bne.n	8007e56 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	58024800 	.word	0x58024800

08007e88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08c      	sub	sp, #48	; 0x30
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e3ff      	b.n	800869a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 8087 	beq.w	8007fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ea8:	4b99      	ldr	r3, [pc, #612]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007eb2:	4b97      	ldr	r3, [pc, #604]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eba:	2b10      	cmp	r3, #16
 8007ebc:	d007      	beq.n	8007ece <HAL_RCC_OscConfig+0x46>
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	2b18      	cmp	r3, #24
 8007ec2:	d110      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x5e>
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d10b      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ece:	4b90      	ldr	r3, [pc, #576]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d06c      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x12c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d168      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e3d9      	b.n	800869a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eee:	d106      	bne.n	8007efe <HAL_RCC_OscConfig+0x76>
 8007ef0:	4b87      	ldr	r3, [pc, #540]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a86      	ldr	r2, [pc, #536]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	e02e      	b.n	8007f5c <HAL_RCC_OscConfig+0xd4>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10c      	bne.n	8007f20 <HAL_RCC_OscConfig+0x98>
 8007f06:	4b82      	ldr	r3, [pc, #520]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a81      	ldr	r2, [pc, #516]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	4b7f      	ldr	r3, [pc, #508]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a7e      	ldr	r2, [pc, #504]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	e01d      	b.n	8007f5c <HAL_RCC_OscConfig+0xd4>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f28:	d10c      	bne.n	8007f44 <HAL_RCC_OscConfig+0xbc>
 8007f2a:	4b79      	ldr	r3, [pc, #484]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a78      	ldr	r2, [pc, #480]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	4b76      	ldr	r3, [pc, #472]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a75      	ldr	r2, [pc, #468]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	e00b      	b.n	8007f5c <HAL_RCC_OscConfig+0xd4>
 8007f44:	4b72      	ldr	r3, [pc, #456]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a71      	ldr	r2, [pc, #452]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	4b6f      	ldr	r3, [pc, #444]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a6e      	ldr	r2, [pc, #440]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d013      	beq.n	8007f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f64:	f7fa fb88 	bl	8002678 <HAL_GetTick>
 8007f68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f6a:	e008      	b.n	8007f7e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f6c:	f7fa fb84 	bl	8002678 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	2b64      	cmp	r3, #100	; 0x64
 8007f78:	d901      	bls.n	8007f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e38d      	b.n	800869a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007f7e:	4b64      	ldr	r3, [pc, #400]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0f0      	beq.n	8007f6c <HAL_RCC_OscConfig+0xe4>
 8007f8a:	e014      	b.n	8007fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8c:	f7fa fb74 	bl	8002678 <HAL_GetTick>
 8007f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f92:	e008      	b.n	8007fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f94:	f7fa fb70 	bl	8002678 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	2b64      	cmp	r3, #100	; 0x64
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e379      	b.n	800869a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007fa6:	4b5a      	ldr	r3, [pc, #360]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d1f0      	bne.n	8007f94 <HAL_RCC_OscConfig+0x10c>
 8007fb2:	e000      	b.n	8007fb6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 80ae 	beq.w	8008120 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fc4:	4b52      	ldr	r3, [pc, #328]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fcc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007fce:	4b50      	ldr	r3, [pc, #320]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d007      	beq.n	8007fea <HAL_RCC_OscConfig+0x162>
 8007fda:	6a3b      	ldr	r3, [r7, #32]
 8007fdc:	2b18      	cmp	r3, #24
 8007fde:	d13a      	bne.n	8008056 <HAL_RCC_OscConfig+0x1ce>
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d135      	bne.n	8008056 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fea:	4b49      	ldr	r3, [pc, #292]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0304 	and.w	r3, r3, #4
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d005      	beq.n	8008002 <HAL_RCC_OscConfig+0x17a>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e34b      	b.n	800869a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008002:	f7fa fb69 	bl	80026d8 <HAL_GetREVID>
 8008006:	4603      	mov	r3, r0
 8008008:	f241 0203 	movw	r2, #4099	; 0x1003
 800800c:	4293      	cmp	r3, r2
 800800e:	d817      	bhi.n	8008040 <HAL_RCC_OscConfig+0x1b8>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	2b40      	cmp	r3, #64	; 0x40
 8008016:	d108      	bne.n	800802a <HAL_RCC_OscConfig+0x1a2>
 8008018:	4b3d      	ldr	r3, [pc, #244]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008020:	4a3b      	ldr	r2, [pc, #236]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8008022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008026:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008028:	e07a      	b.n	8008120 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800802a:	4b39      	ldr	r3, [pc, #228]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	031b      	lsls	r3, r3, #12
 8008038:	4935      	ldr	r1, [pc, #212]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 800803a:	4313      	orrs	r3, r2
 800803c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800803e:	e06f      	b.n	8008120 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008040:	4b33      	ldr	r3, [pc, #204]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	061b      	lsls	r3, r3, #24
 800804e:	4930      	ldr	r1, [pc, #192]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8008050:	4313      	orrs	r3, r2
 8008052:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008054:	e064      	b.n	8008120 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d045      	beq.n	80080ea <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800805e:	4b2c      	ldr	r3, [pc, #176]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f023 0219 	bic.w	r2, r3, #25
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	4929      	ldr	r1, [pc, #164]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 800806c:	4313      	orrs	r3, r2
 800806e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fa fb02 	bl	8002678 <HAL_GetTick>
 8008074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008078:	f7fa fafe 	bl	8002678 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e307      	b.n	800869a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800808a:	4b21      	ldr	r3, [pc, #132]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0f0      	beq.n	8008078 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008096:	f7fa fb1f 	bl	80026d8 <HAL_GetREVID>
 800809a:	4603      	mov	r3, r0
 800809c:	f241 0203 	movw	r2, #4099	; 0x1003
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d817      	bhi.n	80080d4 <HAL_RCC_OscConfig+0x24c>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b40      	cmp	r3, #64	; 0x40
 80080aa:	d108      	bne.n	80080be <HAL_RCC_OscConfig+0x236>
 80080ac:	4b18      	ldr	r3, [pc, #96]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80080b4:	4a16      	ldr	r2, [pc, #88]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 80080b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ba:	6053      	str	r3, [r2, #4]
 80080bc:	e030      	b.n	8008120 <HAL_RCC_OscConfig+0x298>
 80080be:	4b14      	ldr	r3, [pc, #80]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	031b      	lsls	r3, r3, #12
 80080cc:	4910      	ldr	r1, [pc, #64]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	604b      	str	r3, [r1, #4]
 80080d2:	e025      	b.n	8008120 <HAL_RCC_OscConfig+0x298>
 80080d4:	4b0e      	ldr	r3, [pc, #56]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	061b      	lsls	r3, r3, #24
 80080e2:	490b      	ldr	r1, [pc, #44]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	604b      	str	r3, [r1, #4]
 80080e8:	e01a      	b.n	8008120 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080ea:	4b09      	ldr	r3, [pc, #36]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a08      	ldr	r2, [pc, #32]	; (8008110 <HAL_RCC_OscConfig+0x288>)
 80080f0:	f023 0301 	bic.w	r3, r3, #1
 80080f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f6:	f7fa fabf 	bl	8002678 <HAL_GetTick>
 80080fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080fc:	e00a      	b.n	8008114 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080fe:	f7fa fabb 	bl	8002678 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d903      	bls.n	8008114 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e2c4      	b.n	800869a <HAL_RCC_OscConfig+0x812>
 8008110:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008114:	4ba4      	ldr	r3, [pc, #656]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1ee      	bne.n	80080fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	2b00      	cmp	r3, #0
 800812a:	f000 80a9 	beq.w	8008280 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800812e:	4b9e      	ldr	r3, [pc, #632]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008136:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008138:	4b9b      	ldr	r3, [pc, #620]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 800813a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	2b08      	cmp	r3, #8
 8008142:	d007      	beq.n	8008154 <HAL_RCC_OscConfig+0x2cc>
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	2b18      	cmp	r3, #24
 8008148:	d13a      	bne.n	80081c0 <HAL_RCC_OscConfig+0x338>
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f003 0303 	and.w	r3, r3, #3
 8008150:	2b01      	cmp	r3, #1
 8008152:	d135      	bne.n	80081c0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008154:	4b94      	ldr	r3, [pc, #592]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800815c:	2b00      	cmp	r3, #0
 800815e:	d005      	beq.n	800816c <HAL_RCC_OscConfig+0x2e4>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	2b80      	cmp	r3, #128	; 0x80
 8008166:	d001      	beq.n	800816c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e296      	b.n	800869a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800816c:	f7fa fab4 	bl	80026d8 <HAL_GetREVID>
 8008170:	4603      	mov	r3, r0
 8008172:	f241 0203 	movw	r2, #4099	; 0x1003
 8008176:	4293      	cmp	r3, r2
 8008178:	d817      	bhi.n	80081aa <HAL_RCC_OscConfig+0x322>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	2b20      	cmp	r3, #32
 8008180:	d108      	bne.n	8008194 <HAL_RCC_OscConfig+0x30c>
 8008182:	4b89      	ldr	r3, [pc, #548]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800818a:	4a87      	ldr	r2, [pc, #540]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 800818c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008190:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008192:	e075      	b.n	8008280 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008194:	4b84      	ldr	r3, [pc, #528]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	069b      	lsls	r3, r3, #26
 80081a2:	4981      	ldr	r1, [pc, #516]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081a8:	e06a      	b.n	8008280 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081aa:	4b7f      	ldr	r3, [pc, #508]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	061b      	lsls	r3, r3, #24
 80081b8:	497b      	ldr	r1, [pc, #492]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80081be:	e05f      	b.n	8008280 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d042      	beq.n	800824e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80081c8:	4b77      	ldr	r3, [pc, #476]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a76      	ldr	r2, [pc, #472]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 80081ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d4:	f7fa fa50 	bl	8002678 <HAL_GetTick>
 80081d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081da:	e008      	b.n	80081ee <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80081dc:	f7fa fa4c 	bl	8002678 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d901      	bls.n	80081ee <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e255      	b.n	800869a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80081ee:	4b6e      	ldr	r3, [pc, #440]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0f0      	beq.n	80081dc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081fa:	f7fa fa6d 	bl	80026d8 <HAL_GetREVID>
 80081fe:	4603      	mov	r3, r0
 8008200:	f241 0203 	movw	r2, #4099	; 0x1003
 8008204:	4293      	cmp	r3, r2
 8008206:	d817      	bhi.n	8008238 <HAL_RCC_OscConfig+0x3b0>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	2b20      	cmp	r3, #32
 800820e:	d108      	bne.n	8008222 <HAL_RCC_OscConfig+0x39a>
 8008210:	4b65      	ldr	r3, [pc, #404]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008218:	4a63      	ldr	r2, [pc, #396]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 800821a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800821e:	6053      	str	r3, [r2, #4]
 8008220:	e02e      	b.n	8008280 <HAL_RCC_OscConfig+0x3f8>
 8008222:	4b61      	ldr	r3, [pc, #388]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	069b      	lsls	r3, r3, #26
 8008230:	495d      	ldr	r1, [pc, #372]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008232:	4313      	orrs	r3, r2
 8008234:	604b      	str	r3, [r1, #4]
 8008236:	e023      	b.n	8008280 <HAL_RCC_OscConfig+0x3f8>
 8008238:	4b5b      	ldr	r3, [pc, #364]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	061b      	lsls	r3, r3, #24
 8008246:	4958      	ldr	r1, [pc, #352]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008248:	4313      	orrs	r3, r2
 800824a:	60cb      	str	r3, [r1, #12]
 800824c:	e018      	b.n	8008280 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800824e:	4b56      	ldr	r3, [pc, #344]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a55      	ldr	r2, [pc, #340]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825a:	f7fa fa0d 	bl	8002678 <HAL_GetTick>
 800825e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008260:	e008      	b.n	8008274 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008262:	f7fa fa09 	bl	8002678 <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d901      	bls.n	8008274 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e212      	b.n	800869a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008274:	4b4c      	ldr	r3, [pc, #304]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1f0      	bne.n	8008262 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0308 	and.w	r3, r3, #8
 8008288:	2b00      	cmp	r3, #0
 800828a:	d036      	beq.n	80082fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d019      	beq.n	80082c8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008294:	4b44      	ldr	r3, [pc, #272]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008298:	4a43      	ldr	r2, [pc, #268]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a0:	f7fa f9ea 	bl	8002678 <HAL_GetTick>
 80082a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80082a6:	e008      	b.n	80082ba <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082a8:	f7fa f9e6 	bl	8002678 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d901      	bls.n	80082ba <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e1ef      	b.n	800869a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80082ba:	4b3b      	ldr	r3, [pc, #236]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 80082bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0f0      	beq.n	80082a8 <HAL_RCC_OscConfig+0x420>
 80082c6:	e018      	b.n	80082fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082c8:	4b37      	ldr	r3, [pc, #220]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 80082ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082cc:	4a36      	ldr	r2, [pc, #216]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 80082ce:	f023 0301 	bic.w	r3, r3, #1
 80082d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d4:	f7fa f9d0 	bl	8002678 <HAL_GetTick>
 80082d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082da:	e008      	b.n	80082ee <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082dc:	f7fa f9cc 	bl	8002678 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e1d5      	b.n	800869a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80082ee:	4b2e      	ldr	r3, [pc, #184]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 80082f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1f0      	bne.n	80082dc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0320 	and.w	r3, r3, #32
 8008302:	2b00      	cmp	r3, #0
 8008304:	d036      	beq.n	8008374 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d019      	beq.n	8008342 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800830e:	4b26      	ldr	r3, [pc, #152]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a25      	ldr	r2, [pc, #148]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008318:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800831a:	f7fa f9ad 	bl	8002678 <HAL_GetTick>
 800831e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008320:	e008      	b.n	8008334 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008322:	f7fa f9a9 	bl	8002678 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d901      	bls.n	8008334 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e1b2      	b.n	800869a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008334:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0f0      	beq.n	8008322 <HAL_RCC_OscConfig+0x49a>
 8008340:	e018      	b.n	8008374 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008342:	4b19      	ldr	r3, [pc, #100]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a18      	ldr	r2, [pc, #96]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 8008348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800834c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800834e:	f7fa f993 	bl	8002678 <HAL_GetTick>
 8008352:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008354:	e008      	b.n	8008368 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008356:	f7fa f98f 	bl	8002678 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e198      	b.n	800869a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008368:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <HAL_RCC_OscConfig+0x520>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1f0      	bne.n	8008356 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b00      	cmp	r3, #0
 800837e:	f000 8085 	beq.w	800848c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008382:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <HAL_RCC_OscConfig+0x524>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a09      	ldr	r2, [pc, #36]	; (80083ac <HAL_RCC_OscConfig+0x524>)
 8008388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800838c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800838e:	f7fa f973 	bl	8002678 <HAL_GetTick>
 8008392:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008394:	e00c      	b.n	80083b0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008396:	f7fa f96f 	bl	8002678 <HAL_GetTick>
 800839a:	4602      	mov	r2, r0
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	1ad3      	subs	r3, r2, r3
 80083a0:	2b64      	cmp	r3, #100	; 0x64
 80083a2:	d905      	bls.n	80083b0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e178      	b.n	800869a <HAL_RCC_OscConfig+0x812>
 80083a8:	58024400 	.word	0x58024400
 80083ac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083b0:	4b96      	ldr	r3, [pc, #600]	; (800860c <HAL_RCC_OscConfig+0x784>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d0ec      	beq.n	8008396 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d106      	bne.n	80083d2 <HAL_RCC_OscConfig+0x54a>
 80083c4:	4b92      	ldr	r3, [pc, #584]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80083c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c8:	4a91      	ldr	r2, [pc, #580]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80083ca:	f043 0301 	orr.w	r3, r3, #1
 80083ce:	6713      	str	r3, [r2, #112]	; 0x70
 80083d0:	e02d      	b.n	800842e <HAL_RCC_OscConfig+0x5a6>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10c      	bne.n	80083f4 <HAL_RCC_OscConfig+0x56c>
 80083da:	4b8d      	ldr	r3, [pc, #564]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80083dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083de:	4a8c      	ldr	r2, [pc, #560]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80083e0:	f023 0301 	bic.w	r3, r3, #1
 80083e4:	6713      	str	r3, [r2, #112]	; 0x70
 80083e6:	4b8a      	ldr	r3, [pc, #552]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80083e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ea:	4a89      	ldr	r2, [pc, #548]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80083ec:	f023 0304 	bic.w	r3, r3, #4
 80083f0:	6713      	str	r3, [r2, #112]	; 0x70
 80083f2:	e01c      	b.n	800842e <HAL_RCC_OscConfig+0x5a6>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2b05      	cmp	r3, #5
 80083fa:	d10c      	bne.n	8008416 <HAL_RCC_OscConfig+0x58e>
 80083fc:	4b84      	ldr	r3, [pc, #528]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80083fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008400:	4a83      	ldr	r2, [pc, #524]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008402:	f043 0304 	orr.w	r3, r3, #4
 8008406:	6713      	str	r3, [r2, #112]	; 0x70
 8008408:	4b81      	ldr	r3, [pc, #516]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 800840a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840c:	4a80      	ldr	r2, [pc, #512]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 800840e:	f043 0301 	orr.w	r3, r3, #1
 8008412:	6713      	str	r3, [r2, #112]	; 0x70
 8008414:	e00b      	b.n	800842e <HAL_RCC_OscConfig+0x5a6>
 8008416:	4b7e      	ldr	r3, [pc, #504]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841a:	4a7d      	ldr	r2, [pc, #500]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	6713      	str	r3, [r2, #112]	; 0x70
 8008422:	4b7b      	ldr	r3, [pc, #492]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008426:	4a7a      	ldr	r2, [pc, #488]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008428:	f023 0304 	bic.w	r3, r3, #4
 800842c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d015      	beq.n	8008462 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008436:	f7fa f91f 	bl	8002678 <HAL_GetTick>
 800843a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800843c:	e00a      	b.n	8008454 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800843e:	f7fa f91b 	bl	8002678 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	f241 3288 	movw	r2, #5000	; 0x1388
 800844c:	4293      	cmp	r3, r2
 800844e:	d901      	bls.n	8008454 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e122      	b.n	800869a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008454:	4b6e      	ldr	r3, [pc, #440]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008458:	f003 0302 	and.w	r3, r3, #2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0ee      	beq.n	800843e <HAL_RCC_OscConfig+0x5b6>
 8008460:	e014      	b.n	800848c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008462:	f7fa f909 	bl	8002678 <HAL_GetTick>
 8008466:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008468:	e00a      	b.n	8008480 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800846a:	f7fa f905 	bl	8002678 <HAL_GetTick>
 800846e:	4602      	mov	r2, r0
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	1ad3      	subs	r3, r2, r3
 8008474:	f241 3288 	movw	r2, #5000	; 0x1388
 8008478:	4293      	cmp	r3, r2
 800847a:	d901      	bls.n	8008480 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e10c      	b.n	800869a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008480:	4b63      	ldr	r3, [pc, #396]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008484:	f003 0302 	and.w	r3, r3, #2
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1ee      	bne.n	800846a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 8101 	beq.w	8008698 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008496:	4b5e      	ldr	r3, [pc, #376]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800849e:	2b18      	cmp	r3, #24
 80084a0:	f000 80bc 	beq.w	800861c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	f040 8095 	bne.w	80085d8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ae:	4b58      	ldr	r3, [pc, #352]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a57      	ldr	r2, [pc, #348]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80084b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ba:	f7fa f8dd 	bl	8002678 <HAL_GetTick>
 80084be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084c0:	e008      	b.n	80084d4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084c2:	f7fa f8d9 	bl	8002678 <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d901      	bls.n	80084d4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80084d0:	2303      	movs	r3, #3
 80084d2:	e0e2      	b.n	800869a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084d4:	4b4e      	ldr	r3, [pc, #312]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1f0      	bne.n	80084c2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084e0:	4b4b      	ldr	r3, [pc, #300]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80084e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084e4:	4b4b      	ldr	r3, [pc, #300]	; (8008614 <HAL_RCC_OscConfig+0x78c>)
 80084e6:	4013      	ands	r3, r2
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80084f0:	0112      	lsls	r2, r2, #4
 80084f2:	430a      	orrs	r2, r1
 80084f4:	4946      	ldr	r1, [pc, #280]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	628b      	str	r3, [r1, #40]	; 0x28
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fe:	3b01      	subs	r3, #1
 8008500:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008508:	3b01      	subs	r3, #1
 800850a:	025b      	lsls	r3, r3, #9
 800850c:	b29b      	uxth	r3, r3
 800850e:	431a      	orrs	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	3b01      	subs	r3, #1
 8008516:	041b      	lsls	r3, r3, #16
 8008518:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800851c:	431a      	orrs	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008522:	3b01      	subs	r3, #1
 8008524:	061b      	lsls	r3, r3, #24
 8008526:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800852a:	4939      	ldr	r1, [pc, #228]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 800852c:	4313      	orrs	r3, r2
 800852e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008530:	4b37      	ldr	r3, [pc, #220]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	4a36      	ldr	r2, [pc, #216]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008536:	f023 0301 	bic.w	r3, r3, #1
 800853a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800853c:	4b34      	ldr	r3, [pc, #208]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 800853e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008540:	4b35      	ldr	r3, [pc, #212]	; (8008618 <HAL_RCC_OscConfig+0x790>)
 8008542:	4013      	ands	r3, r2
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008548:	00d2      	lsls	r2, r2, #3
 800854a:	4931      	ldr	r1, [pc, #196]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 800854c:	4313      	orrs	r3, r2
 800854e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008550:	4b2f      	ldr	r3, [pc, #188]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	f023 020c 	bic.w	r2, r3, #12
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	492c      	ldr	r1, [pc, #176]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 800855e:	4313      	orrs	r3, r2
 8008560:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008562:	4b2b      	ldr	r3, [pc, #172]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	f023 0202 	bic.w	r2, r3, #2
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856e:	4928      	ldr	r1, [pc, #160]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008570:	4313      	orrs	r3, r2
 8008572:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008574:	4b26      	ldr	r3, [pc, #152]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	4a25      	ldr	r2, [pc, #148]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 800857a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800857e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008580:	4b23      	ldr	r3, [pc, #140]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	4a22      	ldr	r2, [pc, #136]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800858a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800858c:	4b20      	ldr	r3, [pc, #128]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 800858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008590:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008592:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008598:	4b1d      	ldr	r3, [pc, #116]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	4a1c      	ldr	r2, [pc, #112]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 800859e:	f043 0301 	orr.w	r3, r3, #1
 80085a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085a4:	4b1a      	ldr	r3, [pc, #104]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a19      	ldr	r2, [pc, #100]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80085aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80085ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b0:	f7fa f862 	bl	8002678 <HAL_GetTick>
 80085b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085b8:	f7fa f85e 	bl	8002678 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e067      	b.n	800869a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80085ca:	4b11      	ldr	r3, [pc, #68]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0f0      	beq.n	80085b8 <HAL_RCC_OscConfig+0x730>
 80085d6:	e05f      	b.n	8008698 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085d8:	4b0d      	ldr	r3, [pc, #52]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a0c      	ldr	r2, [pc, #48]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 80085de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e4:	f7fa f848 	bl	8002678 <HAL_GetTick>
 80085e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085ea:	e008      	b.n	80085fe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085ec:	f7fa f844 	bl	8002678 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d901      	bls.n	80085fe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e04d      	b.n	800869a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085fe:	4b04      	ldr	r3, [pc, #16]	; (8008610 <HAL_RCC_OscConfig+0x788>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1f0      	bne.n	80085ec <HAL_RCC_OscConfig+0x764>
 800860a:	e045      	b.n	8008698 <HAL_RCC_OscConfig+0x810>
 800860c:	58024800 	.word	0x58024800
 8008610:	58024400 	.word	0x58024400
 8008614:	fffffc0c 	.word	0xfffffc0c
 8008618:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800861c:	4b21      	ldr	r3, [pc, #132]	; (80086a4 <HAL_RCC_OscConfig+0x81c>)
 800861e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008620:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008622:	4b20      	ldr	r3, [pc, #128]	; (80086a4 <HAL_RCC_OscConfig+0x81c>)
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	2b01      	cmp	r3, #1
 800862e:	d031      	beq.n	8008694 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f003 0203 	and.w	r2, r3, #3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800863a:	429a      	cmp	r2, r3
 800863c:	d12a      	bne.n	8008694 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	091b      	lsrs	r3, r3, #4
 8008642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800864a:	429a      	cmp	r2, r3
 800864c:	d122      	bne.n	8008694 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800865a:	429a      	cmp	r2, r3
 800865c:	d11a      	bne.n	8008694 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	0a5b      	lsrs	r3, r3, #9
 8008662:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800866c:	429a      	cmp	r2, r3
 800866e:	d111      	bne.n	8008694 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	0c1b      	lsrs	r3, r3, #16
 8008674:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800867e:	429a      	cmp	r2, r3
 8008680:	d108      	bne.n	8008694 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	0e1b      	lsrs	r3, r3, #24
 8008686:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800868e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008690:	429a      	cmp	r2, r3
 8008692:	d001      	beq.n	8008698 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e000      	b.n	800869a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3730      	adds	r7, #48	; 0x30
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	58024400 	.word	0x58024400

080086a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e19c      	b.n	80089f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80086bc:	4b8a      	ldr	r3, [pc, #552]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 030f 	and.w	r3, r3, #15
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d910      	bls.n	80086ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ca:	4b87      	ldr	r3, [pc, #540]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f023 020f 	bic.w	r2, r3, #15
 80086d2:	4985      	ldr	r1, [pc, #532]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086da:	4b83      	ldr	r3, [pc, #524]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 030f 	and.w	r3, r3, #15
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d001      	beq.n	80086ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e184      	b.n	80089f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d010      	beq.n	800871a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	4b7b      	ldr	r3, [pc, #492]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008704:	429a      	cmp	r2, r3
 8008706:	d908      	bls.n	800871a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008708:	4b78      	ldr	r3, [pc, #480]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	4975      	ldr	r1, [pc, #468]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008716:	4313      	orrs	r3, r2
 8008718:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0308 	and.w	r3, r3, #8
 8008722:	2b00      	cmp	r3, #0
 8008724:	d010      	beq.n	8008748 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	695a      	ldr	r2, [r3, #20]
 800872a:	4b70      	ldr	r3, [pc, #448]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008732:	429a      	cmp	r2, r3
 8008734:	d908      	bls.n	8008748 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008736:	4b6d      	ldr	r3, [pc, #436]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	496a      	ldr	r1, [pc, #424]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008744:	4313      	orrs	r3, r2
 8008746:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0310 	and.w	r3, r3, #16
 8008750:	2b00      	cmp	r3, #0
 8008752:	d010      	beq.n	8008776 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699a      	ldr	r2, [r3, #24]
 8008758:	4b64      	ldr	r3, [pc, #400]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800875a:	69db      	ldr	r3, [r3, #28]
 800875c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008760:	429a      	cmp	r2, r3
 8008762:	d908      	bls.n	8008776 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008764:	4b61      	ldr	r3, [pc, #388]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	495e      	ldr	r1, [pc, #376]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008772:	4313      	orrs	r3, r2
 8008774:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d010      	beq.n	80087a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	69da      	ldr	r2, [r3, #28]
 8008786:	4b59      	ldr	r3, [pc, #356]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800878e:	429a      	cmp	r2, r3
 8008790:	d908      	bls.n	80087a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008792:	4b56      	ldr	r3, [pc, #344]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	4953      	ldr	r1, [pc, #332]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0302 	and.w	r3, r3, #2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d010      	beq.n	80087d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68da      	ldr	r2, [r3, #12]
 80087b4:	4b4d      	ldr	r3, [pc, #308]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	f003 030f 	and.w	r3, r3, #15
 80087bc:	429a      	cmp	r2, r3
 80087be:	d908      	bls.n	80087d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087c0:	4b4a      	ldr	r3, [pc, #296]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	f023 020f 	bic.w	r2, r3, #15
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	4947      	ldr	r1, [pc, #284]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d055      	beq.n	800888a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80087de:	4b43      	ldr	r3, [pc, #268]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	4940      	ldr	r1, [pc, #256]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087ec:	4313      	orrs	r3, r2
 80087ee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d107      	bne.n	8008808 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80087f8:	4b3c      	ldr	r3, [pc, #240]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d121      	bne.n	8008848 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e0f6      	b.n	80089f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	2b03      	cmp	r3, #3
 800880e:	d107      	bne.n	8008820 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008810:	4b36      	ldr	r3, [pc, #216]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d115      	bne.n	8008848 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e0ea      	b.n	80089f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d107      	bne.n	8008838 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008828:	4b30      	ldr	r3, [pc, #192]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008830:	2b00      	cmp	r3, #0
 8008832:	d109      	bne.n	8008848 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e0de      	b.n	80089f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008838:	4b2c      	ldr	r3, [pc, #176]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e0d6      	b.n	80089f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008848:	4b28      	ldr	r3, [pc, #160]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f023 0207 	bic.w	r2, r3, #7
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	4925      	ldr	r1, [pc, #148]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 8008856:	4313      	orrs	r3, r2
 8008858:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800885a:	f7f9 ff0d 	bl	8002678 <HAL_GetTick>
 800885e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008860:	e00a      	b.n	8008878 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008862:	f7f9 ff09 	bl	8002678 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008870:	4293      	cmp	r3, r2
 8008872:	d901      	bls.n	8008878 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008874:	2303      	movs	r3, #3
 8008876:	e0be      	b.n	80089f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008878:	4b1c      	ldr	r3, [pc, #112]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	429a      	cmp	r2, r3
 8008888:	d1eb      	bne.n	8008862 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d010      	beq.n	80088b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	4b14      	ldr	r3, [pc, #80]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d208      	bcs.n	80088b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088a6:	4b11      	ldr	r3, [pc, #68]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	f023 020f 	bic.w	r2, r3, #15
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	490e      	ldr	r1, [pc, #56]	; (80088ec <HAL_RCC_ClockConfig+0x244>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088b8:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 030f 	and.w	r3, r3, #15
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d214      	bcs.n	80088f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088c6:	4b08      	ldr	r3, [pc, #32]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f023 020f 	bic.w	r2, r3, #15
 80088ce:	4906      	ldr	r1, [pc, #24]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088d6:	4b04      	ldr	r3, [pc, #16]	; (80088e8 <HAL_RCC_ClockConfig+0x240>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f003 030f 	and.w	r3, r3, #15
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d005      	beq.n	80088f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e086      	b.n	80089f6 <HAL_RCC_ClockConfig+0x34e>
 80088e8:	52002000 	.word	0x52002000
 80088ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d010      	beq.n	800891e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691a      	ldr	r2, [r3, #16]
 8008900:	4b3f      	ldr	r3, [pc, #252]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008908:	429a      	cmp	r2, r3
 800890a:	d208      	bcs.n	800891e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800890c:	4b3c      	ldr	r3, [pc, #240]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	4939      	ldr	r1, [pc, #228]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 800891a:	4313      	orrs	r3, r2
 800891c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f003 0308 	and.w	r3, r3, #8
 8008926:	2b00      	cmp	r3, #0
 8008928:	d010      	beq.n	800894c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695a      	ldr	r2, [r3, #20]
 800892e:	4b34      	ldr	r3, [pc, #208]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008936:	429a      	cmp	r2, r3
 8008938:	d208      	bcs.n	800894c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800893a:	4b31      	ldr	r3, [pc, #196]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	492e      	ldr	r1, [pc, #184]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 8008948:	4313      	orrs	r3, r2
 800894a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0310 	and.w	r3, r3, #16
 8008954:	2b00      	cmp	r3, #0
 8008956:	d010      	beq.n	800897a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	699a      	ldr	r2, [r3, #24]
 800895c:	4b28      	ldr	r3, [pc, #160]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008964:	429a      	cmp	r2, r3
 8008966:	d208      	bcs.n	800897a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008968:	4b25      	ldr	r3, [pc, #148]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	4922      	ldr	r1, [pc, #136]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 8008976:	4313      	orrs	r3, r2
 8008978:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0320 	and.w	r3, r3, #32
 8008982:	2b00      	cmp	r3, #0
 8008984:	d010      	beq.n	80089a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	69da      	ldr	r2, [r3, #28]
 800898a:	4b1d      	ldr	r3, [pc, #116]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008992:	429a      	cmp	r2, r3
 8008994:	d208      	bcs.n	80089a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008996:	4b1a      	ldr	r3, [pc, #104]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	4917      	ldr	r1, [pc, #92]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80089a8:	f000 f834 	bl	8008a14 <HAL_RCC_GetSysClockFreq>
 80089ac:	4602      	mov	r2, r0
 80089ae:	4b14      	ldr	r3, [pc, #80]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	0a1b      	lsrs	r3, r3, #8
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	4912      	ldr	r1, [pc, #72]	; (8008a04 <HAL_RCC_ClockConfig+0x35c>)
 80089ba:	5ccb      	ldrb	r3, [r1, r3]
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	fa22 f303 	lsr.w	r3, r2, r3
 80089c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089c6:	4b0e      	ldr	r3, [pc, #56]	; (8008a00 <HAL_RCC_ClockConfig+0x358>)
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	f003 030f 	and.w	r3, r3, #15
 80089ce:	4a0d      	ldr	r2, [pc, #52]	; (8008a04 <HAL_RCC_ClockConfig+0x35c>)
 80089d0:	5cd3      	ldrb	r3, [r2, r3]
 80089d2:	f003 031f 	and.w	r3, r3, #31
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	fa22 f303 	lsr.w	r3, r2, r3
 80089dc:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <HAL_RCC_ClockConfig+0x360>)
 80089de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089e0:	4a0a      	ldr	r2, [pc, #40]	; (8008a0c <HAL_RCC_ClockConfig+0x364>)
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80089e6:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <HAL_RCC_ClockConfig+0x368>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7f9 fdfa 	bl	80025e4 <HAL_InitTick>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	58024400 	.word	0x58024400
 8008a04:	0800fff0 	.word	0x0800fff0
 8008a08:	24000010 	.word	0x24000010
 8008a0c:	2400000c 	.word	0x2400000c
 8008a10:	24000014 	.word	0x24000014

08008a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b089      	sub	sp, #36	; 0x24
 8008a18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a1a:	4bb3      	ldr	r3, [pc, #716]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a22:	2b18      	cmp	r3, #24
 8008a24:	f200 8155 	bhi.w	8008cd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8008a28:	a201      	add	r2, pc, #4	; (adr r2, 8008a30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2e:	bf00      	nop
 8008a30:	08008a95 	.word	0x08008a95
 8008a34:	08008cd3 	.word	0x08008cd3
 8008a38:	08008cd3 	.word	0x08008cd3
 8008a3c:	08008cd3 	.word	0x08008cd3
 8008a40:	08008cd3 	.word	0x08008cd3
 8008a44:	08008cd3 	.word	0x08008cd3
 8008a48:	08008cd3 	.word	0x08008cd3
 8008a4c:	08008cd3 	.word	0x08008cd3
 8008a50:	08008abb 	.word	0x08008abb
 8008a54:	08008cd3 	.word	0x08008cd3
 8008a58:	08008cd3 	.word	0x08008cd3
 8008a5c:	08008cd3 	.word	0x08008cd3
 8008a60:	08008cd3 	.word	0x08008cd3
 8008a64:	08008cd3 	.word	0x08008cd3
 8008a68:	08008cd3 	.word	0x08008cd3
 8008a6c:	08008cd3 	.word	0x08008cd3
 8008a70:	08008ac1 	.word	0x08008ac1
 8008a74:	08008cd3 	.word	0x08008cd3
 8008a78:	08008cd3 	.word	0x08008cd3
 8008a7c:	08008cd3 	.word	0x08008cd3
 8008a80:	08008cd3 	.word	0x08008cd3
 8008a84:	08008cd3 	.word	0x08008cd3
 8008a88:	08008cd3 	.word	0x08008cd3
 8008a8c:	08008cd3 	.word	0x08008cd3
 8008a90:	08008ac7 	.word	0x08008ac7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a94:	4b94      	ldr	r3, [pc, #592]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0320 	and.w	r3, r3, #32
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d009      	beq.n	8008ab4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008aa0:	4b91      	ldr	r3, [pc, #580]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	08db      	lsrs	r3, r3, #3
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	4a90      	ldr	r2, [pc, #576]	; (8008cec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008aac:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008ab2:	e111      	b.n	8008cd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008ab4:	4b8d      	ldr	r3, [pc, #564]	; (8008cec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ab6:	61bb      	str	r3, [r7, #24]
    break;
 8008ab8:	e10e      	b.n	8008cd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008aba:	4b8d      	ldr	r3, [pc, #564]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008abc:	61bb      	str	r3, [r7, #24]
    break;
 8008abe:	e10b      	b.n	8008cd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008ac0:	4b8c      	ldr	r3, [pc, #560]	; (8008cf4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008ac2:	61bb      	str	r3, [r7, #24]
    break;
 8008ac4:	e108      	b.n	8008cd8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ac6:	4b88      	ldr	r3, [pc, #544]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008ad0:	4b85      	ldr	r3, [pc, #532]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad4:	091b      	lsrs	r3, r3, #4
 8008ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ada:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008adc:	4b82      	ldr	r3, [pc, #520]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008ae6:	4b80      	ldr	r3, [pc, #512]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aea:	08db      	lsrs	r3, r3, #3
 8008aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	fb02 f303 	mul.w	r3, r2, r3
 8008af6:	ee07 3a90 	vmov	s15, r3
 8008afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008afe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f000 80e1 	beq.w	8008ccc <HAL_RCC_GetSysClockFreq+0x2b8>
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	f000 8083 	beq.w	8008c18 <HAL_RCC_GetSysClockFreq+0x204>
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	f200 80a1 	bhi.w	8008c5c <HAL_RCC_GetSysClockFreq+0x248>
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d003      	beq.n	8008b28 <HAL_RCC_GetSysClockFreq+0x114>
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d056      	beq.n	8008bd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b26:	e099      	b.n	8008c5c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b28:	4b6f      	ldr	r3, [pc, #444]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0320 	and.w	r3, r3, #32
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d02d      	beq.n	8008b90 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b34:	4b6c      	ldr	r3, [pc, #432]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	08db      	lsrs	r3, r3, #3
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	4a6b      	ldr	r2, [pc, #428]	; (8008cec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b40:	fa22 f303 	lsr.w	r3, r2, r3
 8008b44:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	ee07 3a90 	vmov	s15, r3
 8008b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5e:	4b62      	ldr	r3, [pc, #392]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b66:	ee07 3a90 	vmov	s15, r3
 8008b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b72:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008cf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008b8e:	e087      	b.n	8008ca0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	ee07 3a90 	vmov	s15, r3
 8008b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008cfc <HAL_RCC_GetSysClockFreq+0x2e8>
 8008b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba2:	4b51      	ldr	r3, [pc, #324]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008baa:	ee07 3a90 	vmov	s15, r3
 8008bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bb6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008cf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bd2:	e065      	b.n	8008ca0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bde:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008d00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be6:	4b40      	ldr	r3, [pc, #256]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bfa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008cf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c16:	e043      	b.n	8008ca0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c22:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008d04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2a:	4b2f      	ldr	r3, [pc, #188]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c32:	ee07 3a90 	vmov	s15, r3
 8008c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008cf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c5a:	e021      	b.n	8008ca0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008d00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c6e:	4b1e      	ldr	r3, [pc, #120]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c82:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008cf8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c9e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008ca0:	4b11      	ldr	r3, [pc, #68]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca4:	0a5b      	lsrs	r3, r3, #9
 8008ca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008caa:	3301      	adds	r3, #1
 8008cac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	ee07 3a90 	vmov	s15, r3
 8008cb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cc4:	ee17 3a90 	vmov	r3, s15
 8008cc8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008cca:	e005      	b.n	8008cd8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	61bb      	str	r3, [r7, #24]
    break;
 8008cd0:	e002      	b.n	8008cd8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008cd2:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008cd4:	61bb      	str	r3, [r7, #24]
    break;
 8008cd6:	bf00      	nop
  }

  return sysclockfreq;
 8008cd8:	69bb      	ldr	r3, [r7, #24]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3724      	adds	r7, #36	; 0x24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	58024400 	.word	0x58024400
 8008cec:	03d09000 	.word	0x03d09000
 8008cf0:	003d0900 	.word	0x003d0900
 8008cf4:	017d7840 	.word	0x017d7840
 8008cf8:	46000000 	.word	0x46000000
 8008cfc:	4c742400 	.word	0x4c742400
 8008d00:	4a742400 	.word	0x4a742400
 8008d04:	4bbebc20 	.word	0x4bbebc20

08008d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d0e:	f7ff fe81 	bl	8008a14 <HAL_RCC_GetSysClockFreq>
 8008d12:	4602      	mov	r2, r0
 8008d14:	4b10      	ldr	r3, [pc, #64]	; (8008d58 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	0a1b      	lsrs	r3, r3, #8
 8008d1a:	f003 030f 	and.w	r3, r3, #15
 8008d1e:	490f      	ldr	r1, [pc, #60]	; (8008d5c <HAL_RCC_GetHCLKFreq+0x54>)
 8008d20:	5ccb      	ldrb	r3, [r1, r3]
 8008d22:	f003 031f 	and.w	r3, r3, #31
 8008d26:	fa22 f303 	lsr.w	r3, r2, r3
 8008d2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	f003 030f 	and.w	r3, r3, #15
 8008d34:	4a09      	ldr	r2, [pc, #36]	; (8008d5c <HAL_RCC_GetHCLKFreq+0x54>)
 8008d36:	5cd3      	ldrb	r3, [r2, r3]
 8008d38:	f003 031f 	and.w	r3, r3, #31
 8008d3c:	687a      	ldr	r2, [r7, #4]
 8008d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d42:	4a07      	ldr	r2, [pc, #28]	; (8008d60 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d46:	4a07      	ldr	r2, [pc, #28]	; (8008d64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008d4c:	4b04      	ldr	r3, [pc, #16]	; (8008d60 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	58024400 	.word	0x58024400
 8008d5c:	0800fff0 	.word	0x0800fff0
 8008d60:	24000010 	.word	0x24000010
 8008d64:	2400000c 	.word	0x2400000c

08008d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d6c:	f7ff ffcc 	bl	8008d08 <HAL_RCC_GetHCLKFreq>
 8008d70:	4602      	mov	r2, r0
 8008d72:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	091b      	lsrs	r3, r3, #4
 8008d78:	f003 0307 	and.w	r3, r3, #7
 8008d7c:	4904      	ldr	r1, [pc, #16]	; (8008d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d7e:	5ccb      	ldrb	r3, [r1, r3]
 8008d80:	f003 031f 	and.w	r3, r3, #31
 8008d84:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	58024400 	.word	0x58024400
 8008d90:	0800fff0 	.word	0x0800fff0

08008d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008d98:	f7ff ffb6 	bl	8008d08 <HAL_RCC_GetHCLKFreq>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	0a1b      	lsrs	r3, r3, #8
 8008da4:	f003 0307 	and.w	r3, r3, #7
 8008da8:	4904      	ldr	r1, [pc, #16]	; (8008dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8008daa:	5ccb      	ldrb	r3, [r1, r3]
 8008dac:	f003 031f 	and.w	r3, r3, #31
 8008db0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	58024400 	.word	0x58024400
 8008dbc:	0800fff0 	.word	0x0800fff0

08008dc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008dc8:	2300      	movs	r3, #0
 8008dca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008dcc:	2300      	movs	r3, #0
 8008dce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d03f      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008de0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008de4:	d02a      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008de6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008dea:	d824      	bhi.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008dec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008df0:	d018      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008df6:	d81e      	bhi.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e00:	d007      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008e02:	e018      	b.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e04:	4bab      	ldr	r3, [pc, #684]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e08:	4aaa      	ldr	r2, [pc, #680]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008e10:	e015      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	3304      	adds	r3, #4
 8008e16:	2102      	movs	r1, #2
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f001 f9cf 	bl	800a1bc <RCCEx_PLL2_Config>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008e22:	e00c      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	3324      	adds	r3, #36	; 0x24
 8008e28:	2102      	movs	r1, #2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f001 fa78 	bl	800a320 <RCCEx_PLL3_Config>
 8008e30:	4603      	mov	r3, r0
 8008e32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008e34:	e003      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	75fb      	strb	r3, [r7, #23]
      break;
 8008e3a:	e000      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d109      	bne.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e44:	4b9b      	ldr	r3, [pc, #620]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e50:	4998      	ldr	r1, [pc, #608]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	650b      	str	r3, [r1, #80]	; 0x50
 8008e56:	e001      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d03d      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e6c:	2b04      	cmp	r3, #4
 8008e6e:	d826      	bhi.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008e70:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e76:	bf00      	nop
 8008e78:	08008e8d 	.word	0x08008e8d
 8008e7c:	08008e9b 	.word	0x08008e9b
 8008e80:	08008ead 	.word	0x08008ead
 8008e84:	08008ec5 	.word	0x08008ec5
 8008e88:	08008ec5 	.word	0x08008ec5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e8c:	4b89      	ldr	r3, [pc, #548]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e90:	4a88      	ldr	r2, [pc, #544]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e98:	e015      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f001 f98b 	bl	800a1bc <RCCEx_PLL2_Config>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008eaa:	e00c      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3324      	adds	r3, #36	; 0x24
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f001 fa34 	bl	800a320 <RCCEx_PLL3_Config>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ebc:	e003      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec2:	e000      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008ec4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ec6:	7dfb      	ldrb	r3, [r7, #23]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d109      	bne.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ecc:	4b79      	ldr	r3, [pc, #484]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed0:	f023 0207 	bic.w	r2, r3, #7
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ed8:	4976      	ldr	r1, [pc, #472]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	650b      	str	r3, [r1, #80]	; 0x50
 8008ede:	e001      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d042      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ef8:	d02b      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008efe:	d825      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008f00:	2bc0      	cmp	r3, #192	; 0xc0
 8008f02:	d028      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008f04:	2bc0      	cmp	r3, #192	; 0xc0
 8008f06:	d821      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008f08:	2b80      	cmp	r3, #128	; 0x80
 8008f0a:	d016      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008f0c:	2b80      	cmp	r3, #128	; 0x80
 8008f0e:	d81d      	bhi.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008f14:	2b40      	cmp	r3, #64	; 0x40
 8008f16:	d007      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008f18:	e018      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f1a:	4b66      	ldr	r3, [pc, #408]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1e:	4a65      	ldr	r2, [pc, #404]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008f26:	e017      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f001 f944 	bl	800a1bc <RCCEx_PLL2_Config>
 8008f34:	4603      	mov	r3, r0
 8008f36:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008f38:	e00e      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3324      	adds	r3, #36	; 0x24
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 f9ed 	bl	800a320 <RCCEx_PLL3_Config>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008f4a:	e005      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8008f50:	e002      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008f52:	bf00      	nop
 8008f54:	e000      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d109      	bne.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008f5e:	4b55      	ldr	r3, [pc, #340]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f62:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6a:	4952      	ldr	r1, [pc, #328]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	650b      	str	r3, [r1, #80]	; 0x50
 8008f70:	e001      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d049      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f8c:	d030      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008f8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f92:	d82a      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008f94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f98:	d02c      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008f9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f9e:	d824      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fa4:	d018      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008faa:	d81e      	bhi.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d003      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008fb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fb4:	d007      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008fb6:	e018      	b.n	8008fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fb8:	4b3e      	ldr	r3, [pc, #248]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	4a3d      	ldr	r2, [pc, #244]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fc4:	e017      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3304      	adds	r3, #4
 8008fca:	2100      	movs	r1, #0
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 f8f5 	bl	800a1bc <RCCEx_PLL2_Config>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008fd6:	e00e      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	3324      	adds	r3, #36	; 0x24
 8008fdc:	2100      	movs	r1, #0
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f001 f99e 	bl	800a320 <RCCEx_PLL3_Config>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fe8:	e005      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	75fb      	strb	r3, [r7, #23]
      break;
 8008fee:	e002      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008ff0:	bf00      	nop
 8008ff2:	e000      	b.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ffc:	4b2d      	ldr	r3, [pc, #180]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009000:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800900a:	492a      	ldr	r1, [pc, #168]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800900c:	4313      	orrs	r3, r2
 800900e:	658b      	str	r3, [r1, #88]	; 0x58
 8009010:	e001      	b.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800901e:	2b00      	cmp	r3, #0
 8009020:	d04c      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800902c:	d030      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800902e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009032:	d82a      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009034:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009038:	d02c      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800903a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800903e:	d824      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009044:	d018      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800904a:	d81e      	bhi.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009054:	d007      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009056:	e018      	b.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009058:	4b16      	ldr	r3, [pc, #88]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	4a15      	ldr	r2, [pc, #84]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800905e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009064:	e017      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3304      	adds	r3, #4
 800906a:	2100      	movs	r1, #0
 800906c:	4618      	mov	r0, r3
 800906e:	f001 f8a5 	bl	800a1bc <RCCEx_PLL2_Config>
 8009072:	4603      	mov	r3, r0
 8009074:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009076:	e00e      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	3324      	adds	r3, #36	; 0x24
 800907c:	2100      	movs	r1, #0
 800907e:	4618      	mov	r0, r3
 8009080:	f001 f94e 	bl	800a320 <RCCEx_PLL3_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009088:	e005      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	75fb      	strb	r3, [r7, #23]
      break;
 800908e:	e002      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009090:	bf00      	nop
 8009092:	e000      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10d      	bne.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800909c:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800909e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80090aa:	4902      	ldr	r1, [pc, #8]	; (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	658b      	str	r3, [r1, #88]	; 0x58
 80090b0:	e004      	b.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80090b2:	bf00      	nop
 80090b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b8:	7dfb      	ldrb	r3, [r7, #23]
 80090ba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d032      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090cc:	2b30      	cmp	r3, #48	; 0x30
 80090ce:	d01c      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80090d0:	2b30      	cmp	r3, #48	; 0x30
 80090d2:	d817      	bhi.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80090d4:	2b20      	cmp	r3, #32
 80090d6:	d00c      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80090d8:	2b20      	cmp	r3, #32
 80090da:	d813      	bhi.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d016      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80090e0:	2b10      	cmp	r3, #16
 80090e2:	d10f      	bne.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e4:	4baf      	ldr	r3, [pc, #700]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	4aae      	ldr	r2, [pc, #696]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80090f0:	e00e      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	3304      	adds	r3, #4
 80090f6:	2102      	movs	r1, #2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f001 f85f 	bl	800a1bc <RCCEx_PLL2_Config>
 80090fe:	4603      	mov	r3, r0
 8009100:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009102:	e005      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	75fb      	strb	r3, [r7, #23]
      break;
 8009108:	e002      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800910a:	bf00      	nop
 800910c:	e000      	b.n	8009110 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800910e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009110:	7dfb      	ldrb	r3, [r7, #23]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d109      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009116:	4ba3      	ldr	r3, [pc, #652]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800911a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009122:	49a0      	ldr	r1, [pc, #640]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009124:	4313      	orrs	r3, r2
 8009126:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009128:	e001      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912a:	7dfb      	ldrb	r3, [r7, #23]
 800912c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d047      	beq.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800913e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009142:	d030      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009148:	d82a      	bhi.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800914a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800914e:	d02c      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009150:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009154:	d824      	bhi.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800915a:	d018      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800915c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009160:	d81e      	bhi.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800916a:	d007      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800916c:	e018      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800916e:	4b8d      	ldr	r3, [pc, #564]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009172:	4a8c      	ldr	r2, [pc, #560]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009178:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800917a:	e017      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3304      	adds	r3, #4
 8009180:	2100      	movs	r1, #0
 8009182:	4618      	mov	r0, r3
 8009184:	f001 f81a 	bl	800a1bc <RCCEx_PLL2_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800918c:	e00e      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	3324      	adds	r3, #36	; 0x24
 8009192:	2100      	movs	r1, #0
 8009194:	4618      	mov	r0, r3
 8009196:	f001 f8c3 	bl	800a320 <RCCEx_PLL3_Config>
 800919a:	4603      	mov	r3, r0
 800919c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800919e:	e005      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	75fb      	strb	r3, [r7, #23]
      break;
 80091a4:	e002      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80091a6:	bf00      	nop
 80091a8:	e000      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80091aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d109      	bne.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80091b2:	4b7c      	ldr	r3, [pc, #496]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80091b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091be:	4979      	ldr	r1, [pc, #484]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	650b      	str	r3, [r1, #80]	; 0x50
 80091c4:	e001      	b.n	80091ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d049      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091de:	d02e      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80091e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091e4:	d828      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80091e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091ea:	d02a      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80091ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091f0:	d822      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80091f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091f6:	d026      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80091f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091fc:	d81c      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80091fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009202:	d010      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009208:	d816      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d01d      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800920e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009212:	d111      	bne.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3304      	adds	r3, #4
 8009218:	2101      	movs	r1, #1
 800921a:	4618      	mov	r0, r3
 800921c:	f000 ffce 	bl	800a1bc <RCCEx_PLL2_Config>
 8009220:	4603      	mov	r3, r0
 8009222:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009224:	e012      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3324      	adds	r3, #36	; 0x24
 800922a:	2101      	movs	r1, #1
 800922c:	4618      	mov	r0, r3
 800922e:	f001 f877 	bl	800a320 <RCCEx_PLL3_Config>
 8009232:	4603      	mov	r3, r0
 8009234:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009236:	e009      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]
      break;
 800923c:	e006      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800923e:	bf00      	nop
 8009240:	e004      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009242:	bf00      	nop
 8009244:	e002      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009246:	bf00      	nop
 8009248:	e000      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800924a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d109      	bne.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009252:	4b54      	ldr	r3, [pc, #336]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009256:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925e:	4951      	ldr	r1, [pc, #324]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009260:	4313      	orrs	r3, r2
 8009262:	650b      	str	r3, [r1, #80]	; 0x50
 8009264:	e001      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009266:	7dfb      	ldrb	r3, [r7, #23]
 8009268:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d04b      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800927c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009280:	d02e      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009286:	d828      	bhi.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800928c:	d02a      	beq.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800928e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009292:	d822      	bhi.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009294:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009298:	d026      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800929a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800929e:	d81c      	bhi.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80092a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092a4:	d010      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80092a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092aa:	d816      	bhi.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d01d      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80092b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092b4:	d111      	bne.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3304      	adds	r3, #4
 80092ba:	2101      	movs	r1, #1
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 ff7d 	bl	800a1bc <RCCEx_PLL2_Config>
 80092c2:	4603      	mov	r3, r0
 80092c4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80092c6:	e012      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3324      	adds	r3, #36	; 0x24
 80092cc:	2101      	movs	r1, #1
 80092ce:	4618      	mov	r0, r3
 80092d0:	f001 f826 	bl	800a320 <RCCEx_PLL3_Config>
 80092d4:	4603      	mov	r3, r0
 80092d6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80092d8:	e009      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	75fb      	strb	r3, [r7, #23]
      break;
 80092de:	e006      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80092e0:	bf00      	nop
 80092e2:	e004      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80092e4:	bf00      	nop
 80092e6:	e002      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80092e8:	bf00      	nop
 80092ea:	e000      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80092ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10a      	bne.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80092f4:	4b2b      	ldr	r3, [pc, #172]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80092f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092f8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009302:	4928      	ldr	r1, [pc, #160]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009304:	4313      	orrs	r3, r2
 8009306:	658b      	str	r3, [r1, #88]	; 0x58
 8009308:	e001      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d02f      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800931e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009322:	d00e      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009328:	d814      	bhi.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800932a:	2b00      	cmp	r3, #0
 800932c:	d015      	beq.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800932e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009332:	d10f      	bne.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009334:	4b1b      	ldr	r3, [pc, #108]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	4a1a      	ldr	r2, [pc, #104]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800933a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800933e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009340:	e00c      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	3304      	adds	r3, #4
 8009346:	2101      	movs	r1, #1
 8009348:	4618      	mov	r0, r3
 800934a:	f000 ff37 	bl	800a1bc <RCCEx_PLL2_Config>
 800934e:	4603      	mov	r3, r0
 8009350:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009352:	e003      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	75fb      	strb	r3, [r7, #23]
      break;
 8009358:	e000      	b.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800935a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800935c:	7dfb      	ldrb	r3, [r7, #23]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d109      	bne.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009362:	4b10      	ldr	r3, [pc, #64]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009366:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800936e:	490d      	ldr	r1, [pc, #52]	; (80093a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009370:	4313      	orrs	r3, r2
 8009372:	650b      	str	r3, [r1, #80]	; 0x50
 8009374:	e001      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009376:	7dfb      	ldrb	r3, [r7, #23]
 8009378:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d033      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800938a:	2b03      	cmp	r3, #3
 800938c:	d81c      	bhi.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800938e:	a201      	add	r2, pc, #4	; (adr r2, 8009394 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009394:	080093cf 	.word	0x080093cf
 8009398:	080093a9 	.word	0x080093a9
 800939c:	080093b7 	.word	0x080093b7
 80093a0:	080093cf 	.word	0x080093cf
 80093a4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093a8:	4bb8      	ldr	r3, [pc, #736]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	4ab7      	ldr	r2, [pc, #732]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80093b4:	e00c      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3304      	adds	r3, #4
 80093ba:	2102      	movs	r1, #2
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fefd 	bl	800a1bc <RCCEx_PLL2_Config>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80093c6:	e003      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	75fb      	strb	r3, [r7, #23]
      break;
 80093cc:	e000      	b.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80093ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093d0:	7dfb      	ldrb	r3, [r7, #23]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d109      	bne.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80093d6:	4bad      	ldr	r3, [pc, #692]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093da:	f023 0203 	bic.w	r2, r3, #3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e2:	49aa      	ldr	r1, [pc, #680]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80093e8:	e001      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 8086 	beq.w	8009508 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093fc:	4ba4      	ldr	r3, [pc, #656]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4aa3      	ldr	r2, [pc, #652]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009406:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009408:	f7f9 f936 	bl	8002678 <HAL_GetTick>
 800940c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800940e:	e009      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009410:	f7f9 f932 	bl	8002678 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b64      	cmp	r3, #100	; 0x64
 800941c:	d902      	bls.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	75fb      	strb	r3, [r7, #23]
        break;
 8009422:	e005      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009424:	4b9a      	ldr	r3, [pc, #616]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0ef      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d166      	bne.n	8009504 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009436:	4b95      	ldr	r3, [pc, #596]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009438:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009440:	4053      	eors	r3, r2
 8009442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009446:	2b00      	cmp	r3, #0
 8009448:	d013      	beq.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800944a:	4b90      	ldr	r3, [pc, #576]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800944c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009452:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009454:	4b8d      	ldr	r3, [pc, #564]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009458:	4a8c      	ldr	r2, [pc, #560]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800945a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800945e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009460:	4b8a      	ldr	r3, [pc, #552]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009464:	4a89      	ldr	r2, [pc, #548]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800946a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800946c:	4a87      	ldr	r2, [pc, #540]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800947c:	d115      	bne.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800947e:	f7f9 f8fb 	bl	8002678 <HAL_GetTick>
 8009482:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009484:	e00b      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009486:	f7f9 f8f7 	bl	8002678 <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	f241 3288 	movw	r2, #5000	; 0x1388
 8009494:	4293      	cmp	r3, r2
 8009496:	d902      	bls.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	75fb      	strb	r3, [r7, #23]
            break;
 800949c:	e005      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800949e:	4b7b      	ldr	r3, [pc, #492]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80094a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a2:	f003 0302 	and.w	r3, r3, #2
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0ed      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80094aa:	7dfb      	ldrb	r3, [r7, #23]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d126      	bne.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094be:	d10d      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80094c0:	4b72      	ldr	r3, [pc, #456]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094ce:	0919      	lsrs	r1, r3, #4
 80094d0:	4b70      	ldr	r3, [pc, #448]	; (8009694 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80094d2:	400b      	ands	r3, r1
 80094d4:	496d      	ldr	r1, [pc, #436]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	610b      	str	r3, [r1, #16]
 80094da:	e005      	b.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80094dc:	4b6b      	ldr	r3, [pc, #428]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80094de:	691b      	ldr	r3, [r3, #16]
 80094e0:	4a6a      	ldr	r2, [pc, #424]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80094e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80094e6:	6113      	str	r3, [r2, #16]
 80094e8:	4b68      	ldr	r3, [pc, #416]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80094ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80094f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094f6:	4965      	ldr	r1, [pc, #404]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	670b      	str	r3, [r1, #112]	; 0x70
 80094fc:	e004      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	75bb      	strb	r3, [r7, #22]
 8009502:	e001      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d07e      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009518:	2b28      	cmp	r3, #40	; 0x28
 800951a:	d867      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800951c:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800951e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009522:	bf00      	nop
 8009524:	080095f3 	.word	0x080095f3
 8009528:	080095ed 	.word	0x080095ed
 800952c:	080095ed 	.word	0x080095ed
 8009530:	080095ed 	.word	0x080095ed
 8009534:	080095ed 	.word	0x080095ed
 8009538:	080095ed 	.word	0x080095ed
 800953c:	080095ed 	.word	0x080095ed
 8009540:	080095ed 	.word	0x080095ed
 8009544:	080095c9 	.word	0x080095c9
 8009548:	080095ed 	.word	0x080095ed
 800954c:	080095ed 	.word	0x080095ed
 8009550:	080095ed 	.word	0x080095ed
 8009554:	080095ed 	.word	0x080095ed
 8009558:	080095ed 	.word	0x080095ed
 800955c:	080095ed 	.word	0x080095ed
 8009560:	080095ed 	.word	0x080095ed
 8009564:	080095db 	.word	0x080095db
 8009568:	080095ed 	.word	0x080095ed
 800956c:	080095ed 	.word	0x080095ed
 8009570:	080095ed 	.word	0x080095ed
 8009574:	080095ed 	.word	0x080095ed
 8009578:	080095ed 	.word	0x080095ed
 800957c:	080095ed 	.word	0x080095ed
 8009580:	080095ed 	.word	0x080095ed
 8009584:	080095f3 	.word	0x080095f3
 8009588:	080095ed 	.word	0x080095ed
 800958c:	080095ed 	.word	0x080095ed
 8009590:	080095ed 	.word	0x080095ed
 8009594:	080095ed 	.word	0x080095ed
 8009598:	080095ed 	.word	0x080095ed
 800959c:	080095ed 	.word	0x080095ed
 80095a0:	080095ed 	.word	0x080095ed
 80095a4:	080095f3 	.word	0x080095f3
 80095a8:	080095ed 	.word	0x080095ed
 80095ac:	080095ed 	.word	0x080095ed
 80095b0:	080095ed 	.word	0x080095ed
 80095b4:	080095ed 	.word	0x080095ed
 80095b8:	080095ed 	.word	0x080095ed
 80095bc:	080095ed 	.word	0x080095ed
 80095c0:	080095ed 	.word	0x080095ed
 80095c4:	080095f3 	.word	0x080095f3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	3304      	adds	r3, #4
 80095cc:	2101      	movs	r1, #1
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 fdf4 	bl	800a1bc <RCCEx_PLL2_Config>
 80095d4:	4603      	mov	r3, r0
 80095d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80095d8:	e00c      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	3324      	adds	r3, #36	; 0x24
 80095de:	2101      	movs	r1, #1
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 fe9d 	bl	800a320 <RCCEx_PLL3_Config>
 80095e6:	4603      	mov	r3, r0
 80095e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80095ea:	e003      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	75fb      	strb	r3, [r7, #23]
      break;
 80095f0:	e000      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80095f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d109      	bne.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80095fa:	4b24      	ldr	r3, [pc, #144]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80095fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009606:	4921      	ldr	r1, [pc, #132]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009608:	4313      	orrs	r3, r2
 800960a:	654b      	str	r3, [r1, #84]	; 0x54
 800960c:	e001      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d03e      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009622:	2b05      	cmp	r3, #5
 8009624:	d820      	bhi.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009626:	a201      	add	r2, pc, #4	; (adr r2, 800962c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962c:	0800966f 	.word	0x0800966f
 8009630:	08009645 	.word	0x08009645
 8009634:	08009657 	.word	0x08009657
 8009638:	0800966f 	.word	0x0800966f
 800963c:	0800966f 	.word	0x0800966f
 8009640:	0800966f 	.word	0x0800966f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3304      	adds	r3, #4
 8009648:	2101      	movs	r1, #1
 800964a:	4618      	mov	r0, r3
 800964c:	f000 fdb6 	bl	800a1bc <RCCEx_PLL2_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009654:	e00c      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	3324      	adds	r3, #36	; 0x24
 800965a:	2101      	movs	r1, #1
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fe5f 	bl	800a320 <RCCEx_PLL3_Config>
 8009662:	4603      	mov	r3, r0
 8009664:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009666:	e003      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	75fb      	strb	r3, [r7, #23]
      break;
 800966c:	e000      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800966e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d110      	bne.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967a:	f023 0207 	bic.w	r2, r3, #7
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009682:	4902      	ldr	r1, [pc, #8]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009684:	4313      	orrs	r3, r2
 8009686:	654b      	str	r3, [r1, #84]	; 0x54
 8009688:	e008      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800968a:	bf00      	nop
 800968c:	58024400 	.word	0x58024400
 8009690:	58024800 	.word	0x58024800
 8009694:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009698:	7dfb      	ldrb	r3, [r7, #23]
 800969a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d039      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ae:	2b05      	cmp	r3, #5
 80096b0:	d820      	bhi.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80096b2:	a201      	add	r2, pc, #4	; (adr r2, 80096b8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80096b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b8:	080096fb 	.word	0x080096fb
 80096bc:	080096d1 	.word	0x080096d1
 80096c0:	080096e3 	.word	0x080096e3
 80096c4:	080096fb 	.word	0x080096fb
 80096c8:	080096fb 	.word	0x080096fb
 80096cc:	080096fb 	.word	0x080096fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3304      	adds	r3, #4
 80096d4:	2101      	movs	r1, #1
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fd70 	bl	800a1bc <RCCEx_PLL2_Config>
 80096dc:	4603      	mov	r3, r0
 80096de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80096e0:	e00c      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3324      	adds	r3, #36	; 0x24
 80096e6:	2101      	movs	r1, #1
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 fe19 	bl	800a320 <RCCEx_PLL3_Config>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80096f2:	e003      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	75fb      	strb	r3, [r7, #23]
      break;
 80096f8:	e000      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80096fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096fc:	7dfb      	ldrb	r3, [r7, #23]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d10a      	bne.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009702:	4bb7      	ldr	r3, [pc, #732]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009706:	f023 0207 	bic.w	r2, r3, #7
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009710:	49b3      	ldr	r1, [pc, #716]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009712:	4313      	orrs	r3, r2
 8009714:	658b      	str	r3, [r1, #88]	; 0x58
 8009716:	e001      	b.n	800971c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0320 	and.w	r3, r3, #32
 8009724:	2b00      	cmp	r3, #0
 8009726:	d04b      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800972e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009732:	d02e      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009738:	d828      	bhi.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800973a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800973e:	d02a      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009744:	d822      	bhi.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009746:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800974a:	d026      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800974c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009750:	d81c      	bhi.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009756:	d010      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800975c:	d816      	bhi.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800975e:	2b00      	cmp	r3, #0
 8009760:	d01d      	beq.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009766:	d111      	bne.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3304      	adds	r3, #4
 800976c:	2100      	movs	r1, #0
 800976e:	4618      	mov	r0, r3
 8009770:	f000 fd24 	bl	800a1bc <RCCEx_PLL2_Config>
 8009774:	4603      	mov	r3, r0
 8009776:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009778:	e012      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3324      	adds	r3, #36	; 0x24
 800977e:	2102      	movs	r1, #2
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fdcd 	bl	800a320 <RCCEx_PLL3_Config>
 8009786:	4603      	mov	r3, r0
 8009788:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800978a:	e009      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	75fb      	strb	r3, [r7, #23]
      break;
 8009790:	e006      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009792:	bf00      	nop
 8009794:	e004      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009796:	bf00      	nop
 8009798:	e002      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800979a:	bf00      	nop
 800979c:	e000      	b.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800979e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097a0:	7dfb      	ldrb	r3, [r7, #23]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10a      	bne.n	80097bc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80097a6:	4b8e      	ldr	r3, [pc, #568]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80097a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097b4:	498a      	ldr	r1, [pc, #552]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	654b      	str	r3, [r1, #84]	; 0x54
 80097ba:	e001      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d04b      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80097d6:	d02e      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80097d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80097dc:	d828      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80097de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097e2:	d02a      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80097e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097e8:	d822      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80097ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097ee:	d026      	beq.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80097f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097f4:	d81c      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80097f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097fa:	d010      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80097fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009800:	d816      	bhi.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d01d      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800980a:	d111      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	3304      	adds	r3, #4
 8009810:	2100      	movs	r1, #0
 8009812:	4618      	mov	r0, r3
 8009814:	f000 fcd2 	bl	800a1bc <RCCEx_PLL2_Config>
 8009818:	4603      	mov	r3, r0
 800981a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800981c:	e012      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3324      	adds	r3, #36	; 0x24
 8009822:	2102      	movs	r1, #2
 8009824:	4618      	mov	r0, r3
 8009826:	f000 fd7b 	bl	800a320 <RCCEx_PLL3_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800982e:	e009      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	75fb      	strb	r3, [r7, #23]
      break;
 8009834:	e006      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009836:	bf00      	nop
 8009838:	e004      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800983a:	bf00      	nop
 800983c:	e002      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800983e:	bf00      	nop
 8009840:	e000      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009844:	7dfb      	ldrb	r3, [r7, #23]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10a      	bne.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800984a:	4b65      	ldr	r3, [pc, #404]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800984c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009858:	4961      	ldr	r1, [pc, #388]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800985a:	4313      	orrs	r3, r2
 800985c:	658b      	str	r3, [r1, #88]	; 0x58
 800985e:	e001      	b.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800986c:	2b00      	cmp	r3, #0
 800986e:	d04b      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009876:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800987a:	d02e      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800987c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009880:	d828      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009886:	d02a      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800988c:	d822      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800988e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009892:	d026      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009894:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009898:	d81c      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800989a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800989e:	d010      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80098a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098a4:	d816      	bhi.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d01d      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80098aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ae:	d111      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3304      	adds	r3, #4
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fc80 	bl	800a1bc <RCCEx_PLL2_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80098c0:	e012      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	3324      	adds	r3, #36	; 0x24
 80098c6:	2102      	movs	r1, #2
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 fd29 	bl	800a320 <RCCEx_PLL3_Config>
 80098ce:	4603      	mov	r3, r0
 80098d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80098d2:	e009      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	75fb      	strb	r3, [r7, #23]
      break;
 80098d8:	e006      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80098da:	bf00      	nop
 80098dc:	e004      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80098de:	bf00      	nop
 80098e0:	e002      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80098e2:	bf00      	nop
 80098e4:	e000      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80098e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80098ee:	4b3c      	ldr	r3, [pc, #240]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80098f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098fc:	4938      	ldr	r1, [pc, #224]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80098fe:	4313      	orrs	r3, r2
 8009900:	658b      	str	r3, [r1, #88]	; 0x58
 8009902:	e001      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009904:	7dfb      	ldrb	r3, [r7, #23]
 8009906:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0308 	and.w	r3, r3, #8
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01a      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800991a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991e:	d10a      	bne.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	3324      	adds	r3, #36	; 0x24
 8009924:	2102      	movs	r1, #2
 8009926:	4618      	mov	r0, r3
 8009928:	f000 fcfa 	bl	800a320 <RCCEx_PLL3_Config>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009936:	4b2a      	ldr	r3, [pc, #168]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009944:	4926      	ldr	r1, [pc, #152]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009946:	4313      	orrs	r3, r2
 8009948:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0310 	and.w	r3, r3, #16
 8009952:	2b00      	cmp	r3, #0
 8009954:	d01a      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800995c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009960:	d10a      	bne.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	3324      	adds	r3, #36	; 0x24
 8009966:	2102      	movs	r1, #2
 8009968:	4618      	mov	r0, r3
 800996a:	f000 fcd9 	bl	800a320 <RCCEx_PLL3_Config>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009978:	4b19      	ldr	r3, [pc, #100]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800997a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009986:	4916      	ldr	r1, [pc, #88]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009988:	4313      	orrs	r3, r2
 800998a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d036      	beq.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800999e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099a2:	d01f      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80099a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099a8:	d817      	bhi.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80099ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099b2:	d009      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80099b4:	e011      	b.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	3304      	adds	r3, #4
 80099ba:	2100      	movs	r1, #0
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fbfd 	bl	800a1bc <RCCEx_PLL2_Config>
 80099c2:	4603      	mov	r3, r0
 80099c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80099c6:	e00e      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3324      	adds	r3, #36	; 0x24
 80099cc:	2102      	movs	r1, #2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fca6 	bl	800a320 <RCCEx_PLL3_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80099d8:	e005      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	75fb      	strb	r3, [r7, #23]
      break;
 80099de:	e002      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80099e0:	58024400 	.word	0x58024400
      break;
 80099e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10a      	bne.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099ec:	4b93      	ldr	r3, [pc, #588]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80099fa:	4990      	ldr	r1, [pc, #576]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099fc:	4313      	orrs	r3, r2
 80099fe:	658b      	str	r3, [r1, #88]	; 0x58
 8009a00:	e001      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a02:	7dfb      	ldrb	r3, [r7, #23]
 8009a04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d033      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a1c:	d01c      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009a1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a22:	d816      	bhi.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a28:	d003      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a2e:	d007      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009a30:	e00f      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a32:	4b82      	ldr	r3, [pc, #520]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a36:	4a81      	ldr	r2, [pc, #516]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009a3e:	e00c      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	3324      	adds	r3, #36	; 0x24
 8009a44:	2101      	movs	r1, #1
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fc6a 	bl	800a320 <RCCEx_PLL3_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009a50:	e003      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	75fb      	strb	r3, [r7, #23]
      break;
 8009a56:	e000      	b.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a5a:	7dfb      	ldrb	r3, [r7, #23]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10a      	bne.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a60:	4b76      	ldr	r3, [pc, #472]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a6e:	4973      	ldr	r1, [pc, #460]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a70:	4313      	orrs	r3, r2
 8009a72:	654b      	str	r3, [r1, #84]	; 0x54
 8009a74:	e001      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d029      	beq.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a92:	d007      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009a94:	e00f      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a96:	4b69      	ldr	r3, [pc, #420]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	4a68      	ldr	r2, [pc, #416]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009aa2:	e00b      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	2102      	movs	r1, #2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f000 fb86 	bl	800a1bc <RCCEx_PLL2_Config>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009ab4:	e002      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8009aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009abc:	7dfb      	ldrb	r3, [r7, #23]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d109      	bne.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009ac2:	4b5e      	ldr	r3, [pc, #376]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ac6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ace:	495b      	ldr	r1, [pc, #364]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ad4:	e001      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
 8009ad8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00a      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	3324      	adds	r3, #36	; 0x24
 8009aea:	2102      	movs	r1, #2
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 fc17 	bl	800a320 <RCCEx_PLL3_Config>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d030      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b10:	d017      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b16:	d811      	bhi.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b1c:	d013      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b22:	d80b      	bhi.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d010      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b2c:	d106      	bne.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b2e:	4b43      	ldr	r3, [pc, #268]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b32:	4a42      	ldr	r2, [pc, #264]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009b3a:	e007      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009b40:	e004      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009b42:	bf00      	nop
 8009b44:	e002      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009b46:	bf00      	nop
 8009b48:	e000      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b4c:	7dfb      	ldrb	r3, [r7, #23]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d109      	bne.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b52:	4b3a      	ldr	r3, [pc, #232]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b5e:	4937      	ldr	r1, [pc, #220]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b60:	4313      	orrs	r3, r2
 8009b62:	654b      	str	r3, [r1, #84]	; 0x54
 8009b64:	e001      	b.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b66:	7dfb      	ldrb	r3, [r7, #23]
 8009b68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d008      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009b76:	4b31      	ldr	r3, [pc, #196]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b82:	492e      	ldr	r1, [pc, #184]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d009      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009b94:	4b29      	ldr	r3, [pc, #164]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b96:	691b      	ldr	r3, [r3, #16]
 8009b98:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ba2:	4926      	ldr	r1, [pc, #152]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d008      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009bb4:	4b21      	ldr	r3, [pc, #132]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bc0:	491e      	ldr	r1, [pc, #120]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00d      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009bd2:	4b1a      	ldr	r3, [pc, #104]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	4a19      	ldr	r2, [pc, #100]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009bd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009bdc:	6113      	str	r3, [r2, #16]
 8009bde:	4b17      	ldr	r3, [pc, #92]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009be0:	691a      	ldr	r2, [r3, #16]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009be8:	4914      	ldr	r1, [pc, #80]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	da08      	bge.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009bf6:	4b11      	ldr	r3, [pc, #68]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c02:	490e      	ldr	r1, [pc, #56]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d009      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009c14:	4b09      	ldr	r3, [pc, #36]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c22:	4906      	ldr	r1, [pc, #24]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009c28:	7dbb      	ldrb	r3, [r7, #22]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d101      	bne.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	e000      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	58024400 	.word	0x58024400

08009c40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009c44:	f7ff f860 	bl	8008d08 <HAL_RCC_GetHCLKFreq>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	4b06      	ldr	r3, [pc, #24]	; (8009c64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	091b      	lsrs	r3, r3, #4
 8009c50:	f003 0307 	and.w	r3, r3, #7
 8009c54:	4904      	ldr	r1, [pc, #16]	; (8009c68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c56:	5ccb      	ldrb	r3, [r1, r3]
 8009c58:	f003 031f 	and.w	r3, r3, #31
 8009c5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	58024400 	.word	0x58024400
 8009c68:	0800fff0 	.word	0x0800fff0

08009c6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b089      	sub	sp, #36	; 0x24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c74:	4ba1      	ldr	r3, [pc, #644]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c78:	f003 0303 	and.w	r3, r3, #3
 8009c7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009c7e:	4b9f      	ldr	r3, [pc, #636]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c82:	0b1b      	lsrs	r3, r3, #12
 8009c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c8a:	4b9c      	ldr	r3, [pc, #624]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8e:	091b      	lsrs	r3, r3, #4
 8009c90:	f003 0301 	and.w	r3, r3, #1
 8009c94:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009c96:	4b99      	ldr	r3, [pc, #612]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9a:	08db      	lsrs	r3, r3, #3
 8009c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	fb02 f303 	mul.w	r3, r2, r3
 8009ca6:	ee07 3a90 	vmov	s15, r3
 8009caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 8111 	beq.w	8009edc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	f000 8083 	beq.w	8009dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	f200 80a1 	bhi.w	8009e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d003      	beq.n	8009cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d056      	beq.n	8009d84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009cd6:	e099      	b.n	8009e0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cd8:	4b88      	ldr	r3, [pc, #544]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f003 0320 	and.w	r3, r3, #32
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d02d      	beq.n	8009d40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ce4:	4b85      	ldr	r3, [pc, #532]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	08db      	lsrs	r3, r3, #3
 8009cea:	f003 0303 	and.w	r3, r3, #3
 8009cee:	4a84      	ldr	r2, [pc, #528]	; (8009f00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	ee07 3a90 	vmov	s15, r3
 8009cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0e:	4b7b      	ldr	r3, [pc, #492]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009d3e:	e087      	b.n	8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	ee07 3a90 	vmov	s15, r3
 8009d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d52:	4b6a      	ldr	r3, [pc, #424]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d5a:	ee07 3a90 	vmov	s15, r3
 8009d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d82:	e065      	b.n	8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d96:	4b59      	ldr	r3, [pc, #356]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9e:	ee07 3a90 	vmov	s15, r3
 8009da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009daa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dc6:	e043      	b.n	8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	ee07 3a90 	vmov	s15, r3
 8009dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dda:	4b48      	ldr	r3, [pc, #288]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de2:	ee07 3a90 	vmov	s15, r3
 8009de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e0a:	e021      	b.n	8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1e:	4b37      	ldr	r3, [pc, #220]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009e50:	4b2a      	ldr	r3, [pc, #168]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e54:	0a5b      	lsrs	r3, r3, #9
 8009e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e5a:	ee07 3a90 	vmov	s15, r3
 8009e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e76:	ee17 2a90 	vmov	r2, s15
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009e7e:	4b1f      	ldr	r3, [pc, #124]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e82:	0c1b      	lsrs	r3, r3, #16
 8009e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e88:	ee07 3a90 	vmov	s15, r3
 8009e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e98:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ea4:	ee17 2a90 	vmov	r2, s15
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009eac:	4b13      	ldr	r3, [pc, #76]	; (8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb0:	0e1b      	lsrs	r3, r3, #24
 8009eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eb6:	ee07 3a90 	vmov	s15, r3
 8009eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ebe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ed2:	ee17 2a90 	vmov	r2, s15
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009eda:	e008      	b.n	8009eee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	609a      	str	r2, [r3, #8]
}
 8009eee:	bf00      	nop
 8009ef0:	3724      	adds	r7, #36	; 0x24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	58024400 	.word	0x58024400
 8009f00:	03d09000 	.word	0x03d09000
 8009f04:	46000000 	.word	0x46000000
 8009f08:	4c742400 	.word	0x4c742400
 8009f0c:	4a742400 	.word	0x4a742400
 8009f10:	4bbebc20 	.word	0x4bbebc20

08009f14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b089      	sub	sp, #36	; 0x24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f1c:	4ba1      	ldr	r3, [pc, #644]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f20:	f003 0303 	and.w	r3, r3, #3
 8009f24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009f26:	4b9f      	ldr	r3, [pc, #636]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2a:	0d1b      	lsrs	r3, r3, #20
 8009f2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f32:	4b9c      	ldr	r3, [pc, #624]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	0a1b      	lsrs	r3, r3, #8
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009f3e:	4b99      	ldr	r3, [pc, #612]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f42:	08db      	lsrs	r3, r3, #3
 8009f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	fb02 f303 	mul.w	r3, r2, r3
 8009f4e:	ee07 3a90 	vmov	s15, r3
 8009f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 8111 	beq.w	800a184 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	2b02      	cmp	r3, #2
 8009f66:	f000 8083 	beq.w	800a070 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	f200 80a1 	bhi.w	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d056      	beq.n	800a02c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009f7e:	e099      	b.n	800a0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f80:	4b88      	ldr	r3, [pc, #544]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0320 	and.w	r3, r3, #32
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d02d      	beq.n	8009fe8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f8c:	4b85      	ldr	r3, [pc, #532]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	08db      	lsrs	r3, r3, #3
 8009f92:	f003 0303 	and.w	r3, r3, #3
 8009f96:	4a84      	ldr	r2, [pc, #528]	; (800a1a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f98:	fa22 f303 	lsr.w	r3, r2, r3
 8009f9c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	ee07 3a90 	vmov	s15, r3
 8009fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	ee07 3a90 	vmov	s15, r3
 8009fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb6:	4b7b      	ldr	r3, [pc, #492]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fbe:	ee07 3a90 	vmov	s15, r3
 8009fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fca:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a1ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009fe6:	e087      	b.n	800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	ee07 3a90 	vmov	s15, r3
 8009fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ffa:	4b6a      	ldr	r3, [pc, #424]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a002:	ee07 3a90 	vmov	s15, r3
 800a006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a00a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a00e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a1ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a02a:	e065      	b.n	800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	ee07 3a90 	vmov	s15, r3
 800a032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a036:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a03e:	4b59      	ldr	r3, [pc, #356]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a046:	ee07 3a90 	vmov	s15, r3
 800a04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a052:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a1ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a06a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a06e:	e043      	b.n	800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	ee07 3a90 	vmov	s15, r3
 800a076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a07e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a082:	4b48      	ldr	r3, [pc, #288]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a08a:	ee07 3a90 	vmov	s15, r3
 800a08e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a092:	ed97 6a03 	vldr	s12, [r7, #12]
 800a096:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a1ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a09a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a09e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0b2:	e021      	b.n	800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	ee07 3a90 	vmov	s15, r3
 800a0ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0c6:	4b37      	ldr	r3, [pc, #220]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ce:	ee07 3a90 	vmov	s15, r3
 800a0d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0da:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a1ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a0f8:	4b2a      	ldr	r3, [pc, #168]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fc:	0a5b      	lsrs	r3, r3, #9
 800a0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a102:	ee07 3a90 	vmov	s15, r3
 800a106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a10e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a112:	edd7 6a07 	vldr	s13, [r7, #28]
 800a116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a11a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a11e:	ee17 2a90 	vmov	r2, s15
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a126:	4b1f      	ldr	r3, [pc, #124]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	0c1b      	lsrs	r3, r3, #16
 800a12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a130:	ee07 3a90 	vmov	s15, r3
 800a134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a13c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a140:	edd7 6a07 	vldr	s13, [r7, #28]
 800a144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a14c:	ee17 2a90 	vmov	r2, s15
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a154:	4b13      	ldr	r3, [pc, #76]	; (800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a158:	0e1b      	lsrs	r3, r3, #24
 800a15a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a15e:	ee07 3a90 	vmov	s15, r3
 800a162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a166:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a16a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a16e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a172:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a17a:	ee17 2a90 	vmov	r2, s15
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a182:	e008      	b.n	800a196 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2200      	movs	r2, #0
 800a18e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	609a      	str	r2, [r3, #8]
}
 800a196:	bf00      	nop
 800a198:	3724      	adds	r7, #36	; 0x24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	58024400 	.word	0x58024400
 800a1a8:	03d09000 	.word	0x03d09000
 800a1ac:	46000000 	.word	0x46000000
 800a1b0:	4c742400 	.word	0x4c742400
 800a1b4:	4a742400 	.word	0x4a742400
 800a1b8:	4bbebc20 	.word	0x4bbebc20

0800a1bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1ca:	4b53      	ldr	r3, [pc, #332]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ce:	f003 0303 	and.w	r3, r3, #3
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d101      	bne.n	800a1da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e099      	b.n	800a30e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a1da:	4b4f      	ldr	r3, [pc, #316]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a4e      	ldr	r2, [pc, #312]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a1e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a1e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1e6:	f7f8 fa47 	bl	8002678 <HAL_GetTick>
 800a1ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a1ec:	e008      	b.n	800a200 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1ee:	f7f8 fa43 	bl	8002678 <HAL_GetTick>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	1ad3      	subs	r3, r2, r3
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d901      	bls.n	800a200 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e086      	b.n	800a30e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a200:	4b45      	ldr	r3, [pc, #276]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1f0      	bne.n	800a1ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a20c:	4b42      	ldr	r3, [pc, #264]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a210:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	031b      	lsls	r3, r3, #12
 800a21a:	493f      	ldr	r1, [pc, #252]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	628b      	str	r3, [r1, #40]	; 0x28
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	3b01      	subs	r3, #1
 800a226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	3b01      	subs	r3, #1
 800a230:	025b      	lsls	r3, r3, #9
 800a232:	b29b      	uxth	r3, r3
 800a234:	431a      	orrs	r2, r3
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	3b01      	subs	r3, #1
 800a23c:	041b      	lsls	r3, r3, #16
 800a23e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a242:	431a      	orrs	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	3b01      	subs	r3, #1
 800a24a:	061b      	lsls	r3, r3, #24
 800a24c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a250:	4931      	ldr	r1, [pc, #196]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a252:	4313      	orrs	r3, r2
 800a254:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a256:	4b30      	ldr	r3, [pc, #192]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a25a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	492d      	ldr	r1, [pc, #180]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a264:	4313      	orrs	r3, r2
 800a266:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a268:	4b2b      	ldr	r3, [pc, #172]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26c:	f023 0220 	bic.w	r2, r3, #32
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	4928      	ldr	r1, [pc, #160]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a276:	4313      	orrs	r3, r2
 800a278:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a27a:	4b27      	ldr	r3, [pc, #156]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27e:	4a26      	ldr	r2, [pc, #152]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a280:	f023 0310 	bic.w	r3, r3, #16
 800a284:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a286:	4b24      	ldr	r3, [pc, #144]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a28a:	4b24      	ldr	r3, [pc, #144]	; (800a31c <RCCEx_PLL2_Config+0x160>)
 800a28c:	4013      	ands	r3, r2
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	69d2      	ldr	r2, [r2, #28]
 800a292:	00d2      	lsls	r2, r2, #3
 800a294:	4920      	ldr	r1, [pc, #128]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a296:	4313      	orrs	r3, r2
 800a298:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a29a:	4b1f      	ldr	r3, [pc, #124]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29e:	4a1e      	ldr	r2, [pc, #120]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a2a0:	f043 0310 	orr.w	r3, r3, #16
 800a2a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d106      	bne.n	800a2ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a2ac:	4b1a      	ldr	r3, [pc, #104]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b0:	4a19      	ldr	r2, [pc, #100]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a2b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2b8:	e00f      	b.n	800a2da <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d106      	bne.n	800a2ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a2c0:	4b15      	ldr	r3, [pc, #84]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c4:	4a14      	ldr	r2, [pc, #80]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a2c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2cc:	e005      	b.n	800a2da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a2ce:	4b12      	ldr	r3, [pc, #72]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d2:	4a11      	ldr	r2, [pc, #68]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a2d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a2da:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a0e      	ldr	r2, [pc, #56]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a2e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2e6:	f7f8 f9c7 	bl	8002678 <HAL_GetTick>
 800a2ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a2ec:	e008      	b.n	800a300 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a2ee:	f7f8 f9c3 	bl	8002678 <HAL_GetTick>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d901      	bls.n	800a300 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e006      	b.n	800a30e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a300:	4b05      	ldr	r3, [pc, #20]	; (800a318 <RCCEx_PLL2_Config+0x15c>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d0f0      	beq.n	800a2ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	58024400 	.word	0x58024400
 800a31c:	ffff0007 	.word	0xffff0007

0800a320 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a32a:	2300      	movs	r3, #0
 800a32c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a32e:	4b53      	ldr	r3, [pc, #332]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a332:	f003 0303 	and.w	r3, r3, #3
 800a336:	2b03      	cmp	r3, #3
 800a338:	d101      	bne.n	800a33e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e099      	b.n	800a472 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a33e:	4b4f      	ldr	r3, [pc, #316]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a4e      	ldr	r2, [pc, #312]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a34a:	f7f8 f995 	bl	8002678 <HAL_GetTick>
 800a34e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a350:	e008      	b.n	800a364 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a352:	f7f8 f991 	bl	8002678 <HAL_GetTick>
 800a356:	4602      	mov	r2, r0
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d901      	bls.n	800a364 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	e086      	b.n	800a472 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a364:	4b45      	ldr	r3, [pc, #276]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1f0      	bne.n	800a352 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a370:	4b42      	ldr	r3, [pc, #264]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a374:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	051b      	lsls	r3, r3, #20
 800a37e:	493f      	ldr	r1, [pc, #252]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a380:	4313      	orrs	r3, r2
 800a382:	628b      	str	r3, [r1, #40]	; 0x28
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	3b01      	subs	r3, #1
 800a38a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	3b01      	subs	r3, #1
 800a394:	025b      	lsls	r3, r3, #9
 800a396:	b29b      	uxth	r3, r3
 800a398:	431a      	orrs	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	041b      	lsls	r3, r3, #16
 800a3a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3a6:	431a      	orrs	r2, r3
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	061b      	lsls	r3, r3, #24
 800a3b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3b4:	4931      	ldr	r1, [pc, #196]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a3ba:	4b30      	ldr	r3, [pc, #192]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	492d      	ldr	r1, [pc, #180]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a3cc:	4b2b      	ldr	r3, [pc, #172]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	4928      	ldr	r1, [pc, #160]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a3de:	4b27      	ldr	r3, [pc, #156]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e2:	4a26      	ldr	r2, [pc, #152]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a3e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a3ea:	4b24      	ldr	r3, [pc, #144]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a3ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3ee:	4b24      	ldr	r3, [pc, #144]	; (800a480 <RCCEx_PLL3_Config+0x160>)
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	69d2      	ldr	r2, [r2, #28]
 800a3f6:	00d2      	lsls	r2, r2, #3
 800a3f8:	4920      	ldr	r1, [pc, #128]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a3fe:	4b1f      	ldr	r3, [pc, #124]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a402:	4a1e      	ldr	r2, [pc, #120]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a408:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d106      	bne.n	800a41e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a410:	4b1a      	ldr	r3, [pc, #104]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a414:	4a19      	ldr	r2, [pc, #100]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a416:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a41a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a41c:	e00f      	b.n	800a43e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d106      	bne.n	800a432 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a424:	4b15      	ldr	r3, [pc, #84]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a428:	4a14      	ldr	r2, [pc, #80]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a42a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a42e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a430:	e005      	b.n	800a43e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a432:	4b12      	ldr	r3, [pc, #72]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a436:	4a11      	ldr	r2, [pc, #68]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a438:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a43c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a43e:	4b0f      	ldr	r3, [pc, #60]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a0e      	ldr	r2, [pc, #56]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a448:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a44a:	f7f8 f915 	bl	8002678 <HAL_GetTick>
 800a44e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a450:	e008      	b.n	800a464 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a452:	f7f8 f911 	bl	8002678 <HAL_GetTick>
 800a456:	4602      	mov	r2, r0
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d901      	bls.n	800a464 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e006      	b.n	800a472 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a464:	4b05      	ldr	r3, [pc, #20]	; (800a47c <RCCEx_PLL3_Config+0x15c>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0f0      	beq.n	800a452 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a470:	7bfb      	ldrb	r3, [r7, #15]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	58024400 	.word	0x58024400
 800a480:	ffff0007 	.word	0xffff0007

0800a484 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d101      	bne.n	800a49a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e0eb      	b.n	800a672 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a75      	ldr	r2, [pc, #468]	; (800a67c <HAL_SPI_Init+0x1f8>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d00f      	beq.n	800a4ca <HAL_SPI_Init+0x46>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a74      	ldr	r2, [pc, #464]	; (800a680 <HAL_SPI_Init+0x1fc>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d00a      	beq.n	800a4ca <HAL_SPI_Init+0x46>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a72      	ldr	r2, [pc, #456]	; (800a684 <HAL_SPI_Init+0x200>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d005      	beq.n	800a4ca <HAL_SPI_Init+0x46>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2b0f      	cmp	r3, #15
 800a4c4:	d901      	bls.n	800a4ca <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e0d3      	b.n	800a672 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f001 f87a 	bl	800b5c4 <SPI_GetPacketSize>
 800a4d0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a69      	ldr	r2, [pc, #420]	; (800a67c <HAL_SPI_Init+0x1f8>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d00c      	beq.n	800a4f6 <HAL_SPI_Init+0x72>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a67      	ldr	r2, [pc, #412]	; (800a680 <HAL_SPI_Init+0x1fc>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d007      	beq.n	800a4f6 <HAL_SPI_Init+0x72>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a66      	ldr	r2, [pc, #408]	; (800a684 <HAL_SPI_Init+0x200>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d002      	beq.n	800a4f6 <HAL_SPI_Init+0x72>
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	2b08      	cmp	r3, #8
 800a4f4:	d811      	bhi.n	800a51a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a4fa:	4a60      	ldr	r2, [pc, #384]	; (800a67c <HAL_SPI_Init+0x1f8>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d009      	beq.n	800a514 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a5e      	ldr	r2, [pc, #376]	; (800a680 <HAL_SPI_Init+0x1fc>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d004      	beq.n	800a514 <HAL_SPI_Init+0x90>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a5d      	ldr	r2, [pc, #372]	; (800a684 <HAL_SPI_Init+0x200>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d104      	bne.n	800a51e <HAL_SPI_Init+0x9a>
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b10      	cmp	r3, #16
 800a518:	d901      	bls.n	800a51e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e0a9      	b.n	800a672 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b00      	cmp	r3, #0
 800a528:	d106      	bne.n	800a538 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f7f7 fa06 	bl	8001944 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f022 0201 	bic.w	r2, r2, #1
 800a54e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a558:	d119      	bne.n	800a58e <HAL_SPI_Init+0x10a>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a562:	d103      	bne.n	800a56c <HAL_SPI_Init+0xe8>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d008      	beq.n	800a57e <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10c      	bne.n	800a58e <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a57c:	d107      	bne.n	800a58e <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a58c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	69da      	ldr	r2, [r3, #28]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a596:	431a      	orrs	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	431a      	orrs	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a0:	ea42 0103 	orr.w	r1, r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	68da      	ldr	r2, [r3, #12]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5be:	431a      	orrs	r2, r3
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	431a      	orrs	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	431a      	orrs	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	431a      	orrs	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5ee:	ea42 0103 	orr.w	r1, r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d113      	bne.n	800a62e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a618:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a62c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f022 0201 	bic.w	r2, r2, #1
 800a63c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00a      	beq.n	800a660 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	430a      	orrs	r2, r1
 800a65e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a670:	2300      	movs	r3, #0
}
 800a672:	4618      	mov	r0, r3
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	40013000 	.word	0x40013000
 800a680:	40003800 	.word	0x40003800
 800a684:	40003c00 	.word	0x40003c00

0800a688 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08a      	sub	sp, #40	; 0x28
 800a68c:	af02      	add	r7, sp, #8
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	4613      	mov	r3, r2
 800a696:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	3320      	adds	r3, #32
 800a69e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d101      	bne.n	800a6b2 <HAL_SPI_Transmit+0x2a>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	e1d7      	b.n	800aa62 <HAL_SPI_Transmit+0x3da>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6ba:	f7f7 ffdd 	bl	8002678 <HAL_GetTick>
 800a6be:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d007      	beq.n	800a6dc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a6d8:	7efb      	ldrb	r3, [r7, #27]
 800a6da:	e1c2      	b.n	800aa62 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <HAL_SPI_Transmit+0x60>
 800a6e2:	88fb      	ldrh	r3, [r7, #6]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d107      	bne.n	800a6f8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a6f4:	7efb      	ldrb	r3, [r7, #27]
 800a6f6:	e1b4      	b.n	800aa62 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2203      	movs	r2, #3
 800a6fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	88fa      	ldrh	r2, [r7, #6]
 800a712:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	88fa      	ldrh	r2, [r7, #6]
 800a71a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2200      	movs	r2, #0
 800a738:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2200      	movs	r2, #0
 800a73e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a748:	d107      	bne.n	800a75a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a758:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	4b96      	ldr	r3, [pc, #600]	; (800a9bc <HAL_SPI_Transmit+0x334>)
 800a762:	4013      	ands	r3, r2
 800a764:	88f9      	ldrh	r1, [r7, #6]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	6812      	ldr	r2, [r2, #0]
 800a76a:	430b      	orrs	r3, r1
 800a76c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f042 0201 	orr.w	r2, r2, #1
 800a77c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a786:	d107      	bne.n	800a798 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a796:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	2b0f      	cmp	r3, #15
 800a79e:	d947      	bls.n	800a830 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a7a0:	e03f      	b.n	800a822 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	f003 0302 	and.w	r3, r3, #2
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	d114      	bne.n	800a7da <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6812      	ldr	r2, [r2, #0]
 800a7ba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7c0:	1d1a      	adds	r2, r3, #4
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a7d8:	e023      	b.n	800a822 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7da:	f7f7 ff4d 	bl	8002678 <HAL_GetTick>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	1ad3      	subs	r3, r2, r3
 800a7e4:	683a      	ldr	r2, [r7, #0]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d803      	bhi.n	800a7f2 <HAL_SPI_Transmit+0x16a>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f0:	d102      	bne.n	800a7f8 <HAL_SPI_Transmit+0x170>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d114      	bne.n	800a822 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 fe15 	bl	800b428 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a80c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2201      	movs	r2, #1
 800a81a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e11f      	b.n	800aa62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a828:	b29b      	uxth	r3, r3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1b9      	bne.n	800a7a2 <HAL_SPI_Transmit+0x11a>
 800a82e:	e0f2      	b.n	800aa16 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	2b07      	cmp	r3, #7
 800a836:	f240 80e7 	bls.w	800aa08 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a83a:	e05d      	b.n	800a8f8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	695b      	ldr	r3, [r3, #20]
 800a842:	f003 0302 	and.w	r3, r3, #2
 800a846:	2b02      	cmp	r3, #2
 800a848:	d132      	bne.n	800a8b0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a850:	b29b      	uxth	r3, r3
 800a852:	2b01      	cmp	r3, #1
 800a854:	d918      	bls.n	800a888 <HAL_SPI_Transmit+0x200>
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d014      	beq.n	800a888 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	6812      	ldr	r2, [r2, #0]
 800a868:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a86e:	1d1a      	adds	r2, r3, #4
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	3b02      	subs	r3, #2
 800a87e:	b29a      	uxth	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a886:	e037      	b.n	800a8f8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a88c:	881a      	ldrh	r2, [r3, #0]
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a896:	1c9a      	adds	r2, r3, #2
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a8ae:	e023      	b.n	800a8f8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8b0:	f7f7 fee2 	bl	8002678 <HAL_GetTick>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d803      	bhi.n	800a8c8 <HAL_SPI_Transmit+0x240>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c6:	d102      	bne.n	800a8ce <HAL_SPI_Transmit+0x246>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d114      	bne.n	800a8f8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f000 fdaa 	bl	800b428 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e0b4      	b.n	800aa62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d19b      	bne.n	800a83c <HAL_SPI_Transmit+0x1b4>
 800a904:	e087      	b.n	800aa16 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	f003 0302 	and.w	r3, r3, #2
 800a910:	2b02      	cmp	r3, #2
 800a912:	d155      	bne.n	800a9c0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	2b03      	cmp	r3, #3
 800a91e:	d918      	bls.n	800a952 <HAL_SPI_Transmit+0x2ca>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a924:	2b40      	cmp	r3, #64	; 0x40
 800a926:	d914      	bls.n	800a952 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6812      	ldr	r2, [r2, #0]
 800a932:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a938:	1d1a      	adds	r2, r3, #4
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a944:	b29b      	uxth	r3, r3
 800a946:	3b04      	subs	r3, #4
 800a948:	b29a      	uxth	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a950:	e05a      	b.n	800aa08 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a958:	b29b      	uxth	r3, r3
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d917      	bls.n	800a98e <HAL_SPI_Transmit+0x306>
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a962:	2b00      	cmp	r3, #0
 800a964:	d013      	beq.n	800a98e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a96a:	881a      	ldrh	r2, [r3, #0]
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a974:	1c9a      	adds	r2, r3, #2
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a980:	b29b      	uxth	r3, r3
 800a982:	3b02      	subs	r3, #2
 800a984:	b29a      	uxth	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a98c:	e03c      	b.n	800aa08 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3320      	adds	r3, #32
 800a998:	7812      	ldrb	r2, [r2, #0]
 800a99a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9a0:	1c5a      	adds	r2, r3, #1
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a9b8:	e026      	b.n	800aa08 <HAL_SPI_Transmit+0x380>
 800a9ba:	bf00      	nop
 800a9bc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9c0:	f7f7 fe5a 	bl	8002678 <HAL_GetTick>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d803      	bhi.n	800a9d8 <HAL_SPI_Transmit+0x350>
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d6:	d102      	bne.n	800a9de <HAL_SPI_Transmit+0x356>
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d114      	bne.n	800aa08 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f000 fd22 	bl	800b428 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e02c      	b.n	800aa62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f47f af78 	bne.w	800a906 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	2108      	movs	r1, #8
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f000 fda1 	bl	800b568 <SPI_WaitOnFlagUntilTimeout>
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d007      	beq.n	800aa3c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa32:	f043 0220 	orr.w	r2, r3, #32
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 fcf3 	bl	800b428 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800aa60:	7efb      	ldrb	r3, [r7, #27]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3720      	adds	r7, #32
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop

0800aa6c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b08a      	sub	sp, #40	; 0x28
 800aa70:	af02      	add	r7, sp, #8
 800aa72:	60f8      	str	r0, [r7, #12]
 800aa74:	60b9      	str	r1, [r7, #8]
 800aa76:	603b      	str	r3, [r7, #0]
 800aa78:	4613      	mov	r3, r2
 800aa7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	3330      	adds	r3, #48	; 0x30
 800aa86:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa90:	d112      	bne.n	800aab8 <HAL_SPI_Receive+0x4c>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10e      	bne.n	800aab8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2204      	movs	r2, #4
 800aa9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800aaa2:	88fa      	ldrh	r2, [r7, #6]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	68b9      	ldr	r1, [r7, #8]
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 f9ce 	bl	800ae50 <HAL_SPI_TransmitReceive>
 800aab4:	4603      	mov	r3, r0
 800aab6:	e1c7      	b.n	800ae48 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d101      	bne.n	800aac6 <HAL_SPI_Receive+0x5a>
 800aac2:	2302      	movs	r3, #2
 800aac4:	e1c0      	b.n	800ae48 <HAL_SPI_Receive+0x3dc>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aace:	f7f7 fdd3 	bl	8002678 <HAL_GetTick>
 800aad2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d007      	beq.n	800aaf0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800aae0:	2302      	movs	r3, #2
 800aae2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aaec:	7ffb      	ldrb	r3, [r7, #31]
 800aaee:	e1ab      	b.n	800ae48 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d002      	beq.n	800aafc <HAL_SPI_Receive+0x90>
 800aaf6:	88fb      	ldrh	r3, [r7, #6]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d107      	bne.n	800ab0c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ab08:	7ffb      	ldrb	r3, [r7, #31]
 800ab0a:	e19d      	b.n	800ae48 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2204      	movs	r2, #4
 800ab10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	88fa      	ldrh	r2, [r7, #6]
 800ab26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	88fa      	ldrh	r2, [r7, #6]
 800ab2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ab5c:	d107      	bne.n	800ab6e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	4b94      	ldr	r3, [pc, #592]	; (800adc8 <HAL_SPI_Receive+0x35c>)
 800ab76:	4013      	ands	r3, r2
 800ab78:	88f9      	ldrh	r1, [r7, #6]
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	6812      	ldr	r2, [r2, #0]
 800ab7e:	430b      	orrs	r3, r1
 800ab80:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f042 0201 	orr.w	r2, r2, #1
 800ab90:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab9a:	d107      	bne.n	800abac <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abaa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	2b0f      	cmp	r3, #15
 800abb2:	d948      	bls.n	800ac46 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800abb4:	e040      	b.n	800ac38 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	695a      	ldr	r2, [r3, #20]
 800abbc:	f248 0308 	movw	r3, #32776	; 0x8008
 800abc0:	4013      	ands	r3, r2
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d014      	beq.n	800abf0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800abd0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abd6:	1d1a      	adds	r2, r3, #4
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	3b01      	subs	r3, #1
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800abee:	e023      	b.n	800ac38 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abf0:	f7f7 fd42 	bl	8002678 <HAL_GetTick>
 800abf4:	4602      	mov	r2, r0
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d803      	bhi.n	800ac08 <HAL_SPI_Receive+0x19c>
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac06:	d102      	bne.n	800ac0e <HAL_SPI_Receive+0x1a2>
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d114      	bne.n	800ac38 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f000 fc0a 	bl	800b428 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	e107      	b.n	800ae48 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1b8      	bne.n	800abb6 <HAL_SPI_Receive+0x14a>
 800ac44:	e0ed      	b.n	800ae22 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	2b07      	cmp	r3, #7
 800ac4c:	f240 80e2 	bls.w	800ae14 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ac50:	e05b      	b.n	800ad0a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d030      	beq.n	800acc2 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	695b      	ldr	r3, [r3, #20]
 800ac66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d014      	beq.n	800ac98 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac78:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac7e:	1d1a      	adds	r2, r3, #4
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	3b02      	subs	r3, #2
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ac96:	e038      	b.n	800ad0a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac9c:	69ba      	ldr	r2, [r7, #24]
 800ac9e:	8812      	ldrh	r2, [r2, #0]
 800aca0:	b292      	uxth	r2, r2
 800aca2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aca8:	1c9a      	adds	r2, r3, #2
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	3b01      	subs	r3, #1
 800acb8:	b29a      	uxth	r2, r3
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800acc0:	e023      	b.n	800ad0a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acc2:	f7f7 fcd9 	bl	8002678 <HAL_GetTick>
 800acc6:	4602      	mov	r2, r0
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d803      	bhi.n	800acda <HAL_SPI_Receive+0x26e>
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd8:	d102      	bne.n	800ace0 <HAL_SPI_Receive+0x274>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d114      	bne.n	800ad0a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 fba1 	bl	800b428 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2201      	movs	r2, #1
 800ad02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e09e      	b.n	800ae48 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d19d      	bne.n	800ac52 <HAL_SPI_Receive+0x1e6>
 800ad16:	e084      	b.n	800ae22 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d052      	beq.n	800adcc <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d014      	beq.n	800ad5e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ad3e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad44:	1d1a      	adds	r2, r3, #4
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	3b04      	subs	r3, #4
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ad5c:	e05a      	b.n	800ae14 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800ad68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad6c:	d914      	bls.n	800ad98 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad72:	69ba      	ldr	r2, [r7, #24]
 800ad74:	8812      	ldrh	r2, [r2, #0]
 800ad76:	b292      	uxth	r2, r2
 800ad78:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad7e:	1c9a      	adds	r2, r3, #2
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	3b02      	subs	r3, #2
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ad96:	e03d      	b.n	800ae14 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ada4:	7812      	ldrb	r2, [r2, #0]
 800ada6:	b2d2      	uxtb	r2, r2
 800ada8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adae:	1c5a      	adds	r2, r3, #1
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800adba:	b29b      	uxth	r3, r3
 800adbc:	3b01      	subs	r3, #1
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800adc6:	e025      	b.n	800ae14 <HAL_SPI_Receive+0x3a8>
 800adc8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adcc:	f7f7 fc54 	bl	8002678 <HAL_GetTick>
 800add0:	4602      	mov	r2, r0
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	1ad3      	subs	r3, r2, r3
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	429a      	cmp	r2, r3
 800adda:	d803      	bhi.n	800ade4 <HAL_SPI_Receive+0x378>
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade2:	d102      	bne.n	800adea <HAL_SPI_Receive+0x37e>
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d114      	bne.n	800ae14 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 fb1c 	bl	800b428 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	e019      	b.n	800ae48 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	f47f af7b 	bne.w	800ad18 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f000 fb00 	bl	800b428 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d001      	beq.n	800ae46 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e000      	b.n	800ae48 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800ae46:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3720      	adds	r7, #32
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b08e      	sub	sp, #56	; 0x38
 800ae54:	af02      	add	r7, sp, #8
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
 800ae5c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	3320      	adds	r3, #32
 800ae6a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	3330      	adds	r3, #48	; 0x30
 800ae72:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d101      	bne.n	800ae82 <HAL_SPI_TransmitReceive+0x32>
 800ae7e:	2302      	movs	r3, #2
 800ae80:	e2ce      	b.n	800b420 <HAL_SPI_TransmitReceive+0x5d0>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae8a:	f7f7 fbf5 	bl	8002678 <HAL_GetTick>
 800ae8e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800ae90:	887b      	ldrh	r3, [r7, #2]
 800ae92:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800ae94:	887b      	ldrh	r3, [r7, #2]
 800ae96:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ae9e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aea6:	7efb      	ldrb	r3, [r7, #27]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d014      	beq.n	800aed6 <HAL_SPI_TransmitReceive+0x86>
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aeb2:	d106      	bne.n	800aec2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d102      	bne.n	800aec2 <HAL_SPI_TransmitReceive+0x72>
 800aebc:	7efb      	ldrb	r3, [r7, #27]
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	d009      	beq.n	800aed6 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800aec2:	2302      	movs	r3, #2
 800aec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aed4:	e2a4      	b.n	800b420 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d005      	beq.n	800aee8 <HAL_SPI_TransmitReceive+0x98>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d002      	beq.n	800aee8 <HAL_SPI_TransmitReceive+0x98>
 800aee2:	887b      	ldrh	r3, [r7, #2]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d109      	bne.n	800aefc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800aef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aefa:	e291      	b.n	800b420 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2b04      	cmp	r3, #4
 800af06:	d003      	beq.n	800af10 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2205      	movs	r2, #5
 800af0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	887a      	ldrh	r2, [r7, #2]
 800af22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	887a      	ldrh	r2, [r7, #2]
 800af2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	887a      	ldrh	r2, [r7, #2]
 800af38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	887a      	ldrh	r2, [r7, #2]
 800af40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	4b9f      	ldr	r3, [pc, #636]	; (800b1d4 <HAL_SPI_TransmitReceive+0x384>)
 800af58:	4013      	ands	r3, r2
 800af5a:	8879      	ldrh	r1, [r7, #2]
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	6812      	ldr	r2, [r2, #0]
 800af60:	430b      	orrs	r3, r1
 800af62:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f042 0201 	orr.w	r2, r2, #1
 800af72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af7c:	d107      	bne.n	800af8e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	2b0f      	cmp	r3, #15
 800af94:	d970      	bls.n	800b078 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800af96:	e068      	b.n	800b06a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	f003 0302 	and.w	r3, r3, #2
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d11a      	bne.n	800afdc <HAL_SPI_TransmitReceive+0x18c>
 800afa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d017      	beq.n	800afdc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	6812      	ldr	r2, [r2, #0]
 800afb6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afbc:	1d1a      	adds	r2, r3, #4
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800afc8:	b29b      	uxth	r3, r3
 800afca:	3b01      	subs	r3, #1
 800afcc:	b29a      	uxth	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800afda:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	695a      	ldr	r2, [r3, #20]
 800afe2:	f248 0308 	movw	r3, #32776	; 0x8008
 800afe6:	4013      	ands	r3, r2
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d01a      	beq.n	800b022 <HAL_SPI_TransmitReceive+0x1d2>
 800afec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d017      	beq.n	800b022 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800affa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800affc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b002:	1d1a      	adds	r2, r3, #4
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b00e:	b29b      	uxth	r3, r3
 800b010:	3b01      	subs	r3, #1
 800b012:	b29a      	uxth	r2, r3
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b020:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b022:	f7f7 fb29 	bl	8002678 <HAL_GetTick>
 800b026:	4602      	mov	r2, r0
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b02e:	429a      	cmp	r2, r3
 800b030:	d803      	bhi.n	800b03a <HAL_SPI_TransmitReceive+0x1ea>
 800b032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b038:	d102      	bne.n	800b040 <HAL_SPI_TransmitReceive+0x1f0>
 800b03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d114      	bne.n	800b06a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b040:	68f8      	ldr	r0, [r7, #12]
 800b042:	f000 f9f1 	bl	800b428 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b054:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2201      	movs	r2, #1
 800b062:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	e1da      	b.n	800b420 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b06a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d193      	bne.n	800af98 <HAL_SPI_TransmitReceive+0x148>
 800b070:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b072:	2b00      	cmp	r3, #0
 800b074:	d190      	bne.n	800af98 <HAL_SPI_TransmitReceive+0x148>
 800b076:	e1ac      	b.n	800b3d2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	2b07      	cmp	r3, #7
 800b07e:	f240 81a0 	bls.w	800b3c2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b082:	e0a9      	b.n	800b1d8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	f003 0302 	and.w	r3, r3, #2
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d139      	bne.n	800b106 <HAL_SPI_TransmitReceive+0x2b6>
 800b092:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b094:	2b00      	cmp	r3, #0
 800b096:	d036      	beq.n	800b106 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b098:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d91c      	bls.n	800b0d8 <HAL_SPI_TransmitReceive+0x288>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d018      	beq.n	800b0d8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	6812      	ldr	r2, [r2, #0]
 800b0b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0b6:	1d1a      	adds	r2, r3, #4
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	3b02      	subs	r3, #2
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b0d6:	e016      	b.n	800b106 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0dc:	881a      	ldrh	r2, [r3, #0]
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0e6:	1c9a      	adds	r2, r3, #2
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b104:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d03a      	beq.n	800b18a <HAL_SPI_TransmitReceive+0x33a>
 800b114:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b116:	2b00      	cmp	r3, #0
 800b118:	d037      	beq.n	800b18a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d018      	beq.n	800b15a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b130:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b132:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b138:	1d1a      	adds	r2, r3, #4
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b144:	b29b      	uxth	r3, r3
 800b146:	3b02      	subs	r3, #2
 800b148:	b29a      	uxth	r2, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b156:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b158:	e017      	b.n	800b18a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b15e:	6a3a      	ldr	r2, [r7, #32]
 800b160:	8812      	ldrh	r2, [r2, #0]
 800b162:	b292      	uxth	r2, r2
 800b164:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b16a:	1c9a      	adds	r2, r3, #2
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b176:	b29b      	uxth	r3, r3
 800b178:	3b01      	subs	r3, #1
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b188:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b18a:	f7f7 fa75 	bl	8002678 <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b196:	429a      	cmp	r2, r3
 800b198:	d803      	bhi.n	800b1a2 <HAL_SPI_TransmitReceive+0x352>
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a0:	d102      	bne.n	800b1a8 <HAL_SPI_TransmitReceive+0x358>
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d117      	bne.n	800b1d8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b1a8:	68f8      	ldr	r0, [r7, #12]
 800b1aa:	f000 f93d 	bl	800b428 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e126      	b.n	800b420 <HAL_SPI_TransmitReceive+0x5d0>
 800b1d2:	bf00      	nop
 800b1d4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b1d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f47f af52 	bne.w	800b084 <HAL_SPI_TransmitReceive+0x234>
 800b1e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f47f af4e 	bne.w	800b084 <HAL_SPI_TransmitReceive+0x234>
 800b1e8:	e0f3      	b.n	800b3d2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	f003 0302 	and.w	r3, r3, #2
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d15a      	bne.n	800b2ae <HAL_SPI_TransmitReceive+0x45e>
 800b1f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d057      	beq.n	800b2ae <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b1fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b200:	2b03      	cmp	r3, #3
 800b202:	d91c      	bls.n	800b23e <HAL_SPI_TransmitReceive+0x3ee>
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b208:	2b40      	cmp	r3, #64	; 0x40
 800b20a:	d918      	bls.n	800b23e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6812      	ldr	r2, [r2, #0]
 800b216:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b21c:	1d1a      	adds	r2, r3, #4
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b228:	b29b      	uxth	r3, r3
 800b22a:	3b04      	subs	r3, #4
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b23a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b23c:	e037      	b.n	800b2ae <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b23e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b240:	2b01      	cmp	r3, #1
 800b242:	d91b      	bls.n	800b27c <HAL_SPI_TransmitReceive+0x42c>
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d017      	beq.n	800b27c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b250:	881a      	ldrh	r2, [r3, #0]
 800b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b254:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b25a:	1c9a      	adds	r2, r3, #2
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b266:	b29b      	uxth	r3, r3
 800b268:	3b02      	subs	r3, #2
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b278:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b27a:	e018      	b.n	800b2ae <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3320      	adds	r3, #32
 800b286:	7812      	ldrb	r2, [r2, #0]
 800b288:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b28e:	1c5a      	adds	r2, r3, #1
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	3b01      	subs	r3, #1
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b2ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	695b      	ldr	r3, [r3, #20]
 800b2b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d05e      	beq.n	800b37a <HAL_SPI_TransmitReceive+0x52a>
 800b2bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d05b      	beq.n	800b37a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d018      	beq.n	800b302 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b2da:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2e0:	1d1a      	adds	r2, r3, #4
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	3b04      	subs	r3, #4
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b2fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b300:	e03b      	b.n	800b37a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	695b      	ldr	r3, [r3, #20]
 800b308:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b30c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b310:	d918      	bls.n	800b344 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b316:	6a3a      	ldr	r2, [r7, #32]
 800b318:	8812      	ldrh	r2, [r2, #0]
 800b31a:	b292      	uxth	r2, r2
 800b31c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b322:	1c9a      	adds	r2, r3, #2
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b32e:	b29b      	uxth	r3, r3
 800b330:	3b02      	subs	r3, #2
 800b332:	b29a      	uxth	r2, r3
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b340:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b342:	e01a      	b.n	800b37a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b350:	7812      	ldrb	r2, [r2, #0]
 800b352:	b2d2      	uxtb	r2, r2
 800b354:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b366:	b29b      	uxth	r3, r3
 800b368:	3b01      	subs	r3, #1
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b378:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b37a:	f7f7 f97d 	bl	8002678 <HAL_GetTick>
 800b37e:	4602      	mov	r2, r0
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b386:	429a      	cmp	r2, r3
 800b388:	d803      	bhi.n	800b392 <HAL_SPI_TransmitReceive+0x542>
 800b38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b390:	d102      	bne.n	800b398 <HAL_SPI_TransmitReceive+0x548>
 800b392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b394:	2b00      	cmp	r3, #0
 800b396:	d114      	bne.n	800b3c2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f000 f845 	bl	800b428 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e02e      	b.n	800b420 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b3c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f47f af10 	bne.w	800b1ea <HAL_SPI_TransmitReceive+0x39a>
 800b3ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f47f af0c 	bne.w	800b1ea <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d4:	9300      	str	r3, [sp, #0]
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2108      	movs	r1, #8
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f000 f8c3 	bl	800b568 <SPI_WaitOnFlagUntilTimeout>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d007      	beq.n	800b3f8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ee:	f043 0220 	orr.w	r2, r3, #32
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 f815 	bl	800b428 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	e001      	b.n	800b420 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800b41c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b420:	4618      	mov	r0, r3
 800b422:	3730      	adds	r7, #48	; 0x30
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b428:	b480      	push	{r7}
 800b42a:	b085      	sub	sp, #20
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	695b      	ldr	r3, [r3, #20]
 800b436:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	699a      	ldr	r2, [r3, #24]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f042 0208 	orr.w	r2, r2, #8
 800b446:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	699a      	ldr	r2, [r3, #24]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f042 0210 	orr.w	r2, r2, #16
 800b456:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f022 0201 	bic.w	r2, r2, #1
 800b466:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6919      	ldr	r1, [r3, #16]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	4b3c      	ldr	r3, [pc, #240]	; (800b564 <SPI_CloseTransfer+0x13c>)
 800b474:	400b      	ands	r3, r1
 800b476:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689a      	ldr	r2, [r3, #8]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b486:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	2b04      	cmp	r3, #4
 800b492:	d014      	beq.n	800b4be <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f003 0320 	and.w	r3, r3, #32
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00f      	beq.n	800b4be <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	699a      	ldr	r2, [r3, #24]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f042 0220 	orr.w	r2, r2, #32
 800b4bc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	d014      	beq.n	800b4f4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00f      	beq.n	800b4f4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4da:	f043 0204 	orr.w	r2, r3, #4
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	699a      	ldr	r2, [r3, #24]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4f2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00f      	beq.n	800b51e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b504:	f043 0201 	orr.w	r2, r3, #1
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	699a      	ldr	r2, [r3, #24]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b51c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00f      	beq.n	800b548 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b52e:	f043 0208 	orr.w	r2, r3, #8
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	699a      	ldr	r2, [r3, #24]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b546:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2200      	movs	r2, #0
 800b554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b558:	bf00      	nop
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	fffffc90 	.word	0xfffffc90

0800b568 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	4613      	mov	r3, r2
 800b576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b578:	e010      	b.n	800b59c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b57a:	f7f7 f87d 	bl	8002678 <HAL_GetTick>
 800b57e:	4602      	mov	r2, r0
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	1ad3      	subs	r3, r2, r3
 800b584:	69ba      	ldr	r2, [r7, #24]
 800b586:	429a      	cmp	r2, r3
 800b588:	d803      	bhi.n	800b592 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b590:	d102      	bne.n	800b598 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b592:	69bb      	ldr	r3, [r7, #24]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b598:	2303      	movs	r3, #3
 800b59a:	e00f      	b.n	800b5bc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	695a      	ldr	r2, [r3, #20]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	68ba      	ldr	r2, [r7, #8]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	bf0c      	ite	eq
 800b5ac:	2301      	moveq	r3, #1
 800b5ae:	2300      	movne	r3, #0
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	79fb      	ldrb	r3, [r7, #7]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d0df      	beq.n	800b57a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3710      	adds	r7, #16
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d0:	095b      	lsrs	r3, r3, #5
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	3307      	adds	r3, #7
 800b5e2:	08db      	lsrs	r3, r3, #3
 800b5e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	fb02 f303 	mul.w	r3, r2, r3
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr

0800b5fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b082      	sub	sp, #8
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d101      	bne.n	800b60c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b608:	2301      	movs	r3, #1
 800b60a:	e049      	b.n	800b6a0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b00      	cmp	r3, #0
 800b616:	d106      	bne.n	800b626 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f7f6 f9f5 	bl	8001a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2202      	movs	r2, #2
 800b62a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	3304      	adds	r3, #4
 800b636:	4619      	mov	r1, r3
 800b638:	4610      	mov	r0, r2
 800b63a:	f000 f9ed 	bl	800ba18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2201      	movs	r2, #1
 800b64a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2201      	movs	r2, #1
 800b672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2201      	movs	r2, #1
 800b68a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2201      	movs	r2, #1
 800b69a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d001      	beq.n	800b6c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e04f      	b.n	800b760 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68da      	ldr	r2, [r3, #12]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f042 0201 	orr.w	r2, r2, #1
 800b6d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a23      	ldr	r2, [pc, #140]	; (800b76c <HAL_TIM_Base_Start_IT+0xc4>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d01d      	beq.n	800b71e <HAL_TIM_Base_Start_IT+0x76>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ea:	d018      	beq.n	800b71e <HAL_TIM_Base_Start_IT+0x76>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a1f      	ldr	r2, [pc, #124]	; (800b770 <HAL_TIM_Base_Start_IT+0xc8>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d013      	beq.n	800b71e <HAL_TIM_Base_Start_IT+0x76>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a1e      	ldr	r2, [pc, #120]	; (800b774 <HAL_TIM_Base_Start_IT+0xcc>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d00e      	beq.n	800b71e <HAL_TIM_Base_Start_IT+0x76>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a1c      	ldr	r2, [pc, #112]	; (800b778 <HAL_TIM_Base_Start_IT+0xd0>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d009      	beq.n	800b71e <HAL_TIM_Base_Start_IT+0x76>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a1b      	ldr	r2, [pc, #108]	; (800b77c <HAL_TIM_Base_Start_IT+0xd4>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d004      	beq.n	800b71e <HAL_TIM_Base_Start_IT+0x76>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a19      	ldr	r2, [pc, #100]	; (800b780 <HAL_TIM_Base_Start_IT+0xd8>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d115      	bne.n	800b74a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	689a      	ldr	r2, [r3, #8]
 800b724:	4b17      	ldr	r3, [pc, #92]	; (800b784 <HAL_TIM_Base_Start_IT+0xdc>)
 800b726:	4013      	ands	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2b06      	cmp	r3, #6
 800b72e:	d015      	beq.n	800b75c <HAL_TIM_Base_Start_IT+0xb4>
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b736:	d011      	beq.n	800b75c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f042 0201 	orr.w	r2, r2, #1
 800b746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b748:	e008      	b.n	800b75c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f042 0201 	orr.w	r2, r2, #1
 800b758:	601a      	str	r2, [r3, #0]
 800b75a:	e000      	b.n	800b75e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b75c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3714      	adds	r7, #20
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr
 800b76c:	40010000 	.word	0x40010000
 800b770:	40000400 	.word	0x40000400
 800b774:	40000800 	.word	0x40000800
 800b778:	40000c00 	.word	0x40000c00
 800b77c:	40010400 	.word	0x40010400
 800b780:	40001800 	.word	0x40001800
 800b784:	00010007 	.word	0x00010007

0800b788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	f003 0302 	and.w	r3, r3, #2
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d122      	bne.n	800b7e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	f003 0302 	and.w	r3, r3, #2
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d11b      	bne.n	800b7e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f06f 0202 	mvn.w	r2, #2
 800b7b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	699b      	ldr	r3, [r3, #24]
 800b7c2:	f003 0303 	and.w	r3, r3, #3
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d003      	beq.n	800b7d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f905 	bl	800b9da <HAL_TIM_IC_CaptureCallback>
 800b7d0:	e005      	b.n	800b7de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f8f7 	bl	800b9c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f000 f908 	bl	800b9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	f003 0304 	and.w	r3, r3, #4
 800b7ee:	2b04      	cmp	r3, #4
 800b7f0:	d122      	bne.n	800b838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	f003 0304 	and.w	r3, r3, #4
 800b7fc:	2b04      	cmp	r3, #4
 800b7fe:	d11b      	bne.n	800b838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f06f 0204 	mvn.w	r2, #4
 800b808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2202      	movs	r2, #2
 800b80e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	699b      	ldr	r3, [r3, #24]
 800b816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d003      	beq.n	800b826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f8db 	bl	800b9da <HAL_TIM_IC_CaptureCallback>
 800b824:	e005      	b.n	800b832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f8cd 	bl	800b9c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f8de 	bl	800b9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	691b      	ldr	r3, [r3, #16]
 800b83e:	f003 0308 	and.w	r3, r3, #8
 800b842:	2b08      	cmp	r3, #8
 800b844:	d122      	bne.n	800b88c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	f003 0308 	and.w	r3, r3, #8
 800b850:	2b08      	cmp	r3, #8
 800b852:	d11b      	bne.n	800b88c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f06f 0208 	mvn.w	r2, #8
 800b85c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2204      	movs	r2, #4
 800b862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	f003 0303 	and.w	r3, r3, #3
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 f8b1 	bl	800b9da <HAL_TIM_IC_CaptureCallback>
 800b878:	e005      	b.n	800b886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f8a3 	bl	800b9c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f8b4 	bl	800b9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	691b      	ldr	r3, [r3, #16]
 800b892:	f003 0310 	and.w	r3, r3, #16
 800b896:	2b10      	cmp	r3, #16
 800b898:	d122      	bne.n	800b8e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	f003 0310 	and.w	r3, r3, #16
 800b8a4:	2b10      	cmp	r3, #16
 800b8a6:	d11b      	bne.n	800b8e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f06f 0210 	mvn.w	r2, #16
 800b8b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2208      	movs	r2, #8
 800b8b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	69db      	ldr	r3, [r3, #28]
 800b8be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d003      	beq.n	800b8ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f887 	bl	800b9da <HAL_TIM_IC_CaptureCallback>
 800b8cc:	e005      	b.n	800b8da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f879 	bl	800b9c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f88a 	bl	800b9ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	691b      	ldr	r3, [r3, #16]
 800b8e6:	f003 0301 	and.w	r3, r3, #1
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d10e      	bne.n	800b90c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d107      	bne.n	800b90c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f06f 0201 	mvn.w	r2, #1
 800b904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f7f6 f9a4 	bl	8001c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b916:	2b80      	cmp	r3, #128	; 0x80
 800b918:	d10e      	bne.n	800b938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b924:	2b80      	cmp	r3, #128	; 0x80
 800b926:	d107      	bne.n	800b938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f99c 	bl	800bc70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b946:	d10e      	bne.n	800b966 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	68db      	ldr	r3, [r3, #12]
 800b94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b952:	2b80      	cmp	r3, #128	; 0x80
 800b954:	d107      	bne.n	800b966 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b95e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 f98f 	bl	800bc84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b970:	2b40      	cmp	r3, #64	; 0x40
 800b972:	d10e      	bne.n	800b992 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b97e:	2b40      	cmp	r3, #64	; 0x40
 800b980:	d107      	bne.n	800b992 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b98a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f838 	bl	800ba02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	f003 0320 	and.w	r3, r3, #32
 800b99c:	2b20      	cmp	r3, #32
 800b99e:	d10e      	bne.n	800b9be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	f003 0320 	and.w	r3, r3, #32
 800b9aa:	2b20      	cmp	r3, #32
 800b9ac:	d107      	bne.n	800b9be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f06f 0220 	mvn.w	r2, #32
 800b9b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f94f 	bl	800bc5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b9be:	bf00      	nop
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b9c6:	b480      	push	{r7}
 800b9c8:	b083      	sub	sp, #12
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b9ce:	bf00      	nop
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b083      	sub	sp, #12
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b9e2:	bf00      	nop
 800b9e4:	370c      	adds	r7, #12
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b9f6:	bf00      	nop
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba02:	b480      	push	{r7}
 800ba04:	b083      	sub	sp, #12
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba0a:	bf00      	nop
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
	...

0800ba18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4a40      	ldr	r2, [pc, #256]	; (800bb2c <TIM_Base_SetConfig+0x114>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d013      	beq.n	800ba58 <TIM_Base_SetConfig+0x40>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba36:	d00f      	beq.n	800ba58 <TIM_Base_SetConfig+0x40>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	4a3d      	ldr	r2, [pc, #244]	; (800bb30 <TIM_Base_SetConfig+0x118>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d00b      	beq.n	800ba58 <TIM_Base_SetConfig+0x40>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4a3c      	ldr	r2, [pc, #240]	; (800bb34 <TIM_Base_SetConfig+0x11c>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d007      	beq.n	800ba58 <TIM_Base_SetConfig+0x40>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a3b      	ldr	r2, [pc, #236]	; (800bb38 <TIM_Base_SetConfig+0x120>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d003      	beq.n	800ba58 <TIM_Base_SetConfig+0x40>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a3a      	ldr	r2, [pc, #232]	; (800bb3c <TIM_Base_SetConfig+0x124>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d108      	bne.n	800ba6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	685b      	ldr	r3, [r3, #4]
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a2f      	ldr	r2, [pc, #188]	; (800bb2c <TIM_Base_SetConfig+0x114>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d01f      	beq.n	800bab2 <TIM_Base_SetConfig+0x9a>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba78:	d01b      	beq.n	800bab2 <TIM_Base_SetConfig+0x9a>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4a2c      	ldr	r2, [pc, #176]	; (800bb30 <TIM_Base_SetConfig+0x118>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d017      	beq.n	800bab2 <TIM_Base_SetConfig+0x9a>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4a2b      	ldr	r2, [pc, #172]	; (800bb34 <TIM_Base_SetConfig+0x11c>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d013      	beq.n	800bab2 <TIM_Base_SetConfig+0x9a>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4a2a      	ldr	r2, [pc, #168]	; (800bb38 <TIM_Base_SetConfig+0x120>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d00f      	beq.n	800bab2 <TIM_Base_SetConfig+0x9a>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a29      	ldr	r2, [pc, #164]	; (800bb3c <TIM_Base_SetConfig+0x124>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d00b      	beq.n	800bab2 <TIM_Base_SetConfig+0x9a>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4a28      	ldr	r2, [pc, #160]	; (800bb40 <TIM_Base_SetConfig+0x128>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d007      	beq.n	800bab2 <TIM_Base_SetConfig+0x9a>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a27      	ldr	r2, [pc, #156]	; (800bb44 <TIM_Base_SetConfig+0x12c>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d003      	beq.n	800bab2 <TIM_Base_SetConfig+0x9a>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	4a26      	ldr	r2, [pc, #152]	; (800bb48 <TIM_Base_SetConfig+0x130>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d108      	bne.n	800bac4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	4313      	orrs	r3, r2
 800bac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	4313      	orrs	r3, r2
 800bad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	689a      	ldr	r2, [r3, #8]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a10      	ldr	r2, [pc, #64]	; (800bb2c <TIM_Base_SetConfig+0x114>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d00f      	beq.n	800bb10 <TIM_Base_SetConfig+0xf8>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a12      	ldr	r2, [pc, #72]	; (800bb3c <TIM_Base_SetConfig+0x124>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d00b      	beq.n	800bb10 <TIM_Base_SetConfig+0xf8>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a11      	ldr	r2, [pc, #68]	; (800bb40 <TIM_Base_SetConfig+0x128>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d007      	beq.n	800bb10 <TIM_Base_SetConfig+0xf8>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a10      	ldr	r2, [pc, #64]	; (800bb44 <TIM_Base_SetConfig+0x12c>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d003      	beq.n	800bb10 <TIM_Base_SetConfig+0xf8>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a0f      	ldr	r2, [pc, #60]	; (800bb48 <TIM_Base_SetConfig+0x130>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d103      	bne.n	800bb18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	691a      	ldr	r2, [r3, #16]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	615a      	str	r2, [r3, #20]
}
 800bb1e:	bf00      	nop
 800bb20:	3714      	adds	r7, #20
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	40010000 	.word	0x40010000
 800bb30:	40000400 	.word	0x40000400
 800bb34:	40000800 	.word	0x40000800
 800bb38:	40000c00 	.word	0x40000c00
 800bb3c:	40010400 	.word	0x40010400
 800bb40:	40014000 	.word	0x40014000
 800bb44:	40014400 	.word	0x40014400
 800bb48:	40014800 	.word	0x40014800

0800bb4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d101      	bne.n	800bb64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb60:	2302      	movs	r3, #2
 800bb62:	e068      	b.n	800bc36 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2202      	movs	r2, #2
 800bb70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a2e      	ldr	r2, [pc, #184]	; (800bc44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d004      	beq.n	800bb98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a2d      	ldr	r2, [pc, #180]	; (800bc48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d108      	bne.n	800bbaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a1e      	ldr	r2, [pc, #120]	; (800bc44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d01d      	beq.n	800bc0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbd6:	d018      	beq.n	800bc0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a1b      	ldr	r2, [pc, #108]	; (800bc4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d013      	beq.n	800bc0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a1a      	ldr	r2, [pc, #104]	; (800bc50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d00e      	beq.n	800bc0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a18      	ldr	r2, [pc, #96]	; (800bc54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d009      	beq.n	800bc0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a13      	ldr	r2, [pc, #76]	; (800bc48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d004      	beq.n	800bc0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a14      	ldr	r2, [pc, #80]	; (800bc58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d10c      	bne.n	800bc24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	40010000 	.word	0x40010000
 800bc48:	40010400 	.word	0x40010400
 800bc4c:	40000400 	.word	0x40000400
 800bc50:	40000800 	.word	0x40000800
 800bc54:	40000c00 	.word	0x40000c00
 800bc58:	40001800 	.word	0x40001800

0800bc5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc8c:	bf00      	nop
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d101      	bne.n	800bcaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bca6:	2301      	movs	r3, #1
 800bca8:	e042      	b.n	800bd30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d106      	bne.n	800bcc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7f5 fecf 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2224      	movs	r2, #36	; 0x24
 800bcc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f022 0201 	bic.w	r2, r2, #1
 800bcd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fb90 	bl	800c400 <UART_SetConfig>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d101      	bne.n	800bcea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bce6:	2301      	movs	r3, #1
 800bce8:	e022      	b.n	800bd30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d002      	beq.n	800bcf8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f001 f8e4 	bl	800cec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	689a      	ldr	r2, [r3, #8]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f042 0201 	orr.w	r2, r2, #1
 800bd26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f001 f96b 	bl	800d004 <UART_CheckIdleState>
 800bd2e:	4603      	mov	r3, r0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	4613      	mov	r3, r2
 800bd44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd4c:	2b20      	cmp	r3, #32
 800bd4e:	d168      	bne.n	800be22 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d002      	beq.n	800bd5c <HAL_UART_Transmit_DMA+0x24>
 800bd56:	88fb      	ldrh	r3, [r7, #6]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e061      	b.n	800be24 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d101      	bne.n	800bd6e <HAL_UART_Transmit_DMA+0x36>
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e05a      	b.n	800be24 <HAL_UART_Transmit_DMA+0xec>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	88fa      	ldrh	r2, [r7, #6]
 800bd80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	88fa      	ldrh	r2, [r7, #6]
 800bd88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2221      	movs	r2, #33	; 0x21
 800bd98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d02c      	beq.n	800bdfe <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bda8:	4a20      	ldr	r2, [pc, #128]	; (800be2c <HAL_UART_Transmit_DMA+0xf4>)
 800bdaa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdb0:	4a1f      	ldr	r2, [pc, #124]	; (800be30 <HAL_UART_Transmit_DMA+0xf8>)
 800bdb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdb8:	4a1e      	ldr	r2, [pc, #120]	; (800be34 <HAL_UART_Transmit_DMA+0xfc>)
 800bdba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdcc:	4619      	mov	r1, r3
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3328      	adds	r3, #40	; 0x28
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	88fb      	ldrh	r3, [r7, #6]
 800bdd8:	f7f7 f8f6 	bl	8002fc8 <HAL_DMA_Start_IT>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d00d      	beq.n	800bdfe <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2210      	movs	r2, #16
 800bde6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e012      	b.n	800be24 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2240      	movs	r2, #64	; 0x40
 800be04:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	689a      	ldr	r2, [r3, #8]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800be1c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	e000      	b.n	800be24 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800be22:	2302      	movs	r3, #2
  }
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	0800d23d 	.word	0x0800d23d
 800be30:	0800d28d 	.word	0x0800d28d
 800be34:	0800d2a9 	.word	0x0800d2a9

0800be38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b088      	sub	sp, #32
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	69db      	ldr	r3, [r3, #28]
 800be46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800be58:	69fa      	ldr	r2, [r7, #28]
 800be5a:	f640 030f 	movw	r3, #2063	; 0x80f
 800be5e:	4013      	ands	r3, r2
 800be60:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d118      	bne.n	800be9a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	f003 0320 	and.w	r3, r3, #32
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d013      	beq.n	800be9a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	f003 0320 	and.w	r3, r3, #32
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d104      	bne.n	800be86 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be82:	2b00      	cmp	r3, #0
 800be84:	d009      	beq.n	800be9a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f000 8282 	beq.w	800c394 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	4798      	blx	r3
      }
      return;
 800be98:	e27c      	b.n	800c394 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	f000 80ef 	beq.w	800c080 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bea2:	697a      	ldr	r2, [r7, #20]
 800bea4:	4b73      	ldr	r3, [pc, #460]	; (800c074 <HAL_UART_IRQHandler+0x23c>)
 800bea6:	4013      	ands	r3, r2
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d105      	bne.n	800beb8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800beac:	69ba      	ldr	r2, [r7, #24]
 800beae:	4b72      	ldr	r3, [pc, #456]	; (800c078 <HAL_UART_IRQHandler+0x240>)
 800beb0:	4013      	ands	r3, r2
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	f000 80e4 	beq.w	800c080 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d010      	beq.n	800bee4 <HAL_UART_IRQHandler+0xac>
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00b      	beq.n	800bee4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	2201      	movs	r2, #1
 800bed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beda:	f043 0201 	orr.w	r2, r3, #1
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	f003 0302 	and.w	r3, r3, #2
 800beea:	2b00      	cmp	r3, #0
 800beec:	d010      	beq.n	800bf10 <HAL_UART_IRQHandler+0xd8>
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00b      	beq.n	800bf10 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2202      	movs	r2, #2
 800befe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf06:	f043 0204 	orr.w	r2, r3, #4
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	f003 0304 	and.w	r3, r3, #4
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d010      	beq.n	800bf3c <HAL_UART_IRQHandler+0x104>
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	f003 0301 	and.w	r3, r3, #1
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00b      	beq.n	800bf3c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2204      	movs	r2, #4
 800bf2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf32:	f043 0202 	orr.w	r2, r3, #2
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	f003 0308 	and.w	r3, r3, #8
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d015      	beq.n	800bf72 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	f003 0320 	and.w	r3, r3, #32
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d104      	bne.n	800bf5a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bf50:	697a      	ldr	r2, [r7, #20]
 800bf52:	4b48      	ldr	r3, [pc, #288]	; (800c074 <HAL_UART_IRQHandler+0x23c>)
 800bf54:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00b      	beq.n	800bf72 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2208      	movs	r2, #8
 800bf60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf68:	f043 0208 	orr.w	r2, r3, #8
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d011      	beq.n	800bfa0 <HAL_UART_IRQHandler+0x168>
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00c      	beq.n	800bfa0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf96:	f043 0220 	orr.w	r2, r3, #32
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 81f6 	beq.w	800c398 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	f003 0320 	and.w	r3, r3, #32
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d011      	beq.n	800bfda <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	f003 0320 	and.w	r3, r3, #32
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d104      	bne.n	800bfca <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d007      	beq.n	800bfda <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d003      	beq.n	800bfda <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfe0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfec:	2b40      	cmp	r3, #64	; 0x40
 800bfee:	d004      	beq.n	800bffa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d031      	beq.n	800c05e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f001 f8ec 	bl	800d1d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c00a:	2b40      	cmp	r3, #64	; 0x40
 800c00c:	d123      	bne.n	800c056 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	689a      	ldr	r2, [r3, #8]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c01c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c022:	2b00      	cmp	r3, #0
 800c024:	d013      	beq.n	800c04e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c02a:	4a14      	ldr	r2, [pc, #80]	; (800c07c <HAL_UART_IRQHandler+0x244>)
 800c02c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c032:	4618      	mov	r0, r3
 800c034:	f7f7 fd50 	bl	8003ad8 <HAL_DMA_Abort_IT>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d017      	beq.n	800c06e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c048:	4610      	mov	r0, r2
 800c04a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c04c:	e00f      	b.n	800c06e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 f9c0 	bl	800c3d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c054:	e00b      	b.n	800c06e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f9bc 	bl	800c3d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c05c:	e007      	b.n	800c06e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f9b8 	bl	800c3d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c06c:	e194      	b.n	800c398 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c06e:	bf00      	nop
    return;
 800c070:	e192      	b.n	800c398 <HAL_UART_IRQHandler+0x560>
 800c072:	bf00      	nop
 800c074:	10000001 	.word	0x10000001
 800c078:	04000120 	.word	0x04000120
 800c07c:	0800d329 	.word	0x0800d329

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c084:	2b01      	cmp	r3, #1
 800c086:	f040 810f 	bne.w	800c2a8 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	f003 0310 	and.w	r3, r3, #16
 800c090:	2b00      	cmp	r3, #0
 800c092:	f000 8109 	beq.w	800c2a8 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	f003 0310 	and.w	r3, r3, #16
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f000 8103 	beq.w	800c2a8 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2210      	movs	r2, #16
 800c0a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0b4:	2b40      	cmp	r3, #64	; 0x40
 800c0b6:	f040 80bb 	bne.w	800c230 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a96      	ldr	r2, [pc, #600]	; (800c31c <HAL_UART_IRQHandler+0x4e4>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d059      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a94      	ldr	r2, [pc, #592]	; (800c320 <HAL_UART_IRQHandler+0x4e8>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d053      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a92      	ldr	r2, [pc, #584]	; (800c324 <HAL_UART_IRQHandler+0x4ec>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d04d      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a90      	ldr	r2, [pc, #576]	; (800c328 <HAL_UART_IRQHandler+0x4f0>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d047      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a8e      	ldr	r2, [pc, #568]	; (800c32c <HAL_UART_IRQHandler+0x4f4>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d041      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a8c      	ldr	r2, [pc, #560]	; (800c330 <HAL_UART_IRQHandler+0x4f8>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d03b      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4a8a      	ldr	r2, [pc, #552]	; (800c334 <HAL_UART_IRQHandler+0x4fc>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d035      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	4a88      	ldr	r2, [pc, #544]	; (800c338 <HAL_UART_IRQHandler+0x500>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d02f      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a86      	ldr	r2, [pc, #536]	; (800c33c <HAL_UART_IRQHandler+0x504>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d029      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a84      	ldr	r2, [pc, #528]	; (800c340 <HAL_UART_IRQHandler+0x508>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d023      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a82      	ldr	r2, [pc, #520]	; (800c344 <HAL_UART_IRQHandler+0x50c>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d01d      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a80      	ldr	r2, [pc, #512]	; (800c348 <HAL_UART_IRQHandler+0x510>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d017      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4a7e      	ldr	r2, [pc, #504]	; (800c34c <HAL_UART_IRQHandler+0x514>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d011      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a7c      	ldr	r2, [pc, #496]	; (800c350 <HAL_UART_IRQHandler+0x518>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d00b      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4a7a      	ldr	r2, [pc, #488]	; (800c354 <HAL_UART_IRQHandler+0x51c>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d005      	beq.n	800c17a <HAL_UART_IRQHandler+0x342>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	4a78      	ldr	r2, [pc, #480]	; (800c358 <HAL_UART_IRQHandler+0x520>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d105      	bne.n	800c186 <HAL_UART_IRQHandler+0x34e>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	b29b      	uxth	r3, r3
 800c184:	e004      	b.n	800c190 <HAL_UART_IRQHandler+0x358>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	b29b      	uxth	r3, r3
 800c190:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c192:	893b      	ldrh	r3, [r7, #8]
 800c194:	2b00      	cmp	r3, #0
 800c196:	f000 8101 	beq.w	800c39c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1a0:	893a      	ldrh	r2, [r7, #8]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	f080 80fa 	bcs.w	800c39c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	893a      	ldrh	r2, [r7, #8]
 800c1ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ba:	d02b      	beq.n	800c214 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c1ca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	689a      	ldr	r2, [r3, #8]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f022 0201 	bic.w	r2, r2, #1
 800c1da:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	689a      	ldr	r2, [r3, #8]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1ea:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2220      	movs	r2, #32
 800c1f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f022 0210 	bic.w	r2, r2, #16
 800c208:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c20e:	4618      	mov	r0, r3
 800c210:	f7f7 f944 	bl	800349c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c220:	b29b      	uxth	r3, r3
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	b29b      	uxth	r3, r3
 800c226:	4619      	mov	r1, r3
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 f8dd 	bl	800c3e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c22e:	e0b5      	b.n	800c39c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c248:	b29b      	uxth	r3, r3
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 80a8 	beq.w	800c3a0 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800c250:	897b      	ldrh	r3, [r7, #10]
 800c252:	2b00      	cmp	r3, #0
 800c254:	f000 80a4 	beq.w	800c3a0 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c266:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	6899      	ldr	r1, [r3, #8]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	4b3a      	ldr	r3, [pc, #232]	; (800c35c <HAL_UART_IRQHandler+0x524>)
 800c274:	400b      	ands	r3, r1
 800c276:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2220      	movs	r2, #32
 800c27c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f022 0210 	bic.w	r2, r2, #16
 800c29a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c29c:	897b      	ldrh	r3, [r7, #10]
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f000 f8a1 	bl	800c3e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2a6:	e07b      	b.n	800c3a0 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d00d      	beq.n	800c2ce <HAL_UART_IRQHandler+0x496>
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d008      	beq.n	800c2ce <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c2c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f001 f85e 	bl	800d388 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2cc:	e06b      	b.n	800c3a6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d012      	beq.n	800c2fe <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d104      	bne.n	800c2ec <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d008      	beq.n	800c2fe <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d057      	beq.n	800c3a4 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	4798      	blx	r3
    }
    return;
 800c2fc:	e052      	b.n	800c3a4 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c304:	2b00      	cmp	r3, #0
 800c306:	d02b      	beq.n	800c360 <HAL_UART_IRQHandler+0x528>
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d026      	beq.n	800c360 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f001 f81e 	bl	800d354 <UART_EndTransmit_IT>
    return;
 800c318:	e045      	b.n	800c3a6 <HAL_UART_IRQHandler+0x56e>
 800c31a:	bf00      	nop
 800c31c:	40020010 	.word	0x40020010
 800c320:	40020028 	.word	0x40020028
 800c324:	40020040 	.word	0x40020040
 800c328:	40020058 	.word	0x40020058
 800c32c:	40020070 	.word	0x40020070
 800c330:	40020088 	.word	0x40020088
 800c334:	400200a0 	.word	0x400200a0
 800c338:	400200b8 	.word	0x400200b8
 800c33c:	40020410 	.word	0x40020410
 800c340:	40020428 	.word	0x40020428
 800c344:	40020440 	.word	0x40020440
 800c348:	40020458 	.word	0x40020458
 800c34c:	40020470 	.word	0x40020470
 800c350:	40020488 	.word	0x40020488
 800c354:	400204a0 	.word	0x400204a0
 800c358:	400204b8 	.word	0x400204b8
 800c35c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c360:	69fb      	ldr	r3, [r7, #28]
 800c362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c366:	2b00      	cmp	r3, #0
 800c368:	d008      	beq.n	800c37c <HAL_UART_IRQHandler+0x544>
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c370:	2b00      	cmp	r3, #0
 800c372:	d003      	beq.n	800c37c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f001 f81b 	bl	800d3b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c37a:	e014      	b.n	800c3a6 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c37c:	69fb      	ldr	r3, [r7, #28]
 800c37e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00f      	beq.n	800c3a6 <HAL_UART_IRQHandler+0x56e>
 800c386:	69bb      	ldr	r3, [r7, #24]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	da0c      	bge.n	800c3a6 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f001 f805 	bl	800d39c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c392:	e008      	b.n	800c3a6 <HAL_UART_IRQHandler+0x56e>
      return;
 800c394:	bf00      	nop
 800c396:	e006      	b.n	800c3a6 <HAL_UART_IRQHandler+0x56e>
    return;
 800c398:	bf00      	nop
 800c39a:	e004      	b.n	800c3a6 <HAL_UART_IRQHandler+0x56e>
      return;
 800c39c:	bf00      	nop
 800c39e:	e002      	b.n	800c3a6 <HAL_UART_IRQHandler+0x56e>
      return;
 800c3a0:	bf00      	nop
 800c3a2:	e000      	b.n	800c3a6 <HAL_UART_IRQHandler+0x56e>
    return;
 800c3a4:	bf00      	nop
  }
}
 800c3a6:	3720      	adds	r7, #32
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c3b4:	bf00      	nop
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c3c8:	bf00      	nop
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c3dc:	bf00      	nop
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr

0800c3e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c3f4:	bf00      	nop
 800c3f6:	370c      	adds	r7, #12
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c400:	b5b0      	push	{r4, r5, r7, lr}
 800c402:	b08e      	sub	sp, #56	; 0x38
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c408:	2300      	movs	r3, #0
 800c40a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	689a      	ldr	r2, [r3, #8]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	431a      	orrs	r2, r3
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	431a      	orrs	r2, r3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	69db      	ldr	r3, [r3, #28]
 800c422:	4313      	orrs	r3, r2
 800c424:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	4bbf      	ldr	r3, [pc, #764]	; (800c72c <UART_SetConfig+0x32c>)
 800c42e:	4013      	ands	r3, r2
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	6812      	ldr	r2, [r2, #0]
 800c434:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c436:	430b      	orrs	r3, r1
 800c438:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68da      	ldr	r2, [r3, #12]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4ab5      	ldr	r2, [pc, #724]	; (800c730 <UART_SetConfig+0x330>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d004      	beq.n	800c46a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6a1b      	ldr	r3, [r3, #32]
 800c464:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c466:	4313      	orrs	r3, r2
 800c468:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	689a      	ldr	r2, [r3, #8]
 800c470:	4bb0      	ldr	r3, [pc, #704]	; (800c734 <UART_SetConfig+0x334>)
 800c472:	4013      	ands	r3, r2
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	6812      	ldr	r2, [r2, #0]
 800c478:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c47a:	430b      	orrs	r3, r1
 800c47c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c484:	f023 010f 	bic.w	r1, r3, #15
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	430a      	orrs	r2, r1
 800c492:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	4aa7      	ldr	r2, [pc, #668]	; (800c738 <UART_SetConfig+0x338>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d176      	bne.n	800c58c <UART_SetConfig+0x18c>
 800c49e:	4ba7      	ldr	r3, [pc, #668]	; (800c73c <UART_SetConfig+0x33c>)
 800c4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4a6:	2b28      	cmp	r3, #40	; 0x28
 800c4a8:	d86c      	bhi.n	800c584 <UART_SetConfig+0x184>
 800c4aa:	a201      	add	r2, pc, #4	; (adr r2, 800c4b0 <UART_SetConfig+0xb0>)
 800c4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b0:	0800c555 	.word	0x0800c555
 800c4b4:	0800c585 	.word	0x0800c585
 800c4b8:	0800c585 	.word	0x0800c585
 800c4bc:	0800c585 	.word	0x0800c585
 800c4c0:	0800c585 	.word	0x0800c585
 800c4c4:	0800c585 	.word	0x0800c585
 800c4c8:	0800c585 	.word	0x0800c585
 800c4cc:	0800c585 	.word	0x0800c585
 800c4d0:	0800c55d 	.word	0x0800c55d
 800c4d4:	0800c585 	.word	0x0800c585
 800c4d8:	0800c585 	.word	0x0800c585
 800c4dc:	0800c585 	.word	0x0800c585
 800c4e0:	0800c585 	.word	0x0800c585
 800c4e4:	0800c585 	.word	0x0800c585
 800c4e8:	0800c585 	.word	0x0800c585
 800c4ec:	0800c585 	.word	0x0800c585
 800c4f0:	0800c565 	.word	0x0800c565
 800c4f4:	0800c585 	.word	0x0800c585
 800c4f8:	0800c585 	.word	0x0800c585
 800c4fc:	0800c585 	.word	0x0800c585
 800c500:	0800c585 	.word	0x0800c585
 800c504:	0800c585 	.word	0x0800c585
 800c508:	0800c585 	.word	0x0800c585
 800c50c:	0800c585 	.word	0x0800c585
 800c510:	0800c56d 	.word	0x0800c56d
 800c514:	0800c585 	.word	0x0800c585
 800c518:	0800c585 	.word	0x0800c585
 800c51c:	0800c585 	.word	0x0800c585
 800c520:	0800c585 	.word	0x0800c585
 800c524:	0800c585 	.word	0x0800c585
 800c528:	0800c585 	.word	0x0800c585
 800c52c:	0800c585 	.word	0x0800c585
 800c530:	0800c575 	.word	0x0800c575
 800c534:	0800c585 	.word	0x0800c585
 800c538:	0800c585 	.word	0x0800c585
 800c53c:	0800c585 	.word	0x0800c585
 800c540:	0800c585 	.word	0x0800c585
 800c544:	0800c585 	.word	0x0800c585
 800c548:	0800c585 	.word	0x0800c585
 800c54c:	0800c585 	.word	0x0800c585
 800c550:	0800c57d 	.word	0x0800c57d
 800c554:	2301      	movs	r3, #1
 800c556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c55a:	e222      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c55c:	2304      	movs	r3, #4
 800c55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c562:	e21e      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c564:	2308      	movs	r3, #8
 800c566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c56a:	e21a      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c56c:	2310      	movs	r3, #16
 800c56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c572:	e216      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c574:	2320      	movs	r3, #32
 800c576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c57a:	e212      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c57c:	2340      	movs	r3, #64	; 0x40
 800c57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c582:	e20e      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c584:	2380      	movs	r3, #128	; 0x80
 800c586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c58a:	e20a      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a6b      	ldr	r2, [pc, #428]	; (800c740 <UART_SetConfig+0x340>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d130      	bne.n	800c5f8 <UART_SetConfig+0x1f8>
 800c596:	4b69      	ldr	r3, [pc, #420]	; (800c73c <UART_SetConfig+0x33c>)
 800c598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c59a:	f003 0307 	and.w	r3, r3, #7
 800c59e:	2b05      	cmp	r3, #5
 800c5a0:	d826      	bhi.n	800c5f0 <UART_SetConfig+0x1f0>
 800c5a2:	a201      	add	r2, pc, #4	; (adr r2, 800c5a8 <UART_SetConfig+0x1a8>)
 800c5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a8:	0800c5c1 	.word	0x0800c5c1
 800c5ac:	0800c5c9 	.word	0x0800c5c9
 800c5b0:	0800c5d1 	.word	0x0800c5d1
 800c5b4:	0800c5d9 	.word	0x0800c5d9
 800c5b8:	0800c5e1 	.word	0x0800c5e1
 800c5bc:	0800c5e9 	.word	0x0800c5e9
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5c6:	e1ec      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c5c8:	2304      	movs	r3, #4
 800c5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ce:	e1e8      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c5d0:	2308      	movs	r3, #8
 800c5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5d6:	e1e4      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c5d8:	2310      	movs	r3, #16
 800c5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5de:	e1e0      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c5e0:	2320      	movs	r3, #32
 800c5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5e6:	e1dc      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c5e8:	2340      	movs	r3, #64	; 0x40
 800c5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ee:	e1d8      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c5f0:	2380      	movs	r3, #128	; 0x80
 800c5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5f6:	e1d4      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a51      	ldr	r2, [pc, #324]	; (800c744 <UART_SetConfig+0x344>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d130      	bne.n	800c664 <UART_SetConfig+0x264>
 800c602:	4b4e      	ldr	r3, [pc, #312]	; (800c73c <UART_SetConfig+0x33c>)
 800c604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c606:	f003 0307 	and.w	r3, r3, #7
 800c60a:	2b05      	cmp	r3, #5
 800c60c:	d826      	bhi.n	800c65c <UART_SetConfig+0x25c>
 800c60e:	a201      	add	r2, pc, #4	; (adr r2, 800c614 <UART_SetConfig+0x214>)
 800c610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c614:	0800c62d 	.word	0x0800c62d
 800c618:	0800c635 	.word	0x0800c635
 800c61c:	0800c63d 	.word	0x0800c63d
 800c620:	0800c645 	.word	0x0800c645
 800c624:	0800c64d 	.word	0x0800c64d
 800c628:	0800c655 	.word	0x0800c655
 800c62c:	2300      	movs	r3, #0
 800c62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c632:	e1b6      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c634:	2304      	movs	r3, #4
 800c636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c63a:	e1b2      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c63c:	2308      	movs	r3, #8
 800c63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c642:	e1ae      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c644:	2310      	movs	r3, #16
 800c646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c64a:	e1aa      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c64c:	2320      	movs	r3, #32
 800c64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c652:	e1a6      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c654:	2340      	movs	r3, #64	; 0x40
 800c656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c65a:	e1a2      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c65c:	2380      	movs	r3, #128	; 0x80
 800c65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c662:	e19e      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a37      	ldr	r2, [pc, #220]	; (800c748 <UART_SetConfig+0x348>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d130      	bne.n	800c6d0 <UART_SetConfig+0x2d0>
 800c66e:	4b33      	ldr	r3, [pc, #204]	; (800c73c <UART_SetConfig+0x33c>)
 800c670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c672:	f003 0307 	and.w	r3, r3, #7
 800c676:	2b05      	cmp	r3, #5
 800c678:	d826      	bhi.n	800c6c8 <UART_SetConfig+0x2c8>
 800c67a:	a201      	add	r2, pc, #4	; (adr r2, 800c680 <UART_SetConfig+0x280>)
 800c67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c680:	0800c699 	.word	0x0800c699
 800c684:	0800c6a1 	.word	0x0800c6a1
 800c688:	0800c6a9 	.word	0x0800c6a9
 800c68c:	0800c6b1 	.word	0x0800c6b1
 800c690:	0800c6b9 	.word	0x0800c6b9
 800c694:	0800c6c1 	.word	0x0800c6c1
 800c698:	2300      	movs	r3, #0
 800c69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c69e:	e180      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c6a0:	2304      	movs	r3, #4
 800c6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6a6:	e17c      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c6a8:	2308      	movs	r3, #8
 800c6aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ae:	e178      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c6b0:	2310      	movs	r3, #16
 800c6b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6b6:	e174      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c6b8:	2320      	movs	r3, #32
 800c6ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6be:	e170      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c6c0:	2340      	movs	r3, #64	; 0x40
 800c6c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6c6:	e16c      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c6c8:	2380      	movs	r3, #128	; 0x80
 800c6ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ce:	e168      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a1d      	ldr	r2, [pc, #116]	; (800c74c <UART_SetConfig+0x34c>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d142      	bne.n	800c760 <UART_SetConfig+0x360>
 800c6da:	4b18      	ldr	r3, [pc, #96]	; (800c73c <UART_SetConfig+0x33c>)
 800c6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6de:	f003 0307 	and.w	r3, r3, #7
 800c6e2:	2b05      	cmp	r3, #5
 800c6e4:	d838      	bhi.n	800c758 <UART_SetConfig+0x358>
 800c6e6:	a201      	add	r2, pc, #4	; (adr r2, 800c6ec <UART_SetConfig+0x2ec>)
 800c6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ec:	0800c705 	.word	0x0800c705
 800c6f0:	0800c70d 	.word	0x0800c70d
 800c6f4:	0800c715 	.word	0x0800c715
 800c6f8:	0800c71d 	.word	0x0800c71d
 800c6fc:	0800c725 	.word	0x0800c725
 800c700:	0800c751 	.word	0x0800c751
 800c704:	2300      	movs	r3, #0
 800c706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c70a:	e14a      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c70c:	2304      	movs	r3, #4
 800c70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c712:	e146      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c714:	2308      	movs	r3, #8
 800c716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c71a:	e142      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c71c:	2310      	movs	r3, #16
 800c71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c722:	e13e      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c724:	2320      	movs	r3, #32
 800c726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c72a:	e13a      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c72c:	cfff69f3 	.word	0xcfff69f3
 800c730:	58000c00 	.word	0x58000c00
 800c734:	11fff4ff 	.word	0x11fff4ff
 800c738:	40011000 	.word	0x40011000
 800c73c:	58024400 	.word	0x58024400
 800c740:	40004400 	.word	0x40004400
 800c744:	40004800 	.word	0x40004800
 800c748:	40004c00 	.word	0x40004c00
 800c74c:	40005000 	.word	0x40005000
 800c750:	2340      	movs	r3, #64	; 0x40
 800c752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c756:	e124      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c758:	2380      	movs	r3, #128	; 0x80
 800c75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c75e:	e120      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4acc      	ldr	r2, [pc, #816]	; (800ca98 <UART_SetConfig+0x698>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d176      	bne.n	800c858 <UART_SetConfig+0x458>
 800c76a:	4bcc      	ldr	r3, [pc, #816]	; (800ca9c <UART_SetConfig+0x69c>)
 800c76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c76e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c772:	2b28      	cmp	r3, #40	; 0x28
 800c774:	d86c      	bhi.n	800c850 <UART_SetConfig+0x450>
 800c776:	a201      	add	r2, pc, #4	; (adr r2, 800c77c <UART_SetConfig+0x37c>)
 800c778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c77c:	0800c821 	.word	0x0800c821
 800c780:	0800c851 	.word	0x0800c851
 800c784:	0800c851 	.word	0x0800c851
 800c788:	0800c851 	.word	0x0800c851
 800c78c:	0800c851 	.word	0x0800c851
 800c790:	0800c851 	.word	0x0800c851
 800c794:	0800c851 	.word	0x0800c851
 800c798:	0800c851 	.word	0x0800c851
 800c79c:	0800c829 	.word	0x0800c829
 800c7a0:	0800c851 	.word	0x0800c851
 800c7a4:	0800c851 	.word	0x0800c851
 800c7a8:	0800c851 	.word	0x0800c851
 800c7ac:	0800c851 	.word	0x0800c851
 800c7b0:	0800c851 	.word	0x0800c851
 800c7b4:	0800c851 	.word	0x0800c851
 800c7b8:	0800c851 	.word	0x0800c851
 800c7bc:	0800c831 	.word	0x0800c831
 800c7c0:	0800c851 	.word	0x0800c851
 800c7c4:	0800c851 	.word	0x0800c851
 800c7c8:	0800c851 	.word	0x0800c851
 800c7cc:	0800c851 	.word	0x0800c851
 800c7d0:	0800c851 	.word	0x0800c851
 800c7d4:	0800c851 	.word	0x0800c851
 800c7d8:	0800c851 	.word	0x0800c851
 800c7dc:	0800c839 	.word	0x0800c839
 800c7e0:	0800c851 	.word	0x0800c851
 800c7e4:	0800c851 	.word	0x0800c851
 800c7e8:	0800c851 	.word	0x0800c851
 800c7ec:	0800c851 	.word	0x0800c851
 800c7f0:	0800c851 	.word	0x0800c851
 800c7f4:	0800c851 	.word	0x0800c851
 800c7f8:	0800c851 	.word	0x0800c851
 800c7fc:	0800c841 	.word	0x0800c841
 800c800:	0800c851 	.word	0x0800c851
 800c804:	0800c851 	.word	0x0800c851
 800c808:	0800c851 	.word	0x0800c851
 800c80c:	0800c851 	.word	0x0800c851
 800c810:	0800c851 	.word	0x0800c851
 800c814:	0800c851 	.word	0x0800c851
 800c818:	0800c851 	.word	0x0800c851
 800c81c:	0800c849 	.word	0x0800c849
 800c820:	2301      	movs	r3, #1
 800c822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c826:	e0bc      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c828:	2304      	movs	r3, #4
 800c82a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c82e:	e0b8      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c830:	2308      	movs	r3, #8
 800c832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c836:	e0b4      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c838:	2310      	movs	r3, #16
 800c83a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c83e:	e0b0      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c840:	2320      	movs	r3, #32
 800c842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c846:	e0ac      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c848:	2340      	movs	r3, #64	; 0x40
 800c84a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c84e:	e0a8      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c850:	2380      	movs	r3, #128	; 0x80
 800c852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c856:	e0a4      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a90      	ldr	r2, [pc, #576]	; (800caa0 <UART_SetConfig+0x6a0>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d130      	bne.n	800c8c4 <UART_SetConfig+0x4c4>
 800c862:	4b8e      	ldr	r3, [pc, #568]	; (800ca9c <UART_SetConfig+0x69c>)
 800c864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	2b05      	cmp	r3, #5
 800c86c:	d826      	bhi.n	800c8bc <UART_SetConfig+0x4bc>
 800c86e:	a201      	add	r2, pc, #4	; (adr r2, 800c874 <UART_SetConfig+0x474>)
 800c870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c874:	0800c88d 	.word	0x0800c88d
 800c878:	0800c895 	.word	0x0800c895
 800c87c:	0800c89d 	.word	0x0800c89d
 800c880:	0800c8a5 	.word	0x0800c8a5
 800c884:	0800c8ad 	.word	0x0800c8ad
 800c888:	0800c8b5 	.word	0x0800c8b5
 800c88c:	2300      	movs	r3, #0
 800c88e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c892:	e086      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c894:	2304      	movs	r3, #4
 800c896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c89a:	e082      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c89c:	2308      	movs	r3, #8
 800c89e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8a2:	e07e      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c8a4:	2310      	movs	r3, #16
 800c8a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8aa:	e07a      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c8ac:	2320      	movs	r3, #32
 800c8ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8b2:	e076      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c8b4:	2340      	movs	r3, #64	; 0x40
 800c8b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8ba:	e072      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c8bc:	2380      	movs	r3, #128	; 0x80
 800c8be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8c2:	e06e      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a76      	ldr	r2, [pc, #472]	; (800caa4 <UART_SetConfig+0x6a4>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d130      	bne.n	800c930 <UART_SetConfig+0x530>
 800c8ce:	4b73      	ldr	r3, [pc, #460]	; (800ca9c <UART_SetConfig+0x69c>)
 800c8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8d2:	f003 0307 	and.w	r3, r3, #7
 800c8d6:	2b05      	cmp	r3, #5
 800c8d8:	d826      	bhi.n	800c928 <UART_SetConfig+0x528>
 800c8da:	a201      	add	r2, pc, #4	; (adr r2, 800c8e0 <UART_SetConfig+0x4e0>)
 800c8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e0:	0800c8f9 	.word	0x0800c8f9
 800c8e4:	0800c901 	.word	0x0800c901
 800c8e8:	0800c909 	.word	0x0800c909
 800c8ec:	0800c911 	.word	0x0800c911
 800c8f0:	0800c919 	.word	0x0800c919
 800c8f4:	0800c921 	.word	0x0800c921
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c8fe:	e050      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c900:	2304      	movs	r3, #4
 800c902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c906:	e04c      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c908:	2308      	movs	r3, #8
 800c90a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c90e:	e048      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c910:	2310      	movs	r3, #16
 800c912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c916:	e044      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c918:	2320      	movs	r3, #32
 800c91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c91e:	e040      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c920:	2340      	movs	r3, #64	; 0x40
 800c922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c926:	e03c      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c928:	2380      	movs	r3, #128	; 0x80
 800c92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c92e:	e038      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a5c      	ldr	r2, [pc, #368]	; (800caa8 <UART_SetConfig+0x6a8>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d130      	bne.n	800c99c <UART_SetConfig+0x59c>
 800c93a:	4b58      	ldr	r3, [pc, #352]	; (800ca9c <UART_SetConfig+0x69c>)
 800c93c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c93e:	f003 0307 	and.w	r3, r3, #7
 800c942:	2b05      	cmp	r3, #5
 800c944:	d826      	bhi.n	800c994 <UART_SetConfig+0x594>
 800c946:	a201      	add	r2, pc, #4	; (adr r2, 800c94c <UART_SetConfig+0x54c>)
 800c948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94c:	0800c965 	.word	0x0800c965
 800c950:	0800c96d 	.word	0x0800c96d
 800c954:	0800c975 	.word	0x0800c975
 800c958:	0800c97d 	.word	0x0800c97d
 800c95c:	0800c985 	.word	0x0800c985
 800c960:	0800c98d 	.word	0x0800c98d
 800c964:	2302      	movs	r3, #2
 800c966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c96a:	e01a      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c96c:	2304      	movs	r3, #4
 800c96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c972:	e016      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c974:	2308      	movs	r3, #8
 800c976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c97a:	e012      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c97c:	2310      	movs	r3, #16
 800c97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c982:	e00e      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c984:	2320      	movs	r3, #32
 800c986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c98a:	e00a      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c98c:	2340      	movs	r3, #64	; 0x40
 800c98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c992:	e006      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c994:	2380      	movs	r3, #128	; 0x80
 800c996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99a:	e002      	b.n	800c9a2 <UART_SetConfig+0x5a2>
 800c99c:	2380      	movs	r3, #128	; 0x80
 800c99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4a40      	ldr	r2, [pc, #256]	; (800caa8 <UART_SetConfig+0x6a8>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	f040 80ef 	bne.w	800cb8c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c9ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c9b2:	2b20      	cmp	r3, #32
 800c9b4:	dc46      	bgt.n	800ca44 <UART_SetConfig+0x644>
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	f2c0 8081 	blt.w	800cabe <UART_SetConfig+0x6be>
 800c9bc:	3b02      	subs	r3, #2
 800c9be:	2b1e      	cmp	r3, #30
 800c9c0:	d87d      	bhi.n	800cabe <UART_SetConfig+0x6be>
 800c9c2:	a201      	add	r2, pc, #4	; (adr r2, 800c9c8 <UART_SetConfig+0x5c8>)
 800c9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9c8:	0800ca4b 	.word	0x0800ca4b
 800c9cc:	0800cabf 	.word	0x0800cabf
 800c9d0:	0800ca53 	.word	0x0800ca53
 800c9d4:	0800cabf 	.word	0x0800cabf
 800c9d8:	0800cabf 	.word	0x0800cabf
 800c9dc:	0800cabf 	.word	0x0800cabf
 800c9e0:	0800ca63 	.word	0x0800ca63
 800c9e4:	0800cabf 	.word	0x0800cabf
 800c9e8:	0800cabf 	.word	0x0800cabf
 800c9ec:	0800cabf 	.word	0x0800cabf
 800c9f0:	0800cabf 	.word	0x0800cabf
 800c9f4:	0800cabf 	.word	0x0800cabf
 800c9f8:	0800cabf 	.word	0x0800cabf
 800c9fc:	0800cabf 	.word	0x0800cabf
 800ca00:	0800ca73 	.word	0x0800ca73
 800ca04:	0800cabf 	.word	0x0800cabf
 800ca08:	0800cabf 	.word	0x0800cabf
 800ca0c:	0800cabf 	.word	0x0800cabf
 800ca10:	0800cabf 	.word	0x0800cabf
 800ca14:	0800cabf 	.word	0x0800cabf
 800ca18:	0800cabf 	.word	0x0800cabf
 800ca1c:	0800cabf 	.word	0x0800cabf
 800ca20:	0800cabf 	.word	0x0800cabf
 800ca24:	0800cabf 	.word	0x0800cabf
 800ca28:	0800cabf 	.word	0x0800cabf
 800ca2c:	0800cabf 	.word	0x0800cabf
 800ca30:	0800cabf 	.word	0x0800cabf
 800ca34:	0800cabf 	.word	0x0800cabf
 800ca38:	0800cabf 	.word	0x0800cabf
 800ca3c:	0800cabf 	.word	0x0800cabf
 800ca40:	0800cab1 	.word	0x0800cab1
 800ca44:	2b40      	cmp	r3, #64	; 0x40
 800ca46:	d036      	beq.n	800cab6 <UART_SetConfig+0x6b6>
 800ca48:	e039      	b.n	800cabe <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ca4a:	f7fd f8f9 	bl	8009c40 <HAL_RCCEx_GetD3PCLK1Freq>
 800ca4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca50:	e03b      	b.n	800caca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca52:	f107 0314 	add.w	r3, r7, #20
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fd f908 	bl	8009c6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca5c:	69bb      	ldr	r3, [r7, #24]
 800ca5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca60:	e033      	b.n	800caca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca62:	f107 0308 	add.w	r3, r7, #8
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fd fa54 	bl	8009f14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca70:	e02b      	b.n	800caca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca72:	4b0a      	ldr	r3, [pc, #40]	; (800ca9c <UART_SetConfig+0x69c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 0320 	and.w	r3, r3, #32
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d009      	beq.n	800ca92 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca7e:	4b07      	ldr	r3, [pc, #28]	; (800ca9c <UART_SetConfig+0x69c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	08db      	lsrs	r3, r3, #3
 800ca84:	f003 0303 	and.w	r3, r3, #3
 800ca88:	4a08      	ldr	r2, [pc, #32]	; (800caac <UART_SetConfig+0x6ac>)
 800ca8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca90:	e01b      	b.n	800caca <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ca92:	4b06      	ldr	r3, [pc, #24]	; (800caac <UART_SetConfig+0x6ac>)
 800ca94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ca96:	e018      	b.n	800caca <UART_SetConfig+0x6ca>
 800ca98:	40011400 	.word	0x40011400
 800ca9c:	58024400 	.word	0x58024400
 800caa0:	40007800 	.word	0x40007800
 800caa4:	40007c00 	.word	0x40007c00
 800caa8:	58000c00 	.word	0x58000c00
 800caac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cab0:	4bc4      	ldr	r3, [pc, #784]	; (800cdc4 <UART_SetConfig+0x9c4>)
 800cab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cab4:	e009      	b.n	800caca <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800caba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cabc:	e005      	b.n	800caca <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800cabe:	2300      	movs	r3, #0
 800cac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cac8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800caca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f000 81da 	beq.w	800ce86 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad6:	4abc      	ldr	r2, [pc, #752]	; (800cdc8 <UART_SetConfig+0x9c8>)
 800cad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cadc:	461a      	mov	r2, r3
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cae4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	4613      	mov	r3, r2
 800caec:	005b      	lsls	r3, r3, #1
 800caee:	4413      	add	r3, r2
 800caf0:	6a3a      	ldr	r2, [r7, #32]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d305      	bcc.n	800cb02 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cafc:	6a3a      	ldr	r2, [r7, #32]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d903      	bls.n	800cb0a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cb08:	e1bd      	b.n	800ce86 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f04f 0100 	mov.w	r1, #0
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb16:	4aac      	ldr	r2, [pc, #688]	; (800cdc8 <UART_SetConfig+0x9c8>)
 800cb18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	f04f 0300 	mov.w	r3, #0
 800cb22:	f7f3 fc35 	bl	8000390 <__aeabi_uldivmod>
 800cb26:	4602      	mov	r2, r0
 800cb28:	460b      	mov	r3, r1
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f04f 0200 	mov.w	r2, #0
 800cb32:	f04f 0300 	mov.w	r3, #0
 800cb36:	020b      	lsls	r3, r1, #8
 800cb38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cb3c:	0202      	lsls	r2, r0, #8
 800cb3e:	6879      	ldr	r1, [r7, #4]
 800cb40:	6849      	ldr	r1, [r1, #4]
 800cb42:	0849      	lsrs	r1, r1, #1
 800cb44:	4608      	mov	r0, r1
 800cb46:	f04f 0100 	mov.w	r1, #0
 800cb4a:	1814      	adds	r4, r2, r0
 800cb4c:	eb43 0501 	adc.w	r5, r3, r1
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	461a      	mov	r2, r3
 800cb56:	f04f 0300 	mov.w	r3, #0
 800cb5a:	4620      	mov	r0, r4
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	f7f3 fc17 	bl	8000390 <__aeabi_uldivmod>
 800cb62:	4602      	mov	r2, r0
 800cb64:	460b      	mov	r3, r1
 800cb66:	4613      	mov	r3, r2
 800cb68:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb70:	d308      	bcc.n	800cb84 <UART_SetConfig+0x784>
 800cb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb78:	d204      	bcs.n	800cb84 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb80:	60da      	str	r2, [r3, #12]
 800cb82:	e180      	b.n	800ce86 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800cb84:	2301      	movs	r3, #1
 800cb86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cb8a:	e17c      	b.n	800ce86 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	69db      	ldr	r3, [r3, #28]
 800cb90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb94:	f040 80bf 	bne.w	800cd16 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800cb98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb9c:	2b20      	cmp	r3, #32
 800cb9e:	dc49      	bgt.n	800cc34 <UART_SetConfig+0x834>
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	db7c      	blt.n	800cc9e <UART_SetConfig+0x89e>
 800cba4:	2b20      	cmp	r3, #32
 800cba6:	d87a      	bhi.n	800cc9e <UART_SetConfig+0x89e>
 800cba8:	a201      	add	r2, pc, #4	; (adr r2, 800cbb0 <UART_SetConfig+0x7b0>)
 800cbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbae:	bf00      	nop
 800cbb0:	0800cc3b 	.word	0x0800cc3b
 800cbb4:	0800cc43 	.word	0x0800cc43
 800cbb8:	0800cc9f 	.word	0x0800cc9f
 800cbbc:	0800cc9f 	.word	0x0800cc9f
 800cbc0:	0800cc4b 	.word	0x0800cc4b
 800cbc4:	0800cc9f 	.word	0x0800cc9f
 800cbc8:	0800cc9f 	.word	0x0800cc9f
 800cbcc:	0800cc9f 	.word	0x0800cc9f
 800cbd0:	0800cc5b 	.word	0x0800cc5b
 800cbd4:	0800cc9f 	.word	0x0800cc9f
 800cbd8:	0800cc9f 	.word	0x0800cc9f
 800cbdc:	0800cc9f 	.word	0x0800cc9f
 800cbe0:	0800cc9f 	.word	0x0800cc9f
 800cbe4:	0800cc9f 	.word	0x0800cc9f
 800cbe8:	0800cc9f 	.word	0x0800cc9f
 800cbec:	0800cc9f 	.word	0x0800cc9f
 800cbf0:	0800cc6b 	.word	0x0800cc6b
 800cbf4:	0800cc9f 	.word	0x0800cc9f
 800cbf8:	0800cc9f 	.word	0x0800cc9f
 800cbfc:	0800cc9f 	.word	0x0800cc9f
 800cc00:	0800cc9f 	.word	0x0800cc9f
 800cc04:	0800cc9f 	.word	0x0800cc9f
 800cc08:	0800cc9f 	.word	0x0800cc9f
 800cc0c:	0800cc9f 	.word	0x0800cc9f
 800cc10:	0800cc9f 	.word	0x0800cc9f
 800cc14:	0800cc9f 	.word	0x0800cc9f
 800cc18:	0800cc9f 	.word	0x0800cc9f
 800cc1c:	0800cc9f 	.word	0x0800cc9f
 800cc20:	0800cc9f 	.word	0x0800cc9f
 800cc24:	0800cc9f 	.word	0x0800cc9f
 800cc28:	0800cc9f 	.word	0x0800cc9f
 800cc2c:	0800cc9f 	.word	0x0800cc9f
 800cc30:	0800cc91 	.word	0x0800cc91
 800cc34:	2b40      	cmp	r3, #64	; 0x40
 800cc36:	d02e      	beq.n	800cc96 <UART_SetConfig+0x896>
 800cc38:	e031      	b.n	800cc9e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc3a:	f7fc f895 	bl	8008d68 <HAL_RCC_GetPCLK1Freq>
 800cc3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc40:	e033      	b.n	800ccaa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc42:	f7fc f8a7 	bl	8008d94 <HAL_RCC_GetPCLK2Freq>
 800cc46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc48:	e02f      	b.n	800ccaa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc4a:	f107 0314 	add.w	r3, r7, #20
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7fd f80c 	bl	8009c6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc58:	e027      	b.n	800ccaa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc5a:	f107 0308 	add.w	r3, r7, #8
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7fd f958 	bl	8009f14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc68:	e01f      	b.n	800ccaa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc6a:	4b58      	ldr	r3, [pc, #352]	; (800cdcc <UART_SetConfig+0x9cc>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f003 0320 	and.w	r3, r3, #32
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d009      	beq.n	800cc8a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cc76:	4b55      	ldr	r3, [pc, #340]	; (800cdcc <UART_SetConfig+0x9cc>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	08db      	lsrs	r3, r3, #3
 800cc7c:	f003 0303 	and.w	r3, r3, #3
 800cc80:	4a53      	ldr	r2, [pc, #332]	; (800cdd0 <UART_SetConfig+0x9d0>)
 800cc82:	fa22 f303 	lsr.w	r3, r2, r3
 800cc86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc88:	e00f      	b.n	800ccaa <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800cc8a:	4b51      	ldr	r3, [pc, #324]	; (800cdd0 <UART_SetConfig+0x9d0>)
 800cc8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc8e:	e00c      	b.n	800ccaa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc90:	4b4c      	ldr	r3, [pc, #304]	; (800cdc4 <UART_SetConfig+0x9c4>)
 800cc92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc94:	e009      	b.n	800ccaa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cc9c:	e005      	b.n	800ccaa <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cca2:	2301      	movs	r3, #1
 800cca4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cca8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ccaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 80ea 	beq.w	800ce86 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb6:	4a44      	ldr	r2, [pc, #272]	; (800cdc8 <UART_SetConfig+0x9c8>)
 800ccb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccc4:	005a      	lsls	r2, r3, #1
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	085b      	lsrs	r3, r3, #1
 800cccc:	441a      	add	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccdc:	2b0f      	cmp	r3, #15
 800ccde:	d916      	bls.n	800cd0e <UART_SetConfig+0x90e>
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cce6:	d212      	bcs.n	800cd0e <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	f023 030f 	bic.w	r3, r3, #15
 800ccf0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ccf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf4:	085b      	lsrs	r3, r3, #1
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	f003 0307 	and.w	r3, r3, #7
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd00:	4313      	orrs	r3, r2
 800cd02:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cd0a:	60da      	str	r2, [r3, #12]
 800cd0c:	e0bb      	b.n	800ce86 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cd14:	e0b7      	b.n	800ce86 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cd16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd1a:	2b20      	cmp	r3, #32
 800cd1c:	dc4a      	bgt.n	800cdb4 <UART_SetConfig+0x9b4>
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	f2c0 8086 	blt.w	800ce30 <UART_SetConfig+0xa30>
 800cd24:	2b20      	cmp	r3, #32
 800cd26:	f200 8083 	bhi.w	800ce30 <UART_SetConfig+0xa30>
 800cd2a:	a201      	add	r2, pc, #4	; (adr r2, 800cd30 <UART_SetConfig+0x930>)
 800cd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd30:	0800cdbb 	.word	0x0800cdbb
 800cd34:	0800cdd5 	.word	0x0800cdd5
 800cd38:	0800ce31 	.word	0x0800ce31
 800cd3c:	0800ce31 	.word	0x0800ce31
 800cd40:	0800cddd 	.word	0x0800cddd
 800cd44:	0800ce31 	.word	0x0800ce31
 800cd48:	0800ce31 	.word	0x0800ce31
 800cd4c:	0800ce31 	.word	0x0800ce31
 800cd50:	0800cded 	.word	0x0800cded
 800cd54:	0800ce31 	.word	0x0800ce31
 800cd58:	0800ce31 	.word	0x0800ce31
 800cd5c:	0800ce31 	.word	0x0800ce31
 800cd60:	0800ce31 	.word	0x0800ce31
 800cd64:	0800ce31 	.word	0x0800ce31
 800cd68:	0800ce31 	.word	0x0800ce31
 800cd6c:	0800ce31 	.word	0x0800ce31
 800cd70:	0800cdfd 	.word	0x0800cdfd
 800cd74:	0800ce31 	.word	0x0800ce31
 800cd78:	0800ce31 	.word	0x0800ce31
 800cd7c:	0800ce31 	.word	0x0800ce31
 800cd80:	0800ce31 	.word	0x0800ce31
 800cd84:	0800ce31 	.word	0x0800ce31
 800cd88:	0800ce31 	.word	0x0800ce31
 800cd8c:	0800ce31 	.word	0x0800ce31
 800cd90:	0800ce31 	.word	0x0800ce31
 800cd94:	0800ce31 	.word	0x0800ce31
 800cd98:	0800ce31 	.word	0x0800ce31
 800cd9c:	0800ce31 	.word	0x0800ce31
 800cda0:	0800ce31 	.word	0x0800ce31
 800cda4:	0800ce31 	.word	0x0800ce31
 800cda8:	0800ce31 	.word	0x0800ce31
 800cdac:	0800ce31 	.word	0x0800ce31
 800cdb0:	0800ce23 	.word	0x0800ce23
 800cdb4:	2b40      	cmp	r3, #64	; 0x40
 800cdb6:	d037      	beq.n	800ce28 <UART_SetConfig+0xa28>
 800cdb8:	e03a      	b.n	800ce30 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cdba:	f7fb ffd5 	bl	8008d68 <HAL_RCC_GetPCLK1Freq>
 800cdbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cdc0:	e03c      	b.n	800ce3c <UART_SetConfig+0xa3c>
 800cdc2:	bf00      	nop
 800cdc4:	003d0900 	.word	0x003d0900
 800cdc8:	08010008 	.word	0x08010008
 800cdcc:	58024400 	.word	0x58024400
 800cdd0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cdd4:	f7fb ffde 	bl	8008d94 <HAL_RCC_GetPCLK2Freq>
 800cdd8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cdda:	e02f      	b.n	800ce3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cddc:	f107 0314 	add.w	r3, r7, #20
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fc ff43 	bl	8009c6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdea:	e027      	b.n	800ce3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdec:	f107 0308 	add.w	r3, r7, #8
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fd f88f 	bl	8009f14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cdfa:	e01f      	b.n	800ce3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdfc:	4b2c      	ldr	r3, [pc, #176]	; (800ceb0 <UART_SetConfig+0xab0>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f003 0320 	and.w	r3, r3, #32
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d009      	beq.n	800ce1c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce08:	4b29      	ldr	r3, [pc, #164]	; (800ceb0 <UART_SetConfig+0xab0>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	08db      	lsrs	r3, r3, #3
 800ce0e:	f003 0303 	and.w	r3, r3, #3
 800ce12:	4a28      	ldr	r2, [pc, #160]	; (800ceb4 <UART_SetConfig+0xab4>)
 800ce14:	fa22 f303 	lsr.w	r3, r2, r3
 800ce18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce1a:	e00f      	b.n	800ce3c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800ce1c:	4b25      	ldr	r3, [pc, #148]	; (800ceb4 <UART_SetConfig+0xab4>)
 800ce1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce20:	e00c      	b.n	800ce3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce22:	4b25      	ldr	r3, [pc, #148]	; (800ceb8 <UART_SetConfig+0xab8>)
 800ce24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce26:	e009      	b.n	800ce3c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce2e:	e005      	b.n	800ce3c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ce30:	2300      	movs	r3, #0
 800ce32:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ce34:	2301      	movs	r3, #1
 800ce36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ce3a:	bf00      	nop
    }

    if (pclk != 0U)
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d021      	beq.n	800ce86 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce46:	4a1d      	ldr	r2, [pc, #116]	; (800cebc <UART_SetConfig+0xabc>)
 800ce48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce50:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	085b      	lsrs	r3, r3, #1
 800ce5a:	441a      	add	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6a:	2b0f      	cmp	r3, #15
 800ce6c:	d908      	bls.n	800ce80 <UART_SetConfig+0xa80>
 800ce6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce74:	d204      	bcs.n	800ce80 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce7c:	60da      	str	r2, [r3, #12]
 800ce7e:	e002      	b.n	800ce86 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800ce80:	2301      	movs	r3, #1
 800ce82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2201      	movs	r2, #1
 800ce92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cea2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3738      	adds	r7, #56	; 0x38
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bdb0      	pop	{r4, r5, r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	58024400 	.word	0x58024400
 800ceb4:	03d09000 	.word	0x03d09000
 800ceb8:	003d0900 	.word	0x003d0900
 800cebc:	08010008 	.word	0x08010008

0800cec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cecc:	f003 0301 	and.w	r3, r3, #1
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00a      	beq.n	800ceea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	430a      	orrs	r2, r1
 800cee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceee:	f003 0302 	and.w	r3, r3, #2
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00a      	beq.n	800cf0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	430a      	orrs	r2, r1
 800cf0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf10:	f003 0304 	and.w	r3, r3, #4
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00a      	beq.n	800cf2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	430a      	orrs	r2, r1
 800cf2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf32:	f003 0308 	and.w	r3, r3, #8
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d00a      	beq.n	800cf50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	430a      	orrs	r2, r1
 800cf4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf54:	f003 0310 	and.w	r3, r3, #16
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00a      	beq.n	800cf72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	430a      	orrs	r2, r1
 800cf70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf76:	f003 0320 	and.w	r3, r3, #32
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00a      	beq.n	800cf94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	430a      	orrs	r2, r1
 800cf92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d01a      	beq.n	800cfd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	430a      	orrs	r2, r1
 800cfb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfbe:	d10a      	bne.n	800cfd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	430a      	orrs	r2, r1
 800cfd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00a      	beq.n	800cff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	430a      	orrs	r2, r1
 800cff6:	605a      	str	r2, [r3, #4]
  }
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af02      	add	r7, sp, #8
 800d00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d014:	f7f5 fb30 	bl	8002678 <HAL_GetTick>
 800d018:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f003 0308 	and.w	r3, r3, #8
 800d024:	2b08      	cmp	r3, #8
 800d026:	d10e      	bne.n	800d046 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2200      	movs	r2, #0
 800d032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f82f 	bl	800d09a <UART_WaitOnFlagUntilTimeout>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e025      	b.n	800d092 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f003 0304 	and.w	r3, r3, #4
 800d050:	2b04      	cmp	r3, #4
 800d052:	d10e      	bne.n	800d072 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d058:	9300      	str	r3, [sp, #0]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f819 	bl	800d09a <UART_WaitOnFlagUntilTimeout>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d06e:	2303      	movs	r3, #3
 800d070:	e00f      	b.n	800d092 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2220      	movs	r2, #32
 800d076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2220      	movs	r2, #32
 800d07e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b084      	sub	sp, #16
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	60f8      	str	r0, [r7, #12]
 800d0a2:	60b9      	str	r1, [r7, #8]
 800d0a4:	603b      	str	r3, [r7, #0]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0aa:	e062      	b.n	800d172 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b2:	d05e      	beq.n	800d172 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0b4:	f7f5 fae0 	bl	8002678 <HAL_GetTick>
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	1ad3      	subs	r3, r2, r3
 800d0be:	69ba      	ldr	r2, [r7, #24]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d302      	bcc.n	800d0ca <UART_WaitOnFlagUntilTimeout+0x30>
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d11d      	bne.n	800d106 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d0d8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	689a      	ldr	r2, [r3, #8]
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f022 0201 	bic.w	r2, r2, #1
 800d0e8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2220      	movs	r2, #32
 800d0ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2220      	movs	r2, #32
 800d0f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d102:	2303      	movs	r3, #3
 800d104:	e045      	b.n	800d192 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f003 0304 	and.w	r3, r3, #4
 800d110:	2b00      	cmp	r3, #0
 800d112:	d02e      	beq.n	800d172 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	69db      	ldr	r3, [r3, #28]
 800d11a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d11e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d122:	d126      	bne.n	800d172 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d12c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d13c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	689a      	ldr	r2, [r3, #8]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f022 0201 	bic.w	r2, r2, #1
 800d14c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2220      	movs	r2, #32
 800d152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2220      	movs	r2, #32
 800d15a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2220      	movs	r2, #32
 800d162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d16e:	2303      	movs	r3, #3
 800d170:	e00f      	b.n	800d192 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	69da      	ldr	r2, [r3, #28]
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	4013      	ands	r3, r2
 800d17c:	68ba      	ldr	r2, [r7, #8]
 800d17e:	429a      	cmp	r2, r3
 800d180:	bf0c      	ite	eq
 800d182:	2301      	moveq	r3, #1
 800d184:	2300      	movne	r3, #0
 800d186:	b2db      	uxtb	r3, r3
 800d188:	461a      	mov	r2, r3
 800d18a:	79fb      	ldrb	r3, [r7, #7]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d08d      	beq.n	800d0ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d19a:	b480      	push	{r7}
 800d19c:	b083      	sub	sp, #12
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d1b0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	689a      	ldr	r2, [r3, #8]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d1c0:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2220      	movs	r2, #32
 800d1c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d1ca:	bf00      	nop
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
	...

0800d1d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d1ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6899      	ldr	r1, [r3, #8]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	4b0f      	ldr	r3, [pc, #60]	; (800d238 <UART_EndRxTransfer+0x60>)
 800d1fc:	400b      	ands	r3, r1
 800d1fe:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d204:	2b01      	cmp	r3, #1
 800d206:	d107      	bne.n	800d218 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	681a      	ldr	r2, [r3, #0]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f022 0210 	bic.w	r2, r2, #16
 800d216:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2220      	movs	r2, #32
 800d21c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d22c:	bf00      	nop
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr
 800d238:	effffffe 	.word	0xeffffffe

0800d23c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d248:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	69db      	ldr	r3, [r3, #28]
 800d24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d252:	d014      	beq.n	800d27e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2200      	movs	r2, #0
 800d258:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	689a      	ldr	r2, [r3, #8]
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d26a:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d27a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d27c:	e002      	b.n	800d284 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f7ff f894 	bl	800c3ac <HAL_UART_TxCpltCallback>
}
 800d284:	bf00      	nop
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d298:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f7ff f890 	bl	800c3c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d2a0:	bf00      	nop
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b086      	sub	sp, #24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	689b      	ldr	r3, [r3, #8]
 800d2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2d0:	2b80      	cmp	r3, #128	; 0x80
 800d2d2:	d109      	bne.n	800d2e8 <UART_DMAError+0x40>
 800d2d4:	693b      	ldr	r3, [r7, #16]
 800d2d6:	2b21      	cmp	r3, #33	; 0x21
 800d2d8:	d106      	bne.n	800d2e8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d2e2:	6978      	ldr	r0, [r7, #20]
 800d2e4:	f7ff ff59 	bl	800d19a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2f2:	2b40      	cmp	r3, #64	; 0x40
 800d2f4:	d109      	bne.n	800d30a <UART_DMAError+0x62>
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2b22      	cmp	r3, #34	; 0x22
 800d2fa:	d106      	bne.n	800d30a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d304:	6978      	ldr	r0, [r7, #20]
 800d306:	f7ff ff67 	bl	800d1d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d310:	f043 0210 	orr.w	r2, r3, #16
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d31a:	6978      	ldr	r0, [r7, #20]
 800d31c:	f7ff f85a 	bl	800c3d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d320:	bf00      	nop
 800d322:	3718      	adds	r7, #24
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d334:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2200      	movs	r2, #0
 800d33a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2200      	movs	r2, #0
 800d342:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d346:	68f8      	ldr	r0, [r7, #12]
 800d348:	f7ff f844 	bl	800c3d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d34c:	bf00      	nop
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d36a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2220      	movs	r2, #32
 800d370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f7ff f816 	bl	800c3ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d380:	bf00      	nop
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d3a4:	bf00      	nop
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d3b8:	bf00      	nop
 800d3ba:	370c      	adds	r7, #12
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b085      	sub	sp, #20
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d101      	bne.n	800d3da <HAL_UARTEx_DisableFifoMode+0x16>
 800d3d6:	2302      	movs	r3, #2
 800d3d8:	e027      	b.n	800d42a <HAL_UARTEx_DisableFifoMode+0x66>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2224      	movs	r2, #36	; 0x24
 800d3e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f022 0201 	bic.w	r2, r2, #1
 800d400:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d408:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2220      	movs	r2, #32
 800d41c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3714      	adds	r7, #20
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr

0800d436 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b084      	sub	sp, #16
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d446:	2b01      	cmp	r3, #1
 800d448:	d101      	bne.n	800d44e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d44a:	2302      	movs	r3, #2
 800d44c:	e02d      	b.n	800d4aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2224      	movs	r2, #36	; 0x24
 800d45a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f022 0201 	bic.w	r2, r2, #1
 800d474:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	683a      	ldr	r2, [r7, #0]
 800d486:	430a      	orrs	r2, r1
 800d488:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f850 	bl	800d530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2220      	movs	r2, #32
 800d49c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3710      	adds	r7, #16
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	bd80      	pop	{r7, pc}

0800d4b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d4b2:	b580      	push	{r7, lr}
 800d4b4:	b084      	sub	sp, #16
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d101      	bne.n	800d4ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d4c6:	2302      	movs	r3, #2
 800d4c8:	e02d      	b.n	800d526 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2224      	movs	r2, #36	; 0x24
 800d4d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f022 0201 	bic.w	r2, r2, #1
 800d4f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	689b      	ldr	r3, [r3, #8]
 800d4f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	683a      	ldr	r2, [r7, #0]
 800d502:	430a      	orrs	r2, r1
 800d504:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f812 	bl	800d530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	68fa      	ldr	r2, [r7, #12]
 800d512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2220      	movs	r2, #32
 800d518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d524:	2300      	movs	r3, #0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
	...

0800d530 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d108      	bne.n	800d552 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2201      	movs	r2, #1
 800d544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d550:	e031      	b.n	800d5b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d552:	2310      	movs	r3, #16
 800d554:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d556:	2310      	movs	r3, #16
 800d558:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	0e5b      	lsrs	r3, r3, #25
 800d562:	b2db      	uxtb	r3, r3
 800d564:	f003 0307 	and.w	r3, r3, #7
 800d568:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	0f5b      	lsrs	r3, r3, #29
 800d572:	b2db      	uxtb	r3, r3
 800d574:	f003 0307 	and.w	r3, r3, #7
 800d578:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d57a:	7bbb      	ldrb	r3, [r7, #14]
 800d57c:	7b3a      	ldrb	r2, [r7, #12]
 800d57e:	4911      	ldr	r1, [pc, #68]	; (800d5c4 <UARTEx_SetNbDataToProcess+0x94>)
 800d580:	5c8a      	ldrb	r2, [r1, r2]
 800d582:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d586:	7b3a      	ldrb	r2, [r7, #12]
 800d588:	490f      	ldr	r1, [pc, #60]	; (800d5c8 <UARTEx_SetNbDataToProcess+0x98>)
 800d58a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d58c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d590:	b29a      	uxth	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d598:	7bfb      	ldrb	r3, [r7, #15]
 800d59a:	7b7a      	ldrb	r2, [r7, #13]
 800d59c:	4909      	ldr	r1, [pc, #36]	; (800d5c4 <UARTEx_SetNbDataToProcess+0x94>)
 800d59e:	5c8a      	ldrb	r2, [r1, r2]
 800d5a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d5a4:	7b7a      	ldrb	r2, [r7, #13]
 800d5a6:	4908      	ldr	r1, [pc, #32]	; (800d5c8 <UARTEx_SetNbDataToProcess+0x98>)
 800d5a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d5aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d5b6:	bf00      	nop
 800d5b8:	3714      	adds	r7, #20
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop
 800d5c4:	08010020 	.word	0x08010020
 800d5c8:	08010028 	.word	0x08010028

0800d5cc <__errno>:
 800d5cc:	4b01      	ldr	r3, [pc, #4]	; (800d5d4 <__errno+0x8>)
 800d5ce:	6818      	ldr	r0, [r3, #0]
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	2400001c 	.word	0x2400001c

0800d5d8 <__libc_init_array>:
 800d5d8:	b570      	push	{r4, r5, r6, lr}
 800d5da:	4d0d      	ldr	r5, [pc, #52]	; (800d610 <__libc_init_array+0x38>)
 800d5dc:	4c0d      	ldr	r4, [pc, #52]	; (800d614 <__libc_init_array+0x3c>)
 800d5de:	1b64      	subs	r4, r4, r5
 800d5e0:	10a4      	asrs	r4, r4, #2
 800d5e2:	2600      	movs	r6, #0
 800d5e4:	42a6      	cmp	r6, r4
 800d5e6:	d109      	bne.n	800d5fc <__libc_init_array+0x24>
 800d5e8:	4d0b      	ldr	r5, [pc, #44]	; (800d618 <__libc_init_array+0x40>)
 800d5ea:	4c0c      	ldr	r4, [pc, #48]	; (800d61c <__libc_init_array+0x44>)
 800d5ec:	f002 fcd4 	bl	800ff98 <_init>
 800d5f0:	1b64      	subs	r4, r4, r5
 800d5f2:	10a4      	asrs	r4, r4, #2
 800d5f4:	2600      	movs	r6, #0
 800d5f6:	42a6      	cmp	r6, r4
 800d5f8:	d105      	bne.n	800d606 <__libc_init_array+0x2e>
 800d5fa:	bd70      	pop	{r4, r5, r6, pc}
 800d5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d600:	4798      	blx	r3
 800d602:	3601      	adds	r6, #1
 800d604:	e7ee      	b.n	800d5e4 <__libc_init_array+0xc>
 800d606:	f855 3b04 	ldr.w	r3, [r5], #4
 800d60a:	4798      	blx	r3
 800d60c:	3601      	adds	r6, #1
 800d60e:	e7f2      	b.n	800d5f6 <__libc_init_array+0x1e>
 800d610:	0801041c 	.word	0x0801041c
 800d614:	0801041c 	.word	0x0801041c
 800d618:	0801041c 	.word	0x0801041c
 800d61c:	08010420 	.word	0x08010420

0800d620 <memset>:
 800d620:	4402      	add	r2, r0
 800d622:	4603      	mov	r3, r0
 800d624:	4293      	cmp	r3, r2
 800d626:	d100      	bne.n	800d62a <memset+0xa>
 800d628:	4770      	bx	lr
 800d62a:	f803 1b01 	strb.w	r1, [r3], #1
 800d62e:	e7f9      	b.n	800d624 <memset+0x4>

0800d630 <__cvt>:
 800d630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d632:	ed2d 8b02 	vpush	{d8}
 800d636:	eeb0 8b40 	vmov.f64	d8, d0
 800d63a:	b085      	sub	sp, #20
 800d63c:	4617      	mov	r7, r2
 800d63e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d640:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d642:	ee18 2a90 	vmov	r2, s17
 800d646:	f025 0520 	bic.w	r5, r5, #32
 800d64a:	2a00      	cmp	r2, #0
 800d64c:	bfb6      	itet	lt
 800d64e:	222d      	movlt	r2, #45	; 0x2d
 800d650:	2200      	movge	r2, #0
 800d652:	eeb1 8b40 	vneglt.f64	d8, d0
 800d656:	2d46      	cmp	r5, #70	; 0x46
 800d658:	460c      	mov	r4, r1
 800d65a:	701a      	strb	r2, [r3, #0]
 800d65c:	d004      	beq.n	800d668 <__cvt+0x38>
 800d65e:	2d45      	cmp	r5, #69	; 0x45
 800d660:	d100      	bne.n	800d664 <__cvt+0x34>
 800d662:	3401      	adds	r4, #1
 800d664:	2102      	movs	r1, #2
 800d666:	e000      	b.n	800d66a <__cvt+0x3a>
 800d668:	2103      	movs	r1, #3
 800d66a:	ab03      	add	r3, sp, #12
 800d66c:	9301      	str	r3, [sp, #4]
 800d66e:	ab02      	add	r3, sp, #8
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	4622      	mov	r2, r4
 800d674:	4633      	mov	r3, r6
 800d676:	eeb0 0b48 	vmov.f64	d0, d8
 800d67a:	f000 fddd 	bl	800e238 <_dtoa_r>
 800d67e:	2d47      	cmp	r5, #71	; 0x47
 800d680:	d109      	bne.n	800d696 <__cvt+0x66>
 800d682:	07fb      	lsls	r3, r7, #31
 800d684:	d407      	bmi.n	800d696 <__cvt+0x66>
 800d686:	9b03      	ldr	r3, [sp, #12]
 800d688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d68a:	1a1b      	subs	r3, r3, r0
 800d68c:	6013      	str	r3, [r2, #0]
 800d68e:	b005      	add	sp, #20
 800d690:	ecbd 8b02 	vpop	{d8}
 800d694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d696:	2d46      	cmp	r5, #70	; 0x46
 800d698:	eb00 0204 	add.w	r2, r0, r4
 800d69c:	d10c      	bne.n	800d6b8 <__cvt+0x88>
 800d69e:	7803      	ldrb	r3, [r0, #0]
 800d6a0:	2b30      	cmp	r3, #48	; 0x30
 800d6a2:	d107      	bne.n	800d6b4 <__cvt+0x84>
 800d6a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ac:	bf1c      	itt	ne
 800d6ae:	f1c4 0401 	rsbne	r4, r4, #1
 800d6b2:	6034      	strne	r4, [r6, #0]
 800d6b4:	6833      	ldr	r3, [r6, #0]
 800d6b6:	441a      	add	r2, r3
 800d6b8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c0:	bf08      	it	eq
 800d6c2:	9203      	streq	r2, [sp, #12]
 800d6c4:	2130      	movs	r1, #48	; 0x30
 800d6c6:	9b03      	ldr	r3, [sp, #12]
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d2dc      	bcs.n	800d686 <__cvt+0x56>
 800d6cc:	1c5c      	adds	r4, r3, #1
 800d6ce:	9403      	str	r4, [sp, #12]
 800d6d0:	7019      	strb	r1, [r3, #0]
 800d6d2:	e7f8      	b.n	800d6c6 <__cvt+0x96>

0800d6d4 <__exponent>:
 800d6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2900      	cmp	r1, #0
 800d6da:	bfb8      	it	lt
 800d6dc:	4249      	neglt	r1, r1
 800d6de:	f803 2b02 	strb.w	r2, [r3], #2
 800d6e2:	bfb4      	ite	lt
 800d6e4:	222d      	movlt	r2, #45	; 0x2d
 800d6e6:	222b      	movge	r2, #43	; 0x2b
 800d6e8:	2909      	cmp	r1, #9
 800d6ea:	7042      	strb	r2, [r0, #1]
 800d6ec:	dd2a      	ble.n	800d744 <__exponent+0x70>
 800d6ee:	f10d 0407 	add.w	r4, sp, #7
 800d6f2:	46a4      	mov	ip, r4
 800d6f4:	270a      	movs	r7, #10
 800d6f6:	46a6      	mov	lr, r4
 800d6f8:	460a      	mov	r2, r1
 800d6fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800d6fe:	fb07 1516 	mls	r5, r7, r6, r1
 800d702:	3530      	adds	r5, #48	; 0x30
 800d704:	2a63      	cmp	r2, #99	; 0x63
 800d706:	f104 34ff 	add.w	r4, r4, #4294967295
 800d70a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d70e:	4631      	mov	r1, r6
 800d710:	dcf1      	bgt.n	800d6f6 <__exponent+0x22>
 800d712:	3130      	adds	r1, #48	; 0x30
 800d714:	f1ae 0502 	sub.w	r5, lr, #2
 800d718:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d71c:	1c44      	adds	r4, r0, #1
 800d71e:	4629      	mov	r1, r5
 800d720:	4561      	cmp	r1, ip
 800d722:	d30a      	bcc.n	800d73a <__exponent+0x66>
 800d724:	f10d 0209 	add.w	r2, sp, #9
 800d728:	eba2 020e 	sub.w	r2, r2, lr
 800d72c:	4565      	cmp	r5, ip
 800d72e:	bf88      	it	hi
 800d730:	2200      	movhi	r2, #0
 800d732:	4413      	add	r3, r2
 800d734:	1a18      	subs	r0, r3, r0
 800d736:	b003      	add	sp, #12
 800d738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d73a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d73e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d742:	e7ed      	b.n	800d720 <__exponent+0x4c>
 800d744:	2330      	movs	r3, #48	; 0x30
 800d746:	3130      	adds	r1, #48	; 0x30
 800d748:	7083      	strb	r3, [r0, #2]
 800d74a:	70c1      	strb	r1, [r0, #3]
 800d74c:	1d03      	adds	r3, r0, #4
 800d74e:	e7f1      	b.n	800d734 <__exponent+0x60>

0800d750 <_printf_float>:
 800d750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d754:	b08b      	sub	sp, #44	; 0x2c
 800d756:	460c      	mov	r4, r1
 800d758:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d75c:	4616      	mov	r6, r2
 800d75e:	461f      	mov	r7, r3
 800d760:	4605      	mov	r5, r0
 800d762:	f001 fca3 	bl	800f0ac <_localeconv_r>
 800d766:	f8d0 b000 	ldr.w	fp, [r0]
 800d76a:	4658      	mov	r0, fp
 800d76c:	f7f2 fdb8 	bl	80002e0 <strlen>
 800d770:	2300      	movs	r3, #0
 800d772:	9308      	str	r3, [sp, #32]
 800d774:	f8d8 3000 	ldr.w	r3, [r8]
 800d778:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d77c:	6822      	ldr	r2, [r4, #0]
 800d77e:	3307      	adds	r3, #7
 800d780:	f023 0307 	bic.w	r3, r3, #7
 800d784:	f103 0108 	add.w	r1, r3, #8
 800d788:	f8c8 1000 	str.w	r1, [r8]
 800d78c:	4682      	mov	sl, r0
 800d78e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d792:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d796:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d9f8 <_printf_float+0x2a8>
 800d79a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d79e:	eeb0 6bc0 	vabs.f64	d6, d0
 800d7a2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7aa:	dd24      	ble.n	800d7f6 <_printf_float+0xa6>
 800d7ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b4:	d502      	bpl.n	800d7bc <_printf_float+0x6c>
 800d7b6:	232d      	movs	r3, #45	; 0x2d
 800d7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7bc:	4b90      	ldr	r3, [pc, #576]	; (800da00 <_printf_float+0x2b0>)
 800d7be:	4891      	ldr	r0, [pc, #580]	; (800da04 <_printf_float+0x2b4>)
 800d7c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d7c4:	bf94      	ite	ls
 800d7c6:	4698      	movls	r8, r3
 800d7c8:	4680      	movhi	r8, r0
 800d7ca:	2303      	movs	r3, #3
 800d7cc:	6123      	str	r3, [r4, #16]
 800d7ce:	f022 0204 	bic.w	r2, r2, #4
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	6022      	str	r2, [r4, #0]
 800d7d6:	9304      	str	r3, [sp, #16]
 800d7d8:	9700      	str	r7, [sp, #0]
 800d7da:	4633      	mov	r3, r6
 800d7dc:	aa09      	add	r2, sp, #36	; 0x24
 800d7de:	4621      	mov	r1, r4
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	f000 f9d3 	bl	800db8c <_printf_common>
 800d7e6:	3001      	adds	r0, #1
 800d7e8:	f040 808a 	bne.w	800d900 <_printf_float+0x1b0>
 800d7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f0:	b00b      	add	sp, #44	; 0x2c
 800d7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f6:	eeb4 0b40 	vcmp.f64	d0, d0
 800d7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7fe:	d709      	bvc.n	800d814 <_printf_float+0xc4>
 800d800:	ee10 3a90 	vmov	r3, s1
 800d804:	2b00      	cmp	r3, #0
 800d806:	bfbc      	itt	lt
 800d808:	232d      	movlt	r3, #45	; 0x2d
 800d80a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d80e:	487e      	ldr	r0, [pc, #504]	; (800da08 <_printf_float+0x2b8>)
 800d810:	4b7e      	ldr	r3, [pc, #504]	; (800da0c <_printf_float+0x2bc>)
 800d812:	e7d5      	b.n	800d7c0 <_printf_float+0x70>
 800d814:	6863      	ldr	r3, [r4, #4]
 800d816:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d81a:	9104      	str	r1, [sp, #16]
 800d81c:	1c59      	adds	r1, r3, #1
 800d81e:	d13c      	bne.n	800d89a <_printf_float+0x14a>
 800d820:	2306      	movs	r3, #6
 800d822:	6063      	str	r3, [r4, #4]
 800d824:	2300      	movs	r3, #0
 800d826:	9303      	str	r3, [sp, #12]
 800d828:	ab08      	add	r3, sp, #32
 800d82a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d82e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d832:	ab07      	add	r3, sp, #28
 800d834:	6861      	ldr	r1, [r4, #4]
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	6022      	str	r2, [r4, #0]
 800d83a:	f10d 031b 	add.w	r3, sp, #27
 800d83e:	4628      	mov	r0, r5
 800d840:	f7ff fef6 	bl	800d630 <__cvt>
 800d844:	9b04      	ldr	r3, [sp, #16]
 800d846:	9907      	ldr	r1, [sp, #28]
 800d848:	2b47      	cmp	r3, #71	; 0x47
 800d84a:	4680      	mov	r8, r0
 800d84c:	d108      	bne.n	800d860 <_printf_float+0x110>
 800d84e:	1cc8      	adds	r0, r1, #3
 800d850:	db02      	blt.n	800d858 <_printf_float+0x108>
 800d852:	6863      	ldr	r3, [r4, #4]
 800d854:	4299      	cmp	r1, r3
 800d856:	dd41      	ble.n	800d8dc <_printf_float+0x18c>
 800d858:	f1a9 0902 	sub.w	r9, r9, #2
 800d85c:	fa5f f989 	uxtb.w	r9, r9
 800d860:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d864:	d820      	bhi.n	800d8a8 <_printf_float+0x158>
 800d866:	3901      	subs	r1, #1
 800d868:	464a      	mov	r2, r9
 800d86a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d86e:	9107      	str	r1, [sp, #28]
 800d870:	f7ff ff30 	bl	800d6d4 <__exponent>
 800d874:	9a08      	ldr	r2, [sp, #32]
 800d876:	9004      	str	r0, [sp, #16]
 800d878:	1813      	adds	r3, r2, r0
 800d87a:	2a01      	cmp	r2, #1
 800d87c:	6123      	str	r3, [r4, #16]
 800d87e:	dc02      	bgt.n	800d886 <_printf_float+0x136>
 800d880:	6822      	ldr	r2, [r4, #0]
 800d882:	07d2      	lsls	r2, r2, #31
 800d884:	d501      	bpl.n	800d88a <_printf_float+0x13a>
 800d886:	3301      	adds	r3, #1
 800d888:	6123      	str	r3, [r4, #16]
 800d88a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d0a2      	beq.n	800d7d8 <_printf_float+0x88>
 800d892:	232d      	movs	r3, #45	; 0x2d
 800d894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d898:	e79e      	b.n	800d7d8 <_printf_float+0x88>
 800d89a:	9904      	ldr	r1, [sp, #16]
 800d89c:	2947      	cmp	r1, #71	; 0x47
 800d89e:	d1c1      	bne.n	800d824 <_printf_float+0xd4>
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1bf      	bne.n	800d824 <_printf_float+0xd4>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	e7bc      	b.n	800d822 <_printf_float+0xd2>
 800d8a8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d8ac:	d118      	bne.n	800d8e0 <_printf_float+0x190>
 800d8ae:	2900      	cmp	r1, #0
 800d8b0:	6863      	ldr	r3, [r4, #4]
 800d8b2:	dd0b      	ble.n	800d8cc <_printf_float+0x17c>
 800d8b4:	6121      	str	r1, [r4, #16]
 800d8b6:	b913      	cbnz	r3, 800d8be <_printf_float+0x16e>
 800d8b8:	6822      	ldr	r2, [r4, #0]
 800d8ba:	07d0      	lsls	r0, r2, #31
 800d8bc:	d502      	bpl.n	800d8c4 <_printf_float+0x174>
 800d8be:	3301      	adds	r3, #1
 800d8c0:	440b      	add	r3, r1
 800d8c2:	6123      	str	r3, [r4, #16]
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800d8c8:	9304      	str	r3, [sp, #16]
 800d8ca:	e7de      	b.n	800d88a <_printf_float+0x13a>
 800d8cc:	b913      	cbnz	r3, 800d8d4 <_printf_float+0x184>
 800d8ce:	6822      	ldr	r2, [r4, #0]
 800d8d0:	07d2      	lsls	r2, r2, #31
 800d8d2:	d501      	bpl.n	800d8d8 <_printf_float+0x188>
 800d8d4:	3302      	adds	r3, #2
 800d8d6:	e7f4      	b.n	800d8c2 <_printf_float+0x172>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e7f2      	b.n	800d8c2 <_printf_float+0x172>
 800d8dc:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d8e0:	9b08      	ldr	r3, [sp, #32]
 800d8e2:	4299      	cmp	r1, r3
 800d8e4:	db05      	blt.n	800d8f2 <_printf_float+0x1a2>
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	6121      	str	r1, [r4, #16]
 800d8ea:	07d8      	lsls	r0, r3, #31
 800d8ec:	d5ea      	bpl.n	800d8c4 <_printf_float+0x174>
 800d8ee:	1c4b      	adds	r3, r1, #1
 800d8f0:	e7e7      	b.n	800d8c2 <_printf_float+0x172>
 800d8f2:	2900      	cmp	r1, #0
 800d8f4:	bfd4      	ite	le
 800d8f6:	f1c1 0202 	rsble	r2, r1, #2
 800d8fa:	2201      	movgt	r2, #1
 800d8fc:	4413      	add	r3, r2
 800d8fe:	e7e0      	b.n	800d8c2 <_printf_float+0x172>
 800d900:	6823      	ldr	r3, [r4, #0]
 800d902:	055a      	lsls	r2, r3, #21
 800d904:	d407      	bmi.n	800d916 <_printf_float+0x1c6>
 800d906:	6923      	ldr	r3, [r4, #16]
 800d908:	4642      	mov	r2, r8
 800d90a:	4631      	mov	r1, r6
 800d90c:	4628      	mov	r0, r5
 800d90e:	47b8      	blx	r7
 800d910:	3001      	adds	r0, #1
 800d912:	d12a      	bne.n	800d96a <_printf_float+0x21a>
 800d914:	e76a      	b.n	800d7ec <_printf_float+0x9c>
 800d916:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d91a:	f240 80e2 	bls.w	800dae2 <_printf_float+0x392>
 800d91e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d922:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d92a:	d133      	bne.n	800d994 <_printf_float+0x244>
 800d92c:	4a38      	ldr	r2, [pc, #224]	; (800da10 <_printf_float+0x2c0>)
 800d92e:	2301      	movs	r3, #1
 800d930:	4631      	mov	r1, r6
 800d932:	4628      	mov	r0, r5
 800d934:	47b8      	blx	r7
 800d936:	3001      	adds	r0, #1
 800d938:	f43f af58 	beq.w	800d7ec <_printf_float+0x9c>
 800d93c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d940:	429a      	cmp	r2, r3
 800d942:	db02      	blt.n	800d94a <_printf_float+0x1fa>
 800d944:	6823      	ldr	r3, [r4, #0]
 800d946:	07d8      	lsls	r0, r3, #31
 800d948:	d50f      	bpl.n	800d96a <_printf_float+0x21a>
 800d94a:	4653      	mov	r3, sl
 800d94c:	465a      	mov	r2, fp
 800d94e:	4631      	mov	r1, r6
 800d950:	4628      	mov	r0, r5
 800d952:	47b8      	blx	r7
 800d954:	3001      	adds	r0, #1
 800d956:	f43f af49 	beq.w	800d7ec <_printf_float+0x9c>
 800d95a:	f04f 0800 	mov.w	r8, #0
 800d95e:	f104 091a 	add.w	r9, r4, #26
 800d962:	9b08      	ldr	r3, [sp, #32]
 800d964:	3b01      	subs	r3, #1
 800d966:	4543      	cmp	r3, r8
 800d968:	dc09      	bgt.n	800d97e <_printf_float+0x22e>
 800d96a:	6823      	ldr	r3, [r4, #0]
 800d96c:	079b      	lsls	r3, r3, #30
 800d96e:	f100 8108 	bmi.w	800db82 <_printf_float+0x432>
 800d972:	68e0      	ldr	r0, [r4, #12]
 800d974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d976:	4298      	cmp	r0, r3
 800d978:	bfb8      	it	lt
 800d97a:	4618      	movlt	r0, r3
 800d97c:	e738      	b.n	800d7f0 <_printf_float+0xa0>
 800d97e:	2301      	movs	r3, #1
 800d980:	464a      	mov	r2, r9
 800d982:	4631      	mov	r1, r6
 800d984:	4628      	mov	r0, r5
 800d986:	47b8      	blx	r7
 800d988:	3001      	adds	r0, #1
 800d98a:	f43f af2f 	beq.w	800d7ec <_printf_float+0x9c>
 800d98e:	f108 0801 	add.w	r8, r8, #1
 800d992:	e7e6      	b.n	800d962 <_printf_float+0x212>
 800d994:	9b07      	ldr	r3, [sp, #28]
 800d996:	2b00      	cmp	r3, #0
 800d998:	dc3c      	bgt.n	800da14 <_printf_float+0x2c4>
 800d99a:	4a1d      	ldr	r2, [pc, #116]	; (800da10 <_printf_float+0x2c0>)
 800d99c:	2301      	movs	r3, #1
 800d99e:	4631      	mov	r1, r6
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	47b8      	blx	r7
 800d9a4:	3001      	adds	r0, #1
 800d9a6:	f43f af21 	beq.w	800d7ec <_printf_float+0x9c>
 800d9aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d9ae:	4313      	orrs	r3, r2
 800d9b0:	d102      	bne.n	800d9b8 <_printf_float+0x268>
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	07d9      	lsls	r1, r3, #31
 800d9b6:	d5d8      	bpl.n	800d96a <_printf_float+0x21a>
 800d9b8:	4653      	mov	r3, sl
 800d9ba:	465a      	mov	r2, fp
 800d9bc:	4631      	mov	r1, r6
 800d9be:	4628      	mov	r0, r5
 800d9c0:	47b8      	blx	r7
 800d9c2:	3001      	adds	r0, #1
 800d9c4:	f43f af12 	beq.w	800d7ec <_printf_float+0x9c>
 800d9c8:	f04f 0900 	mov.w	r9, #0
 800d9cc:	f104 0a1a 	add.w	sl, r4, #26
 800d9d0:	9b07      	ldr	r3, [sp, #28]
 800d9d2:	425b      	negs	r3, r3
 800d9d4:	454b      	cmp	r3, r9
 800d9d6:	dc01      	bgt.n	800d9dc <_printf_float+0x28c>
 800d9d8:	9b08      	ldr	r3, [sp, #32]
 800d9da:	e795      	b.n	800d908 <_printf_float+0x1b8>
 800d9dc:	2301      	movs	r3, #1
 800d9de:	4652      	mov	r2, sl
 800d9e0:	4631      	mov	r1, r6
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	47b8      	blx	r7
 800d9e6:	3001      	adds	r0, #1
 800d9e8:	f43f af00 	beq.w	800d7ec <_printf_float+0x9c>
 800d9ec:	f109 0901 	add.w	r9, r9, #1
 800d9f0:	e7ee      	b.n	800d9d0 <_printf_float+0x280>
 800d9f2:	bf00      	nop
 800d9f4:	f3af 8000 	nop.w
 800d9f8:	ffffffff 	.word	0xffffffff
 800d9fc:	7fefffff 	.word	0x7fefffff
 800da00:	08010034 	.word	0x08010034
 800da04:	08010038 	.word	0x08010038
 800da08:	08010040 	.word	0x08010040
 800da0c:	0801003c 	.word	0x0801003c
 800da10:	08010044 	.word	0x08010044
 800da14:	9a08      	ldr	r2, [sp, #32]
 800da16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da18:	429a      	cmp	r2, r3
 800da1a:	bfa8      	it	ge
 800da1c:	461a      	movge	r2, r3
 800da1e:	2a00      	cmp	r2, #0
 800da20:	4691      	mov	r9, r2
 800da22:	dc38      	bgt.n	800da96 <_printf_float+0x346>
 800da24:	2300      	movs	r3, #0
 800da26:	9305      	str	r3, [sp, #20]
 800da28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da2c:	f104 021a 	add.w	r2, r4, #26
 800da30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800da32:	9905      	ldr	r1, [sp, #20]
 800da34:	9304      	str	r3, [sp, #16]
 800da36:	eba3 0309 	sub.w	r3, r3, r9
 800da3a:	428b      	cmp	r3, r1
 800da3c:	dc33      	bgt.n	800daa6 <_printf_float+0x356>
 800da3e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800da42:	429a      	cmp	r2, r3
 800da44:	db3c      	blt.n	800dac0 <_printf_float+0x370>
 800da46:	6823      	ldr	r3, [r4, #0]
 800da48:	07da      	lsls	r2, r3, #31
 800da4a:	d439      	bmi.n	800dac0 <_printf_float+0x370>
 800da4c:	9a08      	ldr	r2, [sp, #32]
 800da4e:	9b04      	ldr	r3, [sp, #16]
 800da50:	9907      	ldr	r1, [sp, #28]
 800da52:	1ad3      	subs	r3, r2, r3
 800da54:	eba2 0901 	sub.w	r9, r2, r1
 800da58:	4599      	cmp	r9, r3
 800da5a:	bfa8      	it	ge
 800da5c:	4699      	movge	r9, r3
 800da5e:	f1b9 0f00 	cmp.w	r9, #0
 800da62:	dc35      	bgt.n	800dad0 <_printf_float+0x380>
 800da64:	f04f 0800 	mov.w	r8, #0
 800da68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da6c:	f104 0a1a 	add.w	sl, r4, #26
 800da70:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800da74:	1a9b      	subs	r3, r3, r2
 800da76:	eba3 0309 	sub.w	r3, r3, r9
 800da7a:	4543      	cmp	r3, r8
 800da7c:	f77f af75 	ble.w	800d96a <_printf_float+0x21a>
 800da80:	2301      	movs	r3, #1
 800da82:	4652      	mov	r2, sl
 800da84:	4631      	mov	r1, r6
 800da86:	4628      	mov	r0, r5
 800da88:	47b8      	blx	r7
 800da8a:	3001      	adds	r0, #1
 800da8c:	f43f aeae 	beq.w	800d7ec <_printf_float+0x9c>
 800da90:	f108 0801 	add.w	r8, r8, #1
 800da94:	e7ec      	b.n	800da70 <_printf_float+0x320>
 800da96:	4613      	mov	r3, r2
 800da98:	4631      	mov	r1, r6
 800da9a:	4642      	mov	r2, r8
 800da9c:	4628      	mov	r0, r5
 800da9e:	47b8      	blx	r7
 800daa0:	3001      	adds	r0, #1
 800daa2:	d1bf      	bne.n	800da24 <_printf_float+0x2d4>
 800daa4:	e6a2      	b.n	800d7ec <_printf_float+0x9c>
 800daa6:	2301      	movs	r3, #1
 800daa8:	4631      	mov	r1, r6
 800daaa:	4628      	mov	r0, r5
 800daac:	9204      	str	r2, [sp, #16]
 800daae:	47b8      	blx	r7
 800dab0:	3001      	adds	r0, #1
 800dab2:	f43f ae9b 	beq.w	800d7ec <_printf_float+0x9c>
 800dab6:	9b05      	ldr	r3, [sp, #20]
 800dab8:	9a04      	ldr	r2, [sp, #16]
 800daba:	3301      	adds	r3, #1
 800dabc:	9305      	str	r3, [sp, #20]
 800dabe:	e7b7      	b.n	800da30 <_printf_float+0x2e0>
 800dac0:	4653      	mov	r3, sl
 800dac2:	465a      	mov	r2, fp
 800dac4:	4631      	mov	r1, r6
 800dac6:	4628      	mov	r0, r5
 800dac8:	47b8      	blx	r7
 800daca:	3001      	adds	r0, #1
 800dacc:	d1be      	bne.n	800da4c <_printf_float+0x2fc>
 800dace:	e68d      	b.n	800d7ec <_printf_float+0x9c>
 800dad0:	9a04      	ldr	r2, [sp, #16]
 800dad2:	464b      	mov	r3, r9
 800dad4:	4442      	add	r2, r8
 800dad6:	4631      	mov	r1, r6
 800dad8:	4628      	mov	r0, r5
 800dada:	47b8      	blx	r7
 800dadc:	3001      	adds	r0, #1
 800dade:	d1c1      	bne.n	800da64 <_printf_float+0x314>
 800dae0:	e684      	b.n	800d7ec <_printf_float+0x9c>
 800dae2:	9a08      	ldr	r2, [sp, #32]
 800dae4:	2a01      	cmp	r2, #1
 800dae6:	dc01      	bgt.n	800daec <_printf_float+0x39c>
 800dae8:	07db      	lsls	r3, r3, #31
 800daea:	d537      	bpl.n	800db5c <_printf_float+0x40c>
 800daec:	2301      	movs	r3, #1
 800daee:	4642      	mov	r2, r8
 800daf0:	4631      	mov	r1, r6
 800daf2:	4628      	mov	r0, r5
 800daf4:	47b8      	blx	r7
 800daf6:	3001      	adds	r0, #1
 800daf8:	f43f ae78 	beq.w	800d7ec <_printf_float+0x9c>
 800dafc:	4653      	mov	r3, sl
 800dafe:	465a      	mov	r2, fp
 800db00:	4631      	mov	r1, r6
 800db02:	4628      	mov	r0, r5
 800db04:	47b8      	blx	r7
 800db06:	3001      	adds	r0, #1
 800db08:	f43f ae70 	beq.w	800d7ec <_printf_float+0x9c>
 800db0c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800db10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800db14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db18:	d01b      	beq.n	800db52 <_printf_float+0x402>
 800db1a:	9b08      	ldr	r3, [sp, #32]
 800db1c:	f108 0201 	add.w	r2, r8, #1
 800db20:	3b01      	subs	r3, #1
 800db22:	4631      	mov	r1, r6
 800db24:	4628      	mov	r0, r5
 800db26:	47b8      	blx	r7
 800db28:	3001      	adds	r0, #1
 800db2a:	d10e      	bne.n	800db4a <_printf_float+0x3fa>
 800db2c:	e65e      	b.n	800d7ec <_printf_float+0x9c>
 800db2e:	2301      	movs	r3, #1
 800db30:	464a      	mov	r2, r9
 800db32:	4631      	mov	r1, r6
 800db34:	4628      	mov	r0, r5
 800db36:	47b8      	blx	r7
 800db38:	3001      	adds	r0, #1
 800db3a:	f43f ae57 	beq.w	800d7ec <_printf_float+0x9c>
 800db3e:	f108 0801 	add.w	r8, r8, #1
 800db42:	9b08      	ldr	r3, [sp, #32]
 800db44:	3b01      	subs	r3, #1
 800db46:	4543      	cmp	r3, r8
 800db48:	dcf1      	bgt.n	800db2e <_printf_float+0x3de>
 800db4a:	9b04      	ldr	r3, [sp, #16]
 800db4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800db50:	e6db      	b.n	800d90a <_printf_float+0x1ba>
 800db52:	f04f 0800 	mov.w	r8, #0
 800db56:	f104 091a 	add.w	r9, r4, #26
 800db5a:	e7f2      	b.n	800db42 <_printf_float+0x3f2>
 800db5c:	2301      	movs	r3, #1
 800db5e:	4642      	mov	r2, r8
 800db60:	e7df      	b.n	800db22 <_printf_float+0x3d2>
 800db62:	2301      	movs	r3, #1
 800db64:	464a      	mov	r2, r9
 800db66:	4631      	mov	r1, r6
 800db68:	4628      	mov	r0, r5
 800db6a:	47b8      	blx	r7
 800db6c:	3001      	adds	r0, #1
 800db6e:	f43f ae3d 	beq.w	800d7ec <_printf_float+0x9c>
 800db72:	f108 0801 	add.w	r8, r8, #1
 800db76:	68e3      	ldr	r3, [r4, #12]
 800db78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db7a:	1a5b      	subs	r3, r3, r1
 800db7c:	4543      	cmp	r3, r8
 800db7e:	dcf0      	bgt.n	800db62 <_printf_float+0x412>
 800db80:	e6f7      	b.n	800d972 <_printf_float+0x222>
 800db82:	f04f 0800 	mov.w	r8, #0
 800db86:	f104 0919 	add.w	r9, r4, #25
 800db8a:	e7f4      	b.n	800db76 <_printf_float+0x426>

0800db8c <_printf_common>:
 800db8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db90:	4616      	mov	r6, r2
 800db92:	4699      	mov	r9, r3
 800db94:	688a      	ldr	r2, [r1, #8]
 800db96:	690b      	ldr	r3, [r1, #16]
 800db98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db9c:	4293      	cmp	r3, r2
 800db9e:	bfb8      	it	lt
 800dba0:	4613      	movlt	r3, r2
 800dba2:	6033      	str	r3, [r6, #0]
 800dba4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dba8:	4607      	mov	r7, r0
 800dbaa:	460c      	mov	r4, r1
 800dbac:	b10a      	cbz	r2, 800dbb2 <_printf_common+0x26>
 800dbae:	3301      	adds	r3, #1
 800dbb0:	6033      	str	r3, [r6, #0]
 800dbb2:	6823      	ldr	r3, [r4, #0]
 800dbb4:	0699      	lsls	r1, r3, #26
 800dbb6:	bf42      	ittt	mi
 800dbb8:	6833      	ldrmi	r3, [r6, #0]
 800dbba:	3302      	addmi	r3, #2
 800dbbc:	6033      	strmi	r3, [r6, #0]
 800dbbe:	6825      	ldr	r5, [r4, #0]
 800dbc0:	f015 0506 	ands.w	r5, r5, #6
 800dbc4:	d106      	bne.n	800dbd4 <_printf_common+0x48>
 800dbc6:	f104 0a19 	add.w	sl, r4, #25
 800dbca:	68e3      	ldr	r3, [r4, #12]
 800dbcc:	6832      	ldr	r2, [r6, #0]
 800dbce:	1a9b      	subs	r3, r3, r2
 800dbd0:	42ab      	cmp	r3, r5
 800dbd2:	dc26      	bgt.n	800dc22 <_printf_common+0x96>
 800dbd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dbd8:	1e13      	subs	r3, r2, #0
 800dbda:	6822      	ldr	r2, [r4, #0]
 800dbdc:	bf18      	it	ne
 800dbde:	2301      	movne	r3, #1
 800dbe0:	0692      	lsls	r2, r2, #26
 800dbe2:	d42b      	bmi.n	800dc3c <_printf_common+0xb0>
 800dbe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dbe8:	4649      	mov	r1, r9
 800dbea:	4638      	mov	r0, r7
 800dbec:	47c0      	blx	r8
 800dbee:	3001      	adds	r0, #1
 800dbf0:	d01e      	beq.n	800dc30 <_printf_common+0xa4>
 800dbf2:	6823      	ldr	r3, [r4, #0]
 800dbf4:	68e5      	ldr	r5, [r4, #12]
 800dbf6:	6832      	ldr	r2, [r6, #0]
 800dbf8:	f003 0306 	and.w	r3, r3, #6
 800dbfc:	2b04      	cmp	r3, #4
 800dbfe:	bf08      	it	eq
 800dc00:	1aad      	subeq	r5, r5, r2
 800dc02:	68a3      	ldr	r3, [r4, #8]
 800dc04:	6922      	ldr	r2, [r4, #16]
 800dc06:	bf0c      	ite	eq
 800dc08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc0c:	2500      	movne	r5, #0
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	bfc4      	itt	gt
 800dc12:	1a9b      	subgt	r3, r3, r2
 800dc14:	18ed      	addgt	r5, r5, r3
 800dc16:	2600      	movs	r6, #0
 800dc18:	341a      	adds	r4, #26
 800dc1a:	42b5      	cmp	r5, r6
 800dc1c:	d11a      	bne.n	800dc54 <_printf_common+0xc8>
 800dc1e:	2000      	movs	r0, #0
 800dc20:	e008      	b.n	800dc34 <_printf_common+0xa8>
 800dc22:	2301      	movs	r3, #1
 800dc24:	4652      	mov	r2, sl
 800dc26:	4649      	mov	r1, r9
 800dc28:	4638      	mov	r0, r7
 800dc2a:	47c0      	blx	r8
 800dc2c:	3001      	adds	r0, #1
 800dc2e:	d103      	bne.n	800dc38 <_printf_common+0xac>
 800dc30:	f04f 30ff 	mov.w	r0, #4294967295
 800dc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc38:	3501      	adds	r5, #1
 800dc3a:	e7c6      	b.n	800dbca <_printf_common+0x3e>
 800dc3c:	18e1      	adds	r1, r4, r3
 800dc3e:	1c5a      	adds	r2, r3, #1
 800dc40:	2030      	movs	r0, #48	; 0x30
 800dc42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc46:	4422      	add	r2, r4
 800dc48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc50:	3302      	adds	r3, #2
 800dc52:	e7c7      	b.n	800dbe4 <_printf_common+0x58>
 800dc54:	2301      	movs	r3, #1
 800dc56:	4622      	mov	r2, r4
 800dc58:	4649      	mov	r1, r9
 800dc5a:	4638      	mov	r0, r7
 800dc5c:	47c0      	blx	r8
 800dc5e:	3001      	adds	r0, #1
 800dc60:	d0e6      	beq.n	800dc30 <_printf_common+0xa4>
 800dc62:	3601      	adds	r6, #1
 800dc64:	e7d9      	b.n	800dc1a <_printf_common+0x8e>
	...

0800dc68 <_printf_i>:
 800dc68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc6c:	460c      	mov	r4, r1
 800dc6e:	4691      	mov	r9, r2
 800dc70:	7e27      	ldrb	r7, [r4, #24]
 800dc72:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dc74:	2f78      	cmp	r7, #120	; 0x78
 800dc76:	4680      	mov	r8, r0
 800dc78:	469a      	mov	sl, r3
 800dc7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dc7e:	d807      	bhi.n	800dc90 <_printf_i+0x28>
 800dc80:	2f62      	cmp	r7, #98	; 0x62
 800dc82:	d80a      	bhi.n	800dc9a <_printf_i+0x32>
 800dc84:	2f00      	cmp	r7, #0
 800dc86:	f000 80d8 	beq.w	800de3a <_printf_i+0x1d2>
 800dc8a:	2f58      	cmp	r7, #88	; 0x58
 800dc8c:	f000 80a3 	beq.w	800ddd6 <_printf_i+0x16e>
 800dc90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dc94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc98:	e03a      	b.n	800dd10 <_printf_i+0xa8>
 800dc9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc9e:	2b15      	cmp	r3, #21
 800dca0:	d8f6      	bhi.n	800dc90 <_printf_i+0x28>
 800dca2:	a001      	add	r0, pc, #4	; (adr r0, 800dca8 <_printf_i+0x40>)
 800dca4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800dca8:	0800dd01 	.word	0x0800dd01
 800dcac:	0800dd15 	.word	0x0800dd15
 800dcb0:	0800dc91 	.word	0x0800dc91
 800dcb4:	0800dc91 	.word	0x0800dc91
 800dcb8:	0800dc91 	.word	0x0800dc91
 800dcbc:	0800dc91 	.word	0x0800dc91
 800dcc0:	0800dd15 	.word	0x0800dd15
 800dcc4:	0800dc91 	.word	0x0800dc91
 800dcc8:	0800dc91 	.word	0x0800dc91
 800dccc:	0800dc91 	.word	0x0800dc91
 800dcd0:	0800dc91 	.word	0x0800dc91
 800dcd4:	0800de21 	.word	0x0800de21
 800dcd8:	0800dd45 	.word	0x0800dd45
 800dcdc:	0800de03 	.word	0x0800de03
 800dce0:	0800dc91 	.word	0x0800dc91
 800dce4:	0800dc91 	.word	0x0800dc91
 800dce8:	0800de43 	.word	0x0800de43
 800dcec:	0800dc91 	.word	0x0800dc91
 800dcf0:	0800dd45 	.word	0x0800dd45
 800dcf4:	0800dc91 	.word	0x0800dc91
 800dcf8:	0800dc91 	.word	0x0800dc91
 800dcfc:	0800de0b 	.word	0x0800de0b
 800dd00:	680b      	ldr	r3, [r1, #0]
 800dd02:	1d1a      	adds	r2, r3, #4
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	600a      	str	r2, [r1, #0]
 800dd08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800dd0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dd10:	2301      	movs	r3, #1
 800dd12:	e0a3      	b.n	800de5c <_printf_i+0x1f4>
 800dd14:	6825      	ldr	r5, [r4, #0]
 800dd16:	6808      	ldr	r0, [r1, #0]
 800dd18:	062e      	lsls	r6, r5, #24
 800dd1a:	f100 0304 	add.w	r3, r0, #4
 800dd1e:	d50a      	bpl.n	800dd36 <_printf_i+0xce>
 800dd20:	6805      	ldr	r5, [r0, #0]
 800dd22:	600b      	str	r3, [r1, #0]
 800dd24:	2d00      	cmp	r5, #0
 800dd26:	da03      	bge.n	800dd30 <_printf_i+0xc8>
 800dd28:	232d      	movs	r3, #45	; 0x2d
 800dd2a:	426d      	negs	r5, r5
 800dd2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd30:	485e      	ldr	r0, [pc, #376]	; (800deac <_printf_i+0x244>)
 800dd32:	230a      	movs	r3, #10
 800dd34:	e019      	b.n	800dd6a <_printf_i+0x102>
 800dd36:	f015 0f40 	tst.w	r5, #64	; 0x40
 800dd3a:	6805      	ldr	r5, [r0, #0]
 800dd3c:	600b      	str	r3, [r1, #0]
 800dd3e:	bf18      	it	ne
 800dd40:	b22d      	sxthne	r5, r5
 800dd42:	e7ef      	b.n	800dd24 <_printf_i+0xbc>
 800dd44:	680b      	ldr	r3, [r1, #0]
 800dd46:	6825      	ldr	r5, [r4, #0]
 800dd48:	1d18      	adds	r0, r3, #4
 800dd4a:	6008      	str	r0, [r1, #0]
 800dd4c:	0628      	lsls	r0, r5, #24
 800dd4e:	d501      	bpl.n	800dd54 <_printf_i+0xec>
 800dd50:	681d      	ldr	r5, [r3, #0]
 800dd52:	e002      	b.n	800dd5a <_printf_i+0xf2>
 800dd54:	0669      	lsls	r1, r5, #25
 800dd56:	d5fb      	bpl.n	800dd50 <_printf_i+0xe8>
 800dd58:	881d      	ldrh	r5, [r3, #0]
 800dd5a:	4854      	ldr	r0, [pc, #336]	; (800deac <_printf_i+0x244>)
 800dd5c:	2f6f      	cmp	r7, #111	; 0x6f
 800dd5e:	bf0c      	ite	eq
 800dd60:	2308      	moveq	r3, #8
 800dd62:	230a      	movne	r3, #10
 800dd64:	2100      	movs	r1, #0
 800dd66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd6a:	6866      	ldr	r6, [r4, #4]
 800dd6c:	60a6      	str	r6, [r4, #8]
 800dd6e:	2e00      	cmp	r6, #0
 800dd70:	bfa2      	ittt	ge
 800dd72:	6821      	ldrge	r1, [r4, #0]
 800dd74:	f021 0104 	bicge.w	r1, r1, #4
 800dd78:	6021      	strge	r1, [r4, #0]
 800dd7a:	b90d      	cbnz	r5, 800dd80 <_printf_i+0x118>
 800dd7c:	2e00      	cmp	r6, #0
 800dd7e:	d04d      	beq.n	800de1c <_printf_i+0x1b4>
 800dd80:	4616      	mov	r6, r2
 800dd82:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd86:	fb03 5711 	mls	r7, r3, r1, r5
 800dd8a:	5dc7      	ldrb	r7, [r0, r7]
 800dd8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd90:	462f      	mov	r7, r5
 800dd92:	42bb      	cmp	r3, r7
 800dd94:	460d      	mov	r5, r1
 800dd96:	d9f4      	bls.n	800dd82 <_printf_i+0x11a>
 800dd98:	2b08      	cmp	r3, #8
 800dd9a:	d10b      	bne.n	800ddb4 <_printf_i+0x14c>
 800dd9c:	6823      	ldr	r3, [r4, #0]
 800dd9e:	07df      	lsls	r7, r3, #31
 800dda0:	d508      	bpl.n	800ddb4 <_printf_i+0x14c>
 800dda2:	6923      	ldr	r3, [r4, #16]
 800dda4:	6861      	ldr	r1, [r4, #4]
 800dda6:	4299      	cmp	r1, r3
 800dda8:	bfde      	ittt	le
 800ddaa:	2330      	movle	r3, #48	; 0x30
 800ddac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ddb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ddb4:	1b92      	subs	r2, r2, r6
 800ddb6:	6122      	str	r2, [r4, #16]
 800ddb8:	f8cd a000 	str.w	sl, [sp]
 800ddbc:	464b      	mov	r3, r9
 800ddbe:	aa03      	add	r2, sp, #12
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	4640      	mov	r0, r8
 800ddc4:	f7ff fee2 	bl	800db8c <_printf_common>
 800ddc8:	3001      	adds	r0, #1
 800ddca:	d14c      	bne.n	800de66 <_printf_i+0x1fe>
 800ddcc:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd0:	b004      	add	sp, #16
 800ddd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd6:	4835      	ldr	r0, [pc, #212]	; (800deac <_printf_i+0x244>)
 800ddd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	680e      	ldr	r6, [r1, #0]
 800dde0:	061f      	lsls	r7, r3, #24
 800dde2:	f856 5b04 	ldr.w	r5, [r6], #4
 800dde6:	600e      	str	r6, [r1, #0]
 800dde8:	d514      	bpl.n	800de14 <_printf_i+0x1ac>
 800ddea:	07d9      	lsls	r1, r3, #31
 800ddec:	bf44      	itt	mi
 800ddee:	f043 0320 	orrmi.w	r3, r3, #32
 800ddf2:	6023      	strmi	r3, [r4, #0]
 800ddf4:	b91d      	cbnz	r5, 800ddfe <_printf_i+0x196>
 800ddf6:	6823      	ldr	r3, [r4, #0]
 800ddf8:	f023 0320 	bic.w	r3, r3, #32
 800ddfc:	6023      	str	r3, [r4, #0]
 800ddfe:	2310      	movs	r3, #16
 800de00:	e7b0      	b.n	800dd64 <_printf_i+0xfc>
 800de02:	6823      	ldr	r3, [r4, #0]
 800de04:	f043 0320 	orr.w	r3, r3, #32
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	2378      	movs	r3, #120	; 0x78
 800de0c:	4828      	ldr	r0, [pc, #160]	; (800deb0 <_printf_i+0x248>)
 800de0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de12:	e7e3      	b.n	800dddc <_printf_i+0x174>
 800de14:	065e      	lsls	r6, r3, #25
 800de16:	bf48      	it	mi
 800de18:	b2ad      	uxthmi	r5, r5
 800de1a:	e7e6      	b.n	800ddea <_printf_i+0x182>
 800de1c:	4616      	mov	r6, r2
 800de1e:	e7bb      	b.n	800dd98 <_printf_i+0x130>
 800de20:	680b      	ldr	r3, [r1, #0]
 800de22:	6826      	ldr	r6, [r4, #0]
 800de24:	6960      	ldr	r0, [r4, #20]
 800de26:	1d1d      	adds	r5, r3, #4
 800de28:	600d      	str	r5, [r1, #0]
 800de2a:	0635      	lsls	r5, r6, #24
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	d501      	bpl.n	800de34 <_printf_i+0x1cc>
 800de30:	6018      	str	r0, [r3, #0]
 800de32:	e002      	b.n	800de3a <_printf_i+0x1d2>
 800de34:	0671      	lsls	r1, r6, #25
 800de36:	d5fb      	bpl.n	800de30 <_printf_i+0x1c8>
 800de38:	8018      	strh	r0, [r3, #0]
 800de3a:	2300      	movs	r3, #0
 800de3c:	6123      	str	r3, [r4, #16]
 800de3e:	4616      	mov	r6, r2
 800de40:	e7ba      	b.n	800ddb8 <_printf_i+0x150>
 800de42:	680b      	ldr	r3, [r1, #0]
 800de44:	1d1a      	adds	r2, r3, #4
 800de46:	600a      	str	r2, [r1, #0]
 800de48:	681e      	ldr	r6, [r3, #0]
 800de4a:	6862      	ldr	r2, [r4, #4]
 800de4c:	2100      	movs	r1, #0
 800de4e:	4630      	mov	r0, r6
 800de50:	f7f2 fa4e 	bl	80002f0 <memchr>
 800de54:	b108      	cbz	r0, 800de5a <_printf_i+0x1f2>
 800de56:	1b80      	subs	r0, r0, r6
 800de58:	6060      	str	r0, [r4, #4]
 800de5a:	6863      	ldr	r3, [r4, #4]
 800de5c:	6123      	str	r3, [r4, #16]
 800de5e:	2300      	movs	r3, #0
 800de60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de64:	e7a8      	b.n	800ddb8 <_printf_i+0x150>
 800de66:	6923      	ldr	r3, [r4, #16]
 800de68:	4632      	mov	r2, r6
 800de6a:	4649      	mov	r1, r9
 800de6c:	4640      	mov	r0, r8
 800de6e:	47d0      	blx	sl
 800de70:	3001      	adds	r0, #1
 800de72:	d0ab      	beq.n	800ddcc <_printf_i+0x164>
 800de74:	6823      	ldr	r3, [r4, #0]
 800de76:	079b      	lsls	r3, r3, #30
 800de78:	d413      	bmi.n	800dea2 <_printf_i+0x23a>
 800de7a:	68e0      	ldr	r0, [r4, #12]
 800de7c:	9b03      	ldr	r3, [sp, #12]
 800de7e:	4298      	cmp	r0, r3
 800de80:	bfb8      	it	lt
 800de82:	4618      	movlt	r0, r3
 800de84:	e7a4      	b.n	800ddd0 <_printf_i+0x168>
 800de86:	2301      	movs	r3, #1
 800de88:	4632      	mov	r2, r6
 800de8a:	4649      	mov	r1, r9
 800de8c:	4640      	mov	r0, r8
 800de8e:	47d0      	blx	sl
 800de90:	3001      	adds	r0, #1
 800de92:	d09b      	beq.n	800ddcc <_printf_i+0x164>
 800de94:	3501      	adds	r5, #1
 800de96:	68e3      	ldr	r3, [r4, #12]
 800de98:	9903      	ldr	r1, [sp, #12]
 800de9a:	1a5b      	subs	r3, r3, r1
 800de9c:	42ab      	cmp	r3, r5
 800de9e:	dcf2      	bgt.n	800de86 <_printf_i+0x21e>
 800dea0:	e7eb      	b.n	800de7a <_printf_i+0x212>
 800dea2:	2500      	movs	r5, #0
 800dea4:	f104 0619 	add.w	r6, r4, #25
 800dea8:	e7f5      	b.n	800de96 <_printf_i+0x22e>
 800deaa:	bf00      	nop
 800deac:	08010046 	.word	0x08010046
 800deb0:	08010057 	.word	0x08010057

0800deb4 <_puts_r>:
 800deb4:	b570      	push	{r4, r5, r6, lr}
 800deb6:	460e      	mov	r6, r1
 800deb8:	4605      	mov	r5, r0
 800deba:	b118      	cbz	r0, 800dec4 <_puts_r+0x10>
 800debc:	6983      	ldr	r3, [r0, #24]
 800debe:	b90b      	cbnz	r3, 800dec4 <_puts_r+0x10>
 800dec0:	f001 f856 	bl	800ef70 <__sinit>
 800dec4:	69ab      	ldr	r3, [r5, #24]
 800dec6:	68ac      	ldr	r4, [r5, #8]
 800dec8:	b913      	cbnz	r3, 800ded0 <_puts_r+0x1c>
 800deca:	4628      	mov	r0, r5
 800decc:	f001 f850 	bl	800ef70 <__sinit>
 800ded0:	4b2c      	ldr	r3, [pc, #176]	; (800df84 <_puts_r+0xd0>)
 800ded2:	429c      	cmp	r4, r3
 800ded4:	d120      	bne.n	800df18 <_puts_r+0x64>
 800ded6:	686c      	ldr	r4, [r5, #4]
 800ded8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800deda:	07db      	lsls	r3, r3, #31
 800dedc:	d405      	bmi.n	800deea <_puts_r+0x36>
 800dede:	89a3      	ldrh	r3, [r4, #12]
 800dee0:	0598      	lsls	r0, r3, #22
 800dee2:	d402      	bmi.n	800deea <_puts_r+0x36>
 800dee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dee6:	f001 f8e6 	bl	800f0b6 <__retarget_lock_acquire_recursive>
 800deea:	89a3      	ldrh	r3, [r4, #12]
 800deec:	0719      	lsls	r1, r3, #28
 800deee:	d51d      	bpl.n	800df2c <_puts_r+0x78>
 800def0:	6923      	ldr	r3, [r4, #16]
 800def2:	b1db      	cbz	r3, 800df2c <_puts_r+0x78>
 800def4:	3e01      	subs	r6, #1
 800def6:	68a3      	ldr	r3, [r4, #8]
 800def8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800defc:	3b01      	subs	r3, #1
 800defe:	60a3      	str	r3, [r4, #8]
 800df00:	bb39      	cbnz	r1, 800df52 <_puts_r+0x9e>
 800df02:	2b00      	cmp	r3, #0
 800df04:	da38      	bge.n	800df78 <_puts_r+0xc4>
 800df06:	4622      	mov	r2, r4
 800df08:	210a      	movs	r1, #10
 800df0a:	4628      	mov	r0, r5
 800df0c:	f000 f848 	bl	800dfa0 <__swbuf_r>
 800df10:	3001      	adds	r0, #1
 800df12:	d011      	beq.n	800df38 <_puts_r+0x84>
 800df14:	250a      	movs	r5, #10
 800df16:	e011      	b.n	800df3c <_puts_r+0x88>
 800df18:	4b1b      	ldr	r3, [pc, #108]	; (800df88 <_puts_r+0xd4>)
 800df1a:	429c      	cmp	r4, r3
 800df1c:	d101      	bne.n	800df22 <_puts_r+0x6e>
 800df1e:	68ac      	ldr	r4, [r5, #8]
 800df20:	e7da      	b.n	800ded8 <_puts_r+0x24>
 800df22:	4b1a      	ldr	r3, [pc, #104]	; (800df8c <_puts_r+0xd8>)
 800df24:	429c      	cmp	r4, r3
 800df26:	bf08      	it	eq
 800df28:	68ec      	ldreq	r4, [r5, #12]
 800df2a:	e7d5      	b.n	800ded8 <_puts_r+0x24>
 800df2c:	4621      	mov	r1, r4
 800df2e:	4628      	mov	r0, r5
 800df30:	f000 f888 	bl	800e044 <__swsetup_r>
 800df34:	2800      	cmp	r0, #0
 800df36:	d0dd      	beq.n	800def4 <_puts_r+0x40>
 800df38:	f04f 35ff 	mov.w	r5, #4294967295
 800df3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df3e:	07da      	lsls	r2, r3, #31
 800df40:	d405      	bmi.n	800df4e <_puts_r+0x9a>
 800df42:	89a3      	ldrh	r3, [r4, #12]
 800df44:	059b      	lsls	r3, r3, #22
 800df46:	d402      	bmi.n	800df4e <_puts_r+0x9a>
 800df48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df4a:	f001 f8b5 	bl	800f0b8 <__retarget_lock_release_recursive>
 800df4e:	4628      	mov	r0, r5
 800df50:	bd70      	pop	{r4, r5, r6, pc}
 800df52:	2b00      	cmp	r3, #0
 800df54:	da04      	bge.n	800df60 <_puts_r+0xac>
 800df56:	69a2      	ldr	r2, [r4, #24]
 800df58:	429a      	cmp	r2, r3
 800df5a:	dc06      	bgt.n	800df6a <_puts_r+0xb6>
 800df5c:	290a      	cmp	r1, #10
 800df5e:	d004      	beq.n	800df6a <_puts_r+0xb6>
 800df60:	6823      	ldr	r3, [r4, #0]
 800df62:	1c5a      	adds	r2, r3, #1
 800df64:	6022      	str	r2, [r4, #0]
 800df66:	7019      	strb	r1, [r3, #0]
 800df68:	e7c5      	b.n	800def6 <_puts_r+0x42>
 800df6a:	4622      	mov	r2, r4
 800df6c:	4628      	mov	r0, r5
 800df6e:	f000 f817 	bl	800dfa0 <__swbuf_r>
 800df72:	3001      	adds	r0, #1
 800df74:	d1bf      	bne.n	800def6 <_puts_r+0x42>
 800df76:	e7df      	b.n	800df38 <_puts_r+0x84>
 800df78:	6823      	ldr	r3, [r4, #0]
 800df7a:	250a      	movs	r5, #10
 800df7c:	1c5a      	adds	r2, r3, #1
 800df7e:	6022      	str	r2, [r4, #0]
 800df80:	701d      	strb	r5, [r3, #0]
 800df82:	e7db      	b.n	800df3c <_puts_r+0x88>
 800df84:	0801011c 	.word	0x0801011c
 800df88:	0801013c 	.word	0x0801013c
 800df8c:	080100fc 	.word	0x080100fc

0800df90 <puts>:
 800df90:	4b02      	ldr	r3, [pc, #8]	; (800df9c <puts+0xc>)
 800df92:	4601      	mov	r1, r0
 800df94:	6818      	ldr	r0, [r3, #0]
 800df96:	f7ff bf8d 	b.w	800deb4 <_puts_r>
 800df9a:	bf00      	nop
 800df9c:	2400001c 	.word	0x2400001c

0800dfa0 <__swbuf_r>:
 800dfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa2:	460e      	mov	r6, r1
 800dfa4:	4614      	mov	r4, r2
 800dfa6:	4605      	mov	r5, r0
 800dfa8:	b118      	cbz	r0, 800dfb2 <__swbuf_r+0x12>
 800dfaa:	6983      	ldr	r3, [r0, #24]
 800dfac:	b90b      	cbnz	r3, 800dfb2 <__swbuf_r+0x12>
 800dfae:	f000 ffdf 	bl	800ef70 <__sinit>
 800dfb2:	4b21      	ldr	r3, [pc, #132]	; (800e038 <__swbuf_r+0x98>)
 800dfb4:	429c      	cmp	r4, r3
 800dfb6:	d12b      	bne.n	800e010 <__swbuf_r+0x70>
 800dfb8:	686c      	ldr	r4, [r5, #4]
 800dfba:	69a3      	ldr	r3, [r4, #24]
 800dfbc:	60a3      	str	r3, [r4, #8]
 800dfbe:	89a3      	ldrh	r3, [r4, #12]
 800dfc0:	071a      	lsls	r2, r3, #28
 800dfc2:	d52f      	bpl.n	800e024 <__swbuf_r+0x84>
 800dfc4:	6923      	ldr	r3, [r4, #16]
 800dfc6:	b36b      	cbz	r3, 800e024 <__swbuf_r+0x84>
 800dfc8:	6923      	ldr	r3, [r4, #16]
 800dfca:	6820      	ldr	r0, [r4, #0]
 800dfcc:	1ac0      	subs	r0, r0, r3
 800dfce:	6963      	ldr	r3, [r4, #20]
 800dfd0:	b2f6      	uxtb	r6, r6
 800dfd2:	4283      	cmp	r3, r0
 800dfd4:	4637      	mov	r7, r6
 800dfd6:	dc04      	bgt.n	800dfe2 <__swbuf_r+0x42>
 800dfd8:	4621      	mov	r1, r4
 800dfda:	4628      	mov	r0, r5
 800dfdc:	f000 ff34 	bl	800ee48 <_fflush_r>
 800dfe0:	bb30      	cbnz	r0, 800e030 <__swbuf_r+0x90>
 800dfe2:	68a3      	ldr	r3, [r4, #8]
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	60a3      	str	r3, [r4, #8]
 800dfe8:	6823      	ldr	r3, [r4, #0]
 800dfea:	1c5a      	adds	r2, r3, #1
 800dfec:	6022      	str	r2, [r4, #0]
 800dfee:	701e      	strb	r6, [r3, #0]
 800dff0:	6963      	ldr	r3, [r4, #20]
 800dff2:	3001      	adds	r0, #1
 800dff4:	4283      	cmp	r3, r0
 800dff6:	d004      	beq.n	800e002 <__swbuf_r+0x62>
 800dff8:	89a3      	ldrh	r3, [r4, #12]
 800dffa:	07db      	lsls	r3, r3, #31
 800dffc:	d506      	bpl.n	800e00c <__swbuf_r+0x6c>
 800dffe:	2e0a      	cmp	r6, #10
 800e000:	d104      	bne.n	800e00c <__swbuf_r+0x6c>
 800e002:	4621      	mov	r1, r4
 800e004:	4628      	mov	r0, r5
 800e006:	f000 ff1f 	bl	800ee48 <_fflush_r>
 800e00a:	b988      	cbnz	r0, 800e030 <__swbuf_r+0x90>
 800e00c:	4638      	mov	r0, r7
 800e00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e010:	4b0a      	ldr	r3, [pc, #40]	; (800e03c <__swbuf_r+0x9c>)
 800e012:	429c      	cmp	r4, r3
 800e014:	d101      	bne.n	800e01a <__swbuf_r+0x7a>
 800e016:	68ac      	ldr	r4, [r5, #8]
 800e018:	e7cf      	b.n	800dfba <__swbuf_r+0x1a>
 800e01a:	4b09      	ldr	r3, [pc, #36]	; (800e040 <__swbuf_r+0xa0>)
 800e01c:	429c      	cmp	r4, r3
 800e01e:	bf08      	it	eq
 800e020:	68ec      	ldreq	r4, [r5, #12]
 800e022:	e7ca      	b.n	800dfba <__swbuf_r+0x1a>
 800e024:	4621      	mov	r1, r4
 800e026:	4628      	mov	r0, r5
 800e028:	f000 f80c 	bl	800e044 <__swsetup_r>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d0cb      	beq.n	800dfc8 <__swbuf_r+0x28>
 800e030:	f04f 37ff 	mov.w	r7, #4294967295
 800e034:	e7ea      	b.n	800e00c <__swbuf_r+0x6c>
 800e036:	bf00      	nop
 800e038:	0801011c 	.word	0x0801011c
 800e03c:	0801013c 	.word	0x0801013c
 800e040:	080100fc 	.word	0x080100fc

0800e044 <__swsetup_r>:
 800e044:	4b32      	ldr	r3, [pc, #200]	; (800e110 <__swsetup_r+0xcc>)
 800e046:	b570      	push	{r4, r5, r6, lr}
 800e048:	681d      	ldr	r5, [r3, #0]
 800e04a:	4606      	mov	r6, r0
 800e04c:	460c      	mov	r4, r1
 800e04e:	b125      	cbz	r5, 800e05a <__swsetup_r+0x16>
 800e050:	69ab      	ldr	r3, [r5, #24]
 800e052:	b913      	cbnz	r3, 800e05a <__swsetup_r+0x16>
 800e054:	4628      	mov	r0, r5
 800e056:	f000 ff8b 	bl	800ef70 <__sinit>
 800e05a:	4b2e      	ldr	r3, [pc, #184]	; (800e114 <__swsetup_r+0xd0>)
 800e05c:	429c      	cmp	r4, r3
 800e05e:	d10f      	bne.n	800e080 <__swsetup_r+0x3c>
 800e060:	686c      	ldr	r4, [r5, #4]
 800e062:	89a3      	ldrh	r3, [r4, #12]
 800e064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e068:	0719      	lsls	r1, r3, #28
 800e06a:	d42c      	bmi.n	800e0c6 <__swsetup_r+0x82>
 800e06c:	06dd      	lsls	r5, r3, #27
 800e06e:	d411      	bmi.n	800e094 <__swsetup_r+0x50>
 800e070:	2309      	movs	r3, #9
 800e072:	6033      	str	r3, [r6, #0]
 800e074:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e078:	81a3      	strh	r3, [r4, #12]
 800e07a:	f04f 30ff 	mov.w	r0, #4294967295
 800e07e:	e03e      	b.n	800e0fe <__swsetup_r+0xba>
 800e080:	4b25      	ldr	r3, [pc, #148]	; (800e118 <__swsetup_r+0xd4>)
 800e082:	429c      	cmp	r4, r3
 800e084:	d101      	bne.n	800e08a <__swsetup_r+0x46>
 800e086:	68ac      	ldr	r4, [r5, #8]
 800e088:	e7eb      	b.n	800e062 <__swsetup_r+0x1e>
 800e08a:	4b24      	ldr	r3, [pc, #144]	; (800e11c <__swsetup_r+0xd8>)
 800e08c:	429c      	cmp	r4, r3
 800e08e:	bf08      	it	eq
 800e090:	68ec      	ldreq	r4, [r5, #12]
 800e092:	e7e6      	b.n	800e062 <__swsetup_r+0x1e>
 800e094:	0758      	lsls	r0, r3, #29
 800e096:	d512      	bpl.n	800e0be <__swsetup_r+0x7a>
 800e098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e09a:	b141      	cbz	r1, 800e0ae <__swsetup_r+0x6a>
 800e09c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0a0:	4299      	cmp	r1, r3
 800e0a2:	d002      	beq.n	800e0aa <__swsetup_r+0x66>
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	f001 fc11 	bl	800f8cc <_free_r>
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	6363      	str	r3, [r4, #52]	; 0x34
 800e0ae:	89a3      	ldrh	r3, [r4, #12]
 800e0b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0b4:	81a3      	strh	r3, [r4, #12]
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	6063      	str	r3, [r4, #4]
 800e0ba:	6923      	ldr	r3, [r4, #16]
 800e0bc:	6023      	str	r3, [r4, #0]
 800e0be:	89a3      	ldrh	r3, [r4, #12]
 800e0c0:	f043 0308 	orr.w	r3, r3, #8
 800e0c4:	81a3      	strh	r3, [r4, #12]
 800e0c6:	6923      	ldr	r3, [r4, #16]
 800e0c8:	b94b      	cbnz	r3, 800e0de <__swsetup_r+0x9a>
 800e0ca:	89a3      	ldrh	r3, [r4, #12]
 800e0cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0d4:	d003      	beq.n	800e0de <__swsetup_r+0x9a>
 800e0d6:	4621      	mov	r1, r4
 800e0d8:	4630      	mov	r0, r6
 800e0da:	f001 f813 	bl	800f104 <__smakebuf_r>
 800e0de:	89a0      	ldrh	r0, [r4, #12]
 800e0e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0e4:	f010 0301 	ands.w	r3, r0, #1
 800e0e8:	d00a      	beq.n	800e100 <__swsetup_r+0xbc>
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	60a3      	str	r3, [r4, #8]
 800e0ee:	6963      	ldr	r3, [r4, #20]
 800e0f0:	425b      	negs	r3, r3
 800e0f2:	61a3      	str	r3, [r4, #24]
 800e0f4:	6923      	ldr	r3, [r4, #16]
 800e0f6:	b943      	cbnz	r3, 800e10a <__swsetup_r+0xc6>
 800e0f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e0fc:	d1ba      	bne.n	800e074 <__swsetup_r+0x30>
 800e0fe:	bd70      	pop	{r4, r5, r6, pc}
 800e100:	0781      	lsls	r1, r0, #30
 800e102:	bf58      	it	pl
 800e104:	6963      	ldrpl	r3, [r4, #20]
 800e106:	60a3      	str	r3, [r4, #8]
 800e108:	e7f4      	b.n	800e0f4 <__swsetup_r+0xb0>
 800e10a:	2000      	movs	r0, #0
 800e10c:	e7f7      	b.n	800e0fe <__swsetup_r+0xba>
 800e10e:	bf00      	nop
 800e110:	2400001c 	.word	0x2400001c
 800e114:	0801011c 	.word	0x0801011c
 800e118:	0801013c 	.word	0x0801013c
 800e11c:	080100fc 	.word	0x080100fc

0800e120 <quorem>:
 800e120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e124:	6903      	ldr	r3, [r0, #16]
 800e126:	690c      	ldr	r4, [r1, #16]
 800e128:	42a3      	cmp	r3, r4
 800e12a:	4607      	mov	r7, r0
 800e12c:	f2c0 8081 	blt.w	800e232 <quorem+0x112>
 800e130:	3c01      	subs	r4, #1
 800e132:	f101 0814 	add.w	r8, r1, #20
 800e136:	f100 0514 	add.w	r5, r0, #20
 800e13a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e13e:	9301      	str	r3, [sp, #4]
 800e140:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e144:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e148:	3301      	adds	r3, #1
 800e14a:	429a      	cmp	r2, r3
 800e14c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e150:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e154:	fbb2 f6f3 	udiv	r6, r2, r3
 800e158:	d331      	bcc.n	800e1be <quorem+0x9e>
 800e15a:	f04f 0e00 	mov.w	lr, #0
 800e15e:	4640      	mov	r0, r8
 800e160:	46ac      	mov	ip, r5
 800e162:	46f2      	mov	sl, lr
 800e164:	f850 2b04 	ldr.w	r2, [r0], #4
 800e168:	b293      	uxth	r3, r2
 800e16a:	fb06 e303 	mla	r3, r6, r3, lr
 800e16e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e172:	b29b      	uxth	r3, r3
 800e174:	ebaa 0303 	sub.w	r3, sl, r3
 800e178:	0c12      	lsrs	r2, r2, #16
 800e17a:	f8dc a000 	ldr.w	sl, [ip]
 800e17e:	fb06 e202 	mla	r2, r6, r2, lr
 800e182:	fa13 f38a 	uxtah	r3, r3, sl
 800e186:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e18a:	fa1f fa82 	uxth.w	sl, r2
 800e18e:	f8dc 2000 	ldr.w	r2, [ip]
 800e192:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e196:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e1a0:	4581      	cmp	r9, r0
 800e1a2:	f84c 3b04 	str.w	r3, [ip], #4
 800e1a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e1aa:	d2db      	bcs.n	800e164 <quorem+0x44>
 800e1ac:	f855 300b 	ldr.w	r3, [r5, fp]
 800e1b0:	b92b      	cbnz	r3, 800e1be <quorem+0x9e>
 800e1b2:	9b01      	ldr	r3, [sp, #4]
 800e1b4:	3b04      	subs	r3, #4
 800e1b6:	429d      	cmp	r5, r3
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	d32e      	bcc.n	800e21a <quorem+0xfa>
 800e1bc:	613c      	str	r4, [r7, #16]
 800e1be:	4638      	mov	r0, r7
 800e1c0:	f001 fa74 	bl	800f6ac <__mcmp>
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	db24      	blt.n	800e212 <quorem+0xf2>
 800e1c8:	3601      	adds	r6, #1
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f04f 0c00 	mov.w	ip, #0
 800e1d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e1d4:	f8d0 e000 	ldr.w	lr, [r0]
 800e1d8:	b293      	uxth	r3, r2
 800e1da:	ebac 0303 	sub.w	r3, ip, r3
 800e1de:	0c12      	lsrs	r2, r2, #16
 800e1e0:	fa13 f38e 	uxtah	r3, r3, lr
 800e1e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e1e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e1f2:	45c1      	cmp	r9, r8
 800e1f4:	f840 3b04 	str.w	r3, [r0], #4
 800e1f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e1fc:	d2e8      	bcs.n	800e1d0 <quorem+0xb0>
 800e1fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e206:	b922      	cbnz	r2, 800e212 <quorem+0xf2>
 800e208:	3b04      	subs	r3, #4
 800e20a:	429d      	cmp	r5, r3
 800e20c:	461a      	mov	r2, r3
 800e20e:	d30a      	bcc.n	800e226 <quorem+0x106>
 800e210:	613c      	str	r4, [r7, #16]
 800e212:	4630      	mov	r0, r6
 800e214:	b003      	add	sp, #12
 800e216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e21a:	6812      	ldr	r2, [r2, #0]
 800e21c:	3b04      	subs	r3, #4
 800e21e:	2a00      	cmp	r2, #0
 800e220:	d1cc      	bne.n	800e1bc <quorem+0x9c>
 800e222:	3c01      	subs	r4, #1
 800e224:	e7c7      	b.n	800e1b6 <quorem+0x96>
 800e226:	6812      	ldr	r2, [r2, #0]
 800e228:	3b04      	subs	r3, #4
 800e22a:	2a00      	cmp	r2, #0
 800e22c:	d1f0      	bne.n	800e210 <quorem+0xf0>
 800e22e:	3c01      	subs	r4, #1
 800e230:	e7eb      	b.n	800e20a <quorem+0xea>
 800e232:	2000      	movs	r0, #0
 800e234:	e7ee      	b.n	800e214 <quorem+0xf4>
	...

0800e238 <_dtoa_r>:
 800e238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23c:	ec59 8b10 	vmov	r8, r9, d0
 800e240:	b095      	sub	sp, #84	; 0x54
 800e242:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e244:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800e246:	9107      	str	r1, [sp, #28]
 800e248:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e24c:	4606      	mov	r6, r0
 800e24e:	9209      	str	r2, [sp, #36]	; 0x24
 800e250:	9310      	str	r3, [sp, #64]	; 0x40
 800e252:	b975      	cbnz	r5, 800e272 <_dtoa_r+0x3a>
 800e254:	2010      	movs	r0, #16
 800e256:	f000 ff95 	bl	800f184 <malloc>
 800e25a:	4602      	mov	r2, r0
 800e25c:	6270      	str	r0, [r6, #36]	; 0x24
 800e25e:	b920      	cbnz	r0, 800e26a <_dtoa_r+0x32>
 800e260:	4bab      	ldr	r3, [pc, #684]	; (800e510 <_dtoa_r+0x2d8>)
 800e262:	21ea      	movs	r1, #234	; 0xea
 800e264:	48ab      	ldr	r0, [pc, #684]	; (800e514 <_dtoa_r+0x2dc>)
 800e266:	f001 fc41 	bl	800faec <__assert_func>
 800e26a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e26e:	6005      	str	r5, [r0, #0]
 800e270:	60c5      	str	r5, [r0, #12]
 800e272:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e274:	6819      	ldr	r1, [r3, #0]
 800e276:	b151      	cbz	r1, 800e28e <_dtoa_r+0x56>
 800e278:	685a      	ldr	r2, [r3, #4]
 800e27a:	604a      	str	r2, [r1, #4]
 800e27c:	2301      	movs	r3, #1
 800e27e:	4093      	lsls	r3, r2
 800e280:	608b      	str	r3, [r1, #8]
 800e282:	4630      	mov	r0, r6
 800e284:	f000 ffd4 	bl	800f230 <_Bfree>
 800e288:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e28a:	2200      	movs	r2, #0
 800e28c:	601a      	str	r2, [r3, #0]
 800e28e:	f1b9 0300 	subs.w	r3, r9, #0
 800e292:	bfbb      	ittet	lt
 800e294:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e298:	9303      	strlt	r3, [sp, #12]
 800e29a:	2300      	movge	r3, #0
 800e29c:	2201      	movlt	r2, #1
 800e29e:	bfac      	ite	ge
 800e2a0:	6023      	strge	r3, [r4, #0]
 800e2a2:	6022      	strlt	r2, [r4, #0]
 800e2a4:	4b9c      	ldr	r3, [pc, #624]	; (800e518 <_dtoa_r+0x2e0>)
 800e2a6:	9c03      	ldr	r4, [sp, #12]
 800e2a8:	43a3      	bics	r3, r4
 800e2aa:	d11a      	bne.n	800e2e2 <_dtoa_r+0xaa>
 800e2ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e2ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800e2b2:	6013      	str	r3, [r2, #0]
 800e2b4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e2b8:	ea53 0308 	orrs.w	r3, r3, r8
 800e2bc:	f000 8512 	beq.w	800ece4 <_dtoa_r+0xaac>
 800e2c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e2c2:	b953      	cbnz	r3, 800e2da <_dtoa_r+0xa2>
 800e2c4:	4b95      	ldr	r3, [pc, #596]	; (800e51c <_dtoa_r+0x2e4>)
 800e2c6:	e01f      	b.n	800e308 <_dtoa_r+0xd0>
 800e2c8:	4b95      	ldr	r3, [pc, #596]	; (800e520 <_dtoa_r+0x2e8>)
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	3308      	adds	r3, #8
 800e2ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800e2d0:	6013      	str	r3, [r2, #0]
 800e2d2:	9800      	ldr	r0, [sp, #0]
 800e2d4:	b015      	add	sp, #84	; 0x54
 800e2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2da:	4b90      	ldr	r3, [pc, #576]	; (800e51c <_dtoa_r+0x2e4>)
 800e2dc:	9300      	str	r3, [sp, #0]
 800e2de:	3303      	adds	r3, #3
 800e2e0:	e7f5      	b.n	800e2ce <_dtoa_r+0x96>
 800e2e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e2f2:	d10b      	bne.n	800e30c <_dtoa_r+0xd4>
 800e2f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	6013      	str	r3, [r2, #0]
 800e2fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f000 84ee 	beq.w	800ecde <_dtoa_r+0xaa6>
 800e302:	4888      	ldr	r0, [pc, #544]	; (800e524 <_dtoa_r+0x2ec>)
 800e304:	6018      	str	r0, [r3, #0]
 800e306:	1e43      	subs	r3, r0, #1
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	e7e2      	b.n	800e2d2 <_dtoa_r+0x9a>
 800e30c:	a913      	add	r1, sp, #76	; 0x4c
 800e30e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e312:	aa12      	add	r2, sp, #72	; 0x48
 800e314:	4630      	mov	r0, r6
 800e316:	f001 fa6d 	bl	800f7f4 <__d2b>
 800e31a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800e31e:	4605      	mov	r5, r0
 800e320:	9812      	ldr	r0, [sp, #72]	; 0x48
 800e322:	2900      	cmp	r1, #0
 800e324:	d047      	beq.n	800e3b6 <_dtoa_r+0x17e>
 800e326:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e328:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e32c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e330:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800e334:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e338:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e33c:	2400      	movs	r4, #0
 800e33e:	ec43 2b16 	vmov	d6, r2, r3
 800e342:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e346:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800e4f8 <_dtoa_r+0x2c0>
 800e34a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e34e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800e500 <_dtoa_r+0x2c8>
 800e352:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e356:	eeb0 7b46 	vmov.f64	d7, d6
 800e35a:	ee06 1a90 	vmov	s13, r1
 800e35e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800e362:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e508 <_dtoa_r+0x2d0>
 800e366:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e36a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e36e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e376:	ee16 ba90 	vmov	fp, s13
 800e37a:	9411      	str	r4, [sp, #68]	; 0x44
 800e37c:	d508      	bpl.n	800e390 <_dtoa_r+0x158>
 800e37e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800e382:	eeb4 6b47 	vcmp.f64	d6, d7
 800e386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38a:	bf18      	it	ne
 800e38c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800e390:	f1bb 0f16 	cmp.w	fp, #22
 800e394:	d832      	bhi.n	800e3fc <_dtoa_r+0x1c4>
 800e396:	4b64      	ldr	r3, [pc, #400]	; (800e528 <_dtoa_r+0x2f0>)
 800e398:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e39c:	ed93 7b00 	vldr	d7, [r3]
 800e3a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e3a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e3a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ac:	d501      	bpl.n	800e3b2 <_dtoa_r+0x17a>
 800e3ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	e023      	b.n	800e3fe <_dtoa_r+0x1c6>
 800e3b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800e3b8:	4401      	add	r1, r0
 800e3ba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800e3be:	2b20      	cmp	r3, #32
 800e3c0:	bfc3      	ittte	gt
 800e3c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e3c6:	fa04 f303 	lslgt.w	r3, r4, r3
 800e3ca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800e3ce:	f1c3 0320 	rsble	r3, r3, #32
 800e3d2:	bfc6      	itte	gt
 800e3d4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800e3d8:	ea43 0308 	orrgt.w	r3, r3, r8
 800e3dc:	fa08 f303 	lslle.w	r3, r8, r3
 800e3e0:	ee07 3a90 	vmov	s15, r3
 800e3e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e3e8:	3901      	subs	r1, #1
 800e3ea:	ed8d 7b00 	vstr	d7, [sp]
 800e3ee:	9c01      	ldr	r4, [sp, #4]
 800e3f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3f4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800e3f8:	2401      	movs	r4, #1
 800e3fa:	e7a0      	b.n	800e33e <_dtoa_r+0x106>
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800e400:	1a43      	subs	r3, r0, r1
 800e402:	1e5a      	subs	r2, r3, #1
 800e404:	bf45      	ittet	mi
 800e406:	f1c3 0301 	rsbmi	r3, r3, #1
 800e40a:	9305      	strmi	r3, [sp, #20]
 800e40c:	2300      	movpl	r3, #0
 800e40e:	2300      	movmi	r3, #0
 800e410:	9206      	str	r2, [sp, #24]
 800e412:	bf54      	ite	pl
 800e414:	9305      	strpl	r3, [sp, #20]
 800e416:	9306      	strmi	r3, [sp, #24]
 800e418:	f1bb 0f00 	cmp.w	fp, #0
 800e41c:	db18      	blt.n	800e450 <_dtoa_r+0x218>
 800e41e:	9b06      	ldr	r3, [sp, #24]
 800e420:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800e424:	445b      	add	r3, fp
 800e426:	9306      	str	r3, [sp, #24]
 800e428:	2300      	movs	r3, #0
 800e42a:	9a07      	ldr	r2, [sp, #28]
 800e42c:	2a09      	cmp	r2, #9
 800e42e:	d849      	bhi.n	800e4c4 <_dtoa_r+0x28c>
 800e430:	2a05      	cmp	r2, #5
 800e432:	bfc4      	itt	gt
 800e434:	3a04      	subgt	r2, #4
 800e436:	9207      	strgt	r2, [sp, #28]
 800e438:	9a07      	ldr	r2, [sp, #28]
 800e43a:	f1a2 0202 	sub.w	r2, r2, #2
 800e43e:	bfcc      	ite	gt
 800e440:	2400      	movgt	r4, #0
 800e442:	2401      	movle	r4, #1
 800e444:	2a03      	cmp	r2, #3
 800e446:	d848      	bhi.n	800e4da <_dtoa_r+0x2a2>
 800e448:	e8df f002 	tbb	[pc, r2]
 800e44c:	3a2c2e0b 	.word	0x3a2c2e0b
 800e450:	9b05      	ldr	r3, [sp, #20]
 800e452:	2200      	movs	r2, #0
 800e454:	eba3 030b 	sub.w	r3, r3, fp
 800e458:	9305      	str	r3, [sp, #20]
 800e45a:	920e      	str	r2, [sp, #56]	; 0x38
 800e45c:	f1cb 0300 	rsb	r3, fp, #0
 800e460:	e7e3      	b.n	800e42a <_dtoa_r+0x1f2>
 800e462:	2200      	movs	r2, #0
 800e464:	9208      	str	r2, [sp, #32]
 800e466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e468:	2a00      	cmp	r2, #0
 800e46a:	dc39      	bgt.n	800e4e0 <_dtoa_r+0x2a8>
 800e46c:	f04f 0a01 	mov.w	sl, #1
 800e470:	46d1      	mov	r9, sl
 800e472:	4652      	mov	r2, sl
 800e474:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e478:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800e47a:	2100      	movs	r1, #0
 800e47c:	6079      	str	r1, [r7, #4]
 800e47e:	2004      	movs	r0, #4
 800e480:	f100 0c14 	add.w	ip, r0, #20
 800e484:	4594      	cmp	ip, r2
 800e486:	6879      	ldr	r1, [r7, #4]
 800e488:	d92f      	bls.n	800e4ea <_dtoa_r+0x2b2>
 800e48a:	4630      	mov	r0, r6
 800e48c:	930c      	str	r3, [sp, #48]	; 0x30
 800e48e:	f000 fe8f 	bl	800f1b0 <_Balloc>
 800e492:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e494:	9000      	str	r0, [sp, #0]
 800e496:	4602      	mov	r2, r0
 800e498:	2800      	cmp	r0, #0
 800e49a:	d149      	bne.n	800e530 <_dtoa_r+0x2f8>
 800e49c:	4b23      	ldr	r3, [pc, #140]	; (800e52c <_dtoa_r+0x2f4>)
 800e49e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e4a2:	e6df      	b.n	800e264 <_dtoa_r+0x2c>
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	e7dd      	b.n	800e464 <_dtoa_r+0x22c>
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	9208      	str	r2, [sp, #32]
 800e4ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4ae:	eb0b 0a02 	add.w	sl, fp, r2
 800e4b2:	f10a 0901 	add.w	r9, sl, #1
 800e4b6:	464a      	mov	r2, r9
 800e4b8:	2a01      	cmp	r2, #1
 800e4ba:	bfb8      	it	lt
 800e4bc:	2201      	movlt	r2, #1
 800e4be:	e7db      	b.n	800e478 <_dtoa_r+0x240>
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	e7f2      	b.n	800e4aa <_dtoa_r+0x272>
 800e4c4:	2401      	movs	r4, #1
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800e4cc:	f04f 3aff 	mov.w	sl, #4294967295
 800e4d0:	2100      	movs	r1, #0
 800e4d2:	46d1      	mov	r9, sl
 800e4d4:	2212      	movs	r2, #18
 800e4d6:	9109      	str	r1, [sp, #36]	; 0x24
 800e4d8:	e7ce      	b.n	800e478 <_dtoa_r+0x240>
 800e4da:	2201      	movs	r2, #1
 800e4dc:	9208      	str	r2, [sp, #32]
 800e4de:	e7f5      	b.n	800e4cc <_dtoa_r+0x294>
 800e4e0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e4e4:	46d1      	mov	r9, sl
 800e4e6:	4652      	mov	r2, sl
 800e4e8:	e7c6      	b.n	800e478 <_dtoa_r+0x240>
 800e4ea:	3101      	adds	r1, #1
 800e4ec:	6079      	str	r1, [r7, #4]
 800e4ee:	0040      	lsls	r0, r0, #1
 800e4f0:	e7c6      	b.n	800e480 <_dtoa_r+0x248>
 800e4f2:	bf00      	nop
 800e4f4:	f3af 8000 	nop.w
 800e4f8:	636f4361 	.word	0x636f4361
 800e4fc:	3fd287a7 	.word	0x3fd287a7
 800e500:	8b60c8b3 	.word	0x8b60c8b3
 800e504:	3fc68a28 	.word	0x3fc68a28
 800e508:	509f79fb 	.word	0x509f79fb
 800e50c:	3fd34413 	.word	0x3fd34413
 800e510:	08010075 	.word	0x08010075
 800e514:	0801008c 	.word	0x0801008c
 800e518:	7ff00000 	.word	0x7ff00000
 800e51c:	08010071 	.word	0x08010071
 800e520:	08010068 	.word	0x08010068
 800e524:	08010045 	.word	0x08010045
 800e528:	080101e8 	.word	0x080101e8
 800e52c:	080100eb 	.word	0x080100eb
 800e530:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e532:	9900      	ldr	r1, [sp, #0]
 800e534:	6011      	str	r1, [r2, #0]
 800e536:	f1b9 0f0e 	cmp.w	r9, #14
 800e53a:	d872      	bhi.n	800e622 <_dtoa_r+0x3ea>
 800e53c:	2c00      	cmp	r4, #0
 800e53e:	d070      	beq.n	800e622 <_dtoa_r+0x3ea>
 800e540:	f1bb 0f00 	cmp.w	fp, #0
 800e544:	f340 80a6 	ble.w	800e694 <_dtoa_r+0x45c>
 800e548:	49ca      	ldr	r1, [pc, #808]	; (800e874 <_dtoa_r+0x63c>)
 800e54a:	f00b 020f 	and.w	r2, fp, #15
 800e54e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e552:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e556:	ed92 7b00 	vldr	d7, [r2]
 800e55a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e55e:	f000 808d 	beq.w	800e67c <_dtoa_r+0x444>
 800e562:	4ac5      	ldr	r2, [pc, #788]	; (800e878 <_dtoa_r+0x640>)
 800e564:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e568:	ed92 6b08 	vldr	d6, [r2, #32]
 800e56c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e570:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e574:	f001 010f 	and.w	r1, r1, #15
 800e578:	2203      	movs	r2, #3
 800e57a:	48bf      	ldr	r0, [pc, #764]	; (800e878 <_dtoa_r+0x640>)
 800e57c:	2900      	cmp	r1, #0
 800e57e:	d17f      	bne.n	800e680 <_dtoa_r+0x448>
 800e580:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e584:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e588:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e58c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e58e:	2900      	cmp	r1, #0
 800e590:	f000 80b2 	beq.w	800e6f8 <_dtoa_r+0x4c0>
 800e594:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e598:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e59c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a4:	f140 80a8 	bpl.w	800e6f8 <_dtoa_r+0x4c0>
 800e5a8:	f1b9 0f00 	cmp.w	r9, #0
 800e5ac:	f000 80a4 	beq.w	800e6f8 <_dtoa_r+0x4c0>
 800e5b0:	f1ba 0f00 	cmp.w	sl, #0
 800e5b4:	dd31      	ble.n	800e61a <_dtoa_r+0x3e2>
 800e5b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e5ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e5be:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e5c2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e5c6:	3201      	adds	r2, #1
 800e5c8:	4650      	mov	r0, sl
 800e5ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e5ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e5d2:	ee07 2a90 	vmov	s15, r2
 800e5d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e5da:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e5de:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e5e2:	9c03      	ldr	r4, [sp, #12]
 800e5e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e5e8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	f040 8086 	bne.w	800e6fe <_dtoa_r+0x4c6>
 800e5f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e5f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e5fa:	ec42 1b17 	vmov	d7, r1, r2
 800e5fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e606:	f300 8272 	bgt.w	800eaee <_dtoa_r+0x8b6>
 800e60a:	eeb1 7b47 	vneg.f64	d7, d7
 800e60e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e616:	f100 8267 	bmi.w	800eae8 <_dtoa_r+0x8b0>
 800e61a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800e61e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e622:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e624:	2a00      	cmp	r2, #0
 800e626:	f2c0 8129 	blt.w	800e87c <_dtoa_r+0x644>
 800e62a:	f1bb 0f0e 	cmp.w	fp, #14
 800e62e:	f300 8125 	bgt.w	800e87c <_dtoa_r+0x644>
 800e632:	4b90      	ldr	r3, [pc, #576]	; (800e874 <_dtoa_r+0x63c>)
 800e634:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e638:	ed93 6b00 	vldr	d6, [r3]
 800e63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e63e:	2b00      	cmp	r3, #0
 800e640:	f280 80c3 	bge.w	800e7ca <_dtoa_r+0x592>
 800e644:	f1b9 0f00 	cmp.w	r9, #0
 800e648:	f300 80bf 	bgt.w	800e7ca <_dtoa_r+0x592>
 800e64c:	f040 824c 	bne.w	800eae8 <_dtoa_r+0x8b0>
 800e650:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e654:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e658:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e65c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e664:	464c      	mov	r4, r9
 800e666:	464f      	mov	r7, r9
 800e668:	f280 8222 	bge.w	800eab0 <_dtoa_r+0x878>
 800e66c:	f8dd 8000 	ldr.w	r8, [sp]
 800e670:	2331      	movs	r3, #49	; 0x31
 800e672:	f808 3b01 	strb.w	r3, [r8], #1
 800e676:	f10b 0b01 	add.w	fp, fp, #1
 800e67a:	e21e      	b.n	800eaba <_dtoa_r+0x882>
 800e67c:	2202      	movs	r2, #2
 800e67e:	e77c      	b.n	800e57a <_dtoa_r+0x342>
 800e680:	07cc      	lsls	r4, r1, #31
 800e682:	d504      	bpl.n	800e68e <_dtoa_r+0x456>
 800e684:	ed90 6b00 	vldr	d6, [r0]
 800e688:	3201      	adds	r2, #1
 800e68a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e68e:	1049      	asrs	r1, r1, #1
 800e690:	3008      	adds	r0, #8
 800e692:	e773      	b.n	800e57c <_dtoa_r+0x344>
 800e694:	d02e      	beq.n	800e6f4 <_dtoa_r+0x4bc>
 800e696:	f1cb 0100 	rsb	r1, fp, #0
 800e69a:	4a76      	ldr	r2, [pc, #472]	; (800e874 <_dtoa_r+0x63c>)
 800e69c:	f001 000f 	and.w	r0, r1, #15
 800e6a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e6a4:	ed92 7b00 	vldr	d7, [r2]
 800e6a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e6ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e6b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e6b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800e6b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e6bc:	486e      	ldr	r0, [pc, #440]	; (800e878 <_dtoa_r+0x640>)
 800e6be:	1109      	asrs	r1, r1, #4
 800e6c0:	2400      	movs	r4, #0
 800e6c2:	2202      	movs	r2, #2
 800e6c4:	b939      	cbnz	r1, 800e6d6 <_dtoa_r+0x49e>
 800e6c6:	2c00      	cmp	r4, #0
 800e6c8:	f43f af60 	beq.w	800e58c <_dtoa_r+0x354>
 800e6cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e6d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6d4:	e75a      	b.n	800e58c <_dtoa_r+0x354>
 800e6d6:	07cf      	lsls	r7, r1, #31
 800e6d8:	d509      	bpl.n	800e6ee <_dtoa_r+0x4b6>
 800e6da:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e6de:	ed90 7b00 	vldr	d7, [r0]
 800e6e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e6e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e6ea:	3201      	adds	r2, #1
 800e6ec:	2401      	movs	r4, #1
 800e6ee:	1049      	asrs	r1, r1, #1
 800e6f0:	3008      	adds	r0, #8
 800e6f2:	e7e7      	b.n	800e6c4 <_dtoa_r+0x48c>
 800e6f4:	2202      	movs	r2, #2
 800e6f6:	e749      	b.n	800e58c <_dtoa_r+0x354>
 800e6f8:	465f      	mov	r7, fp
 800e6fa:	4648      	mov	r0, r9
 800e6fc:	e765      	b.n	800e5ca <_dtoa_r+0x392>
 800e6fe:	ec42 1b17 	vmov	d7, r1, r2
 800e702:	4a5c      	ldr	r2, [pc, #368]	; (800e874 <_dtoa_r+0x63c>)
 800e704:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e708:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e70c:	9a00      	ldr	r2, [sp, #0]
 800e70e:	1814      	adds	r4, r2, r0
 800e710:	9a08      	ldr	r2, [sp, #32]
 800e712:	b352      	cbz	r2, 800e76a <_dtoa_r+0x532>
 800e714:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e718:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e71c:	f8dd 8000 	ldr.w	r8, [sp]
 800e720:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e724:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e728:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e72c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e730:	ee14 2a90 	vmov	r2, s9
 800e734:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e738:	3230      	adds	r2, #48	; 0x30
 800e73a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e73e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e746:	f808 2b01 	strb.w	r2, [r8], #1
 800e74a:	d439      	bmi.n	800e7c0 <_dtoa_r+0x588>
 800e74c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e750:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e758:	d472      	bmi.n	800e840 <_dtoa_r+0x608>
 800e75a:	45a0      	cmp	r8, r4
 800e75c:	f43f af5d 	beq.w	800e61a <_dtoa_r+0x3e2>
 800e760:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e764:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e768:	e7e0      	b.n	800e72c <_dtoa_r+0x4f4>
 800e76a:	f8dd 8000 	ldr.w	r8, [sp]
 800e76e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e772:	4621      	mov	r1, r4
 800e774:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e778:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e77c:	ee14 2a90 	vmov	r2, s9
 800e780:	3230      	adds	r2, #48	; 0x30
 800e782:	f808 2b01 	strb.w	r2, [r8], #1
 800e786:	45a0      	cmp	r8, r4
 800e788:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e78c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e790:	d118      	bne.n	800e7c4 <_dtoa_r+0x58c>
 800e792:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e796:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e79a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a2:	dc4d      	bgt.n	800e840 <_dtoa_r+0x608>
 800e7a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e7a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b0:	f57f af33 	bpl.w	800e61a <_dtoa_r+0x3e2>
 800e7b4:	4688      	mov	r8, r1
 800e7b6:	3901      	subs	r1, #1
 800e7b8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e7bc:	2b30      	cmp	r3, #48	; 0x30
 800e7be:	d0f9      	beq.n	800e7b4 <_dtoa_r+0x57c>
 800e7c0:	46bb      	mov	fp, r7
 800e7c2:	e02a      	b.n	800e81a <_dtoa_r+0x5e2>
 800e7c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e7c8:	e7d6      	b.n	800e778 <_dtoa_r+0x540>
 800e7ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7ce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e7d2:	f8dd 8000 	ldr.w	r8, [sp]
 800e7d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e7da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e7de:	ee15 3a10 	vmov	r3, s10
 800e7e2:	3330      	adds	r3, #48	; 0x30
 800e7e4:	f808 3b01 	strb.w	r3, [r8], #1
 800e7e8:	9b00      	ldr	r3, [sp, #0]
 800e7ea:	eba8 0303 	sub.w	r3, r8, r3
 800e7ee:	4599      	cmp	r9, r3
 800e7f0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e7f4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e7f8:	d133      	bne.n	800e862 <_dtoa_r+0x62a>
 800e7fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e7fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e806:	dc1a      	bgt.n	800e83e <_dtoa_r+0x606>
 800e808:	eeb4 7b46 	vcmp.f64	d7, d6
 800e80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e810:	d103      	bne.n	800e81a <_dtoa_r+0x5e2>
 800e812:	ee15 3a10 	vmov	r3, s10
 800e816:	07d9      	lsls	r1, r3, #31
 800e818:	d411      	bmi.n	800e83e <_dtoa_r+0x606>
 800e81a:	4629      	mov	r1, r5
 800e81c:	4630      	mov	r0, r6
 800e81e:	f000 fd07 	bl	800f230 <_Bfree>
 800e822:	2300      	movs	r3, #0
 800e824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e826:	f888 3000 	strb.w	r3, [r8]
 800e82a:	f10b 0301 	add.w	r3, fp, #1
 800e82e:	6013      	str	r3, [r2, #0]
 800e830:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e832:	2b00      	cmp	r3, #0
 800e834:	f43f ad4d 	beq.w	800e2d2 <_dtoa_r+0x9a>
 800e838:	f8c3 8000 	str.w	r8, [r3]
 800e83c:	e549      	b.n	800e2d2 <_dtoa_r+0x9a>
 800e83e:	465f      	mov	r7, fp
 800e840:	4643      	mov	r3, r8
 800e842:	4698      	mov	r8, r3
 800e844:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e848:	2a39      	cmp	r2, #57	; 0x39
 800e84a:	d106      	bne.n	800e85a <_dtoa_r+0x622>
 800e84c:	9a00      	ldr	r2, [sp, #0]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d1f7      	bne.n	800e842 <_dtoa_r+0x60a>
 800e852:	9900      	ldr	r1, [sp, #0]
 800e854:	2230      	movs	r2, #48	; 0x30
 800e856:	3701      	adds	r7, #1
 800e858:	700a      	strb	r2, [r1, #0]
 800e85a:	781a      	ldrb	r2, [r3, #0]
 800e85c:	3201      	adds	r2, #1
 800e85e:	701a      	strb	r2, [r3, #0]
 800e860:	e7ae      	b.n	800e7c0 <_dtoa_r+0x588>
 800e862:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e866:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e86e:	d1b2      	bne.n	800e7d6 <_dtoa_r+0x59e>
 800e870:	e7d3      	b.n	800e81a <_dtoa_r+0x5e2>
 800e872:	bf00      	nop
 800e874:	080101e8 	.word	0x080101e8
 800e878:	080101c0 	.word	0x080101c0
 800e87c:	9908      	ldr	r1, [sp, #32]
 800e87e:	2900      	cmp	r1, #0
 800e880:	f000 80d1 	beq.w	800ea26 <_dtoa_r+0x7ee>
 800e884:	9907      	ldr	r1, [sp, #28]
 800e886:	2901      	cmp	r1, #1
 800e888:	f300 80b4 	bgt.w	800e9f4 <_dtoa_r+0x7bc>
 800e88c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e88e:	2900      	cmp	r1, #0
 800e890:	f000 80ac 	beq.w	800e9ec <_dtoa_r+0x7b4>
 800e894:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e898:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e89c:	461c      	mov	r4, r3
 800e89e:	930a      	str	r3, [sp, #40]	; 0x28
 800e8a0:	9b05      	ldr	r3, [sp, #20]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	9305      	str	r3, [sp, #20]
 800e8a6:	9b06      	ldr	r3, [sp, #24]
 800e8a8:	2101      	movs	r1, #1
 800e8aa:	4413      	add	r3, r2
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	9306      	str	r3, [sp, #24]
 800e8b0:	f000 fd7a 	bl	800f3a8 <__i2b>
 800e8b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8b6:	4607      	mov	r7, r0
 800e8b8:	f1b8 0f00 	cmp.w	r8, #0
 800e8bc:	dd0d      	ble.n	800e8da <_dtoa_r+0x6a2>
 800e8be:	9a06      	ldr	r2, [sp, #24]
 800e8c0:	2a00      	cmp	r2, #0
 800e8c2:	dd0a      	ble.n	800e8da <_dtoa_r+0x6a2>
 800e8c4:	4542      	cmp	r2, r8
 800e8c6:	9905      	ldr	r1, [sp, #20]
 800e8c8:	bfa8      	it	ge
 800e8ca:	4642      	movge	r2, r8
 800e8cc:	1a89      	subs	r1, r1, r2
 800e8ce:	9105      	str	r1, [sp, #20]
 800e8d0:	9906      	ldr	r1, [sp, #24]
 800e8d2:	eba8 0802 	sub.w	r8, r8, r2
 800e8d6:	1a8a      	subs	r2, r1, r2
 800e8d8:	9206      	str	r2, [sp, #24]
 800e8da:	b303      	cbz	r3, 800e91e <_dtoa_r+0x6e6>
 800e8dc:	9a08      	ldr	r2, [sp, #32]
 800e8de:	2a00      	cmp	r2, #0
 800e8e0:	f000 80a6 	beq.w	800ea30 <_dtoa_r+0x7f8>
 800e8e4:	2c00      	cmp	r4, #0
 800e8e6:	dd13      	ble.n	800e910 <_dtoa_r+0x6d8>
 800e8e8:	4639      	mov	r1, r7
 800e8ea:	4622      	mov	r2, r4
 800e8ec:	4630      	mov	r0, r6
 800e8ee:	930c      	str	r3, [sp, #48]	; 0x30
 800e8f0:	f000 fe16 	bl	800f520 <__pow5mult>
 800e8f4:	462a      	mov	r2, r5
 800e8f6:	4601      	mov	r1, r0
 800e8f8:	4607      	mov	r7, r0
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	f000 fd6a 	bl	800f3d4 <__multiply>
 800e900:	4629      	mov	r1, r5
 800e902:	900a      	str	r0, [sp, #40]	; 0x28
 800e904:	4630      	mov	r0, r6
 800e906:	f000 fc93 	bl	800f230 <_Bfree>
 800e90a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e90c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e90e:	4615      	mov	r5, r2
 800e910:	1b1a      	subs	r2, r3, r4
 800e912:	d004      	beq.n	800e91e <_dtoa_r+0x6e6>
 800e914:	4629      	mov	r1, r5
 800e916:	4630      	mov	r0, r6
 800e918:	f000 fe02 	bl	800f520 <__pow5mult>
 800e91c:	4605      	mov	r5, r0
 800e91e:	2101      	movs	r1, #1
 800e920:	4630      	mov	r0, r6
 800e922:	f000 fd41 	bl	800f3a8 <__i2b>
 800e926:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e928:	2b00      	cmp	r3, #0
 800e92a:	4604      	mov	r4, r0
 800e92c:	f340 8082 	ble.w	800ea34 <_dtoa_r+0x7fc>
 800e930:	461a      	mov	r2, r3
 800e932:	4601      	mov	r1, r0
 800e934:	4630      	mov	r0, r6
 800e936:	f000 fdf3 	bl	800f520 <__pow5mult>
 800e93a:	9b07      	ldr	r3, [sp, #28]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	4604      	mov	r4, r0
 800e940:	dd7b      	ble.n	800ea3a <_dtoa_r+0x802>
 800e942:	2300      	movs	r3, #0
 800e944:	930a      	str	r3, [sp, #40]	; 0x28
 800e946:	6922      	ldr	r2, [r4, #16]
 800e948:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e94c:	6910      	ldr	r0, [r2, #16]
 800e94e:	f000 fcdb 	bl	800f308 <__hi0bits>
 800e952:	f1c0 0020 	rsb	r0, r0, #32
 800e956:	9b06      	ldr	r3, [sp, #24]
 800e958:	4418      	add	r0, r3
 800e95a:	f010 001f 	ands.w	r0, r0, #31
 800e95e:	f000 808d 	beq.w	800ea7c <_dtoa_r+0x844>
 800e962:	f1c0 0220 	rsb	r2, r0, #32
 800e966:	2a04      	cmp	r2, #4
 800e968:	f340 8086 	ble.w	800ea78 <_dtoa_r+0x840>
 800e96c:	f1c0 001c 	rsb	r0, r0, #28
 800e970:	9b05      	ldr	r3, [sp, #20]
 800e972:	4403      	add	r3, r0
 800e974:	9305      	str	r3, [sp, #20]
 800e976:	9b06      	ldr	r3, [sp, #24]
 800e978:	4403      	add	r3, r0
 800e97a:	4480      	add	r8, r0
 800e97c:	9306      	str	r3, [sp, #24]
 800e97e:	9b05      	ldr	r3, [sp, #20]
 800e980:	2b00      	cmp	r3, #0
 800e982:	dd05      	ble.n	800e990 <_dtoa_r+0x758>
 800e984:	4629      	mov	r1, r5
 800e986:	461a      	mov	r2, r3
 800e988:	4630      	mov	r0, r6
 800e98a:	f000 fe23 	bl	800f5d4 <__lshift>
 800e98e:	4605      	mov	r5, r0
 800e990:	9b06      	ldr	r3, [sp, #24]
 800e992:	2b00      	cmp	r3, #0
 800e994:	dd05      	ble.n	800e9a2 <_dtoa_r+0x76a>
 800e996:	4621      	mov	r1, r4
 800e998:	461a      	mov	r2, r3
 800e99a:	4630      	mov	r0, r6
 800e99c:	f000 fe1a 	bl	800f5d4 <__lshift>
 800e9a0:	4604      	mov	r4, r0
 800e9a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d06b      	beq.n	800ea80 <_dtoa_r+0x848>
 800e9a8:	4621      	mov	r1, r4
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	f000 fe7e 	bl	800f6ac <__mcmp>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	da65      	bge.n	800ea80 <_dtoa_r+0x848>
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	4629      	mov	r1, r5
 800e9b8:	220a      	movs	r2, #10
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	f000 fc5a 	bl	800f274 <__multadd>
 800e9c0:	9b08      	ldr	r3, [sp, #32]
 800e9c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e9c6:	4605      	mov	r5, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f000 8192 	beq.w	800ecf2 <_dtoa_r+0xaba>
 800e9ce:	4639      	mov	r1, r7
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	220a      	movs	r2, #10
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	f000 fc4d 	bl	800f274 <__multadd>
 800e9da:	f1ba 0f00 	cmp.w	sl, #0
 800e9de:	4607      	mov	r7, r0
 800e9e0:	f300 808e 	bgt.w	800eb00 <_dtoa_r+0x8c8>
 800e9e4:	9b07      	ldr	r3, [sp, #28]
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	dc51      	bgt.n	800ea8e <_dtoa_r+0x856>
 800e9ea:	e089      	b.n	800eb00 <_dtoa_r+0x8c8>
 800e9ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e9ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e9f2:	e751      	b.n	800e898 <_dtoa_r+0x660>
 800e9f4:	f109 34ff 	add.w	r4, r9, #4294967295
 800e9f8:	42a3      	cmp	r3, r4
 800e9fa:	bfbf      	itttt	lt
 800e9fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800e9fe:	1ae3      	sublt	r3, r4, r3
 800ea00:	18d2      	addlt	r2, r2, r3
 800ea02:	4613      	movlt	r3, r2
 800ea04:	bfb7      	itett	lt
 800ea06:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ea08:	1b1c      	subge	r4, r3, r4
 800ea0a:	4623      	movlt	r3, r4
 800ea0c:	2400      	movlt	r4, #0
 800ea0e:	f1b9 0f00 	cmp.w	r9, #0
 800ea12:	bfb5      	itete	lt
 800ea14:	9a05      	ldrlt	r2, [sp, #20]
 800ea16:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800ea1a:	eba2 0809 	sublt.w	r8, r2, r9
 800ea1e:	464a      	movge	r2, r9
 800ea20:	bfb8      	it	lt
 800ea22:	2200      	movlt	r2, #0
 800ea24:	e73b      	b.n	800e89e <_dtoa_r+0x666>
 800ea26:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ea2a:	9f08      	ldr	r7, [sp, #32]
 800ea2c:	461c      	mov	r4, r3
 800ea2e:	e743      	b.n	800e8b8 <_dtoa_r+0x680>
 800ea30:	461a      	mov	r2, r3
 800ea32:	e76f      	b.n	800e914 <_dtoa_r+0x6dc>
 800ea34:	9b07      	ldr	r3, [sp, #28]
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	dc18      	bgt.n	800ea6c <_dtoa_r+0x834>
 800ea3a:	9b02      	ldr	r3, [sp, #8]
 800ea3c:	b9b3      	cbnz	r3, 800ea6c <_dtoa_r+0x834>
 800ea3e:	9b03      	ldr	r3, [sp, #12]
 800ea40:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ea44:	b9a2      	cbnz	r2, 800ea70 <_dtoa_r+0x838>
 800ea46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ea4a:	0d12      	lsrs	r2, r2, #20
 800ea4c:	0512      	lsls	r2, r2, #20
 800ea4e:	b18a      	cbz	r2, 800ea74 <_dtoa_r+0x83c>
 800ea50:	9b05      	ldr	r3, [sp, #20]
 800ea52:	3301      	adds	r3, #1
 800ea54:	9305      	str	r3, [sp, #20]
 800ea56:	9b06      	ldr	r3, [sp, #24]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	9306      	str	r3, [sp, #24]
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ea60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	f47f af6f 	bne.w	800e946 <_dtoa_r+0x70e>
 800ea68:	2001      	movs	r0, #1
 800ea6a:	e774      	b.n	800e956 <_dtoa_r+0x71e>
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	e7f6      	b.n	800ea5e <_dtoa_r+0x826>
 800ea70:	9b02      	ldr	r3, [sp, #8]
 800ea72:	e7f4      	b.n	800ea5e <_dtoa_r+0x826>
 800ea74:	920a      	str	r2, [sp, #40]	; 0x28
 800ea76:	e7f3      	b.n	800ea60 <_dtoa_r+0x828>
 800ea78:	d081      	beq.n	800e97e <_dtoa_r+0x746>
 800ea7a:	4610      	mov	r0, r2
 800ea7c:	301c      	adds	r0, #28
 800ea7e:	e777      	b.n	800e970 <_dtoa_r+0x738>
 800ea80:	f1b9 0f00 	cmp.w	r9, #0
 800ea84:	dc37      	bgt.n	800eaf6 <_dtoa_r+0x8be>
 800ea86:	9b07      	ldr	r3, [sp, #28]
 800ea88:	2b02      	cmp	r3, #2
 800ea8a:	dd34      	ble.n	800eaf6 <_dtoa_r+0x8be>
 800ea8c:	46ca      	mov	sl, r9
 800ea8e:	f1ba 0f00 	cmp.w	sl, #0
 800ea92:	d10d      	bne.n	800eab0 <_dtoa_r+0x878>
 800ea94:	4621      	mov	r1, r4
 800ea96:	4653      	mov	r3, sl
 800ea98:	2205      	movs	r2, #5
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	f000 fbea 	bl	800f274 <__multadd>
 800eaa0:	4601      	mov	r1, r0
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	f000 fe01 	bl	800f6ac <__mcmp>
 800eaaa:	2800      	cmp	r0, #0
 800eaac:	f73f adde 	bgt.w	800e66c <_dtoa_r+0x434>
 800eab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eab2:	f8dd 8000 	ldr.w	r8, [sp]
 800eab6:	ea6f 0b03 	mvn.w	fp, r3
 800eaba:	f04f 0900 	mov.w	r9, #0
 800eabe:	4621      	mov	r1, r4
 800eac0:	4630      	mov	r0, r6
 800eac2:	f000 fbb5 	bl	800f230 <_Bfree>
 800eac6:	2f00      	cmp	r7, #0
 800eac8:	f43f aea7 	beq.w	800e81a <_dtoa_r+0x5e2>
 800eacc:	f1b9 0f00 	cmp.w	r9, #0
 800ead0:	d005      	beq.n	800eade <_dtoa_r+0x8a6>
 800ead2:	45b9      	cmp	r9, r7
 800ead4:	d003      	beq.n	800eade <_dtoa_r+0x8a6>
 800ead6:	4649      	mov	r1, r9
 800ead8:	4630      	mov	r0, r6
 800eada:	f000 fba9 	bl	800f230 <_Bfree>
 800eade:	4639      	mov	r1, r7
 800eae0:	4630      	mov	r0, r6
 800eae2:	f000 fba5 	bl	800f230 <_Bfree>
 800eae6:	e698      	b.n	800e81a <_dtoa_r+0x5e2>
 800eae8:	2400      	movs	r4, #0
 800eaea:	4627      	mov	r7, r4
 800eaec:	e7e0      	b.n	800eab0 <_dtoa_r+0x878>
 800eaee:	46bb      	mov	fp, r7
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	4607      	mov	r7, r0
 800eaf4:	e5ba      	b.n	800e66c <_dtoa_r+0x434>
 800eaf6:	9b08      	ldr	r3, [sp, #32]
 800eaf8:	46ca      	mov	sl, r9
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f000 8100 	beq.w	800ed00 <_dtoa_r+0xac8>
 800eb00:	f1b8 0f00 	cmp.w	r8, #0
 800eb04:	dd05      	ble.n	800eb12 <_dtoa_r+0x8da>
 800eb06:	4639      	mov	r1, r7
 800eb08:	4642      	mov	r2, r8
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	f000 fd62 	bl	800f5d4 <__lshift>
 800eb10:	4607      	mov	r7, r0
 800eb12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d05d      	beq.n	800ebd4 <_dtoa_r+0x99c>
 800eb18:	6879      	ldr	r1, [r7, #4]
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	f000 fb48 	bl	800f1b0 <_Balloc>
 800eb20:	4680      	mov	r8, r0
 800eb22:	b928      	cbnz	r0, 800eb30 <_dtoa_r+0x8f8>
 800eb24:	4b82      	ldr	r3, [pc, #520]	; (800ed30 <_dtoa_r+0xaf8>)
 800eb26:	4602      	mov	r2, r0
 800eb28:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eb2c:	f7ff bb9a 	b.w	800e264 <_dtoa_r+0x2c>
 800eb30:	693a      	ldr	r2, [r7, #16]
 800eb32:	3202      	adds	r2, #2
 800eb34:	0092      	lsls	r2, r2, #2
 800eb36:	f107 010c 	add.w	r1, r7, #12
 800eb3a:	300c      	adds	r0, #12
 800eb3c:	f000 fb2a 	bl	800f194 <memcpy>
 800eb40:	2201      	movs	r2, #1
 800eb42:	4641      	mov	r1, r8
 800eb44:	4630      	mov	r0, r6
 800eb46:	f000 fd45 	bl	800f5d4 <__lshift>
 800eb4a:	9b00      	ldr	r3, [sp, #0]
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	9305      	str	r3, [sp, #20]
 800eb50:	9b00      	ldr	r3, [sp, #0]
 800eb52:	4453      	add	r3, sl
 800eb54:	9309      	str	r3, [sp, #36]	; 0x24
 800eb56:	9b02      	ldr	r3, [sp, #8]
 800eb58:	f003 0301 	and.w	r3, r3, #1
 800eb5c:	46b9      	mov	r9, r7
 800eb5e:	9308      	str	r3, [sp, #32]
 800eb60:	4607      	mov	r7, r0
 800eb62:	9b05      	ldr	r3, [sp, #20]
 800eb64:	4621      	mov	r1, r4
 800eb66:	3b01      	subs	r3, #1
 800eb68:	4628      	mov	r0, r5
 800eb6a:	9302      	str	r3, [sp, #8]
 800eb6c:	f7ff fad8 	bl	800e120 <quorem>
 800eb70:	4603      	mov	r3, r0
 800eb72:	3330      	adds	r3, #48	; 0x30
 800eb74:	9006      	str	r0, [sp, #24]
 800eb76:	4649      	mov	r1, r9
 800eb78:	4628      	mov	r0, r5
 800eb7a:	930a      	str	r3, [sp, #40]	; 0x28
 800eb7c:	f000 fd96 	bl	800f6ac <__mcmp>
 800eb80:	463a      	mov	r2, r7
 800eb82:	4682      	mov	sl, r0
 800eb84:	4621      	mov	r1, r4
 800eb86:	4630      	mov	r0, r6
 800eb88:	f000 fdac 	bl	800f6e4 <__mdiff>
 800eb8c:	68c2      	ldr	r2, [r0, #12]
 800eb8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb90:	4680      	mov	r8, r0
 800eb92:	bb0a      	cbnz	r2, 800ebd8 <_dtoa_r+0x9a0>
 800eb94:	4601      	mov	r1, r0
 800eb96:	4628      	mov	r0, r5
 800eb98:	f000 fd88 	bl	800f6ac <__mcmp>
 800eb9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb9e:	4602      	mov	r2, r0
 800eba0:	4641      	mov	r1, r8
 800eba2:	4630      	mov	r0, r6
 800eba4:	920e      	str	r2, [sp, #56]	; 0x38
 800eba6:	930a      	str	r3, [sp, #40]	; 0x28
 800eba8:	f000 fb42 	bl	800f230 <_Bfree>
 800ebac:	9b07      	ldr	r3, [sp, #28]
 800ebae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebb0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ebb4:	ea43 0102 	orr.w	r1, r3, r2
 800ebb8:	9b08      	ldr	r3, [sp, #32]
 800ebba:	430b      	orrs	r3, r1
 800ebbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebbe:	d10d      	bne.n	800ebdc <_dtoa_r+0x9a4>
 800ebc0:	2b39      	cmp	r3, #57	; 0x39
 800ebc2:	d029      	beq.n	800ec18 <_dtoa_r+0x9e0>
 800ebc4:	f1ba 0f00 	cmp.w	sl, #0
 800ebc8:	dd01      	ble.n	800ebce <_dtoa_r+0x996>
 800ebca:	9b06      	ldr	r3, [sp, #24]
 800ebcc:	3331      	adds	r3, #49	; 0x31
 800ebce:	9a02      	ldr	r2, [sp, #8]
 800ebd0:	7013      	strb	r3, [r2, #0]
 800ebd2:	e774      	b.n	800eabe <_dtoa_r+0x886>
 800ebd4:	4638      	mov	r0, r7
 800ebd6:	e7b8      	b.n	800eb4a <_dtoa_r+0x912>
 800ebd8:	2201      	movs	r2, #1
 800ebda:	e7e1      	b.n	800eba0 <_dtoa_r+0x968>
 800ebdc:	f1ba 0f00 	cmp.w	sl, #0
 800ebe0:	db06      	blt.n	800ebf0 <_dtoa_r+0x9b8>
 800ebe2:	9907      	ldr	r1, [sp, #28]
 800ebe4:	ea41 0a0a 	orr.w	sl, r1, sl
 800ebe8:	9908      	ldr	r1, [sp, #32]
 800ebea:	ea5a 0101 	orrs.w	r1, sl, r1
 800ebee:	d120      	bne.n	800ec32 <_dtoa_r+0x9fa>
 800ebf0:	2a00      	cmp	r2, #0
 800ebf2:	ddec      	ble.n	800ebce <_dtoa_r+0x996>
 800ebf4:	4629      	mov	r1, r5
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	4630      	mov	r0, r6
 800ebfa:	9305      	str	r3, [sp, #20]
 800ebfc:	f000 fcea 	bl	800f5d4 <__lshift>
 800ec00:	4621      	mov	r1, r4
 800ec02:	4605      	mov	r5, r0
 800ec04:	f000 fd52 	bl	800f6ac <__mcmp>
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	9b05      	ldr	r3, [sp, #20]
 800ec0c:	dc02      	bgt.n	800ec14 <_dtoa_r+0x9dc>
 800ec0e:	d1de      	bne.n	800ebce <_dtoa_r+0x996>
 800ec10:	07da      	lsls	r2, r3, #31
 800ec12:	d5dc      	bpl.n	800ebce <_dtoa_r+0x996>
 800ec14:	2b39      	cmp	r3, #57	; 0x39
 800ec16:	d1d8      	bne.n	800ebca <_dtoa_r+0x992>
 800ec18:	9a02      	ldr	r2, [sp, #8]
 800ec1a:	2339      	movs	r3, #57	; 0x39
 800ec1c:	7013      	strb	r3, [r2, #0]
 800ec1e:	4643      	mov	r3, r8
 800ec20:	4698      	mov	r8, r3
 800ec22:	3b01      	subs	r3, #1
 800ec24:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ec28:	2a39      	cmp	r2, #57	; 0x39
 800ec2a:	d051      	beq.n	800ecd0 <_dtoa_r+0xa98>
 800ec2c:	3201      	adds	r2, #1
 800ec2e:	701a      	strb	r2, [r3, #0]
 800ec30:	e745      	b.n	800eabe <_dtoa_r+0x886>
 800ec32:	2a00      	cmp	r2, #0
 800ec34:	dd03      	ble.n	800ec3e <_dtoa_r+0xa06>
 800ec36:	2b39      	cmp	r3, #57	; 0x39
 800ec38:	d0ee      	beq.n	800ec18 <_dtoa_r+0x9e0>
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	e7c7      	b.n	800ebce <_dtoa_r+0x996>
 800ec3e:	9a05      	ldr	r2, [sp, #20]
 800ec40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec42:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ec46:	428a      	cmp	r2, r1
 800ec48:	d02b      	beq.n	800eca2 <_dtoa_r+0xa6a>
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	220a      	movs	r2, #10
 800ec50:	4630      	mov	r0, r6
 800ec52:	f000 fb0f 	bl	800f274 <__multadd>
 800ec56:	45b9      	cmp	r9, r7
 800ec58:	4605      	mov	r5, r0
 800ec5a:	f04f 0300 	mov.w	r3, #0
 800ec5e:	f04f 020a 	mov.w	r2, #10
 800ec62:	4649      	mov	r1, r9
 800ec64:	4630      	mov	r0, r6
 800ec66:	d107      	bne.n	800ec78 <_dtoa_r+0xa40>
 800ec68:	f000 fb04 	bl	800f274 <__multadd>
 800ec6c:	4681      	mov	r9, r0
 800ec6e:	4607      	mov	r7, r0
 800ec70:	9b05      	ldr	r3, [sp, #20]
 800ec72:	3301      	adds	r3, #1
 800ec74:	9305      	str	r3, [sp, #20]
 800ec76:	e774      	b.n	800eb62 <_dtoa_r+0x92a>
 800ec78:	f000 fafc 	bl	800f274 <__multadd>
 800ec7c:	4639      	mov	r1, r7
 800ec7e:	4681      	mov	r9, r0
 800ec80:	2300      	movs	r3, #0
 800ec82:	220a      	movs	r2, #10
 800ec84:	4630      	mov	r0, r6
 800ec86:	f000 faf5 	bl	800f274 <__multadd>
 800ec8a:	4607      	mov	r7, r0
 800ec8c:	e7f0      	b.n	800ec70 <_dtoa_r+0xa38>
 800ec8e:	f1ba 0f00 	cmp.w	sl, #0
 800ec92:	9a00      	ldr	r2, [sp, #0]
 800ec94:	bfcc      	ite	gt
 800ec96:	46d0      	movgt	r8, sl
 800ec98:	f04f 0801 	movle.w	r8, #1
 800ec9c:	4490      	add	r8, r2
 800ec9e:	f04f 0900 	mov.w	r9, #0
 800eca2:	4629      	mov	r1, r5
 800eca4:	2201      	movs	r2, #1
 800eca6:	4630      	mov	r0, r6
 800eca8:	9302      	str	r3, [sp, #8]
 800ecaa:	f000 fc93 	bl	800f5d4 <__lshift>
 800ecae:	4621      	mov	r1, r4
 800ecb0:	4605      	mov	r5, r0
 800ecb2:	f000 fcfb 	bl	800f6ac <__mcmp>
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	dcb1      	bgt.n	800ec1e <_dtoa_r+0x9e6>
 800ecba:	d102      	bne.n	800ecc2 <_dtoa_r+0xa8a>
 800ecbc:	9b02      	ldr	r3, [sp, #8]
 800ecbe:	07db      	lsls	r3, r3, #31
 800ecc0:	d4ad      	bmi.n	800ec1e <_dtoa_r+0x9e6>
 800ecc2:	4643      	mov	r3, r8
 800ecc4:	4698      	mov	r8, r3
 800ecc6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecca:	2a30      	cmp	r2, #48	; 0x30
 800eccc:	d0fa      	beq.n	800ecc4 <_dtoa_r+0xa8c>
 800ecce:	e6f6      	b.n	800eabe <_dtoa_r+0x886>
 800ecd0:	9a00      	ldr	r2, [sp, #0]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d1a4      	bne.n	800ec20 <_dtoa_r+0x9e8>
 800ecd6:	f10b 0b01 	add.w	fp, fp, #1
 800ecda:	2331      	movs	r3, #49	; 0x31
 800ecdc:	e778      	b.n	800ebd0 <_dtoa_r+0x998>
 800ecde:	4b15      	ldr	r3, [pc, #84]	; (800ed34 <_dtoa_r+0xafc>)
 800ece0:	f7ff bb12 	b.w	800e308 <_dtoa_r+0xd0>
 800ece4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	f47f aaee 	bne.w	800e2c8 <_dtoa_r+0x90>
 800ecec:	4b12      	ldr	r3, [pc, #72]	; (800ed38 <_dtoa_r+0xb00>)
 800ecee:	f7ff bb0b 	b.w	800e308 <_dtoa_r+0xd0>
 800ecf2:	f1ba 0f00 	cmp.w	sl, #0
 800ecf6:	dc03      	bgt.n	800ed00 <_dtoa_r+0xac8>
 800ecf8:	9b07      	ldr	r3, [sp, #28]
 800ecfa:	2b02      	cmp	r3, #2
 800ecfc:	f73f aec7 	bgt.w	800ea8e <_dtoa_r+0x856>
 800ed00:	f8dd 8000 	ldr.w	r8, [sp]
 800ed04:	4621      	mov	r1, r4
 800ed06:	4628      	mov	r0, r5
 800ed08:	f7ff fa0a 	bl	800e120 <quorem>
 800ed0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ed10:	f808 3b01 	strb.w	r3, [r8], #1
 800ed14:	9a00      	ldr	r2, [sp, #0]
 800ed16:	eba8 0202 	sub.w	r2, r8, r2
 800ed1a:	4592      	cmp	sl, r2
 800ed1c:	ddb7      	ble.n	800ec8e <_dtoa_r+0xa56>
 800ed1e:	4629      	mov	r1, r5
 800ed20:	2300      	movs	r3, #0
 800ed22:	220a      	movs	r2, #10
 800ed24:	4630      	mov	r0, r6
 800ed26:	f000 faa5 	bl	800f274 <__multadd>
 800ed2a:	4605      	mov	r5, r0
 800ed2c:	e7ea      	b.n	800ed04 <_dtoa_r+0xacc>
 800ed2e:	bf00      	nop
 800ed30:	080100eb 	.word	0x080100eb
 800ed34:	08010044 	.word	0x08010044
 800ed38:	08010068 	.word	0x08010068

0800ed3c <__sflush_r>:
 800ed3c:	898a      	ldrh	r2, [r1, #12]
 800ed3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed42:	4605      	mov	r5, r0
 800ed44:	0710      	lsls	r0, r2, #28
 800ed46:	460c      	mov	r4, r1
 800ed48:	d458      	bmi.n	800edfc <__sflush_r+0xc0>
 800ed4a:	684b      	ldr	r3, [r1, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	dc05      	bgt.n	800ed5c <__sflush_r+0x20>
 800ed50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	dc02      	bgt.n	800ed5c <__sflush_r+0x20>
 800ed56:	2000      	movs	r0, #0
 800ed58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed5e:	2e00      	cmp	r6, #0
 800ed60:	d0f9      	beq.n	800ed56 <__sflush_r+0x1a>
 800ed62:	2300      	movs	r3, #0
 800ed64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed68:	682f      	ldr	r7, [r5, #0]
 800ed6a:	602b      	str	r3, [r5, #0]
 800ed6c:	d032      	beq.n	800edd4 <__sflush_r+0x98>
 800ed6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed70:	89a3      	ldrh	r3, [r4, #12]
 800ed72:	075a      	lsls	r2, r3, #29
 800ed74:	d505      	bpl.n	800ed82 <__sflush_r+0x46>
 800ed76:	6863      	ldr	r3, [r4, #4]
 800ed78:	1ac0      	subs	r0, r0, r3
 800ed7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed7c:	b10b      	cbz	r3, 800ed82 <__sflush_r+0x46>
 800ed7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed80:	1ac0      	subs	r0, r0, r3
 800ed82:	2300      	movs	r3, #0
 800ed84:	4602      	mov	r2, r0
 800ed86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed88:	6a21      	ldr	r1, [r4, #32]
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	47b0      	blx	r6
 800ed8e:	1c43      	adds	r3, r0, #1
 800ed90:	89a3      	ldrh	r3, [r4, #12]
 800ed92:	d106      	bne.n	800eda2 <__sflush_r+0x66>
 800ed94:	6829      	ldr	r1, [r5, #0]
 800ed96:	291d      	cmp	r1, #29
 800ed98:	d82c      	bhi.n	800edf4 <__sflush_r+0xb8>
 800ed9a:	4a2a      	ldr	r2, [pc, #168]	; (800ee44 <__sflush_r+0x108>)
 800ed9c:	40ca      	lsrs	r2, r1
 800ed9e:	07d6      	lsls	r6, r2, #31
 800eda0:	d528      	bpl.n	800edf4 <__sflush_r+0xb8>
 800eda2:	2200      	movs	r2, #0
 800eda4:	6062      	str	r2, [r4, #4]
 800eda6:	04d9      	lsls	r1, r3, #19
 800eda8:	6922      	ldr	r2, [r4, #16]
 800edaa:	6022      	str	r2, [r4, #0]
 800edac:	d504      	bpl.n	800edb8 <__sflush_r+0x7c>
 800edae:	1c42      	adds	r2, r0, #1
 800edb0:	d101      	bne.n	800edb6 <__sflush_r+0x7a>
 800edb2:	682b      	ldr	r3, [r5, #0]
 800edb4:	b903      	cbnz	r3, 800edb8 <__sflush_r+0x7c>
 800edb6:	6560      	str	r0, [r4, #84]	; 0x54
 800edb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edba:	602f      	str	r7, [r5, #0]
 800edbc:	2900      	cmp	r1, #0
 800edbe:	d0ca      	beq.n	800ed56 <__sflush_r+0x1a>
 800edc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edc4:	4299      	cmp	r1, r3
 800edc6:	d002      	beq.n	800edce <__sflush_r+0x92>
 800edc8:	4628      	mov	r0, r5
 800edca:	f000 fd7f 	bl	800f8cc <_free_r>
 800edce:	2000      	movs	r0, #0
 800edd0:	6360      	str	r0, [r4, #52]	; 0x34
 800edd2:	e7c1      	b.n	800ed58 <__sflush_r+0x1c>
 800edd4:	6a21      	ldr	r1, [r4, #32]
 800edd6:	2301      	movs	r3, #1
 800edd8:	4628      	mov	r0, r5
 800edda:	47b0      	blx	r6
 800eddc:	1c41      	adds	r1, r0, #1
 800edde:	d1c7      	bne.n	800ed70 <__sflush_r+0x34>
 800ede0:	682b      	ldr	r3, [r5, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d0c4      	beq.n	800ed70 <__sflush_r+0x34>
 800ede6:	2b1d      	cmp	r3, #29
 800ede8:	d001      	beq.n	800edee <__sflush_r+0xb2>
 800edea:	2b16      	cmp	r3, #22
 800edec:	d101      	bne.n	800edf2 <__sflush_r+0xb6>
 800edee:	602f      	str	r7, [r5, #0]
 800edf0:	e7b1      	b.n	800ed56 <__sflush_r+0x1a>
 800edf2:	89a3      	ldrh	r3, [r4, #12]
 800edf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edf8:	81a3      	strh	r3, [r4, #12]
 800edfa:	e7ad      	b.n	800ed58 <__sflush_r+0x1c>
 800edfc:	690f      	ldr	r7, [r1, #16]
 800edfe:	2f00      	cmp	r7, #0
 800ee00:	d0a9      	beq.n	800ed56 <__sflush_r+0x1a>
 800ee02:	0793      	lsls	r3, r2, #30
 800ee04:	680e      	ldr	r6, [r1, #0]
 800ee06:	bf08      	it	eq
 800ee08:	694b      	ldreq	r3, [r1, #20]
 800ee0a:	600f      	str	r7, [r1, #0]
 800ee0c:	bf18      	it	ne
 800ee0e:	2300      	movne	r3, #0
 800ee10:	eba6 0807 	sub.w	r8, r6, r7
 800ee14:	608b      	str	r3, [r1, #8]
 800ee16:	f1b8 0f00 	cmp.w	r8, #0
 800ee1a:	dd9c      	ble.n	800ed56 <__sflush_r+0x1a>
 800ee1c:	6a21      	ldr	r1, [r4, #32]
 800ee1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee20:	4643      	mov	r3, r8
 800ee22:	463a      	mov	r2, r7
 800ee24:	4628      	mov	r0, r5
 800ee26:	47b0      	blx	r6
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	dc06      	bgt.n	800ee3a <__sflush_r+0xfe>
 800ee2c:	89a3      	ldrh	r3, [r4, #12]
 800ee2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee32:	81a3      	strh	r3, [r4, #12]
 800ee34:	f04f 30ff 	mov.w	r0, #4294967295
 800ee38:	e78e      	b.n	800ed58 <__sflush_r+0x1c>
 800ee3a:	4407      	add	r7, r0
 800ee3c:	eba8 0800 	sub.w	r8, r8, r0
 800ee40:	e7e9      	b.n	800ee16 <__sflush_r+0xda>
 800ee42:	bf00      	nop
 800ee44:	20400001 	.word	0x20400001

0800ee48 <_fflush_r>:
 800ee48:	b538      	push	{r3, r4, r5, lr}
 800ee4a:	690b      	ldr	r3, [r1, #16]
 800ee4c:	4605      	mov	r5, r0
 800ee4e:	460c      	mov	r4, r1
 800ee50:	b913      	cbnz	r3, 800ee58 <_fflush_r+0x10>
 800ee52:	2500      	movs	r5, #0
 800ee54:	4628      	mov	r0, r5
 800ee56:	bd38      	pop	{r3, r4, r5, pc}
 800ee58:	b118      	cbz	r0, 800ee62 <_fflush_r+0x1a>
 800ee5a:	6983      	ldr	r3, [r0, #24]
 800ee5c:	b90b      	cbnz	r3, 800ee62 <_fflush_r+0x1a>
 800ee5e:	f000 f887 	bl	800ef70 <__sinit>
 800ee62:	4b14      	ldr	r3, [pc, #80]	; (800eeb4 <_fflush_r+0x6c>)
 800ee64:	429c      	cmp	r4, r3
 800ee66:	d11b      	bne.n	800eea0 <_fflush_r+0x58>
 800ee68:	686c      	ldr	r4, [r5, #4]
 800ee6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d0ef      	beq.n	800ee52 <_fflush_r+0xa>
 800ee72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee74:	07d0      	lsls	r0, r2, #31
 800ee76:	d404      	bmi.n	800ee82 <_fflush_r+0x3a>
 800ee78:	0599      	lsls	r1, r3, #22
 800ee7a:	d402      	bmi.n	800ee82 <_fflush_r+0x3a>
 800ee7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee7e:	f000 f91a 	bl	800f0b6 <__retarget_lock_acquire_recursive>
 800ee82:	4628      	mov	r0, r5
 800ee84:	4621      	mov	r1, r4
 800ee86:	f7ff ff59 	bl	800ed3c <__sflush_r>
 800ee8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee8c:	07da      	lsls	r2, r3, #31
 800ee8e:	4605      	mov	r5, r0
 800ee90:	d4e0      	bmi.n	800ee54 <_fflush_r+0xc>
 800ee92:	89a3      	ldrh	r3, [r4, #12]
 800ee94:	059b      	lsls	r3, r3, #22
 800ee96:	d4dd      	bmi.n	800ee54 <_fflush_r+0xc>
 800ee98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee9a:	f000 f90d 	bl	800f0b8 <__retarget_lock_release_recursive>
 800ee9e:	e7d9      	b.n	800ee54 <_fflush_r+0xc>
 800eea0:	4b05      	ldr	r3, [pc, #20]	; (800eeb8 <_fflush_r+0x70>)
 800eea2:	429c      	cmp	r4, r3
 800eea4:	d101      	bne.n	800eeaa <_fflush_r+0x62>
 800eea6:	68ac      	ldr	r4, [r5, #8]
 800eea8:	e7df      	b.n	800ee6a <_fflush_r+0x22>
 800eeaa:	4b04      	ldr	r3, [pc, #16]	; (800eebc <_fflush_r+0x74>)
 800eeac:	429c      	cmp	r4, r3
 800eeae:	bf08      	it	eq
 800eeb0:	68ec      	ldreq	r4, [r5, #12]
 800eeb2:	e7da      	b.n	800ee6a <_fflush_r+0x22>
 800eeb4:	0801011c 	.word	0x0801011c
 800eeb8:	0801013c 	.word	0x0801013c
 800eebc:	080100fc 	.word	0x080100fc

0800eec0 <std>:
 800eec0:	2300      	movs	r3, #0
 800eec2:	b510      	push	{r4, lr}
 800eec4:	4604      	mov	r4, r0
 800eec6:	e9c0 3300 	strd	r3, r3, [r0]
 800eeca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eece:	6083      	str	r3, [r0, #8]
 800eed0:	8181      	strh	r1, [r0, #12]
 800eed2:	6643      	str	r3, [r0, #100]	; 0x64
 800eed4:	81c2      	strh	r2, [r0, #14]
 800eed6:	6183      	str	r3, [r0, #24]
 800eed8:	4619      	mov	r1, r3
 800eeda:	2208      	movs	r2, #8
 800eedc:	305c      	adds	r0, #92	; 0x5c
 800eede:	f7fe fb9f 	bl	800d620 <memset>
 800eee2:	4b05      	ldr	r3, [pc, #20]	; (800eef8 <std+0x38>)
 800eee4:	6263      	str	r3, [r4, #36]	; 0x24
 800eee6:	4b05      	ldr	r3, [pc, #20]	; (800eefc <std+0x3c>)
 800eee8:	62a3      	str	r3, [r4, #40]	; 0x28
 800eeea:	4b05      	ldr	r3, [pc, #20]	; (800ef00 <std+0x40>)
 800eeec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eeee:	4b05      	ldr	r3, [pc, #20]	; (800ef04 <std+0x44>)
 800eef0:	6224      	str	r4, [r4, #32]
 800eef2:	6323      	str	r3, [r4, #48]	; 0x30
 800eef4:	bd10      	pop	{r4, pc}
 800eef6:	bf00      	nop
 800eef8:	0800fa41 	.word	0x0800fa41
 800eefc:	0800fa63 	.word	0x0800fa63
 800ef00:	0800fa9b 	.word	0x0800fa9b
 800ef04:	0800fabf 	.word	0x0800fabf

0800ef08 <_cleanup_r>:
 800ef08:	4901      	ldr	r1, [pc, #4]	; (800ef10 <_cleanup_r+0x8>)
 800ef0a:	f000 b8af 	b.w	800f06c <_fwalk_reent>
 800ef0e:	bf00      	nop
 800ef10:	0800ee49 	.word	0x0800ee49

0800ef14 <__sfmoreglue>:
 800ef14:	b570      	push	{r4, r5, r6, lr}
 800ef16:	1e4a      	subs	r2, r1, #1
 800ef18:	2568      	movs	r5, #104	; 0x68
 800ef1a:	4355      	muls	r5, r2
 800ef1c:	460e      	mov	r6, r1
 800ef1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ef22:	f000 fd23 	bl	800f96c <_malloc_r>
 800ef26:	4604      	mov	r4, r0
 800ef28:	b140      	cbz	r0, 800ef3c <__sfmoreglue+0x28>
 800ef2a:	2100      	movs	r1, #0
 800ef2c:	e9c0 1600 	strd	r1, r6, [r0]
 800ef30:	300c      	adds	r0, #12
 800ef32:	60a0      	str	r0, [r4, #8]
 800ef34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ef38:	f7fe fb72 	bl	800d620 <memset>
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	bd70      	pop	{r4, r5, r6, pc}

0800ef40 <__sfp_lock_acquire>:
 800ef40:	4801      	ldr	r0, [pc, #4]	; (800ef48 <__sfp_lock_acquire+0x8>)
 800ef42:	f000 b8b8 	b.w	800f0b6 <__retarget_lock_acquire_recursive>
 800ef46:	bf00      	nop
 800ef48:	24000580 	.word	0x24000580

0800ef4c <__sfp_lock_release>:
 800ef4c:	4801      	ldr	r0, [pc, #4]	; (800ef54 <__sfp_lock_release+0x8>)
 800ef4e:	f000 b8b3 	b.w	800f0b8 <__retarget_lock_release_recursive>
 800ef52:	bf00      	nop
 800ef54:	24000580 	.word	0x24000580

0800ef58 <__sinit_lock_acquire>:
 800ef58:	4801      	ldr	r0, [pc, #4]	; (800ef60 <__sinit_lock_acquire+0x8>)
 800ef5a:	f000 b8ac 	b.w	800f0b6 <__retarget_lock_acquire_recursive>
 800ef5e:	bf00      	nop
 800ef60:	2400057b 	.word	0x2400057b

0800ef64 <__sinit_lock_release>:
 800ef64:	4801      	ldr	r0, [pc, #4]	; (800ef6c <__sinit_lock_release+0x8>)
 800ef66:	f000 b8a7 	b.w	800f0b8 <__retarget_lock_release_recursive>
 800ef6a:	bf00      	nop
 800ef6c:	2400057b 	.word	0x2400057b

0800ef70 <__sinit>:
 800ef70:	b510      	push	{r4, lr}
 800ef72:	4604      	mov	r4, r0
 800ef74:	f7ff fff0 	bl	800ef58 <__sinit_lock_acquire>
 800ef78:	69a3      	ldr	r3, [r4, #24]
 800ef7a:	b11b      	cbz	r3, 800ef84 <__sinit+0x14>
 800ef7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef80:	f7ff bff0 	b.w	800ef64 <__sinit_lock_release>
 800ef84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ef88:	6523      	str	r3, [r4, #80]	; 0x50
 800ef8a:	4b13      	ldr	r3, [pc, #76]	; (800efd8 <__sinit+0x68>)
 800ef8c:	4a13      	ldr	r2, [pc, #76]	; (800efdc <__sinit+0x6c>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	62a2      	str	r2, [r4, #40]	; 0x28
 800ef92:	42a3      	cmp	r3, r4
 800ef94:	bf04      	itt	eq
 800ef96:	2301      	moveq	r3, #1
 800ef98:	61a3      	streq	r3, [r4, #24]
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f000 f820 	bl	800efe0 <__sfp>
 800efa0:	6060      	str	r0, [r4, #4]
 800efa2:	4620      	mov	r0, r4
 800efa4:	f000 f81c 	bl	800efe0 <__sfp>
 800efa8:	60a0      	str	r0, [r4, #8]
 800efaa:	4620      	mov	r0, r4
 800efac:	f000 f818 	bl	800efe0 <__sfp>
 800efb0:	2200      	movs	r2, #0
 800efb2:	60e0      	str	r0, [r4, #12]
 800efb4:	2104      	movs	r1, #4
 800efb6:	6860      	ldr	r0, [r4, #4]
 800efb8:	f7ff ff82 	bl	800eec0 <std>
 800efbc:	68a0      	ldr	r0, [r4, #8]
 800efbe:	2201      	movs	r2, #1
 800efc0:	2109      	movs	r1, #9
 800efc2:	f7ff ff7d 	bl	800eec0 <std>
 800efc6:	68e0      	ldr	r0, [r4, #12]
 800efc8:	2202      	movs	r2, #2
 800efca:	2112      	movs	r1, #18
 800efcc:	f7ff ff78 	bl	800eec0 <std>
 800efd0:	2301      	movs	r3, #1
 800efd2:	61a3      	str	r3, [r4, #24]
 800efd4:	e7d2      	b.n	800ef7c <__sinit+0xc>
 800efd6:	bf00      	nop
 800efd8:	08010030 	.word	0x08010030
 800efdc:	0800ef09 	.word	0x0800ef09

0800efe0 <__sfp>:
 800efe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efe2:	4607      	mov	r7, r0
 800efe4:	f7ff ffac 	bl	800ef40 <__sfp_lock_acquire>
 800efe8:	4b1e      	ldr	r3, [pc, #120]	; (800f064 <__sfp+0x84>)
 800efea:	681e      	ldr	r6, [r3, #0]
 800efec:	69b3      	ldr	r3, [r6, #24]
 800efee:	b913      	cbnz	r3, 800eff6 <__sfp+0x16>
 800eff0:	4630      	mov	r0, r6
 800eff2:	f7ff ffbd 	bl	800ef70 <__sinit>
 800eff6:	3648      	adds	r6, #72	; 0x48
 800eff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800effc:	3b01      	subs	r3, #1
 800effe:	d503      	bpl.n	800f008 <__sfp+0x28>
 800f000:	6833      	ldr	r3, [r6, #0]
 800f002:	b30b      	cbz	r3, 800f048 <__sfp+0x68>
 800f004:	6836      	ldr	r6, [r6, #0]
 800f006:	e7f7      	b.n	800eff8 <__sfp+0x18>
 800f008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f00c:	b9d5      	cbnz	r5, 800f044 <__sfp+0x64>
 800f00e:	4b16      	ldr	r3, [pc, #88]	; (800f068 <__sfp+0x88>)
 800f010:	60e3      	str	r3, [r4, #12]
 800f012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f016:	6665      	str	r5, [r4, #100]	; 0x64
 800f018:	f000 f84c 	bl	800f0b4 <__retarget_lock_init_recursive>
 800f01c:	f7ff ff96 	bl	800ef4c <__sfp_lock_release>
 800f020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f028:	6025      	str	r5, [r4, #0]
 800f02a:	61a5      	str	r5, [r4, #24]
 800f02c:	2208      	movs	r2, #8
 800f02e:	4629      	mov	r1, r5
 800f030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f034:	f7fe faf4 	bl	800d620 <memset>
 800f038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f03c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f040:	4620      	mov	r0, r4
 800f042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f044:	3468      	adds	r4, #104	; 0x68
 800f046:	e7d9      	b.n	800effc <__sfp+0x1c>
 800f048:	2104      	movs	r1, #4
 800f04a:	4638      	mov	r0, r7
 800f04c:	f7ff ff62 	bl	800ef14 <__sfmoreglue>
 800f050:	4604      	mov	r4, r0
 800f052:	6030      	str	r0, [r6, #0]
 800f054:	2800      	cmp	r0, #0
 800f056:	d1d5      	bne.n	800f004 <__sfp+0x24>
 800f058:	f7ff ff78 	bl	800ef4c <__sfp_lock_release>
 800f05c:	230c      	movs	r3, #12
 800f05e:	603b      	str	r3, [r7, #0]
 800f060:	e7ee      	b.n	800f040 <__sfp+0x60>
 800f062:	bf00      	nop
 800f064:	08010030 	.word	0x08010030
 800f068:	ffff0001 	.word	0xffff0001

0800f06c <_fwalk_reent>:
 800f06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f070:	4606      	mov	r6, r0
 800f072:	4688      	mov	r8, r1
 800f074:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f078:	2700      	movs	r7, #0
 800f07a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f07e:	f1b9 0901 	subs.w	r9, r9, #1
 800f082:	d505      	bpl.n	800f090 <_fwalk_reent+0x24>
 800f084:	6824      	ldr	r4, [r4, #0]
 800f086:	2c00      	cmp	r4, #0
 800f088:	d1f7      	bne.n	800f07a <_fwalk_reent+0xe>
 800f08a:	4638      	mov	r0, r7
 800f08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f090:	89ab      	ldrh	r3, [r5, #12]
 800f092:	2b01      	cmp	r3, #1
 800f094:	d907      	bls.n	800f0a6 <_fwalk_reent+0x3a>
 800f096:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f09a:	3301      	adds	r3, #1
 800f09c:	d003      	beq.n	800f0a6 <_fwalk_reent+0x3a>
 800f09e:	4629      	mov	r1, r5
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	47c0      	blx	r8
 800f0a4:	4307      	orrs	r7, r0
 800f0a6:	3568      	adds	r5, #104	; 0x68
 800f0a8:	e7e9      	b.n	800f07e <_fwalk_reent+0x12>
	...

0800f0ac <_localeconv_r>:
 800f0ac:	4800      	ldr	r0, [pc, #0]	; (800f0b0 <_localeconv_r+0x4>)
 800f0ae:	4770      	bx	lr
 800f0b0:	24000170 	.word	0x24000170

0800f0b4 <__retarget_lock_init_recursive>:
 800f0b4:	4770      	bx	lr

0800f0b6 <__retarget_lock_acquire_recursive>:
 800f0b6:	4770      	bx	lr

0800f0b8 <__retarget_lock_release_recursive>:
 800f0b8:	4770      	bx	lr

0800f0ba <__swhatbuf_r>:
 800f0ba:	b570      	push	{r4, r5, r6, lr}
 800f0bc:	460e      	mov	r6, r1
 800f0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0c2:	2900      	cmp	r1, #0
 800f0c4:	b096      	sub	sp, #88	; 0x58
 800f0c6:	4614      	mov	r4, r2
 800f0c8:	461d      	mov	r5, r3
 800f0ca:	da07      	bge.n	800f0dc <__swhatbuf_r+0x22>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	602b      	str	r3, [r5, #0]
 800f0d0:	89b3      	ldrh	r3, [r6, #12]
 800f0d2:	061a      	lsls	r2, r3, #24
 800f0d4:	d410      	bmi.n	800f0f8 <__swhatbuf_r+0x3e>
 800f0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0da:	e00e      	b.n	800f0fa <__swhatbuf_r+0x40>
 800f0dc:	466a      	mov	r2, sp
 800f0de:	f000 fd45 	bl	800fb6c <_fstat_r>
 800f0e2:	2800      	cmp	r0, #0
 800f0e4:	dbf2      	blt.n	800f0cc <__swhatbuf_r+0x12>
 800f0e6:	9a01      	ldr	r2, [sp, #4]
 800f0e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f0ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f0f0:	425a      	negs	r2, r3
 800f0f2:	415a      	adcs	r2, r3
 800f0f4:	602a      	str	r2, [r5, #0]
 800f0f6:	e7ee      	b.n	800f0d6 <__swhatbuf_r+0x1c>
 800f0f8:	2340      	movs	r3, #64	; 0x40
 800f0fa:	2000      	movs	r0, #0
 800f0fc:	6023      	str	r3, [r4, #0]
 800f0fe:	b016      	add	sp, #88	; 0x58
 800f100:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f104 <__smakebuf_r>:
 800f104:	898b      	ldrh	r3, [r1, #12]
 800f106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f108:	079d      	lsls	r5, r3, #30
 800f10a:	4606      	mov	r6, r0
 800f10c:	460c      	mov	r4, r1
 800f10e:	d507      	bpl.n	800f120 <__smakebuf_r+0x1c>
 800f110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f114:	6023      	str	r3, [r4, #0]
 800f116:	6123      	str	r3, [r4, #16]
 800f118:	2301      	movs	r3, #1
 800f11a:	6163      	str	r3, [r4, #20]
 800f11c:	b002      	add	sp, #8
 800f11e:	bd70      	pop	{r4, r5, r6, pc}
 800f120:	ab01      	add	r3, sp, #4
 800f122:	466a      	mov	r2, sp
 800f124:	f7ff ffc9 	bl	800f0ba <__swhatbuf_r>
 800f128:	9900      	ldr	r1, [sp, #0]
 800f12a:	4605      	mov	r5, r0
 800f12c:	4630      	mov	r0, r6
 800f12e:	f000 fc1d 	bl	800f96c <_malloc_r>
 800f132:	b948      	cbnz	r0, 800f148 <__smakebuf_r+0x44>
 800f134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f138:	059a      	lsls	r2, r3, #22
 800f13a:	d4ef      	bmi.n	800f11c <__smakebuf_r+0x18>
 800f13c:	f023 0303 	bic.w	r3, r3, #3
 800f140:	f043 0302 	orr.w	r3, r3, #2
 800f144:	81a3      	strh	r3, [r4, #12]
 800f146:	e7e3      	b.n	800f110 <__smakebuf_r+0xc>
 800f148:	4b0d      	ldr	r3, [pc, #52]	; (800f180 <__smakebuf_r+0x7c>)
 800f14a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	6020      	str	r0, [r4, #0]
 800f150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f154:	81a3      	strh	r3, [r4, #12]
 800f156:	9b00      	ldr	r3, [sp, #0]
 800f158:	6163      	str	r3, [r4, #20]
 800f15a:	9b01      	ldr	r3, [sp, #4]
 800f15c:	6120      	str	r0, [r4, #16]
 800f15e:	b15b      	cbz	r3, 800f178 <__smakebuf_r+0x74>
 800f160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f164:	4630      	mov	r0, r6
 800f166:	f000 fd13 	bl	800fb90 <_isatty_r>
 800f16a:	b128      	cbz	r0, 800f178 <__smakebuf_r+0x74>
 800f16c:	89a3      	ldrh	r3, [r4, #12]
 800f16e:	f023 0303 	bic.w	r3, r3, #3
 800f172:	f043 0301 	orr.w	r3, r3, #1
 800f176:	81a3      	strh	r3, [r4, #12]
 800f178:	89a0      	ldrh	r0, [r4, #12]
 800f17a:	4305      	orrs	r5, r0
 800f17c:	81a5      	strh	r5, [r4, #12]
 800f17e:	e7cd      	b.n	800f11c <__smakebuf_r+0x18>
 800f180:	0800ef09 	.word	0x0800ef09

0800f184 <malloc>:
 800f184:	4b02      	ldr	r3, [pc, #8]	; (800f190 <malloc+0xc>)
 800f186:	4601      	mov	r1, r0
 800f188:	6818      	ldr	r0, [r3, #0]
 800f18a:	f000 bbef 	b.w	800f96c <_malloc_r>
 800f18e:	bf00      	nop
 800f190:	2400001c 	.word	0x2400001c

0800f194 <memcpy>:
 800f194:	440a      	add	r2, r1
 800f196:	4291      	cmp	r1, r2
 800f198:	f100 33ff 	add.w	r3, r0, #4294967295
 800f19c:	d100      	bne.n	800f1a0 <memcpy+0xc>
 800f19e:	4770      	bx	lr
 800f1a0:	b510      	push	{r4, lr}
 800f1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1aa:	4291      	cmp	r1, r2
 800f1ac:	d1f9      	bne.n	800f1a2 <memcpy+0xe>
 800f1ae:	bd10      	pop	{r4, pc}

0800f1b0 <_Balloc>:
 800f1b0:	b570      	push	{r4, r5, r6, lr}
 800f1b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	460d      	mov	r5, r1
 800f1b8:	b976      	cbnz	r6, 800f1d8 <_Balloc+0x28>
 800f1ba:	2010      	movs	r0, #16
 800f1bc:	f7ff ffe2 	bl	800f184 <malloc>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	6260      	str	r0, [r4, #36]	; 0x24
 800f1c4:	b920      	cbnz	r0, 800f1d0 <_Balloc+0x20>
 800f1c6:	4b18      	ldr	r3, [pc, #96]	; (800f228 <_Balloc+0x78>)
 800f1c8:	4818      	ldr	r0, [pc, #96]	; (800f22c <_Balloc+0x7c>)
 800f1ca:	2166      	movs	r1, #102	; 0x66
 800f1cc:	f000 fc8e 	bl	800faec <__assert_func>
 800f1d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f1d4:	6006      	str	r6, [r0, #0]
 800f1d6:	60c6      	str	r6, [r0, #12]
 800f1d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f1da:	68f3      	ldr	r3, [r6, #12]
 800f1dc:	b183      	cbz	r3, 800f200 <_Balloc+0x50>
 800f1de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f1e6:	b9b8      	cbnz	r0, 800f218 <_Balloc+0x68>
 800f1e8:	2101      	movs	r1, #1
 800f1ea:	fa01 f605 	lsl.w	r6, r1, r5
 800f1ee:	1d72      	adds	r2, r6, #5
 800f1f0:	0092      	lsls	r2, r2, #2
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f000 fb5a 	bl	800f8ac <_calloc_r>
 800f1f8:	b160      	cbz	r0, 800f214 <_Balloc+0x64>
 800f1fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f1fe:	e00e      	b.n	800f21e <_Balloc+0x6e>
 800f200:	2221      	movs	r2, #33	; 0x21
 800f202:	2104      	movs	r1, #4
 800f204:	4620      	mov	r0, r4
 800f206:	f000 fb51 	bl	800f8ac <_calloc_r>
 800f20a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f20c:	60f0      	str	r0, [r6, #12]
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d1e4      	bne.n	800f1de <_Balloc+0x2e>
 800f214:	2000      	movs	r0, #0
 800f216:	bd70      	pop	{r4, r5, r6, pc}
 800f218:	6802      	ldr	r2, [r0, #0]
 800f21a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f21e:	2300      	movs	r3, #0
 800f220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f224:	e7f7      	b.n	800f216 <_Balloc+0x66>
 800f226:	bf00      	nop
 800f228:	08010075 	.word	0x08010075
 800f22c:	0801015c 	.word	0x0801015c

0800f230 <_Bfree>:
 800f230:	b570      	push	{r4, r5, r6, lr}
 800f232:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f234:	4605      	mov	r5, r0
 800f236:	460c      	mov	r4, r1
 800f238:	b976      	cbnz	r6, 800f258 <_Bfree+0x28>
 800f23a:	2010      	movs	r0, #16
 800f23c:	f7ff ffa2 	bl	800f184 <malloc>
 800f240:	4602      	mov	r2, r0
 800f242:	6268      	str	r0, [r5, #36]	; 0x24
 800f244:	b920      	cbnz	r0, 800f250 <_Bfree+0x20>
 800f246:	4b09      	ldr	r3, [pc, #36]	; (800f26c <_Bfree+0x3c>)
 800f248:	4809      	ldr	r0, [pc, #36]	; (800f270 <_Bfree+0x40>)
 800f24a:	218a      	movs	r1, #138	; 0x8a
 800f24c:	f000 fc4e 	bl	800faec <__assert_func>
 800f250:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f254:	6006      	str	r6, [r0, #0]
 800f256:	60c6      	str	r6, [r0, #12]
 800f258:	b13c      	cbz	r4, 800f26a <_Bfree+0x3a>
 800f25a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f25c:	6862      	ldr	r2, [r4, #4]
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f264:	6021      	str	r1, [r4, #0]
 800f266:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f26a:	bd70      	pop	{r4, r5, r6, pc}
 800f26c:	08010075 	.word	0x08010075
 800f270:	0801015c 	.word	0x0801015c

0800f274 <__multadd>:
 800f274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f278:	690e      	ldr	r6, [r1, #16]
 800f27a:	4607      	mov	r7, r0
 800f27c:	4698      	mov	r8, r3
 800f27e:	460c      	mov	r4, r1
 800f280:	f101 0014 	add.w	r0, r1, #20
 800f284:	2300      	movs	r3, #0
 800f286:	6805      	ldr	r5, [r0, #0]
 800f288:	b2a9      	uxth	r1, r5
 800f28a:	fb02 8101 	mla	r1, r2, r1, r8
 800f28e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f292:	0c2d      	lsrs	r5, r5, #16
 800f294:	fb02 c505 	mla	r5, r2, r5, ip
 800f298:	b289      	uxth	r1, r1
 800f29a:	3301      	adds	r3, #1
 800f29c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f2a0:	429e      	cmp	r6, r3
 800f2a2:	f840 1b04 	str.w	r1, [r0], #4
 800f2a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f2aa:	dcec      	bgt.n	800f286 <__multadd+0x12>
 800f2ac:	f1b8 0f00 	cmp.w	r8, #0
 800f2b0:	d022      	beq.n	800f2f8 <__multadd+0x84>
 800f2b2:	68a3      	ldr	r3, [r4, #8]
 800f2b4:	42b3      	cmp	r3, r6
 800f2b6:	dc19      	bgt.n	800f2ec <__multadd+0x78>
 800f2b8:	6861      	ldr	r1, [r4, #4]
 800f2ba:	4638      	mov	r0, r7
 800f2bc:	3101      	adds	r1, #1
 800f2be:	f7ff ff77 	bl	800f1b0 <_Balloc>
 800f2c2:	4605      	mov	r5, r0
 800f2c4:	b928      	cbnz	r0, 800f2d2 <__multadd+0x5e>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	4b0d      	ldr	r3, [pc, #52]	; (800f300 <__multadd+0x8c>)
 800f2ca:	480e      	ldr	r0, [pc, #56]	; (800f304 <__multadd+0x90>)
 800f2cc:	21b5      	movs	r1, #181	; 0xb5
 800f2ce:	f000 fc0d 	bl	800faec <__assert_func>
 800f2d2:	6922      	ldr	r2, [r4, #16]
 800f2d4:	3202      	adds	r2, #2
 800f2d6:	f104 010c 	add.w	r1, r4, #12
 800f2da:	0092      	lsls	r2, r2, #2
 800f2dc:	300c      	adds	r0, #12
 800f2de:	f7ff ff59 	bl	800f194 <memcpy>
 800f2e2:	4621      	mov	r1, r4
 800f2e4:	4638      	mov	r0, r7
 800f2e6:	f7ff ffa3 	bl	800f230 <_Bfree>
 800f2ea:	462c      	mov	r4, r5
 800f2ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f2f0:	3601      	adds	r6, #1
 800f2f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800f2f6:	6126      	str	r6, [r4, #16]
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2fe:	bf00      	nop
 800f300:	080100eb 	.word	0x080100eb
 800f304:	0801015c 	.word	0x0801015c

0800f308 <__hi0bits>:
 800f308:	0c03      	lsrs	r3, r0, #16
 800f30a:	041b      	lsls	r3, r3, #16
 800f30c:	b9d3      	cbnz	r3, 800f344 <__hi0bits+0x3c>
 800f30e:	0400      	lsls	r0, r0, #16
 800f310:	2310      	movs	r3, #16
 800f312:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f316:	bf04      	itt	eq
 800f318:	0200      	lsleq	r0, r0, #8
 800f31a:	3308      	addeq	r3, #8
 800f31c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f320:	bf04      	itt	eq
 800f322:	0100      	lsleq	r0, r0, #4
 800f324:	3304      	addeq	r3, #4
 800f326:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f32a:	bf04      	itt	eq
 800f32c:	0080      	lsleq	r0, r0, #2
 800f32e:	3302      	addeq	r3, #2
 800f330:	2800      	cmp	r0, #0
 800f332:	db05      	blt.n	800f340 <__hi0bits+0x38>
 800f334:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f338:	f103 0301 	add.w	r3, r3, #1
 800f33c:	bf08      	it	eq
 800f33e:	2320      	moveq	r3, #32
 800f340:	4618      	mov	r0, r3
 800f342:	4770      	bx	lr
 800f344:	2300      	movs	r3, #0
 800f346:	e7e4      	b.n	800f312 <__hi0bits+0xa>

0800f348 <__lo0bits>:
 800f348:	6803      	ldr	r3, [r0, #0]
 800f34a:	f013 0207 	ands.w	r2, r3, #7
 800f34e:	4601      	mov	r1, r0
 800f350:	d00b      	beq.n	800f36a <__lo0bits+0x22>
 800f352:	07da      	lsls	r2, r3, #31
 800f354:	d424      	bmi.n	800f3a0 <__lo0bits+0x58>
 800f356:	0798      	lsls	r0, r3, #30
 800f358:	bf49      	itett	mi
 800f35a:	085b      	lsrmi	r3, r3, #1
 800f35c:	089b      	lsrpl	r3, r3, #2
 800f35e:	2001      	movmi	r0, #1
 800f360:	600b      	strmi	r3, [r1, #0]
 800f362:	bf5c      	itt	pl
 800f364:	600b      	strpl	r3, [r1, #0]
 800f366:	2002      	movpl	r0, #2
 800f368:	4770      	bx	lr
 800f36a:	b298      	uxth	r0, r3
 800f36c:	b9b0      	cbnz	r0, 800f39c <__lo0bits+0x54>
 800f36e:	0c1b      	lsrs	r3, r3, #16
 800f370:	2010      	movs	r0, #16
 800f372:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f376:	bf04      	itt	eq
 800f378:	0a1b      	lsreq	r3, r3, #8
 800f37a:	3008      	addeq	r0, #8
 800f37c:	071a      	lsls	r2, r3, #28
 800f37e:	bf04      	itt	eq
 800f380:	091b      	lsreq	r3, r3, #4
 800f382:	3004      	addeq	r0, #4
 800f384:	079a      	lsls	r2, r3, #30
 800f386:	bf04      	itt	eq
 800f388:	089b      	lsreq	r3, r3, #2
 800f38a:	3002      	addeq	r0, #2
 800f38c:	07da      	lsls	r2, r3, #31
 800f38e:	d403      	bmi.n	800f398 <__lo0bits+0x50>
 800f390:	085b      	lsrs	r3, r3, #1
 800f392:	f100 0001 	add.w	r0, r0, #1
 800f396:	d005      	beq.n	800f3a4 <__lo0bits+0x5c>
 800f398:	600b      	str	r3, [r1, #0]
 800f39a:	4770      	bx	lr
 800f39c:	4610      	mov	r0, r2
 800f39e:	e7e8      	b.n	800f372 <__lo0bits+0x2a>
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	4770      	bx	lr
 800f3a4:	2020      	movs	r0, #32
 800f3a6:	4770      	bx	lr

0800f3a8 <__i2b>:
 800f3a8:	b510      	push	{r4, lr}
 800f3aa:	460c      	mov	r4, r1
 800f3ac:	2101      	movs	r1, #1
 800f3ae:	f7ff feff 	bl	800f1b0 <_Balloc>
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	b928      	cbnz	r0, 800f3c2 <__i2b+0x1a>
 800f3b6:	4b05      	ldr	r3, [pc, #20]	; (800f3cc <__i2b+0x24>)
 800f3b8:	4805      	ldr	r0, [pc, #20]	; (800f3d0 <__i2b+0x28>)
 800f3ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f3be:	f000 fb95 	bl	800faec <__assert_func>
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	6144      	str	r4, [r0, #20]
 800f3c6:	6103      	str	r3, [r0, #16]
 800f3c8:	bd10      	pop	{r4, pc}
 800f3ca:	bf00      	nop
 800f3cc:	080100eb 	.word	0x080100eb
 800f3d0:	0801015c 	.word	0x0801015c

0800f3d4 <__multiply>:
 800f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d8:	4614      	mov	r4, r2
 800f3da:	690a      	ldr	r2, [r1, #16]
 800f3dc:	6923      	ldr	r3, [r4, #16]
 800f3de:	429a      	cmp	r2, r3
 800f3e0:	bfb8      	it	lt
 800f3e2:	460b      	movlt	r3, r1
 800f3e4:	460d      	mov	r5, r1
 800f3e6:	bfbc      	itt	lt
 800f3e8:	4625      	movlt	r5, r4
 800f3ea:	461c      	movlt	r4, r3
 800f3ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f3f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f3f4:	68ab      	ldr	r3, [r5, #8]
 800f3f6:	6869      	ldr	r1, [r5, #4]
 800f3f8:	eb0a 0709 	add.w	r7, sl, r9
 800f3fc:	42bb      	cmp	r3, r7
 800f3fe:	b085      	sub	sp, #20
 800f400:	bfb8      	it	lt
 800f402:	3101      	addlt	r1, #1
 800f404:	f7ff fed4 	bl	800f1b0 <_Balloc>
 800f408:	b930      	cbnz	r0, 800f418 <__multiply+0x44>
 800f40a:	4602      	mov	r2, r0
 800f40c:	4b42      	ldr	r3, [pc, #264]	; (800f518 <__multiply+0x144>)
 800f40e:	4843      	ldr	r0, [pc, #268]	; (800f51c <__multiply+0x148>)
 800f410:	f240 115d 	movw	r1, #349	; 0x15d
 800f414:	f000 fb6a 	bl	800faec <__assert_func>
 800f418:	f100 0614 	add.w	r6, r0, #20
 800f41c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f420:	4633      	mov	r3, r6
 800f422:	2200      	movs	r2, #0
 800f424:	4543      	cmp	r3, r8
 800f426:	d31e      	bcc.n	800f466 <__multiply+0x92>
 800f428:	f105 0c14 	add.w	ip, r5, #20
 800f42c:	f104 0314 	add.w	r3, r4, #20
 800f430:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f434:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f438:	9202      	str	r2, [sp, #8]
 800f43a:	ebac 0205 	sub.w	r2, ip, r5
 800f43e:	3a15      	subs	r2, #21
 800f440:	f022 0203 	bic.w	r2, r2, #3
 800f444:	3204      	adds	r2, #4
 800f446:	f105 0115 	add.w	r1, r5, #21
 800f44a:	458c      	cmp	ip, r1
 800f44c:	bf38      	it	cc
 800f44e:	2204      	movcc	r2, #4
 800f450:	9201      	str	r2, [sp, #4]
 800f452:	9a02      	ldr	r2, [sp, #8]
 800f454:	9303      	str	r3, [sp, #12]
 800f456:	429a      	cmp	r2, r3
 800f458:	d808      	bhi.n	800f46c <__multiply+0x98>
 800f45a:	2f00      	cmp	r7, #0
 800f45c:	dc55      	bgt.n	800f50a <__multiply+0x136>
 800f45e:	6107      	str	r7, [r0, #16]
 800f460:	b005      	add	sp, #20
 800f462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f466:	f843 2b04 	str.w	r2, [r3], #4
 800f46a:	e7db      	b.n	800f424 <__multiply+0x50>
 800f46c:	f8b3 a000 	ldrh.w	sl, [r3]
 800f470:	f1ba 0f00 	cmp.w	sl, #0
 800f474:	d020      	beq.n	800f4b8 <__multiply+0xe4>
 800f476:	f105 0e14 	add.w	lr, r5, #20
 800f47a:	46b1      	mov	r9, r6
 800f47c:	2200      	movs	r2, #0
 800f47e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f482:	f8d9 b000 	ldr.w	fp, [r9]
 800f486:	b2a1      	uxth	r1, r4
 800f488:	fa1f fb8b 	uxth.w	fp, fp
 800f48c:	fb0a b101 	mla	r1, sl, r1, fp
 800f490:	4411      	add	r1, r2
 800f492:	f8d9 2000 	ldr.w	r2, [r9]
 800f496:	0c24      	lsrs	r4, r4, #16
 800f498:	0c12      	lsrs	r2, r2, #16
 800f49a:	fb0a 2404 	mla	r4, sl, r4, r2
 800f49e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f4a2:	b289      	uxth	r1, r1
 800f4a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f4a8:	45f4      	cmp	ip, lr
 800f4aa:	f849 1b04 	str.w	r1, [r9], #4
 800f4ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f4b2:	d8e4      	bhi.n	800f47e <__multiply+0xaa>
 800f4b4:	9901      	ldr	r1, [sp, #4]
 800f4b6:	5072      	str	r2, [r6, r1]
 800f4b8:	9a03      	ldr	r2, [sp, #12]
 800f4ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f4be:	3304      	adds	r3, #4
 800f4c0:	f1b9 0f00 	cmp.w	r9, #0
 800f4c4:	d01f      	beq.n	800f506 <__multiply+0x132>
 800f4c6:	6834      	ldr	r4, [r6, #0]
 800f4c8:	f105 0114 	add.w	r1, r5, #20
 800f4cc:	46b6      	mov	lr, r6
 800f4ce:	f04f 0a00 	mov.w	sl, #0
 800f4d2:	880a      	ldrh	r2, [r1, #0]
 800f4d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f4d8:	fb09 b202 	mla	r2, r9, r2, fp
 800f4dc:	4492      	add	sl, r2
 800f4de:	b2a4      	uxth	r4, r4
 800f4e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f4e4:	f84e 4b04 	str.w	r4, [lr], #4
 800f4e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800f4ec:	f8be 2000 	ldrh.w	r2, [lr]
 800f4f0:	0c24      	lsrs	r4, r4, #16
 800f4f2:	fb09 2404 	mla	r4, r9, r4, r2
 800f4f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f4fa:	458c      	cmp	ip, r1
 800f4fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f500:	d8e7      	bhi.n	800f4d2 <__multiply+0xfe>
 800f502:	9a01      	ldr	r2, [sp, #4]
 800f504:	50b4      	str	r4, [r6, r2]
 800f506:	3604      	adds	r6, #4
 800f508:	e7a3      	b.n	800f452 <__multiply+0x7e>
 800f50a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d1a5      	bne.n	800f45e <__multiply+0x8a>
 800f512:	3f01      	subs	r7, #1
 800f514:	e7a1      	b.n	800f45a <__multiply+0x86>
 800f516:	bf00      	nop
 800f518:	080100eb 	.word	0x080100eb
 800f51c:	0801015c 	.word	0x0801015c

0800f520 <__pow5mult>:
 800f520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f524:	4615      	mov	r5, r2
 800f526:	f012 0203 	ands.w	r2, r2, #3
 800f52a:	4606      	mov	r6, r0
 800f52c:	460f      	mov	r7, r1
 800f52e:	d007      	beq.n	800f540 <__pow5mult+0x20>
 800f530:	4c25      	ldr	r4, [pc, #148]	; (800f5c8 <__pow5mult+0xa8>)
 800f532:	3a01      	subs	r2, #1
 800f534:	2300      	movs	r3, #0
 800f536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f53a:	f7ff fe9b 	bl	800f274 <__multadd>
 800f53e:	4607      	mov	r7, r0
 800f540:	10ad      	asrs	r5, r5, #2
 800f542:	d03d      	beq.n	800f5c0 <__pow5mult+0xa0>
 800f544:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f546:	b97c      	cbnz	r4, 800f568 <__pow5mult+0x48>
 800f548:	2010      	movs	r0, #16
 800f54a:	f7ff fe1b 	bl	800f184 <malloc>
 800f54e:	4602      	mov	r2, r0
 800f550:	6270      	str	r0, [r6, #36]	; 0x24
 800f552:	b928      	cbnz	r0, 800f560 <__pow5mult+0x40>
 800f554:	4b1d      	ldr	r3, [pc, #116]	; (800f5cc <__pow5mult+0xac>)
 800f556:	481e      	ldr	r0, [pc, #120]	; (800f5d0 <__pow5mult+0xb0>)
 800f558:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f55c:	f000 fac6 	bl	800faec <__assert_func>
 800f560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f564:	6004      	str	r4, [r0, #0]
 800f566:	60c4      	str	r4, [r0, #12]
 800f568:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f570:	b94c      	cbnz	r4, 800f586 <__pow5mult+0x66>
 800f572:	f240 2171 	movw	r1, #625	; 0x271
 800f576:	4630      	mov	r0, r6
 800f578:	f7ff ff16 	bl	800f3a8 <__i2b>
 800f57c:	2300      	movs	r3, #0
 800f57e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f582:	4604      	mov	r4, r0
 800f584:	6003      	str	r3, [r0, #0]
 800f586:	f04f 0900 	mov.w	r9, #0
 800f58a:	07eb      	lsls	r3, r5, #31
 800f58c:	d50a      	bpl.n	800f5a4 <__pow5mult+0x84>
 800f58e:	4639      	mov	r1, r7
 800f590:	4622      	mov	r2, r4
 800f592:	4630      	mov	r0, r6
 800f594:	f7ff ff1e 	bl	800f3d4 <__multiply>
 800f598:	4639      	mov	r1, r7
 800f59a:	4680      	mov	r8, r0
 800f59c:	4630      	mov	r0, r6
 800f59e:	f7ff fe47 	bl	800f230 <_Bfree>
 800f5a2:	4647      	mov	r7, r8
 800f5a4:	106d      	asrs	r5, r5, #1
 800f5a6:	d00b      	beq.n	800f5c0 <__pow5mult+0xa0>
 800f5a8:	6820      	ldr	r0, [r4, #0]
 800f5aa:	b938      	cbnz	r0, 800f5bc <__pow5mult+0x9c>
 800f5ac:	4622      	mov	r2, r4
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f7ff ff0f 	bl	800f3d4 <__multiply>
 800f5b6:	6020      	str	r0, [r4, #0]
 800f5b8:	f8c0 9000 	str.w	r9, [r0]
 800f5bc:	4604      	mov	r4, r0
 800f5be:	e7e4      	b.n	800f58a <__pow5mult+0x6a>
 800f5c0:	4638      	mov	r0, r7
 800f5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5c6:	bf00      	nop
 800f5c8:	080102b0 	.word	0x080102b0
 800f5cc:	08010075 	.word	0x08010075
 800f5d0:	0801015c 	.word	0x0801015c

0800f5d4 <__lshift>:
 800f5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5d8:	460c      	mov	r4, r1
 800f5da:	6849      	ldr	r1, [r1, #4]
 800f5dc:	6923      	ldr	r3, [r4, #16]
 800f5de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f5e2:	68a3      	ldr	r3, [r4, #8]
 800f5e4:	4607      	mov	r7, r0
 800f5e6:	4691      	mov	r9, r2
 800f5e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f5ec:	f108 0601 	add.w	r6, r8, #1
 800f5f0:	42b3      	cmp	r3, r6
 800f5f2:	db0b      	blt.n	800f60c <__lshift+0x38>
 800f5f4:	4638      	mov	r0, r7
 800f5f6:	f7ff fddb 	bl	800f1b0 <_Balloc>
 800f5fa:	4605      	mov	r5, r0
 800f5fc:	b948      	cbnz	r0, 800f612 <__lshift+0x3e>
 800f5fe:	4602      	mov	r2, r0
 800f600:	4b28      	ldr	r3, [pc, #160]	; (800f6a4 <__lshift+0xd0>)
 800f602:	4829      	ldr	r0, [pc, #164]	; (800f6a8 <__lshift+0xd4>)
 800f604:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f608:	f000 fa70 	bl	800faec <__assert_func>
 800f60c:	3101      	adds	r1, #1
 800f60e:	005b      	lsls	r3, r3, #1
 800f610:	e7ee      	b.n	800f5f0 <__lshift+0x1c>
 800f612:	2300      	movs	r3, #0
 800f614:	f100 0114 	add.w	r1, r0, #20
 800f618:	f100 0210 	add.w	r2, r0, #16
 800f61c:	4618      	mov	r0, r3
 800f61e:	4553      	cmp	r3, sl
 800f620:	db33      	blt.n	800f68a <__lshift+0xb6>
 800f622:	6920      	ldr	r0, [r4, #16]
 800f624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f628:	f104 0314 	add.w	r3, r4, #20
 800f62c:	f019 091f 	ands.w	r9, r9, #31
 800f630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f638:	d02b      	beq.n	800f692 <__lshift+0xbe>
 800f63a:	f1c9 0e20 	rsb	lr, r9, #32
 800f63e:	468a      	mov	sl, r1
 800f640:	2200      	movs	r2, #0
 800f642:	6818      	ldr	r0, [r3, #0]
 800f644:	fa00 f009 	lsl.w	r0, r0, r9
 800f648:	4302      	orrs	r2, r0
 800f64a:	f84a 2b04 	str.w	r2, [sl], #4
 800f64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f652:	459c      	cmp	ip, r3
 800f654:	fa22 f20e 	lsr.w	r2, r2, lr
 800f658:	d8f3      	bhi.n	800f642 <__lshift+0x6e>
 800f65a:	ebac 0304 	sub.w	r3, ip, r4
 800f65e:	3b15      	subs	r3, #21
 800f660:	f023 0303 	bic.w	r3, r3, #3
 800f664:	3304      	adds	r3, #4
 800f666:	f104 0015 	add.w	r0, r4, #21
 800f66a:	4584      	cmp	ip, r0
 800f66c:	bf38      	it	cc
 800f66e:	2304      	movcc	r3, #4
 800f670:	50ca      	str	r2, [r1, r3]
 800f672:	b10a      	cbz	r2, 800f678 <__lshift+0xa4>
 800f674:	f108 0602 	add.w	r6, r8, #2
 800f678:	3e01      	subs	r6, #1
 800f67a:	4638      	mov	r0, r7
 800f67c:	612e      	str	r6, [r5, #16]
 800f67e:	4621      	mov	r1, r4
 800f680:	f7ff fdd6 	bl	800f230 <_Bfree>
 800f684:	4628      	mov	r0, r5
 800f686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f68a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f68e:	3301      	adds	r3, #1
 800f690:	e7c5      	b.n	800f61e <__lshift+0x4a>
 800f692:	3904      	subs	r1, #4
 800f694:	f853 2b04 	ldr.w	r2, [r3], #4
 800f698:	f841 2f04 	str.w	r2, [r1, #4]!
 800f69c:	459c      	cmp	ip, r3
 800f69e:	d8f9      	bhi.n	800f694 <__lshift+0xc0>
 800f6a0:	e7ea      	b.n	800f678 <__lshift+0xa4>
 800f6a2:	bf00      	nop
 800f6a4:	080100eb 	.word	0x080100eb
 800f6a8:	0801015c 	.word	0x0801015c

0800f6ac <__mcmp>:
 800f6ac:	b530      	push	{r4, r5, lr}
 800f6ae:	6902      	ldr	r2, [r0, #16]
 800f6b0:	690c      	ldr	r4, [r1, #16]
 800f6b2:	1b12      	subs	r2, r2, r4
 800f6b4:	d10e      	bne.n	800f6d4 <__mcmp+0x28>
 800f6b6:	f100 0314 	add.w	r3, r0, #20
 800f6ba:	3114      	adds	r1, #20
 800f6bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f6c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f6c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f6c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f6cc:	42a5      	cmp	r5, r4
 800f6ce:	d003      	beq.n	800f6d8 <__mcmp+0x2c>
 800f6d0:	d305      	bcc.n	800f6de <__mcmp+0x32>
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	bd30      	pop	{r4, r5, pc}
 800f6d8:	4283      	cmp	r3, r0
 800f6da:	d3f3      	bcc.n	800f6c4 <__mcmp+0x18>
 800f6dc:	e7fa      	b.n	800f6d4 <__mcmp+0x28>
 800f6de:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e2:	e7f7      	b.n	800f6d4 <__mcmp+0x28>

0800f6e4 <__mdiff>:
 800f6e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e8:	460c      	mov	r4, r1
 800f6ea:	4606      	mov	r6, r0
 800f6ec:	4611      	mov	r1, r2
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	4617      	mov	r7, r2
 800f6f2:	f7ff ffdb 	bl	800f6ac <__mcmp>
 800f6f6:	1e05      	subs	r5, r0, #0
 800f6f8:	d110      	bne.n	800f71c <__mdiff+0x38>
 800f6fa:	4629      	mov	r1, r5
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	f7ff fd57 	bl	800f1b0 <_Balloc>
 800f702:	b930      	cbnz	r0, 800f712 <__mdiff+0x2e>
 800f704:	4b39      	ldr	r3, [pc, #228]	; (800f7ec <__mdiff+0x108>)
 800f706:	4602      	mov	r2, r0
 800f708:	f240 2132 	movw	r1, #562	; 0x232
 800f70c:	4838      	ldr	r0, [pc, #224]	; (800f7f0 <__mdiff+0x10c>)
 800f70e:	f000 f9ed 	bl	800faec <__assert_func>
 800f712:	2301      	movs	r3, #1
 800f714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f71c:	bfa4      	itt	ge
 800f71e:	463b      	movge	r3, r7
 800f720:	4627      	movge	r7, r4
 800f722:	4630      	mov	r0, r6
 800f724:	6879      	ldr	r1, [r7, #4]
 800f726:	bfa6      	itte	ge
 800f728:	461c      	movge	r4, r3
 800f72a:	2500      	movge	r5, #0
 800f72c:	2501      	movlt	r5, #1
 800f72e:	f7ff fd3f 	bl	800f1b0 <_Balloc>
 800f732:	b920      	cbnz	r0, 800f73e <__mdiff+0x5a>
 800f734:	4b2d      	ldr	r3, [pc, #180]	; (800f7ec <__mdiff+0x108>)
 800f736:	4602      	mov	r2, r0
 800f738:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f73c:	e7e6      	b.n	800f70c <__mdiff+0x28>
 800f73e:	693e      	ldr	r6, [r7, #16]
 800f740:	60c5      	str	r5, [r0, #12]
 800f742:	6925      	ldr	r5, [r4, #16]
 800f744:	f107 0114 	add.w	r1, r7, #20
 800f748:	f104 0914 	add.w	r9, r4, #20
 800f74c:	f100 0e14 	add.w	lr, r0, #20
 800f750:	f107 0210 	add.w	r2, r7, #16
 800f754:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f758:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f75c:	46f2      	mov	sl, lr
 800f75e:	2700      	movs	r7, #0
 800f760:	f859 3b04 	ldr.w	r3, [r9], #4
 800f764:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f768:	fa1f f883 	uxth.w	r8, r3
 800f76c:	fa17 f78b 	uxtah	r7, r7, fp
 800f770:	0c1b      	lsrs	r3, r3, #16
 800f772:	eba7 0808 	sub.w	r8, r7, r8
 800f776:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f77a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f77e:	fa1f f888 	uxth.w	r8, r8
 800f782:	141f      	asrs	r7, r3, #16
 800f784:	454d      	cmp	r5, r9
 800f786:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f78a:	f84a 3b04 	str.w	r3, [sl], #4
 800f78e:	d8e7      	bhi.n	800f760 <__mdiff+0x7c>
 800f790:	1b2b      	subs	r3, r5, r4
 800f792:	3b15      	subs	r3, #21
 800f794:	f023 0303 	bic.w	r3, r3, #3
 800f798:	3304      	adds	r3, #4
 800f79a:	3415      	adds	r4, #21
 800f79c:	42a5      	cmp	r5, r4
 800f79e:	bf38      	it	cc
 800f7a0:	2304      	movcc	r3, #4
 800f7a2:	4419      	add	r1, r3
 800f7a4:	4473      	add	r3, lr
 800f7a6:	469e      	mov	lr, r3
 800f7a8:	460d      	mov	r5, r1
 800f7aa:	4565      	cmp	r5, ip
 800f7ac:	d30e      	bcc.n	800f7cc <__mdiff+0xe8>
 800f7ae:	f10c 0203 	add.w	r2, ip, #3
 800f7b2:	1a52      	subs	r2, r2, r1
 800f7b4:	f022 0203 	bic.w	r2, r2, #3
 800f7b8:	3903      	subs	r1, #3
 800f7ba:	458c      	cmp	ip, r1
 800f7bc:	bf38      	it	cc
 800f7be:	2200      	movcc	r2, #0
 800f7c0:	441a      	add	r2, r3
 800f7c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f7c6:	b17b      	cbz	r3, 800f7e8 <__mdiff+0x104>
 800f7c8:	6106      	str	r6, [r0, #16]
 800f7ca:	e7a5      	b.n	800f718 <__mdiff+0x34>
 800f7cc:	f855 8b04 	ldr.w	r8, [r5], #4
 800f7d0:	fa17 f488 	uxtah	r4, r7, r8
 800f7d4:	1422      	asrs	r2, r4, #16
 800f7d6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f7da:	b2a4      	uxth	r4, r4
 800f7dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f7e0:	f84e 4b04 	str.w	r4, [lr], #4
 800f7e4:	1417      	asrs	r7, r2, #16
 800f7e6:	e7e0      	b.n	800f7aa <__mdiff+0xc6>
 800f7e8:	3e01      	subs	r6, #1
 800f7ea:	e7ea      	b.n	800f7c2 <__mdiff+0xde>
 800f7ec:	080100eb 	.word	0x080100eb
 800f7f0:	0801015c 	.word	0x0801015c

0800f7f4 <__d2b>:
 800f7f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7f8:	4689      	mov	r9, r1
 800f7fa:	2101      	movs	r1, #1
 800f7fc:	ec57 6b10 	vmov	r6, r7, d0
 800f800:	4690      	mov	r8, r2
 800f802:	f7ff fcd5 	bl	800f1b0 <_Balloc>
 800f806:	4604      	mov	r4, r0
 800f808:	b930      	cbnz	r0, 800f818 <__d2b+0x24>
 800f80a:	4602      	mov	r2, r0
 800f80c:	4b25      	ldr	r3, [pc, #148]	; (800f8a4 <__d2b+0xb0>)
 800f80e:	4826      	ldr	r0, [pc, #152]	; (800f8a8 <__d2b+0xb4>)
 800f810:	f240 310a 	movw	r1, #778	; 0x30a
 800f814:	f000 f96a 	bl	800faec <__assert_func>
 800f818:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f81c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f820:	bb35      	cbnz	r5, 800f870 <__d2b+0x7c>
 800f822:	2e00      	cmp	r6, #0
 800f824:	9301      	str	r3, [sp, #4]
 800f826:	d028      	beq.n	800f87a <__d2b+0x86>
 800f828:	4668      	mov	r0, sp
 800f82a:	9600      	str	r6, [sp, #0]
 800f82c:	f7ff fd8c 	bl	800f348 <__lo0bits>
 800f830:	9900      	ldr	r1, [sp, #0]
 800f832:	b300      	cbz	r0, 800f876 <__d2b+0x82>
 800f834:	9a01      	ldr	r2, [sp, #4]
 800f836:	f1c0 0320 	rsb	r3, r0, #32
 800f83a:	fa02 f303 	lsl.w	r3, r2, r3
 800f83e:	430b      	orrs	r3, r1
 800f840:	40c2      	lsrs	r2, r0
 800f842:	6163      	str	r3, [r4, #20]
 800f844:	9201      	str	r2, [sp, #4]
 800f846:	9b01      	ldr	r3, [sp, #4]
 800f848:	61a3      	str	r3, [r4, #24]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	bf14      	ite	ne
 800f84e:	2202      	movne	r2, #2
 800f850:	2201      	moveq	r2, #1
 800f852:	6122      	str	r2, [r4, #16]
 800f854:	b1d5      	cbz	r5, 800f88c <__d2b+0x98>
 800f856:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f85a:	4405      	add	r5, r0
 800f85c:	f8c9 5000 	str.w	r5, [r9]
 800f860:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f864:	f8c8 0000 	str.w	r0, [r8]
 800f868:	4620      	mov	r0, r4
 800f86a:	b003      	add	sp, #12
 800f86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f870:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f874:	e7d5      	b.n	800f822 <__d2b+0x2e>
 800f876:	6161      	str	r1, [r4, #20]
 800f878:	e7e5      	b.n	800f846 <__d2b+0x52>
 800f87a:	a801      	add	r0, sp, #4
 800f87c:	f7ff fd64 	bl	800f348 <__lo0bits>
 800f880:	9b01      	ldr	r3, [sp, #4]
 800f882:	6163      	str	r3, [r4, #20]
 800f884:	2201      	movs	r2, #1
 800f886:	6122      	str	r2, [r4, #16]
 800f888:	3020      	adds	r0, #32
 800f88a:	e7e3      	b.n	800f854 <__d2b+0x60>
 800f88c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f890:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f894:	f8c9 0000 	str.w	r0, [r9]
 800f898:	6918      	ldr	r0, [r3, #16]
 800f89a:	f7ff fd35 	bl	800f308 <__hi0bits>
 800f89e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f8a2:	e7df      	b.n	800f864 <__d2b+0x70>
 800f8a4:	080100eb 	.word	0x080100eb
 800f8a8:	0801015c 	.word	0x0801015c

0800f8ac <_calloc_r>:
 800f8ac:	b513      	push	{r0, r1, r4, lr}
 800f8ae:	434a      	muls	r2, r1
 800f8b0:	4611      	mov	r1, r2
 800f8b2:	9201      	str	r2, [sp, #4]
 800f8b4:	f000 f85a 	bl	800f96c <_malloc_r>
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	b118      	cbz	r0, 800f8c4 <_calloc_r+0x18>
 800f8bc:	9a01      	ldr	r2, [sp, #4]
 800f8be:	2100      	movs	r1, #0
 800f8c0:	f7fd feae 	bl	800d620 <memset>
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	b002      	add	sp, #8
 800f8c8:	bd10      	pop	{r4, pc}
	...

0800f8cc <_free_r>:
 800f8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8ce:	2900      	cmp	r1, #0
 800f8d0:	d048      	beq.n	800f964 <_free_r+0x98>
 800f8d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8d6:	9001      	str	r0, [sp, #4]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	f1a1 0404 	sub.w	r4, r1, #4
 800f8de:	bfb8      	it	lt
 800f8e0:	18e4      	addlt	r4, r4, r3
 800f8e2:	f000 f989 	bl	800fbf8 <__malloc_lock>
 800f8e6:	4a20      	ldr	r2, [pc, #128]	; (800f968 <_free_r+0x9c>)
 800f8e8:	9801      	ldr	r0, [sp, #4]
 800f8ea:	6813      	ldr	r3, [r2, #0]
 800f8ec:	4615      	mov	r5, r2
 800f8ee:	b933      	cbnz	r3, 800f8fe <_free_r+0x32>
 800f8f0:	6063      	str	r3, [r4, #4]
 800f8f2:	6014      	str	r4, [r2, #0]
 800f8f4:	b003      	add	sp, #12
 800f8f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8fa:	f000 b983 	b.w	800fc04 <__malloc_unlock>
 800f8fe:	42a3      	cmp	r3, r4
 800f900:	d90b      	bls.n	800f91a <_free_r+0x4e>
 800f902:	6821      	ldr	r1, [r4, #0]
 800f904:	1862      	adds	r2, r4, r1
 800f906:	4293      	cmp	r3, r2
 800f908:	bf04      	itt	eq
 800f90a:	681a      	ldreq	r2, [r3, #0]
 800f90c:	685b      	ldreq	r3, [r3, #4]
 800f90e:	6063      	str	r3, [r4, #4]
 800f910:	bf04      	itt	eq
 800f912:	1852      	addeq	r2, r2, r1
 800f914:	6022      	streq	r2, [r4, #0]
 800f916:	602c      	str	r4, [r5, #0]
 800f918:	e7ec      	b.n	800f8f4 <_free_r+0x28>
 800f91a:	461a      	mov	r2, r3
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	b10b      	cbz	r3, 800f924 <_free_r+0x58>
 800f920:	42a3      	cmp	r3, r4
 800f922:	d9fa      	bls.n	800f91a <_free_r+0x4e>
 800f924:	6811      	ldr	r1, [r2, #0]
 800f926:	1855      	adds	r5, r2, r1
 800f928:	42a5      	cmp	r5, r4
 800f92a:	d10b      	bne.n	800f944 <_free_r+0x78>
 800f92c:	6824      	ldr	r4, [r4, #0]
 800f92e:	4421      	add	r1, r4
 800f930:	1854      	adds	r4, r2, r1
 800f932:	42a3      	cmp	r3, r4
 800f934:	6011      	str	r1, [r2, #0]
 800f936:	d1dd      	bne.n	800f8f4 <_free_r+0x28>
 800f938:	681c      	ldr	r4, [r3, #0]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	6053      	str	r3, [r2, #4]
 800f93e:	4421      	add	r1, r4
 800f940:	6011      	str	r1, [r2, #0]
 800f942:	e7d7      	b.n	800f8f4 <_free_r+0x28>
 800f944:	d902      	bls.n	800f94c <_free_r+0x80>
 800f946:	230c      	movs	r3, #12
 800f948:	6003      	str	r3, [r0, #0]
 800f94a:	e7d3      	b.n	800f8f4 <_free_r+0x28>
 800f94c:	6825      	ldr	r5, [r4, #0]
 800f94e:	1961      	adds	r1, r4, r5
 800f950:	428b      	cmp	r3, r1
 800f952:	bf04      	itt	eq
 800f954:	6819      	ldreq	r1, [r3, #0]
 800f956:	685b      	ldreq	r3, [r3, #4]
 800f958:	6063      	str	r3, [r4, #4]
 800f95a:	bf04      	itt	eq
 800f95c:	1949      	addeq	r1, r1, r5
 800f95e:	6021      	streq	r1, [r4, #0]
 800f960:	6054      	str	r4, [r2, #4]
 800f962:	e7c7      	b.n	800f8f4 <_free_r+0x28>
 800f964:	b003      	add	sp, #12
 800f966:	bd30      	pop	{r4, r5, pc}
 800f968:	24000214 	.word	0x24000214

0800f96c <_malloc_r>:
 800f96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96e:	1ccd      	adds	r5, r1, #3
 800f970:	f025 0503 	bic.w	r5, r5, #3
 800f974:	3508      	adds	r5, #8
 800f976:	2d0c      	cmp	r5, #12
 800f978:	bf38      	it	cc
 800f97a:	250c      	movcc	r5, #12
 800f97c:	2d00      	cmp	r5, #0
 800f97e:	4606      	mov	r6, r0
 800f980:	db01      	blt.n	800f986 <_malloc_r+0x1a>
 800f982:	42a9      	cmp	r1, r5
 800f984:	d903      	bls.n	800f98e <_malloc_r+0x22>
 800f986:	230c      	movs	r3, #12
 800f988:	6033      	str	r3, [r6, #0]
 800f98a:	2000      	movs	r0, #0
 800f98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f98e:	f000 f933 	bl	800fbf8 <__malloc_lock>
 800f992:	4921      	ldr	r1, [pc, #132]	; (800fa18 <_malloc_r+0xac>)
 800f994:	680a      	ldr	r2, [r1, #0]
 800f996:	4614      	mov	r4, r2
 800f998:	b99c      	cbnz	r4, 800f9c2 <_malloc_r+0x56>
 800f99a:	4f20      	ldr	r7, [pc, #128]	; (800fa1c <_malloc_r+0xb0>)
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	b923      	cbnz	r3, 800f9aa <_malloc_r+0x3e>
 800f9a0:	4621      	mov	r1, r4
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	f000 f83c 	bl	800fa20 <_sbrk_r>
 800f9a8:	6038      	str	r0, [r7, #0]
 800f9aa:	4629      	mov	r1, r5
 800f9ac:	4630      	mov	r0, r6
 800f9ae:	f000 f837 	bl	800fa20 <_sbrk_r>
 800f9b2:	1c43      	adds	r3, r0, #1
 800f9b4:	d123      	bne.n	800f9fe <_malloc_r+0x92>
 800f9b6:	230c      	movs	r3, #12
 800f9b8:	6033      	str	r3, [r6, #0]
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	f000 f922 	bl	800fc04 <__malloc_unlock>
 800f9c0:	e7e3      	b.n	800f98a <_malloc_r+0x1e>
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	1b5b      	subs	r3, r3, r5
 800f9c6:	d417      	bmi.n	800f9f8 <_malloc_r+0x8c>
 800f9c8:	2b0b      	cmp	r3, #11
 800f9ca:	d903      	bls.n	800f9d4 <_malloc_r+0x68>
 800f9cc:	6023      	str	r3, [r4, #0]
 800f9ce:	441c      	add	r4, r3
 800f9d0:	6025      	str	r5, [r4, #0]
 800f9d2:	e004      	b.n	800f9de <_malloc_r+0x72>
 800f9d4:	6863      	ldr	r3, [r4, #4]
 800f9d6:	42a2      	cmp	r2, r4
 800f9d8:	bf0c      	ite	eq
 800f9da:	600b      	streq	r3, [r1, #0]
 800f9dc:	6053      	strne	r3, [r2, #4]
 800f9de:	4630      	mov	r0, r6
 800f9e0:	f000 f910 	bl	800fc04 <__malloc_unlock>
 800f9e4:	f104 000b 	add.w	r0, r4, #11
 800f9e8:	1d23      	adds	r3, r4, #4
 800f9ea:	f020 0007 	bic.w	r0, r0, #7
 800f9ee:	1ac2      	subs	r2, r0, r3
 800f9f0:	d0cc      	beq.n	800f98c <_malloc_r+0x20>
 800f9f2:	1a1b      	subs	r3, r3, r0
 800f9f4:	50a3      	str	r3, [r4, r2]
 800f9f6:	e7c9      	b.n	800f98c <_malloc_r+0x20>
 800f9f8:	4622      	mov	r2, r4
 800f9fa:	6864      	ldr	r4, [r4, #4]
 800f9fc:	e7cc      	b.n	800f998 <_malloc_r+0x2c>
 800f9fe:	1cc4      	adds	r4, r0, #3
 800fa00:	f024 0403 	bic.w	r4, r4, #3
 800fa04:	42a0      	cmp	r0, r4
 800fa06:	d0e3      	beq.n	800f9d0 <_malloc_r+0x64>
 800fa08:	1a21      	subs	r1, r4, r0
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	f000 f808 	bl	800fa20 <_sbrk_r>
 800fa10:	3001      	adds	r0, #1
 800fa12:	d1dd      	bne.n	800f9d0 <_malloc_r+0x64>
 800fa14:	e7cf      	b.n	800f9b6 <_malloc_r+0x4a>
 800fa16:	bf00      	nop
 800fa18:	24000214 	.word	0x24000214
 800fa1c:	24000218 	.word	0x24000218

0800fa20 <_sbrk_r>:
 800fa20:	b538      	push	{r3, r4, r5, lr}
 800fa22:	4d06      	ldr	r5, [pc, #24]	; (800fa3c <_sbrk_r+0x1c>)
 800fa24:	2300      	movs	r3, #0
 800fa26:	4604      	mov	r4, r0
 800fa28:	4608      	mov	r0, r1
 800fa2a:	602b      	str	r3, [r5, #0]
 800fa2c:	f7f2 f9d6 	bl	8001ddc <_sbrk>
 800fa30:	1c43      	adds	r3, r0, #1
 800fa32:	d102      	bne.n	800fa3a <_sbrk_r+0x1a>
 800fa34:	682b      	ldr	r3, [r5, #0]
 800fa36:	b103      	cbz	r3, 800fa3a <_sbrk_r+0x1a>
 800fa38:	6023      	str	r3, [r4, #0]
 800fa3a:	bd38      	pop	{r3, r4, r5, pc}
 800fa3c:	24000584 	.word	0x24000584

0800fa40 <__sread>:
 800fa40:	b510      	push	{r4, lr}
 800fa42:	460c      	mov	r4, r1
 800fa44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa48:	f000 fa3c 	bl	800fec4 <_read_r>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	bfab      	itete	ge
 800fa50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fa52:	89a3      	ldrhlt	r3, [r4, #12]
 800fa54:	181b      	addge	r3, r3, r0
 800fa56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fa5a:	bfac      	ite	ge
 800fa5c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fa5e:	81a3      	strhlt	r3, [r4, #12]
 800fa60:	bd10      	pop	{r4, pc}

0800fa62 <__swrite>:
 800fa62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa66:	461f      	mov	r7, r3
 800fa68:	898b      	ldrh	r3, [r1, #12]
 800fa6a:	05db      	lsls	r3, r3, #23
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	460c      	mov	r4, r1
 800fa70:	4616      	mov	r6, r2
 800fa72:	d505      	bpl.n	800fa80 <__swrite+0x1e>
 800fa74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa78:	2302      	movs	r3, #2
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f000 f898 	bl	800fbb0 <_lseek_r>
 800fa80:	89a3      	ldrh	r3, [r4, #12]
 800fa82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa8a:	81a3      	strh	r3, [r4, #12]
 800fa8c:	4632      	mov	r2, r6
 800fa8e:	463b      	mov	r3, r7
 800fa90:	4628      	mov	r0, r5
 800fa92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa96:	f000 b817 	b.w	800fac8 <_write_r>

0800fa9a <__sseek>:
 800fa9a:	b510      	push	{r4, lr}
 800fa9c:	460c      	mov	r4, r1
 800fa9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faa2:	f000 f885 	bl	800fbb0 <_lseek_r>
 800faa6:	1c43      	adds	r3, r0, #1
 800faa8:	89a3      	ldrh	r3, [r4, #12]
 800faaa:	bf15      	itete	ne
 800faac:	6560      	strne	r0, [r4, #84]	; 0x54
 800faae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fab6:	81a3      	strheq	r3, [r4, #12]
 800fab8:	bf18      	it	ne
 800faba:	81a3      	strhne	r3, [r4, #12]
 800fabc:	bd10      	pop	{r4, pc}

0800fabe <__sclose>:
 800fabe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fac2:	f000 b831 	b.w	800fb28 <_close_r>
	...

0800fac8 <_write_r>:
 800fac8:	b538      	push	{r3, r4, r5, lr}
 800faca:	4d07      	ldr	r5, [pc, #28]	; (800fae8 <_write_r+0x20>)
 800facc:	4604      	mov	r4, r0
 800face:	4608      	mov	r0, r1
 800fad0:	4611      	mov	r1, r2
 800fad2:	2200      	movs	r2, #0
 800fad4:	602a      	str	r2, [r5, #0]
 800fad6:	461a      	mov	r2, r3
 800fad8:	f7f1 fada 	bl	8001090 <_write>
 800fadc:	1c43      	adds	r3, r0, #1
 800fade:	d102      	bne.n	800fae6 <_write_r+0x1e>
 800fae0:	682b      	ldr	r3, [r5, #0]
 800fae2:	b103      	cbz	r3, 800fae6 <_write_r+0x1e>
 800fae4:	6023      	str	r3, [r4, #0]
 800fae6:	bd38      	pop	{r3, r4, r5, pc}
 800fae8:	24000584 	.word	0x24000584

0800faec <__assert_func>:
 800faec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800faee:	4614      	mov	r4, r2
 800faf0:	461a      	mov	r2, r3
 800faf2:	4b09      	ldr	r3, [pc, #36]	; (800fb18 <__assert_func+0x2c>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	4605      	mov	r5, r0
 800faf8:	68d8      	ldr	r0, [r3, #12]
 800fafa:	b14c      	cbz	r4, 800fb10 <__assert_func+0x24>
 800fafc:	4b07      	ldr	r3, [pc, #28]	; (800fb1c <__assert_func+0x30>)
 800fafe:	9100      	str	r1, [sp, #0]
 800fb00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb04:	4906      	ldr	r1, [pc, #24]	; (800fb20 <__assert_func+0x34>)
 800fb06:	462b      	mov	r3, r5
 800fb08:	f000 f81e 	bl	800fb48 <fiprintf>
 800fb0c:	f000 f9f9 	bl	800ff02 <abort>
 800fb10:	4b04      	ldr	r3, [pc, #16]	; (800fb24 <__assert_func+0x38>)
 800fb12:	461c      	mov	r4, r3
 800fb14:	e7f3      	b.n	800fafe <__assert_func+0x12>
 800fb16:	bf00      	nop
 800fb18:	2400001c 	.word	0x2400001c
 800fb1c:	080102bc 	.word	0x080102bc
 800fb20:	080102c9 	.word	0x080102c9
 800fb24:	080102f7 	.word	0x080102f7

0800fb28 <_close_r>:
 800fb28:	b538      	push	{r3, r4, r5, lr}
 800fb2a:	4d06      	ldr	r5, [pc, #24]	; (800fb44 <_close_r+0x1c>)
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	4604      	mov	r4, r0
 800fb30:	4608      	mov	r0, r1
 800fb32:	602b      	str	r3, [r5, #0]
 800fb34:	f7f2 f91d 	bl	8001d72 <_close>
 800fb38:	1c43      	adds	r3, r0, #1
 800fb3a:	d102      	bne.n	800fb42 <_close_r+0x1a>
 800fb3c:	682b      	ldr	r3, [r5, #0]
 800fb3e:	b103      	cbz	r3, 800fb42 <_close_r+0x1a>
 800fb40:	6023      	str	r3, [r4, #0]
 800fb42:	bd38      	pop	{r3, r4, r5, pc}
 800fb44:	24000584 	.word	0x24000584

0800fb48 <fiprintf>:
 800fb48:	b40e      	push	{r1, r2, r3}
 800fb4a:	b503      	push	{r0, r1, lr}
 800fb4c:	4601      	mov	r1, r0
 800fb4e:	ab03      	add	r3, sp, #12
 800fb50:	4805      	ldr	r0, [pc, #20]	; (800fb68 <fiprintf+0x20>)
 800fb52:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb56:	6800      	ldr	r0, [r0, #0]
 800fb58:	9301      	str	r3, [sp, #4]
 800fb5a:	f000 f883 	bl	800fc64 <_vfiprintf_r>
 800fb5e:	b002      	add	sp, #8
 800fb60:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb64:	b003      	add	sp, #12
 800fb66:	4770      	bx	lr
 800fb68:	2400001c 	.word	0x2400001c

0800fb6c <_fstat_r>:
 800fb6c:	b538      	push	{r3, r4, r5, lr}
 800fb6e:	4d07      	ldr	r5, [pc, #28]	; (800fb8c <_fstat_r+0x20>)
 800fb70:	2300      	movs	r3, #0
 800fb72:	4604      	mov	r4, r0
 800fb74:	4608      	mov	r0, r1
 800fb76:	4611      	mov	r1, r2
 800fb78:	602b      	str	r3, [r5, #0]
 800fb7a:	f7f2 f906 	bl	8001d8a <_fstat>
 800fb7e:	1c43      	adds	r3, r0, #1
 800fb80:	d102      	bne.n	800fb88 <_fstat_r+0x1c>
 800fb82:	682b      	ldr	r3, [r5, #0]
 800fb84:	b103      	cbz	r3, 800fb88 <_fstat_r+0x1c>
 800fb86:	6023      	str	r3, [r4, #0]
 800fb88:	bd38      	pop	{r3, r4, r5, pc}
 800fb8a:	bf00      	nop
 800fb8c:	24000584 	.word	0x24000584

0800fb90 <_isatty_r>:
 800fb90:	b538      	push	{r3, r4, r5, lr}
 800fb92:	4d06      	ldr	r5, [pc, #24]	; (800fbac <_isatty_r+0x1c>)
 800fb94:	2300      	movs	r3, #0
 800fb96:	4604      	mov	r4, r0
 800fb98:	4608      	mov	r0, r1
 800fb9a:	602b      	str	r3, [r5, #0]
 800fb9c:	f7f2 f905 	bl	8001daa <_isatty>
 800fba0:	1c43      	adds	r3, r0, #1
 800fba2:	d102      	bne.n	800fbaa <_isatty_r+0x1a>
 800fba4:	682b      	ldr	r3, [r5, #0]
 800fba6:	b103      	cbz	r3, 800fbaa <_isatty_r+0x1a>
 800fba8:	6023      	str	r3, [r4, #0]
 800fbaa:	bd38      	pop	{r3, r4, r5, pc}
 800fbac:	24000584 	.word	0x24000584

0800fbb0 <_lseek_r>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	4d07      	ldr	r5, [pc, #28]	; (800fbd0 <_lseek_r+0x20>)
 800fbb4:	4604      	mov	r4, r0
 800fbb6:	4608      	mov	r0, r1
 800fbb8:	4611      	mov	r1, r2
 800fbba:	2200      	movs	r2, #0
 800fbbc:	602a      	str	r2, [r5, #0]
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	f7f2 f8fe 	bl	8001dc0 <_lseek>
 800fbc4:	1c43      	adds	r3, r0, #1
 800fbc6:	d102      	bne.n	800fbce <_lseek_r+0x1e>
 800fbc8:	682b      	ldr	r3, [r5, #0]
 800fbca:	b103      	cbz	r3, 800fbce <_lseek_r+0x1e>
 800fbcc:	6023      	str	r3, [r4, #0]
 800fbce:	bd38      	pop	{r3, r4, r5, pc}
 800fbd0:	24000584 	.word	0x24000584

0800fbd4 <__ascii_mbtowc>:
 800fbd4:	b082      	sub	sp, #8
 800fbd6:	b901      	cbnz	r1, 800fbda <__ascii_mbtowc+0x6>
 800fbd8:	a901      	add	r1, sp, #4
 800fbda:	b142      	cbz	r2, 800fbee <__ascii_mbtowc+0x1a>
 800fbdc:	b14b      	cbz	r3, 800fbf2 <__ascii_mbtowc+0x1e>
 800fbde:	7813      	ldrb	r3, [r2, #0]
 800fbe0:	600b      	str	r3, [r1, #0]
 800fbe2:	7812      	ldrb	r2, [r2, #0]
 800fbe4:	1e10      	subs	r0, r2, #0
 800fbe6:	bf18      	it	ne
 800fbe8:	2001      	movne	r0, #1
 800fbea:	b002      	add	sp, #8
 800fbec:	4770      	bx	lr
 800fbee:	4610      	mov	r0, r2
 800fbf0:	e7fb      	b.n	800fbea <__ascii_mbtowc+0x16>
 800fbf2:	f06f 0001 	mvn.w	r0, #1
 800fbf6:	e7f8      	b.n	800fbea <__ascii_mbtowc+0x16>

0800fbf8 <__malloc_lock>:
 800fbf8:	4801      	ldr	r0, [pc, #4]	; (800fc00 <__malloc_lock+0x8>)
 800fbfa:	f7ff ba5c 	b.w	800f0b6 <__retarget_lock_acquire_recursive>
 800fbfe:	bf00      	nop
 800fc00:	2400057c 	.word	0x2400057c

0800fc04 <__malloc_unlock>:
 800fc04:	4801      	ldr	r0, [pc, #4]	; (800fc0c <__malloc_unlock+0x8>)
 800fc06:	f7ff ba57 	b.w	800f0b8 <__retarget_lock_release_recursive>
 800fc0a:	bf00      	nop
 800fc0c:	2400057c 	.word	0x2400057c

0800fc10 <__sfputc_r>:
 800fc10:	6893      	ldr	r3, [r2, #8]
 800fc12:	3b01      	subs	r3, #1
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	b410      	push	{r4}
 800fc18:	6093      	str	r3, [r2, #8]
 800fc1a:	da08      	bge.n	800fc2e <__sfputc_r+0x1e>
 800fc1c:	6994      	ldr	r4, [r2, #24]
 800fc1e:	42a3      	cmp	r3, r4
 800fc20:	db01      	blt.n	800fc26 <__sfputc_r+0x16>
 800fc22:	290a      	cmp	r1, #10
 800fc24:	d103      	bne.n	800fc2e <__sfputc_r+0x1e>
 800fc26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc2a:	f7fe b9b9 	b.w	800dfa0 <__swbuf_r>
 800fc2e:	6813      	ldr	r3, [r2, #0]
 800fc30:	1c58      	adds	r0, r3, #1
 800fc32:	6010      	str	r0, [r2, #0]
 800fc34:	7019      	strb	r1, [r3, #0]
 800fc36:	4608      	mov	r0, r1
 800fc38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc3c:	4770      	bx	lr

0800fc3e <__sfputs_r>:
 800fc3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc40:	4606      	mov	r6, r0
 800fc42:	460f      	mov	r7, r1
 800fc44:	4614      	mov	r4, r2
 800fc46:	18d5      	adds	r5, r2, r3
 800fc48:	42ac      	cmp	r4, r5
 800fc4a:	d101      	bne.n	800fc50 <__sfputs_r+0x12>
 800fc4c:	2000      	movs	r0, #0
 800fc4e:	e007      	b.n	800fc60 <__sfputs_r+0x22>
 800fc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc54:	463a      	mov	r2, r7
 800fc56:	4630      	mov	r0, r6
 800fc58:	f7ff ffda 	bl	800fc10 <__sfputc_r>
 800fc5c:	1c43      	adds	r3, r0, #1
 800fc5e:	d1f3      	bne.n	800fc48 <__sfputs_r+0xa>
 800fc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc64 <_vfiprintf_r>:
 800fc64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc68:	460d      	mov	r5, r1
 800fc6a:	b09d      	sub	sp, #116	; 0x74
 800fc6c:	4614      	mov	r4, r2
 800fc6e:	4698      	mov	r8, r3
 800fc70:	4606      	mov	r6, r0
 800fc72:	b118      	cbz	r0, 800fc7c <_vfiprintf_r+0x18>
 800fc74:	6983      	ldr	r3, [r0, #24]
 800fc76:	b90b      	cbnz	r3, 800fc7c <_vfiprintf_r+0x18>
 800fc78:	f7ff f97a 	bl	800ef70 <__sinit>
 800fc7c:	4b89      	ldr	r3, [pc, #548]	; (800fea4 <_vfiprintf_r+0x240>)
 800fc7e:	429d      	cmp	r5, r3
 800fc80:	d11b      	bne.n	800fcba <_vfiprintf_r+0x56>
 800fc82:	6875      	ldr	r5, [r6, #4]
 800fc84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc86:	07d9      	lsls	r1, r3, #31
 800fc88:	d405      	bmi.n	800fc96 <_vfiprintf_r+0x32>
 800fc8a:	89ab      	ldrh	r3, [r5, #12]
 800fc8c:	059a      	lsls	r2, r3, #22
 800fc8e:	d402      	bmi.n	800fc96 <_vfiprintf_r+0x32>
 800fc90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc92:	f7ff fa10 	bl	800f0b6 <__retarget_lock_acquire_recursive>
 800fc96:	89ab      	ldrh	r3, [r5, #12]
 800fc98:	071b      	lsls	r3, r3, #28
 800fc9a:	d501      	bpl.n	800fca0 <_vfiprintf_r+0x3c>
 800fc9c:	692b      	ldr	r3, [r5, #16]
 800fc9e:	b9eb      	cbnz	r3, 800fcdc <_vfiprintf_r+0x78>
 800fca0:	4629      	mov	r1, r5
 800fca2:	4630      	mov	r0, r6
 800fca4:	f7fe f9ce 	bl	800e044 <__swsetup_r>
 800fca8:	b1c0      	cbz	r0, 800fcdc <_vfiprintf_r+0x78>
 800fcaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcac:	07dc      	lsls	r4, r3, #31
 800fcae:	d50e      	bpl.n	800fcce <_vfiprintf_r+0x6a>
 800fcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcb4:	b01d      	add	sp, #116	; 0x74
 800fcb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcba:	4b7b      	ldr	r3, [pc, #492]	; (800fea8 <_vfiprintf_r+0x244>)
 800fcbc:	429d      	cmp	r5, r3
 800fcbe:	d101      	bne.n	800fcc4 <_vfiprintf_r+0x60>
 800fcc0:	68b5      	ldr	r5, [r6, #8]
 800fcc2:	e7df      	b.n	800fc84 <_vfiprintf_r+0x20>
 800fcc4:	4b79      	ldr	r3, [pc, #484]	; (800feac <_vfiprintf_r+0x248>)
 800fcc6:	429d      	cmp	r5, r3
 800fcc8:	bf08      	it	eq
 800fcca:	68f5      	ldreq	r5, [r6, #12]
 800fccc:	e7da      	b.n	800fc84 <_vfiprintf_r+0x20>
 800fcce:	89ab      	ldrh	r3, [r5, #12]
 800fcd0:	0598      	lsls	r0, r3, #22
 800fcd2:	d4ed      	bmi.n	800fcb0 <_vfiprintf_r+0x4c>
 800fcd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcd6:	f7ff f9ef 	bl	800f0b8 <__retarget_lock_release_recursive>
 800fcda:	e7e9      	b.n	800fcb0 <_vfiprintf_r+0x4c>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	9309      	str	r3, [sp, #36]	; 0x24
 800fce0:	2320      	movs	r3, #32
 800fce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fce6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcea:	2330      	movs	r3, #48	; 0x30
 800fcec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800feb0 <_vfiprintf_r+0x24c>
 800fcf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fcf4:	f04f 0901 	mov.w	r9, #1
 800fcf8:	4623      	mov	r3, r4
 800fcfa:	469a      	mov	sl, r3
 800fcfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd00:	b10a      	cbz	r2, 800fd06 <_vfiprintf_r+0xa2>
 800fd02:	2a25      	cmp	r2, #37	; 0x25
 800fd04:	d1f9      	bne.n	800fcfa <_vfiprintf_r+0x96>
 800fd06:	ebba 0b04 	subs.w	fp, sl, r4
 800fd0a:	d00b      	beq.n	800fd24 <_vfiprintf_r+0xc0>
 800fd0c:	465b      	mov	r3, fp
 800fd0e:	4622      	mov	r2, r4
 800fd10:	4629      	mov	r1, r5
 800fd12:	4630      	mov	r0, r6
 800fd14:	f7ff ff93 	bl	800fc3e <__sfputs_r>
 800fd18:	3001      	adds	r0, #1
 800fd1a:	f000 80aa 	beq.w	800fe72 <_vfiprintf_r+0x20e>
 800fd1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd20:	445a      	add	r2, fp
 800fd22:	9209      	str	r2, [sp, #36]	; 0x24
 800fd24:	f89a 3000 	ldrb.w	r3, [sl]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f000 80a2 	beq.w	800fe72 <_vfiprintf_r+0x20e>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	f04f 32ff 	mov.w	r2, #4294967295
 800fd34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd38:	f10a 0a01 	add.w	sl, sl, #1
 800fd3c:	9304      	str	r3, [sp, #16]
 800fd3e:	9307      	str	r3, [sp, #28]
 800fd40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd44:	931a      	str	r3, [sp, #104]	; 0x68
 800fd46:	4654      	mov	r4, sl
 800fd48:	2205      	movs	r2, #5
 800fd4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd4e:	4858      	ldr	r0, [pc, #352]	; (800feb0 <_vfiprintf_r+0x24c>)
 800fd50:	f7f0 face 	bl	80002f0 <memchr>
 800fd54:	9a04      	ldr	r2, [sp, #16]
 800fd56:	b9d8      	cbnz	r0, 800fd90 <_vfiprintf_r+0x12c>
 800fd58:	06d1      	lsls	r1, r2, #27
 800fd5a:	bf44      	itt	mi
 800fd5c:	2320      	movmi	r3, #32
 800fd5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd62:	0713      	lsls	r3, r2, #28
 800fd64:	bf44      	itt	mi
 800fd66:	232b      	movmi	r3, #43	; 0x2b
 800fd68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd6c:	f89a 3000 	ldrb.w	r3, [sl]
 800fd70:	2b2a      	cmp	r3, #42	; 0x2a
 800fd72:	d015      	beq.n	800fda0 <_vfiprintf_r+0x13c>
 800fd74:	9a07      	ldr	r2, [sp, #28]
 800fd76:	4654      	mov	r4, sl
 800fd78:	2000      	movs	r0, #0
 800fd7a:	f04f 0c0a 	mov.w	ip, #10
 800fd7e:	4621      	mov	r1, r4
 800fd80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd84:	3b30      	subs	r3, #48	; 0x30
 800fd86:	2b09      	cmp	r3, #9
 800fd88:	d94e      	bls.n	800fe28 <_vfiprintf_r+0x1c4>
 800fd8a:	b1b0      	cbz	r0, 800fdba <_vfiprintf_r+0x156>
 800fd8c:	9207      	str	r2, [sp, #28]
 800fd8e:	e014      	b.n	800fdba <_vfiprintf_r+0x156>
 800fd90:	eba0 0308 	sub.w	r3, r0, r8
 800fd94:	fa09 f303 	lsl.w	r3, r9, r3
 800fd98:	4313      	orrs	r3, r2
 800fd9a:	9304      	str	r3, [sp, #16]
 800fd9c:	46a2      	mov	sl, r4
 800fd9e:	e7d2      	b.n	800fd46 <_vfiprintf_r+0xe2>
 800fda0:	9b03      	ldr	r3, [sp, #12]
 800fda2:	1d19      	adds	r1, r3, #4
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	9103      	str	r1, [sp, #12]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	bfbb      	ittet	lt
 800fdac:	425b      	neglt	r3, r3
 800fdae:	f042 0202 	orrlt.w	r2, r2, #2
 800fdb2:	9307      	strge	r3, [sp, #28]
 800fdb4:	9307      	strlt	r3, [sp, #28]
 800fdb6:	bfb8      	it	lt
 800fdb8:	9204      	strlt	r2, [sp, #16]
 800fdba:	7823      	ldrb	r3, [r4, #0]
 800fdbc:	2b2e      	cmp	r3, #46	; 0x2e
 800fdbe:	d10c      	bne.n	800fdda <_vfiprintf_r+0x176>
 800fdc0:	7863      	ldrb	r3, [r4, #1]
 800fdc2:	2b2a      	cmp	r3, #42	; 0x2a
 800fdc4:	d135      	bne.n	800fe32 <_vfiprintf_r+0x1ce>
 800fdc6:	9b03      	ldr	r3, [sp, #12]
 800fdc8:	1d1a      	adds	r2, r3, #4
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	9203      	str	r2, [sp, #12]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	bfb8      	it	lt
 800fdd2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fdd6:	3402      	adds	r4, #2
 800fdd8:	9305      	str	r3, [sp, #20]
 800fdda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fec0 <_vfiprintf_r+0x25c>
 800fdde:	7821      	ldrb	r1, [r4, #0]
 800fde0:	2203      	movs	r2, #3
 800fde2:	4650      	mov	r0, sl
 800fde4:	f7f0 fa84 	bl	80002f0 <memchr>
 800fde8:	b140      	cbz	r0, 800fdfc <_vfiprintf_r+0x198>
 800fdea:	2340      	movs	r3, #64	; 0x40
 800fdec:	eba0 000a 	sub.w	r0, r0, sl
 800fdf0:	fa03 f000 	lsl.w	r0, r3, r0
 800fdf4:	9b04      	ldr	r3, [sp, #16]
 800fdf6:	4303      	orrs	r3, r0
 800fdf8:	3401      	adds	r4, #1
 800fdfa:	9304      	str	r3, [sp, #16]
 800fdfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe00:	482c      	ldr	r0, [pc, #176]	; (800feb4 <_vfiprintf_r+0x250>)
 800fe02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe06:	2206      	movs	r2, #6
 800fe08:	f7f0 fa72 	bl	80002f0 <memchr>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d03f      	beq.n	800fe90 <_vfiprintf_r+0x22c>
 800fe10:	4b29      	ldr	r3, [pc, #164]	; (800feb8 <_vfiprintf_r+0x254>)
 800fe12:	bb1b      	cbnz	r3, 800fe5c <_vfiprintf_r+0x1f8>
 800fe14:	9b03      	ldr	r3, [sp, #12]
 800fe16:	3307      	adds	r3, #7
 800fe18:	f023 0307 	bic.w	r3, r3, #7
 800fe1c:	3308      	adds	r3, #8
 800fe1e:	9303      	str	r3, [sp, #12]
 800fe20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe22:	443b      	add	r3, r7
 800fe24:	9309      	str	r3, [sp, #36]	; 0x24
 800fe26:	e767      	b.n	800fcf8 <_vfiprintf_r+0x94>
 800fe28:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe2c:	460c      	mov	r4, r1
 800fe2e:	2001      	movs	r0, #1
 800fe30:	e7a5      	b.n	800fd7e <_vfiprintf_r+0x11a>
 800fe32:	2300      	movs	r3, #0
 800fe34:	3401      	adds	r4, #1
 800fe36:	9305      	str	r3, [sp, #20]
 800fe38:	4619      	mov	r1, r3
 800fe3a:	f04f 0c0a 	mov.w	ip, #10
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe44:	3a30      	subs	r2, #48	; 0x30
 800fe46:	2a09      	cmp	r2, #9
 800fe48:	d903      	bls.n	800fe52 <_vfiprintf_r+0x1ee>
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d0c5      	beq.n	800fdda <_vfiprintf_r+0x176>
 800fe4e:	9105      	str	r1, [sp, #20]
 800fe50:	e7c3      	b.n	800fdda <_vfiprintf_r+0x176>
 800fe52:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe56:	4604      	mov	r4, r0
 800fe58:	2301      	movs	r3, #1
 800fe5a:	e7f0      	b.n	800fe3e <_vfiprintf_r+0x1da>
 800fe5c:	ab03      	add	r3, sp, #12
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	462a      	mov	r2, r5
 800fe62:	4b16      	ldr	r3, [pc, #88]	; (800febc <_vfiprintf_r+0x258>)
 800fe64:	a904      	add	r1, sp, #16
 800fe66:	4630      	mov	r0, r6
 800fe68:	f7fd fc72 	bl	800d750 <_printf_float>
 800fe6c:	4607      	mov	r7, r0
 800fe6e:	1c78      	adds	r0, r7, #1
 800fe70:	d1d6      	bne.n	800fe20 <_vfiprintf_r+0x1bc>
 800fe72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe74:	07d9      	lsls	r1, r3, #31
 800fe76:	d405      	bmi.n	800fe84 <_vfiprintf_r+0x220>
 800fe78:	89ab      	ldrh	r3, [r5, #12]
 800fe7a:	059a      	lsls	r2, r3, #22
 800fe7c:	d402      	bmi.n	800fe84 <_vfiprintf_r+0x220>
 800fe7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe80:	f7ff f91a 	bl	800f0b8 <__retarget_lock_release_recursive>
 800fe84:	89ab      	ldrh	r3, [r5, #12]
 800fe86:	065b      	lsls	r3, r3, #25
 800fe88:	f53f af12 	bmi.w	800fcb0 <_vfiprintf_r+0x4c>
 800fe8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe8e:	e711      	b.n	800fcb4 <_vfiprintf_r+0x50>
 800fe90:	ab03      	add	r3, sp, #12
 800fe92:	9300      	str	r3, [sp, #0]
 800fe94:	462a      	mov	r2, r5
 800fe96:	4b09      	ldr	r3, [pc, #36]	; (800febc <_vfiprintf_r+0x258>)
 800fe98:	a904      	add	r1, sp, #16
 800fe9a:	4630      	mov	r0, r6
 800fe9c:	f7fd fee4 	bl	800dc68 <_printf_i>
 800fea0:	e7e4      	b.n	800fe6c <_vfiprintf_r+0x208>
 800fea2:	bf00      	nop
 800fea4:	0801011c 	.word	0x0801011c
 800fea8:	0801013c 	.word	0x0801013c
 800feac:	080100fc 	.word	0x080100fc
 800feb0:	08010302 	.word	0x08010302
 800feb4:	0801030c 	.word	0x0801030c
 800feb8:	0800d751 	.word	0x0800d751
 800febc:	0800fc3f 	.word	0x0800fc3f
 800fec0:	08010308 	.word	0x08010308

0800fec4 <_read_r>:
 800fec4:	b538      	push	{r3, r4, r5, lr}
 800fec6:	4d07      	ldr	r5, [pc, #28]	; (800fee4 <_read_r+0x20>)
 800fec8:	4604      	mov	r4, r0
 800feca:	4608      	mov	r0, r1
 800fecc:	4611      	mov	r1, r2
 800fece:	2200      	movs	r2, #0
 800fed0:	602a      	str	r2, [r5, #0]
 800fed2:	461a      	mov	r2, r3
 800fed4:	f7f1 ff30 	bl	8001d38 <_read>
 800fed8:	1c43      	adds	r3, r0, #1
 800feda:	d102      	bne.n	800fee2 <_read_r+0x1e>
 800fedc:	682b      	ldr	r3, [r5, #0]
 800fede:	b103      	cbz	r3, 800fee2 <_read_r+0x1e>
 800fee0:	6023      	str	r3, [r4, #0]
 800fee2:	bd38      	pop	{r3, r4, r5, pc}
 800fee4:	24000584 	.word	0x24000584

0800fee8 <__ascii_wctomb>:
 800fee8:	b149      	cbz	r1, 800fefe <__ascii_wctomb+0x16>
 800feea:	2aff      	cmp	r2, #255	; 0xff
 800feec:	bf85      	ittet	hi
 800feee:	238a      	movhi	r3, #138	; 0x8a
 800fef0:	6003      	strhi	r3, [r0, #0]
 800fef2:	700a      	strbls	r2, [r1, #0]
 800fef4:	f04f 30ff 	movhi.w	r0, #4294967295
 800fef8:	bf98      	it	ls
 800fefa:	2001      	movls	r0, #1
 800fefc:	4770      	bx	lr
 800fefe:	4608      	mov	r0, r1
 800ff00:	4770      	bx	lr

0800ff02 <abort>:
 800ff02:	b508      	push	{r3, lr}
 800ff04:	2006      	movs	r0, #6
 800ff06:	f000 f82b 	bl	800ff60 <raise>
 800ff0a:	2001      	movs	r0, #1
 800ff0c:	f7f1 ff0a 	bl	8001d24 <_exit>

0800ff10 <_raise_r>:
 800ff10:	291f      	cmp	r1, #31
 800ff12:	b538      	push	{r3, r4, r5, lr}
 800ff14:	4604      	mov	r4, r0
 800ff16:	460d      	mov	r5, r1
 800ff18:	d904      	bls.n	800ff24 <_raise_r+0x14>
 800ff1a:	2316      	movs	r3, #22
 800ff1c:	6003      	str	r3, [r0, #0]
 800ff1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff22:	bd38      	pop	{r3, r4, r5, pc}
 800ff24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ff26:	b112      	cbz	r2, 800ff2e <_raise_r+0x1e>
 800ff28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff2c:	b94b      	cbnz	r3, 800ff42 <_raise_r+0x32>
 800ff2e:	4620      	mov	r0, r4
 800ff30:	f000 f830 	bl	800ff94 <_getpid_r>
 800ff34:	462a      	mov	r2, r5
 800ff36:	4601      	mov	r1, r0
 800ff38:	4620      	mov	r0, r4
 800ff3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff3e:	f000 b817 	b.w	800ff70 <_kill_r>
 800ff42:	2b01      	cmp	r3, #1
 800ff44:	d00a      	beq.n	800ff5c <_raise_r+0x4c>
 800ff46:	1c59      	adds	r1, r3, #1
 800ff48:	d103      	bne.n	800ff52 <_raise_r+0x42>
 800ff4a:	2316      	movs	r3, #22
 800ff4c:	6003      	str	r3, [r0, #0]
 800ff4e:	2001      	movs	r0, #1
 800ff50:	e7e7      	b.n	800ff22 <_raise_r+0x12>
 800ff52:	2400      	movs	r4, #0
 800ff54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff58:	4628      	mov	r0, r5
 800ff5a:	4798      	blx	r3
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	e7e0      	b.n	800ff22 <_raise_r+0x12>

0800ff60 <raise>:
 800ff60:	4b02      	ldr	r3, [pc, #8]	; (800ff6c <raise+0xc>)
 800ff62:	4601      	mov	r1, r0
 800ff64:	6818      	ldr	r0, [r3, #0]
 800ff66:	f7ff bfd3 	b.w	800ff10 <_raise_r>
 800ff6a:	bf00      	nop
 800ff6c:	2400001c 	.word	0x2400001c

0800ff70 <_kill_r>:
 800ff70:	b538      	push	{r3, r4, r5, lr}
 800ff72:	4d07      	ldr	r5, [pc, #28]	; (800ff90 <_kill_r+0x20>)
 800ff74:	2300      	movs	r3, #0
 800ff76:	4604      	mov	r4, r0
 800ff78:	4608      	mov	r0, r1
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	602b      	str	r3, [r5, #0]
 800ff7e:	f7f1 fec1 	bl	8001d04 <_kill>
 800ff82:	1c43      	adds	r3, r0, #1
 800ff84:	d102      	bne.n	800ff8c <_kill_r+0x1c>
 800ff86:	682b      	ldr	r3, [r5, #0]
 800ff88:	b103      	cbz	r3, 800ff8c <_kill_r+0x1c>
 800ff8a:	6023      	str	r3, [r4, #0]
 800ff8c:	bd38      	pop	{r3, r4, r5, pc}
 800ff8e:	bf00      	nop
 800ff90:	24000584 	.word	0x24000584

0800ff94 <_getpid_r>:
 800ff94:	f7f1 beae 	b.w	8001cf4 <_getpid>

0800ff98 <_init>:
 800ff98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff9a:	bf00      	nop
 800ff9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff9e:	bc08      	pop	{r3}
 800ffa0:	469e      	mov	lr, r3
 800ffa2:	4770      	bx	lr

0800ffa4 <_fini>:
 800ffa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffa6:	bf00      	nop
 800ffa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ffaa:	bc08      	pop	{r3}
 800ffac:	469e      	mov	lr, r3
 800ffae:	4770      	bx	lr
