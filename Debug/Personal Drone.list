
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131fc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080134a0  080134a0  000234a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080139e0  080139e0  000239e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080139e8  080139e8  000239e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080139ec  080139ec  000239ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  24000000  080139f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004a8  240001fc  08013bec  000301fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240006a4  08013bec  000306a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b736  00000000  00000000  0003022a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004516  00000000  00000000  0005b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017b0  00000000  00000000  0005fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016b8  00000000  00000000  00061628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000394d5  00000000  00000000  00062ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f375  00000000  00000000  0009c1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168454  00000000  00000000  000bb52a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0022397e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007610  00000000  00000000  002239d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001fc 	.word	0x240001fc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013484 	.word	0x08013484

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000200 	.word	0x24000200
 80002dc:	08013484 	.word	0x08013484

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e00a      	b.n	80006b6 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbef      	blt.n	80006a0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	321e      	adds	r2, #30
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	331f      	adds	r3, #31
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <iBus_Check_CHKSUM+0x60>
 80006e6:	2300      	movs	r3, #0
 80006e8:	b2db      	uxtb	r3, r3

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3302      	adds	r3, #2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b21a      	sxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3303      	adds	r3, #3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3304      	adds	r3, #4
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b21a      	sxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073e:	b29a      	uxth	r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3306      	adds	r3, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21a      	sxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3307      	adds	r3, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000760:	b29a      	uxth	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3308      	adds	r3, #8
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b21a      	sxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3309      	adds	r3, #9
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000782:	b29a      	uxth	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	330a      	adds	r3, #10
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b21a      	sxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	330b      	adds	r3, #11
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0FFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	330d      	adds	r3, #13
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	815a      	strh	r2, [r3, #10]
	iBus->VrA = (data[14] | data[15]<<8) & 0x0FFF;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	330e      	adds	r3, #14
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	330f      	adds	r3, #15
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[16] | data[17]<<8) & 0x0FFF;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3310      	adds	r3, #16
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3311      	adds	r3, #17
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	825a      	strh	r2, [r3, #18]
	iBus->SwC = (data[18] | data[19]<<8) & 0x0FFF;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3312      	adds	r3, #18
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21a      	sxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3313      	adds	r3, #19
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	b29a      	uxth	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[20] | data[21]<<8) & 0x0FFF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b21a      	sxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3315      	adds	r3, #21
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	b29a      	uxth	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	81da      	strh	r2, [r3, #14]

//	iBus->FailSafe = (iBus->SwB == 1500) && (iBus->SwD == 1500);
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af04      	add	r7, sp, #16
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	4608      	mov	r0, r1
 800086a:	4611      	mov	r1, r2
 800086c:	461a      	mov	r2, r3
 800086e:	4603      	mov	r3, r0
 8000870:	70fb      	strb	r3, [r7, #3]
 8000872:	460b      	mov	r3, r1
 8000874:	70bb      	strb	r3, [r7, #2]
 8000876:	4613      	mov	r3, r2
 8000878:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	2b03      	cmp	r3, #3
 800087e:	d81b      	bhi.n	80008b8 <MPU9250_Init+0x58>
 8000880:	a201      	add	r2, pc, #4	; (adr r2, 8000888 <MPU9250_Init+0x28>)
 8000882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000886:	bf00      	nop
 8000888:	08000899 	.word	0x08000899
 800088c:	080008a1 	.word	0x080008a1
 8000890:	080008a9 	.word	0x080008a9
 8000894:	080008b1 	.word	0x080008b1
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 8000898:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <MPU9250_Init+0x1b0>)
 800089a:	4a5e      	ldr	r2, [pc, #376]	; (8000a14 <MPU9250_Init+0x1b4>)
 800089c:	601a      	str	r2, [r3, #0]
		break;
 800089e:	e00c      	b.n	80008ba <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80008a0:	4b5b      	ldr	r3, [pc, #364]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008a2:	4a5d      	ldr	r2, [pc, #372]	; (8000a18 <MPU9250_Init+0x1b8>)
 80008a4:	601a      	str	r2, [r3, #0]
		break;
 80008a6:	e008      	b.n	80008ba <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80008a8:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008aa:	4a5c      	ldr	r2, [pc, #368]	; (8000a1c <MPU9250_Init+0x1bc>)
 80008ac:	601a      	str	r2, [r3, #0]
		break;
 80008ae:	e004      	b.n	80008ba <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80008b0:	4b57      	ldr	r3, [pc, #348]	; (8000a10 <MPU9250_Init+0x1b0>)
 80008b2:	4a5b      	ldr	r2, [pc, #364]	; (8000a20 <MPU9250_Init+0x1c0>)
 80008b4:	601a      	str	r2, [r3, #0]
		break;
 80008b6:	e000      	b.n	80008ba <MPU9250_Init+0x5a>
	default:
		break;
 80008b8:	bf00      	nop
	}

	switch(Acc_FS)
 80008ba:	78bb      	ldrb	r3, [r7, #2]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d81f      	bhi.n	8000900 <MPU9250_Init+0xa0>
 80008c0:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <MPU9250_Init+0x68>)
 80008c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c6:	bf00      	nop
 80008c8:	080008d9 	.word	0x080008d9
 80008cc:	080008e3 	.word	0x080008e3
 80008d0:	080008ed 	.word	0x080008ed
 80008d4:	080008f7 	.word	0x080008f7
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 80008d8:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008da:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80008de:	601a      	str	r2, [r3, #0]
		break;
 80008e0:	e00f      	b.n	8000902 <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 80008e2:	4b50      	ldr	r3, [pc, #320]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008e4:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80008e8:	601a      	str	r2, [r3, #0]
		break;
 80008ea:	e00a      	b.n	8000902 <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 80008ec:	4b4d      	ldr	r3, [pc, #308]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008ee:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80008f2:	601a      	str	r2, [r3, #0]
		break;
 80008f4:	e005      	b.n	8000902 <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 80008f6:	4b4b      	ldr	r3, [pc, #300]	; (8000a24 <MPU9250_Init+0x1c4>)
 80008f8:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80008fc:	601a      	str	r2, [r3, #0]
		break;
 80008fe:	e000      	b.n	8000902 <MPU9250_Init+0xa2>
	default:
		break;
 8000900:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 8000902:	2364      	movs	r3, #100	; 0x64
 8000904:	9302      	str	r3, [sp, #8]
 8000906:	2301      	movs	r3, #1
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <MPU9250_Init+0x1c8>)
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2301      	movs	r3, #1
 8000910:	2275      	movs	r2, #117	; 0x75
 8000912:	21d0      	movs	r1, #208	; 0xd0
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f007 fba3 	bl	8008060 <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 800091a:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <MPU9250_Init+0x1c8>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	2b71      	cmp	r3, #113	; 0x71
 8000920:	d171      	bne.n	8000a06 <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 8000922:	4b42      	ldr	r3, [pc, #264]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	9302      	str	r3, [sp, #8]
 800092c:	2301      	movs	r3, #1
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	4b3e      	ldr	r3, [pc, #248]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2301      	movs	r3, #1
 8000936:	2219      	movs	r2, #25
 8000938:	21d0      	movs	r1, #208	; 0xd0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f007 fa7c 	bl	8007e38 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000940:	200a      	movs	r0, #10
 8000942:	f004 f88b 	bl	8004a5c <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000946:	4a39      	ldr	r2, [pc, #228]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000948:	787b      	ldrb	r3, [r7, #1]
 800094a:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	9302      	str	r3, [sp, #8]
 8000950:	2301      	movs	r3, #1
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	4b35      	ldr	r3, [pc, #212]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	221a      	movs	r2, #26
 800095c:	21d0      	movs	r1, #208	; 0xd0
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f007 fa6a 	bl	8007e38 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f004 f879 	bl	8004a5c <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 800096a:	78fb      	ldrb	r3, [r7, #3]
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <MPU9250_Init+0x1cc>)
 8000972:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 8000974:	2364      	movs	r3, #100	; 0x64
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	2301      	movs	r3, #1
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MPU9250_Init+0x1cc>)
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2301      	movs	r3, #1
 8000982:	221b      	movs	r2, #27
 8000984:	21d0      	movs	r1, #208	; 0xd0
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f007 fa56 	bl	8007e38 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 800098c:	200a      	movs	r0, #10
 800098e:	f004 f865 	bl	8004a5c <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 8000992:	78bb      	ldrb	r3, [r7, #2]
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <MPU9250_Init+0x1cc>)
 800099a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	9302      	str	r3, [sp, #8]
 80009a0:	2301      	movs	r3, #1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	221c      	movs	r2, #28
 80009ac:	21d0      	movs	r1, #208	; 0xd0
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f007 fa42 	bl	8007e38 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009b4:	200a      	movs	r0, #10
 80009b6:	f004 f851 	bl	8004a5c <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009bc:	7c3b      	ldrb	r3, [r7, #16]
 80009be:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80009c0:	2364      	movs	r3, #100	; 0x64
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	2301      	movs	r3, #1
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2301      	movs	r3, #1
 80009ce:	221d      	movs	r2, #29
 80009d0:	21d0      	movs	r1, #208	; 0xd0
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f007 fa30 	bl	8007e38 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f004 f83f 	bl	8004a5c <HAL_Delay>

		MPU9250_tx = 0x00;
 80009de:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	9302      	str	r3, [sp, #8]
 80009e8:	2301      	movs	r3, #1
 80009ea:	9301      	str	r3, [sp, #4]
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MPU9250_Init+0x1cc>)
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	2301      	movs	r3, #1
 80009f2:	226b      	movs	r2, #107	; 0x6b
 80009f4:	21d0      	movs	r1, #208	; 0xd0
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f007 fa1e 	bl	8007e38 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009fc:	200a      	movs	r0, #10
 80009fe:	f004 f82d 	bl	8004a5c <HAL_Delay>

		return 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e000      	b.n	8000a08 <MPU9250_Init+0x1a8>
	}
	return 0;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24000004 	.word	0x24000004
 8000a14:	43030000 	.word	0x43030000
 8000a18:	42830000 	.word	0x42830000
 8000a1c:	42033333 	.word	0x42033333
 8000a20:	41833333 	.word	0x41833333
 8000a24:	24000008 	.word	0x24000008
 8000a28:	240002e5 	.word	0x240002e5
 8000a2c:	2400026d 	.word	0x2400026d

08000a30 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af04      	add	r7, sp, #16
 8000a36:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	2301      	movs	r3, #1
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	226a      	movs	r2, #106	; 0x6a
 8000a4e:	21d0      	movs	r1, #208	; 0xd0
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f007 f9f1 	bl	8007e38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a56:	200a      	movs	r0, #10
 8000a58:	f004 f800 	bl	8004a5c <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	9302      	str	r3, [sp, #8]
 8000a66:	2301      	movs	r3, #1
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MPU9250_Bypass+0x58>)
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2301      	movs	r3, #1
 8000a70:	2237      	movs	r2, #55	; 0x37
 8000a72:	21d0      	movs	r1, #208	; 0xd0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f007 f9df 	bl	8007e38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f003 ffee 	bl	8004a5c <HAL_Delay>
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2400026d 	.word	0x2400026d

08000a8c <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af04      	add	r7, sp, #16
 8000a92:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MPU9250_Master+0xa0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 8000a9a:	2364      	movs	r3, #100	; 0x64
 8000a9c:	9302      	str	r3, [sp, #8]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2237      	movs	r2, #55	; 0x37
 8000aaa:	21d0      	movs	r1, #208	; 0xd0
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f007 f9c3 	bl	8007e38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f003 ffd2 	bl	8004a5c <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aba:	2220      	movs	r2, #32
 8000abc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MPU9250_Master+0xa0>)
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	226a      	movs	r2, #106	; 0x6a
 8000ace:	21d0      	movs	r1, #208	; 0xd0
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f007 f9b1 	bl	8007e38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f003 ffc0 	bl	8004a5c <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MPU9250_Master+0xa0>)
 8000ade:	220d      	movs	r2, #13
 8000ae0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 8000ae2:	2364      	movs	r3, #100	; 0x64
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MPU9250_Master+0xa0>)
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	2224      	movs	r2, #36	; 0x24
 8000af2:	21d0      	movs	r1, #208	; 0xd0
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f007 f99f 	bl	8007e38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000afa:	200a      	movs	r0, #10
 8000afc:	f003 ffae 	bl	8004a5c <HAL_Delay>

	MPU9250_tx = 0x00;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MPU9250_Master+0xa0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000b06:	2364      	movs	r3, #100	; 0x64
 8000b08:	9302      	str	r3, [sp, #8]
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MPU9250_Master+0xa0>)
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2301      	movs	r3, #1
 8000b14:	226b      	movs	r2, #107	; 0x6b
 8000b16:	21d0      	movs	r1, #208	; 0xd0
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f007 f98d 	bl	8007e38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f003 ff9c 	bl	8004a5c <HAL_Delay>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2400026d 	.word	0x2400026d

08000b30 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <MPU9250_AK8963_Setup+0xbc>)
 8000b3c:	2216      	movs	r2, #22
 8000b3e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000b40:	2364      	movs	r3, #100	; 0x64
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	2301      	movs	r3, #1
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <MPU9250_AK8963_Setup+0xbc>)
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	220a      	movs	r2, #10
 8000b50:	2118      	movs	r1, #24
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f007 f970 	bl	8007e38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b58:	200a      	movs	r0, #10
 8000b5a:	f003 ff7f 	bl	8004a5c <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_MPU9250_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000b5e:	2364      	movs	r3, #100	; 0x64
 8000b60:	9302      	str	r3, [sp, #8]
 8000b62:	2303      	movs	r3, #3
 8000b64:	9301      	str	r3, [sp, #4]
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <MPU9250_AK8963_Setup+0xc0>)
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	2210      	movs	r2, #16
 8000b6e:	2118      	movs	r1, #24
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f007 fa75 	bl	8008060 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000b76:	200a      	movs	r0, #10
 8000b78:	f003 ff70 	bl	8004a5c <HAL_Delay>

	DataStruct->ASAX = MPU9250_rx_buf[0];
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MPU9250_AK8963_Setup+0xc0>)
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	DataStruct->ASAY = MPU9250_rx_buf[1];
 8000b86:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MPU9250_AK8963_Setup+0xc0>)
 8000b88:	785a      	ldrb	r2, [r3, #1]
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	DataStruct->ASAZ = MPU9250_rx_buf[2];
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MPU9250_AK8963_Setup+0xc0>)
 8000b92:	789a      	ldrb	r2, [r3, #2]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	MPU9250_ASAX = DataStruct->ASAX;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MPU9250_AK8963_Setup+0xc4>)
 8000ba2:	701a      	strb	r2, [r3, #0]
	MPU9250_ASAY = DataStruct->ASAY;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MPU9250_AK8963_Setup+0xc8>)
 8000bac:	701a      	strb	r2, [r3, #0]
	MPU9250_ASAZ = DataStruct->ASAZ;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MPU9250_AK8963_Setup+0xcc>)
 8000bb6:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MPU9250_AK8963_Setup+0xd0>)
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2118      	movs	r1, #24
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f007 fa48 	bl	8008060 <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000bd0:	200a      	movs	r0, #10
 8000bd2:	f003 ff43 	bl	8004a5c <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MPU9250_AK8963_Setup+0xd0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b48      	cmp	r3, #72	; 0x48
 8000bdc:	d101      	bne.n	8000be2 <MPU9250_AK8963_Setup+0xb2>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <MPU9250_AK8963_Setup+0xb4>
	return 0;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2400026d 	.word	0x2400026d
 8000bf0:	240002e8 	.word	0x240002e8
 8000bf4:	24000000 	.word	0x24000000
 8000bf8:	24000001 	.word	0x24000001
 8000bfc:	24000002 	.word	0x24000002
 8000c00:	240002e4 	.word	0x240002e4

08000c04 <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af04      	add	r7, sp, #16
 8000c0a:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000c0c:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c0e:	228c      	movs	r2, #140	; 0x8c
 8000c10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	9302      	str	r3, [sp, #8]
 8000c16:	2301      	movs	r3, #1
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	2225      	movs	r2, #37	; 0x25
 8000c22:	21d0      	movs	r1, #208	; 0xd0
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f007 f907 	bl	8007e38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c2a:	200a      	movs	r0, #10
 8000c2c:	f003 ff16 	bl	8004a5c <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c32:	2203      	movs	r2, #3
 8000c34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	9302      	str	r3, [sp, #8]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2301      	movs	r3, #1
 8000c44:	2226      	movs	r2, #38	; 0x26
 8000c46:	21d0      	movs	r1, #208	; 0xd0
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f007 f8f5 	bl	8007e38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f003 ff04 	bl	8004a5c <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c56:	2287      	movs	r2, #135	; 0x87
 8000c58:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	9302      	str	r3, [sp, #8]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <MPU9250_Slave0_Enable+0x7c>)
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	2227      	movs	r2, #39	; 0x27
 8000c6a:	21d0      	movs	r1, #208	; 0xd0
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f007 f8e3 	bl	8007e38 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c72:	200a      	movs	r0, #10
 8000c74:	f003 fef2 	bl	8004a5c <HAL_Delay>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2400026d 	.word	0x2400026d

08000c84 <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000c8c:	2314      	movs	r3, #20
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <MPU9250_Read_All+0x24>)
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2301      	movs	r3, #1
 8000c96:	223b      	movs	r2, #59	; 0x3b
 8000c98:	21d0      	movs	r1, #208	; 0xd0
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f007 fafa 	bl	8008294 <HAL_I2C_Mem_Read_DMA>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	240002e8 	.word	0x240002e8
 8000cac:	00000000 	.word	0x00000000

08000cb0 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000cb8:	4bb9      	ldr	r3, [pc, #740]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	4bb7      	ldr	r3, [pc, #732]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000cc2:	785b      	ldrb	r3, [r3, #1]
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	425b      	negs	r3, r3
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000cd6:	4bb2      	ldr	r3, [pc, #712]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000cd8:	789b      	ldrb	r3, [r3, #2]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	4bb0      	ldr	r3, [pc, #704]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000ce0:	78db      	ldrb	r3, [r3, #3]
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 8000cec:	4bac      	ldr	r3, [pc, #688]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000cee:	791b      	ldrb	r3, [r3, #4]
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b21a      	sxth	r2, r3
 8000cf4:	4baa      	ldr	r3, [pc, #680]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000cf6:	795b      	ldrb	r3, [r3, #5]
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b21a      	sxth	r2, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000d02:	4ba7      	ldr	r3, [pc, #668]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d04:	7a1b      	ldrb	r3, [r3, #8]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	4ba5      	ldr	r3, [pc, #660]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d0c:	7a5b      	ldrb	r3, [r3, #9]
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b21a      	sxth	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000d18:	4ba1      	ldr	r3, [pc, #644]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d1a:	7a9b      	ldrb	r3, [r3, #10]
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	4b9f      	ldr	r3, [pc, #636]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d22:	7adb      	ldrb	r3, [r3, #11]
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	425b      	negs	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000d36:	4b9a      	ldr	r3, [pc, #616]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d38:	7b1b      	ldrb	r3, [r3, #12]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	b21a      	sxth	r2, r3
 8000d3e:	4b98      	ldr	r3, [pc, #608]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d40:	7b5b      	ldrb	r3, [r3, #13]
 8000d42:	b21b      	sxth	r3, r3
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000d54:	4b92      	ldr	r3, [pc, #584]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d56:	7bdb      	ldrb	r3, [r3, #15]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	4b90      	ldr	r3, [pc, #576]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d5e:	7b9b      	ldrb	r3, [r3, #14]
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	425b      	negs	r3, r3
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b21a      	sxth	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000d72:	4b8b      	ldr	r3, [pc, #556]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d74:	7c5b      	ldrb	r3, [r3, #17]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	4b89      	ldr	r3, [pc, #548]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d7c:	7c1b      	ldrb	r3, [r3, #16]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000d88:	4b85      	ldr	r3, [pc, #532]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d8a:	7cdb      	ldrb	r3, [r3, #19]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	b21a      	sxth	r2, r3
 8000d90:	4b83      	ldr	r3, [pc, #524]	; (8000fa0 <MPU9250_Parsing+0x2f0>)
 8000d92:	7c9b      	ldrb	r3, [r3, #18]
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b21a      	sxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dac:	4b7d      	ldr	r3, [pc, #500]	; (8000fa4 <MPU9250_Parsing+0x2f4>)
 8000dae:	ed93 7a00 	vldr	s14, [r3]
 8000db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000dc2:	ee07 3a90 	vmov	s15, r3
 8000dc6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dca:	4b76      	ldr	r3, [pc, #472]	; (8000fa4 <MPU9250_Parsing+0x2f4>)
 8000dcc:	ed93 7a00 	vldr	s14, [r3]
 8000dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000de0:	ee07 3a90 	vmov	s15, r3
 8000de4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000de8:	4b6e      	ldr	r3, [pc, #440]	; (8000fa4 <MPU9250_Parsing+0x2f4>)
 8000dea:	ed93 7a00 	vldr	s14, [r3]
 8000dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e06:	4b68      	ldr	r3, [pc, #416]	; (8000fa8 <MPU9250_Parsing+0x2f8>)
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e24:	4b60      	ldr	r3, [pc, #384]	; (8000fa8 <MPU9250_Parsing+0x2f8>)
 8000e26:	ed93 7a00 	vldr	s14, [r3]
 8000e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e42:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <MPU9250_Parsing+0x2f8>)
 8000e44:	ed93 7a00 	vldr	s14, [r3]
 8000e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e50:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8000f90 <MPU9250_Parsing+0x2e0>
 8000e54:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000e58:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8000f98 <MPU9250_Parsing+0x2e8>
 8000e5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000e70:	461a      	mov	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000e78:	3b80      	subs	r3, #128	; 0x80
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	da00      	bge.n	8000e80 <MPU9250_Parsing+0x1d0>
 8000e7e:	33ff      	adds	r3, #255	; 0xff
 8000e80:	121b      	asrs	r3, r3, #8
 8000e82:	3301      	adds	r3, #1
 8000e84:	fb03 f302 	mul.w	r3, r3, r2
 8000e88:	ee07 3a90 	vmov	s15, r3
 8000e8c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e90:	4b46      	ldr	r3, [pc, #280]	; (8000fac <MPU9250_Parsing+0x2fc>)
 8000e92:	ed93 7a00 	vldr	s14, [r3]
 8000e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000eae:	3b80      	subs	r3, #128	; 0x80
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	da00      	bge.n	8000eb6 <MPU9250_Parsing+0x206>
 8000eb4:	33ff      	adds	r3, #255	; 0xff
 8000eb6:	121b      	asrs	r3, r3, #8
 8000eb8:	3301      	adds	r3, #1
 8000eba:	fb03 f302 	mul.w	r3, r3, r2
 8000ebe:	ee07 3a90 	vmov	s15, r3
 8000ec2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ec6:	4b39      	ldr	r3, [pc, #228]	; (8000fac <MPU9250_Parsing+0x2fc>)
 8000ec8:	ed93 7a00 	vldr	s14, [r3]
 8000ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8000edc:	461a      	mov	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000ee4:	3b80      	subs	r3, #128	; 0x80
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	da00      	bge.n	8000eec <MPU9250_Parsing+0x23c>
 8000eea:	33ff      	adds	r3, #255	; 0xff
 8000eec:	121b      	asrs	r3, r3, #8
 8000eee:	3301      	adds	r3, #1
 8000ef0:	fb03 f302 	mul.w	r3, r3, r2
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000efc:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <MPU9250_Parsing+0x2fc>)
 8000efe:	ed93 7a00 	vldr	s14, [r3]
 8000f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000f54:	ee07 3a90 	vmov	s15, r3
 8000f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f6c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000fb0 <MPU9250_Parsing+0x300>
 8000f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f80:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000fb0 <MPU9250_Parsing+0x300>
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	e014      	b.n	8000fb4 <MPU9250_Parsing+0x304>
 8000f8a:	bf00      	nop
 8000f8c:	f3af 8000 	nop.w
 8000f90:	33333333 	.word	0x33333333
 8000f94:	3fc33333 	.word	0x3fc33333
 8000f98:	147ae148 	.word	0x147ae148
 8000f9c:	3ff147ae 	.word	0x3ff147ae
 8000fa0:	240002e8 	.word	0x240002e8
 8000fa4:	24000004 	.word	0x24000004
 8000fa8:	24000008 	.word	0x24000008
 8000fac:	2400000c 	.word	0x2400000c
 8000fb0:	3c8efa35 	.word	0x3c8efa35
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000fc0:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8000fb0 <MPU9250_Parsing+0x300>
 8000fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8000fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My -= DataStruct->My_Offset;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8000ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	0000      	movs	r0, r0
	...

08001020 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8001028:	4baf      	ldr	r3, [pc, #700]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	4bad      	ldr	r3, [pc, #692]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001032:	785b      	ldrb	r3, [r3, #1]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21b      	sxth	r3, r3
 800103a:	b29b      	uxth	r3, r3
 800103c:	425b      	negs	r3, r3
 800103e:	b29b      	uxth	r3, r3
 8001040:	b21a      	sxth	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8001046:	4ba8      	ldr	r3, [pc, #672]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001048:	789b      	ldrb	r3, [r3, #2]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	4ba6      	ldr	r3, [pc, #664]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001050:	78db      	ldrb	r3, [r3, #3]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]);
 800105c:	4ba2      	ldr	r3, [pc, #648]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	4ba0      	ldr	r3, [pc, #640]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001066:	795b      	ldrb	r3, [r3, #5]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	809a      	strh	r2, [r3, #4]
	// Didn't Save Temp Value
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8001072:	4b9d      	ldr	r3, [pc, #628]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001074:	7a1b      	ldrb	r3, [r3, #8]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	4b9b      	ldr	r3, [pc, #620]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 800107c:	7a5b      	ldrb	r3, [r3, #9]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21a      	sxth	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8001088:	4b97      	ldr	r3, [pc, #604]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 800108a:	7a9b      	ldrb	r3, [r3, #10]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	4b95      	ldr	r3, [pc, #596]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001092:	7adb      	ldrb	r3, [r3, #11]
 8001094:	b21b      	sxth	r3, r3
 8001096:	4313      	orrs	r3, r2
 8001098:	b21b      	sxth	r3, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	425b      	negs	r3, r3
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 80010a6:	4b90      	ldr	r3, [pc, #576]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010a8:	7b1b      	ldrb	r3, [r3, #12]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b8e      	ldr	r3, [pc, #568]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010b0:	7b5b      	ldrb	r3, [r3, #13]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	425b      	negs	r3, r3
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b21a      	sxth	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	831a      	strh	r2, [r3, #24]

	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 80010c4:	4b88      	ldr	r3, [pc, #544]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010c6:	7bdb      	ldrb	r3, [r3, #15]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b86      	ldr	r3, [pc, #536]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010ce:	7b9b      	ldrb	r3, [r3, #14]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	425b      	negs	r3, r3
 80010da:	b29b      	uxth	r3, r3
 80010dc:	b21a      	sxth	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	875a      	strh	r2, [r3, #58]	; 0x3a
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 80010e2:	4b81      	ldr	r3, [pc, #516]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010e4:	7c5b      	ldrb	r3, [r3, #17]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b7f      	ldr	r3, [pc, #508]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010ec:	7c1b      	ldrb	r3, [r3, #16]
 80010ee:	b21b      	sxth	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	871a      	strh	r2, [r3, #56]	; 0x38
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 80010f8:	4b7b      	ldr	r3, [pc, #492]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80010fa:	7cdb      	ldrb	r3, [r3, #19]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21a      	sxth	r2, r3
 8001100:	4b79      	ldr	r3, [pc, #484]	; (80012e8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001102:	7c9b      	ldrb	r3, [r3, #18]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21a      	sxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	879a      	strh	r2, [r3, #60]	; 0x3c

	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB* D2R;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800111c:	4b73      	ldr	r3, [pc, #460]	; (80012ec <MPU9250_Parsing_NoOffset+0x2cc>)
 800111e:	ed93 7a00 	vldr	s14, [r3]
 8001122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001126:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 800112a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB* D2R;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001142:	4b6a      	ldr	r3, [pc, #424]	; (80012ec <MPU9250_Parsing_NoOffset+0x2cc>)
 8001144:	ed93 7a00 	vldr	s14, [r3]
 8001148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 8001150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB* D2R;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001168:	4b60      	ldr	r3, [pc, #384]	; (80012ec <MPU9250_Parsing_NoOffset+0x2cc>)
 800116a:	ed93 7a00 	vldr	s14, [r3]
 800116e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001172:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 8001176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	edd3 7a08 	vldr	s15, [r3, #32]
 8001186:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 800118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800119a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 800119e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80011ae:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80012f0 <MPU9250_Parsing_NoOffset+0x2d0>
 80011b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011ca:	4b4a      	ldr	r3, [pc, #296]	; (80012f4 <MPU9250_Parsing_NoOffset+0x2d4>)
 80011cc:	ed93 7a00 	vldr	s14, [r3]
 80011d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011e8:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <MPU9250_Parsing_NoOffset+0x2d4>)
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <MPU9250_Parsing_NoOffset+0x2d4>)
 8001208:	ed93 7a00 	vldr	s14, [r3]
 800120c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001210:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001214:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80012d8 <MPU9250_Parsing_NoOffset+0x2b8>
 8001218:	ee37 6b46 	vsub.f64	d6, d7, d6
 800121c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80012e0 <MPU9250_Parsing_NoOffset+0x2c0>
 8001220:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001224:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Mx = (DataStruct->Mx_Raw * ((MPU9250_ASAX - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8001234:	461a      	mov	r2, r3
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MPU9250_Parsing_NoOffset+0x2d8>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3b80      	subs	r3, #128	; 0x80
 800123c:	2b00      	cmp	r3, #0
 800123e:	da00      	bge.n	8001242 <MPU9250_Parsing_NoOffset+0x222>
 8001240:	33ff      	adds	r3, #255	; 0xff
 8001242:	121b      	asrs	r3, r3, #8
 8001244:	3301      	adds	r3, #1
 8001246:	fb03 f302 	mul.w	r3, r3, r2
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <MPU9250_Parsing_NoOffset+0x2dc>)
 8001254:	ed93 7a00 	vldr	s14, [r3]
 8001258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	DataStruct->My = (DataStruct->My_Raw * ((MPU9250_ASAY - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001268:	461a      	mov	r2, r3
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <MPU9250_Parsing_NoOffset+0x2e0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	3b80      	subs	r3, #128	; 0x80
 8001270:	2b00      	cmp	r3, #0
 8001272:	da00      	bge.n	8001276 <MPU9250_Parsing_NoOffset+0x256>
 8001274:	33ff      	adds	r3, #255	; 0xff
 8001276:	121b      	asrs	r3, r3, #8
 8001278:	3301      	adds	r3, #1
 800127a:	fb03 f302 	mul.w	r3, r3, r2
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MPU9250_Parsing_NoOffset+0x2dc>)
 8001288:	ed93 7a00 	vldr	s14, [r3]
 800128c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	DataStruct->Mz = (DataStruct->Mz_Raw * ((MPU9250_ASAZ - 128) / 256 + 1)) / MPU9250_Mag_LSB;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800129c:	461a      	mov	r2, r3
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MPU9250_Parsing_NoOffset+0x2e4>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	3b80      	subs	r3, #128	; 0x80
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	da00      	bge.n	80012aa <MPU9250_Parsing_NoOffset+0x28a>
 80012a8:	33ff      	adds	r3, #255	; 0xff
 80012aa:	121b      	asrs	r3, r3, #8
 80012ac:	3301      	adds	r3, #1
 80012ae:	fb03 f302 	mul.w	r3, r3, r2
 80012b2:	ee07 3a90 	vmov	s15, r3
 80012b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MPU9250_Parsing_NoOffset+0x2dc>)
 80012bc:	ed93 7a00 	vldr	s14, [r3]
 80012c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	33333333 	.word	0x33333333
 80012dc:	3fc33333 	.word	0x3fc33333
 80012e0:	147ae148 	.word	0x147ae148
 80012e4:	3ff147ae 	.word	0x3ff147ae
 80012e8:	240002e8 	.word	0x240002e8
 80012ec:	24000004 	.word	0x24000004
 80012f0:	3c8efa35 	.word	0x3c8efa35
 80012f4:	24000008 	.word	0x24000008
 80012f8:	24000000 	.word	0x24000000
 80012fc:	2400000c 	.word	0x2400000c
 8001300:	24000001 	.word	0x24000001
 8001304:	24000002 	.word	0x24000002

08001308 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b0ae      	sub	sp, #184	; 0xb8
 800130c:	af00      	add	r7, sp, #0
 800130e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001312:	edc7 0a08 	vstr	s1, [r7, #32]
 8001316:	ed87 1a07 	vstr	s2, [r7, #28]
 800131a:	edc7 1a06 	vstr	s3, [r7, #24]
 800131e:	ed87 2a05 	vstr	s4, [r7, #20]
 8001322:	edc7 2a04 	vstr	s5, [r7, #16]
 8001326:	ed87 3a03 	vstr	s6, [r7, #12]
 800132a:	edc7 3a02 	vstr	s7, [r7, #8]
 800132e:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001332:	edd7 7a03 	vldr	s15, [r7, #12]
 8001336:	eef5 7a40 	vcmp.f32	s15, #0.0
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	d11d      	bne.n	800137c <MadgwickAHRSupdate+0x74>
 8001340:	edd7 7a02 	vldr	s15, [r7, #8]
 8001344:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134c:	d116      	bne.n	800137c <MadgwickAHRSupdate+0x74>
 800134e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001352:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	d10f      	bne.n	800137c <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 800135c:	edd7 2a04 	vldr	s5, [r7, #16]
 8001360:	ed97 2a05 	vldr	s4, [r7, #20]
 8001364:	edd7 1a06 	vldr	s3, [r7, #24]
 8001368:	ed97 1a07 	vldr	s2, [r7, #28]
 800136c:	edd7 0a08 	vldr	s1, [r7, #32]
 8001370:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001374:	f000 ffd6 	bl	8002324 <MadgwickAHRSupdateIMU>
		return;
 8001378:	f000 bfb4 	b.w	80022e4 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800137c:	4be6      	ldr	r3, [pc, #920]	; (8001718 <MadgwickAHRSupdate+0x410>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	eeb1 7a67 	vneg.f32	s14, s15
 8001386:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800138a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138e:	4be3      	ldr	r3, [pc, #908]	; (800171c <MadgwickAHRSupdate+0x414>)
 8001390:	edd3 6a00 	vldr	s13, [r3]
 8001394:	edd7 7a08 	vldr	s15, [r7, #32]
 8001398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013a0:	4bdf      	ldr	r3, [pc, #892]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80013a2:	edd3 6a00 	vldr	s13, [r3]
 80013a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ba:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80013be:	4bd9      	ldr	r3, [pc, #868]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 80013c0:	ed93 7a00 	vldr	s14, [r3]
 80013c4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013cc:	4bd3      	ldr	r3, [pc, #844]	; (800171c <MadgwickAHRSupdate+0x414>)
 80013ce:	edd3 6a00 	vldr	s13, [r3]
 80013d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013de:	4bd0      	ldr	r3, [pc, #832]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80013e0:	edd3 6a00 	vldr	s13, [r3]
 80013e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80013fc:	4bc9      	ldr	r3, [pc, #804]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 80013fe:	ed93 7a00 	vldr	s14, [r3]
 8001402:	edd7 7a08 	vldr	s15, [r7, #32]
 8001406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140a:	4bc3      	ldr	r3, [pc, #780]	; (8001718 <MadgwickAHRSupdate+0x410>)
 800140c:	edd3 6a00 	vldr	s13, [r3]
 8001410:	edd7 7a07 	vldr	s15, [r7, #28]
 8001414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001418:	ee37 7a67 	vsub.f32	s14, s14, s15
 800141c:	4bc0      	ldr	r3, [pc, #768]	; (8001720 <MadgwickAHRSupdate+0x418>)
 800141e:	edd3 6a00 	vldr	s13, [r3]
 8001422:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800143a:	4bba      	ldr	r3, [pc, #744]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 800143c:	ed93 7a00 	vldr	s14, [r3]
 8001440:	edd7 7a07 	vldr	s15, [r7, #28]
 8001444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001448:	4bb3      	ldr	r3, [pc, #716]	; (8001718 <MadgwickAHRSupdate+0x410>)
 800144a:	edd3 6a00 	vldr	s13, [r3]
 800144e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145a:	4bb0      	ldr	r3, [pc, #704]	; (800171c <MadgwickAHRSupdate+0x414>)
 800145c:	edd3 6a00 	vldr	s13, [r3]
 8001460:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800146c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001474:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001478:	edd7 7a06 	vldr	s15, [r7, #24]
 800147c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	d10e      	bne.n	80014a4 <MadgwickAHRSupdate+0x19c>
 8001486:	edd7 7a05 	vldr	s15, [r7, #20]
 800148a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	d107      	bne.n	80014a4 <MadgwickAHRSupdate+0x19c>
 8001494:	edd7 7a04 	vldr	s15, [r7, #16]
 8001498:	eef5 7a40 	vcmp.f32	s15, #0.0
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	f000 85a6 	beq.w	8001ff0 <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80014a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80014b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80014bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c4:	eeb0 0a67 	vmov.f32	s0, s15
 80014c8:	f001 fb5a 	bl	8002b80 <invSqrt>
 80014cc:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80014d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80014d4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014dc:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80014e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ec:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 80014f0:	ed97 7a04 	vldr	s14, [r7, #16]
 80014f4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fc:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001500:	edd7 7a03 	vldr	s15, [r7, #12]
 8001504:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001508:	edd7 7a02 	vldr	s15, [r7, #8]
 800150c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001510:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001514:	edd7 7a01 	vldr	s15, [r7, #4]
 8001518:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800151c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001520:	eeb0 0a67 	vmov.f32	s0, s15
 8001524:	f001 fb2c 	bl	8002b80 <invSqrt>
 8001528:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 800152c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001530:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001538:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 800153c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001540:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001548:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 800154c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001550:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 800155c:	4b71      	ldr	r3, [pc, #452]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001566:	ed97 7a03 	vldr	s14, [r7, #12]
 800156a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 8001572:	4b6c      	ldr	r3, [pc, #432]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800157c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001588:	4b66      	ldr	r3, [pc, #408]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001592:	ed97 7a01 	vldr	s14, [r7, #4]
 8001596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 800159e:	4b5e      	ldr	r3, [pc, #376]	; (8001718 <MadgwickAHRSupdate+0x410>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80015ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015be:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 80015c2:	4b55      	ldr	r3, [pc, #340]	; (8001718 <MadgwickAHRSupdate+0x410>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015cc:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80015d0:	4b52      	ldr	r3, [pc, #328]	; (800171c <MadgwickAHRSupdate+0x414>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015da:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80015de:	4b50      	ldr	r3, [pc, #320]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015e8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 80015ec:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015f6:	4b49      	ldr	r3, [pc, #292]	; (800171c <MadgwickAHRSupdate+0x414>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001600:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <MadgwickAHRSupdate+0x414>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800160e:	4b44      	ldr	r3, [pc, #272]	; (8001720 <MadgwickAHRSupdate+0x418>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001618:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 800161c:	4b41      	ldr	r3, [pc, #260]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 800161e:	ed93 7a00 	vldr	s14, [r3]
 8001622:	4b40      	ldr	r3, [pc, #256]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800162c:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001630:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 8001632:	ed93 7a00 	vldr	s14, [r3]
 8001636:	4b38      	ldr	r3, [pc, #224]	; (8001718 <MadgwickAHRSupdate+0x410>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001640:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001644:	4b37      	ldr	r3, [pc, #220]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 8001646:	ed93 7a00 	vldr	s14, [r3]
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <MadgwickAHRSupdate+0x414>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001654:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001658:	4b32      	ldr	r3, [pc, #200]	; (8001724 <MadgwickAHRSupdate+0x41c>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	4b30      	ldr	r3, [pc, #192]	; (8001720 <MadgwickAHRSupdate+0x418>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001668:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <MadgwickAHRSupdate+0x410>)
 800166e:	ed93 7a00 	vldr	s14, [r3]
 8001672:	4b29      	ldr	r3, [pc, #164]	; (8001718 <MadgwickAHRSupdate+0x410>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <MadgwickAHRSupdate+0x410>)
 8001682:	ed93 7a00 	vldr	s14, [r3]
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <MadgwickAHRSupdate+0x414>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001690:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <MadgwickAHRSupdate+0x410>)
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <MadgwickAHRSupdate+0x418>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MadgwickAHRSupdate+0x414>)
 80016aa:	ed93 7a00 	vldr	s14, [r3]
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <MadgwickAHRSupdate+0x414>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <MadgwickAHRSupdate+0x414>)
 80016be:	ed93 7a00 	vldr	s14, [r3]
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80016c4:	edd3 7a00 	vldr	s15, [r3]
 80016c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016cc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80016d2:	ed93 7a00 	vldr	s14, [r3]
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80016e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80016e8:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MadgwickAHRSupdate+0x418>)
 80016f2:	edd3 6a00 	vldr	s13, [r3]
 80016f6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80016fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MadgwickAHRSupdate+0x414>)
 8001704:	edd3 6a00 	vldr	s13, [r3]
 8001708:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800170c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001710:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001714:	e008      	b.n	8001728 <MadgwickAHRSupdate+0x420>
 8001716:	bf00      	nop
 8001718:	24000218 	.word	0x24000218
 800171c:	2400021c 	.word	0x2400021c
 8001720:	24000220 	.word	0x24000220
 8001724:	24000014 	.word	0x24000014
 8001728:	edd7 6a03 	vldr	s13, [r7, #12]
 800172c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001734:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001738:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800173c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001740:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001744:	4bf5      	ldr	r3, [pc, #980]	; (8001b1c <MadgwickAHRSupdate+0x814>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001752:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001756:	edd7 7a01 	vldr	s15, [r7, #4]
 800175a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800175e:	4bf0      	ldr	r3, [pc, #960]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001770:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001778:	ee37 7a67 	vsub.f32	s14, s14, s15
 800177c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001780:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001790:	4be3      	ldr	r3, [pc, #908]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 8001792:	ed93 7a00 	vldr	s14, [r3]
 8001796:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800179a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800179e:	edd7 6a02 	vldr	s13, [r7, #8]
 80017a2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ae:	4bdd      	ldr	r3, [pc, #884]	; (8001b24 <MadgwickAHRSupdate+0x81c>)
 80017b0:	edd3 6a00 	vldr	s13, [r3]
 80017b4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80017b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c0:	4bd6      	ldr	r3, [pc, #856]	; (8001b1c <MadgwickAHRSupdate+0x814>)
 80017c2:	edd3 6a00 	vldr	s13, [r3]
 80017c6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80017ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d2:	edd7 6a02 	vldr	s13, [r7, #8]
 80017d6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017e2:	edd7 6a02 	vldr	s13, [r7, #8]
 80017e6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80017f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017fe:	4bc8      	ldr	r3, [pc, #800]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800180c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001810:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001820:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001824:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001828:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800182c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001838:	eeb0 0b47 	vmov.f64	d0, d7
 800183c:	f011 f980 	bl	8012b40 <sqrt>
 8001840:	eeb0 7b40 	vmov.f64	d7, d0
 8001844:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001848:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800184c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001850:	eeb1 7a67 	vneg.f32	s14, s15
 8001854:	4bb1      	ldr	r3, [pc, #708]	; (8001b1c <MadgwickAHRSupdate+0x814>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185e:	4bb1      	ldr	r3, [pc, #708]	; (8001b24 <MadgwickAHRSupdate+0x81c>)
 8001860:	edd3 6a00 	vldr	s13, [r3]
 8001864:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001868:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001870:	edd7 6a01 	vldr	s13, [r7, #4]
 8001874:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001880:	4ba7      	ldr	r3, [pc, #668]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 8001882:	edd3 6a00 	vldr	s13, [r3]
 8001886:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800188a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001892:	edd7 6a01 	vldr	s13, [r7, #4]
 8001896:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800189a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80018a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ae:	4b9c      	ldr	r3, [pc, #624]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018bc:	edd7 6a01 	vldr	s13, [r7, #4]
 80018c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018cc:	edd7 6a01 	vldr	s13, [r7, #4]
 80018d0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018dc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 80018e0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018e8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 80018ec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018f4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80018f8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80018fc:	eeb1 7a67 	vneg.f32	s14, s15
 8001900:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001904:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001908:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800190c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001910:	edd7 7a06 	vldr	s15, [r7, #24]
 8001914:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800191c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001920:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001924:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001928:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800192c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001930:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001934:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <MadgwickAHRSupdate+0x814>)
 8001942:	edd3 6a00 	vldr	s13, [r3]
 8001946:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800194a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800194e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001952:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001956:	ee36 6a67 	vsub.f32	s12, s12, s15
 800195a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800195e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001962:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001966:	ee26 6a27 	vmul.f32	s12, s12, s15
 800196a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800196e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001972:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001976:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800197a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800197e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001982:	edd7 7a03 	vldr	s15, [r7, #12]
 8001986:	ee76 7a67 	vsub.f32	s15, s12, s15
 800198a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800198e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001992:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001996:	eef1 6a67 	vneg.f32	s13, s15
 800199a:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019a4:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <MadgwickAHRSupdate+0x81c>)
 80019a6:	ed93 6a00 	vldr	s12, [r3]
 80019aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019b6:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80019ba:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80019be:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019c2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019c6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019ca:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80019ce:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019d2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80019d6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019da:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019de:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019f2:	4b4a      	ldr	r3, [pc, #296]	; (8001b1c <MadgwickAHRSupdate+0x814>)
 80019f4:	edd3 6a00 	vldr	s13, [r3]
 80019f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a00:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001a04:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a08:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a0c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a10:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a14:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001a18:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a1c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a20:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a24:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a30:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a34:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a38:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001a48:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a4c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a50:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a60:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a68:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a6c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a70:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a78:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a80:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a8c:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <MadgwickAHRSupdate+0x81c>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a96:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a9a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001aa2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001aa6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001aaa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001aae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ab2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aba:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <MadgwickAHRSupdate+0x818>)
 8001ac8:	edd3 6a00 	vldr	s13, [r3]
 8001acc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ad0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ad4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001ad8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001adc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ae0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ae4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ae8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001aec:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001af0:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001af4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001af8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001afc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b00:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b04:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b18:	e006      	b.n	8001b28 <MadgwickAHRSupdate+0x820>
 8001b1a:	bf00      	nop
 8001b1c:	2400021c 	.word	0x2400021c
 8001b20:	24000220 	.word	0x24000220
 8001b24:	24000218 	.word	0x24000218
 8001b28:	4bf6      	ldr	r3, [pc, #984]	; (8001f04 <MadgwickAHRSupdate+0xbfc>)
 8001b2a:	edd3 6a00 	vldr	s13, [r3]
 8001b2e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b36:	4bf4      	ldr	r3, [pc, #976]	; (8001f08 <MadgwickAHRSupdate+0xc00>)
 8001b38:	ed93 6a00 	vldr	s12, [r3]
 8001b3c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b44:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b48:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001b4c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b50:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b54:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b58:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b5c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001b60:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b64:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001b68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b6c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b70:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b78:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b84:	4be1      	ldr	r3, [pc, #900]	; (8001f0c <MadgwickAHRSupdate+0xc04>)
 8001b86:	edd3 6a00 	vldr	s13, [r3]
 8001b8a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b92:	4bdf      	ldr	r3, [pc, #892]	; (8001f10 <MadgwickAHRSupdate+0xc08>)
 8001b94:	ed93 6a00 	vldr	s12, [r3]
 8001b98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b9c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ba0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ba4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001ba8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bac:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bb0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bb8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001bbc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001bc0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001bc4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bc8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001bcc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bd0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001bd4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bdc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001bec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001bf0:	eeb1 7a67 	vneg.f32	s14, s15
 8001bf4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bf8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bfc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001c00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c10:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001c14:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001c18:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001c1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c20:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c28:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c34:	4bb3      	ldr	r3, [pc, #716]	; (8001f04 <MadgwickAHRSupdate+0xbfc>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c3e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c42:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c46:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001c4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c52:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c56:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c5a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c62:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c6e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c72:	eef1 6a67 	vneg.f32	s13, s15
 8001c76:	4ba3      	ldr	r3, [pc, #652]	; (8001f04 <MadgwickAHRSupdate+0xbfc>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c80:	4ba1      	ldr	r3, [pc, #644]	; (8001f08 <MadgwickAHRSupdate+0xc00>)
 8001c82:	ed93 6a00 	vldr	s12, [r3]
 8001c86:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c92:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c96:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c9a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c9e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ca2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ca6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001caa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cae:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001cb2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001cb6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cbe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cc2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cca:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd6:	4b8e      	ldr	r3, [pc, #568]	; (8001f10 <MadgwickAHRSupdate+0xc08>)
 8001cd8:	edd3 6a00 	vldr	s13, [r3]
 8001cdc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ce0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ce4:	4b89      	ldr	r3, [pc, #548]	; (8001f0c <MadgwickAHRSupdate+0xc04>)
 8001ce6:	ed93 6a00 	vldr	s12, [r3]
 8001cea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cee:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cf2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cf6:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001cfa:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001cfe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d02:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d06:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d0a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001d0e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001d12:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001d16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d1a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d1e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d26:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d32:	4b75      	ldr	r3, [pc, #468]	; (8001f08 <MadgwickAHRSupdate+0xc00>)
 8001d34:	edd3 6a00 	vldr	s13, [r3]
 8001d38:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d40:	4b70      	ldr	r3, [pc, #448]	; (8001f04 <MadgwickAHRSupdate+0xbfc>)
 8001d42:	ed93 6a00 	vldr	s12, [r3]
 8001d46:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d52:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001d56:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d5a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d5e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d62:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d66:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001d6a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001d6e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d72:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d76:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d7e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d82:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d8a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d96:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d9a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d9e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001da2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001daa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001db6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001dbe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001dc2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001dc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dd2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dde:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001de2:	eef1 6a67 	vneg.f32	s13, s15
 8001de6:	4b49      	ldr	r3, [pc, #292]	; (8001f0c <MadgwickAHRSupdate+0xc04>)
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001df0:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <MadgwickAHRSupdate+0xc08>)
 8001df2:	ed93 6a00 	vldr	s12, [r3]
 8001df6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dfa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dfe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e02:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001e06:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e0a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e0e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001e12:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e16:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e1a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e1e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001e22:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e26:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e2e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e32:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e46:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e4a:	eef1 6a67 	vneg.f32	s13, s15
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <MadgwickAHRSupdate+0xc00>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <MadgwickAHRSupdate+0xbfc>)
 8001e5a:	ed93 6a00 	vldr	s12, [r3]
 8001e5e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e6a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001e6e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e72:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e76:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e7a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e7e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e82:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e86:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e8e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e92:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ea6:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <MadgwickAHRSupdate+0xc08>)
 8001ea8:	edd3 6a00 	vldr	s13, [r3]
 8001eac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001eb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eb4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001eb8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ebc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ec0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ec4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ec8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001ecc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ed0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ed4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ed8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001edc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ee0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ee4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ee8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eec:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001efc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f00:	e008      	b.n	8001f14 <MadgwickAHRSupdate+0xc0c>
 8001f02:	bf00      	nop
 8001f04:	2400021c 	.word	0x2400021c
 8001f08:	24000014 	.word	0x24000014
 8001f0c:	24000220 	.word	0x24000220
 8001f10:	24000218 	.word	0x24000218
 8001f14:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f1c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f24:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f30:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f40:	f000 fe1e 	bl	8002b80 <invSqrt>
 8001f44:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001f48:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f4c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f54:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001f58:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001f5c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f64:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001f68:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f6c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f74:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001f78:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001f7c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f84:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001f88:	4bd8      	ldr	r3, [pc, #864]	; (80022ec <MadgwickAHRSupdate+0xfe4>)
 8001f8a:	ed93 7a00 	vldr	s14, [r3]
 8001f8e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f96:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001fa2:	4bd2      	ldr	r3, [pc, #840]	; (80022ec <MadgwickAHRSupdate+0xfe4>)
 8001fa4:	ed93 7a00 	vldr	s14, [r3]
 8001fa8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001fbc:	4bcb      	ldr	r3, [pc, #812]	; (80022ec <MadgwickAHRSupdate+0xfe4>)
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fca:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fd2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001fd6:	4bc5      	ldr	r3, [pc, #788]	; (80022ec <MadgwickAHRSupdate+0xfe4>)
 8001fd8:	ed93 7a00 	vldr	s14, [r3]
 8001fdc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe4:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fec:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001ff0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001ff4:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80022f0 <MadgwickAHRSupdate+0xfe8>
 8001ff8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ffc:	4bbd      	ldr	r3, [pc, #756]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002006:	4bbb      	ldr	r3, [pc, #748]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 8002008:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800200c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002010:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80022f0 <MadgwickAHRSupdate+0xfe8>
 8002014:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002018:	4bb7      	ldr	r3, [pc, #732]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002022:	4bb5      	ldr	r3, [pc, #724]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002024:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002028:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800202c:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80022f0 <MadgwickAHRSupdate+0xfe8>
 8002030:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002034:	4bb1      	ldr	r3, [pc, #708]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002036:	edd3 7a00 	vldr	s15, [r3]
 800203a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203e:	4baf      	ldr	r3, [pc, #700]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002040:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002044:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002048:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80022f0 <MadgwickAHRSupdate+0xfe8>
 800204c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002050:	4bab      	ldr	r3, [pc, #684]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205a:	4ba9      	ldr	r3, [pc, #676]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 800205c:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002060:	4ba4      	ldr	r3, [pc, #656]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 8002062:	ed93 7a00 	vldr	s14, [r3]
 8002066:	4ba3      	ldr	r3, [pc, #652]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002070:	4ba1      	ldr	r3, [pc, #644]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002072:	edd3 6a00 	vldr	s13, [r3]
 8002076:	4ba0      	ldr	r3, [pc, #640]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002084:	4b9d      	ldr	r3, [pc, #628]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002086:	edd3 6a00 	vldr	s13, [r3]
 800208a:	4b9c      	ldr	r3, [pc, #624]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002094:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002098:	4b99      	ldr	r3, [pc, #612]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 800209a:	edd3 6a00 	vldr	s13, [r3]
 800209e:	4b98      	ldr	r3, [pc, #608]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 80020a0:	edd3 7a00 	vldr	s15, [r3]
 80020a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ac:	eeb0 0a67 	vmov.f32	s0, s15
 80020b0:	f000 fd66 	bl	8002b80 <invSqrt>
 80020b4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 80020b8:	4b8e      	ldr	r3, [pc, #568]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 80020ba:	ed93 7a00 	vldr	s14, [r3]
 80020be:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c6:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 80020c8:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80020cc:	4b8a      	ldr	r3, [pc, #552]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 80020ce:	ed93 7a00 	vldr	s14, [r3]
 80020d2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	4b87      	ldr	r3, [pc, #540]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 80020dc:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80020e0:	4b86      	ldr	r3, [pc, #536]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 80020e2:	ed93 7a00 	vldr	s14, [r3]
 80020e6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	4b83      	ldr	r3, [pc, #524]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 80020f0:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80020f4:	4b82      	ldr	r3, [pc, #520]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 80020f6:	ed93 7a00 	vldr	s14, [r3]
 80020fa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002102:	4b7f      	ldr	r3, [pc, #508]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002104:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002108:	4b7a      	ldr	r3, [pc, #488]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002118:	4b78      	ldr	r3, [pc, #480]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 800211a:	edd3 6a00 	vldr	s13, [r3]
 800211e:	4b78      	ldr	r3, [pc, #480]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002128:	ee37 6a27 	vadd.f32	s12, s14, s15
 800212c:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 800212e:	ed93 7a00 	vldr	s14, [r3]
 8002132:	4b71      	ldr	r3, [pc, #452]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002140:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002144:	4b6d      	ldr	r3, [pc, #436]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002146:	edd3 6a00 	vldr	s13, [r3]
 800214a:	4b6c      	ldr	r3, [pc, #432]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002158:	eef0 0a67 	vmov.f32	s1, s15
 800215c:	eeb0 0a46 	vmov.f32	s0, s12
 8002160:	f010 fd4a 	bl	8012bf8 <atan2f>
 8002164:	eef0 7a40 	vmov.f32	s15, s0
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <MadgwickAHRSupdate+0xffc>)
 800216a:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 800216e:	4b62      	ldr	r3, [pc, #392]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 8002170:	ed93 7a00 	vldr	s14, [r3]
 8002174:	4b62      	ldr	r3, [pc, #392]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800217e:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 8002180:	edd3 6a00 	vldr	s13, [r3]
 8002184:	4b5d      	ldr	r3, [pc, #372]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800218e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002192:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219a:	eeb0 0a67 	vmov.f32	s0, s15
 800219e:	f010 fcf9 	bl	8012b94 <asinf>
 80021a2:	eef0 7a40 	vmov.f32	s15, s0
 80021a6:	4b58      	ldr	r3, [pc, #352]	; (8002308 <MadgwickAHRSupdate+0x1000>)
 80021a8:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 80021ac:	4b52      	ldr	r3, [pc, #328]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 80021ae:	ed93 7a00 	vldr	s14, [r3]
 80021b2:	4b52      	ldr	r3, [pc, #328]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021bc:	4b4d      	ldr	r3, [pc, #308]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 80021be:	edd3 6a00 	vldr	s13, [r3]
 80021c2:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021d8:	4b46      	ldr	r3, [pc, #280]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 80021da:	ed93 6a00 	vldr	s12, [r3]
 80021de:	4b45      	ldr	r3, [pc, #276]	; (80022f4 <MadgwickAHRSupdate+0xfec>)
 80021e0:	edd3 6a00 	vldr	s13, [r3]
 80021e4:	ee26 6a26 	vmul.f32	s12, s12, s13
 80021e8:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 80021ea:	edd3 5a00 	vldr	s11, [r3]
 80021ee:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <MadgwickAHRSupdate+0xff0>)
 80021f0:	edd3 6a00 	vldr	s13, [r3]
 80021f4:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021f8:	ee36 6a26 	vadd.f32	s12, s12, s13
 80021fc:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 80021fe:	edd3 5a00 	vldr	s11, [r3]
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <MadgwickAHRSupdate+0xff4>)
 8002204:	edd3 6a00 	vldr	s13, [r3]
 8002208:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800220c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002210:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002212:	edd3 5a00 	vldr	s11, [r3]
 8002216:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <MadgwickAHRSupdate+0xff8>)
 8002218:	edd3 6a00 	vldr	s13, [r3]
 800221c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002220:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002224:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002228:	eeb0 1b46 	vmov.f64	d1, d6
 800222c:	eeb0 0b47 	vmov.f64	d0, d7
 8002230:	f010 fc82 	bl	8012b38 <atan2>
 8002234:	eeb0 7b40 	vmov.f64	d7, d0
 8002238:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800223c:	4b33      	ldr	r3, [pc, #204]	; (800230c <MadgwickAHRSupdate+0x1004>)
 800223e:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <MadgwickAHRSupdate+0xffc>)
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002310 <MadgwickAHRSupdate+0x1008>
 800224c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002250:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <MadgwickAHRSupdate+0xffc>)
 8002252:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002256:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <MadgwickAHRSupdate+0x1000>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002310 <MadgwickAHRSupdate+0x1008>
 8002260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002264:	4b28      	ldr	r3, [pc, #160]	; (8002308 <MadgwickAHRSupdate+0x1000>)
 8002266:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <MadgwickAHRSupdate+0x1004>)
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002310 <MadgwickAHRSupdate+0x1008>
 8002274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <MadgwickAHRSupdate+0x1004>)
 800227a:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <MadgwickAHRSupdate+0xffc>)
 8002280:	ed93 7a00 	vldr	s14, [r3]
 8002284:	4b23      	ldr	r3, [pc, #140]	; (8002314 <MadgwickAHRSupdate+0x100c>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <MadgwickAHRSupdate+0xffc>)
 8002290:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <MadgwickAHRSupdate+0x1000>)
 8002296:	ed93 7a00 	vldr	s14, [r3]
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <MadgwickAHRSupdate+0x1010>)
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <MadgwickAHRSupdate+0x1000>)
 80022a6:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <MadgwickAHRSupdate+0x1004>)
 80022ac:	ed93 7a00 	vldr	s14, [r3]
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MadgwickAHRSupdate+0x1014>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <MadgwickAHRSupdate+0x1004>)
 80022bc:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <MadgwickAHRSupdate+0x1004>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ce:	d509      	bpl.n	80022e4 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <MadgwickAHRSupdate+0x1004>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002320 <MadgwickAHRSupdate+0x1018>
 80022da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <MadgwickAHRSupdate+0x1004>)
 80022e0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80022e4:	37b8      	adds	r7, #184	; 0xb8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	24000010 	.word	0x24000010
 80022f0:	3b03126f 	.word	0x3b03126f
 80022f4:	24000014 	.word	0x24000014
 80022f8:	24000218 	.word	0x24000218
 80022fc:	2400021c 	.word	0x2400021c
 8002300:	24000220 	.word	0x24000220
 8002304:	24000300 	.word	0x24000300
 8002308:	24000304 	.word	0x24000304
 800230c:	240002fc 	.word	0x240002fc
 8002310:	42652ee1 	.word	0x42652ee1
 8002314:	24000224 	.word	0x24000224
 8002318:	24000228 	.word	0x24000228
 800231c:	2400022c 	.word	0x2400022c
 8002320:	43b40000 	.word	0x43b40000

08002324 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b09c      	sub	sp, #112	; 0x70
 8002328:	af00      	add	r7, sp, #0
 800232a:	ed87 0a05 	vstr	s0, [r7, #20]
 800232e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002332:	ed87 1a03 	vstr	s2, [r7, #12]
 8002336:	edc7 1a02 	vstr	s3, [r7, #8]
 800233a:	ed87 2a01 	vstr	s4, [r7, #4]
 800233e:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002342:	4bee      	ldr	r3, [pc, #952]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eeb1 7a67 	vneg.f32	s14, s15
 800234c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002350:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002354:	4bea      	ldr	r3, [pc, #936]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002356:	edd3 6a00 	vldr	s13, [r3]
 800235a:	edd7 7a04 	vldr	s15, [r7, #16]
 800235e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002362:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002366:	4be7      	ldr	r3, [pc, #924]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 8002368:	edd3 6a00 	vldr	s13, [r3]
 800236c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002378:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800237c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002380:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002384:	4be0      	ldr	r3, [pc, #896]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 8002386:	ed93 7a00 	vldr	s14, [r3]
 800238a:	edd7 7a05 	vldr	s15, [r7, #20]
 800238e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002392:	4bdb      	ldr	r3, [pc, #876]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002394:	edd3 6a00 	vldr	s13, [r3]
 8002398:	edd7 7a03 	vldr	s15, [r7, #12]
 800239c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a4:	4bd7      	ldr	r3, [pc, #860]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 80023a6:	edd3 6a00 	vldr	s13, [r3]
 80023aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023be:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80023c2:	4bd1      	ldr	r3, [pc, #836]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 80023c4:	ed93 7a00 	vldr	s14, [r3]
 80023c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d0:	4bca      	ldr	r3, [pc, #808]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 80023d2:	edd3 6a00 	vldr	s13, [r3]
 80023d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80023da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023e2:	4bc8      	ldr	r3, [pc, #800]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 80023e4:	edd3 6a00 	vldr	s13, [r3]
 80023e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023fc:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002400:	4bc1      	ldr	r3, [pc, #772]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 8002402:	ed93 7a00 	vldr	s14, [r3]
 8002406:	edd7 7a03 	vldr	s15, [r7, #12]
 800240a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800240e:	4bbb      	ldr	r3, [pc, #748]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002410:	edd3 6a00 	vldr	s13, [r3]
 8002414:	edd7 7a04 	vldr	s15, [r7, #16]
 8002418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800241c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002420:	4bb7      	ldr	r3, [pc, #732]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002422:	edd3 6a00 	vldr	s13, [r3]
 8002426:	edd7 7a05 	vldr	s15, [r7, #20]
 800242a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002432:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800243a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800243e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002442:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	d10e      	bne.n	800246a <MadgwickAHRSupdateIMU+0x146>
 800244c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	d107      	bne.n	800246a <MadgwickAHRSupdateIMU+0x146>
 800245a:	edd7 7a00 	vldr	s15, [r7]
 800245e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002466:	f000 81e5 	beq.w	8002834 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800246a:	edd7 7a02 	vldr	s15, [r7, #8]
 800246e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002472:	edd7 7a01 	vldr	s15, [r7, #4]
 8002476:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800247a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247e:	edd7 7a00 	vldr	s15, [r7]
 8002482:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248a:	eeb0 0a67 	vmov.f32	s0, s15
 800248e:	f000 fb77 	bl	8002b80 <invSqrt>
 8002492:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8002496:	ed97 7a02 	vldr	s14, [r7, #8]
 800249a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800249e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a2:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80024a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80024aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 80024b6:	ed97 7a00 	vldr	s14, [r7]
 80024ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80024be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c2:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80024c6:	4b90      	ldr	r3, [pc, #576]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024d0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 80024d4:	4b89      	ldr	r3, [pc, #548]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024de:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 80024e2:	4b87      	ldr	r3, [pc, #540]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ec:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 80024f0:	4b84      	ldr	r3, [pc, #528]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024fa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 80024fe:	4b82      	ldr	r3, [pc, #520]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 8002510:	4b7a      	ldr	r3, [pc, #488]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800251a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 8002522:	4b77      	ldr	r3, [pc, #476]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800252c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002530:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8002534:	4b71      	ldr	r3, [pc, #452]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800253e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002542:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8002546:	4b6e      	ldr	r3, [pc, #440]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002548:	edd3 7a00 	vldr	s15, [r3]
 800254c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002554:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8002558:	4b6b      	ldr	r3, [pc, #428]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 800255a:	ed93 7a00 	vldr	s14, [r3]
 800255e:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <MadgwickAHRSupdateIMU+0x3e4>)
 8002560:	edd3 7a00 	vldr	s15, [r3]
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 800256c:	4b63      	ldr	r3, [pc, #396]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 800256e:	ed93 7a00 	vldr	s14, [r3]
 8002572:	4b62      	ldr	r3, [pc, #392]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 8002580:	4b5f      	ldr	r3, [pc, #380]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002582:	ed93 7a00 	vldr	s14, [r3]
 8002586:	4b5e      	ldr	r3, [pc, #376]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002590:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8002594:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 8002596:	ed93 7a00 	vldr	s14, [r3]
 800259a:	4b5a      	ldr	r3, [pc, #360]	; (8002704 <MadgwickAHRSupdateIMU+0x3e0>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80025a8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80025ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80025b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025b4:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80025b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80025bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c4:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80025c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d4:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80025d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80025e8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80025ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80025f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80025fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002600:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002604:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002608:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800260c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002610:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <MadgwickAHRSupdateIMU+0x3d8>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800261e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002622:	edd7 7a01 	vldr	s15, [r7, #4]
 8002626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800262e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002632:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002636:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800263a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800263e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002642:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002646:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800264a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800264e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002652:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002656:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800265a:	edd7 7a00 	vldr	s15, [r7]
 800265e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002666:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800266a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800266e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002672:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002676:	4b22      	ldr	r3, [pc, #136]	; (8002700 <MadgwickAHRSupdateIMU+0x3dc>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002680:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002684:	edd7 7a02 	vldr	s15, [r7, #8]
 8002688:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800268c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002690:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002694:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002698:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80026a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026b0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80026b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026b8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80026bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80026cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026d8:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80026dc:	edd7 7a00 	vldr	s15, [r7]
 80026e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e8:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80026ec:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026f0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80026f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026f8:	e008      	b.n	800270c <MadgwickAHRSupdateIMU+0x3e8>
 80026fa:	bf00      	nop
 80026fc:	24000218 	.word	0x24000218
 8002700:	2400021c 	.word	0x2400021c
 8002704:	24000220 	.word	0x24000220
 8002708:	24000014 	.word	0x24000014
 800270c:	4be0      	ldr	r3, [pc, #896]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002716:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800271a:	edd7 7a02 	vldr	s15, [r7, #8]
 800271e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002726:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800272a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800272e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002732:	4bd7      	ldr	r3, [pc, #860]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800273c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002740:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002744:	edd7 7a01 	vldr	s15, [r7, #4]
 8002748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800274c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002750:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002754:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002758:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800275c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002760:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002768:	edd7 7a07 	vldr	s15, [r7, #28]
 800276c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002774:	edd7 7a06 	vldr	s15, [r7, #24]
 8002778:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800277c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002780:	eeb0 0a67 	vmov.f32	s0, s15
 8002784:	f000 f9fc 	bl	8002b80 <invSqrt>
 8002788:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 800278c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002790:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002798:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 800279c:	ed97 7a08 	vldr	s14, [r7, #32]
 80027a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a8:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80027ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80027b0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b8:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 80027bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80027c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c8:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 80027cc:	4bb1      	ldr	r3, [pc, #708]	; (8002a94 <MadgwickAHRSupdateIMU+0x770>)
 80027ce:	ed93 7a00 	vldr	s14, [r3]
 80027d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027da:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80027de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 80027e6:	4bab      	ldr	r3, [pc, #684]	; (8002a94 <MadgwickAHRSupdateIMU+0x770>)
 80027e8:	ed93 7a00 	vldr	s14, [r3]
 80027ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80027f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027f4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80027f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002800:	4ba4      	ldr	r3, [pc, #656]	; (8002a94 <MadgwickAHRSupdateIMU+0x770>)
 8002802:	ed93 7a00 	vldr	s14, [r3]
 8002806:	edd7 7a07 	vldr	s15, [r7, #28]
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002816:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 800281a:	4b9e      	ldr	r3, [pc, #632]	; (8002a94 <MadgwickAHRSupdateIMU+0x770>)
 800281c:	ed93 7a00 	vldr	s14, [r3]
 8002820:	edd7 7a06 	vldr	s15, [r7, #24]
 8002824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002828:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800282c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002830:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002834:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002838:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002a98 <MadgwickAHRSupdateIMU+0x774>
 800283c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002840:	4b96      	ldr	r3, [pc, #600]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 8002842:	edd3 7a00 	vldr	s15, [r3]
 8002846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284a:	4b94      	ldr	r3, [pc, #592]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 800284c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002850:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002854:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a98 <MadgwickAHRSupdateIMU+0x774>
 8002858:	ee27 7a87 	vmul.f32	s14, s15, s14
 800285c:	4b90      	ldr	r3, [pc, #576]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002866:	4b8e      	ldr	r3, [pc, #568]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002868:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 800286c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002870:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002a98 <MadgwickAHRSupdateIMU+0x774>
 8002874:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002878:	4b8a      	ldr	r3, [pc, #552]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002882:	4b88      	ldr	r3, [pc, #544]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002884:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002888:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800288c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002a98 <MadgwickAHRSupdateIMU+0x774>
 8002890:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002894:	4b7e      	ldr	r3, [pc, #504]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289e:	4b7c      	ldr	r3, [pc, #496]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 80028a0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80028a4:	4b7d      	ldr	r3, [pc, #500]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 80028a6:	ed93 7a00 	vldr	s14, [r3]
 80028aa:	4b7c      	ldr	r3, [pc, #496]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b4:	4b7a      	ldr	r3, [pc, #488]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 80028b6:	edd3 6a00 	vldr	s13, [r3]
 80028ba:	4b79      	ldr	r3, [pc, #484]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028c8:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 80028ca:	edd3 6a00 	vldr	s13, [r3]
 80028ce:	4b75      	ldr	r3, [pc, #468]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 80028d0:	edd3 7a00 	vldr	s15, [r3]
 80028d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028dc:	4b6c      	ldr	r3, [pc, #432]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 80028de:	edd3 6a00 	vldr	s13, [r3]
 80028e2:	4b6b      	ldr	r3, [pc, #428]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	eeb0 0a67 	vmov.f32	s0, s15
 80028f4:	f000 f944 	bl	8002b80 <invSqrt>
 80028f8:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 80028fc:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 80028fe:	ed93 7a00 	vldr	s14, [r3]
 8002902:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290a:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 800290c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002910:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002912:	ed93 7a00 	vldr	s14, [r3]
 8002916:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800291a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291e:	4b60      	ldr	r3, [pc, #384]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002920:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002924:	4b5f      	ldr	r3, [pc, #380]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800292e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002932:	4b5c      	ldr	r3, [pc, #368]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002934:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002938:	4b55      	ldr	r3, [pc, #340]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 800293a:	ed93 7a00 	vldr	s14, [r3]
 800293e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002946:	4b52      	ldr	r3, [pc, #328]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002948:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 800294c:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 800294e:	ed93 7a00 	vldr	s14, [r3]
 8002952:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ee27 7a27 	vmul.f32	s14, s14, s15
 800295c:	4b51      	ldr	r3, [pc, #324]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 800295e:	edd3 6a00 	vldr	s13, [r3]
 8002962:	4b4b      	ldr	r3, [pc, #300]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800296c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002970:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002980:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002984:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002988:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 800298a:	edd3 6a00 	vldr	s13, [r3]
 800298e:	4b45      	ldr	r3, [pc, #276]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002990:	edd3 7a00 	vldr	s15, [r3]
 8002994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299c:	eef0 0a67 	vmov.f32	s1, s15
 80029a0:	eeb0 0a46 	vmov.f32	s0, s12
 80029a4:	f010 f928 	bl	8012bf8 <atan2f>
 80029a8:	eef0 7a40 	vmov.f32	s15, s0
 80029ac:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <MadgwickAHRSupdateIMU+0x784>)
 80029ae:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 80029b4:	ed93 7a00 	vldr	s14, [r3]
 80029b8:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 80029c4:	edd3 6a00 	vldr	s13, [r3]
 80029c8:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d6:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80029da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029de:	eeb0 0a67 	vmov.f32	s0, s15
 80029e2:	f010 f8d7 	bl	8012b94 <asinf>
 80029e6:	eef0 7a40 	vmov.f32	s15, s0
 80029ea:	4b30      	ldr	r3, [pc, #192]	; (8002aac <MadgwickAHRSupdateIMU+0x788>)
 80029ec:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 80029f2:	ed93 7a00 	vldr	s14, [r3]
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a00:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 8002a02:	edd3 6a00 	vldr	s13, [r3]
 8002a06:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 8002a1e:	ed93 6a00 	vldr	s12, [r3]
 8002a22:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <MadgwickAHRSupdateIMU+0x778>)
 8002a24:	edd3 6a00 	vldr	s13, [r3]
 8002a28:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002a2e:	edd3 5a00 	vldr	s11, [r3]
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <MadgwickAHRSupdateIMU+0x77c>)
 8002a34:	edd3 6a00 	vldr	s13, [r3]
 8002a38:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a3c:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002a40:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002a42:	edd3 5a00 	vldr	s11, [r3]
 8002a46:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <MadgwickAHRSupdateIMU+0x780>)
 8002a48:	edd3 6a00 	vldr	s13, [r3]
 8002a4c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a50:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002a56:	edd3 5a00 	vldr	s11, [r3]
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <MadgwickAHRSupdateIMU+0x76c>)
 8002a5c:	edd3 6a00 	vldr	s13, [r3]
 8002a60:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a64:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002a68:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002a6c:	eeb0 1b46 	vmov.f64	d1, d6
 8002a70:	eeb0 0b47 	vmov.f64	d0, d7
 8002a74:	f010 f860 	bl	8012b38 <atan2>
 8002a78:	eeb0 7b40 	vmov.f64	d7, d0
 8002a7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <MadgwickAHRSupdateIMU+0x78c>)
 8002a82:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <MadgwickAHRSupdateIMU+0x784>)
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	e014      	b.n	8002ab8 <MadgwickAHRSupdateIMU+0x794>
 8002a8e:	bf00      	nop
 8002a90:	24000220 	.word	0x24000220
 8002a94:	24000010 	.word	0x24000010
 8002a98:	3b03126f 	.word	0x3b03126f
 8002a9c:	24000014 	.word	0x24000014
 8002aa0:	24000218 	.word	0x24000218
 8002aa4:	2400021c 	.word	0x2400021c
 8002aa8:	24000300 	.word	0x24000300
 8002aac:	24000304 	.word	0x24000304
 8002ab0:	240002fc 	.word	0x240002fc
 8002ab4:	42652ee1 	.word	0x42652ee1
 8002ab8:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002ab4 <MadgwickAHRSupdateIMU+0x790>
 8002abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac0:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <MadgwickAHRSupdateIMU+0x83c>)
 8002ac2:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002ac6:	4b27      	ldr	r3, [pc, #156]	; (8002b64 <MadgwickAHRSupdateIMU+0x840>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b68 <MadgwickAHRSupdateIMU+0x844>
 8002ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <MadgwickAHRSupdateIMU+0x840>)
 8002ad6:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002b68 <MadgwickAHRSupdateIMU+0x844>
 8002ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae8:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002aea:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <MadgwickAHRSupdateIMU+0x83c>)
 8002af0:	ed93 7a00 	vldr	s14, [r3]
 8002af4:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <MadgwickAHRSupdateIMU+0x84c>)
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <MadgwickAHRSupdateIMU+0x83c>)
 8002b00:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <MadgwickAHRSupdateIMU+0x840>)
 8002b06:	ed93 7a00 	vldr	s14, [r3]
 8002b0a:	4b1a      	ldr	r3, [pc, #104]	; (8002b74 <MadgwickAHRSupdateIMU+0x850>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <MadgwickAHRSupdateIMU+0x840>)
 8002b16:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002b1c:	ed93 7a00 	vldr	s14, [r3]
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <MadgwickAHRSupdateIMU+0x854>)
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002b2c:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	d400      	bmi.n	8002b42 <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002b40:	e009      	b.n	8002b56 <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b7c <MadgwickAHRSupdateIMU+0x858>
 8002b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <MadgwickAHRSupdateIMU+0x848>)
 8002b52:	edc3 7a00 	vstr	s15, [r3]
}
 8002b56:	bf00      	nop
 8002b58:	3770      	adds	r7, #112	; 0x70
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	24000300 	.word	0x24000300
 8002b64:	24000304 	.word	0x24000304
 8002b68:	42652ee1 	.word	0x42652ee1
 8002b6c:	240002fc 	.word	0x240002fc
 8002b70:	24000224 	.word	0x24000224
 8002b74:	24000228 	.word	0x24000228
 8002b78:	2400022c 	.word	0x2400022c
 8002b7c:	43b40000 	.word	0x43b40000

08002b80 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b8e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b96:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b9e:	f107 0310 	add.w	r3, r7, #16
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	105a      	asrs	r2, r3, #1
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <invSqrt+0x74>)
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002bb0:	f107 030c 	add.w	r3, r7, #12
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002bb8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bcc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002bd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bdc:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	ee07 3a90 	vmov	s15, r3
}
 8002be6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	5f3759df 	.word	0x5f3759df

08002bf8 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	4803      	ldr	r0, [pc, #12]	; (8002c1c <_write+0x24>)
 8002c0e:	f00b faaf 	bl	800e170 <HAL_UART_Transmit_DMA>
}
 8002c12:	bf00      	nop
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	240003cc 	.word	0x240003cc

08002c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c24:	b088      	sub	sp, #32
 8002c26:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c28:	f001 fe86 	bl	8004938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c2c:	f000 f9c2 	bl	8002fb4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c30:	f000 fa3e 	bl	80030b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c34:	f000 fbe4 	bl	8003400 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c38:	f000 fbba 	bl	80033b0 <MX_DMA_Init>
  MX_TIM7_Init();
 8002c3c:	f000 faea 	bl	8003214 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002c40:	f000 fb1e 	bl	8003280 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002c44:	f000 fa50 	bl	80030e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002c48:	f000 fa8e 	bl	8003168 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002c4c:	f000 fb64 	bl	8003318 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8002c50:	48bb      	ldr	r0, [pc, #748]	; (8002f40 <main+0x320>)
 8002c52:	f00a feff 	bl	800da54 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8002c56:	2201      	movs	r2, #1
 8002c58:	49ba      	ldr	r1, [pc, #744]	; (8002f44 <main+0x324>)
 8002c5a:	48bb      	ldr	r0, [pc, #748]	; (8002f48 <main+0x328>)
 8002c5c:	f00b fa42 	bl	800e0e4 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 8002c60:	2201      	movs	r2, #1
 8002c62:	49ba      	ldr	r1, [pc, #744]	; (8002f4c <main+0x32c>)
 8002c64:	48ba      	ldr	r0, [pc, #744]	; (8002f50 <main+0x330>)
 8002c66:	f00b fa3d 	bl	800e0e4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	//Receiver Check
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002c6a:	e002      	b.n	8002c72 <main+0x52>
	  {
		  HAL_Delay(200);
 8002c6c:	20c8      	movs	r0, #200	; 0xc8
 8002c6e:	f001 fef5 	bl	8004a5c <HAL_Delay>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002c72:	4bb8      	ldr	r3, [pc, #736]	; (8002f54 <main+0x334>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 f8d0 	bl	8003e1c <Is_iBus_Received>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f4      	beq.n	8002c6c <main+0x4c>
	  }

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c82:	e009      	b.n	8002c98 <main+0x78>
	{
		if(tim1_20ms_flag == 1)
 8002c84:	4bb4      	ldr	r3, [pc, #720]	; (8002f58 <main+0x338>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <main+0x78>
		{
			tim1_20ms_flag = 0;
 8002c8c:	4bb2      	ldr	r3, [pc, #712]	; (8002f58 <main+0x338>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8002c92:	48b2      	ldr	r0, [pc, #712]	; (8002f5c <main+0x33c>)
 8002c94:	f00d ff4c 	bl	8010b30 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c98:	2303      	movs	r3, #3
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	2103      	movs	r1, #3
 8002ca2:	48af      	ldr	r0, [pc, #700]	; (8002f60 <main+0x340>)
 8002ca4:	f7fd fddc 	bl	8000860 <MPU9250_Init>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0ea      	beq.n	8002c84 <main+0x64>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8002cae:	48ac      	ldr	r0, [pc, #688]	; (8002f60 <main+0x340>)
 8002cb0:	f7fd febe 	bl	8000a30 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002cb4:	e009      	b.n	8002cca <main+0xaa>
	{
		if(tim1_20ms_flag == 1)
 8002cb6:	4ba8      	ldr	r3, [pc, #672]	; (8002f58 <main+0x338>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d105      	bne.n	8002cca <main+0xaa>
		{
			tim1_20ms_flag = 0;
 8002cbe:	4ba6      	ldr	r3, [pc, #664]	; (8002f58 <main+0x338>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 8002cc4:	48a7      	ldr	r0, [pc, #668]	; (8002f64 <main+0x344>)
 8002cc6:	f00d ff33 	bl	8010b30 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002cca:	49a7      	ldr	r1, [pc, #668]	; (8002f68 <main+0x348>)
 8002ccc:	48a4      	ldr	r0, [pc, #656]	; (8002f60 <main+0x340>)
 8002cce:	f7fd ff2f 	bl	8000b30 <MPU9250_AK8963_Setup>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ee      	beq.n	8002cb6 <main+0x96>
		}
	}
	MPU9250_Master(&hi2c1);
 8002cd8:	48a1      	ldr	r0, [pc, #644]	; (8002f60 <main+0x340>)
 8002cda:	f7fd fed7 	bl	8000a8c <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8002cde:	48a0      	ldr	r0, [pc, #640]	; (8002f60 <main+0x340>)
 8002ce0:	f7fd ff90 	bl	8000c04 <MPU9250_Slave0_Enable>


	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8002ce4:	f001 faf8 	bl	80042d8 <W25qxx_Init>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 8002ce8:	230c      	movs	r3, #12
 8002cea:	2200      	movs	r2, #0
 8002cec:	2100      	movs	r1, #0
 8002cee:	489f      	ldr	r0, [pc, #636]	; (8002f6c <main+0x34c>)
 8002cf0:	f001 fd96 	bl	8004820 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 8002cf4:	4b9d      	ldr	r3, [pc, #628]	; (8002f6c <main+0x34c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a9b      	ldr	r2, [pc, #620]	; (8002f68 <main+0x348>)
 8002cfa:	65d3      	str	r3, [r2, #92]	; 0x5c
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 8002cfc:	4b9c      	ldr	r3, [pc, #624]	; (8002f70 <main+0x350>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a99      	ldr	r2, [pc, #612]	; (8002f68 <main+0x348>)
 8002d02:	6613      	str	r3, [r2, #96]	; 0x60
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 8002d04:	4b9b      	ldr	r3, [pc, #620]	; (8002f74 <main+0x354>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a97      	ldr	r2, [pc, #604]	; (8002f68 <main+0x348>)
 8002d0a:	6653      	str	r3, [r2, #100]	; 0x64

	while (1)
	{
		Receive_Command();
 8002d0c:	f001 f82e 	bl	8003d6c <Receive_Command>
		Compass_Calibration(mag_calibration_enable);
 8002d10:	4b99      	ldr	r3, [pc, #612]	; (8002f78 <main+0x358>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fbdb 	bl	80034d0 <Compass_Calibration>

		if(ibus_rx_cplt_flag==1)
 8002d1a:	4b8e      	ldr	r3, [pc, #568]	; (8002f54 <main+0x334>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10f      	bne.n	8002d42 <main+0x122>
		{
			ibus_rx_cplt_flag=0;
 8002d22:	4b8c      	ldr	r3, [pc, #560]	; (8002f54 <main+0x334>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8002d28:	2120      	movs	r1, #32
 8002d2a:	4894      	ldr	r0, [pc, #592]	; (8002f7c <main+0x35c>)
 8002d2c:	f7fd fcac 	bl	8000688 <iBus_Check_CHKSUM>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <main+0x122>
			{
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8002d36:	4992      	ldr	r1, [pc, #584]	; (8002f80 <main+0x360>)
 8002d38:	4890      	ldr	r0, [pc, #576]	; (8002f7c <main+0x35c>)
 8002d3a:	f7fd fcdc 	bl	80006f6 <iBus_Parsing>
				return 1;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e134      	b.n	8002fac <main+0x38c>
			}
		}

		//Read MPU9250 + Motor Control
		if(tim1_2ms_flag == 1)
 8002d42:	4b90      	ldr	r3, [pc, #576]	; (8002f84 <main+0x364>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d133      	bne.n	8002db2 <main+0x192>
		{
			tim1_2ms_flag = 0;
 8002d4a:	4b8e      	ldr	r3, [pc, #568]	; (8002f84 <main+0x364>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8002d50:	4883      	ldr	r0, [pc, #524]	; (8002f60 <main+0x340>)
 8002d52:	f7fd ff97 	bl	8000c84 <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8002d56:	4884      	ldr	r0, [pc, #528]	; (8002f68 <main+0x348>)
 8002d58:	f7fd ffaa 	bl	8000cb0 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8002d5c:	4b82      	ldr	r3, [pc, #520]	; (8002f68 <main+0x348>)
 8002d5e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d62:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <main+0x348>)
 8002d64:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d68:	4b7f      	ldr	r3, [pc, #508]	; (8002f68 <main+0x348>)
 8002d6a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002d6e:	4b7e      	ldr	r3, [pc, #504]	; (8002f68 <main+0x348>)
 8002d70:	ed93 6a02 	vldr	s12, [r3, #8]
 8002d74:	4b7c      	ldr	r3, [pc, #496]	; (8002f68 <main+0x348>)
 8002d76:	edd3 5a03 	vldr	s11, [r3, #12]
 8002d7a:	4b7b      	ldr	r3, [pc, #492]	; (8002f68 <main+0x348>)
 8002d7c:	ed93 5a04 	vldr	s10, [r3, #16]
 8002d80:	4b79      	ldr	r3, [pc, #484]	; (8002f68 <main+0x348>)
 8002d82:	edd3 4a1a 	vldr	s9, [r3, #104]	; 0x68
 8002d86:	4b78      	ldr	r3, [pc, #480]	; (8002f68 <main+0x348>)
 8002d88:	edd3 3a1b 	vldr	s7, [r3, #108]	; 0x6c
 8002d8c:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <main+0x348>)
 8002d8e:	ed93 4a1c 	vldr	s8, [r3, #112]	; 0x70
 8002d92:	eeb0 3a64 	vmov.f32	s6, s9
 8002d96:	eef0 2a45 	vmov.f32	s5, s10
 8002d9a:	eeb0 2a65 	vmov.f32	s4, s11
 8002d9e:	eef0 1a46 	vmov.f32	s3, s12
 8002da2:	eeb0 1a66 	vmov.f32	s2, s13
 8002da6:	eef0 0a47 	vmov.f32	s1, s14
 8002daa:	eeb0 0a67 	vmov.f32	s0, s15
 8002dae:	f7fe faab 	bl	8001308 <MadgwickAHRSupdate>
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 8002db2:	4b69      	ldr	r3, [pc, #420]	; (8002f58 <main+0x338>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	f040 80f4 	bne.w	8002fa4 <main+0x384>
		{
			tim1_20ms_flag = 0;
 8002dbc:	4b66      	ldr	r3, [pc, #408]	; (8002f58 <main+0x338>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	701a      	strb	r2, [r3, #0]

			switch(print_mode)
 8002dc2:	4b71      	ldr	r3, [pc, #452]	; (8002f88 <main+0x368>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	2b06      	cmp	r3, #6
 8002dca:	f200 80ed 	bhi.w	8002fa8 <main+0x388>
 8002dce:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <main+0x1b4>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002df1 	.word	0x08002df1
 8002dd8:	08002fa9 	.word	0x08002fa9
 8002ddc:	08002e23 	.word	0x08002e23
 8002de0:	08002e55 	.word	0x08002e55
 8002de4:	08002e87 	.word	0x08002e87
 8002de8:	08002eb9 	.word	0x08002eb9
 8002dec:	08002eeb 	.word	0x08002eeb
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 8002df0:	4b66      	ldr	r3, [pc, #408]	; (8002f8c <main+0x36c>)
 8002df2:	edd3 7a00 	vldr	s15, [r3]
 8002df6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002dfa:	4b65      	ldr	r3, [pc, #404]	; (8002f90 <main+0x370>)
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e04:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <main+0x374>)
 8002e06:	edd3 6a00 	vldr	s13, [r3]
 8002e0a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e0e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e12:	ed8d 7b00 	vstr	d7, [sp]
 8002e16:	ec53 2b15 	vmov	r2, r3, d5
 8002e1a:	485f      	ldr	r0, [pc, #380]	; (8002f98 <main+0x378>)
 8002e1c:	f00d fe02 	bl	8010a24 <iprintf>
 8002e20:	e0c3      	b.n	8002faa <main+0x38a>
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 8002e22:	4b51      	ldr	r3, [pc, #324]	; (8002f68 <main+0x348>)
 8002e24:	edd3 7a08 	vldr	s15, [r3, #32]
 8002e28:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e2c:	4b4e      	ldr	r3, [pc, #312]	; (8002f68 <main+0x348>)
 8002e2e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002e32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e36:	4b4c      	ldr	r3, [pc, #304]	; (8002f68 <main+0x348>)
 8002e38:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002e3c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e40:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e44:	ed8d 7b00 	vstr	d7, [sp]
 8002e48:	ec53 2b15 	vmov	r2, r3, d5
 8002e4c:	4852      	ldr	r0, [pc, #328]	; (8002f98 <main+0x378>)
 8002e4e:	f00d fde9 	bl	8010a24 <iprintf>
 8002e52:	e0aa      	b.n	8002faa <main+0x38a>
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 8002e54:	4b44      	ldr	r3, [pc, #272]	; (8002f68 <main+0x348>)
 8002e56:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e5a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e5e:	4b42      	ldr	r3, [pc, #264]	; (8002f68 <main+0x348>)
 8002e60:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e68:	4b3f      	ldr	r3, [pc, #252]	; (8002f68 <main+0x348>)
 8002e6a:	edd3 6a04 	vldr	s13, [r3, #16]
 8002e6e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002e72:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002e76:	ed8d 7b00 	vstr	d7, [sp]
 8002e7a:	ec53 2b15 	vmov	r2, r3, d5
 8002e7e:	4846      	ldr	r0, [pc, #280]	; (8002f98 <main+0x378>)
 8002e80:	f00d fdd0 	bl	8010a24 <iprintf>
 8002e84:	e091      	b.n	8002faa <main+0x38a>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 8002e86:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <main+0x348>)
 8002e88:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002e8c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002e90:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <main+0x348>)
 8002e92:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002e96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e9a:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <main+0x348>)
 8002e9c:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002ea0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002ea4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002ea8:	ed8d 7b00 	vstr	d7, [sp]
 8002eac:	ec53 2b15 	vmov	r2, r3, d5
 8002eb0:	4839      	ldr	r0, [pc, #228]	; (8002f98 <main+0x378>)
 8002eb2:	f00d fdb7 	bl	8010a24 <iprintf>
 8002eb6:	e078      	b.n	8002faa <main+0x38a>
			case 6: printf("%f \t %f \t %f \t \n", MPU9250.Mx_Offset, MPU9250.My_Offset, MPU9250.Mz_Offset); break; //Mag_Offset
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <main+0x348>)
 8002eba:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002ebe:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <main+0x348>)
 8002ec4:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002ec8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ecc:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <main+0x348>)
 8002ece:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8002ed2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002ed6:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002eda:	ed8d 7b00 	vstr	d7, [sp]
 8002ede:	ec53 2b15 	vmov	r2, r3, d5
 8002ee2:	482e      	ldr	r0, [pc, #184]	; (8002f9c <main+0x37c>)
 8002ee4:	f00d fd9e 	bl	8010a24 <iprintf>
 8002ee8:	e05f      	b.n	8002faa <main+0x38a>
			case 7: printf("%d %d %d %d %d %d %d %d %d %d \n", iBus.LH, iBus.LV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.VrA, iBus.VrB, iBus.SwC, iBus.SwD); break; //Mag_Offset
 8002eea:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <main+0x360>)
 8002eec:	88db      	ldrh	r3, [r3, #6]
 8002eee:	469c      	mov	ip, r3
 8002ef0:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <main+0x360>)
 8002ef2:	889b      	ldrh	r3, [r3, #4]
 8002ef4:	469e      	mov	lr, r3
 8002ef6:	4b22      	ldr	r3, [pc, #136]	; (8002f80 <main+0x360>)
 8002ef8:	889b      	ldrh	r3, [r3, #4]
 8002efa:	4698      	mov	r8, r3
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <main+0x360>)
 8002efe:	88db      	ldrh	r3, [r3, #6]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <main+0x360>)
 8002f04:	891b      	ldrh	r3, [r3, #8]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <main+0x360>)
 8002f0a:	895b      	ldrh	r3, [r3, #10]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <main+0x360>)
 8002f10:	8a1b      	ldrh	r3, [r3, #16]
 8002f12:	461c      	mov	r4, r3
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <main+0x360>)
 8002f16:	8a5b      	ldrh	r3, [r3, #18]
 8002f18:	461d      	mov	r5, r3
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <main+0x360>)
 8002f1c:	899b      	ldrh	r3, [r3, #12]
 8002f1e:	461e      	mov	r6, r3
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <main+0x360>)
 8002f22:	89db      	ldrh	r3, [r3, #14]
 8002f24:	9306      	str	r3, [sp, #24]
 8002f26:	9605      	str	r6, [sp, #20]
 8002f28:	9504      	str	r5, [sp, #16]
 8002f2a:	9403      	str	r4, [sp, #12]
 8002f2c:	9002      	str	r0, [sp, #8]
 8002f2e:	9101      	str	r1, [sp, #4]
 8002f30:	9200      	str	r2, [sp, #0]
 8002f32:	4643      	mov	r3, r8
 8002f34:	4672      	mov	r2, lr
 8002f36:	4661      	mov	r1, ip
 8002f38:	4819      	ldr	r0, [pc, #100]	; (8002fa0 <main+0x380>)
 8002f3a:	f00d fd73 	bl	8010a24 <iprintf>
 8002f3e:	e034      	b.n	8002faa <main+0x38a>
 8002f40:	240005f8 	.word	0x240005f8
 8002f44:	24000235 	.word	0x24000235
 8002f48:	240003cc 	.word	0x240003cc
 8002f4c:	24000237 	.word	0x24000237
 8002f50:	2400055c 	.word	0x2400055c
 8002f54:	24000238 	.word	0x24000238
 8002f58:	24000233 	.word	0x24000233
 8002f5c:	080134a0 	.word	0x080134a0
 8002f60:	24000308 	.word	0x24000308
 8002f64:	080134b4 	.word	0x080134b4
 8002f68:	24000270 	.word	0x24000270
 8002f6c:	240005ec 	.word	0x240005ec
 8002f70:	240005f0 	.word	0x240005f0
 8002f74:	240005f4 	.word	0x240005f4
 8002f78:	24000231 	.word	0x24000231
 8002f7c:	24000648 	.word	0x24000648
 8002f80:	24000254 	.word	0x24000254
 8002f84:	24000232 	.word	0x24000232
 8002f88:	24000230 	.word	0x24000230
 8002f8c:	24000300 	.word	0x24000300
 8002f90:	24000304 	.word	0x24000304
 8002f94:	240002fc 	.word	0x240002fc
 8002f98:	080134c8 	.word	0x080134c8
 8002f9c:	080134e0 	.word	0x080134e0
 8002fa0:	080134f4 	.word	0x080134f4
			default: break;
			}
		}
 8002fa4:	bf00      	nop
 8002fa6:	e6b1      	b.n	8002d0c <main+0xec>
			default: break;
 8002fa8:	bf00      	nop
	{
 8002faa:	e6af      	b.n	8002d0c <main+0xec>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b09c      	sub	sp, #112	; 0x70
 8002fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fbe:	224c      	movs	r2, #76	; 0x4c
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f00d f8e2 	bl	801018c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	2220      	movs	r2, #32
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f00d f8dc 	bl	801018c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f007 f8f3 	bl	800a1c0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <SystemClock_Config+0xf4>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	4a31      	ldr	r2, [pc, #196]	; (80030a8 <SystemClock_Config+0xf4>)
 8002fe4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe8:	6193      	str	r3, [r2, #24]
 8002fea:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <SystemClock_Config+0xf4>)
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <SystemClock_Config+0xf8>)
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	4a2c      	ldr	r2, [pc, #176]	; (80030ac <SystemClock_Config+0xf8>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <SystemClock_Config+0xf8>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	603b      	str	r3, [r7, #0]
 800300a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800300c:	bf00      	nop
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <SystemClock_Config+0xf4>)
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301a:	d1f8      	bne.n	800300e <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800301c:	2303      	movs	r3, #3
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003026:	2301      	movs	r3, #1
 8003028:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800302a:	2340      	movs	r3, #64	; 0x40
 800302c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800302e:	2302      	movs	r3, #2
 8003030:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003032:	2302      	movs	r3, #2
 8003034:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8003036:	2305      	movs	r3, #5
 8003038:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800303a:	23c0      	movs	r3, #192	; 0xc0
 800303c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800303e:	2302      	movs	r3, #2
 8003040:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003042:	2302      	movs	r3, #2
 8003044:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003046:	2302      	movs	r3, #2
 8003048:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800304a:	2308      	movs	r3, #8
 800304c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800304e:	2300      	movs	r3, #0
 8003050:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800305a:	4618      	mov	r0, r3
 800305c:	f007 f8ea 	bl	800a234 <HAL_RCC_OscConfig>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003066:	f000 fb21 	bl	80036ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800306a:	233f      	movs	r3, #63	; 0x3f
 800306c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800306e:	2303      	movs	r3, #3
 8003070:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003076:	2308      	movs	r3, #8
 8003078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800307a:	2340      	movs	r3, #64	; 0x40
 800307c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800307e:	2340      	movs	r3, #64	; 0x40
 8003080:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003086:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003088:	2340      	movs	r3, #64	; 0x40
 800308a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	2104      	movs	r1, #4
 8003090:	4618      	mov	r0, r3
 8003092:	f007 fcdf 	bl	800aa54 <HAL_RCC_ClockConfig>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 800309c:	f000 fb06 	bl	80036ac <Error_Handler>
  }
}
 80030a0:	bf00      	nop
 80030a2:	3770      	adds	r7, #112	; 0x70
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	58024800 	.word	0x58024800
 80030ac:	58000400 	.word	0x58000400

080030b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b0b0      	sub	sp, #192	; 0xc0
 80030b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	22bc      	movs	r2, #188	; 0xbc
 80030ba:	2100      	movs	r1, #0
 80030bc:	4618      	mov	r0, r3
 80030be:	f00d f865 	bl	801018c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80030c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030c6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80030c8:	2300      	movs	r3, #0
 80030ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030cc:	1d3b      	adds	r3, r7, #4
 80030ce:	4618      	mov	r0, r3
 80030d0:	f008 f84c 	bl	800b16c <HAL_RCCEx_PeriphCLKConfig>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 80030da:	f000 fae7 	bl	80036ac <Error_Handler>
  }
}
 80030de:	bf00      	nop
 80030e0:	37c0      	adds	r7, #192	; 0xc0
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <MX_I2C1_Init+0x74>)
 80030ee:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <MX_I2C1_Init+0x78>)
 80030f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <MX_I2C1_Init+0x74>)
 80030f4:	4a1b      	ldr	r2, [pc, #108]	; (8003164 <MX_I2C1_Init+0x7c>)
 80030f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80030f8:	4b18      	ldr	r3, [pc, #96]	; (800315c <MX_I2C1_Init+0x74>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <MX_I2C1_Init+0x74>)
 8003100:	2201      	movs	r2, #1
 8003102:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003104:	4b15      	ldr	r3, [pc, #84]	; (800315c <MX_I2C1_Init+0x74>)
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <MX_I2C1_Init+0x74>)
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003110:	4b12      	ldr	r3, [pc, #72]	; (800315c <MX_I2C1_Init+0x74>)
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <MX_I2C1_Init+0x74>)
 8003118:	2200      	movs	r2, #0
 800311a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <MX_I2C1_Init+0x74>)
 800311e:	2200      	movs	r2, #0
 8003120:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003122:	480e      	ldr	r0, [pc, #56]	; (800315c <MX_I2C1_Init+0x74>)
 8003124:	f004 fdf8 	bl	8007d18 <HAL_I2C_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800312e:	f000 fabd 	bl	80036ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003132:	2100      	movs	r1, #0
 8003134:	4809      	ldr	r0, [pc, #36]	; (800315c <MX_I2C1_Init+0x74>)
 8003136:	f006 ffab 	bl	800a090 <HAL_I2CEx_ConfigAnalogFilter>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003140:	f000 fab4 	bl	80036ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003144:	2100      	movs	r1, #0
 8003146:	4805      	ldr	r0, [pc, #20]	; (800315c <MX_I2C1_Init+0x74>)
 8003148:	f006 ffed 	bl	800a126 <HAL_I2CEx_ConfigDigitalFilter>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003152:	f000 faab 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	24000308 	.word	0x24000308
 8003160:	40005400 	.word	0x40005400
 8003164:	00b03fdb 	.word	0x00b03fdb

08003168 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <MX_SPI1_Init+0xa4>)
 800316e:	4a28      	ldr	r2, [pc, #160]	; (8003210 <MX_SPI1_Init+0xa8>)
 8003170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <MX_SPI1_Init+0xa4>)
 8003174:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800317a:	4b24      	ldr	r3, [pc, #144]	; (800320c <MX_SPI1_Init+0xa4>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <MX_SPI1_Init+0xa4>)
 8003182:	2207      	movs	r2, #7
 8003184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003186:	4b21      	ldr	r3, [pc, #132]	; (800320c <MX_SPI1_Init+0xa4>)
 8003188:	2200      	movs	r2, #0
 800318a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800318c:	4b1f      	ldr	r3, [pc, #124]	; (800320c <MX_SPI1_Init+0xa4>)
 800318e:	2200      	movs	r2, #0
 8003190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003192:	4b1e      	ldr	r3, [pc, #120]	; (800320c <MX_SPI1_Init+0xa4>)
 8003194:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003198:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800319a:	4b1c      	ldr	r3, [pc, #112]	; (800320c <MX_SPI1_Init+0xa4>)
 800319c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80031a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031a2:	4b1a      	ldr	r3, [pc, #104]	; (800320c <MX_SPI1_Init+0xa4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031a8:	4b18      	ldr	r3, [pc, #96]	; (800320c <MX_SPI1_Init+0xa4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <MX_SPI1_Init+0xa4>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80031b4:	4b15      	ldr	r3, [pc, #84]	; (800320c <MX_SPI1_Init+0xa4>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031ba:	4b14      	ldr	r3, [pc, #80]	; (800320c <MX_SPI1_Init+0xa4>)
 80031bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <MX_SPI1_Init+0xa4>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <MX_SPI1_Init+0xa4>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80031ce:	4b0f      	ldr	r3, [pc, #60]	; (800320c <MX_SPI1_Init+0xa4>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <MX_SPI1_Init+0xa4>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <MX_SPI1_Init+0xa4>)
 80031dc:	2200      	movs	r2, #0
 80031de:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <MX_SPI1_Init+0xa4>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <MX_SPI1_Init+0xa4>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <MX_SPI1_Init+0xa4>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <MX_SPI1_Init+0xa4>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031f8:	4804      	ldr	r0, [pc, #16]	; (800320c <MX_SPI1_Init+0xa4>)
 80031fa:	f009 fb19 	bl	800c830 <HAL_SPI_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003204:	f000 fa52 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003208:	bf00      	nop
 800320a:	bd80      	pop	{r7, pc}
 800320c:	240004d4 	.word	0x240004d4
 8003210:	40013000 	.word	0x40013000

08003214 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <MX_TIM7_Init+0x64>)
 8003226:	4a15      	ldr	r2, [pc, #84]	; (800327c <MX_TIM7_Init+0x68>)
 8003228:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 800322a:	4b13      	ldr	r3, [pc, #76]	; (8003278 <MX_TIM7_Init+0x64>)
 800322c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003230:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <MX_TIM7_Init+0x64>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <MX_TIM7_Init+0x64>)
 800323a:	2205      	movs	r2, #5
 800323c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <MX_TIM7_Init+0x64>)
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003244:	480c      	ldr	r0, [pc, #48]	; (8003278 <MX_TIM7_Init+0x64>)
 8003246:	f00a fbae 	bl	800d9a6 <HAL_TIM_Base_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003250:	f000 fa2c 	bl	80036ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003254:	2300      	movs	r3, #0
 8003256:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	4619      	mov	r1, r3
 8003260:	4805      	ldr	r0, [pc, #20]	; (8003278 <MX_TIM7_Init+0x64>)
 8003262:	f00a fe49 	bl	800def8 <HAL_TIMEx_MasterConfigSynchronization>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800326c:	f000 fa1e 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	240005f8 	.word	0x240005f8
 800327c:	40001400 	.word	0x40001400

08003280 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003284:	4b22      	ldr	r3, [pc, #136]	; (8003310 <MX_USART1_UART_Init+0x90>)
 8003286:	4a23      	ldr	r2, [pc, #140]	; (8003314 <MX_USART1_UART_Init+0x94>)
 8003288:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <MX_USART1_UART_Init+0x90>)
 800328c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003290:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003292:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <MX_USART1_UART_Init+0x90>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <MX_USART1_UART_Init+0x90>)
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800329e:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <MX_USART1_UART_Init+0x90>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <MX_USART1_UART_Init+0x90>)
 80032a6:	220c      	movs	r2, #12
 80032a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032aa:	4b19      	ldr	r3, [pc, #100]	; (8003310 <MX_USART1_UART_Init+0x90>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <MX_USART1_UART_Init+0x90>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032b6:	4b16      	ldr	r3, [pc, #88]	; (8003310 <MX_USART1_UART_Init+0x90>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <MX_USART1_UART_Init+0x90>)
 80032be:	2200      	movs	r2, #0
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032c2:	4b13      	ldr	r3, [pc, #76]	; (8003310 <MX_USART1_UART_Init+0x90>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80032c8:	4811      	ldr	r0, [pc, #68]	; (8003310 <MX_USART1_UART_Init+0x90>)
 80032ca:	f00a febb 	bl	800e044 <HAL_UART_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80032d4:	f000 f9ea 	bl	80036ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032d8:	2100      	movs	r1, #0
 80032da:	480d      	ldr	r0, [pc, #52]	; (8003310 <MX_USART1_UART_Init+0x90>)
 80032dc:	f00c fe61 	bl	800ffa2 <HAL_UARTEx_SetTxFifoThreshold>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80032e6:	f000 f9e1 	bl	80036ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032ea:	2100      	movs	r1, #0
 80032ec:	4808      	ldr	r0, [pc, #32]	; (8003310 <MX_USART1_UART_Init+0x90>)
 80032ee:	f00c fe96 	bl	801001e <HAL_UARTEx_SetRxFifoThreshold>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80032f8:	f000 f9d8 	bl	80036ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80032fc:	4804      	ldr	r0, [pc, #16]	; (8003310 <MX_USART1_UART_Init+0x90>)
 80032fe:	f00c fe17 	bl	800ff30 <HAL_UARTEx_DisableFifoMode>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003308:	f000 f9d0 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800330c:	bf00      	nop
 800330e:	bd80      	pop	{r7, pc}
 8003310:	240003cc 	.word	0x240003cc
 8003314:	40011000 	.word	0x40011000

08003318 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800331c:	4b22      	ldr	r3, [pc, #136]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 800331e:	4a23      	ldr	r2, [pc, #140]	; (80033ac <MX_USART2_UART_Init+0x94>)
 8003320:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 8003324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003328:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 8003332:	2200      	movs	r2, #0
 8003334:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800333c:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 800333e:	220c      	movs	r2, #12
 8003340:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003342:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 8003344:	2200      	movs	r2, #0
 8003346:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003348:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 800334a:	2200      	movs	r2, #0
 800334c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800334e:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 8003350:	2200      	movs	r2, #0
 8003352:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003354:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 8003356:	2200      	movs	r2, #0
 8003358:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800335a:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 800335c:	2200      	movs	r2, #0
 800335e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003360:	4811      	ldr	r0, [pc, #68]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 8003362:	f00a fe6f 	bl	800e044 <HAL_UART_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800336c:	f000 f99e 	bl	80036ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003370:	2100      	movs	r1, #0
 8003372:	480d      	ldr	r0, [pc, #52]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 8003374:	f00c fe15 	bl	800ffa2 <HAL_UARTEx_SetTxFifoThreshold>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800337e:	f000 f995 	bl	80036ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003382:	2100      	movs	r1, #0
 8003384:	4808      	ldr	r0, [pc, #32]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 8003386:	f00c fe4a 	bl	801001e <HAL_UARTEx_SetRxFifoThreshold>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003390:	f000 f98c 	bl	80036ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003394:	4804      	ldr	r0, [pc, #16]	; (80033a8 <MX_USART2_UART_Init+0x90>)
 8003396:	f00c fdcb 	bl	800ff30 <HAL_UARTEx_DisableFifoMode>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80033a0:	f000 f984 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	2400055c 	.word	0x2400055c
 80033ac:	40004400 	.word	0x40004400

080033b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033b6:	4b11      	ldr	r3, [pc, #68]	; (80033fc <MX_DMA_Init+0x4c>)
 80033b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033bc:	4a0f      	ldr	r2, [pc, #60]	; (80033fc <MX_DMA_Init+0x4c>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <MX_DMA_Init+0x4c>)
 80033c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80033d4:	2200      	movs	r2, #0
 80033d6:	2100      	movs	r1, #0
 80033d8:	200b      	movs	r0, #11
 80033da:	f001 fc4a 	bl	8004c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80033de:	200b      	movs	r0, #11
 80033e0:	f001 fc61 	bl	8004ca6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80033e4:	2200      	movs	r2, #0
 80033e6:	2100      	movs	r1, #0
 80033e8:	200c      	movs	r0, #12
 80033ea:	f001 fc42 	bl	8004c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80033ee:	200c      	movs	r0, #12
 80033f0:	f001 fc59 	bl	8004ca6 <HAL_NVIC_EnableIRQ>

}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	58024400 	.word	0x58024400

08003400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003406:	f107 030c 	add.w	r3, r7, #12
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003416:	4b2b      	ldr	r3, [pc, #172]	; (80034c4 <MX_GPIO_Init+0xc4>)
 8003418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800341c:	4a29      	ldr	r2, [pc, #164]	; (80034c4 <MX_GPIO_Init+0xc4>)
 800341e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003422:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003426:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <MX_GPIO_Init+0xc4>)
 8003428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003434:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <MX_GPIO_Init+0xc4>)
 8003436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800343a:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <MX_GPIO_Init+0xc4>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003444:	4b1f      	ldr	r3, [pc, #124]	; (80034c4 <MX_GPIO_Init+0xc4>)
 8003446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	607b      	str	r3, [r7, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003452:	4b1c      	ldr	r3, [pc, #112]	; (80034c4 <MX_GPIO_Init+0xc4>)
 8003454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003458:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <MX_GPIO_Init+0xc4>)
 800345a:	f043 0302 	orr.w	r3, r3, #2
 800345e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003462:	4b18      	ldr	r3, [pc, #96]	; (80034c4 <MX_GPIO_Init+0xc4>)
 8003464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003470:	2200      	movs	r2, #0
 8003472:	2102      	movs	r1, #2
 8003474:	4814      	ldr	r0, [pc, #80]	; (80034c8 <MX_GPIO_Init+0xc8>)
 8003476:	f004 fc35 	bl	8007ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800347a:	2200      	movs	r2, #0
 800347c:	2140      	movs	r1, #64	; 0x40
 800347e:	4813      	ldr	r0, [pc, #76]	; (80034cc <MX_GPIO_Init+0xcc>)
 8003480:	f004 fc30 	bl	8007ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003484:	2302      	movs	r3, #2
 8003486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003488:	2301      	movs	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2300      	movs	r3, #0
 8003492:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003494:	f107 030c 	add.w	r3, r7, #12
 8003498:	4619      	mov	r1, r3
 800349a:	480b      	ldr	r0, [pc, #44]	; (80034c8 <MX_GPIO_Init+0xc8>)
 800349c:	f004 fa72 	bl	8007984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034a0:	2340      	movs	r3, #64	; 0x40
 80034a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a4:	2301      	movs	r3, #1
 80034a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b0:	f107 030c 	add.w	r3, r7, #12
 80034b4:	4619      	mov	r1, r3
 80034b6:	4805      	ldr	r0, [pc, #20]	; (80034cc <MX_GPIO_Init+0xcc>)
 80034b8:	f004 fa64 	bl	8007984 <HAL_GPIO_Init>

}
 80034bc:	bf00      	nop
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	58024400 	.word	0x58024400
 80034c8:	58020000 	.word	0x58020000
 80034cc:	58020400 	.word	0x58020400

080034d0 <Compass_Calibration>:

/* USER CODE BEGIN 4 */
void Compass_Calibration(uint8_t mag_calibration_enable)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
	if(mag_calibration_enable == 1)
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	f040 80d6 	bne.w	800368e <Compass_Calibration+0x1be>
	{
		for(int i =0;i<5;i++)
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e00b      	b.n	8003500 <Compass_Calibration+0x30>
		{
			MPU9250_Read_All(&hi2c1);
 80034e8:	486b      	ldr	r0, [pc, #428]	; (8003698 <Compass_Calibration+0x1c8>)
 80034ea:	f7fd fbcb 	bl	8000c84 <MPU9250_Read_All>
			HAL_Delay(1);
 80034ee:	2001      	movs	r0, #1
 80034f0:	f001 fab4 	bl	8004a5c <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 80034f4:	4869      	ldr	r0, [pc, #420]	; (800369c <Compass_Calibration+0x1cc>)
 80034f6:	f7fd fd93 	bl	8001020 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<5;i++)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3301      	adds	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b04      	cmp	r3, #4
 8003504:	ddf0      	ble.n	80034e8 <Compass_Calibration+0x18>
		}
		MPU9250.Mx_Max = MPU9250.Mx;
 8003506:	4b65      	ldr	r3, [pc, #404]	; (800369c <Compass_Calibration+0x1cc>)
 8003508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800350a:	4a64      	ldr	r2, [pc, #400]	; (800369c <Compass_Calibration+0x1cc>)
 800350c:	6513      	str	r3, [r2, #80]	; 0x50
		MPU9250.Mx_Min = MPU9250.Mx;
 800350e:	4b63      	ldr	r3, [pc, #396]	; (800369c <Compass_Calibration+0x1cc>)
 8003510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003512:	4a62      	ldr	r2, [pc, #392]	; (800369c <Compass_Calibration+0x1cc>)
 8003514:	6453      	str	r3, [r2, #68]	; 0x44
		MPU9250.My_Max = MPU9250.My;
 8003516:	4b61      	ldr	r3, [pc, #388]	; (800369c <Compass_Calibration+0x1cc>)
 8003518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351a:	4a60      	ldr	r2, [pc, #384]	; (800369c <Compass_Calibration+0x1cc>)
 800351c:	6553      	str	r3, [r2, #84]	; 0x54
		MPU9250.My_Min = MPU9250.My;
 800351e:	4b5f      	ldr	r3, [pc, #380]	; (800369c <Compass_Calibration+0x1cc>)
 8003520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003522:	4a5e      	ldr	r2, [pc, #376]	; (800369c <Compass_Calibration+0x1cc>)
 8003524:	6493      	str	r3, [r2, #72]	; 0x48
		MPU9250.Mz_Max = MPU9250.Mz;
 8003526:	4b5d      	ldr	r3, [pc, #372]	; (800369c <Compass_Calibration+0x1cc>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a5c      	ldr	r2, [pc, #368]	; (800369c <Compass_Calibration+0x1cc>)
 800352c:	6593      	str	r3, [r2, #88]	; 0x58
		MPU9250.Mz_Min = MPU9250.Mz;
 800352e:	4b5b      	ldr	r3, [pc, #364]	; (800369c <Compass_Calibration+0x1cc>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	4a5a      	ldr	r2, [pc, #360]	; (800369c <Compass_Calibration+0x1cc>)
 8003534:	64d3      	str	r3, [r2, #76]	; 0x4c

		while(mag_calibration_enable != 0)
 8003536:	e065      	b.n	8003604 <Compass_Calibration+0x134>
		{
			Receive_Command();
 8003538:	f000 fc18 	bl	8003d6c <Receive_Command>
			MPU9250_Read_All(&hi2c1);
 800353c:	4856      	ldr	r0, [pc, #344]	; (8003698 <Compass_Calibration+0x1c8>)
 800353e:	f7fd fba1 	bl	8000c84 <MPU9250_Read_All>
			HAL_Delay(1);
 8003542:	2001      	movs	r0, #1
 8003544:	f001 fa8a 	bl	8004a5c <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8003548:	4854      	ldr	r0, [pc, #336]	; (800369c <Compass_Calibration+0x1cc>)
 800354a:	f7fd fd69 	bl	8001020 <MPU9250_Parsing_NoOffset>
			if(MPU9250.Mx > MPU9250.Mx_Max) MPU9250.Mx_Max = MPU9250.Mx;
 800354e:	4b53      	ldr	r3, [pc, #332]	; (800369c <Compass_Calibration+0x1cc>)
 8003550:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003554:	4b51      	ldr	r3, [pc, #324]	; (800369c <Compass_Calibration+0x1cc>)
 8003556:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800355a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	dd03      	ble.n	800356c <Compass_Calibration+0x9c>
 8003564:	4b4d      	ldr	r3, [pc, #308]	; (800369c <Compass_Calibration+0x1cc>)
 8003566:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003568:	4a4c      	ldr	r2, [pc, #304]	; (800369c <Compass_Calibration+0x1cc>)
 800356a:	6513      	str	r3, [r2, #80]	; 0x50
			if(MPU9250.Mx < MPU9250.Mx_Min) MPU9250.Mx_Min = MPU9250.Mx;
 800356c:	4b4b      	ldr	r3, [pc, #300]	; (800369c <Compass_Calibration+0x1cc>)
 800356e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003572:	4b4a      	ldr	r3, [pc, #296]	; (800369c <Compass_Calibration+0x1cc>)
 8003574:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800357c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003580:	d503      	bpl.n	800358a <Compass_Calibration+0xba>
 8003582:	4b46      	ldr	r3, [pc, #280]	; (800369c <Compass_Calibration+0x1cc>)
 8003584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003586:	4a45      	ldr	r2, [pc, #276]	; (800369c <Compass_Calibration+0x1cc>)
 8003588:	6453      	str	r3, [r2, #68]	; 0x44

			if(MPU9250.My > MPU9250.My_Max) MPU9250.My_Max = MPU9250.My;
 800358a:	4b44      	ldr	r3, [pc, #272]	; (800369c <Compass_Calibration+0x1cc>)
 800358c:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8003590:	4b42      	ldr	r3, [pc, #264]	; (800369c <Compass_Calibration+0x1cc>)
 8003592:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800359a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359e:	dd03      	ble.n	80035a8 <Compass_Calibration+0xd8>
 80035a0:	4b3e      	ldr	r3, [pc, #248]	; (800369c <Compass_Calibration+0x1cc>)
 80035a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a4:	4a3d      	ldr	r2, [pc, #244]	; (800369c <Compass_Calibration+0x1cc>)
 80035a6:	6553      	str	r3, [r2, #84]	; 0x54
			if(MPU9250.My < MPU9250.My_Min) MPU9250.My_Min = MPU9250.My;
 80035a8:	4b3c      	ldr	r3, [pc, #240]	; (800369c <Compass_Calibration+0x1cc>)
 80035aa:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80035ae:	4b3b      	ldr	r3, [pc, #236]	; (800369c <Compass_Calibration+0x1cc>)
 80035b0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80035b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035bc:	d503      	bpl.n	80035c6 <Compass_Calibration+0xf6>
 80035be:	4b37      	ldr	r3, [pc, #220]	; (800369c <Compass_Calibration+0x1cc>)
 80035c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c2:	4a36      	ldr	r2, [pc, #216]	; (800369c <Compass_Calibration+0x1cc>)
 80035c4:	6493      	str	r3, [r2, #72]	; 0x48

			if(MPU9250.Mz > MPU9250.Mz_Max) MPU9250.Mz_Max = MPU9250.Mz;
 80035c6:	4b35      	ldr	r3, [pc, #212]	; (800369c <Compass_Calibration+0x1cc>)
 80035c8:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80035cc:	4b33      	ldr	r3, [pc, #204]	; (800369c <Compass_Calibration+0x1cc>)
 80035ce:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80035d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035da:	dd03      	ble.n	80035e4 <Compass_Calibration+0x114>
 80035dc:	4b2f      	ldr	r3, [pc, #188]	; (800369c <Compass_Calibration+0x1cc>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a2e      	ldr	r2, [pc, #184]	; (800369c <Compass_Calibration+0x1cc>)
 80035e2:	6593      	str	r3, [r2, #88]	; 0x58
			if(MPU9250.Mz < MPU9250.Mz_Min) MPU9250.Mz_Min = MPU9250.Mz;
 80035e4:	4b2d      	ldr	r3, [pc, #180]	; (800369c <Compass_Calibration+0x1cc>)
 80035e6:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80035ea:	4b2c      	ldr	r3, [pc, #176]	; (800369c <Compass_Calibration+0x1cc>)
 80035ec:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80035f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f8:	d400      	bmi.n	80035fc <Compass_Calibration+0x12c>
 80035fa:	e003      	b.n	8003604 <Compass_Calibration+0x134>
 80035fc:	4b27      	ldr	r3, [pc, #156]	; (800369c <Compass_Calibration+0x1cc>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4a26      	ldr	r2, [pc, #152]	; (800369c <Compass_Calibration+0x1cc>)
 8003602:	64d3      	str	r3, [r2, #76]	; 0x4c
		while(mag_calibration_enable != 0)
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d196      	bne.n	8003538 <Compass_Calibration+0x68>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <Compass_Calibration+0x1cc>)
 800360c:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <Compass_Calibration+0x1cc>)
 8003612:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800361a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800361e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <Compass_Calibration+0x1cc>)
 8003624:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <Compass_Calibration+0x1cc>)
 800362a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <Compass_Calibration+0x1cc>)
 8003630:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003638:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800363c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003640:	4b16      	ldr	r3, [pc, #88]	; (800369c <Compass_Calibration+0x1cc>)
 8003642:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <Compass_Calibration+0x1cc>)
 8003648:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800364c:	4b13      	ldr	r3, [pc, #76]	; (800369c <Compass_Calibration+0x1cc>)
 800364e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003652:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003656:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800365a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800365e:	4b0f      	ldr	r3, [pc, #60]	; (800369c <Compass_Calibration+0x1cc>)
 8003660:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8003664:	4a0e      	ldr	r2, [pc, #56]	; (80036a0 <Compass_Calibration+0x1d0>)
 8003666:	4b0d      	ldr	r3, [pc, #52]	; (800369c <Compass_Calibration+0x1cc>)
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 800366c:	4a0d      	ldr	r2, [pc, #52]	; (80036a4 <Compass_Calibration+0x1d4>)
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <Compass_Calibration+0x1cc>)
 8003670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003672:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 8003674:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <Compass_Calibration+0x1d8>)
 8003676:	4b09      	ldr	r3, [pc, #36]	; (800369c <Compass_Calibration+0x1cc>)
 8003678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800367a:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 800367c:	2000      	movs	r0, #0
 800367e:	f000 fefd 	bl	800447c <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 8003682:	230c      	movs	r3, #12
 8003684:	2200      	movs	r2, #0
 8003686:	2100      	movs	r1, #0
 8003688:	4805      	ldr	r0, [pc, #20]	; (80036a0 <Compass_Calibration+0x1d0>)
 800368a:	f000 ffe9 	bl	8004660 <W25qxx_WriteSector>
	}
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	24000308 	.word	0x24000308
 800369c:	24000270 	.word	0x24000270
 80036a0:	240005ec 	.word	0x240005ec
 80036a4:	240005f0 	.word	0x240005f0
 80036a8:	240005f4 	.word	0x240005f4

080036ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036b0:	b672      	cpsid	i
}
 80036b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80036b4:	e7fe      	b.n	80036b4 <Error_Handler+0x8>
	...

080036b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_MspInit+0x30>)
 80036c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036c4:	4a08      	ldr	r2, [pc, #32]	; (80036e8 <HAL_MspInit+0x30>)
 80036c6:	f043 0302 	orr.w	r3, r3, #2
 80036ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_MspInit+0x30>)
 80036d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	607b      	str	r3, [r7, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	58024400 	.word	0x58024400

080036ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b0b8      	sub	sp, #224	; 0xe0
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003704:	f107 0310 	add.w	r3, r7, #16
 8003708:	22bc      	movs	r2, #188	; 0xbc
 800370a:	2100      	movs	r1, #0
 800370c:	4618      	mov	r0, r3
 800370e:	f00c fd3d 	bl	801018c <memset>
  if(hi2c->Instance==I2C1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a3f      	ldr	r2, [pc, #252]	; (8003814 <HAL_I2C_MspInit+0x128>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d177      	bne.n	800380c <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800371c:	2308      	movs	r3, #8
 800371e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003726:	f107 0310 	add.w	r3, r7, #16
 800372a:	4618      	mov	r0, r3
 800372c:	f007 fd1e 	bl	800b16c <HAL_RCCEx_PeriphCLKConfig>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003736:	f7ff ffb9 	bl	80036ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373a:	4b37      	ldr	r3, [pc, #220]	; (8003818 <HAL_I2C_MspInit+0x12c>)
 800373c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003740:	4a35      	ldr	r2, [pc, #212]	; (8003818 <HAL_I2C_MspInit+0x12c>)
 8003742:	f043 0302 	orr.w	r3, r3, #2
 8003746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800374a:	4b33      	ldr	r3, [pc, #204]	; (8003818 <HAL_I2C_MspInit+0x12c>)
 800374c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003758:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800375c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003760:	2312      	movs	r3, #18
 8003762:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	2300      	movs	r3, #0
 800376e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003772:	2304      	movs	r3, #4
 8003774:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003778:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800377c:	4619      	mov	r1, r3
 800377e:	4827      	ldr	r0, [pc, #156]	; (800381c <HAL_I2C_MspInit+0x130>)
 8003780:	f004 f900 	bl	8007984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003784:	4b24      	ldr	r3, [pc, #144]	; (8003818 <HAL_I2C_MspInit+0x12c>)
 8003786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800378a:	4a23      	ldr	r2, [pc, #140]	; (8003818 <HAL_I2C_MspInit+0x12c>)
 800378c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003790:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003794:	4b20      	ldr	r3, [pc, #128]	; (8003818 <HAL_I2C_MspInit+0x12c>)
 8003796:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800379a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 80037a2:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037a4:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <HAL_I2C_MspInit+0x138>)
 80037a6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80037a8:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037aa:	2221      	movs	r2, #33	; 0x21
 80037ac:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037ae:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037ba:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037c0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037c8:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80037ce:	4b14      	ldr	r3, [pc, #80]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037dc:	2200      	movs	r2, #0
 80037de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80037e0:	480f      	ldr	r0, [pc, #60]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037e2:	f001 fa7b 	bl	8004cdc <HAL_DMA_Init>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 80037ec:	f7ff ff5e 	bl	80036ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0b      	ldr	r2, [pc, #44]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <HAL_I2C_MspInit+0x134>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80037fc:	2200      	movs	r2, #0
 80037fe:	2100      	movs	r1, #0
 8003800:	201f      	movs	r0, #31
 8003802:	f001 fa36 	bl	8004c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003806:	201f      	movs	r0, #31
 8003808:	f001 fa4d 	bl	8004ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800380c:	bf00      	nop
 800380e:	37e0      	adds	r7, #224	; 0xe0
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40005400 	.word	0x40005400
 8003818:	58024400 	.word	0x58024400
 800381c:	58020400 	.word	0x58020400
 8003820:	2400045c 	.word	0x2400045c
 8003824:	40020028 	.word	0x40020028

08003828 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b0b8      	sub	sp, #224	; 0xe0
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003830:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003840:	f107 0310 	add.w	r3, r7, #16
 8003844:	22bc      	movs	r2, #188	; 0xbc
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f00c fc9f 	bl	801018c <memset>
  if(hspi->Instance==SPI1)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <HAL_SPI_MspInit+0xc0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d142      	bne.n	80038de <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800385c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800385e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003862:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003864:	f107 0310 	add.w	r3, r7, #16
 8003868:	4618      	mov	r0, r3
 800386a:	f007 fc7f 	bl	800b16c <HAL_RCCEx_PeriphCLKConfig>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8003874:	f7ff ff1a 	bl	80036ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003878:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <HAL_SPI_MspInit+0xc4>)
 800387a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800387e:	4a1b      	ldr	r2, [pc, #108]	; (80038ec <HAL_SPI_MspInit+0xc4>)
 8003880:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003884:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003888:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_SPI_MspInit+0xc4>)
 800388a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800388e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <HAL_SPI_MspInit+0xc4>)
 8003898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800389c:	4a13      	ldr	r2, [pc, #76]	; (80038ec <HAL_SPI_MspInit+0xc4>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_SPI_MspInit+0xc4>)
 80038a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038b4:	23e0      	movs	r3, #224	; 0xe0
 80038b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	2302      	movs	r3, #2
 80038bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038cc:	2305      	movs	r3, #5
 80038ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80038d6:	4619      	mov	r1, r3
 80038d8:	4805      	ldr	r0, [pc, #20]	; (80038f0 <HAL_SPI_MspInit+0xc8>)
 80038da:	f004 f853 	bl	8007984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80038de:	bf00      	nop
 80038e0:	37e0      	adds	r7, #224	; 0xe0
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40013000 	.word	0x40013000
 80038ec:	58024400 	.word	0x58024400
 80038f0:	58020000 	.word	0x58020000

080038f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0e      	ldr	r2, [pc, #56]	; (800393c <HAL_TIM_Base_MspInit+0x48>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d116      	bne.n	8003934 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003906:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <HAL_TIM_Base_MspInit+0x4c>)
 8003908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800390c:	4a0c      	ldr	r2, [pc, #48]	; (8003940 <HAL_TIM_Base_MspInit+0x4c>)
 800390e:	f043 0320 	orr.w	r3, r3, #32
 8003912:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_TIM_Base_MspInit+0x4c>)
 8003918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003924:	2200      	movs	r2, #0
 8003926:	2100      	movs	r1, #0
 8003928:	2037      	movs	r0, #55	; 0x37
 800392a:	f001 f9a2 	bl	8004c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800392e:	2037      	movs	r0, #55	; 0x37
 8003930:	f001 f9b9 	bl	8004ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40001400 	.word	0x40001400
 8003940:	58024400 	.word	0x58024400

08003944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b0ba      	sub	sp, #232	; 0xe8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800395c:	f107 0318 	add.w	r3, r7, #24
 8003960:	22bc      	movs	r2, #188	; 0xbc
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f00c fc11 	bl	801018c <memset>
  if(huart->Instance==USART1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a67      	ldr	r2, [pc, #412]	; (8003b0c <HAL_UART_MspInit+0x1c8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d178      	bne.n	8003a66 <HAL_UART_MspInit+0x122>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003974:	2301      	movs	r3, #1
 8003976:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800397e:	f107 0318 	add.w	r3, r7, #24
 8003982:	4618      	mov	r0, r3
 8003984:	f007 fbf2 	bl	800b16c <HAL_RCCEx_PeriphCLKConfig>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800398e:	f7ff fe8d 	bl	80036ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003992:	4b5f      	ldr	r3, [pc, #380]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 8003994:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003998:	4a5d      	ldr	r2, [pc, #372]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 800399a:	f043 0310 	orr.w	r3, r3, #16
 800399e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039a2:	4b5b      	ldr	r3, [pc, #364]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 80039a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b0:	4b57      	ldr	r3, [pc, #348]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 80039b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b6:	4a56      	ldr	r2, [pc, #344]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039c0:	4b53      	ldr	r3, [pc, #332]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 80039c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80039ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80039d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80039e8:	2304      	movs	r3, #4
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039f2:	4619      	mov	r1, r3
 80039f4:	4847      	ldr	r0, [pc, #284]	; (8003b14 <HAL_UART_MspInit+0x1d0>)
 80039f6:	f003 ffc5 	bl	8007984 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 80039fa:	4b47      	ldr	r3, [pc, #284]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 80039fc:	4a47      	ldr	r2, [pc, #284]	; (8003b1c <HAL_UART_MspInit+0x1d8>)
 80039fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003a00:	4b45      	ldr	r3, [pc, #276]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a02:	222a      	movs	r2, #42	; 0x2a
 8003a04:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a06:	4b44      	ldr	r3, [pc, #272]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a08:	2240      	movs	r2, #64	; 0x40
 8003a0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a0c:	4b42      	ldr	r3, [pc, #264]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a12:	4b41      	ldr	r3, [pc, #260]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a18:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a1a:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a20:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003a26:	4b3c      	ldr	r3, [pc, #240]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a2c:	4b3a      	ldr	r3, [pc, #232]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a32:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a38:	4837      	ldr	r0, [pc, #220]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a3a:	f001 f94f 	bl	8004cdc <HAL_DMA_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8003a44:	f7ff fe32 	bl	80036ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a33      	ldr	r2, [pc, #204]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a4c:	679a      	str	r2, [r3, #120]	; 0x78
 8003a4e:	4a32      	ldr	r2, [pc, #200]	; (8003b18 <HAL_UART_MspInit+0x1d4>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003a54:	2200      	movs	r2, #0
 8003a56:	2100      	movs	r1, #0
 8003a58:	2025      	movs	r0, #37	; 0x25
 8003a5a:	f001 f90a 	bl	8004c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a5e:	2025      	movs	r0, #37	; 0x25
 8003a60:	f001 f921 	bl	8004ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a64:	e04e      	b.n	8003b04 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2d      	ldr	r2, [pc, #180]	; (8003b20 <HAL_UART_MspInit+0x1dc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d149      	bne.n	8003b04 <HAL_UART_MspInit+0x1c0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a70:	2302      	movs	r3, #2
 8003a72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a7a:	f107 0318 	add.w	r3, r7, #24
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f007 fb74 	bl	800b16c <HAL_RCCEx_PeriphCLKConfig>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_UART_MspInit+0x14a>
      Error_Handler();
 8003a8a:	f7ff fe0f 	bl	80036ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a8e:	4b20      	ldr	r3, [pc, #128]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 8003a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a94:	4a1e      	ldr	r2, [pc, #120]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 8003a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a9e:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 8003aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aac:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 8003aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab2:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_UART_MspInit+0x1cc>)
 8003abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003aca:	230c      	movs	r3, #12
 8003acc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ae2:	2307      	movs	r3, #7
 8003ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003aec:	4619      	mov	r1, r3
 8003aee:	480d      	ldr	r0, [pc, #52]	; (8003b24 <HAL_UART_MspInit+0x1e0>)
 8003af0:	f003 ff48 	bl	8007984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003af4:	2200      	movs	r2, #0
 8003af6:	2100      	movs	r1, #0
 8003af8:	2026      	movs	r0, #38	; 0x26
 8003afa:	f001 f8ba 	bl	8004c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003afe:	2026      	movs	r0, #38	; 0x26
 8003b00:	f001 f8d1 	bl	8004ca6 <HAL_NVIC_EnableIRQ>
}
 8003b04:	bf00      	nop
 8003b06:	37e8      	adds	r7, #232	; 0xe8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40011000 	.word	0x40011000
 8003b10:	58024400 	.word	0x58024400
 8003b14:	58020400 	.word	0x58020400
 8003b18:	24000354 	.word	0x24000354
 8003b1c:	40020010 	.word	0x40020010
 8003b20:	40004400 	.word	0x40004400
 8003b24:	58020000 	.word	0x58020000

08003b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003b2c:	e7fe      	b.n	8003b2c <NMI_Handler+0x4>

08003b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b32:	e7fe      	b.n	8003b32 <HardFault_Handler+0x4>

08003b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b38:	e7fe      	b.n	8003b38 <MemManage_Handler+0x4>

08003b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b3e:	e7fe      	b.n	8003b3e <BusFault_Handler+0x4>

08003b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b44:	e7fe      	b.n	8003b44 <UsageFault_Handler+0x4>

08003b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b74:	f000 ff52 	bl	8004a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003b80:	4802      	ldr	r0, [pc, #8]	; (8003b8c <DMA1_Stream0_IRQHandler+0x10>)
 8003b82:	f002 fbd3 	bl	800632c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	24000354 	.word	0x24000354

08003b90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003b94:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <DMA1_Stream1_IRQHandler+0x10>)
 8003b96:	f002 fbc9 	bl	800632c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	2400045c 	.word	0x2400045c

08003ba4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <I2C1_EV_IRQHandler+0x10>)
 8003baa:	f004 fc6b 	bl	8008484 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	24000308 	.word	0x24000308

08003bb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <USART1_IRQHandler+0x10>)
 8003bbe:	f00a fb57 	bl	800e270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	240003cc 	.word	0x240003cc

08003bcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003bd0:	4802      	ldr	r0, [pc, #8]	; (8003bdc <USART2_IRQHandler+0x10>)
 8003bd2:	f00a fb4d 	bl	800e270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	2400055c 	.word	0x2400055c

08003be0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003be4:	4802      	ldr	r0, [pc, #8]	; (8003bf0 <TIM7_IRQHandler+0x10>)
 8003be6:	f009 ffa5 	bl	800db34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	240005f8 	.word	0x240005f8

08003bf4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	static unsigned int tim1_2ms_count = 0;
	static unsigned int tim1_20ms_count = 0;

	if(htim->Instance == TIM7)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d11d      	bne.n	8003c42 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		tim1_2ms_count++;
 8003c06:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c0e:	6013      	str	r3, [r2, #0]
		if(tim1_2ms_count == 2)
 8003c10:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d105      	bne.n	8003c24 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			tim1_2ms_count = 0;
 8003c18:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
			tim1_2ms_flag = 1;
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 8003c24:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	4a0c      	ldr	r2, [pc, #48]	; (8003c5c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003c2c:	6013      	str	r3, [r2, #0]
		if(tim1_20ms_count == 20)
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b14      	cmp	r3, #20
 8003c34:	d105      	bne.n	8003c42 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			tim1_20ms_count = 0;
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
			tim1_20ms_flag = 1;
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40001400 	.word	0x40001400
 8003c54:	2400023c 	.word	0x2400023c
 8003c58:	24000232 	.word	0x24000232
 8003c5c:	24000240 	.word	0x24000240
 8003c60:	24000233 	.word	0x24000233

08003c64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a33      	ldr	r2, [pc, #204]	; (8003d40 <HAL_UART_RxCpltCallback+0xdc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d107      	bne.n	8003c86 <HAL_UART_RxCpltCallback+0x22>
	{
		uart1_rx_flag = 1;
 8003c76:	4b33      	ldr	r3, [pc, #204]	; (8003d44 <HAL_UART_RxCpltCallback+0xe0>)
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4932      	ldr	r1, [pc, #200]	; (8003d48 <HAL_UART_RxCpltCallback+0xe4>)
 8003c80:	4832      	ldr	r0, [pc, #200]	; (8003d4c <HAL_UART_RxCpltCallback+0xe8>)
 8003c82:	f00a fa2f 	bl	800e0e4 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a31      	ldr	r2, [pc, #196]	; (8003d50 <HAL_UART_RxCpltCallback+0xec>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d14f      	bne.n	8003d30 <HAL_UART_RxCpltCallback+0xcc>
	{
		uart2_rx_flag = 1;
 8003c90:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <HAL_UART_RxCpltCallback+0xf0>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &uart2_rx_data, 1);
 8003c96:	2201      	movs	r2, #1
 8003c98:	492f      	ldr	r1, [pc, #188]	; (8003d58 <HAL_UART_RxCpltCallback+0xf4>)
 8003c9a:	4830      	ldr	r0, [pc, #192]	; (8003d5c <HAL_UART_RxCpltCallback+0xf8>)
 8003c9c:	f00a fa22 	bl	800e0e4 <HAL_UART_Receive_IT>

		static unsigned int cnt = 0;

		switch(cnt)
 8003ca0:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b1f      	cmp	r3, #31
 8003ca6:	d02a      	beq.n	8003cfe <HAL_UART_RxCpltCallback+0x9a>
 8003ca8:	2b1f      	cmp	r3, #31
 8003caa:	d835      	bhi.n	8003d18 <HAL_UART_RxCpltCallback+0xb4>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <HAL_UART_RxCpltCallback+0x52>
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d010      	beq.n	8003cd6 <HAL_UART_RxCpltCallback+0x72>
 8003cb4:	e030      	b.n	8003d18 <HAL_UART_RxCpltCallback+0xb4>
		{
		case 0:
			if(uart2_rx_data==0x20)
 8003cb6:	4b28      	ldr	r3, [pc, #160]	; (8003d58 <HAL_UART_RxCpltCallback+0xf4>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d13a      	bne.n	8003d34 <HAL_UART_RxCpltCallback+0xd0>
			{
				ibus_rx_buf[cnt]=uart2_rx_data;
 8003cbe:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <HAL_UART_RxCpltCallback+0xf4>)
 8003cc4:	7811      	ldrb	r1, [r2, #0]
 8003cc6:	4a27      	ldr	r2, [pc, #156]	; (8003d64 <HAL_UART_RxCpltCallback+0x100>)
 8003cc8:	54d1      	strb	r1, [r2, r3]
				cnt++;
 8003cca:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003cd2:	6013      	str	r3, [r2, #0]
			}
			break;
 8003cd4:	e02e      	b.n	8003d34 <HAL_UART_RxCpltCallback+0xd0>
		case 1:
			if(uart2_rx_data==0x40)
 8003cd6:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_UART_RxCpltCallback+0xf4>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_UART_RxCpltCallback+0x92>
			{
				ibus_rx_buf[cnt]=uart2_rx_data;
 8003cde:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <HAL_UART_RxCpltCallback+0xf4>)
 8003ce4:	7811      	ldrb	r1, [r2, #0]
 8003ce6:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <HAL_UART_RxCpltCallback+0x100>)
 8003ce8:	54d1      	strb	r1, [r2, r3]
				cnt++;
 8003cea:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	4a1b      	ldr	r2, [pc, #108]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003cf2:	6013      	str	r3, [r2, #0]
			}
			else
				cnt=0;
			break;
 8003cf4:	e01f      	b.n	8003d36 <HAL_UART_RxCpltCallback+0xd2>
				cnt=0;
 8003cf6:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
			break;
 8003cfc:	e01b      	b.n	8003d36 <HAL_UART_RxCpltCallback+0xd2>

		case 31:
			ibus_rx_buf[cnt]=uart2_rx_data;
 8003cfe:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a15      	ldr	r2, [pc, #84]	; (8003d58 <HAL_UART_RxCpltCallback+0xf4>)
 8003d04:	7811      	ldrb	r1, [r2, #0]
 8003d06:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <HAL_UART_RxCpltCallback+0x100>)
 8003d08:	54d1      	strb	r1, [r2, r3]
			cnt=0;
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;
 8003d10:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_UART_RxCpltCallback+0x104>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	701a      	strb	r2, [r3, #0]
			break;
 8003d16:	e00e      	b.n	8003d36 <HAL_UART_RxCpltCallback+0xd2>

		default:
			ibus_rx_buf[cnt]=uart2_rx_data;
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <HAL_UART_RxCpltCallback+0xf4>)
 8003d1e:	7811      	ldrb	r1, [r2, #0]
 8003d20:	4a10      	ldr	r2, [pc, #64]	; (8003d64 <HAL_UART_RxCpltCallback+0x100>)
 8003d22:	54d1      	strb	r1, [r2, r3]
			cnt++;
 8003d24:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <HAL_UART_RxCpltCallback+0xfc>)
 8003d2c:	6013      	str	r3, [r2, #0]
			break;
 8003d2e:	e002      	b.n	8003d36 <HAL_UART_RxCpltCallback+0xd2>
		}
	}
 8003d30:	bf00      	nop
 8003d32:	e000      	b.n	8003d36 <HAL_UART_RxCpltCallback+0xd2>
			break;
 8003d34:	bf00      	nop
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40011000 	.word	0x40011000
 8003d44:	24000234 	.word	0x24000234
 8003d48:	24000235 	.word	0x24000235
 8003d4c:	240003cc 	.word	0x240003cc
 8003d50:	40004400 	.word	0x40004400
 8003d54:	24000236 	.word	0x24000236
 8003d58:	24000237 	.word	0x24000237
 8003d5c:	2400055c 	.word	0x2400055c
 8003d60:	24000244 	.word	0x24000244
 8003d64:	24000648 	.word	0x24000648
 8003d68:	24000238 	.word	0x24000238

08003d6c <Receive_Command>:

void Receive_Command(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
	if(uart1_rx_flag == 1)
 8003d70:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <Receive_Command+0xa0>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d142      	bne.n	8003dfe <Receive_Command+0x92>
	{
		uart1_rx_flag = 0;
 8003d78:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <Receive_Command+0xa0>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]

		switch(uart1_rx_data)
 8003d7e:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <Receive_Command+0xa4>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	3b31      	subs	r3, #49	; 0x31
 8003d84:	2b07      	cmp	r3, #7
 8003d86:	d833      	bhi.n	8003df0 <Receive_Command+0x84>
 8003d88:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <Receive_Command+0x24>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003db1 	.word	0x08003db1
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003dc1 	.word	0x08003dc1
 8003d9c:	08003dc9 	.word	0x08003dc9
 8003da0:	08003dd1 	.word	0x08003dd1
 8003da4:	08003dd9 	.word	0x08003dd9
 8003da8:	08003de1 	.word	0x08003de1
 8003dac:	08003de9 	.word	0x08003de9
		{
		case '1': print_mode = 1; break; //Roll, Pitch, Yaw
 8003db0:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <Receive_Command+0xa8>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e023      	b.n	8003e00 <Receive_Command+0x94>
		case '2': print_mode = 2; break; //Alt Raw, Alt Filt
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <Receive_Command+0xa8>)
 8003dba:	2202      	movs	r2, #2
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e01f      	b.n	8003e00 <Receive_Command+0x94>
		case '3': print_mode = 3; break; //Gyro
 8003dc0:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <Receive_Command+0xa8>)
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e01b      	b.n	8003e00 <Receive_Command+0x94>
		case '4': print_mode = 4; break; //Accel
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <Receive_Command+0xa8>)
 8003dca:	2204      	movs	r2, #4
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e017      	b.n	8003e00 <Receive_Command+0x94>
		case '5': print_mode = 5; break; //Mag
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <Receive_Command+0xa8>)
 8003dd2:	2205      	movs	r2, #5
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	e013      	b.n	8003e00 <Receive_Command+0x94>
		case '6': print_mode = 6; break; //Mag_Offset
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <Receive_Command+0xa8>)
 8003dda:	2206      	movs	r2, #6
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e00f      	b.n	8003e00 <Receive_Command+0x94>
		case '7': print_mode = 7; break; //Controller Channels
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <Receive_Command+0xa8>)
 8003de2:	2207      	movs	r2, #7
 8003de4:	701a      	strb	r2, [r3, #0]
 8003de6:	e00b      	b.n	8003e00 <Receive_Command+0x94>
		case '8': mag_calibration_enable = 1; break; //Mag_Raw
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <Receive_Command+0xac>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e007      	b.n	8003e00 <Receive_Command+0x94>
		default: print_mode = 0; mag_calibration_enable = 0; break; // Stop Printing
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <Receive_Command+0xa8>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <Receive_Command+0xac>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e000      	b.n	8003e00 <Receive_Command+0x94>
		}
	}
 8003dfe:	bf00      	nop
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	24000234 	.word	0x24000234
 8003e10:	24000235 	.word	0x24000235
 8003e14:	24000230 	.word	0x24000230
 8003e18:	24000231 	.word	0x24000231

08003e1c <Is_iBus_Received>:

int Is_iBus_Received(uint8_t ibus_rx_cplt_flag)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]
	if(ibus_rx_cplt_flag==1)
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d10e      	bne.n	8003e4a <Is_iBus_Received+0x2e>
		{
			ibus_rx_cplt_flag=0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	71fb      	strb	r3, [r7, #7]
			if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8003e30:	2120      	movs	r1, #32
 8003e32:	4808      	ldr	r0, [pc, #32]	; (8003e54 <Is_iBus_Received+0x38>)
 8003e34:	f7fc fc28 	bl	8000688 <iBus_Check_CHKSUM>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <Is_iBus_Received+0x2e>
			{
				iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8003e3e:	4906      	ldr	r1, [pc, #24]	; (8003e58 <Is_iBus_Received+0x3c>)
 8003e40:	4804      	ldr	r0, [pc, #16]	; (8003e54 <Is_iBus_Received+0x38>)
 8003e42:	f7fc fc58 	bl	80006f6 <iBus_Parsing>
				return 1;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <Is_iBus_Received+0x30>
			}
		}
		return 0;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	24000648 	.word	0x24000648
 8003e58:	24000254 	.word	0x24000254

08003e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
	return 1;
 8003e60:	2301      	movs	r3, #1
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_kill>:

int _kill(int pid, int sig)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e76:	f00c f95f 	bl	8010138 <__errno>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2216      	movs	r2, #22
 8003e7e:	601a      	str	r2, [r3, #0]
	return -1;
 8003e80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <_exit>:

void _exit (int status)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e94:	f04f 31ff 	mov.w	r1, #4294967295
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ffe7 	bl	8003e6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e9e:	e7fe      	b.n	8003e9e <_exit+0x12>

08003ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	e00a      	b.n	8003ec8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003eb2:	f3af 8000 	nop.w
 8003eb6:	4601      	mov	r1, r0
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	60ba      	str	r2, [r7, #8]
 8003ebe:	b2ca      	uxtb	r2, r1
 8003ec0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	dbf0      	blt.n	8003eb2 <_read+0x12>
	}

return len;
 8003ed0:	687b      	ldr	r3, [r7, #4]
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <_close>:
	}
	return len;
}

int _close(int file)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f02:	605a      	str	r2, [r3, #4]
	return 0;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <_isatty>:

int _isatty(int file)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
	return 1;
 8003f1a:	2301      	movs	r3, #1
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
	return 0;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f4c:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <_sbrk+0x5c>)
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <_sbrk+0x60>)
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <_sbrk+0x64>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <_sbrk+0x64>)
 8003f62:	4a12      	ldr	r2, [pc, #72]	; (8003fac <_sbrk+0x68>)
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <_sbrk+0x64>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d207      	bcs.n	8003f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f74:	f00c f8e0 	bl	8010138 <__errno>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	220c      	movs	r2, #12
 8003f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f82:	e009      	b.n	8003f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f84:	4b08      	ldr	r3, [pc, #32]	; (8003fa8 <_sbrk+0x64>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <_sbrk+0x64>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <_sbrk+0x64>)
 8003f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f96:	68fb      	ldr	r3, [r7, #12]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	24080000 	.word	0x24080000
 8003fa4:	00000400 	.word	0x00000400
 8003fa8:	24000248 	.word	0x24000248
 8003fac:	240006a8 	.word	0x240006a8

08003fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003fb4:	4b39      	ldr	r3, [pc, #228]	; (800409c <SystemInit+0xec>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	4a38      	ldr	r2, [pc, #224]	; (800409c <SystemInit+0xec>)
 8003fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fc4:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <SystemInit+0xf0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	2b06      	cmp	r3, #6
 8003fce:	d807      	bhi.n	8003fe0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fd0:	4b33      	ldr	r3, [pc, #204]	; (80040a0 <SystemInit+0xf0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 030f 	bic.w	r3, r3, #15
 8003fd8:	4a31      	ldr	r2, [pc, #196]	; (80040a0 <SystemInit+0xf0>)
 8003fda:	f043 0307 	orr.w	r3, r3, #7
 8003fde:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003fe0:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <SystemInit+0xf4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2f      	ldr	r2, [pc, #188]	; (80040a4 <SystemInit+0xf4>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fec:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <SystemInit+0xf4>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ff2:	4b2c      	ldr	r3, [pc, #176]	; (80040a4 <SystemInit+0xf4>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	492b      	ldr	r1, [pc, #172]	; (80040a4 <SystemInit+0xf4>)
 8003ff8:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <SystemInit+0xf8>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ffe:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <SystemInit+0xf0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800400a:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <SystemInit+0xf0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 030f 	bic.w	r3, r3, #15
 8004012:	4a23      	ldr	r2, [pc, #140]	; (80040a0 <SystemInit+0xf0>)
 8004014:	f043 0307 	orr.w	r3, r3, #7
 8004018:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800401a:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <SystemInit+0xf4>)
 800401c:	2200      	movs	r2, #0
 800401e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <SystemInit+0xf4>)
 8004022:	2200      	movs	r2, #0
 8004024:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004026:	4b1f      	ldr	r3, [pc, #124]	; (80040a4 <SystemInit+0xf4>)
 8004028:	2200      	movs	r2, #0
 800402a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800402c:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <SystemInit+0xf4>)
 800402e:	4a1f      	ldr	r2, [pc, #124]	; (80040ac <SystemInit+0xfc>)
 8004030:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004032:	4b1c      	ldr	r3, [pc, #112]	; (80040a4 <SystemInit+0xf4>)
 8004034:	4a1e      	ldr	r2, [pc, #120]	; (80040b0 <SystemInit+0x100>)
 8004036:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004038:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <SystemInit+0xf4>)
 800403a:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <SystemInit+0x104>)
 800403c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800403e:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <SystemInit+0xf4>)
 8004040:	2200      	movs	r2, #0
 8004042:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <SystemInit+0xf4>)
 8004046:	4a1b      	ldr	r2, [pc, #108]	; (80040b4 <SystemInit+0x104>)
 8004048:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800404a:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <SystemInit+0xf4>)
 800404c:	2200      	movs	r2, #0
 800404e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <SystemInit+0xf4>)
 8004052:	4a18      	ldr	r2, [pc, #96]	; (80040b4 <SystemInit+0x104>)
 8004054:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004056:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <SystemInit+0xf4>)
 8004058:	2200      	movs	r2, #0
 800405a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <SystemInit+0xf4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a10      	ldr	r2, [pc, #64]	; (80040a4 <SystemInit+0xf4>)
 8004062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004066:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <SystemInit+0xf4>)
 800406a:	2200      	movs	r2, #0
 800406c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <SystemInit+0x108>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <SystemInit+0x10c>)
 8004074:	4013      	ands	r3, r2
 8004076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800407a:	d202      	bcs.n	8004082 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800407c:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <SystemInit+0x110>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <SystemInit+0x114>)
 8004084:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004088:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800408a:	4b04      	ldr	r3, [pc, #16]	; (800409c <SystemInit+0xec>)
 800408c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004090:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004092:	bf00      	nop
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000ed00 	.word	0xe000ed00
 80040a0:	52002000 	.word	0x52002000
 80040a4:	58024400 	.word	0x58024400
 80040a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80040ac:	02020200 	.word	0x02020200
 80040b0:	01ff0000 	.word	0x01ff0000
 80040b4:	01010280 	.word	0x01010280
 80040b8:	5c001000 	.word	0x5c001000
 80040bc:	ffff0000 	.word	0xffff0000
 80040c0:	51008108 	.word	0x51008108
 80040c4:	52004000 	.word	0x52004000

080040c8 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	4603      	mov	r3, r0
 80040d0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80040d2:	f107 020f 	add.w	r2, r7, #15
 80040d6:	1df9      	adds	r1, r7, #7
 80040d8:	2364      	movs	r3, #100	; 0x64
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2301      	movs	r3, #1
 80040de:	4804      	ldr	r0, [pc, #16]	; (80040f0 <W25qxx_Spi+0x28>)
 80040e0:	f009 f88c 	bl	800d1fc <HAL_SPI_TransmitReceive>
	return ret;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	240004d4 	.word	0x240004d4

080040f4 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	2300      	movs	r3, #0
 8004104:	607b      	str	r3, [r7, #4]
 8004106:	2300      	movs	r3, #0
 8004108:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800410a:	2200      	movs	r2, #0
 800410c:	2140      	movs	r1, #64	; 0x40
 800410e:	4813      	ldr	r0, [pc, #76]	; (800415c <W25qxx_ReadID+0x68>)
 8004110:	f003 fde8 	bl	8007ce4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004114:	209f      	movs	r0, #159	; 0x9f
 8004116:	f7ff ffd7 	bl	80040c8 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800411a:	20a5      	movs	r0, #165	; 0xa5
 800411c:	f7ff ffd4 	bl	80040c8 <W25qxx_Spi>
 8004120:	4603      	mov	r3, r0
 8004122:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004124:	20a5      	movs	r0, #165	; 0xa5
 8004126:	f7ff ffcf 	bl	80040c8 <W25qxx_Spi>
 800412a:	4603      	mov	r3, r0
 800412c:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800412e:	20a5      	movs	r0, #165	; 0xa5
 8004130:	f7ff ffca 	bl	80040c8 <W25qxx_Spi>
 8004134:	4603      	mov	r3, r0
 8004136:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004138:	2201      	movs	r2, #1
 800413a:	2140      	movs	r1, #64	; 0x40
 800413c:	4807      	ldr	r0, [pc, #28]	; (800415c <W25qxx_ReadID+0x68>)
 800413e:	f003 fdd1 	bl	8007ce4 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	041a      	lsls	r2, r3, #16
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	4313      	orrs	r3, r2
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004152:	68fb      	ldr	r3, [r7, #12]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	58020400 	.word	0x58020400

08004160 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004166:	2200      	movs	r2, #0
 8004168:	2140      	movs	r1, #64	; 0x40
 800416a:	4816      	ldr	r0, [pc, #88]	; (80041c4 <W25qxx_ReadUniqID+0x64>)
 800416c:	f003 fdba 	bl	8007ce4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004170:	204b      	movs	r0, #75	; 0x4b
 8004172:	f7ff ffa9 	bl	80040c8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004176:	2300      	movs	r3, #0
 8004178:	71fb      	strb	r3, [r7, #7]
 800417a:	e005      	b.n	8004188 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800417c:	20a5      	movs	r0, #165	; 0xa5
 800417e:	f7ff ffa3 	bl	80040c8 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	3301      	adds	r3, #1
 8004186:	71fb      	strb	r3, [r7, #7]
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d9f6      	bls.n	800417c <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800418e:	2300      	movs	r3, #0
 8004190:	71bb      	strb	r3, [r7, #6]
 8004192:	e00b      	b.n	80041ac <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004194:	79bc      	ldrb	r4, [r7, #6]
 8004196:	20a5      	movs	r0, #165	; 0xa5
 8004198:	f7ff ff96 	bl	80040c8 <W25qxx_Spi>
 800419c:	4603      	mov	r3, r0
 800419e:	461a      	mov	r2, r3
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <W25qxx_ReadUniqID+0x68>)
 80041a2:	4423      	add	r3, r4
 80041a4:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80041a6:	79bb      	ldrb	r3, [r7, #6]
 80041a8:	3301      	adds	r3, #1
 80041aa:	71bb      	strb	r3, [r7, #6]
 80041ac:	79bb      	ldrb	r3, [r7, #6]
 80041ae:	2b07      	cmp	r3, #7
 80041b0:	d9f0      	bls.n	8004194 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041b2:	2201      	movs	r2, #1
 80041b4:	2140      	movs	r1, #64	; 0x40
 80041b6:	4803      	ldr	r0, [pc, #12]	; (80041c4 <W25qxx_ReadUniqID+0x64>)
 80041b8:	f003 fd94 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd90      	pop	{r4, r7, pc}
 80041c4:	58020400 	.word	0x58020400
 80041c8:	24000668 	.word	0x24000668

080041cc <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80041d0:	2200      	movs	r2, #0
 80041d2:	2140      	movs	r1, #64	; 0x40
 80041d4:	4807      	ldr	r0, [pc, #28]	; (80041f4 <W25qxx_WriteEnable+0x28>)
 80041d6:	f003 fd85 	bl	8007ce4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80041da:	2006      	movs	r0, #6
 80041dc:	f7ff ff74 	bl	80040c8 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80041e0:	2201      	movs	r2, #1
 80041e2:	2140      	movs	r1, #64	; 0x40
 80041e4:	4803      	ldr	r0, [pc, #12]	; (80041f4 <W25qxx_WriteEnable+0x28>)
 80041e6:	f003 fd7d 	bl	8007ce4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80041ea:	2001      	movs	r0, #1
 80041ec:	f000 fc36 	bl	8004a5c <HAL_Delay>
}
 80041f0:	bf00      	nop
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	58020400 	.word	0x58020400

080041f8 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004206:	2200      	movs	r2, #0
 8004208:	2140      	movs	r1, #64	; 0x40
 800420a:	481c      	ldr	r0, [pc, #112]	; (800427c <W25qxx_ReadStatusRegister+0x84>)
 800420c:	f003 fd6a 	bl	8007ce4 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d10c      	bne.n	8004230 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8004216:	2005      	movs	r0, #5
 8004218:	f7ff ff56 	bl	80040c8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800421c:	20a5      	movs	r0, #165	; 0xa5
 800421e:	f7ff ff53 	bl	80040c8 <W25qxx_Spi>
 8004222:	4603      	mov	r3, r0
 8004224:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8004226:	4a16      	ldr	r2, [pc, #88]	; (8004280 <W25qxx_ReadStatusRegister+0x88>)
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800422e:	e01b      	b.n	8004268 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d10c      	bne.n	8004250 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8004236:	2035      	movs	r0, #53	; 0x35
 8004238:	f7ff ff46 	bl	80040c8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800423c:	20a5      	movs	r0, #165	; 0xa5
 800423e:	f7ff ff43 	bl	80040c8 <W25qxx_Spi>
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8004246:	4a0e      	ldr	r2, [pc, #56]	; (8004280 <W25qxx_ReadStatusRegister+0x88>)
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800424e:	e00b      	b.n	8004268 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004250:	2015      	movs	r0, #21
 8004252:	f7ff ff39 	bl	80040c8 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004256:	20a5      	movs	r0, #165	; 0xa5
 8004258:	f7ff ff36 	bl	80040c8 <W25qxx_Spi>
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004260:	4a07      	ldr	r2, [pc, #28]	; (8004280 <W25qxx_ReadStatusRegister+0x88>)
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004268:	2201      	movs	r2, #1
 800426a:	2140      	movs	r1, #64	; 0x40
 800426c:	4803      	ldr	r0, [pc, #12]	; (800427c <W25qxx_ReadStatusRegister+0x84>)
 800426e:	f003 fd39 	bl	8007ce4 <HAL_GPIO_WritePin>
	return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	58020400 	.word	0x58020400
 8004280:	24000668 	.word	0x24000668

08004284 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8004288:	2001      	movs	r0, #1
 800428a:	f000 fbe7 	bl	8004a5c <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800428e:	2200      	movs	r2, #0
 8004290:	2140      	movs	r1, #64	; 0x40
 8004292:	480f      	ldr	r0, [pc, #60]	; (80042d0 <W25qxx_WaitForWriteEnd+0x4c>)
 8004294:	f003 fd26 	bl	8007ce4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8004298:	2005      	movs	r0, #5
 800429a:	f7ff ff15 	bl	80040c8 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800429e:	20a5      	movs	r0, #165	; 0xa5
 80042a0:	f7ff ff12 	bl	80040c8 <W25qxx_Spi>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <W25qxx_WaitForWriteEnd+0x50>)
 80042aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80042ae:	2001      	movs	r0, #1
 80042b0:	f000 fbd4 	bl	8004a5c <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80042b4:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <W25qxx_WaitForWriteEnd+0x50>)
 80042b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1ed      	bne.n	800429e <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042c2:	2201      	movs	r2, #1
 80042c4:	2140      	movs	r1, #64	; 0x40
 80042c6:	4802      	ldr	r0, [pc, #8]	; (80042d0 <W25qxx_WaitForWriteEnd+0x4c>)
 80042c8:	f003 fd0c 	bl	8007ce4 <HAL_GPIO_WritePin>
}
 80042cc:	bf00      	nop
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	58020400 	.word	0x58020400
 80042d4:	24000668 	.word	0x24000668

080042d8 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80042de:	4b65      	ldr	r3, [pc, #404]	; (8004474 <W25qxx_Init+0x19c>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80042e6:	e002      	b.n	80042ee <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80042e8:	2001      	movs	r0, #1
 80042ea:	f000 fbb7 	bl	8004a5c <HAL_Delay>
	while (HAL_GetTick() < 100)
 80042ee:	f000 fba9 	bl	8004a44 <HAL_GetTick>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b63      	cmp	r3, #99	; 0x63
 80042f6:	d9f7      	bls.n	80042e8 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042f8:	2201      	movs	r2, #1
 80042fa:	2140      	movs	r1, #64	; 0x40
 80042fc:	485e      	ldr	r0, [pc, #376]	; (8004478 <W25qxx_Init+0x1a0>)
 80042fe:	f003 fcf1 	bl	8007ce4 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004302:	2064      	movs	r0, #100	; 0x64
 8004304:	f000 fbaa 	bl	8004a5c <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8004308:	f7ff fef4 	bl	80040f4 <W25qxx_ReadID>
 800430c:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	3b11      	subs	r3, #17
 8004314:	2b0f      	cmp	r3, #15
 8004316:	d86c      	bhi.n	80043f2 <W25qxx_Init+0x11a>
 8004318:	a201      	add	r2, pc, #4	; (adr r2, 8004320 <W25qxx_Init+0x48>)
 800431a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431e:	bf00      	nop
 8004320:	080043e5 	.word	0x080043e5
 8004324:	080043d7 	.word	0x080043d7
 8004328:	080043c9 	.word	0x080043c9
 800432c:	080043bb 	.word	0x080043bb
 8004330:	080043ad 	.word	0x080043ad
 8004334:	0800439f 	.word	0x0800439f
 8004338:	08004391 	.word	0x08004391
 800433c:	08004381 	.word	0x08004381
 8004340:	08004371 	.word	0x08004371
 8004344:	080043f3 	.word	0x080043f3
 8004348:	080043f3 	.word	0x080043f3
 800434c:	080043f3 	.word	0x080043f3
 8004350:	080043f3 	.word	0x080043f3
 8004354:	080043f3 	.word	0x080043f3
 8004358:	080043f3 	.word	0x080043f3
 800435c:	08004361 	.word	0x08004361
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004360:	4b44      	ldr	r3, [pc, #272]	; (8004474 <W25qxx_Init+0x19c>)
 8004362:	220a      	movs	r2, #10
 8004364:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004366:	4b43      	ldr	r3, [pc, #268]	; (8004474 <W25qxx_Init+0x19c>)
 8004368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800436c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 800436e:	e046      	b.n	80043fe <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004370:	4b40      	ldr	r3, [pc, #256]	; (8004474 <W25qxx_Init+0x19c>)
 8004372:	2209      	movs	r2, #9
 8004374:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004376:	4b3f      	ldr	r3, [pc, #252]	; (8004474 <W25qxx_Init+0x19c>)
 8004378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800437c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 800437e:	e03e      	b.n	80043fe <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004380:	4b3c      	ldr	r3, [pc, #240]	; (8004474 <W25qxx_Init+0x19c>)
 8004382:	2208      	movs	r2, #8
 8004384:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004386:	4b3b      	ldr	r3, [pc, #236]	; (8004474 <W25qxx_Init+0x19c>)
 8004388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800438c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 800438e:	e036      	b.n	80043fe <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004390:	4b38      	ldr	r3, [pc, #224]	; (8004474 <W25qxx_Init+0x19c>)
 8004392:	2207      	movs	r2, #7
 8004394:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004396:	4b37      	ldr	r3, [pc, #220]	; (8004474 <W25qxx_Init+0x19c>)
 8004398:	2280      	movs	r2, #128	; 0x80
 800439a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 800439c:	e02f      	b.n	80043fe <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800439e:	4b35      	ldr	r3, [pc, #212]	; (8004474 <W25qxx_Init+0x19c>)
 80043a0:	2206      	movs	r2, #6
 80043a2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80043a4:	4b33      	ldr	r3, [pc, #204]	; (8004474 <W25qxx_Init+0x19c>)
 80043a6:	2240      	movs	r2, #64	; 0x40
 80043a8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80043aa:	e028      	b.n	80043fe <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80043ac:	4b31      	ldr	r3, [pc, #196]	; (8004474 <W25qxx_Init+0x19c>)
 80043ae:	2205      	movs	r2, #5
 80043b0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80043b2:	4b30      	ldr	r3, [pc, #192]	; (8004474 <W25qxx_Init+0x19c>)
 80043b4:	2220      	movs	r2, #32
 80043b6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80043b8:	e021      	b.n	80043fe <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80043ba:	4b2e      	ldr	r3, [pc, #184]	; (8004474 <W25qxx_Init+0x19c>)
 80043bc:	2204      	movs	r2, #4
 80043be:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80043c0:	4b2c      	ldr	r3, [pc, #176]	; (8004474 <W25qxx_Init+0x19c>)
 80043c2:	2210      	movs	r2, #16
 80043c4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 80043c6:	e01a      	b.n	80043fe <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80043c8:	4b2a      	ldr	r3, [pc, #168]	; (8004474 <W25qxx_Init+0x19c>)
 80043ca:	2203      	movs	r2, #3
 80043cc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80043ce:	4b29      	ldr	r3, [pc, #164]	; (8004474 <W25qxx_Init+0x19c>)
 80043d0:	2208      	movs	r2, #8
 80043d2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80043d4:	e013      	b.n	80043fe <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80043d6:	4b27      	ldr	r3, [pc, #156]	; (8004474 <W25qxx_Init+0x19c>)
 80043d8:	2202      	movs	r2, #2
 80043da:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80043dc:	4b25      	ldr	r3, [pc, #148]	; (8004474 <W25qxx_Init+0x19c>)
 80043de:	2204      	movs	r2, #4
 80043e0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80043e2:	e00c      	b.n	80043fe <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80043e4:	4b23      	ldr	r3, [pc, #140]	; (8004474 <W25qxx_Init+0x19c>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80043ea:	4b22      	ldr	r3, [pc, #136]	; (8004474 <W25qxx_Init+0x19c>)
 80043ec:	2202      	movs	r2, #2
 80043ee:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80043f0:	e005      	b.n	80043fe <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80043f2:	4b20      	ldr	r3, [pc, #128]	; (8004474 <W25qxx_Init+0x19c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e036      	b.n	800446c <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 80043fe:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <W25qxx_Init+0x19c>)
 8004400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004404:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <W25qxx_Init+0x19c>)
 8004408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800440c:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 800440e:	4b19      	ldr	r3, [pc, #100]	; (8004474 <W25qxx_Init+0x19c>)
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	4a17      	ldr	r2, [pc, #92]	; (8004474 <W25qxx_Init+0x19c>)
 8004416:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004418:	4b16      	ldr	r3, [pc, #88]	; (8004474 <W25qxx_Init+0x19c>)
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	4a15      	ldr	r2, [pc, #84]	; (8004474 <W25qxx_Init+0x19c>)
 800441e:	6912      	ldr	r2, [r2, #16]
 8004420:	fb02 f303 	mul.w	r3, r2, r3
 8004424:	4a13      	ldr	r2, [pc, #76]	; (8004474 <W25qxx_Init+0x19c>)
 8004426:	8952      	ldrh	r2, [r2, #10]
 8004428:	fbb3 f3f2 	udiv	r3, r3, r2
 800442c:	4a11      	ldr	r2, [pc, #68]	; (8004474 <W25qxx_Init+0x19c>)
 800442e:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004430:	4b10      	ldr	r3, [pc, #64]	; (8004474 <W25qxx_Init+0x19c>)
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	011b      	lsls	r3, r3, #4
 8004436:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <W25qxx_Init+0x19c>)
 8004438:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800443a:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <W25qxx_Init+0x19c>)
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	4a0d      	ldr	r2, [pc, #52]	; (8004474 <W25qxx_Init+0x19c>)
 8004440:	6912      	ldr	r2, [r2, #16]
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	0a9b      	lsrs	r3, r3, #10
 8004448:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <W25qxx_Init+0x19c>)
 800444a:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 800444c:	f7ff fe88 	bl	8004160 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004450:	2001      	movs	r0, #1
 8004452:	f7ff fed1 	bl	80041f8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004456:	2002      	movs	r0, #2
 8004458:	f7ff fece 	bl	80041f8 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 800445c:	2003      	movs	r0, #3
 800445e:	f7ff fecb 	bl	80041f8 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8004462:	4b04      	ldr	r3, [pc, #16]	; (8004474 <W25qxx_Init+0x19c>)
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800446a:	2301      	movs	r3, #1
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	24000668 	.word	0x24000668
 8004478:	58020400 	.word	0x58020400

0800447c <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004484:	e002      	b.n	800448c <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004486:	2001      	movs	r0, #1
 8004488:	f000 fae8 	bl	8004a5c <HAL_Delay>
	while (w25qxx.Lock == 1)
 800448c:	4b25      	ldr	r3, [pc, #148]	; (8004524 <W25qxx_EraseSector+0xa8>)
 800448e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004492:	2b01      	cmp	r3, #1
 8004494:	d0f7      	beq.n	8004486 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004496:	4b23      	ldr	r3, [pc, #140]	; (8004524 <W25qxx_EraseSector+0xa8>)
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 800449e:	f7ff fef1 	bl	8004284 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <W25qxx_EraseSector+0xa8>)
 80044a4:	691a      	ldr	r2, [r3, #16]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80044ae:	f7ff fe8d 	bl	80041cc <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80044b2:	2200      	movs	r2, #0
 80044b4:	2140      	movs	r1, #64	; 0x40
 80044b6:	481c      	ldr	r0, [pc, #112]	; (8004528 <W25qxx_EraseSector+0xac>)
 80044b8:	f003 fc14 	bl	8007ce4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80044bc:	4b19      	ldr	r3, [pc, #100]	; (8004524 <W25qxx_EraseSector+0xa8>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d909      	bls.n	80044d8 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 80044c4:	2021      	movs	r0, #33	; 0x21
 80044c6:	f7ff fdff 	bl	80040c8 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0e1b      	lsrs	r3, r3, #24
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fdf9 	bl	80040c8 <W25qxx_Spi>
 80044d6:	e002      	b.n	80044de <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 80044d8:	2020      	movs	r0, #32
 80044da:	f7ff fdf5 	bl	80040c8 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fdef 	bl	80040c8 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0a1b      	lsrs	r3, r3, #8
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fde9 	bl	80040c8 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fde4 	bl	80040c8 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004500:	2201      	movs	r2, #1
 8004502:	2140      	movs	r1, #64	; 0x40
 8004504:	4808      	ldr	r0, [pc, #32]	; (8004528 <W25qxx_EraseSector+0xac>)
 8004506:	f003 fbed 	bl	8007ce4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800450a:	f7ff febb 	bl	8004284 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 800450e:	2001      	movs	r0, #1
 8004510:	f000 faa4 	bl	8004a5c <HAL_Delay>
	w25qxx.Lock = 0;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <W25qxx_EraseSector+0xa8>)
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800451c:	bf00      	nop
 800451e:	3708      	adds	r7, #8
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	24000668 	.word	0x24000668
 8004528:	58020400 	.word	0x58020400

0800452c <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <W25qxx_SectorToPage+0x28>)
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	4a05      	ldr	r2, [pc, #20]	; (8004554 <W25qxx_SectorToPage+0x28>)
 8004540:	8952      	ldrh	r2, [r2, #10]
 8004542:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	24000668 	.word	0x24000668

08004558 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004566:	e002      	b.n	800456e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004568:	2001      	movs	r0, #1
 800456a:	f000 fa77 	bl	8004a5c <HAL_Delay>
	while (w25qxx.Lock == 1)
 800456e:	4b39      	ldr	r3, [pc, #228]	; (8004654 <W25qxx_WritePage+0xfc>)
 8004570:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004574:	2b01      	cmp	r3, #1
 8004576:	d0f7      	beq.n	8004568 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004578:	4b36      	ldr	r3, [pc, #216]	; (8004654 <W25qxx_WritePage+0xfc>)
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	4a33      	ldr	r2, [pc, #204]	; (8004654 <W25qxx_WritePage+0xfc>)
 8004588:	8952      	ldrh	r2, [r2, #10]
 800458a:	4293      	cmp	r3, r2
 800458c:	d802      	bhi.n	8004594 <W25qxx_WritePage+0x3c>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004594:	4b2f      	ldr	r3, [pc, #188]	; (8004654 <W25qxx_WritePage+0xfc>)
 8004596:	895b      	ldrh	r3, [r3, #10]
 8004598:	461a      	mov	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	4413      	add	r3, r2
 80045a6:	4a2b      	ldr	r2, [pc, #172]	; (8004654 <W25qxx_WritePage+0xfc>)
 80045a8:	8952      	ldrh	r2, [r2, #10]
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d905      	bls.n	80045ba <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80045ae:	4b29      	ldr	r3, [pc, #164]	; (8004654 <W25qxx_WritePage+0xfc>)
 80045b0:	895b      	ldrh	r3, [r3, #10]
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 80045ba:	f7ff fe63 	bl	8004284 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 80045be:	f7ff fe05 	bl	80041cc <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80045c2:	2200      	movs	r2, #0
 80045c4:	2140      	movs	r1, #64	; 0x40
 80045c6:	4824      	ldr	r0, [pc, #144]	; (8004658 <W25qxx_WritePage+0x100>)
 80045c8:	f003 fb8c 	bl	8007ce4 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 80045cc:	4b21      	ldr	r3, [pc, #132]	; (8004654 <W25qxx_WritePage+0xfc>)
 80045ce:	895b      	ldrh	r3, [r3, #10]
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	fb03 f302 	mul.w	r3, r3, r2
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	4413      	add	r3, r2
 80045dc:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80045de:	4b1d      	ldr	r3, [pc, #116]	; (8004654 <W25qxx_WritePage+0xfc>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d909      	bls.n	80045fa <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80045e6:	2012      	movs	r0, #18
 80045e8:	f7ff fd6e 	bl	80040c8 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	0e1b      	lsrs	r3, r3, #24
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fd68 	bl	80040c8 <W25qxx_Spi>
 80045f8:	e002      	b.n	8004600 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80045fa:	2002      	movs	r0, #2
 80045fc:	f7ff fd64 	bl	80040c8 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	0c1b      	lsrs	r3, r3, #16
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fd5e 	bl	80040c8 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	0a1b      	lsrs	r3, r3, #8
 8004610:	b2db      	uxtb	r3, r3
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fd58 	bl	80040c8 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fd53 	bl	80040c8 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	b29a      	uxth	r2, r3
 8004626:	2364      	movs	r3, #100	; 0x64
 8004628:	68f9      	ldr	r1, [r7, #12]
 800462a:	480c      	ldr	r0, [pc, #48]	; (800465c <W25qxx_WritePage+0x104>)
 800462c:	f008 fa02 	bl	800ca34 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004630:	2201      	movs	r2, #1
 8004632:	2140      	movs	r1, #64	; 0x40
 8004634:	4808      	ldr	r0, [pc, #32]	; (8004658 <W25qxx_WritePage+0x100>)
 8004636:	f003 fb55 	bl	8007ce4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800463a:	f7ff fe23 	bl	8004284 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 800463e:	2001      	movs	r0, #1
 8004640:	f000 fa0c 	bl	8004a5c <HAL_Delay>
	w25qxx.Lock = 0;
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <W25qxx_WritePage+0xfc>)
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	24000668 	.word	0x24000668
 8004658:	58020400 	.word	0x58020400
 800465c:	240004d4 	.word	0x240004d4

08004660 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 800466e:	4b2c      	ldr	r3, [pc, #176]	; (8004720 <W25qxx_WriteSector+0xc0>)
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d802      	bhi.n	800467e <W25qxx_WriteSector+0x1e>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 800467e:	4b28      	ldr	r3, [pc, #160]	; (8004720 <W25qxx_WriteSector+0xc0>)
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004684:	4b26      	ldr	r3, [pc, #152]	; (8004720 <W25qxx_WriteSector+0xc0>)
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d243      	bcs.n	8004716 <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	441a      	add	r2, r3
 8004694:	4b22      	ldr	r3, [pc, #136]	; (8004720 <W25qxx_WriteSector+0xc0>)
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	429a      	cmp	r2, r3
 800469a:	d905      	bls.n	80046a8 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 800469c:	4b20      	ldr	r3, [pc, #128]	; (8004720 <W25qxx_WriteSector+0xc0>)
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e001      	b.n	80046ac <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80046ac:	68b8      	ldr	r0, [r7, #8]
 80046ae:	f7ff ff3d 	bl	800452c <W25qxx_SectorToPage>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <W25qxx_WriteSector+0xc0>)
 80046b6:	895b      	ldrh	r3, [r3, #10]
 80046b8:	4619      	mov	r1, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80046c0:	4413      	add	r3, r2
 80046c2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80046c4:	4b16      	ldr	r3, [pc, #88]	; (8004720 <W25qxx_WriteSector+0xc0>)
 80046c6:	895b      	ldrh	r3, [r3, #10]
 80046c8:	461a      	mov	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80046d0:	fb02 f201 	mul.w	r2, r2, r1
 80046d4:	1a9b      	subs	r3, r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	69f9      	ldr	r1, [r7, #28]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff ff3a 	bl	8004558 <W25qxx_WritePage>
		StartPage++;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	3301      	adds	r3, #1
 80046e8:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80046ea:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <W25qxx_WriteSector+0xc0>)
 80046ec:	895b      	ldrh	r3, [r3, #10]
 80046ee:	461a      	mov	r2, r3
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1a9a      	subs	r2, r3, r2
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	4413      	add	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <W25qxx_WriteSector+0xc0>)
 80046fc:	895b      	ldrh	r3, [r3, #10]
 80046fe:	461a      	mov	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	dce1      	bgt.n	80046d8 <W25qxx_WriteSector+0x78>
 8004714:	e000      	b.n	8004718 <W25qxx_WriteSector+0xb8>
		return;
 8004716:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004718:	3720      	adds	r7, #32
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	24000668 	.word	0x24000668

08004724 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004732:	e002      	b.n	800473a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004734:	2001      	movs	r0, #1
 8004736:	f000 f991 	bl	8004a5c <HAL_Delay>
	while (w25qxx.Lock == 1)
 800473a:	4b36      	ldr	r3, [pc, #216]	; (8004814 <W25qxx_ReadPage+0xf0>)
 800473c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004740:	2b01      	cmp	r3, #1
 8004742:	d0f7      	beq.n	8004734 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004744:	4b33      	ldr	r3, [pc, #204]	; (8004814 <W25qxx_ReadPage+0xf0>)
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 800474c:	4b31      	ldr	r3, [pc, #196]	; (8004814 <W25qxx_ReadPage+0xf0>)
 800474e:	895b      	ldrh	r3, [r3, #10]
 8004750:	461a      	mov	r2, r3
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	4293      	cmp	r3, r2
 8004756:	d802      	bhi.n	800475e <W25qxx_ReadPage+0x3a>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800475e:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <W25qxx_ReadPage+0xf0>)
 8004760:	895b      	ldrh	r3, [r3, #10]
 8004762:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	4413      	add	r3, r2
 800476a:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <W25qxx_ReadPage+0xf0>)
 800476c:	8952      	ldrh	r2, [r2, #10]
 800476e:	4293      	cmp	r3, r2
 8004770:	d905      	bls.n	800477e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004772:	4b28      	ldr	r3, [pc, #160]	; (8004814 <W25qxx_ReadPage+0xf0>)
 8004774:	895b      	ldrh	r3, [r3, #10]
 8004776:	461a      	mov	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800477e:	4b25      	ldr	r3, [pc, #148]	; (8004814 <W25qxx_ReadPage+0xf0>)
 8004780:	895b      	ldrh	r3, [r3, #10]
 8004782:	461a      	mov	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	fb03 f302 	mul.w	r3, r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	4413      	add	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004790:	2200      	movs	r2, #0
 8004792:	2140      	movs	r1, #64	; 0x40
 8004794:	4820      	ldr	r0, [pc, #128]	; (8004818 <W25qxx_ReadPage+0xf4>)
 8004796:	f003 faa5 	bl	8007ce4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800479a:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <W25qxx_ReadPage+0xf0>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d909      	bls.n	80047b6 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 80047a2:	200c      	movs	r0, #12
 80047a4:	f7ff fc90 	bl	80040c8 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	0e1b      	lsrs	r3, r3, #24
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fc8a 	bl	80040c8 <W25qxx_Spi>
 80047b4:	e002      	b.n	80047bc <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80047b6:	200b      	movs	r0, #11
 80047b8:	f7ff fc86 	bl	80040c8 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	0c1b      	lsrs	r3, r3, #16
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff fc80 	bl	80040c8 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fc7a 	bl	80040c8 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff fc75 	bl	80040c8 <W25qxx_Spi>
	W25qxx_Spi(0);
 80047de:	2000      	movs	r0, #0
 80047e0:	f7ff fc72 	bl	80040c8 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	2364      	movs	r3, #100	; 0x64
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	480b      	ldr	r0, [pc, #44]	; (800481c <W25qxx_ReadPage+0xf8>)
 80047ee:	f008 fb13 	bl	800ce18 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80047f2:	2201      	movs	r2, #1
 80047f4:	2140      	movs	r1, #64	; 0x40
 80047f6:	4808      	ldr	r0, [pc, #32]	; (8004818 <W25qxx_ReadPage+0xf4>)
 80047f8:	f003 fa74 	bl	8007ce4 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80047fc:	2001      	movs	r0, #1
 80047fe:	f000 f92d 	bl	8004a5c <HAL_Delay>
	w25qxx.Lock = 0;
 8004802:	4b04      	ldr	r3, [pc, #16]	; (8004814 <W25qxx_ReadPage+0xf0>)
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800480a:	bf00      	nop
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	24000668 	.word	0x24000668
 8004818:	58020400 	.word	0x58020400
 800481c:	240004d4 	.word	0x240004d4

08004820 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800482e:	4b2c      	ldr	r3, [pc, #176]	; (80048e0 <W25qxx_ReadSector+0xc0>)
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d802      	bhi.n	800483e <W25qxx_ReadSector+0x1e>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d102      	bne.n	8004844 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800483e:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <W25qxx_ReadSector+0xc0>)
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004844:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <W25qxx_ReadSector+0xc0>)
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	d243      	bcs.n	80048d6 <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	441a      	add	r2, r3
 8004854:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <W25qxx_ReadSector+0xc0>)
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	429a      	cmp	r2, r3
 800485a:	d905      	bls.n	8004868 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 800485c:	4b20      	ldr	r3, [pc, #128]	; (80048e0 <W25qxx_ReadSector+0xc0>)
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	e001      	b.n	800486c <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 800486c:	68b8      	ldr	r0, [r7, #8]
 800486e:	f7ff fe5d 	bl	800452c <W25qxx_SectorToPage>
 8004872:	4602      	mov	r2, r0
 8004874:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <W25qxx_ReadSector+0xc0>)
 8004876:	895b      	ldrh	r3, [r3, #10]
 8004878:	4619      	mov	r1, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004880:	4413      	add	r3, r2
 8004882:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004884:	4b16      	ldr	r3, [pc, #88]	; (80048e0 <W25qxx_ReadSector+0xc0>)
 8004886:	895b      	ldrh	r3, [r3, #10]
 8004888:	461a      	mov	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004890:	fb02 f201 	mul.w	r2, r2, r1
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	69f9      	ldr	r1, [r7, #28]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f7ff ff40 	bl	8004724 <W25qxx_ReadPage>
		StartPage++;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	3301      	adds	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80048aa:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <W25qxx_ReadSector+0xc0>)
 80048ac:	895b      	ldrh	r3, [r3, #10]
 80048ae:	461a      	mov	r2, r3
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	1a9a      	subs	r2, r3, r2
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	4413      	add	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80048ba:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <W25qxx_ReadSector+0xc0>)
 80048bc:	895b      	ldrh	r3, [r3, #10]
 80048be:	461a      	mov	r2, r3
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	dce1      	bgt.n	8004898 <W25qxx_ReadSector+0x78>
 80048d4:	e000      	b.n	80048d8 <W25qxx_ReadSector+0xb8>
		return;
 80048d6:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	24000668 	.word	0x24000668

080048e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80048e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800491c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80048e8:	f7ff fb62 	bl	8003fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048ec:	480c      	ldr	r0, [pc, #48]	; (8004920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048ee:	490d      	ldr	r1, [pc, #52]	; (8004924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80048f0:	4a0d      	ldr	r2, [pc, #52]	; (8004928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80048f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048f4:	e002      	b.n	80048fc <LoopCopyDataInit>

080048f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048fa:	3304      	adds	r3, #4

080048fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004900:	d3f9      	bcc.n	80048f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004902:	4a0a      	ldr	r2, [pc, #40]	; (800492c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004904:	4c0a      	ldr	r4, [pc, #40]	; (8004930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004908:	e001      	b.n	800490e <LoopFillZerobss>

0800490a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800490a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800490c:	3204      	adds	r2, #4

0800490e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800490e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004910:	d3fb      	bcc.n	800490a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004912:	f00b fc17 	bl	8010144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004916:	f7fe f983 	bl	8002c20 <main>
  bx  lr
 800491a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800491c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004920:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004924:	240001fc 	.word	0x240001fc
  ldr r2, =_sidata
 8004928:	080139f0 	.word	0x080139f0
  ldr r2, =_sbss
 800492c:	240001fc 	.word	0x240001fc
  ldr r4, =_ebss
 8004930:	240006a4 	.word	0x240006a4

08004934 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004934:	e7fe      	b.n	8004934 <ADC3_IRQHandler>
	...

08004938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800493e:	2003      	movs	r0, #3
 8004940:	f000 f98c 	bl	8004c5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004944:	f006 fa3c 	bl	800adc0 <HAL_RCC_GetSysClockFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <HAL_Init+0x68>)
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	0a1b      	lsrs	r3, r3, #8
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	4913      	ldr	r1, [pc, #76]	; (80049a4 <HAL_Init+0x6c>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
 8004960:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <HAL_Init+0x68>)
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	4a0e      	ldr	r2, [pc, #56]	; (80049a4 <HAL_Init+0x6c>)
 800496c:	5cd3      	ldrb	r3, [r2, r3]
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	fa22 f303 	lsr.w	r3, r2, r3
 8004978:	4a0b      	ldr	r2, [pc, #44]	; (80049a8 <HAL_Init+0x70>)
 800497a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800497c:	4a0b      	ldr	r2, [pc, #44]	; (80049ac <HAL_Init+0x74>)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004982:	200f      	movs	r0, #15
 8004984:	f000 f814 	bl	80049b0 <HAL_InitTick>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e002      	b.n	8004998 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004992:	f7fe fe91 	bl	80036b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	58024400 	.word	0x58024400
 80049a4:	08013514 	.word	0x08013514
 80049a8:	2400001c 	.word	0x2400001c
 80049ac:	24000018 	.word	0x24000018

080049b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80049b8:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <HAL_InitTick+0x60>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e021      	b.n	8004a08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80049c4:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_InitTick+0x64>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <HAL_InitTick+0x60>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80049d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 f971 	bl	8004cc2 <HAL_SYSTICK_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e00e      	b.n	8004a08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b0f      	cmp	r3, #15
 80049ee:	d80a      	bhi.n	8004a06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049f0:	2200      	movs	r2, #0
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	f04f 30ff 	mov.w	r0, #4294967295
 80049f8:	f000 f93b 	bl	8004c72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049fc:	4a06      	ldr	r2, [pc, #24]	; (8004a18 <HAL_InitTick+0x68>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	e000      	b.n	8004a08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	24000024 	.word	0x24000024
 8004a14:	24000018 	.word	0x24000018
 8004a18:	24000020 	.word	0x24000020

08004a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_IncTick+0x20>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <HAL_IncTick+0x24>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <HAL_IncTick+0x24>)
 8004a2e:	6013      	str	r3, [r2, #0]
}
 8004a30:	bf00      	nop
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	24000024 	.word	0x24000024
 8004a40:	24000690 	.word	0x24000690

08004a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return uwTick;
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <HAL_GetTick+0x14>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	24000690 	.word	0x24000690

08004a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a64:	f7ff ffee 	bl	8004a44 <HAL_GetTick>
 8004a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d005      	beq.n	8004a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a76:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <HAL_Delay+0x44>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a82:	bf00      	nop
 8004a84:	f7ff ffde 	bl	8004a44 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d8f7      	bhi.n	8004a84 <HAL_Delay+0x28>
  {
  }
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	24000024 	.word	0x24000024

08004aa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <HAL_GetREVID+0x14>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	0c1b      	lsrs	r3, r3, #16
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	5c001000 	.word	0x5c001000

08004abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <__NVIC_SetPriorityGrouping+0x40>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aea:	4a04      	ldr	r2, [pc, #16]	; (8004afc <__NVIC_SetPriorityGrouping+0x40>)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	60d3      	str	r3, [r2, #12]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	e000ed00 	.word	0xe000ed00
 8004b00:	05fa0000 	.word	0x05fa0000

08004b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b08:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <__NVIC_GetPriorityGrouping+0x18>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	f003 0307 	and.w	r3, r3, #7
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	db0b      	blt.n	8004b4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b32:	88fb      	ldrh	r3, [r7, #6]
 8004b34:	f003 021f 	and.w	r2, r3, #31
 8004b38:	4907      	ldr	r1, [pc, #28]	; (8004b58 <__NVIC_EnableIRQ+0x38>)
 8004b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2001      	movs	r0, #1
 8004b42:	fa00 f202 	lsl.w	r2, r0, r2
 8004b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	e000e100 	.word	0xe000e100

08004b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	6039      	str	r1, [r7, #0]
 8004b66:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	db0a      	blt.n	8004b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	490c      	ldr	r1, [pc, #48]	; (8004ba8 <__NVIC_SetPriority+0x4c>)
 8004b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b7a:	0112      	lsls	r2, r2, #4
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	440b      	add	r3, r1
 8004b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b84:	e00a      	b.n	8004b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4908      	ldr	r1, [pc, #32]	; (8004bac <__NVIC_SetPriority+0x50>)
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	3b04      	subs	r3, #4
 8004b94:	0112      	lsls	r2, r2, #4
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	440b      	add	r3, r1
 8004b9a:	761a      	strb	r2, [r3, #24]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000e100 	.word	0xe000e100
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b089      	sub	sp, #36	; 0x24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f1c3 0307 	rsb	r3, r3, #7
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	bf28      	it	cs
 8004bce:	2304      	movcs	r3, #4
 8004bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2b06      	cmp	r3, #6
 8004bd8:	d902      	bls.n	8004be0 <NVIC_EncodePriority+0x30>
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3b03      	subs	r3, #3
 8004bde:	e000      	b.n	8004be2 <NVIC_EncodePriority+0x32>
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	43d9      	mvns	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c08:	4313      	orrs	r3, r2
         );
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3724      	adds	r7, #36	; 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c28:	d301      	bcc.n	8004c2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e00f      	b.n	8004c4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c2e:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <SysTick_Config+0x40>)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3b01      	subs	r3, #1
 8004c34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c36:	210f      	movs	r1, #15
 8004c38:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3c:	f7ff ff8e 	bl	8004b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <SysTick_Config+0x40>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c46:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <SysTick_Config+0x40>)
 8004c48:	2207      	movs	r2, #7
 8004c4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	e000e010 	.word	0xe000e010

08004c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff ff29 	bl	8004abc <__NVIC_SetPriorityGrouping>
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	4603      	mov	r3, r0
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
 8004c7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c80:	f7ff ff40 	bl	8004b04 <__NVIC_GetPriorityGrouping>
 8004c84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	6978      	ldr	r0, [r7, #20]
 8004c8c:	f7ff ff90 	bl	8004bb0 <NVIC_EncodePriority>
 8004c90:	4602      	mov	r2, r0
 8004c92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c96:	4611      	mov	r1, r2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ff5f 	bl	8004b5c <__NVIC_SetPriority>
}
 8004c9e:	bf00      	nop
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	4603      	mov	r3, r0
 8004cae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff ff33 	bl	8004b20 <__NVIC_EnableIRQ>
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b082      	sub	sp, #8
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff ffa4 	bl	8004c18 <SysTick_Config>
 8004cd0:	4603      	mov	r3, r0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004ce4:	f7ff feae 	bl	8004a44 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e316      	b.n	8005322 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a66      	ldr	r2, [pc, #408]	; (8004e94 <HAL_DMA_Init+0x1b8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d04a      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a65      	ldr	r2, [pc, #404]	; (8004e98 <HAL_DMA_Init+0x1bc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d045      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a63      	ldr	r2, [pc, #396]	; (8004e9c <HAL_DMA_Init+0x1c0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d040      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a62      	ldr	r2, [pc, #392]	; (8004ea0 <HAL_DMA_Init+0x1c4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d03b      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a60      	ldr	r2, [pc, #384]	; (8004ea4 <HAL_DMA_Init+0x1c8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d036      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a5f      	ldr	r2, [pc, #380]	; (8004ea8 <HAL_DMA_Init+0x1cc>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d031      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a5d      	ldr	r2, [pc, #372]	; (8004eac <HAL_DMA_Init+0x1d0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d02c      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a5c      	ldr	r2, [pc, #368]	; (8004eb0 <HAL_DMA_Init+0x1d4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d027      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a5a      	ldr	r2, [pc, #360]	; (8004eb4 <HAL_DMA_Init+0x1d8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d022      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a59      	ldr	r2, [pc, #356]	; (8004eb8 <HAL_DMA_Init+0x1dc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d01d      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a57      	ldr	r2, [pc, #348]	; (8004ebc <HAL_DMA_Init+0x1e0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d018      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a56      	ldr	r2, [pc, #344]	; (8004ec0 <HAL_DMA_Init+0x1e4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a54      	ldr	r2, [pc, #336]	; (8004ec4 <HAL_DMA_Init+0x1e8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d00e      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a53      	ldr	r2, [pc, #332]	; (8004ec8 <HAL_DMA_Init+0x1ec>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d009      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a51      	ldr	r2, [pc, #324]	; (8004ecc <HAL_DMA_Init+0x1f0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d004      	beq.n	8004d94 <HAL_DMA_Init+0xb8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a50      	ldr	r2, [pc, #320]	; (8004ed0 <HAL_DMA_Init+0x1f4>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d101      	bne.n	8004d98 <HAL_DMA_Init+0xbc>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <HAL_DMA_Init+0xbe>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 813b 	beq.w	8005016 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a37      	ldr	r2, [pc, #220]	; (8004e94 <HAL_DMA_Init+0x1b8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d04a      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a36      	ldr	r2, [pc, #216]	; (8004e98 <HAL_DMA_Init+0x1bc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d045      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a34      	ldr	r2, [pc, #208]	; (8004e9c <HAL_DMA_Init+0x1c0>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d040      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a33      	ldr	r2, [pc, #204]	; (8004ea0 <HAL_DMA_Init+0x1c4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d03b      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a31      	ldr	r2, [pc, #196]	; (8004ea4 <HAL_DMA_Init+0x1c8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d036      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a30      	ldr	r2, [pc, #192]	; (8004ea8 <HAL_DMA_Init+0x1cc>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d031      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a2e      	ldr	r2, [pc, #184]	; (8004eac <HAL_DMA_Init+0x1d0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d02c      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a2d      	ldr	r2, [pc, #180]	; (8004eb0 <HAL_DMA_Init+0x1d4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d027      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a2b      	ldr	r2, [pc, #172]	; (8004eb4 <HAL_DMA_Init+0x1d8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d022      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2a      	ldr	r2, [pc, #168]	; (8004eb8 <HAL_DMA_Init+0x1dc>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d01d      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a28      	ldr	r2, [pc, #160]	; (8004ebc <HAL_DMA_Init+0x1e0>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d018      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a27      	ldr	r2, [pc, #156]	; (8004ec0 <HAL_DMA_Init+0x1e4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d013      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a25      	ldr	r2, [pc, #148]	; (8004ec4 <HAL_DMA_Init+0x1e8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00e      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <HAL_DMA_Init+0x1ec>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d009      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <HAL_DMA_Init+0x1f0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d004      	beq.n	8004e50 <HAL_DMA_Init+0x174>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <HAL_DMA_Init+0x1f4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d108      	bne.n	8004e62 <HAL_DMA_Init+0x186>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e007      	b.n	8004e72 <HAL_DMA_Init+0x196>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0201 	bic.w	r2, r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e72:	e02f      	b.n	8004ed4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e74:	f7ff fde6 	bl	8004a44 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b05      	cmp	r3, #5
 8004e80:	d928      	bls.n	8004ed4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e246      	b.n	8005322 <HAL_DMA_Init+0x646>
 8004e94:	40020010 	.word	0x40020010
 8004e98:	40020028 	.word	0x40020028
 8004e9c:	40020040 	.word	0x40020040
 8004ea0:	40020058 	.word	0x40020058
 8004ea4:	40020070 	.word	0x40020070
 8004ea8:	40020088 	.word	0x40020088
 8004eac:	400200a0 	.word	0x400200a0
 8004eb0:	400200b8 	.word	0x400200b8
 8004eb4:	40020410 	.word	0x40020410
 8004eb8:	40020428 	.word	0x40020428
 8004ebc:	40020440 	.word	0x40020440
 8004ec0:	40020458 	.word	0x40020458
 8004ec4:	40020470 	.word	0x40020470
 8004ec8:	40020488 	.word	0x40020488
 8004ecc:	400204a0 	.word	0x400204a0
 8004ed0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1c8      	bne.n	8004e74 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4b83      	ldr	r3, [pc, #524]	; (80050fc <HAL_DMA_Init+0x420>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004efa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f06:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f12:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2b04      	cmp	r3, #4
 8004f26:	d107      	bne.n	8004f38 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	4313      	orrs	r3, r2
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004f38:	4b71      	ldr	r3, [pc, #452]	; (8005100 <HAL_DMA_Init+0x424>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b71      	ldr	r3, [pc, #452]	; (8005104 <HAL_DMA_Init+0x428>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f44:	d328      	bcc.n	8004f98 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b28      	cmp	r3, #40	; 0x28
 8004f4c:	d903      	bls.n	8004f56 <HAL_DMA_Init+0x27a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b2e      	cmp	r3, #46	; 0x2e
 8004f54:	d917      	bls.n	8004f86 <HAL_DMA_Init+0x2aa>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f5c:	d903      	bls.n	8004f66 <HAL_DMA_Init+0x28a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b42      	cmp	r3, #66	; 0x42
 8004f64:	d90f      	bls.n	8004f86 <HAL_DMA_Init+0x2aa>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b46      	cmp	r3, #70	; 0x46
 8004f6c:	d903      	bls.n	8004f76 <HAL_DMA_Init+0x29a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b48      	cmp	r3, #72	; 0x48
 8004f74:	d907      	bls.n	8004f86 <HAL_DMA_Init+0x2aa>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b4e      	cmp	r3, #78	; 0x4e
 8004f7c:	d905      	bls.n	8004f8a <HAL_DMA_Init+0x2ae>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b52      	cmp	r3, #82	; 0x52
 8004f84:	d801      	bhi.n	8004f8a <HAL_DMA_Init+0x2ae>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <HAL_DMA_Init+0x2b0>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f96:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	695b      	ldr	r3, [r3, #20]
 8004fa6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f023 0307 	bic.w	r3, r3, #7
 8004fae:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d117      	bne.n	8004ff2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f002 fb4b 	bl	8007670 <DMA_CheckFifoParam>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2240      	movs	r2, #64	; 0x40
 8004fe4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e197      	b.n	8005322 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f002 fa86 	bl	800750c <DMA_CalcBaseAndBitshift>
 8005000:	4603      	mov	r3, r0
 8005002:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	223f      	movs	r2, #63	; 0x3f
 800500e:	409a      	lsls	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	609a      	str	r2, [r3, #8]
 8005014:	e0cd      	b.n	80051b2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a3b      	ldr	r2, [pc, #236]	; (8005108 <HAL_DMA_Init+0x42c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d022      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a39      	ldr	r2, [pc, #228]	; (800510c <HAL_DMA_Init+0x430>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d01d      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a38      	ldr	r2, [pc, #224]	; (8005110 <HAL_DMA_Init+0x434>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d018      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a36      	ldr	r2, [pc, #216]	; (8005114 <HAL_DMA_Init+0x438>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a35      	ldr	r2, [pc, #212]	; (8005118 <HAL_DMA_Init+0x43c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a33      	ldr	r2, [pc, #204]	; (800511c <HAL_DMA_Init+0x440>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a32      	ldr	r2, [pc, #200]	; (8005120 <HAL_DMA_Init+0x444>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_DMA_Init+0x38a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a30      	ldr	r2, [pc, #192]	; (8005124 <HAL_DMA_Init+0x448>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d101      	bne.n	800506a <HAL_DMA_Init+0x38e>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <HAL_DMA_Init+0x390>
 800506a:	2300      	movs	r3, #0
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8097 	beq.w	80051a0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a24      	ldr	r2, [pc, #144]	; (8005108 <HAL_DMA_Init+0x42c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d021      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a22      	ldr	r2, [pc, #136]	; (800510c <HAL_DMA_Init+0x430>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01c      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a21      	ldr	r2, [pc, #132]	; (8005110 <HAL_DMA_Init+0x434>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d017      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <HAL_DMA_Init+0x438>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d012      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <HAL_DMA_Init+0x43c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00d      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1c      	ldr	r2, [pc, #112]	; (800511c <HAL_DMA_Init+0x440>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d008      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <HAL_DMA_Init+0x444>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <HAL_DMA_Init+0x3e4>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a19      	ldr	r2, [pc, #100]	; (8005124 <HAL_DMA_Init+0x448>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4b12      	ldr	r3, [pc, #72]	; (8005128 <HAL_DMA_Init+0x44c>)
 80050de:	4013      	ands	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b40      	cmp	r3, #64	; 0x40
 80050e8:	d020      	beq.n	800512c <HAL_DMA_Init+0x450>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d102      	bne.n	80050f8 <HAL_DMA_Init+0x41c>
 80050f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050f6:	e01a      	b.n	800512e <HAL_DMA_Init+0x452>
 80050f8:	2300      	movs	r3, #0
 80050fa:	e018      	b.n	800512e <HAL_DMA_Init+0x452>
 80050fc:	fe10803f 	.word	0xfe10803f
 8005100:	5c001000 	.word	0x5c001000
 8005104:	ffff0000 	.word	0xffff0000
 8005108:	58025408 	.word	0x58025408
 800510c:	5802541c 	.word	0x5802541c
 8005110:	58025430 	.word	0x58025430
 8005114:	58025444 	.word	0x58025444
 8005118:	58025458 	.word	0x58025458
 800511c:	5802546c 	.word	0x5802546c
 8005120:	58025480 	.word	0x58025480
 8005124:	58025494 	.word	0x58025494
 8005128:	fffe000f 	.word	0xfffe000f
 800512c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68d2      	ldr	r2, [r2, #12]
 8005132:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005134:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800513c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005144:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800514c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800515c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	4b6e      	ldr	r3, [pc, #440]	; (800532c <HAL_DMA_Init+0x650>)
 8005174:	4413      	add	r3, r2
 8005176:	4a6e      	ldr	r2, [pc, #440]	; (8005330 <HAL_DMA_Init+0x654>)
 8005178:	fba2 2303 	umull	r2, r3, r2, r3
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	009a      	lsls	r2, r3, #2
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f002 f9c1 	bl	800750c <DMA_CalcBaseAndBitshift>
 800518a:	4603      	mov	r3, r0
 800518c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2201      	movs	r2, #1
 8005198:	409a      	lsls	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	e008      	b.n	80051b2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2240      	movs	r2, #64	; 0x40
 80051a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2203      	movs	r2, #3
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e0b7      	b.n	8005322 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a5f      	ldr	r2, [pc, #380]	; (8005334 <HAL_DMA_Init+0x658>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d072      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a5d      	ldr	r2, [pc, #372]	; (8005338 <HAL_DMA_Init+0x65c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d06d      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a5c      	ldr	r2, [pc, #368]	; (800533c <HAL_DMA_Init+0x660>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d068      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a5a      	ldr	r2, [pc, #360]	; (8005340 <HAL_DMA_Init+0x664>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d063      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a59      	ldr	r2, [pc, #356]	; (8005344 <HAL_DMA_Init+0x668>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d05e      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a57      	ldr	r2, [pc, #348]	; (8005348 <HAL_DMA_Init+0x66c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d059      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a56      	ldr	r2, [pc, #344]	; (800534c <HAL_DMA_Init+0x670>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d054      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a54      	ldr	r2, [pc, #336]	; (8005350 <HAL_DMA_Init+0x674>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d04f      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a53      	ldr	r2, [pc, #332]	; (8005354 <HAL_DMA_Init+0x678>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d04a      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a51      	ldr	r2, [pc, #324]	; (8005358 <HAL_DMA_Init+0x67c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d045      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a50      	ldr	r2, [pc, #320]	; (800535c <HAL_DMA_Init+0x680>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d040      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a4e      	ldr	r2, [pc, #312]	; (8005360 <HAL_DMA_Init+0x684>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d03b      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a4d      	ldr	r2, [pc, #308]	; (8005364 <HAL_DMA_Init+0x688>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d036      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a4b      	ldr	r2, [pc, #300]	; (8005368 <HAL_DMA_Init+0x68c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d031      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a4a      	ldr	r2, [pc, #296]	; (800536c <HAL_DMA_Init+0x690>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d02c      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a48      	ldr	r2, [pc, #288]	; (8005370 <HAL_DMA_Init+0x694>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d027      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a47      	ldr	r2, [pc, #284]	; (8005374 <HAL_DMA_Init+0x698>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d022      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a45      	ldr	r2, [pc, #276]	; (8005378 <HAL_DMA_Init+0x69c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01d      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a44      	ldr	r2, [pc, #272]	; (800537c <HAL_DMA_Init+0x6a0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d018      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a42      	ldr	r2, [pc, #264]	; (8005380 <HAL_DMA_Init+0x6a4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a41      	ldr	r2, [pc, #260]	; (8005384 <HAL_DMA_Init+0x6a8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a3f      	ldr	r2, [pc, #252]	; (8005388 <HAL_DMA_Init+0x6ac>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a3e      	ldr	r2, [pc, #248]	; (800538c <HAL_DMA_Init+0x6b0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_DMA_Init+0x5c6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a3c      	ldr	r2, [pc, #240]	; (8005390 <HAL_DMA_Init+0x6b4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d101      	bne.n	80052a6 <HAL_DMA_Init+0x5ca>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_DMA_Init+0x5cc>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d032      	beq.n	8005312 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f002 fa5b 	bl	8007768 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b80      	cmp	r3, #128	; 0x80
 80052b8:	d102      	bne.n	80052c0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052d4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d010      	beq.n	8005300 <HAL_DMA_Init+0x624>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d80c      	bhi.n	8005300 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f002 fad8 	bl	800789c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	e008      	b.n	8005312 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	a7fdabf8 	.word	0xa7fdabf8
 8005330:	cccccccd 	.word	0xcccccccd
 8005334:	40020010 	.word	0x40020010
 8005338:	40020028 	.word	0x40020028
 800533c:	40020040 	.word	0x40020040
 8005340:	40020058 	.word	0x40020058
 8005344:	40020070 	.word	0x40020070
 8005348:	40020088 	.word	0x40020088
 800534c:	400200a0 	.word	0x400200a0
 8005350:	400200b8 	.word	0x400200b8
 8005354:	40020410 	.word	0x40020410
 8005358:	40020428 	.word	0x40020428
 800535c:	40020440 	.word	0x40020440
 8005360:	40020458 	.word	0x40020458
 8005364:	40020470 	.word	0x40020470
 8005368:	40020488 	.word	0x40020488
 800536c:	400204a0 	.word	0x400204a0
 8005370:	400204b8 	.word	0x400204b8
 8005374:	58025408 	.word	0x58025408
 8005378:	5802541c 	.word	0x5802541c
 800537c:	58025430 	.word	0x58025430
 8005380:	58025444 	.word	0x58025444
 8005384:	58025458 	.word	0x58025458
 8005388:	5802546c 	.word	0x5802546c
 800538c:	58025480 	.word	0x58025480
 8005390:	58025494 	.word	0x58025494

08005394 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e226      	b.n	80057fe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_DMA_Start_IT+0x2a>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e21f      	b.n	80057fe <HAL_DMA_Start_IT+0x46a>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f040 820a 	bne.w	80057e8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a68      	ldr	r2, [pc, #416]	; (8005588 <HAL_DMA_Start_IT+0x1f4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d04a      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a66      	ldr	r2, [pc, #408]	; (800558c <HAL_DMA_Start_IT+0x1f8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d045      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a65      	ldr	r2, [pc, #404]	; (8005590 <HAL_DMA_Start_IT+0x1fc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d040      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a63      	ldr	r2, [pc, #396]	; (8005594 <HAL_DMA_Start_IT+0x200>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d03b      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a62      	ldr	r2, [pc, #392]	; (8005598 <HAL_DMA_Start_IT+0x204>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d036      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a60      	ldr	r2, [pc, #384]	; (800559c <HAL_DMA_Start_IT+0x208>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d031      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a5f      	ldr	r2, [pc, #380]	; (80055a0 <HAL_DMA_Start_IT+0x20c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d02c      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a5d      	ldr	r2, [pc, #372]	; (80055a4 <HAL_DMA_Start_IT+0x210>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d027      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a5c      	ldr	r2, [pc, #368]	; (80055a8 <HAL_DMA_Start_IT+0x214>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d022      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a5a      	ldr	r2, [pc, #360]	; (80055ac <HAL_DMA_Start_IT+0x218>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01d      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a59      	ldr	r2, [pc, #356]	; (80055b0 <HAL_DMA_Start_IT+0x21c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a57      	ldr	r2, [pc, #348]	; (80055b4 <HAL_DMA_Start_IT+0x220>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a56      	ldr	r2, [pc, #344]	; (80055b8 <HAL_DMA_Start_IT+0x224>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a54      	ldr	r2, [pc, #336]	; (80055bc <HAL_DMA_Start_IT+0x228>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d009      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a53      	ldr	r2, [pc, #332]	; (80055c0 <HAL_DMA_Start_IT+0x22c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <HAL_DMA_Start_IT+0xee>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a51      	ldr	r2, [pc, #324]	; (80055c4 <HAL_DMA_Start_IT+0x230>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d108      	bne.n	8005494 <HAL_DMA_Start_IT+0x100>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0201 	bic.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	e007      	b.n	80054a4 <HAL_DMA_Start_IT+0x110>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0201 	bic.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f001 fe82 	bl	80071b4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a34      	ldr	r2, [pc, #208]	; (8005588 <HAL_DMA_Start_IT+0x1f4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d04a      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a33      	ldr	r2, [pc, #204]	; (800558c <HAL_DMA_Start_IT+0x1f8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d045      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a31      	ldr	r2, [pc, #196]	; (8005590 <HAL_DMA_Start_IT+0x1fc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d040      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a30      	ldr	r2, [pc, #192]	; (8005594 <HAL_DMA_Start_IT+0x200>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d03b      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2e      	ldr	r2, [pc, #184]	; (8005598 <HAL_DMA_Start_IT+0x204>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d036      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2d      	ldr	r2, [pc, #180]	; (800559c <HAL_DMA_Start_IT+0x208>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d031      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2b      	ldr	r2, [pc, #172]	; (80055a0 <HAL_DMA_Start_IT+0x20c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d02c      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2a      	ldr	r2, [pc, #168]	; (80055a4 <HAL_DMA_Start_IT+0x210>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d027      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a28      	ldr	r2, [pc, #160]	; (80055a8 <HAL_DMA_Start_IT+0x214>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d022      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a27      	ldr	r2, [pc, #156]	; (80055ac <HAL_DMA_Start_IT+0x218>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d01d      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <HAL_DMA_Start_IT+0x21c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d018      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a24      	ldr	r2, [pc, #144]	; (80055b4 <HAL_DMA_Start_IT+0x220>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a22      	ldr	r2, [pc, #136]	; (80055b8 <HAL_DMA_Start_IT+0x224>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00e      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a21      	ldr	r2, [pc, #132]	; (80055bc <HAL_DMA_Start_IT+0x228>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d009      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1f      	ldr	r2, [pc, #124]	; (80055c0 <HAL_DMA_Start_IT+0x22c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <HAL_DMA_Start_IT+0x1bc>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a1e      	ldr	r2, [pc, #120]	; (80055c4 <HAL_DMA_Start_IT+0x230>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d101      	bne.n	8005554 <HAL_DMA_Start_IT+0x1c0>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <HAL_DMA_Start_IT+0x1c2>
 8005554:	2300      	movs	r3, #0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d036      	beq.n	80055c8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f023 021e 	bic.w	r2, r3, #30
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0216 	orr.w	r2, r2, #22
 800556c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d03e      	beq.n	80055f4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0208 	orr.w	r2, r2, #8
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e035      	b.n	80055f4 <HAL_DMA_Start_IT+0x260>
 8005588:	40020010 	.word	0x40020010
 800558c:	40020028 	.word	0x40020028
 8005590:	40020040 	.word	0x40020040
 8005594:	40020058 	.word	0x40020058
 8005598:	40020070 	.word	0x40020070
 800559c:	40020088 	.word	0x40020088
 80055a0:	400200a0 	.word	0x400200a0
 80055a4:	400200b8 	.word	0x400200b8
 80055a8:	40020410 	.word	0x40020410
 80055ac:	40020428 	.word	0x40020428
 80055b0:	40020440 	.word	0x40020440
 80055b4:	40020458 	.word	0x40020458
 80055b8:	40020470 	.word	0x40020470
 80055bc:	40020488 	.word	0x40020488
 80055c0:	400204a0 	.word	0x400204a0
 80055c4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f023 020e 	bic.w	r2, r3, #14
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 020a 	orr.w	r2, r2, #10
 80055da:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0204 	orr.w	r2, r2, #4
 80055f2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a83      	ldr	r2, [pc, #524]	; (8005808 <HAL_DMA_Start_IT+0x474>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d072      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a82      	ldr	r2, [pc, #520]	; (800580c <HAL_DMA_Start_IT+0x478>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d06d      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a80      	ldr	r2, [pc, #512]	; (8005810 <HAL_DMA_Start_IT+0x47c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d068      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a7f      	ldr	r2, [pc, #508]	; (8005814 <HAL_DMA_Start_IT+0x480>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d063      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a7d      	ldr	r2, [pc, #500]	; (8005818 <HAL_DMA_Start_IT+0x484>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d05e      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a7c      	ldr	r2, [pc, #496]	; (800581c <HAL_DMA_Start_IT+0x488>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d059      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a7a      	ldr	r2, [pc, #488]	; (8005820 <HAL_DMA_Start_IT+0x48c>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d054      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a79      	ldr	r2, [pc, #484]	; (8005824 <HAL_DMA_Start_IT+0x490>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d04f      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a77      	ldr	r2, [pc, #476]	; (8005828 <HAL_DMA_Start_IT+0x494>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d04a      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a76      	ldr	r2, [pc, #472]	; (800582c <HAL_DMA_Start_IT+0x498>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d045      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a74      	ldr	r2, [pc, #464]	; (8005830 <HAL_DMA_Start_IT+0x49c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d040      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a73      	ldr	r2, [pc, #460]	; (8005834 <HAL_DMA_Start_IT+0x4a0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d03b      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a71      	ldr	r2, [pc, #452]	; (8005838 <HAL_DMA_Start_IT+0x4a4>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d036      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a70      	ldr	r2, [pc, #448]	; (800583c <HAL_DMA_Start_IT+0x4a8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d031      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a6e      	ldr	r2, [pc, #440]	; (8005840 <HAL_DMA_Start_IT+0x4ac>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d02c      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a6d      	ldr	r2, [pc, #436]	; (8005844 <HAL_DMA_Start_IT+0x4b0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d027      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a6b      	ldr	r2, [pc, #428]	; (8005848 <HAL_DMA_Start_IT+0x4b4>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d022      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a6a      	ldr	r2, [pc, #424]	; (800584c <HAL_DMA_Start_IT+0x4b8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d01d      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a68      	ldr	r2, [pc, #416]	; (8005850 <HAL_DMA_Start_IT+0x4bc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d018      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a67      	ldr	r2, [pc, #412]	; (8005854 <HAL_DMA_Start_IT+0x4c0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d013      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a65      	ldr	r2, [pc, #404]	; (8005858 <HAL_DMA_Start_IT+0x4c4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00e      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a64      	ldr	r2, [pc, #400]	; (800585c <HAL_DMA_Start_IT+0x4c8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d009      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a62      	ldr	r2, [pc, #392]	; (8005860 <HAL_DMA_Start_IT+0x4cc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <HAL_DMA_Start_IT+0x350>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a61      	ldr	r2, [pc, #388]	; (8005864 <HAL_DMA_Start_IT+0x4d0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d101      	bne.n	80056e8 <HAL_DMA_Start_IT+0x354>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <HAL_DMA_Start_IT+0x356>
 80056e8:	2300      	movs	r3, #0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d01a      	beq.n	8005724 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d007      	beq.n	800570c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800570a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800571e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005722:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a37      	ldr	r2, [pc, #220]	; (8005808 <HAL_DMA_Start_IT+0x474>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d04a      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a36      	ldr	r2, [pc, #216]	; (800580c <HAL_DMA_Start_IT+0x478>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d045      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a34      	ldr	r2, [pc, #208]	; (8005810 <HAL_DMA_Start_IT+0x47c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d040      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a33      	ldr	r2, [pc, #204]	; (8005814 <HAL_DMA_Start_IT+0x480>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d03b      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a31      	ldr	r2, [pc, #196]	; (8005818 <HAL_DMA_Start_IT+0x484>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d036      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a30      	ldr	r2, [pc, #192]	; (800581c <HAL_DMA_Start_IT+0x488>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d031      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2e      	ldr	r2, [pc, #184]	; (8005820 <HAL_DMA_Start_IT+0x48c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d02c      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a2d      	ldr	r2, [pc, #180]	; (8005824 <HAL_DMA_Start_IT+0x490>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d027      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2b      	ldr	r2, [pc, #172]	; (8005828 <HAL_DMA_Start_IT+0x494>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d022      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2a      	ldr	r2, [pc, #168]	; (800582c <HAL_DMA_Start_IT+0x498>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d01d      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a28      	ldr	r2, [pc, #160]	; (8005830 <HAL_DMA_Start_IT+0x49c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a27      	ldr	r2, [pc, #156]	; (8005834 <HAL_DMA_Start_IT+0x4a0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a25      	ldr	r2, [pc, #148]	; (8005838 <HAL_DMA_Start_IT+0x4a4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a24      	ldr	r2, [pc, #144]	; (800583c <HAL_DMA_Start_IT+0x4a8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a22      	ldr	r2, [pc, #136]	; (8005840 <HAL_DMA_Start_IT+0x4ac>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_DMA_Start_IT+0x430>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a21      	ldr	r2, [pc, #132]	; (8005844 <HAL_DMA_Start_IT+0x4b0>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d108      	bne.n	80057d6 <HAL_DMA_Start_IT+0x442>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e012      	b.n	80057fc <HAL_DMA_Start_IT+0x468>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	e009      	b.n	80057fc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40020010 	.word	0x40020010
 800580c:	40020028 	.word	0x40020028
 8005810:	40020040 	.word	0x40020040
 8005814:	40020058 	.word	0x40020058
 8005818:	40020070 	.word	0x40020070
 800581c:	40020088 	.word	0x40020088
 8005820:	400200a0 	.word	0x400200a0
 8005824:	400200b8 	.word	0x400200b8
 8005828:	40020410 	.word	0x40020410
 800582c:	40020428 	.word	0x40020428
 8005830:	40020440 	.word	0x40020440
 8005834:	40020458 	.word	0x40020458
 8005838:	40020470 	.word	0x40020470
 800583c:	40020488 	.word	0x40020488
 8005840:	400204a0 	.word	0x400204a0
 8005844:	400204b8 	.word	0x400204b8
 8005848:	58025408 	.word	0x58025408
 800584c:	5802541c 	.word	0x5802541c
 8005850:	58025430 	.word	0x58025430
 8005854:	58025444 	.word	0x58025444
 8005858:	58025458 	.word	0x58025458
 800585c:	5802546c 	.word	0x5802546c
 8005860:	58025480 	.word	0x58025480
 8005864:	58025494 	.word	0x58025494

08005868 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005870:	f7ff f8e8 	bl	8004a44 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e2dc      	b.n	8005e3a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d008      	beq.n	800589e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2280      	movs	r2, #128	; 0x80
 8005890:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e2cd      	b.n	8005e3a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a76      	ldr	r2, [pc, #472]	; (8005a7c <HAL_DMA_Abort+0x214>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d04a      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a74      	ldr	r2, [pc, #464]	; (8005a80 <HAL_DMA_Abort+0x218>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d045      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a73      	ldr	r2, [pc, #460]	; (8005a84 <HAL_DMA_Abort+0x21c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d040      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a71      	ldr	r2, [pc, #452]	; (8005a88 <HAL_DMA_Abort+0x220>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d03b      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a70      	ldr	r2, [pc, #448]	; (8005a8c <HAL_DMA_Abort+0x224>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d036      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a6e      	ldr	r2, [pc, #440]	; (8005a90 <HAL_DMA_Abort+0x228>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d031      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a6d      	ldr	r2, [pc, #436]	; (8005a94 <HAL_DMA_Abort+0x22c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d02c      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a6b      	ldr	r2, [pc, #428]	; (8005a98 <HAL_DMA_Abort+0x230>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d027      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a6a      	ldr	r2, [pc, #424]	; (8005a9c <HAL_DMA_Abort+0x234>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d022      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a68      	ldr	r2, [pc, #416]	; (8005aa0 <HAL_DMA_Abort+0x238>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01d      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a67      	ldr	r2, [pc, #412]	; (8005aa4 <HAL_DMA_Abort+0x23c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d018      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a65      	ldr	r2, [pc, #404]	; (8005aa8 <HAL_DMA_Abort+0x240>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a64      	ldr	r2, [pc, #400]	; (8005aac <HAL_DMA_Abort+0x244>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00e      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a62      	ldr	r2, [pc, #392]	; (8005ab0 <HAL_DMA_Abort+0x248>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d009      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a61      	ldr	r2, [pc, #388]	; (8005ab4 <HAL_DMA_Abort+0x24c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_DMA_Abort+0xd6>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a5f      	ldr	r2, [pc, #380]	; (8005ab8 <HAL_DMA_Abort+0x250>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d101      	bne.n	8005942 <HAL_DMA_Abort+0xda>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <HAL_DMA_Abort+0xdc>
 8005942:	2300      	movs	r3, #0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d013      	beq.n	8005970 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 021e 	bic.w	r2, r2, #30
 8005956:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695a      	ldr	r2, [r3, #20]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005966:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e00a      	b.n	8005986 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 020e 	bic.w	r2, r2, #14
 800597e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a3c      	ldr	r2, [pc, #240]	; (8005a7c <HAL_DMA_Abort+0x214>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d072      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a3a      	ldr	r2, [pc, #232]	; (8005a80 <HAL_DMA_Abort+0x218>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d06d      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a39      	ldr	r2, [pc, #228]	; (8005a84 <HAL_DMA_Abort+0x21c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d068      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a37      	ldr	r2, [pc, #220]	; (8005a88 <HAL_DMA_Abort+0x220>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d063      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a36      	ldr	r2, [pc, #216]	; (8005a8c <HAL_DMA_Abort+0x224>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d05e      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a34      	ldr	r2, [pc, #208]	; (8005a90 <HAL_DMA_Abort+0x228>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d059      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a33      	ldr	r2, [pc, #204]	; (8005a94 <HAL_DMA_Abort+0x22c>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d054      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a31      	ldr	r2, [pc, #196]	; (8005a98 <HAL_DMA_Abort+0x230>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d04f      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a30      	ldr	r2, [pc, #192]	; (8005a9c <HAL_DMA_Abort+0x234>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d04a      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2e      	ldr	r2, [pc, #184]	; (8005aa0 <HAL_DMA_Abort+0x238>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d045      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2d      	ldr	r2, [pc, #180]	; (8005aa4 <HAL_DMA_Abort+0x23c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d040      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <HAL_DMA_Abort+0x240>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d03b      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2a      	ldr	r2, [pc, #168]	; (8005aac <HAL_DMA_Abort+0x244>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d036      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a28      	ldr	r2, [pc, #160]	; (8005ab0 <HAL_DMA_Abort+0x248>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d031      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <HAL_DMA_Abort+0x24c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d02c      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <HAL_DMA_Abort+0x250>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d027      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a24      	ldr	r2, [pc, #144]	; (8005abc <HAL_DMA_Abort+0x254>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d022      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <HAL_DMA_Abort+0x258>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01d      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a21      	ldr	r2, [pc, #132]	; (8005ac4 <HAL_DMA_Abort+0x25c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <HAL_DMA_Abort+0x260>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <HAL_DMA_Abort+0x264>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <HAL_DMA_Abort+0x268>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1b      	ldr	r2, [pc, #108]	; (8005ad4 <HAL_DMA_Abort+0x26c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_DMA_Abort+0x20e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a19      	ldr	r2, [pc, #100]	; (8005ad8 <HAL_DMA_Abort+0x270>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d132      	bne.n	8005adc <HAL_DMA_Abort+0x274>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e031      	b.n	8005ade <HAL_DMA_Abort+0x276>
 8005a7a:	bf00      	nop
 8005a7c:	40020010 	.word	0x40020010
 8005a80:	40020028 	.word	0x40020028
 8005a84:	40020040 	.word	0x40020040
 8005a88:	40020058 	.word	0x40020058
 8005a8c:	40020070 	.word	0x40020070
 8005a90:	40020088 	.word	0x40020088
 8005a94:	400200a0 	.word	0x400200a0
 8005a98:	400200b8 	.word	0x400200b8
 8005a9c:	40020410 	.word	0x40020410
 8005aa0:	40020428 	.word	0x40020428
 8005aa4:	40020440 	.word	0x40020440
 8005aa8:	40020458 	.word	0x40020458
 8005aac:	40020470 	.word	0x40020470
 8005ab0:	40020488 	.word	0x40020488
 8005ab4:	400204a0 	.word	0x400204a0
 8005ab8:	400204b8 	.word	0x400204b8
 8005abc:	58025408 	.word	0x58025408
 8005ac0:	5802541c 	.word	0x5802541c
 8005ac4:	58025430 	.word	0x58025430
 8005ac8:	58025444 	.word	0x58025444
 8005acc:	58025458 	.word	0x58025458
 8005ad0:	5802546c 	.word	0x5802546c
 8005ad4:	58025480 	.word	0x58025480
 8005ad8:	58025494 	.word	0x58025494
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a6d      	ldr	r2, [pc, #436]	; (8005cac <HAL_DMA_Abort+0x444>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d04a      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a6b      	ldr	r2, [pc, #428]	; (8005cb0 <HAL_DMA_Abort+0x448>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d045      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a6a      	ldr	r2, [pc, #424]	; (8005cb4 <HAL_DMA_Abort+0x44c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d040      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a68      	ldr	r2, [pc, #416]	; (8005cb8 <HAL_DMA_Abort+0x450>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d03b      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a67      	ldr	r2, [pc, #412]	; (8005cbc <HAL_DMA_Abort+0x454>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d036      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a65      	ldr	r2, [pc, #404]	; (8005cc0 <HAL_DMA_Abort+0x458>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d031      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a64      	ldr	r2, [pc, #400]	; (8005cc4 <HAL_DMA_Abort+0x45c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d02c      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a62      	ldr	r2, [pc, #392]	; (8005cc8 <HAL_DMA_Abort+0x460>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d027      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a61      	ldr	r2, [pc, #388]	; (8005ccc <HAL_DMA_Abort+0x464>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d022      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a5f      	ldr	r2, [pc, #380]	; (8005cd0 <HAL_DMA_Abort+0x468>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d01d      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a5e      	ldr	r2, [pc, #376]	; (8005cd4 <HAL_DMA_Abort+0x46c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d018      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a5c      	ldr	r2, [pc, #368]	; (8005cd8 <HAL_DMA_Abort+0x470>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d013      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a5b      	ldr	r2, [pc, #364]	; (8005cdc <HAL_DMA_Abort+0x474>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00e      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a59      	ldr	r2, [pc, #356]	; (8005ce0 <HAL_DMA_Abort+0x478>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d009      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a58      	ldr	r2, [pc, #352]	; (8005ce4 <HAL_DMA_Abort+0x47c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d004      	beq.n	8005b92 <HAL_DMA_Abort+0x32a>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a56      	ldr	r2, [pc, #344]	; (8005ce8 <HAL_DMA_Abort+0x480>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d108      	bne.n	8005ba4 <HAL_DMA_Abort+0x33c>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	e007      	b.n	8005bb4 <HAL_DMA_Abort+0x34c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bb4:	e013      	b.n	8005bde <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bb6:	f7fe ff45 	bl	8004a44 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b05      	cmp	r3, #5
 8005bc2:	d90c      	bls.n	8005bde <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2203      	movs	r2, #3
 8005bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e12d      	b.n	8005e3a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e5      	bne.n	8005bb6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a2f      	ldr	r2, [pc, #188]	; (8005cac <HAL_DMA_Abort+0x444>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d04a      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a2d      	ldr	r2, [pc, #180]	; (8005cb0 <HAL_DMA_Abort+0x448>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d045      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a2c      	ldr	r2, [pc, #176]	; (8005cb4 <HAL_DMA_Abort+0x44c>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d040      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a2a      	ldr	r2, [pc, #168]	; (8005cb8 <HAL_DMA_Abort+0x450>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d03b      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a29      	ldr	r2, [pc, #164]	; (8005cbc <HAL_DMA_Abort+0x454>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d036      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a27      	ldr	r2, [pc, #156]	; (8005cc0 <HAL_DMA_Abort+0x458>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d031      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a26      	ldr	r2, [pc, #152]	; (8005cc4 <HAL_DMA_Abort+0x45c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d02c      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a24      	ldr	r2, [pc, #144]	; (8005cc8 <HAL_DMA_Abort+0x460>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d027      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a23      	ldr	r2, [pc, #140]	; (8005ccc <HAL_DMA_Abort+0x464>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d022      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a21      	ldr	r2, [pc, #132]	; (8005cd0 <HAL_DMA_Abort+0x468>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d01d      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a20      	ldr	r2, [pc, #128]	; (8005cd4 <HAL_DMA_Abort+0x46c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d018      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a1e      	ldr	r2, [pc, #120]	; (8005cd8 <HAL_DMA_Abort+0x470>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d013      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a1d      	ldr	r2, [pc, #116]	; (8005cdc <HAL_DMA_Abort+0x474>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00e      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a1b      	ldr	r2, [pc, #108]	; (8005ce0 <HAL_DMA_Abort+0x478>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d009      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ce4 <HAL_DMA_Abort+0x47c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d004      	beq.n	8005c8a <HAL_DMA_Abort+0x422>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a18      	ldr	r2, [pc, #96]	; (8005ce8 <HAL_DMA_Abort+0x480>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d101      	bne.n	8005c8e <HAL_DMA_Abort+0x426>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <HAL_DMA_Abort+0x428>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02b      	beq.n	8005cec <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c98:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	223f      	movs	r2, #63	; 0x3f
 8005ca4:	409a      	lsls	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	609a      	str	r2, [r3, #8]
 8005caa:	e02a      	b.n	8005d02 <HAL_DMA_Abort+0x49a>
 8005cac:	40020010 	.word	0x40020010
 8005cb0:	40020028 	.word	0x40020028
 8005cb4:	40020040 	.word	0x40020040
 8005cb8:	40020058 	.word	0x40020058
 8005cbc:	40020070 	.word	0x40020070
 8005cc0:	40020088 	.word	0x40020088
 8005cc4:	400200a0 	.word	0x400200a0
 8005cc8:	400200b8 	.word	0x400200b8
 8005ccc:	40020410 	.word	0x40020410
 8005cd0:	40020428 	.word	0x40020428
 8005cd4:	40020440 	.word	0x40020440
 8005cd8:	40020458 	.word	0x40020458
 8005cdc:	40020470 	.word	0x40020470
 8005ce0:	40020488 	.word	0x40020488
 8005ce4:	400204a0 	.word	0x400204a0
 8005ce8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf6:	f003 031f 	and.w	r3, r3, #31
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a4f      	ldr	r2, [pc, #316]	; (8005e44 <HAL_DMA_Abort+0x5dc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d072      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a4d      	ldr	r2, [pc, #308]	; (8005e48 <HAL_DMA_Abort+0x5e0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d06d      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a4c      	ldr	r2, [pc, #304]	; (8005e4c <HAL_DMA_Abort+0x5e4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d068      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a4a      	ldr	r2, [pc, #296]	; (8005e50 <HAL_DMA_Abort+0x5e8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d063      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a49      	ldr	r2, [pc, #292]	; (8005e54 <HAL_DMA_Abort+0x5ec>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d05e      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a47      	ldr	r2, [pc, #284]	; (8005e58 <HAL_DMA_Abort+0x5f0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d059      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a46      	ldr	r2, [pc, #280]	; (8005e5c <HAL_DMA_Abort+0x5f4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d054      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a44      	ldr	r2, [pc, #272]	; (8005e60 <HAL_DMA_Abort+0x5f8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d04f      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a43      	ldr	r2, [pc, #268]	; (8005e64 <HAL_DMA_Abort+0x5fc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d04a      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a41      	ldr	r2, [pc, #260]	; (8005e68 <HAL_DMA_Abort+0x600>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d045      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a40      	ldr	r2, [pc, #256]	; (8005e6c <HAL_DMA_Abort+0x604>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d040      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a3e      	ldr	r2, [pc, #248]	; (8005e70 <HAL_DMA_Abort+0x608>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d03b      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a3d      	ldr	r2, [pc, #244]	; (8005e74 <HAL_DMA_Abort+0x60c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d036      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a3b      	ldr	r2, [pc, #236]	; (8005e78 <HAL_DMA_Abort+0x610>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d031      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a3a      	ldr	r2, [pc, #232]	; (8005e7c <HAL_DMA_Abort+0x614>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d02c      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a38      	ldr	r2, [pc, #224]	; (8005e80 <HAL_DMA_Abort+0x618>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d027      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a37      	ldr	r2, [pc, #220]	; (8005e84 <HAL_DMA_Abort+0x61c>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d022      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a35      	ldr	r2, [pc, #212]	; (8005e88 <HAL_DMA_Abort+0x620>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d01d      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a34      	ldr	r2, [pc, #208]	; (8005e8c <HAL_DMA_Abort+0x624>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d018      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a32      	ldr	r2, [pc, #200]	; (8005e90 <HAL_DMA_Abort+0x628>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a31      	ldr	r2, [pc, #196]	; (8005e94 <HAL_DMA_Abort+0x62c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00e      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a2f      	ldr	r2, [pc, #188]	; (8005e98 <HAL_DMA_Abort+0x630>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d009      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2e      	ldr	r2, [pc, #184]	; (8005e9c <HAL_DMA_Abort+0x634>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d004      	beq.n	8005df2 <HAL_DMA_Abort+0x58a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a2c      	ldr	r2, [pc, #176]	; (8005ea0 <HAL_DMA_Abort+0x638>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <HAL_DMA_Abort+0x58e>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <HAL_DMA_Abort+0x590>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d015      	beq.n	8005e28 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e04:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00c      	beq.n	8005e28 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e1c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e26:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40020010 	.word	0x40020010
 8005e48:	40020028 	.word	0x40020028
 8005e4c:	40020040 	.word	0x40020040
 8005e50:	40020058 	.word	0x40020058
 8005e54:	40020070 	.word	0x40020070
 8005e58:	40020088 	.word	0x40020088
 8005e5c:	400200a0 	.word	0x400200a0
 8005e60:	400200b8 	.word	0x400200b8
 8005e64:	40020410 	.word	0x40020410
 8005e68:	40020428 	.word	0x40020428
 8005e6c:	40020440 	.word	0x40020440
 8005e70:	40020458 	.word	0x40020458
 8005e74:	40020470 	.word	0x40020470
 8005e78:	40020488 	.word	0x40020488
 8005e7c:	400204a0 	.word	0x400204a0
 8005e80:	400204b8 	.word	0x400204b8
 8005e84:	58025408 	.word	0x58025408
 8005e88:	5802541c 	.word	0x5802541c
 8005e8c:	58025430 	.word	0x58025430
 8005e90:	58025444 	.word	0x58025444
 8005e94:	58025458 	.word	0x58025458
 8005e98:	5802546c 	.word	0x5802546c
 8005e9c:	58025480 	.word	0x58025480
 8005ea0:	58025494 	.word	0x58025494

08005ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e205      	b.n	80062c2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d004      	beq.n	8005ecc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2280      	movs	r2, #128	; 0x80
 8005ec6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e1fa      	b.n	80062c2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a8c      	ldr	r2, [pc, #560]	; (8006104 <HAL_DMA_Abort_IT+0x260>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d04a      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a8b      	ldr	r2, [pc, #556]	; (8006108 <HAL_DMA_Abort_IT+0x264>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d045      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a89      	ldr	r2, [pc, #548]	; (800610c <HAL_DMA_Abort_IT+0x268>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d040      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a88      	ldr	r2, [pc, #544]	; (8006110 <HAL_DMA_Abort_IT+0x26c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d03b      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a86      	ldr	r2, [pc, #536]	; (8006114 <HAL_DMA_Abort_IT+0x270>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d036      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a85      	ldr	r2, [pc, #532]	; (8006118 <HAL_DMA_Abort_IT+0x274>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d031      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a83      	ldr	r2, [pc, #524]	; (800611c <HAL_DMA_Abort_IT+0x278>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d02c      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a82      	ldr	r2, [pc, #520]	; (8006120 <HAL_DMA_Abort_IT+0x27c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d027      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a80      	ldr	r2, [pc, #512]	; (8006124 <HAL_DMA_Abort_IT+0x280>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d022      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a7f      	ldr	r2, [pc, #508]	; (8006128 <HAL_DMA_Abort_IT+0x284>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d01d      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a7d      	ldr	r2, [pc, #500]	; (800612c <HAL_DMA_Abort_IT+0x288>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d018      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a7c      	ldr	r2, [pc, #496]	; (8006130 <HAL_DMA_Abort_IT+0x28c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d013      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a7a      	ldr	r2, [pc, #488]	; (8006134 <HAL_DMA_Abort_IT+0x290>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00e      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a79      	ldr	r2, [pc, #484]	; (8006138 <HAL_DMA_Abort_IT+0x294>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d009      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a77      	ldr	r2, [pc, #476]	; (800613c <HAL_DMA_Abort_IT+0x298>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d004      	beq.n	8005f6c <HAL_DMA_Abort_IT+0xc8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a76      	ldr	r2, [pc, #472]	; (8006140 <HAL_DMA_Abort_IT+0x29c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d101      	bne.n	8005f70 <HAL_DMA_Abort_IT+0xcc>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <HAL_DMA_Abort_IT+0xce>
 8005f70:	2300      	movs	r3, #0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d065      	beq.n	8006042 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2204      	movs	r2, #4
 8005f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a60      	ldr	r2, [pc, #384]	; (8006104 <HAL_DMA_Abort_IT+0x260>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d04a      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a5e      	ldr	r2, [pc, #376]	; (8006108 <HAL_DMA_Abort_IT+0x264>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d045      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a5d      	ldr	r2, [pc, #372]	; (800610c <HAL_DMA_Abort_IT+0x268>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d040      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a5b      	ldr	r2, [pc, #364]	; (8006110 <HAL_DMA_Abort_IT+0x26c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d03b      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a5a      	ldr	r2, [pc, #360]	; (8006114 <HAL_DMA_Abort_IT+0x270>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d036      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a58      	ldr	r2, [pc, #352]	; (8006118 <HAL_DMA_Abort_IT+0x274>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d031      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a57      	ldr	r2, [pc, #348]	; (800611c <HAL_DMA_Abort_IT+0x278>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d02c      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a55      	ldr	r2, [pc, #340]	; (8006120 <HAL_DMA_Abort_IT+0x27c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d027      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a54      	ldr	r2, [pc, #336]	; (8006124 <HAL_DMA_Abort_IT+0x280>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d022      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a52      	ldr	r2, [pc, #328]	; (8006128 <HAL_DMA_Abort_IT+0x284>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01d      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a51      	ldr	r2, [pc, #324]	; (800612c <HAL_DMA_Abort_IT+0x288>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d018      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a4f      	ldr	r2, [pc, #316]	; (8006130 <HAL_DMA_Abort_IT+0x28c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d013      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a4e      	ldr	r2, [pc, #312]	; (8006134 <HAL_DMA_Abort_IT+0x290>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00e      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a4c      	ldr	r2, [pc, #304]	; (8006138 <HAL_DMA_Abort_IT+0x294>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d009      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a4b      	ldr	r2, [pc, #300]	; (800613c <HAL_DMA_Abort_IT+0x298>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d004      	beq.n	800601e <HAL_DMA_Abort_IT+0x17a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a49      	ldr	r2, [pc, #292]	; (8006140 <HAL_DMA_Abort_IT+0x29c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d108      	bne.n	8006030 <HAL_DMA_Abort_IT+0x18c>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0201 	bic.w	r2, r2, #1
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e147      	b.n	80062c0 <HAL_DMA_Abort_IT+0x41c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0201 	bic.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e13e      	b.n	80062c0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f022 020e 	bic.w	r2, r2, #14
 8006050:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2b      	ldr	r2, [pc, #172]	; (8006104 <HAL_DMA_Abort_IT+0x260>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d04a      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a29      	ldr	r2, [pc, #164]	; (8006108 <HAL_DMA_Abort_IT+0x264>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d045      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a28      	ldr	r2, [pc, #160]	; (800610c <HAL_DMA_Abort_IT+0x268>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d040      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a26      	ldr	r2, [pc, #152]	; (8006110 <HAL_DMA_Abort_IT+0x26c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d03b      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a25      	ldr	r2, [pc, #148]	; (8006114 <HAL_DMA_Abort_IT+0x270>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d036      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a23      	ldr	r2, [pc, #140]	; (8006118 <HAL_DMA_Abort_IT+0x274>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d031      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a22      	ldr	r2, [pc, #136]	; (800611c <HAL_DMA_Abort_IT+0x278>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d02c      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a20      	ldr	r2, [pc, #128]	; (8006120 <HAL_DMA_Abort_IT+0x27c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d027      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <HAL_DMA_Abort_IT+0x280>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d022      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1d      	ldr	r2, [pc, #116]	; (8006128 <HAL_DMA_Abort_IT+0x284>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01d      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1c      	ldr	r2, [pc, #112]	; (800612c <HAL_DMA_Abort_IT+0x288>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d018      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1a      	ldr	r2, [pc, #104]	; (8006130 <HAL_DMA_Abort_IT+0x28c>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a19      	ldr	r2, [pc, #100]	; (8006134 <HAL_DMA_Abort_IT+0x290>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00e      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a17      	ldr	r2, [pc, #92]	; (8006138 <HAL_DMA_Abort_IT+0x294>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d009      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a16      	ldr	r2, [pc, #88]	; (800613c <HAL_DMA_Abort_IT+0x298>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d004      	beq.n	80060f2 <HAL_DMA_Abort_IT+0x24e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a14      	ldr	r2, [pc, #80]	; (8006140 <HAL_DMA_Abort_IT+0x29c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d128      	bne.n	8006144 <HAL_DMA_Abort_IT+0x2a0>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0201 	bic.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e027      	b.n	8006154 <HAL_DMA_Abort_IT+0x2b0>
 8006104:	40020010 	.word	0x40020010
 8006108:	40020028 	.word	0x40020028
 800610c:	40020040 	.word	0x40020040
 8006110:	40020058 	.word	0x40020058
 8006114:	40020070 	.word	0x40020070
 8006118:	40020088 	.word	0x40020088
 800611c:	400200a0 	.word	0x400200a0
 8006120:	400200b8 	.word	0x400200b8
 8006124:	40020410 	.word	0x40020410
 8006128:	40020428 	.word	0x40020428
 800612c:	40020440 	.word	0x40020440
 8006130:	40020458 	.word	0x40020458
 8006134:	40020470 	.word	0x40020470
 8006138:	40020488 	.word	0x40020488
 800613c:	400204a0 	.word	0x400204a0
 8006140:	400204b8 	.word	0x400204b8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0201 	bic.w	r2, r2, #1
 8006152:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a5c      	ldr	r2, [pc, #368]	; (80062cc <HAL_DMA_Abort_IT+0x428>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d072      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a5b      	ldr	r2, [pc, #364]	; (80062d0 <HAL_DMA_Abort_IT+0x42c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d06d      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a59      	ldr	r2, [pc, #356]	; (80062d4 <HAL_DMA_Abort_IT+0x430>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d068      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a58      	ldr	r2, [pc, #352]	; (80062d8 <HAL_DMA_Abort_IT+0x434>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d063      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a56      	ldr	r2, [pc, #344]	; (80062dc <HAL_DMA_Abort_IT+0x438>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d05e      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a55      	ldr	r2, [pc, #340]	; (80062e0 <HAL_DMA_Abort_IT+0x43c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d059      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a53      	ldr	r2, [pc, #332]	; (80062e4 <HAL_DMA_Abort_IT+0x440>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d054      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a52      	ldr	r2, [pc, #328]	; (80062e8 <HAL_DMA_Abort_IT+0x444>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d04f      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a50      	ldr	r2, [pc, #320]	; (80062ec <HAL_DMA_Abort_IT+0x448>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d04a      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a4f      	ldr	r2, [pc, #316]	; (80062f0 <HAL_DMA_Abort_IT+0x44c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d045      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a4d      	ldr	r2, [pc, #308]	; (80062f4 <HAL_DMA_Abort_IT+0x450>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d040      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a4c      	ldr	r2, [pc, #304]	; (80062f8 <HAL_DMA_Abort_IT+0x454>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d03b      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a4a      	ldr	r2, [pc, #296]	; (80062fc <HAL_DMA_Abort_IT+0x458>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d036      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a49      	ldr	r2, [pc, #292]	; (8006300 <HAL_DMA_Abort_IT+0x45c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d031      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a47      	ldr	r2, [pc, #284]	; (8006304 <HAL_DMA_Abort_IT+0x460>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d02c      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a46      	ldr	r2, [pc, #280]	; (8006308 <HAL_DMA_Abort_IT+0x464>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d027      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a44      	ldr	r2, [pc, #272]	; (800630c <HAL_DMA_Abort_IT+0x468>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d022      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a43      	ldr	r2, [pc, #268]	; (8006310 <HAL_DMA_Abort_IT+0x46c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d01d      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a41      	ldr	r2, [pc, #260]	; (8006314 <HAL_DMA_Abort_IT+0x470>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d018      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a40      	ldr	r2, [pc, #256]	; (8006318 <HAL_DMA_Abort_IT+0x474>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a3e      	ldr	r2, [pc, #248]	; (800631c <HAL_DMA_Abort_IT+0x478>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a3d      	ldr	r2, [pc, #244]	; (8006320 <HAL_DMA_Abort_IT+0x47c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a3b      	ldr	r2, [pc, #236]	; (8006324 <HAL_DMA_Abort_IT+0x480>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_DMA_Abort_IT+0x3a0>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a3a      	ldr	r2, [pc, #232]	; (8006328 <HAL_DMA_Abort_IT+0x484>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d101      	bne.n	8006248 <HAL_DMA_Abort_IT+0x3a4>
 8006244:	2301      	movs	r3, #1
 8006246:	e000      	b.n	800624a <HAL_DMA_Abort_IT+0x3a6>
 8006248:	2300      	movs	r3, #0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d028      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800625c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006262:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006268:	f003 031f 	and.w	r3, r3, #31
 800626c:	2201      	movs	r2, #1
 800626e:	409a      	lsls	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800627c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00c      	beq.n	80062a0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006294:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800629e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40020010 	.word	0x40020010
 80062d0:	40020028 	.word	0x40020028
 80062d4:	40020040 	.word	0x40020040
 80062d8:	40020058 	.word	0x40020058
 80062dc:	40020070 	.word	0x40020070
 80062e0:	40020088 	.word	0x40020088
 80062e4:	400200a0 	.word	0x400200a0
 80062e8:	400200b8 	.word	0x400200b8
 80062ec:	40020410 	.word	0x40020410
 80062f0:	40020428 	.word	0x40020428
 80062f4:	40020440 	.word	0x40020440
 80062f8:	40020458 	.word	0x40020458
 80062fc:	40020470 	.word	0x40020470
 8006300:	40020488 	.word	0x40020488
 8006304:	400204a0 	.word	0x400204a0
 8006308:	400204b8 	.word	0x400204b8
 800630c:	58025408 	.word	0x58025408
 8006310:	5802541c 	.word	0x5802541c
 8006314:	58025430 	.word	0x58025430
 8006318:	58025444 	.word	0x58025444
 800631c:	58025458 	.word	0x58025458
 8006320:	5802546c 	.word	0x5802546c
 8006324:	58025480 	.word	0x58025480
 8006328:	58025494 	.word	0x58025494

0800632c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	; 0x28
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006338:	4b67      	ldr	r3, [pc, #412]	; (80064d8 <HAL_DMA_IRQHandler+0x1ac>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a67      	ldr	r2, [pc, #412]	; (80064dc <HAL_DMA_IRQHandler+0x1b0>)
 800633e:	fba2 2303 	umull	r2, r3, r2, r3
 8006342:	0a9b      	lsrs	r3, r3, #10
 8006344:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a5f      	ldr	r2, [pc, #380]	; (80064e0 <HAL_DMA_IRQHandler+0x1b4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d04a      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a5d      	ldr	r2, [pc, #372]	; (80064e4 <HAL_DMA_IRQHandler+0x1b8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d045      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a5c      	ldr	r2, [pc, #368]	; (80064e8 <HAL_DMA_IRQHandler+0x1bc>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d040      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a5a      	ldr	r2, [pc, #360]	; (80064ec <HAL_DMA_IRQHandler+0x1c0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d03b      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a59      	ldr	r2, [pc, #356]	; (80064f0 <HAL_DMA_IRQHandler+0x1c4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d036      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a57      	ldr	r2, [pc, #348]	; (80064f4 <HAL_DMA_IRQHandler+0x1c8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d031      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a56      	ldr	r2, [pc, #344]	; (80064f8 <HAL_DMA_IRQHandler+0x1cc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d02c      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a54      	ldr	r2, [pc, #336]	; (80064fc <HAL_DMA_IRQHandler+0x1d0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d027      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a53      	ldr	r2, [pc, #332]	; (8006500 <HAL_DMA_IRQHandler+0x1d4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d022      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a51      	ldr	r2, [pc, #324]	; (8006504 <HAL_DMA_IRQHandler+0x1d8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d01d      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a50      	ldr	r2, [pc, #320]	; (8006508 <HAL_DMA_IRQHandler+0x1dc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d018      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a4e      	ldr	r2, [pc, #312]	; (800650c <HAL_DMA_IRQHandler+0x1e0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a4d      	ldr	r2, [pc, #308]	; (8006510 <HAL_DMA_IRQHandler+0x1e4>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00e      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a4b      	ldr	r2, [pc, #300]	; (8006514 <HAL_DMA_IRQHandler+0x1e8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d009      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a4a      	ldr	r2, [pc, #296]	; (8006518 <HAL_DMA_IRQHandler+0x1ec>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d004      	beq.n	80063fe <HAL_DMA_IRQHandler+0xd2>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a48      	ldr	r2, [pc, #288]	; (800651c <HAL_DMA_IRQHandler+0x1f0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d101      	bne.n	8006402 <HAL_DMA_IRQHandler+0xd6>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <HAL_DMA_IRQHandler+0xd8>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 842b 	beq.w	8006c60 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2208      	movs	r2, #8
 8006414:	409a      	lsls	r2, r3
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	4013      	ands	r3, r2
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 80a2 	beq.w	8006564 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2e      	ldr	r2, [pc, #184]	; (80064e0 <HAL_DMA_IRQHandler+0x1b4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d04a      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2d      	ldr	r2, [pc, #180]	; (80064e4 <HAL_DMA_IRQHandler+0x1b8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d045      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <HAL_DMA_IRQHandler+0x1bc>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d040      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <HAL_DMA_IRQHandler+0x1c0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d03b      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a28      	ldr	r2, [pc, #160]	; (80064f0 <HAL_DMA_IRQHandler+0x1c4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d036      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a27      	ldr	r2, [pc, #156]	; (80064f4 <HAL_DMA_IRQHandler+0x1c8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d031      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a25      	ldr	r2, [pc, #148]	; (80064f8 <HAL_DMA_IRQHandler+0x1cc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d02c      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a24      	ldr	r2, [pc, #144]	; (80064fc <HAL_DMA_IRQHandler+0x1d0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d027      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a22      	ldr	r2, [pc, #136]	; (8006500 <HAL_DMA_IRQHandler+0x1d4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d022      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a21      	ldr	r2, [pc, #132]	; (8006504 <HAL_DMA_IRQHandler+0x1d8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d01d      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1f      	ldr	r2, [pc, #124]	; (8006508 <HAL_DMA_IRQHandler+0x1dc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d018      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1e      	ldr	r2, [pc, #120]	; (800650c <HAL_DMA_IRQHandler+0x1e0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d013      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a1c      	ldr	r2, [pc, #112]	; (8006510 <HAL_DMA_IRQHandler+0x1e4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00e      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1b      	ldr	r2, [pc, #108]	; (8006514 <HAL_DMA_IRQHandler+0x1e8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d009      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a19      	ldr	r2, [pc, #100]	; (8006518 <HAL_DMA_IRQHandler+0x1ec>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d004      	beq.n	80064c0 <HAL_DMA_IRQHandler+0x194>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a18      	ldr	r2, [pc, #96]	; (800651c <HAL_DMA_IRQHandler+0x1f0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d12f      	bne.n	8006520 <HAL_DMA_IRQHandler+0x1f4>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bf14      	ite	ne
 80064ce:	2301      	movne	r3, #1
 80064d0:	2300      	moveq	r3, #0
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	e02e      	b.n	8006534 <HAL_DMA_IRQHandler+0x208>
 80064d6:	bf00      	nop
 80064d8:	24000018 	.word	0x24000018
 80064dc:	1b4e81b5 	.word	0x1b4e81b5
 80064e0:	40020010 	.word	0x40020010
 80064e4:	40020028 	.word	0x40020028
 80064e8:	40020040 	.word	0x40020040
 80064ec:	40020058 	.word	0x40020058
 80064f0:	40020070 	.word	0x40020070
 80064f4:	40020088 	.word	0x40020088
 80064f8:	400200a0 	.word	0x400200a0
 80064fc:	400200b8 	.word	0x400200b8
 8006500:	40020410 	.word	0x40020410
 8006504:	40020428 	.word	0x40020428
 8006508:	40020440 	.word	0x40020440
 800650c:	40020458 	.word	0x40020458
 8006510:	40020470 	.word	0x40020470
 8006514:	40020488 	.word	0x40020488
 8006518:	400204a0 	.word	0x400204a0
 800651c:	400204b8 	.word	0x400204b8
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	bf14      	ite	ne
 800652e:	2301      	movne	r3, #1
 8006530:	2300      	moveq	r3, #0
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d015      	beq.n	8006564 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0204 	bic.w	r2, r2, #4
 8006546:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	2208      	movs	r2, #8
 8006552:	409a      	lsls	r2, r3
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655c:	f043 0201 	orr.w	r2, r3, #1
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	fa22 f303 	lsr.w	r3, r2, r3
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d06e      	beq.n	8006658 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a69      	ldr	r2, [pc, #420]	; (8006724 <HAL_DMA_IRQHandler+0x3f8>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d04a      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a67      	ldr	r2, [pc, #412]	; (8006728 <HAL_DMA_IRQHandler+0x3fc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d045      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a66      	ldr	r2, [pc, #408]	; (800672c <HAL_DMA_IRQHandler+0x400>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d040      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a64      	ldr	r2, [pc, #400]	; (8006730 <HAL_DMA_IRQHandler+0x404>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d03b      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a63      	ldr	r2, [pc, #396]	; (8006734 <HAL_DMA_IRQHandler+0x408>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d036      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a61      	ldr	r2, [pc, #388]	; (8006738 <HAL_DMA_IRQHandler+0x40c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d031      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a60      	ldr	r2, [pc, #384]	; (800673c <HAL_DMA_IRQHandler+0x410>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d02c      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a5e      	ldr	r2, [pc, #376]	; (8006740 <HAL_DMA_IRQHandler+0x414>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d027      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a5d      	ldr	r2, [pc, #372]	; (8006744 <HAL_DMA_IRQHandler+0x418>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d022      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a5b      	ldr	r2, [pc, #364]	; (8006748 <HAL_DMA_IRQHandler+0x41c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01d      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a5a      	ldr	r2, [pc, #360]	; (800674c <HAL_DMA_IRQHandler+0x420>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d018      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a58      	ldr	r2, [pc, #352]	; (8006750 <HAL_DMA_IRQHandler+0x424>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d013      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a57      	ldr	r2, [pc, #348]	; (8006754 <HAL_DMA_IRQHandler+0x428>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00e      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a55      	ldr	r2, [pc, #340]	; (8006758 <HAL_DMA_IRQHandler+0x42c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d009      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a54      	ldr	r2, [pc, #336]	; (800675c <HAL_DMA_IRQHandler+0x430>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d004      	beq.n	800661a <HAL_DMA_IRQHandler+0x2ee>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a52      	ldr	r2, [pc, #328]	; (8006760 <HAL_DMA_IRQHandler+0x434>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d10a      	bne.n	8006630 <HAL_DMA_IRQHandler+0x304>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695b      	ldr	r3, [r3, #20]
 8006620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006624:	2b00      	cmp	r3, #0
 8006626:	bf14      	ite	ne
 8006628:	2301      	movne	r3, #1
 800662a:	2300      	moveq	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	e003      	b.n	8006638 <HAL_DMA_IRQHandler+0x30c>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2300      	movs	r3, #0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00d      	beq.n	8006658 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006640:	f003 031f 	and.w	r3, r3, #31
 8006644:	2201      	movs	r2, #1
 8006646:	409a      	lsls	r2, r3
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006650:	f043 0202 	orr.w	r2, r3, #2
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	2204      	movs	r2, #4
 8006662:	409a      	lsls	r2, r3
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	4013      	ands	r3, r2
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 808f 	beq.w	800678c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a2c      	ldr	r2, [pc, #176]	; (8006724 <HAL_DMA_IRQHandler+0x3f8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d04a      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a2a      	ldr	r2, [pc, #168]	; (8006728 <HAL_DMA_IRQHandler+0x3fc>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d045      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a29      	ldr	r2, [pc, #164]	; (800672c <HAL_DMA_IRQHandler+0x400>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d040      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a27      	ldr	r2, [pc, #156]	; (8006730 <HAL_DMA_IRQHandler+0x404>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d03b      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a26      	ldr	r2, [pc, #152]	; (8006734 <HAL_DMA_IRQHandler+0x408>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d036      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a24      	ldr	r2, [pc, #144]	; (8006738 <HAL_DMA_IRQHandler+0x40c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d031      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a23      	ldr	r2, [pc, #140]	; (800673c <HAL_DMA_IRQHandler+0x410>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d02c      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a21      	ldr	r2, [pc, #132]	; (8006740 <HAL_DMA_IRQHandler+0x414>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d027      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a20      	ldr	r2, [pc, #128]	; (8006744 <HAL_DMA_IRQHandler+0x418>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d022      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1e      	ldr	r2, [pc, #120]	; (8006748 <HAL_DMA_IRQHandler+0x41c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d01d      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1d      	ldr	r2, [pc, #116]	; (800674c <HAL_DMA_IRQHandler+0x420>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d018      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <HAL_DMA_IRQHandler+0x424>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d013      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1a      	ldr	r2, [pc, #104]	; (8006754 <HAL_DMA_IRQHandler+0x428>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00e      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a18      	ldr	r2, [pc, #96]	; (8006758 <HAL_DMA_IRQHandler+0x42c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a17      	ldr	r2, [pc, #92]	; (800675c <HAL_DMA_IRQHandler+0x430>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_DMA_IRQHandler+0x3e2>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a15      	ldr	r2, [pc, #84]	; (8006760 <HAL_DMA_IRQHandler+0x434>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d12a      	bne.n	8006764 <HAL_DMA_IRQHandler+0x438>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	bf14      	ite	ne
 800671c:	2301      	movne	r3, #1
 800671e:	2300      	moveq	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	e023      	b.n	800676c <HAL_DMA_IRQHandler+0x440>
 8006724:	40020010 	.word	0x40020010
 8006728:	40020028 	.word	0x40020028
 800672c:	40020040 	.word	0x40020040
 8006730:	40020058 	.word	0x40020058
 8006734:	40020070 	.word	0x40020070
 8006738:	40020088 	.word	0x40020088
 800673c:	400200a0 	.word	0x400200a0
 8006740:	400200b8 	.word	0x400200b8
 8006744:	40020410 	.word	0x40020410
 8006748:	40020428 	.word	0x40020428
 800674c:	40020440 	.word	0x40020440
 8006750:	40020458 	.word	0x40020458
 8006754:	40020470 	.word	0x40020470
 8006758:	40020488 	.word	0x40020488
 800675c:	400204a0 	.word	0x400204a0
 8006760:	400204b8 	.word	0x400204b8
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00d      	beq.n	800678c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2204      	movs	r2, #4
 800677a:	409a      	lsls	r2, r3
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006784:	f043 0204 	orr.w	r2, r3, #4
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	2210      	movs	r2, #16
 8006796:	409a      	lsls	r2, r3
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	4013      	ands	r3, r2
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 80a6 	beq.w	80068ee <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a85      	ldr	r2, [pc, #532]	; (80069bc <HAL_DMA_IRQHandler+0x690>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d04a      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a83      	ldr	r2, [pc, #524]	; (80069c0 <HAL_DMA_IRQHandler+0x694>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d045      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a82      	ldr	r2, [pc, #520]	; (80069c4 <HAL_DMA_IRQHandler+0x698>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d040      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a80      	ldr	r2, [pc, #512]	; (80069c8 <HAL_DMA_IRQHandler+0x69c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d03b      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a7f      	ldr	r2, [pc, #508]	; (80069cc <HAL_DMA_IRQHandler+0x6a0>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d036      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a7d      	ldr	r2, [pc, #500]	; (80069d0 <HAL_DMA_IRQHandler+0x6a4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d031      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a7c      	ldr	r2, [pc, #496]	; (80069d4 <HAL_DMA_IRQHandler+0x6a8>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d02c      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a7a      	ldr	r2, [pc, #488]	; (80069d8 <HAL_DMA_IRQHandler+0x6ac>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d027      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a79      	ldr	r2, [pc, #484]	; (80069dc <HAL_DMA_IRQHandler+0x6b0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d022      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a77      	ldr	r2, [pc, #476]	; (80069e0 <HAL_DMA_IRQHandler+0x6b4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d01d      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a76      	ldr	r2, [pc, #472]	; (80069e4 <HAL_DMA_IRQHandler+0x6b8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d018      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a74      	ldr	r2, [pc, #464]	; (80069e8 <HAL_DMA_IRQHandler+0x6bc>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d013      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a73      	ldr	r2, [pc, #460]	; (80069ec <HAL_DMA_IRQHandler+0x6c0>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00e      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a71      	ldr	r2, [pc, #452]	; (80069f0 <HAL_DMA_IRQHandler+0x6c4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d009      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a70      	ldr	r2, [pc, #448]	; (80069f4 <HAL_DMA_IRQHandler+0x6c8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d004      	beq.n	8006842 <HAL_DMA_IRQHandler+0x516>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a6e      	ldr	r2, [pc, #440]	; (80069f8 <HAL_DMA_IRQHandler+0x6cc>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d10a      	bne.n	8006858 <HAL_DMA_IRQHandler+0x52c>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	bf14      	ite	ne
 8006850:	2301      	movne	r3, #1
 8006852:	2300      	moveq	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	e009      	b.n	800686c <HAL_DMA_IRQHandler+0x540>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	bf14      	ite	ne
 8006866:	2301      	movne	r3, #1
 8006868:	2300      	moveq	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d03e      	beq.n	80068ee <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006874:	f003 031f 	and.w	r3, r3, #31
 8006878:	2210      	movs	r2, #16
 800687a:	409a      	lsls	r2, r3
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d018      	beq.n	80068c0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d108      	bne.n	80068ae <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d024      	beq.n	80068ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
 80068ac:	e01f      	b.n	80068ee <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d01b      	beq.n	80068ee <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
 80068be:	e016      	b.n	80068ee <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d107      	bne.n	80068de <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0208 	bic.w	r2, r2, #8
 80068dc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	2220      	movs	r2, #32
 80068f8:	409a      	lsls	r2, r3
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	4013      	ands	r3, r2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 8110 	beq.w	8006b24 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a2c      	ldr	r2, [pc, #176]	; (80069bc <HAL_DMA_IRQHandler+0x690>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d04a      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a2b      	ldr	r2, [pc, #172]	; (80069c0 <HAL_DMA_IRQHandler+0x694>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d045      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a29      	ldr	r2, [pc, #164]	; (80069c4 <HAL_DMA_IRQHandler+0x698>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d040      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a28      	ldr	r2, [pc, #160]	; (80069c8 <HAL_DMA_IRQHandler+0x69c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d03b      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a26      	ldr	r2, [pc, #152]	; (80069cc <HAL_DMA_IRQHandler+0x6a0>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d036      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a25      	ldr	r2, [pc, #148]	; (80069d0 <HAL_DMA_IRQHandler+0x6a4>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d031      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a23      	ldr	r2, [pc, #140]	; (80069d4 <HAL_DMA_IRQHandler+0x6a8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d02c      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a22      	ldr	r2, [pc, #136]	; (80069d8 <HAL_DMA_IRQHandler+0x6ac>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d027      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a20      	ldr	r2, [pc, #128]	; (80069dc <HAL_DMA_IRQHandler+0x6b0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d022      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <HAL_DMA_IRQHandler+0x6b4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d01d      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a1d      	ldr	r2, [pc, #116]	; (80069e4 <HAL_DMA_IRQHandler+0x6b8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d018      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a1c      	ldr	r2, [pc, #112]	; (80069e8 <HAL_DMA_IRQHandler+0x6bc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d013      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <HAL_DMA_IRQHandler+0x6c0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00e      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a19      	ldr	r2, [pc, #100]	; (80069f0 <HAL_DMA_IRQHandler+0x6c4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a17      	ldr	r2, [pc, #92]	; (80069f4 <HAL_DMA_IRQHandler+0x6c8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x678>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a16      	ldr	r2, [pc, #88]	; (80069f8 <HAL_DMA_IRQHandler+0x6cc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d12b      	bne.n	80069fc <HAL_DMA_IRQHandler+0x6d0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bf14      	ite	ne
 80069b2:	2301      	movne	r3, #1
 80069b4:	2300      	moveq	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	e02a      	b.n	8006a10 <HAL_DMA_IRQHandler+0x6e4>
 80069ba:	bf00      	nop
 80069bc:	40020010 	.word	0x40020010
 80069c0:	40020028 	.word	0x40020028
 80069c4:	40020040 	.word	0x40020040
 80069c8:	40020058 	.word	0x40020058
 80069cc:	40020070 	.word	0x40020070
 80069d0:	40020088 	.word	0x40020088
 80069d4:	400200a0 	.word	0x400200a0
 80069d8:	400200b8 	.word	0x400200b8
 80069dc:	40020410 	.word	0x40020410
 80069e0:	40020428 	.word	0x40020428
 80069e4:	40020440 	.word	0x40020440
 80069e8:	40020458 	.word	0x40020458
 80069ec:	40020470 	.word	0x40020470
 80069f0:	40020488 	.word	0x40020488
 80069f4:	400204a0 	.word	0x400204a0
 80069f8:	400204b8 	.word	0x400204b8
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bf14      	ite	ne
 8006a0a:	2301      	movne	r3, #1
 8006a0c:	2300      	moveq	r3, #0
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8087 	beq.w	8006b24 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	2220      	movs	r2, #32
 8006a20:	409a      	lsls	r2, r3
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d139      	bne.n	8006aa6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0216 	bic.w	r2, r2, #22
 8006a40:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695a      	ldr	r2, [r3, #20]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a50:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d103      	bne.n	8006a62 <HAL_DMA_IRQHandler+0x736>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d007      	beq.n	8006a72 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0208 	bic.w	r2, r2, #8
 8006a70:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	223f      	movs	r2, #63	; 0x3f
 8006a7c:	409a      	lsls	r2, r3
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f000 834a 	beq.w	8007130 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	4798      	blx	r3
          }
          return;
 8006aa4:	e344      	b.n	8007130 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d018      	beq.n	8006ae6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d108      	bne.n	8006ad4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d02c      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	4798      	blx	r3
 8006ad2:	e027      	b.n	8006b24 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d023      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	4798      	blx	r3
 8006ae4:	e01e      	b.n	8006b24 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10f      	bne.n	8006b14 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0210 	bic.w	r2, r2, #16
 8006b02:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 8306 	beq.w	800713a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 8088 	beq.w	8006c4c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2204      	movs	r2, #4
 8006b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a7a      	ldr	r2, [pc, #488]	; (8006d34 <HAL_DMA_IRQHandler+0xa08>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d04a      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a79      	ldr	r2, [pc, #484]	; (8006d38 <HAL_DMA_IRQHandler+0xa0c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d045      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a77      	ldr	r2, [pc, #476]	; (8006d3c <HAL_DMA_IRQHandler+0xa10>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d040      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a76      	ldr	r2, [pc, #472]	; (8006d40 <HAL_DMA_IRQHandler+0xa14>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d03b      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a74      	ldr	r2, [pc, #464]	; (8006d44 <HAL_DMA_IRQHandler+0xa18>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d036      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a73      	ldr	r2, [pc, #460]	; (8006d48 <HAL_DMA_IRQHandler+0xa1c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d031      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a71      	ldr	r2, [pc, #452]	; (8006d4c <HAL_DMA_IRQHandler+0xa20>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d02c      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a70      	ldr	r2, [pc, #448]	; (8006d50 <HAL_DMA_IRQHandler+0xa24>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d027      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6e      	ldr	r2, [pc, #440]	; (8006d54 <HAL_DMA_IRQHandler+0xa28>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d022      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a6d      	ldr	r2, [pc, #436]	; (8006d58 <HAL_DMA_IRQHandler+0xa2c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d01d      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a6b      	ldr	r2, [pc, #428]	; (8006d5c <HAL_DMA_IRQHandler+0xa30>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d018      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a6a      	ldr	r2, [pc, #424]	; (8006d60 <HAL_DMA_IRQHandler+0xa34>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d013      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a68      	ldr	r2, [pc, #416]	; (8006d64 <HAL_DMA_IRQHandler+0xa38>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00e      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a67      	ldr	r2, [pc, #412]	; (8006d68 <HAL_DMA_IRQHandler+0xa3c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d009      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a65      	ldr	r2, [pc, #404]	; (8006d6c <HAL_DMA_IRQHandler+0xa40>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_DMA_IRQHandler+0x8b8>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a64      	ldr	r2, [pc, #400]	; (8006d70 <HAL_DMA_IRQHandler+0xa44>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d108      	bne.n	8006bf6 <HAL_DMA_IRQHandler+0x8ca>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0201 	bic.w	r2, r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	e007      	b.n	8006c06 <HAL_DMA_IRQHandler+0x8da>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0201 	bic.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d307      	bcc.n	8006c22 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1f2      	bne.n	8006c06 <HAL_DMA_IRQHandler+0x8da>
 8006c20:	e000      	b.n	8006c24 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c22:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d004      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c42:	e003      	b.n	8006c4c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8272 	beq.w	800713a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
 8006c5e:	e26c      	b.n	800713a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a43      	ldr	r2, [pc, #268]	; (8006d74 <HAL_DMA_IRQHandler+0xa48>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d022      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x984>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a42      	ldr	r2, [pc, #264]	; (8006d78 <HAL_DMA_IRQHandler+0xa4c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d01d      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x984>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a40      	ldr	r2, [pc, #256]	; (8006d7c <HAL_DMA_IRQHandler+0xa50>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d018      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x984>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a3f      	ldr	r2, [pc, #252]	; (8006d80 <HAL_DMA_IRQHandler+0xa54>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x984>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a3d      	ldr	r2, [pc, #244]	; (8006d84 <HAL_DMA_IRQHandler+0xa58>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00e      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x984>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a3c      	ldr	r2, [pc, #240]	; (8006d88 <HAL_DMA_IRQHandler+0xa5c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d009      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x984>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a3a      	ldr	r2, [pc, #232]	; (8006d8c <HAL_DMA_IRQHandler+0xa60>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d004      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x984>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a39      	ldr	r2, [pc, #228]	; (8006d90 <HAL_DMA_IRQHandler+0xa64>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d101      	bne.n	8006cb4 <HAL_DMA_IRQHandler+0x988>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e000      	b.n	8006cb6 <HAL_DMA_IRQHandler+0x98a>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 823f 	beq.w	800713a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc8:	f003 031f 	and.w	r3, r3, #31
 8006ccc:	2204      	movs	r2, #4
 8006cce:	409a      	lsls	r2, r3
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80cd 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xb48>
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 80c7 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cea:	f003 031f 	and.w	r3, r3, #31
 8006cee:	2204      	movs	r2, #4
 8006cf0:	409a      	lsls	r2, r3
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d049      	beq.n	8006d94 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 8210 	beq.w	8007134 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d1c:	e20a      	b.n	8007134 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8206 	beq.w	8007134 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d30:	e200      	b.n	8007134 <HAL_DMA_IRQHandler+0xe08>
 8006d32:	bf00      	nop
 8006d34:	40020010 	.word	0x40020010
 8006d38:	40020028 	.word	0x40020028
 8006d3c:	40020040 	.word	0x40020040
 8006d40:	40020058 	.word	0x40020058
 8006d44:	40020070 	.word	0x40020070
 8006d48:	40020088 	.word	0x40020088
 8006d4c:	400200a0 	.word	0x400200a0
 8006d50:	400200b8 	.word	0x400200b8
 8006d54:	40020410 	.word	0x40020410
 8006d58:	40020428 	.word	0x40020428
 8006d5c:	40020440 	.word	0x40020440
 8006d60:	40020458 	.word	0x40020458
 8006d64:	40020470 	.word	0x40020470
 8006d68:	40020488 	.word	0x40020488
 8006d6c:	400204a0 	.word	0x400204a0
 8006d70:	400204b8 	.word	0x400204b8
 8006d74:	58025408 	.word	0x58025408
 8006d78:	5802541c 	.word	0x5802541c
 8006d7c:	58025430 	.word	0x58025430
 8006d80:	58025444 	.word	0x58025444
 8006d84:	58025458 	.word	0x58025458
 8006d88:	5802546c 	.word	0x5802546c
 8006d8c:	58025480 	.word	0x58025480
 8006d90:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d160      	bne.n	8006e60 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a8c      	ldr	r2, [pc, #560]	; (8006fd4 <HAL_DMA_IRQHandler+0xca8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d04a      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a8a      	ldr	r2, [pc, #552]	; (8006fd8 <HAL_DMA_IRQHandler+0xcac>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d045      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a89      	ldr	r2, [pc, #548]	; (8006fdc <HAL_DMA_IRQHandler+0xcb0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d040      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a87      	ldr	r2, [pc, #540]	; (8006fe0 <HAL_DMA_IRQHandler+0xcb4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d03b      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a86      	ldr	r2, [pc, #536]	; (8006fe4 <HAL_DMA_IRQHandler+0xcb8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d036      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a84      	ldr	r2, [pc, #528]	; (8006fe8 <HAL_DMA_IRQHandler+0xcbc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d031      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a83      	ldr	r2, [pc, #524]	; (8006fec <HAL_DMA_IRQHandler+0xcc0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d02c      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a81      	ldr	r2, [pc, #516]	; (8006ff0 <HAL_DMA_IRQHandler+0xcc4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d027      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a80      	ldr	r2, [pc, #512]	; (8006ff4 <HAL_DMA_IRQHandler+0xcc8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d022      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a7e      	ldr	r2, [pc, #504]	; (8006ff8 <HAL_DMA_IRQHandler+0xccc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d01d      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a7d      	ldr	r2, [pc, #500]	; (8006ffc <HAL_DMA_IRQHandler+0xcd0>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d018      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a7b      	ldr	r2, [pc, #492]	; (8007000 <HAL_DMA_IRQHandler+0xcd4>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d013      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a7a      	ldr	r2, [pc, #488]	; (8007004 <HAL_DMA_IRQHandler+0xcd8>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00e      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a78      	ldr	r2, [pc, #480]	; (8007008 <HAL_DMA_IRQHandler+0xcdc>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d009      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a77      	ldr	r2, [pc, #476]	; (800700c <HAL_DMA_IRQHandler+0xce0>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d004      	beq.n	8006e3e <HAL_DMA_IRQHandler+0xb12>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a75      	ldr	r2, [pc, #468]	; (8007010 <HAL_DMA_IRQHandler+0xce4>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d108      	bne.n	8006e50 <HAL_DMA_IRQHandler+0xb24>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0208 	bic.w	r2, r2, #8
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e007      	b.n	8006e60 <HAL_DMA_IRQHandler+0xb34>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f022 0204 	bic.w	r2, r2, #4
 8006e5e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 8165 	beq.w	8007134 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e72:	e15f      	b.n	8007134 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e78:	f003 031f 	and.w	r3, r3, #31
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	409a      	lsls	r2, r3
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	4013      	ands	r3, r2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 80c5 	beq.w	8007014 <HAL_DMA_IRQHandler+0xce8>
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80bf 	beq.w	8007014 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e9a:	f003 031f 	and.w	r3, r3, #31
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	409a      	lsls	r2, r3
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d018      	beq.n	8006ee2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d109      	bne.n	8006ece <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 813a 	beq.w	8007138 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ecc:	e134      	b.n	8007138 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 8130 	beq.w	8007138 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ee0:	e12a      	b.n	8007138 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f003 0320 	and.w	r3, r3, #32
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d168      	bne.n	8006fbe <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a38      	ldr	r2, [pc, #224]	; (8006fd4 <HAL_DMA_IRQHandler+0xca8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d04a      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a37      	ldr	r2, [pc, #220]	; (8006fd8 <HAL_DMA_IRQHandler+0xcac>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d045      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a35      	ldr	r2, [pc, #212]	; (8006fdc <HAL_DMA_IRQHandler+0xcb0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d040      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a34      	ldr	r2, [pc, #208]	; (8006fe0 <HAL_DMA_IRQHandler+0xcb4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d03b      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a32      	ldr	r2, [pc, #200]	; (8006fe4 <HAL_DMA_IRQHandler+0xcb8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d036      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a31      	ldr	r2, [pc, #196]	; (8006fe8 <HAL_DMA_IRQHandler+0xcbc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d031      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a2f      	ldr	r2, [pc, #188]	; (8006fec <HAL_DMA_IRQHandler+0xcc0>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d02c      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a2e      	ldr	r2, [pc, #184]	; (8006ff0 <HAL_DMA_IRQHandler+0xcc4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d027      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a2c      	ldr	r2, [pc, #176]	; (8006ff4 <HAL_DMA_IRQHandler+0xcc8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d022      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a2b      	ldr	r2, [pc, #172]	; (8006ff8 <HAL_DMA_IRQHandler+0xccc>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d01d      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a29      	ldr	r2, [pc, #164]	; (8006ffc <HAL_DMA_IRQHandler+0xcd0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d018      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a28      	ldr	r2, [pc, #160]	; (8007000 <HAL_DMA_IRQHandler+0xcd4>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d013      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a26      	ldr	r2, [pc, #152]	; (8007004 <HAL_DMA_IRQHandler+0xcd8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d00e      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a25      	ldr	r2, [pc, #148]	; (8007008 <HAL_DMA_IRQHandler+0xcdc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d009      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a23      	ldr	r2, [pc, #140]	; (800700c <HAL_DMA_IRQHandler+0xce0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d004      	beq.n	8006f8c <HAL_DMA_IRQHandler+0xc60>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a22      	ldr	r2, [pc, #136]	; (8007010 <HAL_DMA_IRQHandler+0xce4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d108      	bne.n	8006f9e <HAL_DMA_IRQHandler+0xc72>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0214 	bic.w	r2, r2, #20
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	e007      	b.n	8006fae <HAL_DMA_IRQHandler+0xc82>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 020a 	bic.w	r2, r2, #10
 8006fac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 80b8 	beq.w	8007138 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fd0:	e0b2      	b.n	8007138 <HAL_DMA_IRQHandler+0xe0c>
 8006fd2:	bf00      	nop
 8006fd4:	40020010 	.word	0x40020010
 8006fd8:	40020028 	.word	0x40020028
 8006fdc:	40020040 	.word	0x40020040
 8006fe0:	40020058 	.word	0x40020058
 8006fe4:	40020070 	.word	0x40020070
 8006fe8:	40020088 	.word	0x40020088
 8006fec:	400200a0 	.word	0x400200a0
 8006ff0:	400200b8 	.word	0x400200b8
 8006ff4:	40020410 	.word	0x40020410
 8006ff8:	40020428 	.word	0x40020428
 8006ffc:	40020440 	.word	0x40020440
 8007000:	40020458 	.word	0x40020458
 8007004:	40020470 	.word	0x40020470
 8007008:	40020488 	.word	0x40020488
 800700c:	400204a0 	.word	0x400204a0
 8007010:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007018:	f003 031f 	and.w	r3, r3, #31
 800701c:	2208      	movs	r2, #8
 800701e:	409a      	lsls	r2, r3
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	4013      	ands	r3, r2
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8088 	beq.w	800713a <HAL_DMA_IRQHandler+0xe0e>
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 8082 	beq.w	800713a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a41      	ldr	r2, [pc, #260]	; (8007140 <HAL_DMA_IRQHandler+0xe14>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d04a      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a3f      	ldr	r2, [pc, #252]	; (8007144 <HAL_DMA_IRQHandler+0xe18>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d045      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a3e      	ldr	r2, [pc, #248]	; (8007148 <HAL_DMA_IRQHandler+0xe1c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d040      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a3c      	ldr	r2, [pc, #240]	; (800714c <HAL_DMA_IRQHandler+0xe20>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d03b      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a3b      	ldr	r2, [pc, #236]	; (8007150 <HAL_DMA_IRQHandler+0xe24>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d036      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a39      	ldr	r2, [pc, #228]	; (8007154 <HAL_DMA_IRQHandler+0xe28>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d031      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a38      	ldr	r2, [pc, #224]	; (8007158 <HAL_DMA_IRQHandler+0xe2c>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d02c      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a36      	ldr	r2, [pc, #216]	; (800715c <HAL_DMA_IRQHandler+0xe30>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d027      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a35      	ldr	r2, [pc, #212]	; (8007160 <HAL_DMA_IRQHandler+0xe34>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d022      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a33      	ldr	r2, [pc, #204]	; (8007164 <HAL_DMA_IRQHandler+0xe38>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d01d      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a32      	ldr	r2, [pc, #200]	; (8007168 <HAL_DMA_IRQHandler+0xe3c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d018      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a30      	ldr	r2, [pc, #192]	; (800716c <HAL_DMA_IRQHandler+0xe40>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a2f      	ldr	r2, [pc, #188]	; (8007170 <HAL_DMA_IRQHandler+0xe44>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d00e      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a2d      	ldr	r2, [pc, #180]	; (8007174 <HAL_DMA_IRQHandler+0xe48>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d009      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a2c      	ldr	r2, [pc, #176]	; (8007178 <HAL_DMA_IRQHandler+0xe4c>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d004      	beq.n	80070d6 <HAL_DMA_IRQHandler+0xdaa>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a2a      	ldr	r2, [pc, #168]	; (800717c <HAL_DMA_IRQHandler+0xe50>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d108      	bne.n	80070e8 <HAL_DMA_IRQHandler+0xdbc>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 021c 	bic.w	r2, r2, #28
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	e007      	b.n	80070f8 <HAL_DMA_IRQHandler+0xdcc>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 020e 	bic.w	r2, r2, #14
 80070f6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	2201      	movs	r2, #1
 8007102:	409a      	lsls	r2, r3
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	4798      	blx	r3
 800712e:	e004      	b.n	800713a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007130:	bf00      	nop
 8007132:	e002      	b.n	800713a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007134:	bf00      	nop
 8007136:	e000      	b.n	800713a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007138:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800713a:	3728      	adds	r7, #40	; 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40020010 	.word	0x40020010
 8007144:	40020028 	.word	0x40020028
 8007148:	40020040 	.word	0x40020040
 800714c:	40020058 	.word	0x40020058
 8007150:	40020070 	.word	0x40020070
 8007154:	40020088 	.word	0x40020088
 8007158:	400200a0 	.word	0x400200a0
 800715c:	400200b8 	.word	0x400200b8
 8007160:	40020410 	.word	0x40020410
 8007164:	40020428 	.word	0x40020428
 8007168:	40020440 	.word	0x40020440
 800716c:	40020458 	.word	0x40020458
 8007170:	40020470 	.word	0x40020470
 8007174:	40020488 	.word	0x40020488
 8007178:	400204a0 	.word	0x400204a0
 800717c:	400204b8 	.word	0x400204b8

08007180 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800718e:	b2db      	uxtb	r3, r3
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071cc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a84      	ldr	r2, [pc, #528]	; (80073e4 <DMA_SetConfig+0x230>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d072      	beq.n	80072be <DMA_SetConfig+0x10a>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a82      	ldr	r2, [pc, #520]	; (80073e8 <DMA_SetConfig+0x234>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d06d      	beq.n	80072be <DMA_SetConfig+0x10a>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a81      	ldr	r2, [pc, #516]	; (80073ec <DMA_SetConfig+0x238>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d068      	beq.n	80072be <DMA_SetConfig+0x10a>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a7f      	ldr	r2, [pc, #508]	; (80073f0 <DMA_SetConfig+0x23c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d063      	beq.n	80072be <DMA_SetConfig+0x10a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a7e      	ldr	r2, [pc, #504]	; (80073f4 <DMA_SetConfig+0x240>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d05e      	beq.n	80072be <DMA_SetConfig+0x10a>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a7c      	ldr	r2, [pc, #496]	; (80073f8 <DMA_SetConfig+0x244>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d059      	beq.n	80072be <DMA_SetConfig+0x10a>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a7b      	ldr	r2, [pc, #492]	; (80073fc <DMA_SetConfig+0x248>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d054      	beq.n	80072be <DMA_SetConfig+0x10a>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a79      	ldr	r2, [pc, #484]	; (8007400 <DMA_SetConfig+0x24c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d04f      	beq.n	80072be <DMA_SetConfig+0x10a>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a78      	ldr	r2, [pc, #480]	; (8007404 <DMA_SetConfig+0x250>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d04a      	beq.n	80072be <DMA_SetConfig+0x10a>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a76      	ldr	r2, [pc, #472]	; (8007408 <DMA_SetConfig+0x254>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d045      	beq.n	80072be <DMA_SetConfig+0x10a>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a75      	ldr	r2, [pc, #468]	; (800740c <DMA_SetConfig+0x258>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d040      	beq.n	80072be <DMA_SetConfig+0x10a>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a73      	ldr	r2, [pc, #460]	; (8007410 <DMA_SetConfig+0x25c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d03b      	beq.n	80072be <DMA_SetConfig+0x10a>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a72      	ldr	r2, [pc, #456]	; (8007414 <DMA_SetConfig+0x260>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d036      	beq.n	80072be <DMA_SetConfig+0x10a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a70      	ldr	r2, [pc, #448]	; (8007418 <DMA_SetConfig+0x264>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d031      	beq.n	80072be <DMA_SetConfig+0x10a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a6f      	ldr	r2, [pc, #444]	; (800741c <DMA_SetConfig+0x268>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d02c      	beq.n	80072be <DMA_SetConfig+0x10a>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a6d      	ldr	r2, [pc, #436]	; (8007420 <DMA_SetConfig+0x26c>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d027      	beq.n	80072be <DMA_SetConfig+0x10a>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a6c      	ldr	r2, [pc, #432]	; (8007424 <DMA_SetConfig+0x270>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d022      	beq.n	80072be <DMA_SetConfig+0x10a>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a6a      	ldr	r2, [pc, #424]	; (8007428 <DMA_SetConfig+0x274>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d01d      	beq.n	80072be <DMA_SetConfig+0x10a>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a69      	ldr	r2, [pc, #420]	; (800742c <DMA_SetConfig+0x278>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d018      	beq.n	80072be <DMA_SetConfig+0x10a>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a67      	ldr	r2, [pc, #412]	; (8007430 <DMA_SetConfig+0x27c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d013      	beq.n	80072be <DMA_SetConfig+0x10a>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a66      	ldr	r2, [pc, #408]	; (8007434 <DMA_SetConfig+0x280>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00e      	beq.n	80072be <DMA_SetConfig+0x10a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a64      	ldr	r2, [pc, #400]	; (8007438 <DMA_SetConfig+0x284>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d009      	beq.n	80072be <DMA_SetConfig+0x10a>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a63      	ldr	r2, [pc, #396]	; (800743c <DMA_SetConfig+0x288>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d004      	beq.n	80072be <DMA_SetConfig+0x10a>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a61      	ldr	r2, [pc, #388]	; (8007440 <DMA_SetConfig+0x28c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d101      	bne.n	80072c2 <DMA_SetConfig+0x10e>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <DMA_SetConfig+0x110>
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00d      	beq.n	80072e4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072d0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d004      	beq.n	80072e4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072e2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a3e      	ldr	r2, [pc, #248]	; (80073e4 <DMA_SetConfig+0x230>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d04a      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a3d      	ldr	r2, [pc, #244]	; (80073e8 <DMA_SetConfig+0x234>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d045      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a3b      	ldr	r2, [pc, #236]	; (80073ec <DMA_SetConfig+0x238>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d040      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a3a      	ldr	r2, [pc, #232]	; (80073f0 <DMA_SetConfig+0x23c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d03b      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a38      	ldr	r2, [pc, #224]	; (80073f4 <DMA_SetConfig+0x240>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d036      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a37      	ldr	r2, [pc, #220]	; (80073f8 <DMA_SetConfig+0x244>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d031      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a35      	ldr	r2, [pc, #212]	; (80073fc <DMA_SetConfig+0x248>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d02c      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a34      	ldr	r2, [pc, #208]	; (8007400 <DMA_SetConfig+0x24c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d027      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a32      	ldr	r2, [pc, #200]	; (8007404 <DMA_SetConfig+0x250>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d022      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a31      	ldr	r2, [pc, #196]	; (8007408 <DMA_SetConfig+0x254>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d01d      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a2f      	ldr	r2, [pc, #188]	; (800740c <DMA_SetConfig+0x258>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d018      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a2e      	ldr	r2, [pc, #184]	; (8007410 <DMA_SetConfig+0x25c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d013      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a2c      	ldr	r2, [pc, #176]	; (8007414 <DMA_SetConfig+0x260>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d00e      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a2b      	ldr	r2, [pc, #172]	; (8007418 <DMA_SetConfig+0x264>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d009      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a29      	ldr	r2, [pc, #164]	; (800741c <DMA_SetConfig+0x268>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d004      	beq.n	8007384 <DMA_SetConfig+0x1d0>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a28      	ldr	r2, [pc, #160]	; (8007420 <DMA_SetConfig+0x26c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d101      	bne.n	8007388 <DMA_SetConfig+0x1d4>
 8007384:	2301      	movs	r3, #1
 8007386:	e000      	b.n	800738a <DMA_SetConfig+0x1d6>
 8007388:	2300      	movs	r3, #0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d05a      	beq.n	8007444 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007392:	f003 031f 	and.w	r3, r3, #31
 8007396:	223f      	movs	r2, #63	; 0x3f
 8007398:	409a      	lsls	r2, r3
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073ac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	2b40      	cmp	r3, #64	; 0x40
 80073bc:	d108      	bne.n	80073d0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073ce:	e087      	b.n	80074e0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	60da      	str	r2, [r3, #12]
}
 80073e0:	e07e      	b.n	80074e0 <DMA_SetConfig+0x32c>
 80073e2:	bf00      	nop
 80073e4:	40020010 	.word	0x40020010
 80073e8:	40020028 	.word	0x40020028
 80073ec:	40020040 	.word	0x40020040
 80073f0:	40020058 	.word	0x40020058
 80073f4:	40020070 	.word	0x40020070
 80073f8:	40020088 	.word	0x40020088
 80073fc:	400200a0 	.word	0x400200a0
 8007400:	400200b8 	.word	0x400200b8
 8007404:	40020410 	.word	0x40020410
 8007408:	40020428 	.word	0x40020428
 800740c:	40020440 	.word	0x40020440
 8007410:	40020458 	.word	0x40020458
 8007414:	40020470 	.word	0x40020470
 8007418:	40020488 	.word	0x40020488
 800741c:	400204a0 	.word	0x400204a0
 8007420:	400204b8 	.word	0x400204b8
 8007424:	58025408 	.word	0x58025408
 8007428:	5802541c 	.word	0x5802541c
 800742c:	58025430 	.word	0x58025430
 8007430:	58025444 	.word	0x58025444
 8007434:	58025458 	.word	0x58025458
 8007438:	5802546c 	.word	0x5802546c
 800743c:	58025480 	.word	0x58025480
 8007440:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a28      	ldr	r2, [pc, #160]	; (80074ec <DMA_SetConfig+0x338>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d022      	beq.n	8007494 <DMA_SetConfig+0x2e0>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a27      	ldr	r2, [pc, #156]	; (80074f0 <DMA_SetConfig+0x33c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d01d      	beq.n	8007494 <DMA_SetConfig+0x2e0>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a25      	ldr	r2, [pc, #148]	; (80074f4 <DMA_SetConfig+0x340>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d018      	beq.n	8007494 <DMA_SetConfig+0x2e0>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a24      	ldr	r2, [pc, #144]	; (80074f8 <DMA_SetConfig+0x344>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d013      	beq.n	8007494 <DMA_SetConfig+0x2e0>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a22      	ldr	r2, [pc, #136]	; (80074fc <DMA_SetConfig+0x348>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d00e      	beq.n	8007494 <DMA_SetConfig+0x2e0>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a21      	ldr	r2, [pc, #132]	; (8007500 <DMA_SetConfig+0x34c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d009      	beq.n	8007494 <DMA_SetConfig+0x2e0>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1f      	ldr	r2, [pc, #124]	; (8007504 <DMA_SetConfig+0x350>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d004      	beq.n	8007494 <DMA_SetConfig+0x2e0>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1e      	ldr	r2, [pc, #120]	; (8007508 <DMA_SetConfig+0x354>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d101      	bne.n	8007498 <DMA_SetConfig+0x2e4>
 8007494:	2301      	movs	r3, #1
 8007496:	e000      	b.n	800749a <DMA_SetConfig+0x2e6>
 8007498:	2300      	movs	r3, #0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d020      	beq.n	80074e0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	2201      	movs	r2, #1
 80074a8:	409a      	lsls	r2, r3
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d108      	bne.n	80074d0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	60da      	str	r2, [r3, #12]
}
 80074ce:	e007      	b.n	80074e0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	60da      	str	r2, [r3, #12]
}
 80074e0:	bf00      	nop
 80074e2:	371c      	adds	r7, #28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	58025408 	.word	0x58025408
 80074f0:	5802541c 	.word	0x5802541c
 80074f4:	58025430 	.word	0x58025430
 80074f8:	58025444 	.word	0x58025444
 80074fc:	58025458 	.word	0x58025458
 8007500:	5802546c 	.word	0x5802546c
 8007504:	58025480 	.word	0x58025480
 8007508:	58025494 	.word	0x58025494

0800750c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a42      	ldr	r2, [pc, #264]	; (8007624 <DMA_CalcBaseAndBitshift+0x118>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d04a      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a41      	ldr	r2, [pc, #260]	; (8007628 <DMA_CalcBaseAndBitshift+0x11c>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d045      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a3f      	ldr	r2, [pc, #252]	; (800762c <DMA_CalcBaseAndBitshift+0x120>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d040      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a3e      	ldr	r2, [pc, #248]	; (8007630 <DMA_CalcBaseAndBitshift+0x124>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d03b      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a3c      	ldr	r2, [pc, #240]	; (8007634 <DMA_CalcBaseAndBitshift+0x128>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d036      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a3b      	ldr	r2, [pc, #236]	; (8007638 <DMA_CalcBaseAndBitshift+0x12c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d031      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a39      	ldr	r2, [pc, #228]	; (800763c <DMA_CalcBaseAndBitshift+0x130>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d02c      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a38      	ldr	r2, [pc, #224]	; (8007640 <DMA_CalcBaseAndBitshift+0x134>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d027      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a36      	ldr	r2, [pc, #216]	; (8007644 <DMA_CalcBaseAndBitshift+0x138>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d022      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a35      	ldr	r2, [pc, #212]	; (8007648 <DMA_CalcBaseAndBitshift+0x13c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d01d      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a33      	ldr	r2, [pc, #204]	; (800764c <DMA_CalcBaseAndBitshift+0x140>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d018      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a32      	ldr	r2, [pc, #200]	; (8007650 <DMA_CalcBaseAndBitshift+0x144>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d013      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a30      	ldr	r2, [pc, #192]	; (8007654 <DMA_CalcBaseAndBitshift+0x148>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00e      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a2f      	ldr	r2, [pc, #188]	; (8007658 <DMA_CalcBaseAndBitshift+0x14c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d009      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2d      	ldr	r2, [pc, #180]	; (800765c <DMA_CalcBaseAndBitshift+0x150>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d004      	beq.n	80075b4 <DMA_CalcBaseAndBitshift+0xa8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a2c      	ldr	r2, [pc, #176]	; (8007660 <DMA_CalcBaseAndBitshift+0x154>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d101      	bne.n	80075b8 <DMA_CalcBaseAndBitshift+0xac>
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <DMA_CalcBaseAndBitshift+0xae>
 80075b8:	2300      	movs	r3, #0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d024      	beq.n	8007608 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	3b10      	subs	r3, #16
 80075c6:	4a27      	ldr	r2, [pc, #156]	; (8007664 <DMA_CalcBaseAndBitshift+0x158>)
 80075c8:	fba2 2303 	umull	r2, r3, r2, r3
 80075cc:	091b      	lsrs	r3, r3, #4
 80075ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	4a24      	ldr	r2, [pc, #144]	; (8007668 <DMA_CalcBaseAndBitshift+0x15c>)
 80075d8:	5cd3      	ldrb	r3, [r2, r3]
 80075da:	461a      	mov	r2, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d908      	bls.n	80075f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	4b1f      	ldr	r3, [pc, #124]	; (800766c <DMA_CalcBaseAndBitshift+0x160>)
 80075ee:	4013      	ands	r3, r2
 80075f0:	1d1a      	adds	r2, r3, #4
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	659a      	str	r2, [r3, #88]	; 0x58
 80075f6:	e00d      	b.n	8007614 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	4b1b      	ldr	r3, [pc, #108]	; (800766c <DMA_CalcBaseAndBitshift+0x160>)
 8007600:	4013      	ands	r3, r2
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6593      	str	r3, [r2, #88]	; 0x58
 8007606:	e005      	b.n	8007614 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	40020010 	.word	0x40020010
 8007628:	40020028 	.word	0x40020028
 800762c:	40020040 	.word	0x40020040
 8007630:	40020058 	.word	0x40020058
 8007634:	40020070 	.word	0x40020070
 8007638:	40020088 	.word	0x40020088
 800763c:	400200a0 	.word	0x400200a0
 8007640:	400200b8 	.word	0x400200b8
 8007644:	40020410 	.word	0x40020410
 8007648:	40020428 	.word	0x40020428
 800764c:	40020440 	.word	0x40020440
 8007650:	40020458 	.word	0x40020458
 8007654:	40020470 	.word	0x40020470
 8007658:	40020488 	.word	0x40020488
 800765c:	400204a0 	.word	0x400204a0
 8007660:	400204b8 	.word	0x400204b8
 8007664:	aaaaaaab 	.word	0xaaaaaaab
 8007668:	08013524 	.word	0x08013524
 800766c:	fffffc00 	.word	0xfffffc00

08007670 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007670:	b480      	push	{r7}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d120      	bne.n	80076c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007688:	2b03      	cmp	r3, #3
 800768a:	d858      	bhi.n	800773e <DMA_CheckFifoParam+0xce>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <DMA_CheckFifoParam+0x24>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076a5 	.word	0x080076a5
 8007698:	080076b7 	.word	0x080076b7
 800769c:	080076a5 	.word	0x080076a5
 80076a0:	0800773f 	.word	0x0800773f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d048      	beq.n	8007742 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076b4:	e045      	b.n	8007742 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076be:	d142      	bne.n	8007746 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076c4:	e03f      	b.n	8007746 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ce:	d123      	bne.n	8007718 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	2b03      	cmp	r3, #3
 80076d6:	d838      	bhi.n	800774a <DMA_CheckFifoParam+0xda>
 80076d8:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <DMA_CheckFifoParam+0x70>)
 80076da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076de:	bf00      	nop
 80076e0:	080076f1 	.word	0x080076f1
 80076e4:	080076f7 	.word	0x080076f7
 80076e8:	080076f1 	.word	0x080076f1
 80076ec:	08007709 	.word	0x08007709
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
        break;
 80076f4:	e030      	b.n	8007758 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d025      	beq.n	800774e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007706:	e022      	b.n	800774e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007710:	d11f      	bne.n	8007752 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007716:	e01c      	b.n	8007752 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771c:	2b02      	cmp	r3, #2
 800771e:	d902      	bls.n	8007726 <DMA_CheckFifoParam+0xb6>
 8007720:	2b03      	cmp	r3, #3
 8007722:	d003      	beq.n	800772c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007724:	e018      	b.n	8007758 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	73fb      	strb	r3, [r7, #15]
        break;
 800772a:	e015      	b.n	8007758 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00e      	beq.n	8007756 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
    break;
 800773c:	e00b      	b.n	8007756 <DMA_CheckFifoParam+0xe6>
        break;
 800773e:	bf00      	nop
 8007740:	e00a      	b.n	8007758 <DMA_CheckFifoParam+0xe8>
        break;
 8007742:	bf00      	nop
 8007744:	e008      	b.n	8007758 <DMA_CheckFifoParam+0xe8>
        break;
 8007746:	bf00      	nop
 8007748:	e006      	b.n	8007758 <DMA_CheckFifoParam+0xe8>
        break;
 800774a:	bf00      	nop
 800774c:	e004      	b.n	8007758 <DMA_CheckFifoParam+0xe8>
        break;
 800774e:	bf00      	nop
 8007750:	e002      	b.n	8007758 <DMA_CheckFifoParam+0xe8>
        break;
 8007752:	bf00      	nop
 8007754:	e000      	b.n	8007758 <DMA_CheckFifoParam+0xe8>
    break;
 8007756:	bf00      	nop
    }
  }

  return status;
 8007758:	7bfb      	ldrb	r3, [r7, #15]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop

08007768 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a38      	ldr	r2, [pc, #224]	; (800785c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d022      	beq.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a36      	ldr	r2, [pc, #216]	; (8007860 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d01d      	beq.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a35      	ldr	r2, [pc, #212]	; (8007864 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d018      	beq.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a33      	ldr	r2, [pc, #204]	; (8007868 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d013      	beq.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a32      	ldr	r2, [pc, #200]	; (800786c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00e      	beq.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a30      	ldr	r2, [pc, #192]	; (8007870 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d009      	beq.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a2f      	ldr	r2, [pc, #188]	; (8007874 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a2d      	ldr	r2, [pc, #180]	; (8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d101      	bne.n	80077ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80077ca:	2300      	movs	r3, #0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01a      	beq.n	8007806 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	3b08      	subs	r3, #8
 80077d8:	4a28      	ldr	r2, [pc, #160]	; (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80077da:	fba2 2303 	umull	r2, r3, r2, r3
 80077de:	091b      	lsrs	r3, r3, #4
 80077e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4b26      	ldr	r3, [pc, #152]	; (8007880 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	461a      	mov	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a24      	ldr	r2, [pc, #144]	; (8007884 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80077f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f003 031f 	and.w	r3, r3, #31
 80077fc:	2201      	movs	r2, #1
 80077fe:	409a      	lsls	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007804:	e024      	b.n	8007850 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	3b10      	subs	r3, #16
 800780e:	4a1e      	ldr	r2, [pc, #120]	; (8007888 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007810:	fba2 2303 	umull	r2, r3, r2, r3
 8007814:	091b      	lsrs	r3, r3, #4
 8007816:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4a1c      	ldr	r2, [pc, #112]	; (800788c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d806      	bhi.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4a1b      	ldr	r2, [pc, #108]	; (8007890 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d902      	bls.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	3308      	adds	r3, #8
 800782c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4b18      	ldr	r3, [pc, #96]	; (8007894 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007832:	4413      	add	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a16      	ldr	r2, [pc, #88]	; (8007898 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007840:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f003 031f 	and.w	r3, r3, #31
 8007848:	2201      	movs	r2, #1
 800784a:	409a      	lsls	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007850:	bf00      	nop
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	58025408 	.word	0x58025408
 8007860:	5802541c 	.word	0x5802541c
 8007864:	58025430 	.word	0x58025430
 8007868:	58025444 	.word	0x58025444
 800786c:	58025458 	.word	0x58025458
 8007870:	5802546c 	.word	0x5802546c
 8007874:	58025480 	.word	0x58025480
 8007878:	58025494 	.word	0x58025494
 800787c:	cccccccd 	.word	0xcccccccd
 8007880:	16009600 	.word	0x16009600
 8007884:	58025880 	.word	0x58025880
 8007888:	aaaaaaab 	.word	0xaaaaaaab
 800788c:	400204b8 	.word	0x400204b8
 8007890:	4002040f 	.word	0x4002040f
 8007894:	10008200 	.word	0x10008200
 8007898:	40020880 	.word	0x40020880

0800789c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d04a      	beq.n	8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d847      	bhi.n	8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a25      	ldr	r2, [pc, #148]	; (8007954 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d022      	beq.n	8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a24      	ldr	r2, [pc, #144]	; (8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d01d      	beq.n	8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a22      	ldr	r2, [pc, #136]	; (800795c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d018      	beq.n	8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a21      	ldr	r2, [pc, #132]	; (8007960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d013      	beq.n	8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a1f      	ldr	r2, [pc, #124]	; (8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00e      	beq.n	8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a1e      	ldr	r2, [pc, #120]	; (8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d009      	beq.n	8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a1c      	ldr	r2, [pc, #112]	; (800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d004      	beq.n	8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a1b      	ldr	r2, [pc, #108]	; (8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d101      	bne.n	800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007908:	2301      	movs	r3, #1
 800790a:	e000      	b.n	800790e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800790c:	2300      	movs	r3, #0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	4b17      	ldr	r3, [pc, #92]	; (8007974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	461a      	mov	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a15      	ldr	r2, [pc, #84]	; (8007978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007924:	671a      	str	r2, [r3, #112]	; 0x70
 8007926:	e009      	b.n	800793c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4b14      	ldr	r3, [pc, #80]	; (800797c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	461a      	mov	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a11      	ldr	r2, [pc, #68]	; (8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800793a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	3b01      	subs	r3, #1
 8007940:	2201      	movs	r2, #1
 8007942:	409a      	lsls	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007948:	bf00      	nop
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr
 8007954:	58025408 	.word	0x58025408
 8007958:	5802541c 	.word	0x5802541c
 800795c:	58025430 	.word	0x58025430
 8007960:	58025444 	.word	0x58025444
 8007964:	58025458 	.word	0x58025458
 8007968:	5802546c 	.word	0x5802546c
 800796c:	58025480 	.word	0x58025480
 8007970:	58025494 	.word	0x58025494
 8007974:	1600963f 	.word	0x1600963f
 8007978:	58025940 	.word	0x58025940
 800797c:	1000823f 	.word	0x1000823f
 8007980:	40020940 	.word	0x40020940

08007984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007984:	b480      	push	{r7}
 8007986:	b089      	sub	sp, #36	; 0x24
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800798e:	2300      	movs	r3, #0
 8007990:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007992:	4b89      	ldr	r3, [pc, #548]	; (8007bb8 <HAL_GPIO_Init+0x234>)
 8007994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007996:	e194      	b.n	8007cc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	2101      	movs	r1, #1
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	fa01 f303 	lsl.w	r3, r1, r3
 80079a4:	4013      	ands	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 8186 	beq.w	8007cbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d00b      	beq.n	80079d0 <HAL_GPIO_Init+0x4c>
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d007      	beq.n	80079d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80079c4:	2b11      	cmp	r3, #17
 80079c6:	d003      	beq.n	80079d0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2b12      	cmp	r3, #18
 80079ce:	d130      	bne.n	8007a32 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	2203      	movs	r2, #3
 80079dc:	fa02 f303 	lsl.w	r3, r2, r3
 80079e0:	43db      	mvns	r3, r3
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	4013      	ands	r3, r2
 80079e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	fa02 f303 	lsl.w	r3, r2, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a06:	2201      	movs	r2, #1
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	43db      	mvns	r3, r3
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	4013      	ands	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	091b      	lsrs	r3, r3, #4
 8007a1c:	f003 0201 	and.w	r2, r3, #1
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	2203      	movs	r2, #3
 8007a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a42:	43db      	mvns	r3, r3
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	4013      	ands	r3, r2
 8007a48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	689a      	ldr	r2, [r3, #8]
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	fa02 f303 	lsl.w	r3, r2, r3
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d003      	beq.n	8007a72 <HAL_GPIO_Init+0xee>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2b12      	cmp	r3, #18
 8007a70:	d123      	bne.n	8007aba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	08da      	lsrs	r2, r3, #3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	3208      	adds	r2, #8
 8007a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	220f      	movs	r2, #15
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	43db      	mvns	r3, r3
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	4013      	ands	r3, r2
 8007a94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	08da      	lsrs	r2, r3, #3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3208      	adds	r2, #8
 8007ab4:	69b9      	ldr	r1, [r7, #24]
 8007ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	43db      	mvns	r3, r3
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f003 0203 	and.w	r2, r3, #3
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 80e0 	beq.w	8007cbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007afc:	4b2f      	ldr	r3, [pc, #188]	; (8007bbc <HAL_GPIO_Init+0x238>)
 8007afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b02:	4a2e      	ldr	r2, [pc, #184]	; (8007bbc <HAL_GPIO_Init+0x238>)
 8007b04:	f043 0302 	orr.w	r3, r3, #2
 8007b08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b0c:	4b2b      	ldr	r3, [pc, #172]	; (8007bbc <HAL_GPIO_Init+0x238>)
 8007b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	60fb      	str	r3, [r7, #12]
 8007b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b1a:	4a29      	ldr	r2, [pc, #164]	; (8007bc0 <HAL_GPIO_Init+0x23c>)
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	089b      	lsrs	r3, r3, #2
 8007b20:	3302      	adds	r3, #2
 8007b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	220f      	movs	r2, #15
 8007b32:	fa02 f303 	lsl.w	r3, r2, r3
 8007b36:	43db      	mvns	r3, r3
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a20      	ldr	r2, [pc, #128]	; (8007bc4 <HAL_GPIO_Init+0x240>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d052      	beq.n	8007bec <HAL_GPIO_Init+0x268>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a1f      	ldr	r2, [pc, #124]	; (8007bc8 <HAL_GPIO_Init+0x244>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d031      	beq.n	8007bb2 <HAL_GPIO_Init+0x22e>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a1e      	ldr	r2, [pc, #120]	; (8007bcc <HAL_GPIO_Init+0x248>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d02b      	beq.n	8007bae <HAL_GPIO_Init+0x22a>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a1d      	ldr	r2, [pc, #116]	; (8007bd0 <HAL_GPIO_Init+0x24c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d025      	beq.n	8007baa <HAL_GPIO_Init+0x226>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a1c      	ldr	r2, [pc, #112]	; (8007bd4 <HAL_GPIO_Init+0x250>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d01f      	beq.n	8007ba6 <HAL_GPIO_Init+0x222>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a1b      	ldr	r2, [pc, #108]	; (8007bd8 <HAL_GPIO_Init+0x254>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d019      	beq.n	8007ba2 <HAL_GPIO_Init+0x21e>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a1a      	ldr	r2, [pc, #104]	; (8007bdc <HAL_GPIO_Init+0x258>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d013      	beq.n	8007b9e <HAL_GPIO_Init+0x21a>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a19      	ldr	r2, [pc, #100]	; (8007be0 <HAL_GPIO_Init+0x25c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00d      	beq.n	8007b9a <HAL_GPIO_Init+0x216>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a18      	ldr	r2, [pc, #96]	; (8007be4 <HAL_GPIO_Init+0x260>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d007      	beq.n	8007b96 <HAL_GPIO_Init+0x212>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <HAL_GPIO_Init+0x264>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d101      	bne.n	8007b92 <HAL_GPIO_Init+0x20e>
 8007b8e:	2309      	movs	r3, #9
 8007b90:	e02d      	b.n	8007bee <HAL_GPIO_Init+0x26a>
 8007b92:	230a      	movs	r3, #10
 8007b94:	e02b      	b.n	8007bee <HAL_GPIO_Init+0x26a>
 8007b96:	2308      	movs	r3, #8
 8007b98:	e029      	b.n	8007bee <HAL_GPIO_Init+0x26a>
 8007b9a:	2307      	movs	r3, #7
 8007b9c:	e027      	b.n	8007bee <HAL_GPIO_Init+0x26a>
 8007b9e:	2306      	movs	r3, #6
 8007ba0:	e025      	b.n	8007bee <HAL_GPIO_Init+0x26a>
 8007ba2:	2305      	movs	r3, #5
 8007ba4:	e023      	b.n	8007bee <HAL_GPIO_Init+0x26a>
 8007ba6:	2304      	movs	r3, #4
 8007ba8:	e021      	b.n	8007bee <HAL_GPIO_Init+0x26a>
 8007baa:	2303      	movs	r3, #3
 8007bac:	e01f      	b.n	8007bee <HAL_GPIO_Init+0x26a>
 8007bae:	2302      	movs	r3, #2
 8007bb0:	e01d      	b.n	8007bee <HAL_GPIO_Init+0x26a>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e01b      	b.n	8007bee <HAL_GPIO_Init+0x26a>
 8007bb6:	bf00      	nop
 8007bb8:	58000080 	.word	0x58000080
 8007bbc:	58024400 	.word	0x58024400
 8007bc0:	58000400 	.word	0x58000400
 8007bc4:	58020000 	.word	0x58020000
 8007bc8:	58020400 	.word	0x58020400
 8007bcc:	58020800 	.word	0x58020800
 8007bd0:	58020c00 	.word	0x58020c00
 8007bd4:	58021000 	.word	0x58021000
 8007bd8:	58021400 	.word	0x58021400
 8007bdc:	58021800 	.word	0x58021800
 8007be0:	58021c00 	.word	0x58021c00
 8007be4:	58022000 	.word	0x58022000
 8007be8:	58022400 	.word	0x58022400
 8007bec:	2300      	movs	r3, #0
 8007bee:	69fa      	ldr	r2, [r7, #28]
 8007bf0:	f002 0203 	and.w	r2, r2, #3
 8007bf4:	0092      	lsls	r2, r2, #2
 8007bf6:	4093      	lsls	r3, r2
 8007bf8:	69ba      	ldr	r2, [r7, #24]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bfe:	4938      	ldr	r1, [pc, #224]	; (8007ce0 <HAL_GPIO_Init+0x35c>)
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	089b      	lsrs	r3, r3, #2
 8007c04:	3302      	adds	r3, #2
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	43db      	mvns	r3, r3
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	43db      	mvns	r3, r3
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	4013      	ands	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f47f ae63 	bne.w	8007998 <HAL_GPIO_Init+0x14>
  }
}
 8007cd2:	bf00      	nop
 8007cd4:	bf00      	nop
 8007cd6:	3724      	adds	r7, #36	; 0x24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	58000400 	.word	0x58000400

08007ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	807b      	strh	r3, [r7, #2]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cf4:	787b      	ldrb	r3, [r7, #1]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cfa:	887a      	ldrh	r2, [r7, #2]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d00:	e003      	b.n	8007d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d02:	887b      	ldrh	r3, [r7, #2]
 8007d04:	041a      	lsls	r2, r3, #16
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	619a      	str	r2, [r3, #24]
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
	...

08007d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e07f      	b.n	8007e2a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d106      	bne.n	8007d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f7fb fcd4 	bl	80036ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2224      	movs	r2, #36	; 0x24
 8007d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0201 	bic.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d107      	bne.n	8007d92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689a      	ldr	r2, [r3, #8]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d8e:	609a      	str	r2, [r3, #8]
 8007d90:	e006      	b.n	8007da0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007d9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d104      	bne.n	8007db2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007db0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6859      	ldr	r1, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	4b1d      	ldr	r3, [pc, #116]	; (8007e34 <HAL_I2C_Init+0x11c>)
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691a      	ldr	r2, [r3, #16]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	ea42 0103 	orr.w	r1, r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	021a      	lsls	r2, r3, #8
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	69d9      	ldr	r1, [r3, #28]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1a      	ldr	r2, [r3, #32]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0201 	orr.w	r2, r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	02008000 	.word	0x02008000

08007e38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af02      	add	r7, sp, #8
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	4608      	mov	r0, r1
 8007e42:	4611      	mov	r1, r2
 8007e44:	461a      	mov	r2, r3
 8007e46:	4603      	mov	r3, r0
 8007e48:	817b      	strh	r3, [r7, #10]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	813b      	strh	r3, [r7, #8]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b20      	cmp	r3, #32
 8007e5c:	f040 80f9 	bne.w	8008052 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <HAL_I2C_Mem_Write+0x34>
 8007e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d105      	bne.n	8007e78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e0ed      	b.n	8008054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d101      	bne.n	8007e86 <HAL_I2C_Mem_Write+0x4e>
 8007e82:	2302      	movs	r3, #2
 8007e84:	e0e6      	b.n	8008054 <HAL_I2C_Mem_Write+0x21c>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e8e:	f7fc fdd9 	bl	8004a44 <HAL_GetTick>
 8007e92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	2319      	movs	r3, #25
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f001 fee3 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e0d1      	b.n	8008054 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2221      	movs	r2, #33	; 0x21
 8007eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2240      	movs	r2, #64	; 0x40
 8007ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6a3a      	ldr	r2, [r7, #32]
 8007eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ed8:	88f8      	ldrh	r0, [r7, #6]
 8007eda:	893a      	ldrh	r2, [r7, #8]
 8007edc:	8979      	ldrh	r1, [r7, #10]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 ff23 	bl	8008d34 <I2C_RequestMemoryWrite>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d005      	beq.n	8007f00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e0a9      	b.n	8008054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2bff      	cmp	r3, #255	; 0xff
 8007f08:	d90e      	bls.n	8007f28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	22ff      	movs	r2, #255	; 0xff
 8007f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	8979      	ldrh	r1, [r7, #10]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f001 ffc5 	bl	8009eb0 <I2C_TransferConfig>
 8007f26:	e00f      	b.n	8007f48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	8979      	ldrh	r1, [r7, #10]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f001 ffb4 	bl	8009eb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f001 fecd 	bl	8009cec <I2C_WaitOnTXISFlagUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e07b      	b.n	8008054 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f60:	781a      	ldrb	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d034      	beq.n	8008000 <HAL_I2C_Mem_Write+0x1c8>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d130      	bne.n	8008000 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2180      	movs	r1, #128	; 0x80
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f001 fe5f 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e04d      	b.n	8008054 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2bff      	cmp	r3, #255	; 0xff
 8007fc0:	d90e      	bls.n	8007fe0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	22ff      	movs	r2, #255	; 0xff
 8007fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	8979      	ldrh	r1, [r7, #10]
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f001 ff69 	bl	8009eb0 <I2C_TransferConfig>
 8007fde:	e00f      	b.n	8008000 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	8979      	ldrh	r1, [r7, #10]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f001 ff58 	bl	8009eb0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008004:	b29b      	uxth	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d19e      	bne.n	8007f48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f001 feac 	bl	8009d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d001      	beq.n	800801e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e01a      	b.n	8008054 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2220      	movs	r2, #32
 8008024:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6859      	ldr	r1, [r3, #4]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	4b0a      	ldr	r3, [pc, #40]	; (800805c <HAL_I2C_Mem_Write+0x224>)
 8008032:	400b      	ands	r3, r1
 8008034:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2220      	movs	r2, #32
 800803a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	e000      	b.n	8008054 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008052:	2302      	movs	r3, #2
  }
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	fe00e800 	.word	0xfe00e800

08008060 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b088      	sub	sp, #32
 8008064:	af02      	add	r7, sp, #8
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	4608      	mov	r0, r1
 800806a:	4611      	mov	r1, r2
 800806c:	461a      	mov	r2, r3
 800806e:	4603      	mov	r3, r0
 8008070:	817b      	strh	r3, [r7, #10]
 8008072:	460b      	mov	r3, r1
 8008074:	813b      	strh	r3, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b20      	cmp	r3, #32
 8008084:	f040 80fd 	bne.w	8008282 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <HAL_I2C_Mem_Read+0x34>
 800808e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	d105      	bne.n	80080a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800809a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e0f1      	b.n	8008284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d101      	bne.n	80080ae <HAL_I2C_Mem_Read+0x4e>
 80080aa:	2302      	movs	r3, #2
 80080ac:	e0ea      	b.n	8008284 <HAL_I2C_Mem_Read+0x224>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80080b6:	f7fc fcc5 	bl	8004a44 <HAL_GetTick>
 80080ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	2319      	movs	r3, #25
 80080c2:	2201      	movs	r2, #1
 80080c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f001 fdcf 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e0d5      	b.n	8008284 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2222      	movs	r2, #34	; 0x22
 80080dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2240      	movs	r2, #64	; 0x40
 80080e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a3a      	ldr	r2, [r7, #32]
 80080f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80080f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008100:	88f8      	ldrh	r0, [r7, #6]
 8008102:	893a      	ldrh	r2, [r7, #8]
 8008104:	8979      	ldrh	r1, [r7, #10]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	4603      	mov	r3, r0
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 fe63 	bl	8008ddc <I2C_RequestMemoryRead>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e0ad      	b.n	8008284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800812c:	b29b      	uxth	r3, r3
 800812e:	2bff      	cmp	r3, #255	; 0xff
 8008130:	d90e      	bls.n	8008150 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	22ff      	movs	r2, #255	; 0xff
 8008136:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800813c:	b2da      	uxtb	r2, r3
 800813e:	8979      	ldrh	r1, [r7, #10]
 8008140:	4b52      	ldr	r3, [pc, #328]	; (800828c <HAL_I2C_Mem_Read+0x22c>)
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f001 feb1 	bl	8009eb0 <I2C_TransferConfig>
 800814e:	e00f      	b.n	8008170 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800815e:	b2da      	uxtb	r2, r3
 8008160:	8979      	ldrh	r1, [r7, #10]
 8008162:	4b4a      	ldr	r3, [pc, #296]	; (800828c <HAL_I2C_Mem_Read+0x22c>)
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f001 fea0 	bl	8009eb0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008176:	2200      	movs	r2, #0
 8008178:	2104      	movs	r1, #4
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f001 fd76 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e07c      	b.n	8008284 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	b2d2      	uxtb	r2, r2
 8008196:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a6:	3b01      	subs	r3, #1
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	3b01      	subs	r3, #1
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d034      	beq.n	8008230 <HAL_I2C_Mem_Read+0x1d0>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d130      	bne.n	8008230 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d4:	2200      	movs	r2, #0
 80081d6:	2180      	movs	r1, #128	; 0x80
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f001 fd47 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e04d      	b.n	8008284 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	2bff      	cmp	r3, #255	; 0xff
 80081f0:	d90e      	bls.n	8008210 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	22ff      	movs	r2, #255	; 0xff
 80081f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	8979      	ldrh	r1, [r7, #10]
 8008200:	2300      	movs	r3, #0
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f001 fe51 	bl	8009eb0 <I2C_TransferConfig>
 800820e:	e00f      	b.n	8008230 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008214:	b29a      	uxth	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800821e:	b2da      	uxtb	r2, r3
 8008220:	8979      	ldrh	r1, [r7, #10]
 8008222:	2300      	movs	r3, #0
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f001 fe40 	bl	8009eb0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d19a      	bne.n	8008170 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f001 fd94 	bl	8009d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e01a      	b.n	8008284 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2220      	movs	r2, #32
 8008254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6859      	ldr	r1, [r3, #4]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <HAL_I2C_Mem_Read+0x230>)
 8008262:	400b      	ands	r3, r1
 8008264:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2220      	movs	r2, #32
 800826a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	e000      	b.n	8008284 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008282:	2302      	movs	r3, #2
  }
}
 8008284:	4618      	mov	r0, r3
 8008286:	3718      	adds	r7, #24
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	80002400 	.word	0x80002400
 8008290:	fe00e800 	.word	0xfe00e800

08008294 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08a      	sub	sp, #40	; 0x28
 8008298:	af02      	add	r7, sp, #8
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	4608      	mov	r0, r1
 800829e:	4611      	mov	r1, r2
 80082a0:	461a      	mov	r2, r3
 80082a2:	4603      	mov	r3, r0
 80082a4:	817b      	strh	r3, [r7, #10]
 80082a6:	460b      	mov	r3, r1
 80082a8:	813b      	strh	r3, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b20      	cmp	r3, #32
 80082b8:	f040 80d5 	bne.w	8008466 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <HAL_I2C_Mem_Read_DMA+0x34>
 80082c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d105      	bne.n	80082d4 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e0c9      	b.n	8008468 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082e2:	d101      	bne.n	80082e8 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 80082e4:	2302      	movs	r3, #2
 80082e6:	e0bf      	b.n	8008468 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <HAL_I2C_Mem_Read_DMA+0x62>
 80082f2:	2302      	movs	r3, #2
 80082f4:	e0b8      	b.n	8008468 <HAL_I2C_Mem_Read_DMA+0x1d4>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80082fe:	f7fc fba1 	bl	8004a44 <HAL_GetTick>
 8008302:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2222      	movs	r2, #34	; 0x22
 8008308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2240      	movs	r2, #64	; 0x40
 8008310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800831e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4a51      	ldr	r2, [pc, #324]	; (8008470 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 800832a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4a51      	ldr	r2, [pc, #324]	; (8008474 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8008330:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008336:	b29b      	uxth	r3, r3
 8008338:	2bff      	cmp	r3, #255	; 0xff
 800833a:	d906      	bls.n	800834a <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	22ff      	movs	r2, #255	; 0xff
 8008340:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008342:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008346:	61fb      	str	r3, [r7, #28]
 8008348:	e007      	b.n	800835a <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800834e:	b29a      	uxth	r2, r3
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008358:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800835a:	88f8      	ldrh	r0, [r7, #6]
 800835c:	893a      	ldrh	r2, [r7, #8]
 800835e:	8979      	ldrh	r1, [r7, #10]
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	9301      	str	r3, [sp, #4]
 8008364:	2319      	movs	r3, #25
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	4603      	mov	r3, r0
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fd36 	bl	8008ddc <I2C_RequestMemoryRead>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e072      	b.n	8008468 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d020      	beq.n	80083cc <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838e:	4a3a      	ldr	r2, [pc, #232]	; (8008478 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8008390:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008396:	4a39      	ldr	r2, [pc, #228]	; (800847c <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8008398:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839e:	2200      	movs	r2, #0
 80083a0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a6:	2200      	movs	r2, #0
 80083a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3324      	adds	r3, #36	; 0x24
 80083b4:	4619      	mov	r1, r3
 80083b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083bc:	f7fc ffea 	bl	8005394 <HAL_DMA_Start_IT>
 80083c0:	4603      	mov	r3, r0
 80083c2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d139      	bne.n	800843e <HAL_I2C_Mem_Read_DMA+0x1aa>
 80083ca:	e013      	b.n	80083f4 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e039      	b.n	8008468 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	8979      	ldrh	r1, [r7, #10]
 80083fc:	4b20      	ldr	r3, [pc, #128]	; (8008480 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f001 fd54 	bl	8009eb0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	b29a      	uxth	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008422:	2110      	movs	r1, #16
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f001 fd71 	bl	8009f0c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008438:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	e014      	b.n	8008468 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2220      	movs	r2, #32
 8008442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008452:	f043 0210 	orr.w	r2, r3, #16
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e000      	b.n	8008468 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8008466:	2302      	movs	r3, #2
  }
}
 8008468:	4618      	mov	r0, r3
 800846a:	3720      	adds	r7, #32
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	ffff0000 	.word	0xffff0000
 8008474:	0800878f 	.word	0x0800878f
 8008478:	0800992b 	.word	0x0800992b
 800847c:	080099c1 	.word	0x080099c1
 8008480:	80002400 	.word	0x80002400

08008484 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	68f9      	ldr	r1, [r7, #12]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	4798      	blx	r3
  }
}
 80084b0:	bf00      	nop
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
 8008514:	4613      	mov	r3, r2
 8008516:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <I2C_Slave_ISR_IT+0x24>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e0ec      	b.n	8008786 <I2C_Slave_ISR_IT+0x1fe>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d009      	beq.n	80085d4 <I2C_Slave_ISR_IT+0x4c>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80085cc:	6939      	ldr	r1, [r7, #16]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fe42 	bl	8009258 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	091b      	lsrs	r3, r3, #4
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d04d      	beq.n	800867c <I2C_Slave_ISR_IT+0xf4>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	091b      	lsrs	r3, r3, #4
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d047      	beq.n	800867c <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d128      	bne.n	8008648 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b28      	cmp	r3, #40	; 0x28
 8008600:	d108      	bne.n	8008614 <I2C_Slave_ISR_IT+0x8c>
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008608:	d104      	bne.n	8008614 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800860a:	6939      	ldr	r1, [r7, #16]
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f001 f81b 	bl	8009648 <I2C_ITListenCplt>
 8008612:	e032      	b.n	800867a <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b29      	cmp	r3, #41	; 0x29
 800861e:	d10e      	bne.n	800863e <I2C_Slave_ISR_IT+0xb6>
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008626:	d00a      	beq.n	800863e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2210      	movs	r2, #16
 800862e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f001 f956 	bl	80098e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 fce5 	bl	8009006 <I2C_ITSlaveSeqCplt>
 800863c:	e01d      	b.n	800867a <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2210      	movs	r2, #16
 8008644:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008646:	e096      	b.n	8008776 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2210      	movs	r2, #16
 800864e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008654:	f043 0204 	orr.w	r2, r3, #4
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d004      	beq.n	800866c <I2C_Slave_ISR_IT+0xe4>
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008668:	f040 8085 	bne.w	8008776 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008670:	4619      	mov	r1, r3
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f001 f83e 	bl	80096f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008678:	e07d      	b.n	8008776 <I2C_Slave_ISR_IT+0x1ee>
 800867a:	e07c      	b.n	8008776 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	089b      	lsrs	r3, r3, #2
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b00      	cmp	r3, #0
 8008686:	d030      	beq.n	80086ea <I2C_Slave_ISR_IT+0x162>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	089b      	lsrs	r3, r3, #2
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	d02a      	beq.n	80086ea <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008698:	b29b      	uxth	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d018      	beq.n	80086d0 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	b2d2      	uxtb	r2, r2
 80086aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	1c5a      	adds	r2, r3, #1
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ba:	3b01      	subs	r3, #1
 80086bc:	b29a      	uxth	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	3b01      	subs	r3, #1
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d14f      	bne.n	800877a <I2C_Slave_ISR_IT+0x1f2>
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086e0:	d04b      	beq.n	800877a <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f000 fc8f 	bl	8009006 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80086e8:	e047      	b.n	800877a <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	08db      	lsrs	r3, r3, #3
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	08db      	lsrs	r3, r3, #3
 80086fa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d004      	beq.n	800870c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008702:	6939      	ldr	r1, [r7, #16]
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f000 fbbd 	bl	8008e84 <I2C_ITAddrCplt>
 800870a:	e037      	b.n	800877c <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	085b      	lsrs	r3, r3, #1
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d031      	beq.n	800877c <I2C_Slave_ISR_IT+0x1f4>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	085b      	lsrs	r3, r3, #1
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	d02b      	beq.n	800877c <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008728:	b29b      	uxth	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	d018      	beq.n	8008760 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008732:	781a      	ldrb	r2, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008748:	b29b      	uxth	r3, r3
 800874a:	3b01      	subs	r3, #1
 800874c:	b29a      	uxth	r2, r3
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008756:	3b01      	subs	r3, #1
 8008758:	b29a      	uxth	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	851a      	strh	r2, [r3, #40]	; 0x28
 800875e:	e00d      	b.n	800877c <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008766:	d002      	beq.n	800876e <I2C_Slave_ISR_IT+0x1e6>
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d106      	bne.n	800877c <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fc49 	bl	8009006 <I2C_ITSlaveSeqCplt>
 8008774:	e002      	b.n	800877c <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008776:	bf00      	nop
 8008778:	e000      	b.n	800877c <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800877a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b088      	sub	sp, #32
 8008792:	af02      	add	r7, sp, #8
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	60b9      	str	r1, [r7, #8]
 8008798:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <I2C_Master_ISR_DMA+0x1a>
 80087a4:	2302      	movs	r3, #2
 80087a6:	e0e1      	b.n	800896c <I2C_Master_ISR_DMA+0x1de>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	091b      	lsrs	r3, r3, #4
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d017      	beq.n	80087ec <I2C_Master_ISR_DMA+0x5e>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	091b      	lsrs	r3, r3, #4
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d011      	beq.n	80087ec <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2210      	movs	r2, #16
 80087ce:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d4:	f043 0204 	orr.w	r2, r3, #4
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80087dc:	2120      	movs	r1, #32
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f001 fb94 	bl	8009f0c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f001 f87c 	bl	80098e2 <I2C_Flush_TXDR>
 80087ea:	e0ba      	b.n	8008962 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	09db      	lsrs	r3, r3, #7
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d072      	beq.n	80088de <I2C_Master_ISR_DMA+0x150>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	099b      	lsrs	r3, r3, #6
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b00      	cmp	r3, #0
 8008802:	d06c      	beq.n	80088de <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008812:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008818:	b29b      	uxth	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d04e      	beq.n	80088bc <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	b29b      	uxth	r3, r3
 8008826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800882a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008830:	b29b      	uxth	r3, r3
 8008832:	2bff      	cmp	r3, #255	; 0xff
 8008834:	d906      	bls.n	8008844 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	22ff      	movs	r2, #255	; 0xff
 800883a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800883c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008840:	617b      	str	r3, [r7, #20]
 8008842:	e010      	b.n	8008866 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008848:	b29a      	uxth	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008856:	d003      	beq.n	8008860 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885c:	617b      	str	r3, [r7, #20]
 800885e:	e002      	b.n	8008866 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008860:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008864:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800886a:	b2da      	uxtb	r2, r3
 800886c:	8a79      	ldrh	r1, [r7, #18]
 800886e:	2300      	movs	r3, #0
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f001 fb1b 	bl	8009eb0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887e:	b29a      	uxth	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	b29a      	uxth	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b22      	cmp	r3, #34	; 0x22
 8008896:	d108      	bne.n	80088aa <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088a6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80088a8:	e05b      	b.n	8008962 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088b8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80088ba:	e052      	b.n	8008962 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ca:	d003      	beq.n	80088d4 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 fb5d 	bl	8008f8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80088d2:	e046      	b.n	8008962 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80088d4:	2140      	movs	r1, #64	; 0x40
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 ff0c 	bl	80096f4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80088dc:	e041      	b.n	8008962 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	099b      	lsrs	r3, r3, #6
 80088e2:	f003 0301 	and.w	r3, r3, #1
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d029      	beq.n	800893e <I2C_Master_ISR_DMA+0x1b0>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	099b      	lsrs	r3, r3, #6
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d023      	beq.n	800893e <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d119      	bne.n	8008934 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800890a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800890e:	d027      	beq.n	8008960 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008918:	d108      	bne.n	800892c <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008928:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800892a:	e019      	b.n	8008960 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 fb2d 	bl	8008f8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008932:	e015      	b.n	8008960 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008934:	2140      	movs	r1, #64	; 0x40
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 fedc 	bl	80096f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800893c:	e010      	b.n	8008960 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <I2C_Master_ISR_DMA+0x1d4>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	095b      	lsrs	r3, r3, #5
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 fbb3 	bl	80090c4 <I2C_ITMasterCplt>
 800895e:	e000      	b.n	8008962 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008960:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008986:	2300      	movs	r3, #0
 8008988:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008990:	2b01      	cmp	r3, #1
 8008992:	d101      	bne.n	8008998 <I2C_Slave_ISR_DMA+0x24>
 8008994:	2302      	movs	r3, #2
 8008996:	e1c8      	b.n	8008d2a <I2C_Slave_ISR_DMA+0x3b6>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	095b      	lsrs	r3, r3, #5
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d009      	beq.n	80089c0 <I2C_Slave_ISR_DMA+0x4c>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	095b      	lsrs	r3, r3, #5
 80089b0:	f003 0301 	and.w	r3, r3, #1
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d003      	beq.n	80089c0 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80089b8:	68b9      	ldr	r1, [r7, #8]
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f000 fc4c 	bl	8009258 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	091b      	lsrs	r3, r3, #4
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8199 	beq.w	8008d00 <I2C_Slave_ISR_DMA+0x38c>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	091b      	lsrs	r3, r3, #4
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f000 8192 	beq.w	8008d00 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	0b9b      	lsrs	r3, r3, #14
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d106      	bne.n	80089f6 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	0bdb      	lsrs	r3, r3, #15
 80089ec:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 817e 	beq.w	8008cf2 <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d07c      	beq.n	8008af8 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	0bdb      	lsrs	r3, r3, #15
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d076      	beq.n	8008af8 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a8d      	ldr	r2, [pc, #564]	; (8008c48 <I2C_Slave_ISR_DMA+0x2d4>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d059      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a8b      	ldr	r2, [pc, #556]	; (8008c4c <I2C_Slave_ISR_DMA+0x2d8>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d053      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a89      	ldr	r2, [pc, #548]	; (8008c50 <I2C_Slave_ISR_DMA+0x2dc>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d04d      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a87      	ldr	r2, [pc, #540]	; (8008c54 <I2C_Slave_ISR_DMA+0x2e0>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d047      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a85      	ldr	r2, [pc, #532]	; (8008c58 <I2C_Slave_ISR_DMA+0x2e4>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d041      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a83      	ldr	r2, [pc, #524]	; (8008c5c <I2C_Slave_ISR_DMA+0x2e8>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d03b      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a81      	ldr	r2, [pc, #516]	; (8008c60 <I2C_Slave_ISR_DMA+0x2ec>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d035      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a7f      	ldr	r2, [pc, #508]	; (8008c64 <I2C_Slave_ISR_DMA+0x2f0>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d02f      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a7d      	ldr	r2, [pc, #500]	; (8008c68 <I2C_Slave_ISR_DMA+0x2f4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d029      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a7b      	ldr	r2, [pc, #492]	; (8008c6c <I2C_Slave_ISR_DMA+0x2f8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d023      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a79      	ldr	r2, [pc, #484]	; (8008c70 <I2C_Slave_ISR_DMA+0x2fc>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d01d      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a77      	ldr	r2, [pc, #476]	; (8008c74 <I2C_Slave_ISR_DMA+0x300>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d017      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a75      	ldr	r2, [pc, #468]	; (8008c78 <I2C_Slave_ISR_DMA+0x304>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d011      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a73      	ldr	r2, [pc, #460]	; (8008c7c <I2C_Slave_ISR_DMA+0x308>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00b      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a71      	ldr	r2, [pc, #452]	; (8008c80 <I2C_Slave_ISR_DMA+0x30c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d005      	beq.n	8008aca <I2C_Slave_ISR_DMA+0x156>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a6f      	ldr	r2, [pc, #444]	; (8008c84 <I2C_Slave_ISR_DMA+0x310>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d109      	bne.n	8008ade <I2C_Slave_ISR_DMA+0x16a>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	bf0c      	ite	eq
 8008ad6:	2301      	moveq	r3, #1
 8008ad8:	2300      	movne	r3, #0
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	e008      	b.n	8008af0 <I2C_Slave_ISR_DMA+0x17c>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	bf0c      	ite	eq
 8008aea:	2301      	moveq	r3, #1
 8008aec:	2300      	movne	r3, #0
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8008af4:	2301      	movs	r3, #1
 8008af6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d07c      	beq.n	8008bfa <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	0b9b      	lsrs	r3, r3, #14
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d076      	beq.n	8008bfa <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a4d      	ldr	r2, [pc, #308]	; (8008c48 <I2C_Slave_ISR_DMA+0x2d4>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d059      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a4b      	ldr	r2, [pc, #300]	; (8008c4c <I2C_Slave_ISR_DMA+0x2d8>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d053      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a49      	ldr	r2, [pc, #292]	; (8008c50 <I2C_Slave_ISR_DMA+0x2dc>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d04d      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a47      	ldr	r2, [pc, #284]	; (8008c54 <I2C_Slave_ISR_DMA+0x2e0>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d047      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a45      	ldr	r2, [pc, #276]	; (8008c58 <I2C_Slave_ISR_DMA+0x2e4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d041      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a43      	ldr	r2, [pc, #268]	; (8008c5c <I2C_Slave_ISR_DMA+0x2e8>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d03b      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a41      	ldr	r2, [pc, #260]	; (8008c60 <I2C_Slave_ISR_DMA+0x2ec>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d035      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a3f      	ldr	r2, [pc, #252]	; (8008c64 <I2C_Slave_ISR_DMA+0x2f0>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d02f      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a3d      	ldr	r2, [pc, #244]	; (8008c68 <I2C_Slave_ISR_DMA+0x2f4>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d029      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a3b      	ldr	r2, [pc, #236]	; (8008c6c <I2C_Slave_ISR_DMA+0x2f8>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d023      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a39      	ldr	r2, [pc, #228]	; (8008c70 <I2C_Slave_ISR_DMA+0x2fc>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d01d      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a37      	ldr	r2, [pc, #220]	; (8008c74 <I2C_Slave_ISR_DMA+0x300>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d017      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a35      	ldr	r2, [pc, #212]	; (8008c78 <I2C_Slave_ISR_DMA+0x304>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d011      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a33      	ldr	r2, [pc, #204]	; (8008c7c <I2C_Slave_ISR_DMA+0x308>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d00b      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a31      	ldr	r2, [pc, #196]	; (8008c80 <I2C_Slave_ISR_DMA+0x30c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d005      	beq.n	8008bcc <I2C_Slave_ISR_DMA+0x258>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a2f      	ldr	r2, [pc, #188]	; (8008c84 <I2C_Slave_ISR_DMA+0x310>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d109      	bne.n	8008be0 <I2C_Slave_ISR_DMA+0x26c>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	bf0c      	ite	eq
 8008bd8:	2301      	moveq	r3, #1
 8008bda:	2300      	movne	r3, #0
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	e008      	b.n	8008bf2 <I2C_Slave_ISR_DMA+0x27e>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	bf0c      	ite	eq
 8008bec:	2301      	moveq	r3, #1
 8008bee:	2300      	movne	r3, #0
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d148      	bne.n	8008c92 <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b28      	cmp	r3, #40	; 0x28
 8008c0a:	d108      	bne.n	8008c1e <I2C_Slave_ISR_DMA+0x2aa>
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c12:	d104      	bne.n	8008c1e <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008c14:	68b9      	ldr	r1, [r7, #8]
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f000 fd16 	bl	8009648 <I2C_ITListenCplt>
 8008c1c:	e068      	b.n	8008cf0 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b29      	cmp	r3, #41	; 0x29
 8008c28:	d12e      	bne.n	8008c88 <I2C_Slave_ISR_DMA+0x314>
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c30:	d02a      	beq.n	8008c88 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2210      	movs	r2, #16
 8008c38:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 fe51 	bl	80098e2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 f9e0 	bl	8009006 <I2C_ITSlaveSeqCplt>
 8008c46:	e053      	b.n	8008cf0 <I2C_Slave_ISR_DMA+0x37c>
 8008c48:	40020010 	.word	0x40020010
 8008c4c:	40020028 	.word	0x40020028
 8008c50:	40020040 	.word	0x40020040
 8008c54:	40020058 	.word	0x40020058
 8008c58:	40020070 	.word	0x40020070
 8008c5c:	40020088 	.word	0x40020088
 8008c60:	400200a0 	.word	0x400200a0
 8008c64:	400200b8 	.word	0x400200b8
 8008c68:	40020410 	.word	0x40020410
 8008c6c:	40020428 	.word	0x40020428
 8008c70:	40020440 	.word	0x40020440
 8008c74:	40020458 	.word	0x40020458
 8008c78:	40020470 	.word	0x40020470
 8008c7c:	40020488 	.word	0x40020488
 8008c80:	400204a0 	.word	0x400204a0
 8008c84:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2210      	movs	r2, #16
 8008c8e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008c90:	e034      	b.n	8008cfc <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2210      	movs	r2, #16
 8008c98:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9e:	f043 0204 	orr.w	r2, r3, #4
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <I2C_Slave_ISR_DMA+0x348>
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cba:	d11f      	bne.n	8008cfc <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008cbc:	7dfb      	ldrb	r3, [r7, #23]
 8008cbe:	2b21      	cmp	r3, #33	; 0x21
 8008cc0:	d002      	beq.n	8008cc8 <I2C_Slave_ISR_DMA+0x354>
 8008cc2:	7dfb      	ldrb	r3, [r7, #23]
 8008cc4:	2b29      	cmp	r3, #41	; 0x29
 8008cc6:	d103      	bne.n	8008cd0 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2221      	movs	r2, #33	; 0x21
 8008ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8008cce:	e008      	b.n	8008ce2 <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
 8008cd2:	2b22      	cmp	r3, #34	; 0x22
 8008cd4:	d002      	beq.n	8008cdc <I2C_Slave_ISR_DMA+0x368>
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
 8008cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cda:	d102      	bne.n	8008ce2 <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2222      	movs	r2, #34	; 0x22
 8008ce0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 fd03 	bl	80096f4 <I2C_ITError>
      if (treatdmanack == 1U)
 8008cee:	e005      	b.n	8008cfc <I2C_Slave_ISR_DMA+0x388>
 8008cf0:	e004      	b.n	8008cfc <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2210      	movs	r2, #16
 8008cf8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008cfa:	e011      	b.n	8008d20 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8008cfc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008cfe:	e00f      	b.n	8008d20 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	08db      	lsrs	r3, r3, #3
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d009      	beq.n	8008d20 <I2C_Slave_ISR_DMA+0x3ac>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	08db      	lsrs	r3, r3, #3
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008d18:	68b9      	ldr	r1, [r7, #8]
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 f8b2 	bl	8008e84 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop

08008d34 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af02      	add	r7, sp, #8
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	4611      	mov	r1, r2
 8008d40:	461a      	mov	r2, r3
 8008d42:	4603      	mov	r3, r0
 8008d44:	817b      	strh	r3, [r7, #10]
 8008d46:	460b      	mov	r3, r1
 8008d48:	813b      	strh	r3, [r7, #8]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008d4e:	88fb      	ldrh	r3, [r7, #6]
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	8979      	ldrh	r1, [r7, #10]
 8008d54:	4b20      	ldr	r3, [pc, #128]	; (8008dd8 <I2C_RequestMemoryWrite+0xa4>)
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f001 f8a7 	bl	8009eb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d62:	69fa      	ldr	r2, [r7, #28]
 8008d64:	69b9      	ldr	r1, [r7, #24]
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 ffc0 	bl	8009cec <I2C_WaitOnTXISFlagUntilTimeout>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e02c      	b.n	8008dd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d76:	88fb      	ldrh	r3, [r7, #6]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d105      	bne.n	8008d88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d7c:	893b      	ldrh	r3, [r7, #8]
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	629a      	str	r2, [r3, #40]	; 0x28
 8008d86:	e015      	b.n	8008db4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d88:	893b      	ldrh	r3, [r7, #8]
 8008d8a:	0a1b      	lsrs	r3, r3, #8
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d96:	69fa      	ldr	r2, [r7, #28]
 8008d98:	69b9      	ldr	r1, [r7, #24]
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f000 ffa6 	bl	8009cec <I2C_WaitOnTXISFlagUntilTimeout>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e012      	b.n	8008dd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008daa:	893b      	ldrh	r3, [r7, #8]
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2180      	movs	r1, #128	; 0x80
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f000 ff54 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e000      	b.n	8008dd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	80002000 	.word	0x80002000

08008ddc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af02      	add	r7, sp, #8
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	4608      	mov	r0, r1
 8008de6:	4611      	mov	r1, r2
 8008de8:	461a      	mov	r2, r3
 8008dea:	4603      	mov	r3, r0
 8008dec:	817b      	strh	r3, [r7, #10]
 8008dee:	460b      	mov	r3, r1
 8008df0:	813b      	strh	r3, [r7, #8]
 8008df2:	4613      	mov	r3, r2
 8008df4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008df6:	88fb      	ldrh	r3, [r7, #6]
 8008df8:	b2da      	uxtb	r2, r3
 8008dfa:	8979      	ldrh	r1, [r7, #10]
 8008dfc:	4b20      	ldr	r3, [pc, #128]	; (8008e80 <I2C_RequestMemoryRead+0xa4>)
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	2300      	movs	r3, #0
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f001 f854 	bl	8009eb0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	69b9      	ldr	r1, [r7, #24]
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 ff6d 	bl	8009cec <I2C_WaitOnTXISFlagUntilTimeout>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e02c      	b.n	8008e76 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008e1c:	88fb      	ldrh	r3, [r7, #6]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d105      	bne.n	8008e2e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e22:	893b      	ldrh	r3, [r7, #8]
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	629a      	str	r2, [r3, #40]	; 0x28
 8008e2c:	e015      	b.n	8008e5a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008e2e:	893b      	ldrh	r3, [r7, #8]
 8008e30:	0a1b      	lsrs	r3, r3, #8
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e3c:	69fa      	ldr	r2, [r7, #28]
 8008e3e:	69b9      	ldr	r1, [r7, #24]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 ff53 	bl	8009cec <I2C_WaitOnTXISFlagUntilTimeout>
 8008e46:	4603      	mov	r3, r0
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d001      	beq.n	8008e50 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e012      	b.n	8008e76 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e50:	893b      	ldrh	r3, [r7, #8]
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	2200      	movs	r2, #0
 8008e62:	2140      	movs	r1, #64	; 0x40
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 ff01 	bl	8009c6c <I2C_WaitOnFlagUntilTimeout>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e000      	b.n	8008e76 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	80002000 	.word	0x80002000

08008e84 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008e9a:	2b28      	cmp	r3, #40	; 0x28
 8008e9c:	d16a      	bne.n	8008f74 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	0c1b      	lsrs	r3, r3, #16
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008ebc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eca:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008ed8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d138      	bne.n	8008f54 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008ee2:	897b      	ldrh	r3, [r7, #10]
 8008ee4:	09db      	lsrs	r3, r3, #7
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	89bb      	ldrh	r3, [r7, #12]
 8008eea:	4053      	eors	r3, r2
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	f003 0306 	and.w	r3, r3, #6
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d11c      	bne.n	8008f30 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008ef6:	897b      	ldrh	r3, [r7, #10]
 8008ef8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d13b      	bne.n	8008f84 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2208      	movs	r2, #8
 8008f18:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f22:	89ba      	ldrh	r2, [r7, #12]
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7ff faed 	bl	8008508 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008f2e:	e029      	b.n	8008f84 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008f30:	893b      	ldrh	r3, [r7, #8]
 8008f32:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008f34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f001 f84b 	bl	8009fd4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f46:	89ba      	ldrh	r2, [r7, #12]
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7ff fadb 	bl	8008508 <HAL_I2C_AddrCallback>
}
 8008f52:	e017      	b.n	8008f84 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f83b 	bl	8009fd4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008f66:	89ba      	ldrh	r2, [r7, #12]
 8008f68:	7bfb      	ldrb	r3, [r7, #15]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff facb 	bl	8008508 <HAL_I2C_AddrCallback>
}
 8008f72:	e007      	b.n	8008f84 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2208      	movs	r2, #8
 8008f7a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008f84:	bf00      	nop
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	2b21      	cmp	r3, #33	; 0x21
 8008fa6:	d115      	bne.n	8008fd4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2211      	movs	r2, #17
 8008fb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 f808 	bl	8009fd4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff fa73 	bl	80084b8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008fd2:	e014      	b.n	8008ffe <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2212      	movs	r2, #18
 8008fe0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008fe8:	2102      	movs	r1, #2
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fff2 	bl	8009fd4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff fa67 	bl	80084cc <HAL_I2C_MasterRxCpltCallback>
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	0b9b      	lsrs	r3, r3, #14
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d008      	beq.n	800903c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009038:	601a      	str	r2, [r3, #0]
 800903a:	e00d      	b.n	8009058 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	0bdb      	lsrs	r3, r3, #15
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b00      	cmp	r3, #0
 8009046:	d007      	beq.n	8009058 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009056:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800905e:	b2db      	uxtb	r3, r3
 8009060:	2b29      	cmp	r3, #41	; 0x29
 8009062:	d112      	bne.n	800908a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2228      	movs	r2, #40	; 0x28
 8009068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2221      	movs	r2, #33	; 0x21
 8009070:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009072:	2101      	movs	r1, #1
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 ffad 	bl	8009fd4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f7ff fa2c 	bl	80084e0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009088:	e017      	b.n	80090ba <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b2a      	cmp	r3, #42	; 0x2a
 8009094:	d111      	bne.n	80090ba <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2228      	movs	r2, #40	; 0x28
 800909a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2222      	movs	r2, #34	; 0x22
 80090a2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80090a4:	2102      	movs	r1, #2
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 ff94 	bl	8009fd4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff fa1d 	bl	80084f4 <HAL_I2C_SlaveRxCpltCallback>
}
 80090ba:	bf00      	nop
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2220      	movs	r2, #32
 80090d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b21      	cmp	r3, #33	; 0x21
 80090e4:	d107      	bne.n	80090f6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80090e6:	2101      	movs	r1, #1
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 ff73 	bl	8009fd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2211      	movs	r2, #17
 80090f2:	631a      	str	r2, [r3, #48]	; 0x30
 80090f4:	e00c      	b.n	8009110 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b22      	cmp	r3, #34	; 0x22
 8009100:	d106      	bne.n	8009110 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009102:	2102      	movs	r1, #2
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 ff65 	bl	8009fd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2212      	movs	r2, #18
 800910e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6859      	ldr	r1, [r3, #4]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	4b4d      	ldr	r3, [pc, #308]	; (8009250 <I2C_ITMasterCplt+0x18c>)
 800911c:	400b      	ands	r3, r1
 800911e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a4a      	ldr	r2, [pc, #296]	; (8009254 <I2C_ITMasterCplt+0x190>)
 800912a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	091b      	lsrs	r3, r3, #4
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b00      	cmp	r3, #0
 8009136:	d009      	beq.n	800914c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2210      	movs	r2, #16
 800913e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009144:	f043 0204 	orr.w	r2, r3, #4
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b60      	cmp	r3, #96	; 0x60
 8009156:	d10b      	bne.n	8009170 <I2C_ITMasterCplt+0xac>
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	089b      	lsrs	r3, r3, #2
 800915c:	f003 0301 	and.w	r3, r3, #1
 8009160:	2b00      	cmp	r3, #0
 8009162:	d005      	beq.n	8009170 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	b2db      	uxtb	r3, r3
 800916c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800916e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fbb6 	bl	80098e2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b60      	cmp	r3, #96	; 0x60
 8009186:	d002      	beq.n	800918e <I2C_ITMasterCplt+0xca>
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d006      	beq.n	800919c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 faad 	bl	80096f4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800919a:	e054      	b.n	8009246 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b21      	cmp	r3, #33	; 0x21
 80091a6:	d124      	bne.n	80091f2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2220      	movs	r2, #32
 80091ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b40      	cmp	r3, #64	; 0x40
 80091c0:	d10b      	bne.n	80091da <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7ff f9b0 	bl	8008538 <HAL_I2C_MemTxCpltCallback>
}
 80091d8:	e035      	b.n	8009246 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff f964 	bl	80084b8 <HAL_I2C_MasterTxCpltCallback>
}
 80091f0:	e029      	b.n	8009246 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b22      	cmp	r3, #34	; 0x22
 80091fc:	d123      	bne.n	8009246 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2220      	movs	r2, #32
 8009202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b40      	cmp	r3, #64	; 0x40
 8009216:	d10b      	bne.n	8009230 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff f98f 	bl	800854c <HAL_I2C_MemRxCpltCallback>
}
 800922e:	e00a      	b.n	8009246 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff f943 	bl	80084cc <HAL_I2C_MasterRxCpltCallback>
}
 8009246:	bf00      	nop
 8009248:	3718      	adds	r7, #24
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	fe00e800 	.word	0xfe00e800
 8009254:	ffff0000 	.word	0xffff0000

08009258 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009274:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2220      	movs	r2, #32
 800927c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800927e:	7bfb      	ldrb	r3, [r7, #15]
 8009280:	2b21      	cmp	r3, #33	; 0x21
 8009282:	d002      	beq.n	800928a <I2C_ITSlaveCplt+0x32>
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	2b29      	cmp	r3, #41	; 0x29
 8009288:	d108      	bne.n	800929c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800928a:	f248 0101 	movw	r1, #32769	; 0x8001
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fea0 	bl	8009fd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2221      	movs	r2, #33	; 0x21
 8009298:	631a      	str	r2, [r3, #48]	; 0x30
 800929a:	e00d      	b.n	80092b8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	2b22      	cmp	r3, #34	; 0x22
 80092a0:	d002      	beq.n	80092a8 <I2C_ITSlaveCplt+0x50>
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	2b2a      	cmp	r3, #42	; 0x2a
 80092a6:	d107      	bne.n	80092b8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80092a8:	f248 0102 	movw	r1, #32770	; 0x8002
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fe91 	bl	8009fd4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2222      	movs	r2, #34	; 0x22
 80092b6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6859      	ldr	r1, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	4b80      	ldr	r3, [pc, #512]	; (80094d4 <I2C_ITSlaveCplt+0x27c>)
 80092d4:	400b      	ands	r3, r1
 80092d6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fb02 	bl	80098e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	0b9b      	lsrs	r3, r3, #14
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d07a      	beq.n	80093e0 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 8111 	beq.w	8009526 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a73      	ldr	r2, [pc, #460]	; (80094d8 <I2C_ITSlaveCplt+0x280>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d059      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a71      	ldr	r2, [pc, #452]	; (80094dc <I2C_ITSlaveCplt+0x284>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d053      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a6f      	ldr	r2, [pc, #444]	; (80094e0 <I2C_ITSlaveCplt+0x288>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d04d      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a6d      	ldr	r2, [pc, #436]	; (80094e4 <I2C_ITSlaveCplt+0x28c>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d047      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a6b      	ldr	r2, [pc, #428]	; (80094e8 <I2C_ITSlaveCplt+0x290>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d041      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a69      	ldr	r2, [pc, #420]	; (80094ec <I2C_ITSlaveCplt+0x294>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d03b      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a67      	ldr	r2, [pc, #412]	; (80094f0 <I2C_ITSlaveCplt+0x298>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d035      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a65      	ldr	r2, [pc, #404]	; (80094f4 <I2C_ITSlaveCplt+0x29c>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d02f      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a63      	ldr	r2, [pc, #396]	; (80094f8 <I2C_ITSlaveCplt+0x2a0>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d029      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a61      	ldr	r2, [pc, #388]	; (80094fc <I2C_ITSlaveCplt+0x2a4>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d023      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a5f      	ldr	r2, [pc, #380]	; (8009500 <I2C_ITSlaveCplt+0x2a8>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d01d      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a5d      	ldr	r2, [pc, #372]	; (8009504 <I2C_ITSlaveCplt+0x2ac>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d017      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a5b      	ldr	r2, [pc, #364]	; (8009508 <I2C_ITSlaveCplt+0x2b0>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d011      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a59      	ldr	r2, [pc, #356]	; (800950c <I2C_ITSlaveCplt+0x2b4>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d00b      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a57      	ldr	r2, [pc, #348]	; (8009510 <I2C_ITSlaveCplt+0x2b8>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d005      	beq.n	80093c4 <I2C_ITSlaveCplt+0x16c>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a55      	ldr	r2, [pc, #340]	; (8009514 <I2C_ITSlaveCplt+0x2bc>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d105      	bne.n	80093d0 <I2C_ITSlaveCplt+0x178>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	e004      	b.n	80093da <I2C_ITSlaveCplt+0x182>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	b29b      	uxth	r3, r3
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	8553      	strh	r3, [r2, #42]	; 0x2a
 80093de:	e0a2      	b.n	8009526 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	0bdb      	lsrs	r3, r3, #15
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 809c 	beq.w	8009526 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 808f 	beq.w	8009526 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a32      	ldr	r2, [pc, #200]	; (80094d8 <I2C_ITSlaveCplt+0x280>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d059      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a30      	ldr	r2, [pc, #192]	; (80094dc <I2C_ITSlaveCplt+0x284>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d053      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a2e      	ldr	r2, [pc, #184]	; (80094e0 <I2C_ITSlaveCplt+0x288>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d04d      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a2c      	ldr	r2, [pc, #176]	; (80094e4 <I2C_ITSlaveCplt+0x28c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d047      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a2a      	ldr	r2, [pc, #168]	; (80094e8 <I2C_ITSlaveCplt+0x290>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d041      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a28      	ldr	r2, [pc, #160]	; (80094ec <I2C_ITSlaveCplt+0x294>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d03b      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a26      	ldr	r2, [pc, #152]	; (80094f0 <I2C_ITSlaveCplt+0x298>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d035      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a24      	ldr	r2, [pc, #144]	; (80094f4 <I2C_ITSlaveCplt+0x29c>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d02f      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a22      	ldr	r2, [pc, #136]	; (80094f8 <I2C_ITSlaveCplt+0x2a0>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d029      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a20      	ldr	r2, [pc, #128]	; (80094fc <I2C_ITSlaveCplt+0x2a4>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d023      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a1e      	ldr	r2, [pc, #120]	; (8009500 <I2C_ITSlaveCplt+0x2a8>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d01d      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a1c      	ldr	r2, [pc, #112]	; (8009504 <I2C_ITSlaveCplt+0x2ac>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d017      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a1a      	ldr	r2, [pc, #104]	; (8009508 <I2C_ITSlaveCplt+0x2b0>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d011      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a18      	ldr	r2, [pc, #96]	; (800950c <I2C_ITSlaveCplt+0x2b4>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d00b      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a16      	ldr	r2, [pc, #88]	; (8009510 <I2C_ITSlaveCplt+0x2b8>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d005      	beq.n	80094c8 <I2C_ITSlaveCplt+0x270>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a14      	ldr	r2, [pc, #80]	; (8009514 <I2C_ITSlaveCplt+0x2bc>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d127      	bne.n	8009518 <I2C_ITSlaveCplt+0x2c0>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	e026      	b.n	8009522 <I2C_ITSlaveCplt+0x2ca>
 80094d4:	fe00e800 	.word	0xfe00e800
 80094d8:	40020010 	.word	0x40020010
 80094dc:	40020028 	.word	0x40020028
 80094e0:	40020040 	.word	0x40020040
 80094e4:	40020058 	.word	0x40020058
 80094e8:	40020070 	.word	0x40020070
 80094ec:	40020088 	.word	0x40020088
 80094f0:	400200a0 	.word	0x400200a0
 80094f4:	400200b8 	.word	0x400200b8
 80094f8:	40020410 	.word	0x40020410
 80094fc:	40020428 	.word	0x40020428
 8009500:	40020440 	.word	0x40020440
 8009504:	40020458 	.word	0x40020458
 8009508:	40020470 	.word	0x40020470
 800950c:	40020488 	.word	0x40020488
 8009510:	400204a0 	.word	0x400204a0
 8009514:	400204b8 	.word	0x400204b8
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	b29b      	uxth	r3, r3
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	089b      	lsrs	r3, r3, #2
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d020      	beq.n	8009574 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f023 0304 	bic.w	r3, r3, #4
 8009538:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009544:	b2d2      	uxtb	r2, r2
 8009546:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954c:	1c5a      	adds	r2, r3, #1
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00c      	beq.n	8009574 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800955e:	3b01      	subs	r3, #1
 8009560:	b29a      	uxth	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956a:	b29b      	uxth	r3, r3
 800956c:	3b01      	subs	r3, #1
 800956e:	b29a      	uxth	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009578:	b29b      	uxth	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d005      	beq.n	800958a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009582:	f043 0204 	orr.w	r2, r3, #4
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800959c:	2b00      	cmp	r3, #0
 800959e:	d010      	beq.n	80095c2 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f8a4 	bl	80096f4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b28      	cmp	r3, #40	; 0x28
 80095b6:	d141      	bne.n	800963c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80095b8:	6979      	ldr	r1, [r7, #20]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f844 	bl	8009648 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80095c0:	e03c      	b.n	800963c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095ca:	d014      	beq.n	80095f6 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7ff fd1a 	bl	8009006 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a1b      	ldr	r2, [pc, #108]	; (8009644 <I2C_ITSlaveCplt+0x3ec>)
 80095d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2220      	movs	r2, #32
 80095dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7fe ff98 	bl	8008524 <HAL_I2C_ListenCpltCallback>
}
 80095f4:	e022      	b.n	800963c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b22      	cmp	r3, #34	; 0x22
 8009600:	d10e      	bne.n	8009620 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7fe ff6b 	bl	80084f4 <HAL_I2C_SlaveRxCpltCallback>
}
 800961e:	e00d      	b.n	800963c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2220      	movs	r2, #32
 8009624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7fe ff52 	bl	80084e0 <HAL_I2C_SlaveTxCpltCallback>
}
 800963c:	bf00      	nop
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	ffff0000 	.word	0xffff0000

08009648 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a26      	ldr	r2, [pc, #152]	; (80096f0 <I2C_ITListenCplt+0xa8>)
 8009656:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2220      	movs	r2, #32
 8009662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	089b      	lsrs	r3, r3, #2
 8009678:	f003 0301 	and.w	r3, r3, #1
 800967c:	2b00      	cmp	r3, #0
 800967e:	d022      	beq.n	80096c6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968a:	b2d2      	uxtb	r2, r2
 800968c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800969c:	2b00      	cmp	r3, #0
 800969e:	d012      	beq.n	80096c6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a4:	3b01      	subs	r3, #1
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	3b01      	subs	r3, #1
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096be:	f043 0204 	orr.w	r2, r3, #4
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80096c6:	f248 0103 	movw	r1, #32771	; 0x8003
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fc82 	bl	8009fd4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2210      	movs	r2, #16
 80096d6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7fe ff1f 	bl	8008524 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80096e6:	bf00      	nop
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	ffff0000 	.word	0xffff0000

080096f4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a5d      	ldr	r2, [pc, #372]	; (8009888 <I2C_ITError+0x194>)
 8009712:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	431a      	orrs	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009726:	7bfb      	ldrb	r3, [r7, #15]
 8009728:	2b28      	cmp	r3, #40	; 0x28
 800972a:	d005      	beq.n	8009738 <I2C_ITError+0x44>
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	2b29      	cmp	r3, #41	; 0x29
 8009730:	d002      	beq.n	8009738 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009732:	7bfb      	ldrb	r3, [r7, #15]
 8009734:	2b2a      	cmp	r3, #42	; 0x2a
 8009736:	d10b      	bne.n	8009750 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009738:	2103      	movs	r1, #3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 fc4a 	bl	8009fd4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2228      	movs	r2, #40	; 0x28
 8009744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a50      	ldr	r2, [pc, #320]	; (800988c <I2C_ITError+0x198>)
 800974c:	635a      	str	r2, [r3, #52]	; 0x34
 800974e:	e011      	b.n	8009774 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009750:	f248 0103 	movw	r1, #32771	; 0x8003
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fc3d 	bl	8009fd4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b60      	cmp	r3, #96	; 0x60
 8009764:	d003      	beq.n	800976e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2220      	movs	r2, #32
 800976a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009778:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977e:	2b00      	cmp	r3, #0
 8009780:	d039      	beq.n	80097f6 <I2C_ITError+0x102>
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2b11      	cmp	r3, #17
 8009786:	d002      	beq.n	800978e <I2C_ITError+0x9a>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b21      	cmp	r3, #33	; 0x21
 800978c:	d133      	bne.n	80097f6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800979c:	d107      	bne.n	80097ae <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fd fce4 	bl	8007180 <HAL_DMA_GetState>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d017      	beq.n	80097ee <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c2:	4a33      	ldr	r2, [pc, #204]	; (8009890 <I2C_ITError+0x19c>)
 80097c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fc fb66 	bl	8005ea4 <HAL_DMA_Abort_IT>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d04d      	beq.n	800987a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097e8:	4610      	mov	r0, r2
 80097ea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80097ec:	e045      	b.n	800987a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f850 	bl	8009894 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80097f4:	e041      	b.n	800987a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d039      	beq.n	8009872 <I2C_ITError+0x17e>
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2b12      	cmp	r3, #18
 8009802:	d002      	beq.n	800980a <I2C_ITError+0x116>
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	2b22      	cmp	r3, #34	; 0x22
 8009808:	d133      	bne.n	8009872 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009818:	d107      	bne.n	800982a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009828:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800982e:	4618      	mov	r0, r3
 8009830:	f7fd fca6 	bl	8007180 <HAL_DMA_GetState>
 8009834:	4603      	mov	r3, r0
 8009836:	2b01      	cmp	r3, #1
 8009838:	d017      	beq.n	800986a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983e:	4a14      	ldr	r2, [pc, #80]	; (8009890 <I2C_ITError+0x19c>)
 8009840:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984e:	4618      	mov	r0, r3
 8009850:	f7fc fb28 	bl	8005ea4 <HAL_DMA_Abort_IT>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d011      	beq.n	800987e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009864:	4610      	mov	r0, r2
 8009866:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009868:	e009      	b.n	800987e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f812 	bl	8009894 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009870:	e005      	b.n	800987e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f80e 	bl	8009894 <I2C_TreatErrorCallback>
  }
}
 8009878:	e002      	b.n	8009880 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800987a:	bf00      	nop
 800987c:	e000      	b.n	8009880 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800987e:	bf00      	nop
}
 8009880:	bf00      	nop
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	ffff0000 	.word	0xffff0000
 800988c:	08008589 	.word	0x08008589
 8009890:	08009c31 	.word	0x08009c31

08009894 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b60      	cmp	r3, #96	; 0x60
 80098a6:	d10e      	bne.n	80098c6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2220      	movs	r2, #32
 80098ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7fe fe58 	bl	8008574 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80098c4:	e009      	b.n	80098da <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f7fe fe43 	bl	8008560 <HAL_I2C_ErrorCallback>
}
 80098da:	bf00      	nop
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	f003 0302 	and.w	r3, r3, #2
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d103      	bne.n	8009900 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2200      	movs	r2, #0
 80098fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b01      	cmp	r3, #1
 800990c:	d007      	beq.n	800991e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	699a      	ldr	r2, [r3, #24]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f042 0201 	orr.w	r2, r2, #1
 800991c:	619a      	str	r2, [r3, #24]
  }
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009936:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009946:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800994c:	b29b      	uxth	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	d104      	bne.n	800995c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009952:	2120      	movs	r1, #32
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f000 fad9 	bl	8009f0c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800995a:	e02d      	b.n	80099b8 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009964:	441a      	add	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800996e:	b29b      	uxth	r3, r3
 8009970:	2bff      	cmp	r3, #255	; 0xff
 8009972:	d903      	bls.n	800997c <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	22ff      	movs	r2, #255	; 0xff
 8009978:	851a      	strh	r2, [r3, #40]	; 0x28
 800997a:	e004      	b.n	8009986 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	3324      	adds	r3, #36	; 0x24
 8009990:	4619      	mov	r1, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009996:	461a      	mov	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800999c:	f7fb fcfa 	bl	8005394 <HAL_DMA_Start_IT>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d004      	beq.n	80099b0 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80099a6:	2110      	movs	r1, #16
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f7ff fea3 	bl	80096f4 <I2C_ITError>
}
 80099ae:	e003      	b.n	80099b8 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80099b0:	2140      	movs	r1, #64	; 0x40
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 faaa 	bl	8009f0c <I2C_Enable_IRQ>
}
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80099c8:	2300      	movs	r3, #0
 80099ca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d076      	beq.n	8009ac8 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a83      	ldr	r2, [pc, #524]	; (8009bf0 <I2C_DMAError+0x230>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d059      	beq.n	8009a9a <I2C_DMAError+0xda>
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a81      	ldr	r2, [pc, #516]	; (8009bf4 <I2C_DMAError+0x234>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d053      	beq.n	8009a9a <I2C_DMAError+0xda>
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a7f      	ldr	r2, [pc, #508]	; (8009bf8 <I2C_DMAError+0x238>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d04d      	beq.n	8009a9a <I2C_DMAError+0xda>
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a7d      	ldr	r2, [pc, #500]	; (8009bfc <I2C_DMAError+0x23c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d047      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a7b      	ldr	r2, [pc, #492]	; (8009c00 <I2C_DMAError+0x240>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d041      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a79      	ldr	r2, [pc, #484]	; (8009c04 <I2C_DMAError+0x244>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d03b      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a77      	ldr	r2, [pc, #476]	; (8009c08 <I2C_DMAError+0x248>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d035      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a75      	ldr	r2, [pc, #468]	; (8009c0c <I2C_DMAError+0x24c>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d02f      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a73      	ldr	r2, [pc, #460]	; (8009c10 <I2C_DMAError+0x250>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d029      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a71      	ldr	r2, [pc, #452]	; (8009c14 <I2C_DMAError+0x254>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d023      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a6f      	ldr	r2, [pc, #444]	; (8009c18 <I2C_DMAError+0x258>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d01d      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a6d      	ldr	r2, [pc, #436]	; (8009c1c <I2C_DMAError+0x25c>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d017      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a6b      	ldr	r2, [pc, #428]	; (8009c20 <I2C_DMAError+0x260>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d011      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a69      	ldr	r2, [pc, #420]	; (8009c24 <I2C_DMAError+0x264>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d00b      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a67      	ldr	r2, [pc, #412]	; (8009c28 <I2C_DMAError+0x268>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d005      	beq.n	8009a9a <I2C_DMAError+0xda>
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a65      	ldr	r2, [pc, #404]	; (8009c2c <I2C_DMAError+0x26c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d109      	bne.n	8009aae <I2C_DMAError+0xee>
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	bf0c      	ite	eq
 8009aa6:	2301      	moveq	r3, #1
 8009aa8:	2300      	movne	r3, #0
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	e008      	b.n	8009ac0 <I2C_DMAError+0x100>
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	bf0c      	ite	eq
 8009aba:	2301      	moveq	r3, #1
 8009abc:	2300      	movne	r3, #0
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d076      	beq.n	8009bbe <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a46      	ldr	r2, [pc, #280]	; (8009bf0 <I2C_DMAError+0x230>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d059      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a44      	ldr	r2, [pc, #272]	; (8009bf4 <I2C_DMAError+0x234>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d053      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a42      	ldr	r2, [pc, #264]	; (8009bf8 <I2C_DMAError+0x238>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d04d      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a40      	ldr	r2, [pc, #256]	; (8009bfc <I2C_DMAError+0x23c>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d047      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a3e      	ldr	r2, [pc, #248]	; (8009c00 <I2C_DMAError+0x240>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d041      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a3c      	ldr	r2, [pc, #240]	; (8009c04 <I2C_DMAError+0x244>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d03b      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a3a      	ldr	r2, [pc, #232]	; (8009c08 <I2C_DMAError+0x248>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d035      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a38      	ldr	r2, [pc, #224]	; (8009c0c <I2C_DMAError+0x24c>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d02f      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a36      	ldr	r2, [pc, #216]	; (8009c10 <I2C_DMAError+0x250>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d029      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a34      	ldr	r2, [pc, #208]	; (8009c14 <I2C_DMAError+0x254>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d023      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a32      	ldr	r2, [pc, #200]	; (8009c18 <I2C_DMAError+0x258>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d01d      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a30      	ldr	r2, [pc, #192]	; (8009c1c <I2C_DMAError+0x25c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d017      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a2e      	ldr	r2, [pc, #184]	; (8009c20 <I2C_DMAError+0x260>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d011      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a2c      	ldr	r2, [pc, #176]	; (8009c24 <I2C_DMAError+0x264>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d00b      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a2a      	ldr	r2, [pc, #168]	; (8009c28 <I2C_DMAError+0x268>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d005      	beq.n	8009b90 <I2C_DMAError+0x1d0>
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a28      	ldr	r2, [pc, #160]	; (8009c2c <I2C_DMAError+0x26c>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d109      	bne.n	8009ba4 <I2C_DMAError+0x1e4>
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bf0c      	ite	eq
 8009b9c:	2301      	moveq	r3, #1
 8009b9e:	2300      	movne	r3, #0
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	e008      	b.n	8009bb6 <I2C_DMAError+0x1f6>
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	bf0c      	ite	eq
 8009bb0:	2301      	moveq	r3, #1
 8009bb2:	2300      	movne	r3, #0
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7fd faec 	bl	800719c <HAL_DMA_GetError>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d00e      	beq.n	8009be8 <I2C_DMAError+0x228>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d00b      	beq.n	8009be8 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bde:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009be0:	2110      	movs	r1, #16
 8009be2:	68b8      	ldr	r0, [r7, #8]
 8009be4:	f7ff fd86 	bl	80096f4 <I2C_ITError>
  }
}
 8009be8:	bf00      	nop
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	40020010 	.word	0x40020010
 8009bf4:	40020028 	.word	0x40020028
 8009bf8:	40020040 	.word	0x40020040
 8009bfc:	40020058 	.word	0x40020058
 8009c00:	40020070 	.word	0x40020070
 8009c04:	40020088 	.word	0x40020088
 8009c08:	400200a0 	.word	0x400200a0
 8009c0c:	400200b8 	.word	0x400200b8
 8009c10:	40020410 	.word	0x40020410
 8009c14:	40020428 	.word	0x40020428
 8009c18:	40020440 	.word	0x40020440
 8009c1c:	40020458 	.word	0x40020458
 8009c20:	40020470 	.word	0x40020470
 8009c24:	40020488 	.word	0x40020488
 8009c28:	400204a0 	.word	0x400204a0
 8009c2c:	400204b8 	.word	0x400204b8

08009c30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f7ff fe18 	bl	8009894 <I2C_TreatErrorCallback>
}
 8009c64:	bf00      	nop
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	603b      	str	r3, [r7, #0]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c7c:	e022      	b.n	8009cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d01e      	beq.n	8009cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c86:	f7fa fedd 	bl	8004a44 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d302      	bcc.n	8009c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d113      	bne.n	8009cc4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca0:	f043 0220 	orr.w	r2, r3, #32
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2220      	movs	r2, #32
 8009cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e00f      	b.n	8009ce4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	699a      	ldr	r2, [r3, #24]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	4013      	ands	r3, r2
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	bf0c      	ite	eq
 8009cd4:	2301      	moveq	r3, #1
 8009cd6:	2300      	movne	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	461a      	mov	r2, r3
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d0cd      	beq.n	8009c7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009cf8:	e02c      	b.n	8009d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	68b9      	ldr	r1, [r7, #8]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 f870 	bl	8009de4 <I2C_IsAcknowledgeFailed>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e02a      	b.n	8009d64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d14:	d01e      	beq.n	8009d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d16:	f7fa fe95 	bl	8004a44 <HAL_GetTick>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d302      	bcc.n	8009d2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d113      	bne.n	8009d54 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d30:	f043 0220 	orr.w	r2, r3, #32
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e007      	b.n	8009d64 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	f003 0302 	and.w	r3, r3, #2
 8009d5e:	2b02      	cmp	r3, #2
 8009d60:	d1cb      	bne.n	8009cfa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d78:	e028      	b.n	8009dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	68b9      	ldr	r1, [r7, #8]
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 f830 	bl	8009de4 <I2C_IsAcknowledgeFailed>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e026      	b.n	8009ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d8e:	f7fa fe59 	bl	8004a44 <HAL_GetTick>
 8009d92:	4602      	mov	r2, r0
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d302      	bcc.n	8009da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d113      	bne.n	8009dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da8:	f043 0220 	orr.w	r2, r3, #32
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2220      	movs	r2, #32
 8009db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e007      	b.n	8009ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	f003 0320 	and.w	r3, r3, #32
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d1cf      	bne.n	8009d7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	699b      	ldr	r3, [r3, #24]
 8009df6:	f003 0310 	and.w	r3, r3, #16
 8009dfa:	2b10      	cmp	r3, #16
 8009dfc:	d151      	bne.n	8009ea2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dfe:	e022      	b.n	8009e46 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e06:	d01e      	beq.n	8009e46 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e08:	f7fa fe1c 	bl	8004a44 <HAL_GetTick>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	1ad3      	subs	r3, r2, r3
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d302      	bcc.n	8009e1e <I2C_IsAcknowledgeFailed+0x3a>
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d113      	bne.n	8009e46 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e22:	f043 0220 	orr.w	r2, r3, #32
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2200      	movs	r2, #0
 8009e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e02e      	b.n	8009ea4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	f003 0320 	and.w	r3, r3, #32
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	d1d5      	bne.n	8009e00 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2210      	movs	r2, #16
 8009e5a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2220      	movs	r2, #32
 8009e62:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f7ff fd3c 	bl	80098e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6859      	ldr	r1, [r3, #4]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	4b0d      	ldr	r3, [pc, #52]	; (8009eac <I2C_IsAcknowledgeFailed+0xc8>)
 8009e76:	400b      	ands	r3, r1
 8009e78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e7e:	f043 0204 	orr.w	r2, r3, #4
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e000      	b.n	8009ea4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	fe00e800 	.word	0xfe00e800

08009eb0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	607b      	str	r3, [r7, #4]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	817b      	strh	r3, [r7, #10]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	685a      	ldr	r2, [r3, #4]
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	0d5b      	lsrs	r3, r3, #21
 8009ecc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009ed0:	4b0d      	ldr	r3, [pc, #52]	; (8009f08 <I2C_TransferConfig+0x58>)
 8009ed2:	430b      	orrs	r3, r1
 8009ed4:	43db      	mvns	r3, r3
 8009ed6:	ea02 0103 	and.w	r1, r2, r3
 8009eda:	897b      	ldrh	r3, [r7, #10]
 8009edc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009ee0:	7a7b      	ldrb	r3, [r7, #9]
 8009ee2:	041b      	lsls	r3, r3, #16
 8009ee4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ee8:	431a      	orrs	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	431a      	orrs	r2, r3
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	431a      	orrs	r2, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009efa:	bf00      	nop
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	03ff63ff 	.word	0x03ff63ff

08009f0c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	460b      	mov	r3, r1
 8009f16:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f20:	4a2a      	ldr	r2, [pc, #168]	; (8009fcc <I2C_Enable_IRQ+0xc0>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d004      	beq.n	8009f30 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009f2a:	4a29      	ldr	r2, [pc, #164]	; (8009fd0 <I2C_Enable_IRQ+0xc4>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d11d      	bne.n	8009f6c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009f30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	da03      	bge.n	8009f40 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009f3e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009f40:	887b      	ldrh	r3, [r7, #2]
 8009f42:	2b10      	cmp	r3, #16
 8009f44:	d103      	bne.n	8009f4e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009f4c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009f4e:	887b      	ldrh	r3, [r7, #2]
 8009f50:	2b20      	cmp	r3, #32
 8009f52:	d103      	bne.n	8009f5c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009f5a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009f5c:	887b      	ldrh	r3, [r7, #2]
 8009f5e:	2b40      	cmp	r3, #64	; 0x40
 8009f60:	d125      	bne.n	8009fae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f68:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009f6a:	e020      	b.n	8009fae <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009f6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	da03      	bge.n	8009f7c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009f7a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009f7c:	887b      	ldrh	r3, [r7, #2]
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009f8c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009f8e:	887b      	ldrh	r3, [r7, #2]
 8009f90:	f003 0302 	and.w	r3, r3, #2
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009f9e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009fa0:	887b      	ldrh	r3, [r7, #2]
 8009fa2:	2b20      	cmp	r3, #32
 8009fa4:	d103      	bne.n	8009fae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f043 0320 	orr.w	r3, r3, #32
 8009fac:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6819      	ldr	r1, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	601a      	str	r2, [r3, #0]
}
 8009fbe:	bf00      	nop
 8009fc0:	3714      	adds	r7, #20
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	0800878f 	.word	0x0800878f
 8009fd0:	08008975 	.word	0x08008975

08009fd4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009fe4:	887b      	ldrh	r3, [r7, #2]
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00f      	beq.n	800a00e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009ff4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a002:	2b28      	cmp	r3, #40	; 0x28
 800a004:	d003      	beq.n	800a00e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a00c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a00e:	887b      	ldrh	r3, [r7, #2]
 800a010:	f003 0302 	and.w	r3, r3, #2
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00f      	beq.n	800a038 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a01e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a026:	b2db      	uxtb	r3, r3
 800a028:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a02c:	2b28      	cmp	r3, #40	; 0x28
 800a02e:	d003      	beq.n	800a038 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a036:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a038:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	da03      	bge.n	800a048 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a046:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a048:	887b      	ldrh	r3, [r7, #2]
 800a04a:	2b10      	cmp	r3, #16
 800a04c:	d103      	bne.n	800a056 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a054:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a056:	887b      	ldrh	r3, [r7, #2]
 800a058:	2b20      	cmp	r3, #32
 800a05a:	d103      	bne.n	800a064 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f043 0320 	orr.w	r3, r3, #32
 800a062:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a064:	887b      	ldrh	r3, [r7, #2]
 800a066:	2b40      	cmp	r3, #64	; 0x40
 800a068:	d103      	bne.n	800a072 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a070:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6819      	ldr	r1, [r3, #0]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	43da      	mvns	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	400a      	ands	r2, r1
 800a082:	601a      	str	r2, [r3, #0]
}
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b20      	cmp	r3, #32
 800a0a4:	d138      	bne.n	800a118 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d101      	bne.n	800a0b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	e032      	b.n	800a11a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2224      	movs	r2, #36	; 0x24
 800a0c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 0201 	bic.w	r2, r2, #1
 800a0d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a0e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6819      	ldr	r1, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f042 0201 	orr.w	r2, r2, #1
 800a102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2220      	movs	r2, #32
 800a108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	e000      	b.n	800a11a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a118:	2302      	movs	r3, #2
  }
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
 800a12e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a136:	b2db      	uxtb	r3, r3
 800a138:	2b20      	cmp	r3, #32
 800a13a:	d139      	bne.n	800a1b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a142:	2b01      	cmp	r3, #1
 800a144:	d101      	bne.n	800a14a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a146:	2302      	movs	r3, #2
 800a148:	e033      	b.n	800a1b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2224      	movs	r2, #36	; 0x24
 800a156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f022 0201 	bic.w	r2, r2, #1
 800a168:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a178:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f042 0201 	orr.w	r2, r2, #1
 800a19a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	e000      	b.n	800a1b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a1b0:	2302      	movs	r3, #2
  }
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
	...

0800a1c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a1c8:	4b19      	ldr	r3, [pc, #100]	; (800a230 <HAL_PWREx_ConfigSupply+0x70>)
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	f003 0304 	and.w	r3, r3, #4
 800a1d0:	2b04      	cmp	r3, #4
 800a1d2:	d00a      	beq.n	800a1ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a1d4:	4b16      	ldr	r3, [pc, #88]	; (800a230 <HAL_PWREx_ConfigSupply+0x70>)
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	f003 0307 	and.w	r3, r3, #7
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d001      	beq.n	800a1e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	e01f      	b.n	800a226 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	e01d      	b.n	800a226 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a1ea:	4b11      	ldr	r3, [pc, #68]	; (800a230 <HAL_PWREx_ConfigSupply+0x70>)
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	f023 0207 	bic.w	r2, r3, #7
 800a1f2:	490f      	ldr	r1, [pc, #60]	; (800a230 <HAL_PWREx_ConfigSupply+0x70>)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a1fa:	f7fa fc23 	bl	8004a44 <HAL_GetTick>
 800a1fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a200:	e009      	b.n	800a216 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a202:	f7fa fc1f 	bl	8004a44 <HAL_GetTick>
 800a206:	4602      	mov	r2, r0
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a210:	d901      	bls.n	800a216 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e007      	b.n	800a226 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a216:	4b06      	ldr	r3, [pc, #24]	; (800a230 <HAL_PWREx_ConfigSupply+0x70>)
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a21e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a222:	d1ee      	bne.n	800a202 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3710      	adds	r7, #16
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	58024800 	.word	0x58024800

0800a234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08c      	sub	sp, #48	; 0x30
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e3ff      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f000 8087 	beq.w	800a362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a254:	4b99      	ldr	r3, [pc, #612]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a25c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a25e:	4b97      	ldr	r3, [pc, #604]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a262:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	2b10      	cmp	r3, #16
 800a268:	d007      	beq.n	800a27a <HAL_RCC_OscConfig+0x46>
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	2b18      	cmp	r3, #24
 800a26e:	d110      	bne.n	800a292 <HAL_RCC_OscConfig+0x5e>
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	f003 0303 	and.w	r3, r3, #3
 800a276:	2b02      	cmp	r3, #2
 800a278:	d10b      	bne.n	800a292 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a27a:	4b90      	ldr	r3, [pc, #576]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a282:	2b00      	cmp	r3, #0
 800a284:	d06c      	beq.n	800a360 <HAL_RCC_OscConfig+0x12c>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d168      	bne.n	800a360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	e3d9      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a29a:	d106      	bne.n	800a2aa <HAL_RCC_OscConfig+0x76>
 800a29c:	4b87      	ldr	r3, [pc, #540]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a86      	ldr	r2, [pc, #536]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2a6:	6013      	str	r3, [r2, #0]
 800a2a8:	e02e      	b.n	800a308 <HAL_RCC_OscConfig+0xd4>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d10c      	bne.n	800a2cc <HAL_RCC_OscConfig+0x98>
 800a2b2:	4b82      	ldr	r3, [pc, #520]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a81      	ldr	r2, [pc, #516]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2bc:	6013      	str	r3, [r2, #0]
 800a2be:	4b7f      	ldr	r3, [pc, #508]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a7e      	ldr	r2, [pc, #504]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2c8:	6013      	str	r3, [r2, #0]
 800a2ca:	e01d      	b.n	800a308 <HAL_RCC_OscConfig+0xd4>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2d4:	d10c      	bne.n	800a2f0 <HAL_RCC_OscConfig+0xbc>
 800a2d6:	4b79      	ldr	r3, [pc, #484]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a78      	ldr	r2, [pc, #480]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2e0:	6013      	str	r3, [r2, #0]
 800a2e2:	4b76      	ldr	r3, [pc, #472]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a75      	ldr	r2, [pc, #468]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	e00b      	b.n	800a308 <HAL_RCC_OscConfig+0xd4>
 800a2f0:	4b72      	ldr	r3, [pc, #456]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a71      	ldr	r2, [pc, #452]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2fa:	6013      	str	r3, [r2, #0]
 800a2fc:	4b6f      	ldr	r3, [pc, #444]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a6e      	ldr	r2, [pc, #440]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d013      	beq.n	800a338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a310:	f7fa fb98 	bl	8004a44 <HAL_GetTick>
 800a314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a316:	e008      	b.n	800a32a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a318:	f7fa fb94 	bl	8004a44 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	2b64      	cmp	r3, #100	; 0x64
 800a324:	d901      	bls.n	800a32a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e38d      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a32a:	4b64      	ldr	r3, [pc, #400]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0f0      	beq.n	800a318 <HAL_RCC_OscConfig+0xe4>
 800a336:	e014      	b.n	800a362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a338:	f7fa fb84 	bl	8004a44 <HAL_GetTick>
 800a33c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a33e:	e008      	b.n	800a352 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a340:	f7fa fb80 	bl	8004a44 <HAL_GetTick>
 800a344:	4602      	mov	r2, r0
 800a346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	2b64      	cmp	r3, #100	; 0x64
 800a34c:	d901      	bls.n	800a352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	e379      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a352:	4b5a      	ldr	r3, [pc, #360]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1f0      	bne.n	800a340 <HAL_RCC_OscConfig+0x10c>
 800a35e:	e000      	b.n	800a362 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0302 	and.w	r3, r3, #2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 80ae 	beq.w	800a4cc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a370:	4b52      	ldr	r3, [pc, #328]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a372:	691b      	ldr	r3, [r3, #16]
 800a374:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a378:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a37a:	4b50      	ldr	r3, [pc, #320]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a37e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d007      	beq.n	800a396 <HAL_RCC_OscConfig+0x162>
 800a386:	6a3b      	ldr	r3, [r7, #32]
 800a388:	2b18      	cmp	r3, #24
 800a38a:	d13a      	bne.n	800a402 <HAL_RCC_OscConfig+0x1ce>
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	f003 0303 	and.w	r3, r3, #3
 800a392:	2b00      	cmp	r3, #0
 800a394:	d135      	bne.n	800a402 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a396:	4b49      	ldr	r3, [pc, #292]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0304 	and.w	r3, r3, #4
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d005      	beq.n	800a3ae <HAL_RCC_OscConfig+0x17a>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e34b      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3ae:	f7fa fb79 	bl	8004aa4 <HAL_GetREVID>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d817      	bhi.n	800a3ec <HAL_RCC_OscConfig+0x1b8>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	2b40      	cmp	r3, #64	; 0x40
 800a3c2:	d108      	bne.n	800a3d6 <HAL_RCC_OscConfig+0x1a2>
 800a3c4:	4b3d      	ldr	r3, [pc, #244]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a3cc:	4a3b      	ldr	r2, [pc, #236]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a3ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3d2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3d4:	e07a      	b.n	800a4cc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3d6:	4b39      	ldr	r3, [pc, #228]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	031b      	lsls	r3, r3, #12
 800a3e4:	4935      	ldr	r1, [pc, #212]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3ea:	e06f      	b.n	800a4cc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3ec:	4b33      	ldr	r3, [pc, #204]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	061b      	lsls	r3, r3, #24
 800a3fa:	4930      	ldr	r1, [pc, #192]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a400:	e064      	b.n	800a4cc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d045      	beq.n	800a496 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a40a:	4b2c      	ldr	r3, [pc, #176]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f023 0219 	bic.w	r2, r3, #25
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	4929      	ldr	r1, [pc, #164]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a41c:	f7fa fb12 	bl	8004a44 <HAL_GetTick>
 800a420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a422:	e008      	b.n	800a436 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a424:	f7fa fb0e 	bl	8004a44 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d901      	bls.n	800a436 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e307      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a436:	4b21      	ldr	r3, [pc, #132]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0304 	and.w	r3, r3, #4
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d0f0      	beq.n	800a424 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a442:	f7fa fb2f 	bl	8004aa4 <HAL_GetREVID>
 800a446:	4603      	mov	r3, r0
 800a448:	f241 0203 	movw	r2, #4099	; 0x1003
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d817      	bhi.n	800a480 <HAL_RCC_OscConfig+0x24c>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	2b40      	cmp	r3, #64	; 0x40
 800a456:	d108      	bne.n	800a46a <HAL_RCC_OscConfig+0x236>
 800a458:	4b18      	ldr	r3, [pc, #96]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a460:	4a16      	ldr	r2, [pc, #88]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a466:	6053      	str	r3, [r2, #4]
 800a468:	e030      	b.n	800a4cc <HAL_RCC_OscConfig+0x298>
 800a46a:	4b14      	ldr	r3, [pc, #80]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	031b      	lsls	r3, r3, #12
 800a478:	4910      	ldr	r1, [pc, #64]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	604b      	str	r3, [r1, #4]
 800a47e:	e025      	b.n	800a4cc <HAL_RCC_OscConfig+0x298>
 800a480:	4b0e      	ldr	r3, [pc, #56]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	061b      	lsls	r3, r3, #24
 800a48e:	490b      	ldr	r1, [pc, #44]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a490:	4313      	orrs	r3, r2
 800a492:	604b      	str	r3, [r1, #4]
 800a494:	e01a      	b.n	800a4cc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a496:	4b09      	ldr	r3, [pc, #36]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a08      	ldr	r2, [pc, #32]	; (800a4bc <HAL_RCC_OscConfig+0x288>)
 800a49c:	f023 0301 	bic.w	r3, r3, #1
 800a4a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a2:	f7fa facf 	bl	8004a44 <HAL_GetTick>
 800a4a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a4a8:	e00a      	b.n	800a4c0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a4aa:	f7fa facb 	bl	8004a44 <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d903      	bls.n	800a4c0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e2c4      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
 800a4bc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a4c0:	4ba4      	ldr	r3, [pc, #656]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1ee      	bne.n	800a4aa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0310 	and.w	r3, r3, #16
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f000 80a9 	beq.w	800a62c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4da:	4b9e      	ldr	r3, [pc, #632]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a4e4:	4b9b      	ldr	r3, [pc, #620]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	d007      	beq.n	800a500 <HAL_RCC_OscConfig+0x2cc>
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	2b18      	cmp	r3, #24
 800a4f4:	d13a      	bne.n	800a56c <HAL_RCC_OscConfig+0x338>
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f003 0303 	and.w	r3, r3, #3
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d135      	bne.n	800a56c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a500:	4b94      	ldr	r3, [pc, #592]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d005      	beq.n	800a518 <HAL_RCC_OscConfig+0x2e4>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	69db      	ldr	r3, [r3, #28]
 800a510:	2b80      	cmp	r3, #128	; 0x80
 800a512:	d001      	beq.n	800a518 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e296      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a518:	f7fa fac4 	bl	8004aa4 <HAL_GetREVID>
 800a51c:	4603      	mov	r3, r0
 800a51e:	f241 0203 	movw	r2, #4099	; 0x1003
 800a522:	4293      	cmp	r3, r2
 800a524:	d817      	bhi.n	800a556 <HAL_RCC_OscConfig+0x322>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	2b20      	cmp	r3, #32
 800a52c:	d108      	bne.n	800a540 <HAL_RCC_OscConfig+0x30c>
 800a52e:	4b89      	ldr	r3, [pc, #548]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a536:	4a87      	ldr	r2, [pc, #540]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a53c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a53e:	e075      	b.n	800a62c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a540:	4b84      	ldr	r3, [pc, #528]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a1b      	ldr	r3, [r3, #32]
 800a54c:	069b      	lsls	r3, r3, #26
 800a54e:	4981      	ldr	r1, [pc, #516]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a550:	4313      	orrs	r3, r2
 800a552:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a554:	e06a      	b.n	800a62c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a556:	4b7f      	ldr	r3, [pc, #508]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	061b      	lsls	r3, r3, #24
 800a564:	497b      	ldr	r1, [pc, #492]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a566:	4313      	orrs	r3, r2
 800a568:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a56a:	e05f      	b.n	800a62c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	69db      	ldr	r3, [r3, #28]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d042      	beq.n	800a5fa <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a574:	4b77      	ldr	r3, [pc, #476]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a76      	ldr	r2, [pc, #472]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a57e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a580:	f7fa fa60 	bl	8004a44 <HAL_GetTick>
 800a584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a586:	e008      	b.n	800a59a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a588:	f7fa fa5c 	bl	8004a44 <HAL_GetTick>
 800a58c:	4602      	mov	r2, r0
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	2b02      	cmp	r3, #2
 800a594:	d901      	bls.n	800a59a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800a596:	2303      	movs	r3, #3
 800a598:	e255      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a59a:	4b6e      	ldr	r3, [pc, #440]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d0f0      	beq.n	800a588 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5a6:	f7fa fa7d 	bl	8004aa4 <HAL_GetREVID>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	f241 0203 	movw	r2, #4099	; 0x1003
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d817      	bhi.n	800a5e4 <HAL_RCC_OscConfig+0x3b0>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	2b20      	cmp	r3, #32
 800a5ba:	d108      	bne.n	800a5ce <HAL_RCC_OscConfig+0x39a>
 800a5bc:	4b65      	ldr	r3, [pc, #404]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a5c4:	4a63      	ldr	r2, [pc, #396]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a5c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5ca:	6053      	str	r3, [r2, #4]
 800a5cc:	e02e      	b.n	800a62c <HAL_RCC_OscConfig+0x3f8>
 800a5ce:	4b61      	ldr	r3, [pc, #388]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	069b      	lsls	r3, r3, #26
 800a5dc:	495d      	ldr	r1, [pc, #372]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	604b      	str	r3, [r1, #4]
 800a5e2:	e023      	b.n	800a62c <HAL_RCC_OscConfig+0x3f8>
 800a5e4:	4b5b      	ldr	r3, [pc, #364]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	061b      	lsls	r3, r3, #24
 800a5f2:	4958      	ldr	r1, [pc, #352]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	60cb      	str	r3, [r1, #12]
 800a5f8:	e018      	b.n	800a62c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a5fa:	4b56      	ldr	r3, [pc, #344]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a55      	ldr	r2, [pc, #340]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a606:	f7fa fa1d 	bl	8004a44 <HAL_GetTick>
 800a60a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a60c:	e008      	b.n	800a620 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a60e:	f7fa fa19 	bl	8004a44 <HAL_GetTick>
 800a612:	4602      	mov	r2, r0
 800a614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d901      	bls.n	800a620 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e212      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a620:	4b4c      	ldr	r3, [pc, #304]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1f0      	bne.n	800a60e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0308 	and.w	r3, r3, #8
 800a634:	2b00      	cmp	r3, #0
 800a636:	d036      	beq.n	800a6a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d019      	beq.n	800a674 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a640:	4b44      	ldr	r3, [pc, #272]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a644:	4a43      	ldr	r2, [pc, #268]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a646:	f043 0301 	orr.w	r3, r3, #1
 800a64a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a64c:	f7fa f9fa 	bl	8004a44 <HAL_GetTick>
 800a650:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a652:	e008      	b.n	800a666 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a654:	f7fa f9f6 	bl	8004a44 <HAL_GetTick>
 800a658:	4602      	mov	r2, r0
 800a65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65c:	1ad3      	subs	r3, r2, r3
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d901      	bls.n	800a666 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e1ef      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a666:	4b3b      	ldr	r3, [pc, #236]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a66a:	f003 0302 	and.w	r3, r3, #2
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d0f0      	beq.n	800a654 <HAL_RCC_OscConfig+0x420>
 800a672:	e018      	b.n	800a6a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a674:	4b37      	ldr	r3, [pc, #220]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a678:	4a36      	ldr	r2, [pc, #216]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a67a:	f023 0301 	bic.w	r3, r3, #1
 800a67e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a680:	f7fa f9e0 	bl	8004a44 <HAL_GetTick>
 800a684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a686:	e008      	b.n	800a69a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a688:	f7fa f9dc 	bl	8004a44 <HAL_GetTick>
 800a68c:	4602      	mov	r2, r0
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	2b02      	cmp	r3, #2
 800a694:	d901      	bls.n	800a69a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a696:	2303      	movs	r3, #3
 800a698:	e1d5      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a69a:	4b2e      	ldr	r3, [pc, #184]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a69c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a69e:	f003 0302 	and.w	r3, r3, #2
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1f0      	bne.n	800a688 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0320 	and.w	r3, r3, #32
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d036      	beq.n	800a720 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d019      	beq.n	800a6ee <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a6ba:	4b26      	ldr	r3, [pc, #152]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a25      	ldr	r2, [pc, #148]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a6c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a6c6:	f7fa f9bd 	bl	8004a44 <HAL_GetTick>
 800a6ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a6cc:	e008      	b.n	800a6e0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a6ce:	f7fa f9b9 	bl	8004a44 <HAL_GetTick>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d901      	bls.n	800a6e0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e1b2      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a6e0:	4b1c      	ldr	r3, [pc, #112]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d0f0      	beq.n	800a6ce <HAL_RCC_OscConfig+0x49a>
 800a6ec:	e018      	b.n	800a720 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a6ee:	4b19      	ldr	r3, [pc, #100]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a18      	ldr	r2, [pc, #96]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a6f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a6fa:	f7fa f9a3 	bl	8004a44 <HAL_GetTick>
 800a6fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a700:	e008      	b.n	800a714 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a702:	f7fa f99f 	bl	8004a44 <HAL_GetTick>
 800a706:	4602      	mov	r2, r0
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	1ad3      	subs	r3, r2, r3
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d901      	bls.n	800a714 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e198      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a714:	4b0f      	ldr	r3, [pc, #60]	; (800a754 <HAL_RCC_OscConfig+0x520>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1f0      	bne.n	800a702 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 8085 	beq.w	800a838 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a72e:	4b0a      	ldr	r3, [pc, #40]	; (800a758 <HAL_RCC_OscConfig+0x524>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a09      	ldr	r2, [pc, #36]	; (800a758 <HAL_RCC_OscConfig+0x524>)
 800a734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a738:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a73a:	f7fa f983 	bl	8004a44 <HAL_GetTick>
 800a73e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a740:	e00c      	b.n	800a75c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a742:	f7fa f97f 	bl	8004a44 <HAL_GetTick>
 800a746:	4602      	mov	r2, r0
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	1ad3      	subs	r3, r2, r3
 800a74c:	2b64      	cmp	r3, #100	; 0x64
 800a74e:	d905      	bls.n	800a75c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e178      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
 800a754:	58024400 	.word	0x58024400
 800a758:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a75c:	4b96      	ldr	r3, [pc, #600]	; (800a9b8 <HAL_RCC_OscConfig+0x784>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0ec      	beq.n	800a742 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d106      	bne.n	800a77e <HAL_RCC_OscConfig+0x54a>
 800a770:	4b92      	ldr	r3, [pc, #584]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a774:	4a91      	ldr	r2, [pc, #580]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a776:	f043 0301 	orr.w	r3, r3, #1
 800a77a:	6713      	str	r3, [r2, #112]	; 0x70
 800a77c:	e02d      	b.n	800a7da <HAL_RCC_OscConfig+0x5a6>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10c      	bne.n	800a7a0 <HAL_RCC_OscConfig+0x56c>
 800a786:	4b8d      	ldr	r3, [pc, #564]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a78a:	4a8c      	ldr	r2, [pc, #560]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a78c:	f023 0301 	bic.w	r3, r3, #1
 800a790:	6713      	str	r3, [r2, #112]	; 0x70
 800a792:	4b8a      	ldr	r3, [pc, #552]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a796:	4a89      	ldr	r2, [pc, #548]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a798:	f023 0304 	bic.w	r3, r3, #4
 800a79c:	6713      	str	r3, [r2, #112]	; 0x70
 800a79e:	e01c      	b.n	800a7da <HAL_RCC_OscConfig+0x5a6>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	2b05      	cmp	r3, #5
 800a7a6:	d10c      	bne.n	800a7c2 <HAL_RCC_OscConfig+0x58e>
 800a7a8:	4b84      	ldr	r3, [pc, #528]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a7aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ac:	4a83      	ldr	r2, [pc, #524]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a7ae:	f043 0304 	orr.w	r3, r3, #4
 800a7b2:	6713      	str	r3, [r2, #112]	; 0x70
 800a7b4:	4b81      	ldr	r3, [pc, #516]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b8:	4a80      	ldr	r2, [pc, #512]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a7ba:	f043 0301 	orr.w	r3, r3, #1
 800a7be:	6713      	str	r3, [r2, #112]	; 0x70
 800a7c0:	e00b      	b.n	800a7da <HAL_RCC_OscConfig+0x5a6>
 800a7c2:	4b7e      	ldr	r3, [pc, #504]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7c6:	4a7d      	ldr	r2, [pc, #500]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a7c8:	f023 0301 	bic.w	r3, r3, #1
 800a7cc:	6713      	str	r3, [r2, #112]	; 0x70
 800a7ce:	4b7b      	ldr	r3, [pc, #492]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d2:	4a7a      	ldr	r2, [pc, #488]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a7d4:	f023 0304 	bic.w	r3, r3, #4
 800a7d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d015      	beq.n	800a80e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7e2:	f7fa f92f 	bl	8004a44 <HAL_GetTick>
 800a7e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a7e8:	e00a      	b.n	800a800 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7ea:	f7fa f92b 	bl	8004a44 <HAL_GetTick>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d901      	bls.n	800a800 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e122      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a800:	4b6e      	ldr	r3, [pc, #440]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0ee      	beq.n	800a7ea <HAL_RCC_OscConfig+0x5b6>
 800a80c:	e014      	b.n	800a838 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a80e:	f7fa f919 	bl	8004a44 <HAL_GetTick>
 800a812:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a814:	e00a      	b.n	800a82c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a816:	f7fa f915 	bl	8004a44 <HAL_GetTick>
 800a81a:	4602      	mov	r2, r0
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	f241 3288 	movw	r2, #5000	; 0x1388
 800a824:	4293      	cmp	r3, r2
 800a826:	d901      	bls.n	800a82c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a828:	2303      	movs	r3, #3
 800a82a:	e10c      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a82c:	4b63      	ldr	r3, [pc, #396]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a830:	f003 0302 	and.w	r3, r3, #2
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1ee      	bne.n	800a816 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 8101 	beq.w	800aa44 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a842:	4b5e      	ldr	r3, [pc, #376]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a84a:	2b18      	cmp	r3, #24
 800a84c:	f000 80bc 	beq.w	800a9c8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	2b02      	cmp	r3, #2
 800a856:	f040 8095 	bne.w	800a984 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a85a:	4b58      	ldr	r3, [pc, #352]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a57      	ldr	r2, [pc, #348]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a866:	f7fa f8ed 	bl	8004a44 <HAL_GetTick>
 800a86a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a86c:	e008      	b.n	800a880 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a86e:	f7fa f8e9 	bl	8004a44 <HAL_GetTick>
 800a872:	4602      	mov	r2, r0
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d901      	bls.n	800a880 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a87c:	2303      	movs	r3, #3
 800a87e:	e0e2      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a880:	4b4e      	ldr	r3, [pc, #312]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1f0      	bne.n	800a86e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a88c:	4b4b      	ldr	r3, [pc, #300]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a88e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a890:	4b4b      	ldr	r3, [pc, #300]	; (800a9c0 <HAL_RCC_OscConfig+0x78c>)
 800a892:	4013      	ands	r3, r2
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a89c:	0112      	lsls	r2, r2, #4
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	4946      	ldr	r1, [pc, #280]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	628b      	str	r3, [r1, #40]	; 0x28
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	025b      	lsls	r3, r3, #9
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	041b      	lsls	r3, r3, #16
 800a8c4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a8c8:	431a      	orrs	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	061b      	lsls	r3, r3, #24
 800a8d2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a8d6:	4939      	ldr	r1, [pc, #228]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a8dc:	4b37      	ldr	r3, [pc, #220]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e0:	4a36      	ldr	r2, [pc, #216]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a8e2:	f023 0301 	bic.w	r3, r3, #1
 800a8e6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a8e8:	4b34      	ldr	r3, [pc, #208]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a8ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8ec:	4b35      	ldr	r3, [pc, #212]	; (800a9c4 <HAL_RCC_OscConfig+0x790>)
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a8f4:	00d2      	lsls	r2, r2, #3
 800a8f6:	4931      	ldr	r1, [pc, #196]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a8fc:	4b2f      	ldr	r3, [pc, #188]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a900:	f023 020c 	bic.w	r2, r3, #12
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a908:	492c      	ldr	r1, [pc, #176]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a90e:	4b2b      	ldr	r3, [pc, #172]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a912:	f023 0202 	bic.w	r2, r3, #2
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91a:	4928      	ldr	r1, [pc, #160]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a920:	4b26      	ldr	r3, [pc, #152]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a924:	4a25      	ldr	r2, [pc, #148]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a92a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a92c:	4b23      	ldr	r3, [pc, #140]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a930:	4a22      	ldr	r2, [pc, #136]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a938:	4b20      	ldr	r3, [pc, #128]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93c:	4a1f      	ldr	r2, [pc, #124]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a93e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a944:	4b1d      	ldr	r3, [pc, #116]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a948:	4a1c      	ldr	r2, [pc, #112]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a94a:	f043 0301 	orr.w	r3, r3, #1
 800a94e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a950:	4b1a      	ldr	r3, [pc, #104]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a19      	ldr	r2, [pc, #100]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a95a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a95c:	f7fa f872 	bl	8004a44 <HAL_GetTick>
 800a960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a962:	e008      	b.n	800a976 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a964:	f7fa f86e 	bl	8004a44 <HAL_GetTick>
 800a968:	4602      	mov	r2, r0
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d901      	bls.n	800a976 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a972:	2303      	movs	r3, #3
 800a974:	e067      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a976:	4b11      	ldr	r3, [pc, #68]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d0f0      	beq.n	800a964 <HAL_RCC_OscConfig+0x730>
 800a982:	e05f      	b.n	800aa44 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a984:	4b0d      	ldr	r3, [pc, #52]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a0c      	ldr	r2, [pc, #48]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a98a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a98e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a990:	f7fa f858 	bl	8004a44 <HAL_GetTick>
 800a994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a996:	e008      	b.n	800a9aa <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a998:	f7fa f854 	bl	8004a44 <HAL_GetTick>
 800a99c:	4602      	mov	r2, r0
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	2b02      	cmp	r3, #2
 800a9a4:	d901      	bls.n	800a9aa <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e04d      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a9aa:	4b04      	ldr	r3, [pc, #16]	; (800a9bc <HAL_RCC_OscConfig+0x788>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1f0      	bne.n	800a998 <HAL_RCC_OscConfig+0x764>
 800a9b6:	e045      	b.n	800aa44 <HAL_RCC_OscConfig+0x810>
 800a9b8:	58024800 	.word	0x58024800
 800a9bc:	58024400 	.word	0x58024400
 800a9c0:	fffffc0c 	.word	0xfffffc0c
 800a9c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a9c8:	4b21      	ldr	r3, [pc, #132]	; (800aa50 <HAL_RCC_OscConfig+0x81c>)
 800a9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a9ce:	4b20      	ldr	r3, [pc, #128]	; (800aa50 <HAL_RCC_OscConfig+0x81c>)
 800a9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d031      	beq.n	800aa40 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	f003 0203 	and.w	r2, r3, #3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d12a      	bne.n	800aa40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	091b      	lsrs	r3, r3, #4
 800a9ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d122      	bne.n	800aa40 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa04:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d11a      	bne.n	800aa40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	0a5b      	lsrs	r3, r3, #9
 800aa0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa16:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d111      	bne.n	800aa40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	0c1b      	lsrs	r3, r3, #16
 800aa20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa28:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d108      	bne.n	800aa40 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	0e1b      	lsrs	r3, r3, #24
 800aa32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d001      	beq.n	800aa44 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e000      	b.n	800aa46 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3730      	adds	r7, #48	; 0x30
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	58024400 	.word	0x58024400

0800aa54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	e19c      	b.n	800ada2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aa68:	4b8a      	ldr	r3, [pc, #552]	; (800ac94 <HAL_RCC_ClockConfig+0x240>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 030f 	and.w	r3, r3, #15
 800aa70:	683a      	ldr	r2, [r7, #0]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d910      	bls.n	800aa98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa76:	4b87      	ldr	r3, [pc, #540]	; (800ac94 <HAL_RCC_ClockConfig+0x240>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f023 020f 	bic.w	r2, r3, #15
 800aa7e:	4985      	ldr	r1, [pc, #532]	; (800ac94 <HAL_RCC_ClockConfig+0x240>)
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa86:	4b83      	ldr	r3, [pc, #524]	; (800ac94 <HAL_RCC_ClockConfig+0x240>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 030f 	and.w	r3, r3, #15
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d001      	beq.n	800aa98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e184      	b.n	800ada2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d010      	beq.n	800aac6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	691a      	ldr	r2, [r3, #16]
 800aaa8:	4b7b      	ldr	r3, [pc, #492]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d908      	bls.n	800aac6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aab4:	4b78      	ldr	r3, [pc, #480]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	4975      	ldr	r1, [pc, #468]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f003 0308 	and.w	r3, r3, #8
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d010      	beq.n	800aaf4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	695a      	ldr	r2, [r3, #20]
 800aad6:	4b70      	ldr	r3, [pc, #448]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aade:	429a      	cmp	r2, r3
 800aae0:	d908      	bls.n	800aaf4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aae2:	4b6d      	ldr	r3, [pc, #436]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800aae4:	69db      	ldr	r3, [r3, #28]
 800aae6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	496a      	ldr	r1, [pc, #424]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0310 	and.w	r3, r3, #16
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d010      	beq.n	800ab22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	699a      	ldr	r2, [r3, #24]
 800ab04:	4b64      	ldr	r3, [pc, #400]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ab06:	69db      	ldr	r3, [r3, #28]
 800ab08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d908      	bls.n	800ab22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab10:	4b61      	ldr	r3, [pc, #388]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	495e      	ldr	r1, [pc, #376]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0320 	and.w	r3, r3, #32
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d010      	beq.n	800ab50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	69da      	ldr	r2, [r3, #28]
 800ab32:	4b59      	ldr	r3, [pc, #356]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d908      	bls.n	800ab50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ab3e:	4b56      	ldr	r3, [pc, #344]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	69db      	ldr	r3, [r3, #28]
 800ab4a:	4953      	ldr	r1, [pc, #332]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 0302 	and.w	r3, r3, #2
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d010      	beq.n	800ab7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	68da      	ldr	r2, [r3, #12]
 800ab60:	4b4d      	ldr	r3, [pc, #308]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	f003 030f 	and.w	r3, r3, #15
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d908      	bls.n	800ab7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab6c:	4b4a      	ldr	r3, [pc, #296]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	f023 020f 	bic.w	r2, r3, #15
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	4947      	ldr	r1, [pc, #284]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d055      	beq.n	800ac36 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ab8a:	4b43      	ldr	r3, [pc, #268]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ab8c:	699b      	ldr	r3, [r3, #24]
 800ab8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	4940      	ldr	r1, [pc, #256]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d107      	bne.n	800abb4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aba4:	4b3c      	ldr	r3, [pc, #240]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d121      	bne.n	800abf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	e0f6      	b.n	800ada2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d107      	bne.n	800abcc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800abbc:	4b36      	ldr	r3, [pc, #216]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d115      	bne.n	800abf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	e0ea      	b.n	800ada2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d107      	bne.n	800abe4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800abd4:	4b30      	ldr	r3, [pc, #192]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d109      	bne.n	800abf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e0de      	b.n	800ada2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abe4:	4b2c      	ldr	r3, [pc, #176]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 0304 	and.w	r3, r3, #4
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e0d6      	b.n	800ada2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800abf4:	4b28      	ldr	r3, [pc, #160]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	f023 0207 	bic.w	r2, r3, #7
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	4925      	ldr	r1, [pc, #148]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ac02:	4313      	orrs	r3, r2
 800ac04:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac06:	f7f9 ff1d 	bl	8004a44 <HAL_GetTick>
 800ac0a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac0c:	e00a      	b.n	800ac24 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac0e:	f7f9 ff19 	bl	8004a44 <HAL_GetTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d901      	bls.n	800ac24 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800ac20:	2303      	movs	r3, #3
 800ac22:	e0be      	b.n	800ada2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac24:	4b1c      	ldr	r3, [pc, #112]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	00db      	lsls	r3, r3, #3
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d1eb      	bne.n	800ac0e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 0302 	and.w	r3, r3, #2
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d010      	beq.n	800ac64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	4b14      	ldr	r3, [pc, #80]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	f003 030f 	and.w	r3, r3, #15
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d208      	bcs.n	800ac64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac52:	4b11      	ldr	r3, [pc, #68]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	f023 020f 	bic.w	r2, r3, #15
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	490e      	ldr	r1, [pc, #56]	; (800ac98 <HAL_RCC_ClockConfig+0x244>)
 800ac60:	4313      	orrs	r3, r2
 800ac62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ac64:	4b0b      	ldr	r3, [pc, #44]	; (800ac94 <HAL_RCC_ClockConfig+0x240>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 030f 	and.w	r3, r3, #15
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d214      	bcs.n	800ac9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac72:	4b08      	ldr	r3, [pc, #32]	; (800ac94 <HAL_RCC_ClockConfig+0x240>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f023 020f 	bic.w	r2, r3, #15
 800ac7a:	4906      	ldr	r1, [pc, #24]	; (800ac94 <HAL_RCC_ClockConfig+0x240>)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac82:	4b04      	ldr	r3, [pc, #16]	; (800ac94 <HAL_RCC_ClockConfig+0x240>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f003 030f 	and.w	r3, r3, #15
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d005      	beq.n	800ac9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e086      	b.n	800ada2 <HAL_RCC_ClockConfig+0x34e>
 800ac94:	52002000 	.word	0x52002000
 800ac98:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0304 	and.w	r3, r3, #4
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d010      	beq.n	800acca <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	4b3f      	ldr	r3, [pc, #252]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d208      	bcs.n	800acca <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800acb8:	4b3c      	ldr	r3, [pc, #240]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	4939      	ldr	r1, [pc, #228]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800acc6:	4313      	orrs	r3, r2
 800acc8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f003 0308 	and.w	r3, r3, #8
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d010      	beq.n	800acf8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	695a      	ldr	r2, [r3, #20]
 800acda:	4b34      	ldr	r3, [pc, #208]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800acdc:	69db      	ldr	r3, [r3, #28]
 800acde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d208      	bcs.n	800acf8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ace6:	4b31      	ldr	r3, [pc, #196]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800ace8:	69db      	ldr	r3, [r3, #28]
 800acea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	492e      	ldr	r1, [pc, #184]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800acf4:	4313      	orrs	r3, r2
 800acf6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0310 	and.w	r3, r3, #16
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d010      	beq.n	800ad26 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	699a      	ldr	r2, [r3, #24]
 800ad08:	4b28      	ldr	r3, [pc, #160]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d208      	bcs.n	800ad26 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad14:	4b25      	ldr	r3, [pc, #148]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800ad16:	69db      	ldr	r3, [r3, #28]
 800ad18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	4922      	ldr	r1, [pc, #136]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800ad22:	4313      	orrs	r3, r2
 800ad24:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f003 0320 	and.w	r3, r3, #32
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d010      	beq.n	800ad54 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	69da      	ldr	r2, [r3, #28]
 800ad36:	4b1d      	ldr	r3, [pc, #116]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d208      	bcs.n	800ad54 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ad42:	4b1a      	ldr	r3, [pc, #104]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	4917      	ldr	r1, [pc, #92]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800ad50:	4313      	orrs	r3, r2
 800ad52:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ad54:	f000 f834 	bl	800adc0 <HAL_RCC_GetSysClockFreq>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	4b14      	ldr	r3, [pc, #80]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	0a1b      	lsrs	r3, r3, #8
 800ad60:	f003 030f 	and.w	r3, r3, #15
 800ad64:	4912      	ldr	r1, [pc, #72]	; (800adb0 <HAL_RCC_ClockConfig+0x35c>)
 800ad66:	5ccb      	ldrb	r3, [r1, r3]
 800ad68:	f003 031f 	and.w	r3, r3, #31
 800ad6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ad72:	4b0e      	ldr	r3, [pc, #56]	; (800adac <HAL_RCC_ClockConfig+0x358>)
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	f003 030f 	and.w	r3, r3, #15
 800ad7a:	4a0d      	ldr	r2, [pc, #52]	; (800adb0 <HAL_RCC_ClockConfig+0x35c>)
 800ad7c:	5cd3      	ldrb	r3, [r2, r3]
 800ad7e:	f003 031f 	and.w	r3, r3, #31
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	fa22 f303 	lsr.w	r3, r2, r3
 800ad88:	4a0a      	ldr	r2, [pc, #40]	; (800adb4 <HAL_RCC_ClockConfig+0x360>)
 800ad8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ad8c:	4a0a      	ldr	r2, [pc, #40]	; (800adb8 <HAL_RCC_ClockConfig+0x364>)
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800ad92:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <HAL_RCC_ClockConfig+0x368>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7f9 fe0a 	bl	80049b0 <HAL_InitTick>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3718      	adds	r7, #24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	58024400 	.word	0x58024400
 800adb0:	08013514 	.word	0x08013514
 800adb4:	2400001c 	.word	0x2400001c
 800adb8:	24000018 	.word	0x24000018
 800adbc:	24000020 	.word	0x24000020

0800adc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b089      	sub	sp, #36	; 0x24
 800adc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800adc6:	4bb3      	ldr	r3, [pc, #716]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adce:	2b18      	cmp	r3, #24
 800add0:	f200 8155 	bhi.w	800b07e <HAL_RCC_GetSysClockFreq+0x2be>
 800add4:	a201      	add	r2, pc, #4	; (adr r2, 800addc <HAL_RCC_GetSysClockFreq+0x1c>)
 800add6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adda:	bf00      	nop
 800addc:	0800ae41 	.word	0x0800ae41
 800ade0:	0800b07f 	.word	0x0800b07f
 800ade4:	0800b07f 	.word	0x0800b07f
 800ade8:	0800b07f 	.word	0x0800b07f
 800adec:	0800b07f 	.word	0x0800b07f
 800adf0:	0800b07f 	.word	0x0800b07f
 800adf4:	0800b07f 	.word	0x0800b07f
 800adf8:	0800b07f 	.word	0x0800b07f
 800adfc:	0800ae67 	.word	0x0800ae67
 800ae00:	0800b07f 	.word	0x0800b07f
 800ae04:	0800b07f 	.word	0x0800b07f
 800ae08:	0800b07f 	.word	0x0800b07f
 800ae0c:	0800b07f 	.word	0x0800b07f
 800ae10:	0800b07f 	.word	0x0800b07f
 800ae14:	0800b07f 	.word	0x0800b07f
 800ae18:	0800b07f 	.word	0x0800b07f
 800ae1c:	0800ae6d 	.word	0x0800ae6d
 800ae20:	0800b07f 	.word	0x0800b07f
 800ae24:	0800b07f 	.word	0x0800b07f
 800ae28:	0800b07f 	.word	0x0800b07f
 800ae2c:	0800b07f 	.word	0x0800b07f
 800ae30:	0800b07f 	.word	0x0800b07f
 800ae34:	0800b07f 	.word	0x0800b07f
 800ae38:	0800b07f 	.word	0x0800b07f
 800ae3c:	0800ae73 	.word	0x0800ae73
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae40:	4b94      	ldr	r3, [pc, #592]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 0320 	and.w	r3, r3, #32
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d009      	beq.n	800ae60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae4c:	4b91      	ldr	r3, [pc, #580]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	08db      	lsrs	r3, r3, #3
 800ae52:	f003 0303 	and.w	r3, r3, #3
 800ae56:	4a90      	ldr	r2, [pc, #576]	; (800b098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae58:	fa22 f303 	lsr.w	r3, r2, r3
 800ae5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ae5e:	e111      	b.n	800b084 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ae60:	4b8d      	ldr	r3, [pc, #564]	; (800b098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ae62:	61bb      	str	r3, [r7, #24]
    break;
 800ae64:	e10e      	b.n	800b084 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ae66:	4b8d      	ldr	r3, [pc, #564]	; (800b09c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae68:	61bb      	str	r3, [r7, #24]
    break;
 800ae6a:	e10b      	b.n	800b084 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ae6c:	4b8c      	ldr	r3, [pc, #560]	; (800b0a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ae6e:	61bb      	str	r3, [r7, #24]
    break;
 800ae70:	e108      	b.n	800b084 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae72:	4b88      	ldr	r3, [pc, #544]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae76:	f003 0303 	and.w	r3, r3, #3
 800ae7a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ae7c:	4b85      	ldr	r3, [pc, #532]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae80:	091b      	lsrs	r3, r3, #4
 800ae82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae86:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ae88:	4b82      	ldr	r3, [pc, #520]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ae92:	4b80      	ldr	r3, [pc, #512]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae96:	08db      	lsrs	r3, r3, #3
 800ae98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	fb02 f303 	mul.w	r3, r2, r3
 800aea2:	ee07 3a90 	vmov	s15, r3
 800aea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeaa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 80e1 	beq.w	800b078 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	2b02      	cmp	r3, #2
 800aeba:	f000 8083 	beq.w	800afc4 <HAL_RCC_GetSysClockFreq+0x204>
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	f200 80a1 	bhi.w	800b008 <HAL_RCC_GetSysClockFreq+0x248>
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <HAL_RCC_GetSysClockFreq+0x114>
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d056      	beq.n	800af80 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aed2:	e099      	b.n	800b008 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aed4:	4b6f      	ldr	r3, [pc, #444]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f003 0320 	and.w	r3, r3, #32
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d02d      	beq.n	800af3c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aee0:	4b6c      	ldr	r3, [pc, #432]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	08db      	lsrs	r3, r3, #3
 800aee6:	f003 0303 	and.w	r3, r3, #3
 800aeea:	4a6b      	ldr	r2, [pc, #428]	; (800b098 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aeec:	fa22 f303 	lsr.w	r3, r2, r3
 800aef0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	ee07 3a90 	vmov	s15, r3
 800aef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	ee07 3a90 	vmov	s15, r3
 800af02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af0a:	4b62      	ldr	r3, [pc, #392]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af12:	ee07 3a90 	vmov	s15, r3
 800af16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800af1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b0a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800af3a:	e087      	b.n	800b04c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	ee07 3a90 	vmov	s15, r3
 800af42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af46:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b0a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800af4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af4e:	4b51      	ldr	r3, [pc, #324]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af56:	ee07 3a90 	vmov	s15, r3
 800af5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af5e:	ed97 6a02 	vldr	s12, [r7, #8]
 800af62:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b0a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800af66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af7e:	e065      	b.n	800b04c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	ee07 3a90 	vmov	s15, r3
 800af86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b0ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800af8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af92:	4b40      	ldr	r3, [pc, #256]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9a:	ee07 3a90 	vmov	s15, r3
 800af9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa2:	ed97 6a02 	vldr	s12, [r7, #8]
 800afa6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b0a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800afaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afc2:	e043      	b.n	800b04c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	ee07 3a90 	vmov	s15, r3
 800afca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afce:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b0b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800afd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd6:	4b2f      	ldr	r3, [pc, #188]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe6:	ed97 6a02 	vldr	s12, [r7, #8]
 800afea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b0a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800afee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800affa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800affe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b006:	e021      	b.n	800b04c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b012:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b0ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800b016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b01a:	4b1e      	ldr	r3, [pc, #120]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b022:	ee07 3a90 	vmov	s15, r3
 800b026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b02a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b02e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b0a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b03a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b04a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b04c:	4b11      	ldr	r3, [pc, #68]	; (800b094 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b050:	0a5b      	lsrs	r3, r3, #9
 800b052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b056:	3301      	adds	r3, #1
 800b058:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	ee07 3a90 	vmov	s15, r3
 800b060:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b064:	edd7 6a07 	vldr	s13, [r7, #28]
 800b068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b06c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b070:	ee17 3a90 	vmov	r3, s15
 800b074:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b076:	e005      	b.n	800b084 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b078:	2300      	movs	r3, #0
 800b07a:	61bb      	str	r3, [r7, #24]
    break;
 800b07c:	e002      	b.n	800b084 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b07e:	4b07      	ldr	r3, [pc, #28]	; (800b09c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b080:	61bb      	str	r3, [r7, #24]
    break;
 800b082:	bf00      	nop
  }

  return sysclockfreq;
 800b084:	69bb      	ldr	r3, [r7, #24]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3724      	adds	r7, #36	; 0x24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	58024400 	.word	0x58024400
 800b098:	03d09000 	.word	0x03d09000
 800b09c:	003d0900 	.word	0x003d0900
 800b0a0:	017d7840 	.word	0x017d7840
 800b0a4:	46000000 	.word	0x46000000
 800b0a8:	4c742400 	.word	0x4c742400
 800b0ac:	4a742400 	.word	0x4a742400
 800b0b0:	4bbebc20 	.word	0x4bbebc20

0800b0b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b0ba:	f7ff fe81 	bl	800adc0 <HAL_RCC_GetSysClockFreq>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	4b10      	ldr	r3, [pc, #64]	; (800b104 <HAL_RCC_GetHCLKFreq+0x50>)
 800b0c2:	699b      	ldr	r3, [r3, #24]
 800b0c4:	0a1b      	lsrs	r3, r3, #8
 800b0c6:	f003 030f 	and.w	r3, r3, #15
 800b0ca:	490f      	ldr	r1, [pc, #60]	; (800b108 <HAL_RCC_GetHCLKFreq+0x54>)
 800b0cc:	5ccb      	ldrb	r3, [r1, r3]
 800b0ce:	f003 031f 	and.w	r3, r3, #31
 800b0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b0d8:	4b0a      	ldr	r3, [pc, #40]	; (800b104 <HAL_RCC_GetHCLKFreq+0x50>)
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	f003 030f 	and.w	r3, r3, #15
 800b0e0:	4a09      	ldr	r2, [pc, #36]	; (800b108 <HAL_RCC_GetHCLKFreq+0x54>)
 800b0e2:	5cd3      	ldrb	r3, [r2, r3]
 800b0e4:	f003 031f 	and.w	r3, r3, #31
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ee:	4a07      	ldr	r2, [pc, #28]	; (800b10c <HAL_RCC_GetHCLKFreq+0x58>)
 800b0f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b0f2:	4a07      	ldr	r2, [pc, #28]	; (800b110 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b0f8:	4b04      	ldr	r3, [pc, #16]	; (800b10c <HAL_RCC_GetHCLKFreq+0x58>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3708      	adds	r7, #8
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	58024400 	.word	0x58024400
 800b108:	08013514 	.word	0x08013514
 800b10c:	2400001c 	.word	0x2400001c
 800b110:	24000018 	.word	0x24000018

0800b114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b118:	f7ff ffcc 	bl	800b0b4 <HAL_RCC_GetHCLKFreq>
 800b11c:	4602      	mov	r2, r0
 800b11e:	4b06      	ldr	r3, [pc, #24]	; (800b138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b120:	69db      	ldr	r3, [r3, #28]
 800b122:	091b      	lsrs	r3, r3, #4
 800b124:	f003 0307 	and.w	r3, r3, #7
 800b128:	4904      	ldr	r1, [pc, #16]	; (800b13c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b12a:	5ccb      	ldrb	r3, [r1, r3]
 800b12c:	f003 031f 	and.w	r3, r3, #31
 800b130:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b134:	4618      	mov	r0, r3
 800b136:	bd80      	pop	{r7, pc}
 800b138:	58024400 	.word	0x58024400
 800b13c:	08013514 	.word	0x08013514

0800b140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b144:	f7ff ffb6 	bl	800b0b4 <HAL_RCC_GetHCLKFreq>
 800b148:	4602      	mov	r2, r0
 800b14a:	4b06      	ldr	r3, [pc, #24]	; (800b164 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b14c:	69db      	ldr	r3, [r3, #28]
 800b14e:	0a1b      	lsrs	r3, r3, #8
 800b150:	f003 0307 	and.w	r3, r3, #7
 800b154:	4904      	ldr	r1, [pc, #16]	; (800b168 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b156:	5ccb      	ldrb	r3, [r1, r3]
 800b158:	f003 031f 	and.w	r3, r3, #31
 800b15c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b160:	4618      	mov	r0, r3
 800b162:	bd80      	pop	{r7, pc}
 800b164:	58024400 	.word	0x58024400
 800b168:	08013514 	.word	0x08013514

0800b16c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b174:	2300      	movs	r3, #0
 800b176:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b178:	2300      	movs	r3, #0
 800b17a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d03f      	beq.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b18c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b190:	d02a      	beq.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b192:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b196:	d824      	bhi.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b19c:	d018      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b19e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1a2:	d81e      	bhi.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b1a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1ac:	d007      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b1ae:	e018      	b.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1b0:	4bab      	ldr	r3, [pc, #684]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b4:	4aaa      	ldr	r2, [pc, #680]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b1bc:	e015      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	2102      	movs	r1, #2
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f001 f9cf 	bl	800c568 <RCCEx_PLL2_Config>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b1ce:	e00c      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3324      	adds	r3, #36	; 0x24
 800b1d4:	2102      	movs	r1, #2
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f001 fa78 	bl	800c6cc <RCCEx_PLL3_Config>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b1e0:	e003      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	75fb      	strb	r3, [r7, #23]
      break;
 800b1e6:	e000      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b1e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d109      	bne.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b1f0:	4b9b      	ldr	r3, [pc, #620]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1fc:	4998      	ldr	r1, [pc, #608]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b1fe:	4313      	orrs	r3, r2
 800b200:	650b      	str	r3, [r1, #80]	; 0x50
 800b202:	e001      	b.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b204:	7dfb      	ldrb	r3, [r7, #23]
 800b206:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b210:	2b00      	cmp	r3, #0
 800b212:	d03d      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b218:	2b04      	cmp	r3, #4
 800b21a:	d826      	bhi.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b21c:	a201      	add	r2, pc, #4	; (adr r2, 800b224 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b222:	bf00      	nop
 800b224:	0800b239 	.word	0x0800b239
 800b228:	0800b247 	.word	0x0800b247
 800b22c:	0800b259 	.word	0x0800b259
 800b230:	0800b271 	.word	0x0800b271
 800b234:	0800b271 	.word	0x0800b271
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b238:	4b89      	ldr	r3, [pc, #548]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	4a88      	ldr	r2, [pc, #544]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b23e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b244:	e015      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3304      	adds	r3, #4
 800b24a:	2100      	movs	r1, #0
 800b24c:	4618      	mov	r0, r3
 800b24e:	f001 f98b 	bl	800c568 <RCCEx_PLL2_Config>
 800b252:	4603      	mov	r3, r0
 800b254:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b256:	e00c      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3324      	adds	r3, #36	; 0x24
 800b25c:	2100      	movs	r1, #0
 800b25e:	4618      	mov	r0, r3
 800b260:	f001 fa34 	bl	800c6cc <RCCEx_PLL3_Config>
 800b264:	4603      	mov	r3, r0
 800b266:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b268:	e003      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	75fb      	strb	r3, [r7, #23]
      break;
 800b26e:	e000      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b270:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b272:	7dfb      	ldrb	r3, [r7, #23]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d109      	bne.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b278:	4b79      	ldr	r3, [pc, #484]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b27a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b27c:	f023 0207 	bic.w	r2, r3, #7
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b284:	4976      	ldr	r1, [pc, #472]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b286:	4313      	orrs	r3, r2
 800b288:	650b      	str	r3, [r1, #80]	; 0x50
 800b28a:	e001      	b.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b28c:	7dfb      	ldrb	r3, [r7, #23]
 800b28e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d042      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2a4:	d02b      	beq.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b2a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2aa:	d825      	bhi.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b2ac:	2bc0      	cmp	r3, #192	; 0xc0
 800b2ae:	d028      	beq.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b2b0:	2bc0      	cmp	r3, #192	; 0xc0
 800b2b2:	d821      	bhi.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b2b4:	2b80      	cmp	r3, #128	; 0x80
 800b2b6:	d016      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b2b8:	2b80      	cmp	r3, #128	; 0x80
 800b2ba:	d81d      	bhi.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b2c0:	2b40      	cmp	r3, #64	; 0x40
 800b2c2:	d007      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b2c4:	e018      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2c6:	4b66      	ldr	r3, [pc, #408]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ca:	4a65      	ldr	r2, [pc, #404]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b2cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b2d2:	e017      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	2100      	movs	r1, #0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f001 f944 	bl	800c568 <RCCEx_PLL2_Config>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b2e4:	e00e      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	3324      	adds	r3, #36	; 0x24
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f001 f9ed 	bl	800c6cc <RCCEx_PLL3_Config>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b2f6:	e005      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b2fc:	e002      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b2fe:	bf00      	nop
 800b300:	e000      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b302:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b304:	7dfb      	ldrb	r3, [r7, #23]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d109      	bne.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b30a:	4b55      	ldr	r3, [pc, #340]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b30c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b30e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b316:	4952      	ldr	r1, [pc, #328]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b318:	4313      	orrs	r3, r2
 800b31a:	650b      	str	r3, [r1, #80]	; 0x50
 800b31c:	e001      	b.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b31e:	7dfb      	ldrb	r3, [r7, #23]
 800b320:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d049      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b334:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b338:	d030      	beq.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b33a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b33e:	d82a      	bhi.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b340:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b344:	d02c      	beq.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b346:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b34a:	d824      	bhi.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b34c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b350:	d018      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b356:	d81e      	bhi.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b35c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b360:	d007      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b362:	e018      	b.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b364:	4b3e      	ldr	r3, [pc, #248]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b368:	4a3d      	ldr	r2, [pc, #244]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b36a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b36e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b370:	e017      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	3304      	adds	r3, #4
 800b376:	2100      	movs	r1, #0
 800b378:	4618      	mov	r0, r3
 800b37a:	f001 f8f5 	bl	800c568 <RCCEx_PLL2_Config>
 800b37e:	4603      	mov	r3, r0
 800b380:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b382:	e00e      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	3324      	adds	r3, #36	; 0x24
 800b388:	2100      	movs	r1, #0
 800b38a:	4618      	mov	r0, r3
 800b38c:	f001 f99e 	bl	800c6cc <RCCEx_PLL3_Config>
 800b390:	4603      	mov	r3, r0
 800b392:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b394:	e005      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	75fb      	strb	r3, [r7, #23]
      break;
 800b39a:	e002      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b39c:	bf00      	nop
 800b39e:	e000      	b.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b3a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3a2:	7dfb      	ldrb	r3, [r7, #23]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d10a      	bne.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b3a8:	4b2d      	ldr	r3, [pc, #180]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b3b6:	492a      	ldr	r1, [pc, #168]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	658b      	str	r3, [r1, #88]	; 0x58
 800b3bc:	e001      	b.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3be:	7dfb      	ldrb	r3, [r7, #23]
 800b3c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d04c      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b3d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3d8:	d030      	beq.n	800b43c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b3da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b3de:	d82a      	bhi.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b3e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3e4:	d02c      	beq.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800b3e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b3ea:	d824      	bhi.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b3ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3f0:	d018      	beq.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b3f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3f6:	d81e      	bhi.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d003      	beq.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b3fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b400:	d007      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b402:	e018      	b.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b404:	4b16      	ldr	r3, [pc, #88]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b408:	4a15      	ldr	r2, [pc, #84]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b40a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b40e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b410:	e017      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3304      	adds	r3, #4
 800b416:	2100      	movs	r1, #0
 800b418:	4618      	mov	r0, r3
 800b41a:	f001 f8a5 	bl	800c568 <RCCEx_PLL2_Config>
 800b41e:	4603      	mov	r3, r0
 800b420:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b422:	e00e      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3324      	adds	r3, #36	; 0x24
 800b428:	2100      	movs	r1, #0
 800b42a:	4618      	mov	r0, r3
 800b42c:	f001 f94e 	bl	800c6cc <RCCEx_PLL3_Config>
 800b430:	4603      	mov	r3, r0
 800b432:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b434:	e005      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	75fb      	strb	r3, [r7, #23]
      break;
 800b43a:	e002      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b43c:	bf00      	nop
 800b43e:	e000      	b.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800b440:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10d      	bne.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b448:	4b05      	ldr	r3, [pc, #20]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b44a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b44c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b456:	4902      	ldr	r1, [pc, #8]	; (800b460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b458:	4313      	orrs	r3, r2
 800b45a:	658b      	str	r3, [r1, #88]	; 0x58
 800b45c:	e004      	b.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800b45e:	bf00      	nop
 800b460:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b464:	7dfb      	ldrb	r3, [r7, #23]
 800b466:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d032      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b478:	2b30      	cmp	r3, #48	; 0x30
 800b47a:	d01c      	beq.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b47c:	2b30      	cmp	r3, #48	; 0x30
 800b47e:	d817      	bhi.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b480:	2b20      	cmp	r3, #32
 800b482:	d00c      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800b484:	2b20      	cmp	r3, #32
 800b486:	d813      	bhi.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d016      	beq.n	800b4ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800b48c:	2b10      	cmp	r3, #16
 800b48e:	d10f      	bne.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b490:	4baf      	ldr	r3, [pc, #700]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b494:	4aae      	ldr	r2, [pc, #696]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b49a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b49c:	e00e      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	2102      	movs	r1, #2
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f001 f85f 	bl	800c568 <RCCEx_PLL2_Config>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b4ae:	e005      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b4b4:	e002      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b4b6:	bf00      	nop
 800b4b8:	e000      	b.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800b4ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d109      	bne.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b4c2:	4ba3      	ldr	r3, [pc, #652]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b4c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4ce:	49a0      	ldr	r1, [pc, #640]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b4d4:	e001      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4d6:	7dfb      	ldrb	r3, [r7, #23]
 800b4d8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d047      	beq.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4ee:	d030      	beq.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800b4f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4f4:	d82a      	bhi.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b4f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4fa:	d02c      	beq.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800b4fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b500:	d824      	bhi.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b506:	d018      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800b508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b50c:	d81e      	bhi.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d003      	beq.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800b512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b516:	d007      	beq.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b518:	e018      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b51a:	4b8d      	ldr	r3, [pc, #564]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51e:	4a8c      	ldr	r2, [pc, #560]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b526:	e017      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3304      	adds	r3, #4
 800b52c:	2100      	movs	r1, #0
 800b52e:	4618      	mov	r0, r3
 800b530:	f001 f81a 	bl	800c568 <RCCEx_PLL2_Config>
 800b534:	4603      	mov	r3, r0
 800b536:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b538:	e00e      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	3324      	adds	r3, #36	; 0x24
 800b53e:	2100      	movs	r1, #0
 800b540:	4618      	mov	r0, r3
 800b542:	f001 f8c3 	bl	800c6cc <RCCEx_PLL3_Config>
 800b546:	4603      	mov	r3, r0
 800b548:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b54a:	e005      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	75fb      	strb	r3, [r7, #23]
      break;
 800b550:	e002      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b552:	bf00      	nop
 800b554:	e000      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800b556:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b558:	7dfb      	ldrb	r3, [r7, #23]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d109      	bne.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b55e:	4b7c      	ldr	r3, [pc, #496]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b562:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b56a:	4979      	ldr	r1, [pc, #484]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b56c:	4313      	orrs	r3, r2
 800b56e:	650b      	str	r3, [r1, #80]	; 0x50
 800b570:	e001      	b.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b572:	7dfb      	ldrb	r3, [r7, #23]
 800b574:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d049      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b586:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b58a:	d02e      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800b58c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b590:	d828      	bhi.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b592:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b596:	d02a      	beq.n	800b5ee <HAL_RCCEx_PeriphCLKConfig+0x482>
 800b598:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b59c:	d822      	bhi.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b59e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5a2:	d026      	beq.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800b5a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b5a8:	d81c      	bhi.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b5aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5ae:	d010      	beq.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800b5b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5b4:	d816      	bhi.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d01d      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800b5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5be:	d111      	bne.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f000 ffce 	bl	800c568 <RCCEx_PLL2_Config>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b5d0:	e012      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	3324      	adds	r3, #36	; 0x24
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f001 f877 	bl	800c6cc <RCCEx_PLL3_Config>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b5e2:	e009      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b5e8:	e006      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b5ea:	bf00      	nop
 800b5ec:	e004      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b5ee:	bf00      	nop
 800b5f0:	e002      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b5f2:	bf00      	nop
 800b5f4:	e000      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800b5f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5f8:	7dfb      	ldrb	r3, [r7, #23]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d109      	bne.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b5fe:	4b54      	ldr	r3, [pc, #336]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b602:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b60a:	4951      	ldr	r1, [pc, #324]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b60c:	4313      	orrs	r3, r2
 800b60e:	650b      	str	r3, [r1, #80]	; 0x50
 800b610:	e001      	b.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b612:	7dfb      	ldrb	r3, [r7, #23]
 800b614:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d04b      	beq.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b62c:	d02e      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800b62e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b632:	d828      	bhi.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b638:	d02a      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800b63a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b63e:	d822      	bhi.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b640:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b644:	d026      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800b646:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b64a:	d81c      	bhi.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b64c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b650:	d010      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800b652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b656:	d816      	bhi.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d01d      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800b65c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b660:	d111      	bne.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	3304      	adds	r3, #4
 800b666:	2101      	movs	r1, #1
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 ff7d 	bl	800c568 <RCCEx_PLL2_Config>
 800b66e:	4603      	mov	r3, r0
 800b670:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b672:	e012      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	3324      	adds	r3, #36	; 0x24
 800b678:	2101      	movs	r1, #1
 800b67a:	4618      	mov	r0, r3
 800b67c:	f001 f826 	bl	800c6cc <RCCEx_PLL3_Config>
 800b680:	4603      	mov	r3, r0
 800b682:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b684:	e009      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	75fb      	strb	r3, [r7, #23]
      break;
 800b68a:	e006      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b68c:	bf00      	nop
 800b68e:	e004      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b690:	bf00      	nop
 800b692:	e002      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b694:	bf00      	nop
 800b696:	e000      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800b698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b69a:	7dfb      	ldrb	r3, [r7, #23]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b6a0:	4b2b      	ldr	r3, [pc, #172]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b6ae:	4928      	ldr	r1, [pc, #160]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	658b      	str	r3, [r1, #88]	; 0x58
 800b6b4:	e001      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6b6:	7dfb      	ldrb	r3, [r7, #23]
 800b6b8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d02f      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ce:	d00e      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x582>
 800b6d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6d4:	d814      	bhi.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d015      	beq.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b6da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6de:	d10f      	bne.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6e0:	4b1b      	ldr	r3, [pc, #108]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e4:	4a1a      	ldr	r2, [pc, #104]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b6e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b6ec:	e00c      	b.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	3304      	adds	r3, #4
 800b6f2:	2101      	movs	r1, #1
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 ff37 	bl	800c568 <RCCEx_PLL2_Config>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b6fe:	e003      	b.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	75fb      	strb	r3, [r7, #23]
      break;
 800b704:	e000      	b.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800b706:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b708:	7dfb      	ldrb	r3, [r7, #23]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d109      	bne.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b70e:	4b10      	ldr	r3, [pc, #64]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b712:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b71a:	490d      	ldr	r1, [pc, #52]	; (800b750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800b71c:	4313      	orrs	r3, r2
 800b71e:	650b      	str	r3, [r1, #80]	; 0x50
 800b720:	e001      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b722:	7dfb      	ldrb	r3, [r7, #23]
 800b724:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d033      	beq.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b736:	2b03      	cmp	r3, #3
 800b738:	d81c      	bhi.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b73a:	a201      	add	r2, pc, #4	; (adr r2, 800b740 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800b73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b740:	0800b77b 	.word	0x0800b77b
 800b744:	0800b755 	.word	0x0800b755
 800b748:	0800b763 	.word	0x0800b763
 800b74c:	0800b77b 	.word	0x0800b77b
 800b750:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b754:	4bb8      	ldr	r3, [pc, #736]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b758:	4ab7      	ldr	r2, [pc, #732]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b75a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b75e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b760:	e00c      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3304      	adds	r3, #4
 800b766:	2102      	movs	r1, #2
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 fefd 	bl	800c568 <RCCEx_PLL2_Config>
 800b76e:	4603      	mov	r3, r0
 800b770:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b772:	e003      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	75fb      	strb	r3, [r7, #23]
      break;
 800b778:	e000      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b77a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b77c:	7dfb      	ldrb	r3, [r7, #23]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d109      	bne.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b782:	4bad      	ldr	r3, [pc, #692]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b786:	f023 0203 	bic.w	r2, r3, #3
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b78e:	49aa      	ldr	r1, [pc, #680]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b790:	4313      	orrs	r3, r2
 800b792:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b794:	e001      	b.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b796:	7dfb      	ldrb	r3, [r7, #23]
 800b798:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 8086 	beq.w	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7a8:	4ba4      	ldr	r3, [pc, #656]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4aa3      	ldr	r2, [pc, #652]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b7ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7b4:	f7f9 f946 	bl	8004a44 <HAL_GetTick>
 800b7b8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7ba:	e009      	b.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7bc:	f7f9 f942 	bl	8004a44 <HAL_GetTick>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	2b64      	cmp	r3, #100	; 0x64
 800b7c8:	d902      	bls.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	75fb      	strb	r3, [r7, #23]
        break;
 800b7ce:	e005      	b.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7d0:	4b9a      	ldr	r3, [pc, #616]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0ef      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b7dc:	7dfb      	ldrb	r3, [r7, #23]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d166      	bne.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b7e2:	4b95      	ldr	r3, [pc, #596]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b7e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b7ec:	4053      	eors	r3, r2
 800b7ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d013      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b7f6:	4b90      	ldr	r3, [pc, #576]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7fe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b800:	4b8d      	ldr	r3, [pc, #564]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b804:	4a8c      	ldr	r2, [pc, #560]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b80a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b80c:	4b8a      	ldr	r3, [pc, #552]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b80e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b810:	4a89      	ldr	r2, [pc, #548]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b816:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b818:	4a87      	ldr	r2, [pc, #540]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b828:	d115      	bne.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b82a:	f7f9 f90b 	bl	8004a44 <HAL_GetTick>
 800b82e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b830:	e00b      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b832:	f7f9 f907 	bl	8004a44 <HAL_GetTick>
 800b836:	4602      	mov	r2, r0
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b840:	4293      	cmp	r3, r2
 800b842:	d902      	bls.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b844:	2303      	movs	r3, #3
 800b846:	75fb      	strb	r3, [r7, #23]
            break;
 800b848:	e005      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b84a:	4b7b      	ldr	r3, [pc, #492]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b84e:	f003 0302 	and.w	r3, r3, #2
 800b852:	2b00      	cmp	r3, #0
 800b854:	d0ed      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b856:	7dfb      	ldrb	r3, [r7, #23]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d126      	bne.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b86a:	d10d      	bne.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b86c:	4b72      	ldr	r3, [pc, #456]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b86e:	691b      	ldr	r3, [r3, #16]
 800b870:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b87a:	0919      	lsrs	r1, r3, #4
 800b87c:	4b70      	ldr	r3, [pc, #448]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800b87e:	400b      	ands	r3, r1
 800b880:	496d      	ldr	r1, [pc, #436]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b882:	4313      	orrs	r3, r2
 800b884:	610b      	str	r3, [r1, #16]
 800b886:	e005      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b888:	4b6b      	ldr	r3, [pc, #428]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	4a6a      	ldr	r2, [pc, #424]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b88e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b892:	6113      	str	r3, [r2, #16]
 800b894:	4b68      	ldr	r3, [pc, #416]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b89e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8a2:	4965      	ldr	r1, [pc, #404]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	670b      	str	r3, [r1, #112]	; 0x70
 800b8a8:	e004      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	75bb      	strb	r3, [r7, #22]
 800b8ae:	e001      	b.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b0:	7dfb      	ldrb	r3, [r7, #23]
 800b8b2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f003 0301 	and.w	r3, r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d07e      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8c4:	2b28      	cmp	r3, #40	; 0x28
 800b8c6:	d867      	bhi.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b8c8:	a201      	add	r2, pc, #4	; (adr r2, 800b8d0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ce:	bf00      	nop
 800b8d0:	0800b99f 	.word	0x0800b99f
 800b8d4:	0800b999 	.word	0x0800b999
 800b8d8:	0800b999 	.word	0x0800b999
 800b8dc:	0800b999 	.word	0x0800b999
 800b8e0:	0800b999 	.word	0x0800b999
 800b8e4:	0800b999 	.word	0x0800b999
 800b8e8:	0800b999 	.word	0x0800b999
 800b8ec:	0800b999 	.word	0x0800b999
 800b8f0:	0800b975 	.word	0x0800b975
 800b8f4:	0800b999 	.word	0x0800b999
 800b8f8:	0800b999 	.word	0x0800b999
 800b8fc:	0800b999 	.word	0x0800b999
 800b900:	0800b999 	.word	0x0800b999
 800b904:	0800b999 	.word	0x0800b999
 800b908:	0800b999 	.word	0x0800b999
 800b90c:	0800b999 	.word	0x0800b999
 800b910:	0800b987 	.word	0x0800b987
 800b914:	0800b999 	.word	0x0800b999
 800b918:	0800b999 	.word	0x0800b999
 800b91c:	0800b999 	.word	0x0800b999
 800b920:	0800b999 	.word	0x0800b999
 800b924:	0800b999 	.word	0x0800b999
 800b928:	0800b999 	.word	0x0800b999
 800b92c:	0800b999 	.word	0x0800b999
 800b930:	0800b99f 	.word	0x0800b99f
 800b934:	0800b999 	.word	0x0800b999
 800b938:	0800b999 	.word	0x0800b999
 800b93c:	0800b999 	.word	0x0800b999
 800b940:	0800b999 	.word	0x0800b999
 800b944:	0800b999 	.word	0x0800b999
 800b948:	0800b999 	.word	0x0800b999
 800b94c:	0800b999 	.word	0x0800b999
 800b950:	0800b99f 	.word	0x0800b99f
 800b954:	0800b999 	.word	0x0800b999
 800b958:	0800b999 	.word	0x0800b999
 800b95c:	0800b999 	.word	0x0800b999
 800b960:	0800b999 	.word	0x0800b999
 800b964:	0800b999 	.word	0x0800b999
 800b968:	0800b999 	.word	0x0800b999
 800b96c:	0800b999 	.word	0x0800b999
 800b970:	0800b99f 	.word	0x0800b99f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	3304      	adds	r3, #4
 800b978:	2101      	movs	r1, #1
 800b97a:	4618      	mov	r0, r3
 800b97c:	f000 fdf4 	bl	800c568 <RCCEx_PLL2_Config>
 800b980:	4603      	mov	r3, r0
 800b982:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b984:	e00c      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	3324      	adds	r3, #36	; 0x24
 800b98a:	2101      	movs	r1, #1
 800b98c:	4618      	mov	r0, r3
 800b98e:	f000 fe9d 	bl	800c6cc <RCCEx_PLL3_Config>
 800b992:	4603      	mov	r3, r0
 800b994:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b996:	e003      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b998:	2301      	movs	r3, #1
 800b99a:	75fb      	strb	r3, [r7, #23]
      break;
 800b99c:	e000      	b.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800b99e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d109      	bne.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b9a6:	4b24      	ldr	r3, [pc, #144]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9aa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b9b2:	4921      	ldr	r1, [pc, #132]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	654b      	str	r3, [r1, #84]	; 0x54
 800b9b8:	e001      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ba:	7dfb      	ldrb	r3, [r7, #23]
 800b9bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 0302 	and.w	r3, r3, #2
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d03e      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9ce:	2b05      	cmp	r3, #5
 800b9d0:	d820      	bhi.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800b9d2:	a201      	add	r2, pc, #4	; (adr r2, 800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800b9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d8:	0800ba1b 	.word	0x0800ba1b
 800b9dc:	0800b9f1 	.word	0x0800b9f1
 800b9e0:	0800ba03 	.word	0x0800ba03
 800b9e4:	0800ba1b 	.word	0x0800ba1b
 800b9e8:	0800ba1b 	.word	0x0800ba1b
 800b9ec:	0800ba1b 	.word	0x0800ba1b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	2101      	movs	r1, #1
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 fdb6 	bl	800c568 <RCCEx_PLL2_Config>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ba00:	e00c      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	3324      	adds	r3, #36	; 0x24
 800ba06:	2101      	movs	r1, #1
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 fe5f 	bl	800c6cc <RCCEx_PLL3_Config>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ba12:	e003      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	75fb      	strb	r3, [r7, #23]
      break;
 800ba18:	e000      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800ba1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d110      	bne.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ba22:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba26:	f023 0207 	bic.w	r2, r3, #7
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba2e:	4902      	ldr	r1, [pc, #8]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800ba30:	4313      	orrs	r3, r2
 800ba32:	654b      	str	r3, [r1, #84]	; 0x54
 800ba34:	e008      	b.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800ba36:	bf00      	nop
 800ba38:	58024400 	.word	0x58024400
 800ba3c:	58024800 	.word	0x58024800
 800ba40:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba44:	7dfb      	ldrb	r3, [r7, #23]
 800ba46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 0304 	and.w	r3, r3, #4
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d039      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba5a:	2b05      	cmp	r3, #5
 800ba5c:	d820      	bhi.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800ba5e:	a201      	add	r2, pc, #4	; (adr r2, 800ba64 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800ba60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba64:	0800baa7 	.word	0x0800baa7
 800ba68:	0800ba7d 	.word	0x0800ba7d
 800ba6c:	0800ba8f 	.word	0x0800ba8f
 800ba70:	0800baa7 	.word	0x0800baa7
 800ba74:	0800baa7 	.word	0x0800baa7
 800ba78:	0800baa7 	.word	0x0800baa7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	3304      	adds	r3, #4
 800ba80:	2101      	movs	r1, #1
 800ba82:	4618      	mov	r0, r3
 800ba84:	f000 fd70 	bl	800c568 <RCCEx_PLL2_Config>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ba8c:	e00c      	b.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	3324      	adds	r3, #36	; 0x24
 800ba92:	2101      	movs	r1, #1
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 fe19 	bl	800c6cc <RCCEx_PLL3_Config>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ba9e:	e003      	b.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	75fb      	strb	r3, [r7, #23]
      break;
 800baa4:	e000      	b.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800baa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10a      	bne.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800baae:	4bb7      	ldr	r3, [pc, #732]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bab2:	f023 0207 	bic.w	r2, r3, #7
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800babc:	49b3      	ldr	r1, [pc, #716]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	658b      	str	r3, [r1, #88]	; 0x58
 800bac2:	e001      	b.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac4:	7dfb      	ldrb	r3, [r7, #23]
 800bac6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f003 0320 	and.w	r3, r3, #32
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d04b      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bade:	d02e      	beq.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800bae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bae4:	d828      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baea:	d02a      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800baec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baf0:	d822      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800baf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800baf6:	d026      	beq.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800baf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bafc:	d81c      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bafe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb02:	d010      	beq.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800bb04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb08:	d816      	bhi.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d01d      	beq.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bb0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb12:	d111      	bne.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3304      	adds	r3, #4
 800bb18:	2100      	movs	r1, #0
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f000 fd24 	bl	800c568 <RCCEx_PLL2_Config>
 800bb20:	4603      	mov	r3, r0
 800bb22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bb24:	e012      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	3324      	adds	r3, #36	; 0x24
 800bb2a:	2102      	movs	r1, #2
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f000 fdcd 	bl	800c6cc <RCCEx_PLL3_Config>
 800bb32:	4603      	mov	r3, r0
 800bb34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bb36:	e009      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb3c:	e006      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bb3e:	bf00      	nop
 800bb40:	e004      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bb42:	bf00      	nop
 800bb44:	e002      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bb46:	bf00      	nop
 800bb48:	e000      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800bb4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb4c:	7dfb      	ldrb	r3, [r7, #23]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb52:	4b8e      	ldr	r3, [pc, #568]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bb54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb56:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb60:	498a      	ldr	r1, [pc, #552]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	654b      	str	r3, [r1, #84]	; 0x54
 800bb66:	e001      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d04b      	beq.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bb82:	d02e      	beq.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800bb84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bb88:	d828      	bhi.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bb8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb8e:	d02a      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800bb90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb94:	d822      	bhi.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bb96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb9a:	d026      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800bb9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bba0:	d81c      	bhi.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bba6:	d010      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800bba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbac:	d816      	bhi.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d01d      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800bbb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbb6:	d111      	bne.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 fcd2 	bl	800c568 <RCCEx_PLL2_Config>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bbc8:	e012      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	3324      	adds	r3, #36	; 0x24
 800bbce:	2102      	movs	r1, #2
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f000 fd7b 	bl	800c6cc <RCCEx_PLL3_Config>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bbda:	e009      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	75fb      	strb	r3, [r7, #23]
      break;
 800bbe0:	e006      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bbe2:	bf00      	nop
 800bbe4:	e004      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bbe6:	bf00      	nop
 800bbe8:	e002      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bbea:	bf00      	nop
 800bbec:	e000      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800bbee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10a      	bne.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bbf6:	4b65      	ldr	r3, [pc, #404]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bbf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbfa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc04:	4961      	ldr	r1, [pc, #388]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	658b      	str	r3, [r1, #88]	; 0x58
 800bc0a:	e001      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc0c:	7dfb      	ldrb	r3, [r7, #23]
 800bc0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d04b      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc22:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc26:	d02e      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800bc28:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc2c:	d828      	bhi.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bc2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc32:	d02a      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800bc34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc38:	d822      	bhi.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bc3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bc3e:	d026      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800bc40:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bc44:	d81c      	bhi.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bc46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc4a:	d010      	beq.n	800bc6e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800bc4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc50:	d816      	bhi.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d01d      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800bc56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc5a:	d111      	bne.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	2100      	movs	r1, #0
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 fc80 	bl	800c568 <RCCEx_PLL2_Config>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bc6c:	e012      	b.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	3324      	adds	r3, #36	; 0x24
 800bc72:	2102      	movs	r1, #2
 800bc74:	4618      	mov	r0, r3
 800bc76:	f000 fd29 	bl	800c6cc <RCCEx_PLL3_Config>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bc7e:	e009      	b.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	75fb      	strb	r3, [r7, #23]
      break;
 800bc84:	e006      	b.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bc86:	bf00      	nop
 800bc88:	e004      	b.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bc8a:	bf00      	nop
 800bc8c:	e002      	b.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bc8e:	bf00      	nop
 800bc90:	e000      	b.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800bc92:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc94:	7dfb      	ldrb	r3, [r7, #23]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10a      	bne.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bc9a:	4b3c      	ldr	r3, [pc, #240]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bc9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bca8:	4938      	ldr	r1, [pc, #224]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	658b      	str	r3, [r1, #88]	; 0x58
 800bcae:	e001      	b.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcb0:	7dfb      	ldrb	r3, [r7, #23]
 800bcb2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0308 	and.w	r3, r3, #8
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d01a      	beq.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcca:	d10a      	bne.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	3324      	adds	r3, #36	; 0x24
 800bcd0:	2102      	movs	r1, #2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 fcfa 	bl	800c6cc <RCCEx_PLL3_Config>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d001      	beq.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bce2:	4b2a      	ldr	r3, [pc, #168]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bce6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcf0:	4926      	ldr	r1, [pc, #152]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 0310 	and.w	r3, r3, #16
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d01a      	beq.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd0c:	d10a      	bne.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	3324      	adds	r3, #36	; 0x24
 800bd12:	2102      	movs	r1, #2
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 fcd9 	bl	800c6cc <RCCEx_PLL3_Config>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d001      	beq.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bd24:	4b19      	ldr	r3, [pc, #100]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd32:	4916      	ldr	r1, [pc, #88]	; (800bd8c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800bd34:	4313      	orrs	r3, r2
 800bd36:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d036      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd4e:	d01f      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800bd50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd54:	d817      	bhi.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d003      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800bd5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd5e:	d009      	beq.n	800bd74 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800bd60:	e011      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	3304      	adds	r3, #4
 800bd66:	2100      	movs	r1, #0
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 fbfd 	bl	800c568 <RCCEx_PLL2_Config>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bd72:	e00e      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	3324      	adds	r3, #36	; 0x24
 800bd78:	2102      	movs	r1, #2
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 fca6 	bl	800c6cc <RCCEx_PLL3_Config>
 800bd80:	4603      	mov	r3, r0
 800bd82:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800bd84:	e005      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	75fb      	strb	r3, [r7, #23]
      break;
 800bd8a:	e002      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800bd8c:	58024400 	.word	0x58024400
      break;
 800bd90:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd92:	7dfb      	ldrb	r3, [r7, #23]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bd98:	4b93      	ldr	r3, [pc, #588]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bd9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bda6:	4990      	ldr	r1, [pc, #576]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	658b      	str	r3, [r1, #88]	; 0x58
 800bdac:	e001      	b.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdae:	7dfb      	ldrb	r3, [r7, #23]
 800bdb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d033      	beq.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdc8:	d01c      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800bdca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bdce:	d816      	bhi.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800bdd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdd4:	d003      	beq.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800bdd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdda:	d007      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800bddc:	e00f      	b.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdde:	4b82      	ldr	r3, [pc, #520]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde2:	4a81      	ldr	r2, [pc, #516]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bde4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bde8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800bdea:	e00c      	b.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	3324      	adds	r3, #36	; 0x24
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 fc6a 	bl	800c6cc <RCCEx_PLL3_Config>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800bdfc:	e003      	b.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bdfe:	2301      	movs	r3, #1
 800be00:	75fb      	strb	r3, [r7, #23]
      break;
 800be02:	e000      	b.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800be04:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be06:	7dfb      	ldrb	r3, [r7, #23]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10a      	bne.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800be0c:	4b76      	ldr	r3, [pc, #472]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be1a:	4973      	ldr	r1, [pc, #460]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be1c:	4313      	orrs	r3, r2
 800be1e:	654b      	str	r3, [r1, #84]	; 0x54
 800be20:	e001      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be22:	7dfb      	ldrb	r3, [r7, #23]
 800be24:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d029      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be36:	2b00      	cmp	r3, #0
 800be38:	d003      	beq.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800be3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be3e:	d007      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800be40:	e00f      	b.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be42:	4b69      	ldr	r3, [pc, #420]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be46:	4a68      	ldr	r2, [pc, #416]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800be4e:	e00b      	b.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	3304      	adds	r3, #4
 800be54:	2102      	movs	r1, #2
 800be56:	4618      	mov	r0, r3
 800be58:	f000 fb86 	bl	800c568 <RCCEx_PLL2_Config>
 800be5c:	4603      	mov	r3, r0
 800be5e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800be60:	e002      	b.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	75fb      	strb	r3, [r7, #23]
      break;
 800be66:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be68:	7dfb      	ldrb	r3, [r7, #23]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d109      	bne.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800be6e:	4b5e      	ldr	r3, [pc, #376]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be72:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be7a:	495b      	ldr	r1, [pc, #364]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800be7c:	4313      	orrs	r3, r2
 800be7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800be80:	e001      	b.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be82:	7dfb      	ldrb	r3, [r7, #23]
 800be84:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	3324      	adds	r3, #36	; 0x24
 800be96:	2102      	movs	r1, #2
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fc17 	bl	800c6cc <RCCEx_PLL3_Config>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800bea4:	2301      	movs	r3, #1
 800bea6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d030      	beq.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bebc:	d017      	beq.n	800beee <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800bebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bec2:	d811      	bhi.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800bec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bec8:	d013      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800beca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bece:	d80b      	bhi.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d010      	beq.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800bed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bed8:	d106      	bne.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800beda:	4b43      	ldr	r3, [pc, #268]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bede:	4a42      	ldr	r2, [pc, #264]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bee4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bee6:	e007      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	75fb      	strb	r3, [r7, #23]
      break;
 800beec:	e004      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800beee:	bf00      	nop
 800bef0:	e002      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bef2:	bf00      	nop
 800bef4:	e000      	b.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800bef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bef8:	7dfb      	ldrb	r3, [r7, #23]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d109      	bne.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800befe:	4b3a      	ldr	r3, [pc, #232]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf0a:	4937      	ldr	r1, [pc, #220]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	654b      	str	r3, [r1, #84]	; 0x54
 800bf10:	e001      	b.n	800bf16 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
 800bf14:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d008      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bf22:	4b31      	ldr	r3, [pc, #196]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf2e:	492e      	ldr	r1, [pc, #184]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf30:	4313      	orrs	r3, r2
 800bf32:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d009      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bf40:	4b29      	ldr	r3, [pc, #164]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf42:	691b      	ldr	r3, [r3, #16]
 800bf44:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bf4e:	4926      	ldr	r1, [pc, #152]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf50:	4313      	orrs	r3, r2
 800bf52:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d008      	beq.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bf60:	4b21      	ldr	r3, [pc, #132]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf6c:	491e      	ldr	r1, [pc, #120]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00d      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bf7e:	4b1a      	ldr	r3, [pc, #104]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	4a19      	ldr	r2, [pc, #100]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf88:	6113      	str	r3, [r2, #16]
 800bf8a:	4b17      	ldr	r3, [pc, #92]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf8c:	691a      	ldr	r2, [r3, #16]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bf94:	4914      	ldr	r1, [pc, #80]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bf96:	4313      	orrs	r3, r2
 800bf98:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	da08      	bge.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bfa2:	4b11      	ldr	r3, [pc, #68]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfae:	490e      	ldr	r1, [pc, #56]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d009      	beq.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bfc0:	4b09      	ldr	r3, [pc, #36]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfce:	4906      	ldr	r1, [pc, #24]	; (800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bfd4:	7dbb      	ldrb	r3, [r7, #22]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d101      	bne.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e000      	b.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3718      	adds	r7, #24
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	58024400 	.word	0x58024400

0800bfec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bff0:	f7ff f860 	bl	800b0b4 <HAL_RCC_GetHCLKFreq>
 800bff4:	4602      	mov	r2, r0
 800bff6:	4b06      	ldr	r3, [pc, #24]	; (800c010 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	091b      	lsrs	r3, r3, #4
 800bffc:	f003 0307 	and.w	r3, r3, #7
 800c000:	4904      	ldr	r1, [pc, #16]	; (800c014 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c002:	5ccb      	ldrb	r3, [r1, r3]
 800c004:	f003 031f 	and.w	r3, r3, #31
 800c008:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	58024400 	.word	0x58024400
 800c014:	08013514 	.word	0x08013514

0800c018 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c018:	b480      	push	{r7}
 800c01a:	b089      	sub	sp, #36	; 0x24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c020:	4ba1      	ldr	r3, [pc, #644]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c024:	f003 0303 	and.w	r3, r3, #3
 800c028:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c02a:	4b9f      	ldr	r3, [pc, #636]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c02e:	0b1b      	lsrs	r3, r3, #12
 800c030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c034:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c036:	4b9c      	ldr	r3, [pc, #624]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03a:	091b      	lsrs	r3, r3, #4
 800c03c:	f003 0301 	and.w	r3, r3, #1
 800c040:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c042:	4b99      	ldr	r3, [pc, #612]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c046:	08db      	lsrs	r3, r3, #3
 800c048:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c04c:	693a      	ldr	r2, [r7, #16]
 800c04e:	fb02 f303 	mul.w	r3, r2, r3
 800c052:	ee07 3a90 	vmov	s15, r3
 800c056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c05a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 8111 	beq.w	800c288 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	2b02      	cmp	r3, #2
 800c06a:	f000 8083 	beq.w	800c174 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	2b02      	cmp	r3, #2
 800c072:	f200 80a1 	bhi.w	800c1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d003      	beq.n	800c084 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d056      	beq.n	800c130 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c082:	e099      	b.n	800c1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c084:	4b88      	ldr	r3, [pc, #544]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f003 0320 	and.w	r3, r3, #32
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d02d      	beq.n	800c0ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c090:	4b85      	ldr	r3, [pc, #532]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	08db      	lsrs	r3, r3, #3
 800c096:	f003 0303 	and.w	r3, r3, #3
 800c09a:	4a84      	ldr	r2, [pc, #528]	; (800c2ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c09c:	fa22 f303 	lsr.w	r3, r2, r3
 800c0a0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	ee07 3a90 	vmov	s15, r3
 800c0a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	ee07 3a90 	vmov	s15, r3
 800c0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0ba:	4b7b      	ldr	r3, [pc, #492]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c2:	ee07 3a90 	vmov	s15, r3
 800c0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c0ea:	e087      	b.n	800c1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	ee07 3a90 	vmov	s15, r3
 800c0f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c0fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0fe:	4b6a      	ldr	r3, [pc, #424]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c106:	ee07 3a90 	vmov	s15, r3
 800c10a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c10e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c112:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c11a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c11e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c12a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c12e:	e065      	b.n	800c1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	ee07 3a90 	vmov	s15, r3
 800c136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c13a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c13e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c142:	4b59      	ldr	r3, [pc, #356]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c14a:	ee07 3a90 	vmov	s15, r3
 800c14e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c152:	ed97 6a03 	vldr	s12, [r7, #12]
 800c156:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c15a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c15e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c16a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c16e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c172:	e043      	b.n	800c1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	ee07 3a90 	vmov	s15, r3
 800c17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c17e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c2bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c186:	4b48      	ldr	r3, [pc, #288]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18e:	ee07 3a90 	vmov	s15, r3
 800c192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c196:	ed97 6a03 	vldr	s12, [r7, #12]
 800c19a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c19e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1b6:	e021      	b.n	800c1fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	ee07 3a90 	vmov	s15, r3
 800c1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c2b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ca:	4b37      	ldr	r3, [pc, #220]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d2:	ee07 3a90 	vmov	s15, r3
 800c1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1da:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1de:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c2b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c1fc:	4b2a      	ldr	r3, [pc, #168]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c200:	0a5b      	lsrs	r3, r3, #9
 800c202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c206:	ee07 3a90 	vmov	s15, r3
 800c20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c212:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c216:	edd7 6a07 	vldr	s13, [r7, #28]
 800c21a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c21e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c222:	ee17 2a90 	vmov	r2, s15
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c22a:	4b1f      	ldr	r3, [pc, #124]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22e:	0c1b      	lsrs	r3, r3, #16
 800c230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c234:	ee07 3a90 	vmov	s15, r3
 800c238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c23c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c240:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c244:	edd7 6a07 	vldr	s13, [r7, #28]
 800c248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c24c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c250:	ee17 2a90 	vmov	r2, s15
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c258:	4b13      	ldr	r3, [pc, #76]	; (800c2a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25c:	0e1b      	lsrs	r3, r3, #24
 800c25e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c262:	ee07 3a90 	vmov	s15, r3
 800c266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c26e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c272:	edd7 6a07 	vldr	s13, [r7, #28]
 800c276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c27a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c27e:	ee17 2a90 	vmov	r2, s15
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c286:	e008      	b.n	800c29a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2200      	movs	r2, #0
 800c298:	609a      	str	r2, [r3, #8]
}
 800c29a:	bf00      	nop
 800c29c:	3724      	adds	r7, #36	; 0x24
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	58024400 	.word	0x58024400
 800c2ac:	03d09000 	.word	0x03d09000
 800c2b0:	46000000 	.word	0x46000000
 800c2b4:	4c742400 	.word	0x4c742400
 800c2b8:	4a742400 	.word	0x4a742400
 800c2bc:	4bbebc20 	.word	0x4bbebc20

0800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b089      	sub	sp, #36	; 0x24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2c8:	4ba1      	ldr	r3, [pc, #644]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2cc:	f003 0303 	and.w	r3, r3, #3
 800c2d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c2d2:	4b9f      	ldr	r3, [pc, #636]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d6:	0d1b      	lsrs	r3, r3, #20
 800c2d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c2de:	4b9c      	ldr	r3, [pc, #624]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e2:	0a1b      	lsrs	r3, r3, #8
 800c2e4:	f003 0301 	and.w	r3, r3, #1
 800c2e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c2ea:	4b99      	ldr	r3, [pc, #612]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ee:	08db      	lsrs	r3, r3, #3
 800c2f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2f4:	693a      	ldr	r2, [r7, #16]
 800c2f6:	fb02 f303 	mul.w	r3, r2, r3
 800c2fa:	ee07 3a90 	vmov	s15, r3
 800c2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f000 8111 	beq.w	800c530 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	2b02      	cmp	r3, #2
 800c312:	f000 8083 	beq.w	800c41c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c316:	69bb      	ldr	r3, [r7, #24]
 800c318:	2b02      	cmp	r3, #2
 800c31a:	f200 80a1 	bhi.w	800c460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d003      	beq.n	800c32c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	2b01      	cmp	r3, #1
 800c328:	d056      	beq.n	800c3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c32a:	e099      	b.n	800c460 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c32c:	4b88      	ldr	r3, [pc, #544]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f003 0320 	and.w	r3, r3, #32
 800c334:	2b00      	cmp	r3, #0
 800c336:	d02d      	beq.n	800c394 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c338:	4b85      	ldr	r3, [pc, #532]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	08db      	lsrs	r3, r3, #3
 800c33e:	f003 0303 	and.w	r3, r3, #3
 800c342:	4a84      	ldr	r2, [pc, #528]	; (800c554 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c344:	fa22 f303 	lsr.w	r3, r2, r3
 800c348:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	ee07 3a90 	vmov	s15, r3
 800c350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	ee07 3a90 	vmov	s15, r3
 800c35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c362:	4b7b      	ldr	r3, [pc, #492]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c36a:	ee07 3a90 	vmov	s15, r3
 800c36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c372:	ed97 6a03 	vldr	s12, [r7, #12]
 800c376:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c38e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c392:	e087      	b.n	800c4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	ee07 3a90 	vmov	s15, r3
 800c39a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c39e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c55c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c3a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3a6:	4b6a      	ldr	r3, [pc, #424]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ae:	ee07 3a90 	vmov	s15, r3
 800c3b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c3be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3d6:	e065      	b.n	800c4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	ee07 3a90 	vmov	s15, r3
 800c3de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c3e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ea:	4b59      	ldr	r3, [pc, #356]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f2:	ee07 3a90 	vmov	s15, r3
 800c3f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c40a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c40e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c41a:	e043      	b.n	800c4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	ee07 3a90 	vmov	s15, r3
 800c422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c426:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c564 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c42a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c42e:	4b48      	ldr	r3, [pc, #288]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c436:	ee07 3a90 	vmov	s15, r3
 800c43a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c43e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c442:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c44a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c44e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c45a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c45e:	e021      	b.n	800c4a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	ee07 3a90 	vmov	s15, r3
 800c466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c46a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c560 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c472:	4b37      	ldr	r3, [pc, #220]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c47a:	ee07 3a90 	vmov	s15, r3
 800c47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c482:	ed97 6a03 	vldr	s12, [r7, #12]
 800c486:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c558 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c49e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c4a4:	4b2a      	ldr	r3, [pc, #168]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a8:	0a5b      	lsrs	r3, r3, #9
 800c4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ae:	ee07 3a90 	vmov	s15, r3
 800c4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4ca:	ee17 2a90 	vmov	r2, s15
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c4d2:	4b1f      	ldr	r3, [pc, #124]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4d6:	0c1b      	lsrs	r3, r3, #16
 800c4d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4dc:	ee07 3a90 	vmov	s15, r3
 800c4e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4f8:	ee17 2a90 	vmov	r2, s15
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c500:	4b13      	ldr	r3, [pc, #76]	; (800c550 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c504:	0e1b      	lsrs	r3, r3, #24
 800c506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c50a:	ee07 3a90 	vmov	s15, r3
 800c50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c51a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c51e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c526:	ee17 2a90 	vmov	r2, s15
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c52e:	e008      	b.n	800c542 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	609a      	str	r2, [r3, #8]
}
 800c542:	bf00      	nop
 800c544:	3724      	adds	r7, #36	; 0x24
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	58024400 	.word	0x58024400
 800c554:	03d09000 	.word	0x03d09000
 800c558:	46000000 	.word	0x46000000
 800c55c:	4c742400 	.word	0x4c742400
 800c560:	4a742400 	.word	0x4a742400
 800c564:	4bbebc20 	.word	0x4bbebc20

0800c568 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c576:	4b53      	ldr	r3, [pc, #332]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57a:	f003 0303 	and.w	r3, r3, #3
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d101      	bne.n	800c586 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e099      	b.n	800c6ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c586:	4b4f      	ldr	r3, [pc, #316]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a4e      	ldr	r2, [pc, #312]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c58c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c592:	f7f8 fa57 	bl	8004a44 <HAL_GetTick>
 800c596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c598:	e008      	b.n	800c5ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c59a:	f7f8 fa53 	bl	8004a44 <HAL_GetTick>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d901      	bls.n	800c5ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e086      	b.n	800c6ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5ac:	4b45      	ldr	r3, [pc, #276]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1f0      	bne.n	800c59a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c5b8:	4b42      	ldr	r3, [pc, #264]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	031b      	lsls	r3, r3, #12
 800c5c6:	493f      	ldr	r1, [pc, #252]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	628b      	str	r3, [r1, #40]	; 0x28
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	025b      	lsls	r3, r3, #9
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	431a      	orrs	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	041b      	lsls	r3, r3, #16
 800c5ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c5ee:	431a      	orrs	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	061b      	lsls	r3, r3, #24
 800c5f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c5fc:	4931      	ldr	r1, [pc, #196]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c5fe:	4313      	orrs	r3, r2
 800c600:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c602:	4b30      	ldr	r3, [pc, #192]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c606:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	695b      	ldr	r3, [r3, #20]
 800c60e:	492d      	ldr	r1, [pc, #180]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c610:	4313      	orrs	r3, r2
 800c612:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c614:	4b2b      	ldr	r3, [pc, #172]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c618:	f023 0220 	bic.w	r2, r3, #32
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	699b      	ldr	r3, [r3, #24]
 800c620:	4928      	ldr	r1, [pc, #160]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c622:	4313      	orrs	r3, r2
 800c624:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c626:	4b27      	ldr	r3, [pc, #156]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62a:	4a26      	ldr	r2, [pc, #152]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c62c:	f023 0310 	bic.w	r3, r3, #16
 800c630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c632:	4b24      	ldr	r3, [pc, #144]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c636:	4b24      	ldr	r3, [pc, #144]	; (800c6c8 <RCCEx_PLL2_Config+0x160>)
 800c638:	4013      	ands	r3, r2
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	69d2      	ldr	r2, [r2, #28]
 800c63e:	00d2      	lsls	r2, r2, #3
 800c640:	4920      	ldr	r1, [pc, #128]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c642:	4313      	orrs	r3, r2
 800c644:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c646:	4b1f      	ldr	r3, [pc, #124]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64a:	4a1e      	ldr	r2, [pc, #120]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c64c:	f043 0310 	orr.w	r3, r3, #16
 800c650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d106      	bne.n	800c666 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c658:	4b1a      	ldr	r3, [pc, #104]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65c:	4a19      	ldr	r2, [pc, #100]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c65e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c662:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c664:	e00f      	b.n	800c686 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d106      	bne.n	800c67a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c66c:	4b15      	ldr	r3, [pc, #84]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c670:	4a14      	ldr	r2, [pc, #80]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c676:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c678:	e005      	b.n	800c686 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c67a:	4b12      	ldr	r3, [pc, #72]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67e:	4a11      	ldr	r2, [pc, #68]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c684:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c686:	4b0f      	ldr	r3, [pc, #60]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a0e      	ldr	r2, [pc, #56]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c68c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c692:	f7f8 f9d7 	bl	8004a44 <HAL_GetTick>
 800c696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c698:	e008      	b.n	800c6ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c69a:	f7f8 f9d3 	bl	8004a44 <HAL_GetTick>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d901      	bls.n	800c6ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6a8:	2303      	movs	r3, #3
 800c6aa:	e006      	b.n	800c6ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6ac:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d0f0      	beq.n	800c69a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	58024400 	.word	0x58024400
 800c6c8:	ffff0007 	.word	0xffff0007

0800c6cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c6da:	4b53      	ldr	r3, [pc, #332]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6de:	f003 0303 	and.w	r3, r3, #3
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	d101      	bne.n	800c6ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e099      	b.n	800c81e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c6ea:	4b4f      	ldr	r3, [pc, #316]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a4e      	ldr	r2, [pc, #312]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c6f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6f6:	f7f8 f9a5 	bl	8004a44 <HAL_GetTick>
 800c6fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c6fc:	e008      	b.n	800c710 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c6fe:	f7f8 f9a1 	bl	8004a44 <HAL_GetTick>
 800c702:	4602      	mov	r2, r0
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	1ad3      	subs	r3, r2, r3
 800c708:	2b02      	cmp	r3, #2
 800c70a:	d901      	bls.n	800c710 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c70c:	2303      	movs	r3, #3
 800c70e:	e086      	b.n	800c81e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c710:	4b45      	ldr	r3, [pc, #276]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1f0      	bne.n	800c6fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c71c:	4b42      	ldr	r3, [pc, #264]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c720:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	051b      	lsls	r3, r3, #20
 800c72a:	493f      	ldr	r1, [pc, #252]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c72c:	4313      	orrs	r3, r2
 800c72e:	628b      	str	r3, [r1, #40]	; 0x28
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	3b01      	subs	r3, #1
 800c736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	3b01      	subs	r3, #1
 800c740:	025b      	lsls	r3, r3, #9
 800c742:	b29b      	uxth	r3, r3
 800c744:	431a      	orrs	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	041b      	lsls	r3, r3, #16
 800c74e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c752:	431a      	orrs	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	3b01      	subs	r3, #1
 800c75a:	061b      	lsls	r3, r3, #24
 800c75c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c760:	4931      	ldr	r1, [pc, #196]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c762:	4313      	orrs	r3, r2
 800c764:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c766:	4b30      	ldr	r3, [pc, #192]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	492d      	ldr	r1, [pc, #180]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c774:	4313      	orrs	r3, r2
 800c776:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c778:	4b2b      	ldr	r3, [pc, #172]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	699b      	ldr	r3, [r3, #24]
 800c784:	4928      	ldr	r1, [pc, #160]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c786:	4313      	orrs	r3, r2
 800c788:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c78a:	4b27      	ldr	r3, [pc, #156]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78e:	4a26      	ldr	r2, [pc, #152]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c796:	4b24      	ldr	r3, [pc, #144]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c79a:	4b24      	ldr	r3, [pc, #144]	; (800c82c <RCCEx_PLL3_Config+0x160>)
 800c79c:	4013      	ands	r3, r2
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	69d2      	ldr	r2, [r2, #28]
 800c7a2:	00d2      	lsls	r2, r2, #3
 800c7a4:	4920      	ldr	r1, [pc, #128]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c7aa:	4b1f      	ldr	r3, [pc, #124]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ae:	4a1e      	ldr	r2, [pc, #120]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d106      	bne.n	800c7ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c7bc:	4b1a      	ldr	r3, [pc, #104]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c0:	4a19      	ldr	r2, [pc, #100]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c7c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7c8:	e00f      	b.n	800c7ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d106      	bne.n	800c7de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c7d0:	4b15      	ldr	r3, [pc, #84]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d4:	4a14      	ldr	r2, [pc, #80]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c7da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7dc:	e005      	b.n	800c7ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c7de:	4b12      	ldr	r3, [pc, #72]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e2:	4a11      	ldr	r2, [pc, #68]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c7ea:	4b0f      	ldr	r3, [pc, #60]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a0e      	ldr	r2, [pc, #56]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7f6:	f7f8 f925 	bl	8004a44 <HAL_GetTick>
 800c7fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c7fc:	e008      	b.n	800c810 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c7fe:	f7f8 f921 	bl	8004a44 <HAL_GetTick>
 800c802:	4602      	mov	r2, r0
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d901      	bls.n	800c810 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e006      	b.n	800c81e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c810:	4b05      	ldr	r3, [pc, #20]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d0f0      	beq.n	800c7fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	58024400 	.word	0x58024400
 800c82c:	ffff0007 	.word	0xffff0007

0800c830 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800c838:	2300      	movs	r3, #0
 800c83a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d101      	bne.n	800c846 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	e0eb      	b.n	800ca1e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a75      	ldr	r2, [pc, #468]	; (800ca28 <HAL_SPI_Init+0x1f8>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d00f      	beq.n	800c876 <HAL_SPI_Init+0x46>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a74      	ldr	r2, [pc, #464]	; (800ca2c <HAL_SPI_Init+0x1fc>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d00a      	beq.n	800c876 <HAL_SPI_Init+0x46>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a72      	ldr	r2, [pc, #456]	; (800ca30 <HAL_SPI_Init+0x200>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d005      	beq.n	800c876 <HAL_SPI_Init+0x46>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	2b0f      	cmp	r3, #15
 800c870:	d901      	bls.n	800c876 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e0d3      	b.n	800ca1e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f001 f87a 	bl	800d970 <SPI_GetPacketSize>
 800c87c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a69      	ldr	r2, [pc, #420]	; (800ca28 <HAL_SPI_Init+0x1f8>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d00c      	beq.n	800c8a2 <HAL_SPI_Init+0x72>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a67      	ldr	r2, [pc, #412]	; (800ca2c <HAL_SPI_Init+0x1fc>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d007      	beq.n	800c8a2 <HAL_SPI_Init+0x72>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a66      	ldr	r2, [pc, #408]	; (800ca30 <HAL_SPI_Init+0x200>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d002      	beq.n	800c8a2 <HAL_SPI_Init+0x72>
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2b08      	cmp	r3, #8
 800c8a0:	d811      	bhi.n	800c8c6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c8a6:	4a60      	ldr	r2, [pc, #384]	; (800ca28 <HAL_SPI_Init+0x1f8>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d009      	beq.n	800c8c0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a5e      	ldr	r2, [pc, #376]	; (800ca2c <HAL_SPI_Init+0x1fc>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d004      	beq.n	800c8c0 <HAL_SPI_Init+0x90>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a5d      	ldr	r2, [pc, #372]	; (800ca30 <HAL_SPI_Init+0x200>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d104      	bne.n	800c8ca <HAL_SPI_Init+0x9a>
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2b10      	cmp	r3, #16
 800c8c4:	d901      	bls.n	800c8ca <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	e0a9      	b.n	800ca1e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c8d0:	b2db      	uxtb	r3, r3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d106      	bne.n	800c8e4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f7f6 ffa2 	bl	8003828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2202      	movs	r2, #2
 800c8e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f022 0201 	bic.w	r2, r2, #1
 800c8fa:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c904:	d119      	bne.n	800c93a <HAL_SPI_Init+0x10a>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c90e:	d103      	bne.n	800c918 <HAL_SPI_Init+0xe8>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c914:	2b00      	cmp	r3, #0
 800c916:	d008      	beq.n	800c92a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d10c      	bne.n	800c93a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c928:	d107      	bne.n	800c93a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c938:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	69da      	ldr	r2, [r3, #28]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c942:	431a      	orrs	r2, r3
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	431a      	orrs	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c94c:	ea42 0103 	orr.w	r1, r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	68da      	ldr	r2, [r3, #12]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	430a      	orrs	r2, r1
 800c95a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c964:	431a      	orrs	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96a:	431a      	orrs	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	431a      	orrs	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	691b      	ldr	r3, [r3, #16]
 800c976:	431a      	orrs	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	695b      	ldr	r3, [r3, #20]
 800c97c:	431a      	orrs	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a1b      	ldr	r3, [r3, #32]
 800c982:	431a      	orrs	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	431a      	orrs	r2, r3
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c98e:	431a      	orrs	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	431a      	orrs	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c99a:	ea42 0103 	orr.w	r1, r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	430a      	orrs	r2, r1
 800c9a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d113      	bne.n	800c9da <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c9d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f022 0201 	bic.w	r2, r2, #1
 800c9e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00a      	beq.n	800ca0c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	430a      	orrs	r2, r1
 800ca0a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	40013000 	.word	0x40013000
 800ca2c:	40003800 	.word	0x40003800
 800ca30:	40003c00 	.word	0x40003c00

0800ca34 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b08a      	sub	sp, #40	; 0x28
 800ca38:	af02      	add	r7, sp, #8
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	603b      	str	r3, [r7, #0]
 800ca40:	4613      	mov	r3, r2
 800ca42:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3320      	adds	r3, #32
 800ca4a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d101      	bne.n	800ca5e <HAL_SPI_Transmit+0x2a>
 800ca5a:	2302      	movs	r3, #2
 800ca5c:	e1d7      	b.n	800ce0e <HAL_SPI_Transmit+0x3da>
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca66:	f7f7 ffed 	bl	8004a44 <HAL_GetTick>
 800ca6a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d007      	beq.n	800ca88 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ca78:	2302      	movs	r3, #2
 800ca7a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ca84:	7efb      	ldrb	r3, [r7, #27]
 800ca86:	e1c2      	b.n	800ce0e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d002      	beq.n	800ca94 <HAL_SPI_Transmit+0x60>
 800ca8e:	88fb      	ldrh	r3, [r7, #6]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d107      	bne.n	800caa4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800caa0:	7efb      	ldrb	r3, [r7, #27]
 800caa2:	e1b4      	b.n	800ce0e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2203      	movs	r2, #3
 800caa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2200      	movs	r2, #0
 800cab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	88fa      	ldrh	r2, [r7, #6]
 800cabe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	88fa      	ldrh	r2, [r7, #6]
 800cac6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2200      	movs	r2, #0
 800cad4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2200      	movs	r2, #0
 800cae4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2200      	movs	r2, #0
 800caea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800caf4:	d107      	bne.n	800cb06 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cb04:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	4b96      	ldr	r3, [pc, #600]	; (800cd68 <HAL_SPI_Transmit+0x334>)
 800cb0e:	4013      	ands	r3, r2
 800cb10:	88f9      	ldrh	r1, [r7, #6]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	6812      	ldr	r2, [r2, #0]
 800cb16:	430b      	orrs	r3, r1
 800cb18:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f042 0201 	orr.w	r2, r2, #1
 800cb28:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb32:	d107      	bne.n	800cb44 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	2b0f      	cmp	r3, #15
 800cb4a:	d947      	bls.n	800cbdc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cb4c:	e03f      	b.n	800cbce <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	695b      	ldr	r3, [r3, #20]
 800cb54:	f003 0302 	and.w	r3, r3, #2
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d114      	bne.n	800cb86 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	6812      	ldr	r2, [r2, #0]
 800cb66:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb6c:	1d1a      	adds	r2, r3, #4
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cb84:	e023      	b.n	800cbce <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb86:	f7f7 ff5d 	bl	8004a44 <HAL_GetTick>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	1ad3      	subs	r3, r2, r3
 800cb90:	683a      	ldr	r2, [r7, #0]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d803      	bhi.n	800cb9e <HAL_SPI_Transmit+0x16a>
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb9c:	d102      	bne.n	800cba4 <HAL_SPI_Transmit+0x170>
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d114      	bne.n	800cbce <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f000 fe15 	bl	800d7d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	e11f      	b.n	800ce0e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d1b9      	bne.n	800cb4e <HAL_SPI_Transmit+0x11a>
 800cbda:	e0f2      	b.n	800cdc2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	2b07      	cmp	r3, #7
 800cbe2:	f240 80e7 	bls.w	800cdb4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cbe6:	e05d      	b.n	800cca4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	f003 0302 	and.w	r3, r3, #2
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d132      	bne.n	800cc5c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	2b01      	cmp	r3, #1
 800cc00:	d918      	bls.n	800cc34 <HAL_SPI_Transmit+0x200>
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d014      	beq.n	800cc34 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	6812      	ldr	r2, [r2, #0]
 800cc14:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc1a:	1d1a      	adds	r2, r3, #4
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	3b02      	subs	r3, #2
 800cc2a:	b29a      	uxth	r2, r3
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cc32:	e037      	b.n	800cca4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc38:	881a      	ldrh	r2, [r3, #0]
 800cc3a:	69fb      	ldr	r3, [r7, #28]
 800cc3c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc42:	1c9a      	adds	r2, r3, #2
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	3b01      	subs	r3, #1
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cc5a:	e023      	b.n	800cca4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc5c:	f7f7 fef2 	bl	8004a44 <HAL_GetTick>
 800cc60:	4602      	mov	r2, r0
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	1ad3      	subs	r3, r2, r3
 800cc66:	683a      	ldr	r2, [r7, #0]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d803      	bhi.n	800cc74 <HAL_SPI_Transmit+0x240>
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc72:	d102      	bne.n	800cc7a <HAL_SPI_Transmit+0x246>
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d114      	bne.n	800cca4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f000 fdaa 	bl	800d7d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	e0b4      	b.n	800ce0e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d19b      	bne.n	800cbe8 <HAL_SPI_Transmit+0x1b4>
 800ccb0:	e087      	b.n	800cdc2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	695b      	ldr	r3, [r3, #20]
 800ccb8:	f003 0302 	and.w	r3, r3, #2
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d155      	bne.n	800cd6c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	2b03      	cmp	r3, #3
 800ccca:	d918      	bls.n	800ccfe <HAL_SPI_Transmit+0x2ca>
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd0:	2b40      	cmp	r3, #64	; 0x40
 800ccd2:	d914      	bls.n	800ccfe <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	6812      	ldr	r2, [r2, #0]
 800ccde:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cce4:	1d1a      	adds	r2, r3, #4
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	3b04      	subs	r3, #4
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ccfc:	e05a      	b.n	800cdb4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d917      	bls.n	800cd3a <HAL_SPI_Transmit+0x306>
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d013      	beq.n	800cd3a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd16:	881a      	ldrh	r2, [r3, #0]
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd20:	1c9a      	adds	r2, r3, #2
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	3b02      	subs	r3, #2
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cd38:	e03c      	b.n	800cdb4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3320      	adds	r3, #32
 800cd44:	7812      	ldrb	r2, [r2, #0]
 800cd46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd4c:	1c5a      	adds	r2, r3, #1
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cd64:	e026      	b.n	800cdb4 <HAL_SPI_Transmit+0x380>
 800cd66:	bf00      	nop
 800cd68:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd6c:	f7f7 fe6a 	bl	8004a44 <HAL_GetTick>
 800cd70:	4602      	mov	r2, r0
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	1ad3      	subs	r3, r2, r3
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d803      	bhi.n	800cd84 <HAL_SPI_Transmit+0x350>
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd82:	d102      	bne.n	800cd8a <HAL_SPI_Transmit+0x356>
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d114      	bne.n	800cdb4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f000 fd22 	bl	800d7d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e02c      	b.n	800ce0e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f47f af78 	bne.w	800ccb2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	2108      	movs	r1, #8
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f000 fda1 	bl	800d914 <SPI_WaitOnFlagUntilTimeout>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d007      	beq.n	800cde8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdde:	f043 0220 	orr.w	r2, r3, #32
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f000 fcf3 	bl	800d7d4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d001      	beq.n	800ce0c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e000      	b.n	800ce0e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ce0c:	7efb      	ldrb	r3, [r7, #27]
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3720      	adds	r7, #32
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop

0800ce18 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b08a      	sub	sp, #40	; 0x28
 800ce1c:	af02      	add	r7, sp, #8
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	603b      	str	r3, [r7, #0]
 800ce24:	4613      	mov	r3, r2
 800ce26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	3330      	adds	r3, #48	; 0x30
 800ce32:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce3c:	d112      	bne.n	800ce64 <HAL_SPI_Receive+0x4c>
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10e      	bne.n	800ce64 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2204      	movs	r2, #4
 800ce4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ce4e:	88fa      	ldrh	r2, [r7, #6]
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	4613      	mov	r3, r2
 800ce56:	68ba      	ldr	r2, [r7, #8]
 800ce58:	68b9      	ldr	r1, [r7, #8]
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f000 f9ce 	bl	800d1fc <HAL_SPI_TransmitReceive>
 800ce60:	4603      	mov	r3, r0
 800ce62:	e1c7      	b.n	800d1f4 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d101      	bne.n	800ce72 <HAL_SPI_Receive+0x5a>
 800ce6e:	2302      	movs	r3, #2
 800ce70:	e1c0      	b.n	800d1f4 <HAL_SPI_Receive+0x3dc>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2201      	movs	r2, #1
 800ce76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ce7a:	f7f7 fde3 	bl	8004a44 <HAL_GetTick>
 800ce7e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d007      	beq.n	800ce9c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800ce8c:	2302      	movs	r3, #2
 800ce8e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ce98:	7ffb      	ldrb	r3, [r7, #31]
 800ce9a:	e1ab      	b.n	800d1f4 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <HAL_SPI_Receive+0x90>
 800cea2:	88fb      	ldrh	r3, [r7, #6]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d107      	bne.n	800ceb8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ceb4:	7ffb      	ldrb	r3, [r7, #31]
 800ceb6:	e19d      	b.n	800d1f4 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2204      	movs	r2, #4
 800cebc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2200      	movs	r2, #0
 800cec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	88fa      	ldrh	r2, [r7, #6]
 800ced2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	88fa      	ldrh	r2, [r7, #6]
 800ceda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	2200      	movs	r2, #0
 800cef0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2200      	movs	r2, #0
 800cef8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	689b      	ldr	r3, [r3, #8]
 800cf04:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cf08:	d107      	bne.n	800cf1a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cf18:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	685a      	ldr	r2, [r3, #4]
 800cf20:	4b94      	ldr	r3, [pc, #592]	; (800d174 <HAL_SPI_Receive+0x35c>)
 800cf22:	4013      	ands	r3, r2
 800cf24:	88f9      	ldrh	r1, [r7, #6]
 800cf26:	68fa      	ldr	r2, [r7, #12]
 800cf28:	6812      	ldr	r2, [r2, #0]
 800cf2a:	430b      	orrs	r3, r1
 800cf2c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f042 0201 	orr.w	r2, r2, #1
 800cf3c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cf46:	d107      	bne.n	800cf58 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cf56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	2b0f      	cmp	r3, #15
 800cf5e:	d948      	bls.n	800cff2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cf60:	e040      	b.n	800cfe4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	695a      	ldr	r2, [r3, #20]
 800cf68:	f248 0308 	movw	r3, #32776	; 0x8008
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d014      	beq.n	800cf9c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681a      	ldr	r2, [r3, #0]
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cf7c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf82:	1d1a      	adds	r2, r3, #4
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	3b01      	subs	r3, #1
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cf9a:	e023      	b.n	800cfe4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cf9c:	f7f7 fd52 	bl	8004a44 <HAL_GetTick>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	683a      	ldr	r2, [r7, #0]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d803      	bhi.n	800cfb4 <HAL_SPI_Receive+0x19c>
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb2:	d102      	bne.n	800cfba <HAL_SPI_Receive+0x1a2>
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d114      	bne.n	800cfe4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f000 fc0a 	bl	800d7d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e107      	b.n	800d1f4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1b8      	bne.n	800cf62 <HAL_SPI_Receive+0x14a>
 800cff0:	e0ed      	b.n	800d1ce <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	2b07      	cmp	r3, #7
 800cff8:	f240 80e2 	bls.w	800d1c0 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cffc:	e05b      	b.n	800d0b6 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	695b      	ldr	r3, [r3, #20]
 800d004:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d030      	beq.n	800d06e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	695b      	ldr	r3, [r3, #20]
 800d012:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d016:	2b00      	cmp	r3, #0
 800d018:	d014      	beq.n	800d044 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d022:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d024:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d02a:	1d1a      	adds	r2, r3, #4
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d036:	b29b      	uxth	r3, r3
 800d038:	3b02      	subs	r3, #2
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d042:	e038      	b.n	800d0b6 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d048:	69ba      	ldr	r2, [r7, #24]
 800d04a:	8812      	ldrh	r2, [r2, #0]
 800d04c:	b292      	uxth	r2, r2
 800d04e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d054:	1c9a      	adds	r2, r3, #2
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d060:	b29b      	uxth	r3, r3
 800d062:	3b01      	subs	r3, #1
 800d064:	b29a      	uxth	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d06c:	e023      	b.n	800d0b6 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d06e:	f7f7 fce9 	bl	8004a44 <HAL_GetTick>
 800d072:	4602      	mov	r2, r0
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	683a      	ldr	r2, [r7, #0]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d803      	bhi.n	800d086 <HAL_SPI_Receive+0x26e>
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d084:	d102      	bne.n	800d08c <HAL_SPI_Receive+0x274>
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d114      	bne.n	800d0b6 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f000 fba1 	bl	800d7d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2200      	movs	r2, #0
 800d096:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d0a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e09e      	b.n	800d1f4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d19d      	bne.n	800cffe <HAL_SPI_Receive+0x1e6>
 800d0c2:	e084      	b.n	800d1ce <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d052      	beq.n	800d178 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d014      	beq.n	800d10a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681a      	ldr	r2, [r3, #0]
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d0ea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0f0:	1d1a      	adds	r2, r3, #4
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	3b04      	subs	r3, #4
 800d100:	b29a      	uxth	r2, r3
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d108:	e05a      	b.n	800d1c0 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	695b      	ldr	r3, [r3, #20]
 800d110:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d118:	d914      	bls.n	800d144 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d11e:	69ba      	ldr	r2, [r7, #24]
 800d120:	8812      	ldrh	r2, [r2, #0]
 800d122:	b292      	uxth	r2, r2
 800d124:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d12a:	1c9a      	adds	r2, r3, #2
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d136:	b29b      	uxth	r3, r3
 800d138:	3b02      	subs	r3, #2
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d142:	e03d      	b.n	800d1c0 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d150:	7812      	ldrb	r2, [r2, #0]
 800d152:	b2d2      	uxtb	r2, r2
 800d154:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d15a:	1c5a      	adds	r2, r3, #1
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d166:	b29b      	uxth	r3, r3
 800d168:	3b01      	subs	r3, #1
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d172:	e025      	b.n	800d1c0 <HAL_SPI_Receive+0x3a8>
 800d174:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d178:	f7f7 fc64 	bl	8004a44 <HAL_GetTick>
 800d17c:	4602      	mov	r2, r0
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	1ad3      	subs	r3, r2, r3
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	429a      	cmp	r2, r3
 800d186:	d803      	bhi.n	800d190 <HAL_SPI_Receive+0x378>
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d18e:	d102      	bne.n	800d196 <HAL_SPI_Receive+0x37e>
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d114      	bne.n	800d1c0 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f000 fb1c 	bl	800d7d4 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e019      	b.n	800d1f4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f47f af7b 	bne.w	800d0c4 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f000 fb00 	bl	800d7d4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d001      	beq.n	800d1f2 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e000      	b.n	800d1f4 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800d1f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3720      	adds	r7, #32
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}

0800d1fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b08e      	sub	sp, #56	; 0x38
 800d200:	af02      	add	r7, sp, #8
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
 800d208:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d20a:	2300      	movs	r3, #0
 800d20c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3320      	adds	r3, #32
 800d216:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3330      	adds	r3, #48	; 0x30
 800d21e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d226:	2b01      	cmp	r3, #1
 800d228:	d101      	bne.n	800d22e <HAL_SPI_TransmitReceive+0x32>
 800d22a:	2302      	movs	r3, #2
 800d22c:	e2ce      	b.n	800d7cc <HAL_SPI_TransmitReceive+0x5d0>
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d236:	f7f7 fc05 	bl	8004a44 <HAL_GetTick>
 800d23a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d23c:	887b      	ldrh	r3, [r7, #2]
 800d23e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d240:	887b      	ldrh	r3, [r7, #2]
 800d242:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d24a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d252:	7efb      	ldrb	r3, [r7, #27]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d014      	beq.n	800d282 <HAL_SPI_TransmitReceive+0x86>
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d25e:	d106      	bne.n	800d26e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d102      	bne.n	800d26e <HAL_SPI_TransmitReceive+0x72>
 800d268:	7efb      	ldrb	r3, [r7, #27]
 800d26a:	2b04      	cmp	r3, #4
 800d26c:	d009      	beq.n	800d282 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800d26e:	2302      	movs	r3, #2
 800d270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2200      	movs	r2, #0
 800d278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d27c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d280:	e2a4      	b.n	800d7cc <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d005      	beq.n	800d294 <HAL_SPI_TransmitReceive+0x98>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d002      	beq.n	800d294 <HAL_SPI_TransmitReceive+0x98>
 800d28e:	887b      	ldrh	r3, [r7, #2]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d109      	bne.n	800d2a8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d294:	2301      	movs	r3, #1
 800d296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2200      	movs	r2, #0
 800d29e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d2a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d2a6:	e291      	b.n	800d7cc <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	2b04      	cmp	r3, #4
 800d2b2:	d003      	beq.n	800d2bc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2205      	movs	r2, #5
 800d2b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	887a      	ldrh	r2, [r7, #2]
 800d2ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	887a      	ldrh	r2, [r7, #2]
 800d2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	68ba      	ldr	r2, [r7, #8]
 800d2de:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	887a      	ldrh	r2, [r7, #2]
 800d2e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	887a      	ldrh	r2, [r7, #2]
 800d2ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	4b9f      	ldr	r3, [pc, #636]	; (800d580 <HAL_SPI_TransmitReceive+0x384>)
 800d304:	4013      	ands	r3, r2
 800d306:	8879      	ldrh	r1, [r7, #2]
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	6812      	ldr	r2, [r2, #0]
 800d30c:	430b      	orrs	r3, r1
 800d30e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f042 0201 	orr.w	r2, r2, #1
 800d31e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d328:	d107      	bne.n	800d33a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d338:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	2b0f      	cmp	r3, #15
 800d340:	d970      	bls.n	800d424 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d342:	e068      	b.n	800d416 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	f003 0302 	and.w	r3, r3, #2
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d11a      	bne.n	800d388 <HAL_SPI_TransmitReceive+0x18c>
 800d352:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d354:	2b00      	cmp	r3, #0
 800d356:	d017      	beq.n	800d388 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6812      	ldr	r2, [r2, #0]
 800d362:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d368:	1d1a      	adds	r2, r3, #4
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d374:	b29b      	uxth	r3, r3
 800d376:	3b01      	subs	r3, #1
 800d378:	b29a      	uxth	r2, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d386:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	695a      	ldr	r2, [r3, #20]
 800d38e:	f248 0308 	movw	r3, #32776	; 0x8008
 800d392:	4013      	ands	r3, r2
 800d394:	2b00      	cmp	r3, #0
 800d396:	d01a      	beq.n	800d3ce <HAL_SPI_TransmitReceive+0x1d2>
 800d398:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d017      	beq.n	800d3ce <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d3a8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3ae:	1d1a      	adds	r2, r3, #4
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d3cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d3ce:	f7f7 fb39 	bl	8004a44 <HAL_GetTick>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	1ad3      	subs	r3, r2, r3
 800d3d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d803      	bhi.n	800d3e6 <HAL_SPI_TransmitReceive+0x1ea>
 800d3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e4:	d102      	bne.n	800d3ec <HAL_SPI_TransmitReceive+0x1f0>
 800d3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d114      	bne.n	800d416 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f000 f9f1 	bl	800d7d4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d400:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d412:	2301      	movs	r3, #1
 800d414:	e1da      	b.n	800d7cc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d416:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d193      	bne.n	800d344 <HAL_SPI_TransmitReceive+0x148>
 800d41c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d190      	bne.n	800d344 <HAL_SPI_TransmitReceive+0x148>
 800d422:	e1ac      	b.n	800d77e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	2b07      	cmp	r3, #7
 800d42a:	f240 81a0 	bls.w	800d76e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d42e:	e0a9      	b.n	800d584 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	695b      	ldr	r3, [r3, #20]
 800d436:	f003 0302 	and.w	r3, r3, #2
 800d43a:	2b02      	cmp	r3, #2
 800d43c:	d139      	bne.n	800d4b2 <HAL_SPI_TransmitReceive+0x2b6>
 800d43e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d440:	2b00      	cmp	r3, #0
 800d442:	d036      	beq.n	800d4b2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d444:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d446:	2b01      	cmp	r3, #1
 800d448:	d91c      	bls.n	800d484 <HAL_SPI_TransmitReceive+0x288>
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d018      	beq.n	800d484 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	6812      	ldr	r2, [r2, #0]
 800d45c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d462:	1d1a      	adds	r2, r3, #4
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d46e:	b29b      	uxth	r3, r3
 800d470:	3b02      	subs	r3, #2
 800d472:	b29a      	uxth	r2, r3
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d480:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d482:	e016      	b.n	800d4b2 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d488:	881a      	ldrh	r2, [r3, #0]
 800d48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d492:	1c9a      	adds	r2, r3, #2
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	b29a      	uxth	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	695b      	ldr	r3, [r3, #20]
 800d4b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d03a      	beq.n	800d536 <HAL_SPI_TransmitReceive+0x33a>
 800d4c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d037      	beq.n	800d536 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	695b      	ldr	r3, [r3, #20]
 800d4cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d018      	beq.n	800d506 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d4de:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4e4:	1d1a      	adds	r2, r3, #4
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d4f0:	b29b      	uxth	r3, r3
 800d4f2:	3b02      	subs	r3, #2
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d502:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d504:	e017      	b.n	800d536 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d50a:	6a3a      	ldr	r2, [r7, #32]
 800d50c:	8812      	ldrh	r2, [r2, #0]
 800d50e:	b292      	uxth	r2, r2
 800d510:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d516:	1c9a      	adds	r2, r3, #2
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d522:	b29b      	uxth	r3, r3
 800d524:	3b01      	subs	r3, #1
 800d526:	b29a      	uxth	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d534:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d536:	f7f7 fa85 	bl	8004a44 <HAL_GetTick>
 800d53a:	4602      	mov	r2, r0
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	1ad3      	subs	r3, r2, r3
 800d540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d542:	429a      	cmp	r2, r3
 800d544:	d803      	bhi.n	800d54e <HAL_SPI_TransmitReceive+0x352>
 800d546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54c:	d102      	bne.n	800d554 <HAL_SPI_TransmitReceive+0x358>
 800d54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d550:	2b00      	cmp	r3, #0
 800d552:	d117      	bne.n	800d584 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f000 f93d 	bl	800d7d4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d568:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2201      	movs	r2, #1
 800d576:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d57a:	2301      	movs	r3, #1
 800d57c:	e126      	b.n	800d7cc <HAL_SPI_TransmitReceive+0x5d0>
 800d57e:	bf00      	nop
 800d580:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d584:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d586:	2b00      	cmp	r3, #0
 800d588:	f47f af52 	bne.w	800d430 <HAL_SPI_TransmitReceive+0x234>
 800d58c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f47f af4e 	bne.w	800d430 <HAL_SPI_TransmitReceive+0x234>
 800d594:	e0f3      	b.n	800d77e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	695b      	ldr	r3, [r3, #20]
 800d59c:	f003 0302 	and.w	r3, r3, #2
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	d15a      	bne.n	800d65a <HAL_SPI_TransmitReceive+0x45e>
 800d5a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d057      	beq.n	800d65a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d5aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d91c      	bls.n	800d5ea <HAL_SPI_TransmitReceive+0x3ee>
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5b4:	2b40      	cmp	r3, #64	; 0x40
 800d5b6:	d918      	bls.n	800d5ea <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6812      	ldr	r2, [r2, #0]
 800d5c2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5c8:	1d1a      	adds	r2, r3, #4
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	3b04      	subs	r3, #4
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d5e8:	e037      	b.n	800d65a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d5ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d91b      	bls.n	800d628 <HAL_SPI_TransmitReceive+0x42c>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d017      	beq.n	800d628 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d5fc:	881a      	ldrh	r2, [r3, #0]
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d606:	1c9a      	adds	r2, r3, #2
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d612:	b29b      	uxth	r3, r3
 800d614:	3b02      	subs	r3, #2
 800d616:	b29a      	uxth	r2, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d624:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d626:	e018      	b.n	800d65a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	3320      	adds	r3, #32
 800d632:	7812      	ldrb	r2, [r2, #0]
 800d634:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d63a:	1c5a      	adds	r2, r3, #1
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d646:	b29b      	uxth	r3, r3
 800d648:	3b01      	subs	r3, #1
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d658:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	695b      	ldr	r3, [r3, #20]
 800d660:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d664:	2b00      	cmp	r3, #0
 800d666:	d05e      	beq.n	800d726 <HAL_SPI_TransmitReceive+0x52a>
 800d668:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d05b      	beq.n	800d726 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	695b      	ldr	r3, [r3, #20]
 800d674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d018      	beq.n	800d6ae <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d684:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d686:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d68c:	1d1a      	adds	r2, r3, #4
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d698:	b29b      	uxth	r3, r3
 800d69a:	3b04      	subs	r3, #4
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d6ac:	e03b      	b.n	800d726 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	695b      	ldr	r3, [r3, #20]
 800d6b4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d6b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d6bc:	d918      	bls.n	800d6f0 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6c2:	6a3a      	ldr	r2, [r7, #32]
 800d6c4:	8812      	ldrh	r2, [r2, #0]
 800d6c6:	b292      	uxth	r2, r2
 800d6c8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ce:	1c9a      	adds	r2, r3, #2
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	3b02      	subs	r3, #2
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d6ee:	e01a      	b.n	800d726 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6fc:	7812      	ldrb	r2, [r2, #0]
 800d6fe:	b2d2      	uxtb	r2, r2
 800d700:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d712:	b29b      	uxth	r3, r3
 800d714:	3b01      	subs	r3, #1
 800d716:	b29a      	uxth	r2, r3
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d724:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d726:	f7f7 f98d 	bl	8004a44 <HAL_GetTick>
 800d72a:	4602      	mov	r2, r0
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d732:	429a      	cmp	r2, r3
 800d734:	d803      	bhi.n	800d73e <HAL_SPI_TransmitReceive+0x542>
 800d736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73c:	d102      	bne.n	800d744 <HAL_SPI_TransmitReceive+0x548>
 800d73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d740:	2b00      	cmp	r3, #0
 800d742:	d114      	bne.n	800d76e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f000 f845 	bl	800d7d4 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d758:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2201      	movs	r2, #1
 800d766:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800d76a:	2301      	movs	r3, #1
 800d76c:	e02e      	b.n	800d7cc <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d76e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d770:	2b00      	cmp	r3, #0
 800d772:	f47f af10 	bne.w	800d596 <HAL_SPI_TransmitReceive+0x39a>
 800d776:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f47f af0c 	bne.w	800d596 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d780:	9300      	str	r3, [sp, #0]
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	2200      	movs	r2, #0
 800d786:	2108      	movs	r1, #8
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f000 f8c3 	bl	800d914 <SPI_WaitOnFlagUntilTimeout>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d007      	beq.n	800d7a4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d79a:	f043 0220 	orr.w	r2, r3, #32
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f000 f815 	bl	800d7d4 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	e001      	b.n	800d7cc <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800d7c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3730      	adds	r7, #48	; 0x30
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b085      	sub	sp, #20
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	695b      	ldr	r3, [r3, #20]
 800d7e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	699a      	ldr	r2, [r3, #24]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f042 0208 	orr.w	r2, r2, #8
 800d7f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	699a      	ldr	r2, [r3, #24]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f042 0210 	orr.w	r2, r2, #16
 800d802:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f022 0201 	bic.w	r2, r2, #1
 800d812:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	6919      	ldr	r1, [r3, #16]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	4b3c      	ldr	r3, [pc, #240]	; (800d910 <SPI_CloseTransfer+0x13c>)
 800d820:	400b      	ands	r3, r1
 800d822:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	689a      	ldr	r2, [r3, #8]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d832:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	2b04      	cmp	r3, #4
 800d83e:	d014      	beq.n	800d86a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f003 0320 	and.w	r3, r3, #32
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00f      	beq.n	800d86a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d850:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	699a      	ldr	r2, [r3, #24]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f042 0220 	orr.w	r2, r2, #32
 800d868:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d870:	b2db      	uxtb	r3, r3
 800d872:	2b03      	cmp	r3, #3
 800d874:	d014      	beq.n	800d8a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00f      	beq.n	800d8a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d886:	f043 0204 	orr.w	r2, r3, #4
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	699a      	ldr	r2, [r3, #24]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d89e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00f      	beq.n	800d8ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8b0:	f043 0201 	orr.w	r2, r3, #1
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	699a      	ldr	r2, [r3, #24]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00f      	beq.n	800d8f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8da:	f043 0208 	orr.w	r2, r3, #8
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	699a      	ldr	r2, [r3, #24]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d904:	bf00      	nop
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr
 800d910:	fffffc90 	.word	0xfffffc90

0800d914 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	60f8      	str	r0, [r7, #12]
 800d91c:	60b9      	str	r1, [r7, #8]
 800d91e:	603b      	str	r3, [r7, #0]
 800d920:	4613      	mov	r3, r2
 800d922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d924:	e010      	b.n	800d948 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d926:	f7f7 f88d 	bl	8004a44 <HAL_GetTick>
 800d92a:	4602      	mov	r2, r0
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	69ba      	ldr	r2, [r7, #24]
 800d932:	429a      	cmp	r2, r3
 800d934:	d803      	bhi.n	800d93e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d93c:	d102      	bne.n	800d944 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d101      	bne.n	800d948 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d944:	2303      	movs	r3, #3
 800d946:	e00f      	b.n	800d968 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	695a      	ldr	r2, [r3, #20]
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	4013      	ands	r3, r2
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	429a      	cmp	r2, r3
 800d956:	bf0c      	ite	eq
 800d958:	2301      	moveq	r3, #1
 800d95a:	2300      	movne	r3, #0
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	461a      	mov	r2, r3
 800d960:	79fb      	ldrb	r3, [r7, #7]
 800d962:	429a      	cmp	r2, r3
 800d964:	d0df      	beq.n	800d926 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d966:	2300      	movs	r3, #0
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3710      	adds	r7, #16
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d970:	b480      	push	{r7}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d97c:	095b      	lsrs	r3, r3, #5
 800d97e:	3301      	adds	r3, #1
 800d980:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	3301      	adds	r3, #1
 800d988:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	3307      	adds	r3, #7
 800d98e:	08db      	lsrs	r3, r3, #3
 800d990:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	fb02 f303 	mul.w	r3, r2, r3
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3714      	adds	r7, #20
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr

0800d9a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	b082      	sub	sp, #8
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d101      	bne.n	800d9b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e049      	b.n	800da4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d106      	bne.n	800d9d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f7f5 ff91 	bl	80038f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2202      	movs	r2, #2
 800d9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681a      	ldr	r2, [r3, #0]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	3304      	adds	r3, #4
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	4610      	mov	r0, r2
 800d9e6:	f000 f9ed 	bl	800ddc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2201      	movs	r2, #1
 800da06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2201      	movs	r2, #1
 800da0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2201      	movs	r2, #1
 800da16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2201      	movs	r2, #1
 800da1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2201      	movs	r2, #1
 800da26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2201      	movs	r2, #1
 800da2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2201      	movs	r2, #1
 800da36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2201      	movs	r2, #1
 800da3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3708      	adds	r7, #8
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da62:	b2db      	uxtb	r3, r3
 800da64:	2b01      	cmp	r3, #1
 800da66:	d001      	beq.n	800da6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800da68:	2301      	movs	r3, #1
 800da6a:	e04f      	b.n	800db0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2202      	movs	r2, #2
 800da70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	68da      	ldr	r2, [r3, #12]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f042 0201 	orr.w	r2, r2, #1
 800da82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a23      	ldr	r2, [pc, #140]	; (800db18 <HAL_TIM_Base_Start_IT+0xc4>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d01d      	beq.n	800daca <HAL_TIM_Base_Start_IT+0x76>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da96:	d018      	beq.n	800daca <HAL_TIM_Base_Start_IT+0x76>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4a1f      	ldr	r2, [pc, #124]	; (800db1c <HAL_TIM_Base_Start_IT+0xc8>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d013      	beq.n	800daca <HAL_TIM_Base_Start_IT+0x76>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a1e      	ldr	r2, [pc, #120]	; (800db20 <HAL_TIM_Base_Start_IT+0xcc>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d00e      	beq.n	800daca <HAL_TIM_Base_Start_IT+0x76>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a1c      	ldr	r2, [pc, #112]	; (800db24 <HAL_TIM_Base_Start_IT+0xd0>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d009      	beq.n	800daca <HAL_TIM_Base_Start_IT+0x76>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	4a1b      	ldr	r2, [pc, #108]	; (800db28 <HAL_TIM_Base_Start_IT+0xd4>)
 800dabc:	4293      	cmp	r3, r2
 800dabe:	d004      	beq.n	800daca <HAL_TIM_Base_Start_IT+0x76>
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a19      	ldr	r2, [pc, #100]	; (800db2c <HAL_TIM_Base_Start_IT+0xd8>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d115      	bne.n	800daf6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	689a      	ldr	r2, [r3, #8]
 800dad0:	4b17      	ldr	r3, [pc, #92]	; (800db30 <HAL_TIM_Base_Start_IT+0xdc>)
 800dad2:	4013      	ands	r3, r2
 800dad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2b06      	cmp	r3, #6
 800dada:	d015      	beq.n	800db08 <HAL_TIM_Base_Start_IT+0xb4>
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dae2:	d011      	beq.n	800db08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f042 0201 	orr.w	r2, r2, #1
 800daf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800daf4:	e008      	b.n	800db08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f042 0201 	orr.w	r2, r2, #1
 800db04:	601a      	str	r2, [r3, #0]
 800db06:	e000      	b.n	800db0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	40010000 	.word	0x40010000
 800db1c:	40000400 	.word	0x40000400
 800db20:	40000800 	.word	0x40000800
 800db24:	40000c00 	.word	0x40000c00
 800db28:	40010400 	.word	0x40010400
 800db2c:	40001800 	.word	0x40001800
 800db30:	00010007 	.word	0x00010007

0800db34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	f003 0302 	and.w	r3, r3, #2
 800db46:	2b02      	cmp	r3, #2
 800db48:	d122      	bne.n	800db90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	f003 0302 	and.w	r3, r3, #2
 800db54:	2b02      	cmp	r3, #2
 800db56:	d11b      	bne.n	800db90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f06f 0202 	mvn.w	r2, #2
 800db60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2201      	movs	r2, #1
 800db66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	699b      	ldr	r3, [r3, #24]
 800db6e:	f003 0303 	and.w	r3, r3, #3
 800db72:	2b00      	cmp	r3, #0
 800db74:	d003      	beq.n	800db7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	f000 f905 	bl	800dd86 <HAL_TIM_IC_CaptureCallback>
 800db7c:	e005      	b.n	800db8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 f8f7 	bl	800dd72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 f908 	bl	800dd9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2200      	movs	r2, #0
 800db8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	691b      	ldr	r3, [r3, #16]
 800db96:	f003 0304 	and.w	r3, r3, #4
 800db9a:	2b04      	cmp	r3, #4
 800db9c:	d122      	bne.n	800dbe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	f003 0304 	and.w	r3, r3, #4
 800dba8:	2b04      	cmp	r3, #4
 800dbaa:	d11b      	bne.n	800dbe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f06f 0204 	mvn.w	r2, #4
 800dbb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2202      	movs	r2, #2
 800dbba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	699b      	ldr	r3, [r3, #24]
 800dbc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d003      	beq.n	800dbd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 f8db 	bl	800dd86 <HAL_TIM_IC_CaptureCallback>
 800dbd0:	e005      	b.n	800dbde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 f8cd 	bl	800dd72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 f8de 	bl	800dd9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	691b      	ldr	r3, [r3, #16]
 800dbea:	f003 0308 	and.w	r3, r3, #8
 800dbee:	2b08      	cmp	r3, #8
 800dbf0:	d122      	bne.n	800dc38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	f003 0308 	and.w	r3, r3, #8
 800dbfc:	2b08      	cmp	r3, #8
 800dbfe:	d11b      	bne.n	800dc38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f06f 0208 	mvn.w	r2, #8
 800dc08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2204      	movs	r2, #4
 800dc0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	69db      	ldr	r3, [r3, #28]
 800dc16:	f003 0303 	and.w	r3, r3, #3
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d003      	beq.n	800dc26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 f8b1 	bl	800dd86 <HAL_TIM_IC_CaptureCallback>
 800dc24:	e005      	b.n	800dc32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f8a3 	bl	800dd72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 f8b4 	bl	800dd9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	691b      	ldr	r3, [r3, #16]
 800dc3e:	f003 0310 	and.w	r3, r3, #16
 800dc42:	2b10      	cmp	r3, #16
 800dc44:	d122      	bne.n	800dc8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	f003 0310 	and.w	r3, r3, #16
 800dc50:	2b10      	cmp	r3, #16
 800dc52:	d11b      	bne.n	800dc8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f06f 0210 	mvn.w	r2, #16
 800dc5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2208      	movs	r2, #8
 800dc62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	69db      	ldr	r3, [r3, #28]
 800dc6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d003      	beq.n	800dc7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f887 	bl	800dd86 <HAL_TIM_IC_CaptureCallback>
 800dc78:	e005      	b.n	800dc86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f879 	bl	800dd72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 f88a 	bl	800dd9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	691b      	ldr	r3, [r3, #16]
 800dc92:	f003 0301 	and.w	r3, r3, #1
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d10e      	bne.n	800dcb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	68db      	ldr	r3, [r3, #12]
 800dca0:	f003 0301 	and.w	r3, r3, #1
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d107      	bne.n	800dcb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f06f 0201 	mvn.w	r2, #1
 800dcb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f7f5 ff9e 	bl	8003bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcc2:	2b80      	cmp	r3, #128	; 0x80
 800dcc4:	d10e      	bne.n	800dce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	68db      	ldr	r3, [r3, #12]
 800dccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcd0:	2b80      	cmp	r3, #128	; 0x80
 800dcd2:	d107      	bne.n	800dce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dcdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 f99c 	bl	800e01c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	691b      	ldr	r3, [r3, #16]
 800dcea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcf2:	d10e      	bne.n	800dd12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcfe:	2b80      	cmp	r3, #128	; 0x80
 800dd00:	d107      	bne.n	800dd12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dd0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 f98f 	bl	800e030 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd1c:	2b40      	cmp	r3, #64	; 0x40
 800dd1e:	d10e      	bne.n	800dd3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd2a:	2b40      	cmp	r3, #64	; 0x40
 800dd2c:	d107      	bne.n	800dd3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dd36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 f838 	bl	800ddae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	691b      	ldr	r3, [r3, #16]
 800dd44:	f003 0320 	and.w	r3, r3, #32
 800dd48:	2b20      	cmp	r3, #32
 800dd4a:	d10e      	bne.n	800dd6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	f003 0320 	and.w	r3, r3, #32
 800dd56:	2b20      	cmp	r3, #32
 800dd58:	d107      	bne.n	800dd6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f06f 0220 	mvn.w	r2, #32
 800dd62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 f94f 	bl	800e008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd6a:	bf00      	nop
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dd72:	b480      	push	{r7}
 800dd74:	b083      	sub	sp, #12
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dd7a:	bf00      	nop
 800dd7c:	370c      	adds	r7, #12
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr

0800dd86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dd86:	b480      	push	{r7}
 800dd88:	b083      	sub	sp, #12
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dd8e:	bf00      	nop
 800dd90:	370c      	adds	r7, #12
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr

0800dd9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dd9a:	b480      	push	{r7}
 800dd9c:	b083      	sub	sp, #12
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dda2:	bf00      	nop
 800dda4:	370c      	adds	r7, #12
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr

0800ddae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ddae:	b480      	push	{r7}
 800ddb0:	b083      	sub	sp, #12
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ddb6:	bf00      	nop
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
	...

0800ddc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ddc4:	b480      	push	{r7}
 800ddc6:	b085      	sub	sp, #20
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4a40      	ldr	r2, [pc, #256]	; (800ded8 <TIM_Base_SetConfig+0x114>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d013      	beq.n	800de04 <TIM_Base_SetConfig+0x40>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dde2:	d00f      	beq.n	800de04 <TIM_Base_SetConfig+0x40>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a3d      	ldr	r2, [pc, #244]	; (800dedc <TIM_Base_SetConfig+0x118>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d00b      	beq.n	800de04 <TIM_Base_SetConfig+0x40>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a3c      	ldr	r2, [pc, #240]	; (800dee0 <TIM_Base_SetConfig+0x11c>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d007      	beq.n	800de04 <TIM_Base_SetConfig+0x40>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a3b      	ldr	r2, [pc, #236]	; (800dee4 <TIM_Base_SetConfig+0x120>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d003      	beq.n	800de04 <TIM_Base_SetConfig+0x40>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a3a      	ldr	r2, [pc, #232]	; (800dee8 <TIM_Base_SetConfig+0x124>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d108      	bne.n	800de16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	68fa      	ldr	r2, [r7, #12]
 800de12:	4313      	orrs	r3, r2
 800de14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4a2f      	ldr	r2, [pc, #188]	; (800ded8 <TIM_Base_SetConfig+0x114>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d01f      	beq.n	800de5e <TIM_Base_SetConfig+0x9a>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de24:	d01b      	beq.n	800de5e <TIM_Base_SetConfig+0x9a>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a2c      	ldr	r2, [pc, #176]	; (800dedc <TIM_Base_SetConfig+0x118>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d017      	beq.n	800de5e <TIM_Base_SetConfig+0x9a>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a2b      	ldr	r2, [pc, #172]	; (800dee0 <TIM_Base_SetConfig+0x11c>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d013      	beq.n	800de5e <TIM_Base_SetConfig+0x9a>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	4a2a      	ldr	r2, [pc, #168]	; (800dee4 <TIM_Base_SetConfig+0x120>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d00f      	beq.n	800de5e <TIM_Base_SetConfig+0x9a>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4a29      	ldr	r2, [pc, #164]	; (800dee8 <TIM_Base_SetConfig+0x124>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d00b      	beq.n	800de5e <TIM_Base_SetConfig+0x9a>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a28      	ldr	r2, [pc, #160]	; (800deec <TIM_Base_SetConfig+0x128>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d007      	beq.n	800de5e <TIM_Base_SetConfig+0x9a>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4a27      	ldr	r2, [pc, #156]	; (800def0 <TIM_Base_SetConfig+0x12c>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d003      	beq.n	800de5e <TIM_Base_SetConfig+0x9a>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	4a26      	ldr	r2, [pc, #152]	; (800def4 <TIM_Base_SetConfig+0x130>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d108      	bne.n	800de70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	4313      	orrs	r3, r2
 800de6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	695b      	ldr	r3, [r3, #20]
 800de7a:	4313      	orrs	r3, r2
 800de7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	68fa      	ldr	r2, [r7, #12]
 800de82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	689a      	ldr	r2, [r3, #8]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	4a10      	ldr	r2, [pc, #64]	; (800ded8 <TIM_Base_SetConfig+0x114>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d00f      	beq.n	800debc <TIM_Base_SetConfig+0xf8>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	4a12      	ldr	r2, [pc, #72]	; (800dee8 <TIM_Base_SetConfig+0x124>)
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d00b      	beq.n	800debc <TIM_Base_SetConfig+0xf8>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4a11      	ldr	r2, [pc, #68]	; (800deec <TIM_Base_SetConfig+0x128>)
 800dea8:	4293      	cmp	r3, r2
 800deaa:	d007      	beq.n	800debc <TIM_Base_SetConfig+0xf8>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	4a10      	ldr	r2, [pc, #64]	; (800def0 <TIM_Base_SetConfig+0x12c>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d003      	beq.n	800debc <TIM_Base_SetConfig+0xf8>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	4a0f      	ldr	r2, [pc, #60]	; (800def4 <TIM_Base_SetConfig+0x130>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d103      	bne.n	800dec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	691a      	ldr	r2, [r3, #16]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2201      	movs	r2, #1
 800dec8:	615a      	str	r2, [r3, #20]
}
 800deca:	bf00      	nop
 800decc:	3714      	adds	r7, #20
 800dece:	46bd      	mov	sp, r7
 800ded0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	40010000 	.word	0x40010000
 800dedc:	40000400 	.word	0x40000400
 800dee0:	40000800 	.word	0x40000800
 800dee4:	40000c00 	.word	0x40000c00
 800dee8:	40010400 	.word	0x40010400
 800deec:	40014000 	.word	0x40014000
 800def0:	40014400 	.word	0x40014400
 800def4:	40014800 	.word	0x40014800

0800def8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d101      	bne.n	800df10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df0c:	2302      	movs	r3, #2
 800df0e:	e068      	b.n	800dfe2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2201      	movs	r2, #1
 800df14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2202      	movs	r2, #2
 800df1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	4a2e      	ldr	r2, [pc, #184]	; (800dff0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d004      	beq.n	800df44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a2d      	ldr	r2, [pc, #180]	; (800dff4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d108      	bne.n	800df56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	4313      	orrs	r3, r2
 800df54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	68fa      	ldr	r2, [r7, #12]
 800df64:	4313      	orrs	r3, r2
 800df66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a1e      	ldr	r2, [pc, #120]	; (800dff0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d01d      	beq.n	800dfb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df82:	d018      	beq.n	800dfb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a1b      	ldr	r2, [pc, #108]	; (800dff8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d013      	beq.n	800dfb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a1a      	ldr	r2, [pc, #104]	; (800dffc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d00e      	beq.n	800dfb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a18      	ldr	r2, [pc, #96]	; (800e000 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d009      	beq.n	800dfb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a13      	ldr	r2, [pc, #76]	; (800dff4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d004      	beq.n	800dfb6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a14      	ldr	r2, [pc, #80]	; (800e004 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d10c      	bne.n	800dfd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	68ba      	ldr	r2, [r7, #8]
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	68ba      	ldr	r2, [r7, #8]
 800dfce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dfe0:	2300      	movs	r3, #0
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3714      	adds	r7, #20
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop
 800dff0:	40010000 	.word	0x40010000
 800dff4:	40010400 	.word	0x40010400
 800dff8:	40000400 	.word	0x40000400
 800dffc:	40000800 	.word	0x40000800
 800e000:	40000c00 	.word	0x40000c00
 800e004:	40001800 	.word	0x40001800

0800e008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e010:	bf00      	nop
 800e012:	370c      	adds	r7, #12
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e024:	bf00      	nop
 800e026:	370c      	adds	r7, #12
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e030:	b480      	push	{r7}
 800e032:	b083      	sub	sp, #12
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e038:	bf00      	nop
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d101      	bne.n	800e056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	e042      	b.n	800e0dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d106      	bne.n	800e06e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7f5 fc6b 	bl	8003944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2224      	movs	r2, #36	; 0x24
 800e072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f022 0201 	bic.w	r2, r2, #1
 800e084:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fbd6 	bl	800e838 <UART_SetConfig>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d101      	bne.n	800e096 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e092:	2301      	movs	r3, #1
 800e094:	e022      	b.n	800e0dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d002      	beq.n	800e0a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f001 f92a 	bl	800f2f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	685a      	ldr	r2, [r3, #4]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	689a      	ldr	r2, [r3, #8]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e0c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f042 0201 	orr.w	r2, r2, #1
 800e0d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f001 f9b1 	bl	800f43c <UART_CheckIdleState>
 800e0da:	4603      	mov	r3, r0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	60f8      	str	r0, [r7, #12]
 800e0ec:	60b9      	str	r1, [r7, #8]
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0f8:	2b20      	cmp	r3, #32
 800e0fa:	d131      	bne.n	800e160 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d002      	beq.n	800e108 <HAL_UART_Receive_IT+0x24>
 800e102:	88fb      	ldrh	r3, [r7, #6]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d101      	bne.n	800e10c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e108:	2301      	movs	r3, #1
 800e10a:	e02a      	b.n	800e162 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e112:	2b01      	cmp	r3, #1
 800e114:	d101      	bne.n	800e11a <HAL_UART_Receive_IT+0x36>
 800e116:	2302      	movs	r3, #2
 800e118:	e023      	b.n	800e162 <HAL_UART_Receive_IT+0x7e>
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2201      	movs	r2, #1
 800e11e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2200      	movs	r2, #0
 800e126:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a0f      	ldr	r2, [pc, #60]	; (800e16c <HAL_UART_Receive_IT+0x88>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d00e      	beq.n	800e150 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d007      	beq.n	800e150 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e14e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e150:	88fb      	ldrh	r3, [r7, #6]
 800e152:	461a      	mov	r2, r3
 800e154:	68b9      	ldr	r1, [r7, #8]
 800e156:	68f8      	ldr	r0, [r7, #12]
 800e158:	f001 fa3c 	bl	800f5d4 <UART_Start_Receive_IT>
 800e15c:	4603      	mov	r3, r0
 800e15e:	e000      	b.n	800e162 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800e160:	2302      	movs	r3, #2
  }
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	58000c00 	.word	0x58000c00

0800e170 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	4613      	mov	r3, r2
 800e17c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e184:	2b20      	cmp	r3, #32
 800e186:	d168      	bne.n	800e25a <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d002      	beq.n	800e194 <HAL_UART_Transmit_DMA+0x24>
 800e18e:	88fb      	ldrh	r3, [r7, #6]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d101      	bne.n	800e198 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800e194:	2301      	movs	r3, #1
 800e196:	e061      	b.n	800e25c <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d101      	bne.n	800e1a6 <HAL_UART_Transmit_DMA+0x36>
 800e1a2:	2302      	movs	r3, #2
 800e1a4:	e05a      	b.n	800e25c <HAL_UART_Transmit_DMA+0xec>
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	68ba      	ldr	r2, [r7, #8]
 800e1b2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	88fa      	ldrh	r2, [r7, #6]
 800e1b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	88fa      	ldrh	r2, [r7, #6]
 800e1c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2221      	movs	r2, #33	; 0x21
 800e1d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d02c      	beq.n	800e236 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1e0:	4a20      	ldr	r2, [pc, #128]	; (800e264 <HAL_UART_Transmit_DMA+0xf4>)
 800e1e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1e8:	4a1f      	ldr	r2, [pc, #124]	; (800e268 <HAL_UART_Transmit_DMA+0xf8>)
 800e1ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1f0:	4a1e      	ldr	r2, [pc, #120]	; (800e26c <HAL_UART_Transmit_DMA+0xfc>)
 800e1f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e204:	4619      	mov	r1, r3
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	3328      	adds	r3, #40	; 0x28
 800e20c:	461a      	mov	r2, r3
 800e20e:	88fb      	ldrh	r3, [r7, #6]
 800e210:	f7f7 f8c0 	bl	8005394 <HAL_DMA_Start_IT>
 800e214:	4603      	mov	r3, r0
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00d      	beq.n	800e236 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2210      	movs	r2, #16
 800e21e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2200      	movs	r2, #0
 800e226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	2220      	movs	r2, #32
 800e22e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	e012      	b.n	800e25c <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2240      	movs	r2, #64	; 0x40
 800e23c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2200      	movs	r2, #0
 800e242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	689a      	ldr	r2, [r3, #8]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e254:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800e256:	2300      	movs	r3, #0
 800e258:	e000      	b.n	800e25c <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800e25a:	2302      	movs	r3, #2
  }
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	3710      	adds	r7, #16
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}
 800e264:	0800f7f1 	.word	0x0800f7f1
 800e268:	0800f841 	.word	0x0800f841
 800e26c:	0800f85d 	.word	0x0800f85d

0800e270 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b088      	sub	sp, #32
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	69db      	ldr	r3, [r3, #28]
 800e27e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e290:	69fa      	ldr	r2, [r7, #28]
 800e292:	f640 030f 	movw	r3, #2063	; 0x80f
 800e296:	4013      	ands	r3, r2
 800e298:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d118      	bne.n	800e2d2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	f003 0320 	and.w	r3, r3, #32
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d013      	beq.n	800e2d2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	f003 0320 	and.w	r3, r3, #32
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d104      	bne.n	800e2be <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d009      	beq.n	800e2d2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f000 8282 	beq.w	800e7cc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	4798      	blx	r3
      }
      return;
 800e2d0:	e27c      	b.n	800e7cc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 80ef 	beq.w	800e4b8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e2da:	697a      	ldr	r2, [r7, #20]
 800e2dc:	4b73      	ldr	r3, [pc, #460]	; (800e4ac <HAL_UART_IRQHandler+0x23c>)
 800e2de:	4013      	ands	r3, r2
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d105      	bne.n	800e2f0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e2e4:	69ba      	ldr	r2, [r7, #24]
 800e2e6:	4b72      	ldr	r3, [pc, #456]	; (800e4b0 <HAL_UART_IRQHandler+0x240>)
 800e2e8:	4013      	ands	r3, r2
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	f000 80e4 	beq.w	800e4b8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	f003 0301 	and.w	r3, r3, #1
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d010      	beq.n	800e31c <HAL_UART_IRQHandler+0xac>
 800e2fa:	69bb      	ldr	r3, [r7, #24]
 800e2fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00b      	beq.n	800e31c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	2201      	movs	r2, #1
 800e30a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e312:	f043 0201 	orr.w	r2, r3, #1
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	f003 0302 	and.w	r3, r3, #2
 800e322:	2b00      	cmp	r3, #0
 800e324:	d010      	beq.n	800e348 <HAL_UART_IRQHandler+0xd8>
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	f003 0301 	and.w	r3, r3, #1
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00b      	beq.n	800e348 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2202      	movs	r2, #2
 800e336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e33e:	f043 0204 	orr.w	r2, r3, #4
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	f003 0304 	and.w	r3, r3, #4
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d010      	beq.n	800e374 <HAL_UART_IRQHandler+0x104>
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	f003 0301 	and.w	r3, r3, #1
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00b      	beq.n	800e374 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2204      	movs	r2, #4
 800e362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e36a:	f043 0202 	orr.w	r2, r3, #2
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	f003 0308 	and.w	r3, r3, #8
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d015      	beq.n	800e3aa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	f003 0320 	and.w	r3, r3, #32
 800e384:	2b00      	cmp	r3, #0
 800e386:	d104      	bne.n	800e392 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e388:	697a      	ldr	r2, [r7, #20]
 800e38a:	4b48      	ldr	r3, [pc, #288]	; (800e4ac <HAL_UART_IRQHandler+0x23c>)
 800e38c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00b      	beq.n	800e3aa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2208      	movs	r2, #8
 800e398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3a0:	f043 0208 	orr.w	r2, r3, #8
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d011      	beq.n	800e3d8 <HAL_UART_IRQHandler+0x168>
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00c      	beq.n	800e3d8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e3c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3ce:	f043 0220 	orr.w	r2, r3, #32
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	f000 81f6 	beq.w	800e7d0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	f003 0320 	and.w	r3, r3, #32
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d011      	beq.n	800e412 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	f003 0320 	and.w	r3, r3, #32
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d104      	bne.n	800e402 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d007      	beq.n	800e412 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e406:	2b00      	cmp	r3, #0
 800e408:	d003      	beq.n	800e412 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e418:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	689b      	ldr	r3, [r3, #8]
 800e420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e424:	2b40      	cmp	r3, #64	; 0x40
 800e426:	d004      	beq.n	800e432 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d031      	beq.n	800e496 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f001 f9aa 	bl	800f78c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e442:	2b40      	cmp	r3, #64	; 0x40
 800e444:	d123      	bne.n	800e48e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	689a      	ldr	r2, [r3, #8]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e454:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d013      	beq.n	800e486 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e462:	4a14      	ldr	r2, [pc, #80]	; (800e4b4 <HAL_UART_IRQHandler+0x244>)
 800e464:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7f7 fd1a 	bl	8005ea4 <HAL_DMA_Abort_IT>
 800e470:	4603      	mov	r3, r0
 800e472:	2b00      	cmp	r3, #0
 800e474:	d017      	beq.n	800e4a6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e47a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e480:	4610      	mov	r0, r2
 800e482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e484:	e00f      	b.n	800e4a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 f9c0 	bl	800e80c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e48c:	e00b      	b.n	800e4a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f000 f9bc 	bl	800e80c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e494:	e007      	b.n	800e4a6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 f9b8 	bl	800e80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e4a4:	e194      	b.n	800e7d0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4a6:	bf00      	nop
    return;
 800e4a8:	e192      	b.n	800e7d0 <HAL_UART_IRQHandler+0x560>
 800e4aa:	bf00      	nop
 800e4ac:	10000001 	.word	0x10000001
 800e4b0:	04000120 	.word	0x04000120
 800e4b4:	0800f8dd 	.word	0x0800f8dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	f040 810f 	bne.w	800e6e0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	f003 0310 	and.w	r3, r3, #16
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f000 8109 	beq.w	800e6e0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e4ce:	69bb      	ldr	r3, [r7, #24]
 800e4d0:	f003 0310 	and.w	r3, r3, #16
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 8103 	beq.w	800e6e0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	2210      	movs	r2, #16
 800e4e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4ec:	2b40      	cmp	r3, #64	; 0x40
 800e4ee:	f040 80bb 	bne.w	800e668 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a96      	ldr	r2, [pc, #600]	; (800e754 <HAL_UART_IRQHandler+0x4e4>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d059      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4a94      	ldr	r2, [pc, #592]	; (800e758 <HAL_UART_IRQHandler+0x4e8>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d053      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a92      	ldr	r2, [pc, #584]	; (800e75c <HAL_UART_IRQHandler+0x4ec>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d04d      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a90      	ldr	r2, [pc, #576]	; (800e760 <HAL_UART_IRQHandler+0x4f0>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d047      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4a8e      	ldr	r2, [pc, #568]	; (800e764 <HAL_UART_IRQHandler+0x4f4>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d041      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4a8c      	ldr	r2, [pc, #560]	; (800e768 <HAL_UART_IRQHandler+0x4f8>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d03b      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a8a      	ldr	r2, [pc, #552]	; (800e76c <HAL_UART_IRQHandler+0x4fc>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d035      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4a88      	ldr	r2, [pc, #544]	; (800e770 <HAL_UART_IRQHandler+0x500>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d02f      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	4a86      	ldr	r2, [pc, #536]	; (800e774 <HAL_UART_IRQHandler+0x504>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d029      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4a84      	ldr	r2, [pc, #528]	; (800e778 <HAL_UART_IRQHandler+0x508>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d023      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a82      	ldr	r2, [pc, #520]	; (800e77c <HAL_UART_IRQHandler+0x50c>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d01d      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4a80      	ldr	r2, [pc, #512]	; (800e780 <HAL_UART_IRQHandler+0x510>)
 800e57e:	4293      	cmp	r3, r2
 800e580:	d017      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4a7e      	ldr	r2, [pc, #504]	; (800e784 <HAL_UART_IRQHandler+0x514>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d011      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a7c      	ldr	r2, [pc, #496]	; (800e788 <HAL_UART_IRQHandler+0x518>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d00b      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a7a      	ldr	r2, [pc, #488]	; (800e78c <HAL_UART_IRQHandler+0x51c>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d005      	beq.n	800e5b2 <HAL_UART_IRQHandler+0x342>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a78      	ldr	r2, [pc, #480]	; (800e790 <HAL_UART_IRQHandler+0x520>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d105      	bne.n	800e5be <HAL_UART_IRQHandler+0x34e>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	e004      	b.n	800e5c8 <HAL_UART_IRQHandler+0x358>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800e5ca:	893b      	ldrh	r3, [r7, #8]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	f000 8101 	beq.w	800e7d4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5d8:	893a      	ldrh	r2, [r7, #8]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	f080 80fa 	bcs.w	800e7d4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	893a      	ldrh	r2, [r7, #8]
 800e5e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ec:	69db      	ldr	r3, [r3, #28]
 800e5ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5f2:	d02b      	beq.n	800e64c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e602:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	689a      	ldr	r2, [r3, #8]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f022 0201 	bic.w	r2, r2, #1
 800e612:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	689a      	ldr	r2, [r3, #8]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e622:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2220      	movs	r2, #32
 800e628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f022 0210 	bic.w	r2, r2, #16
 800e640:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e646:	4618      	mov	r0, r3
 800e648:	f7f7 f90e 	bl	8005868 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e658:	b29b      	uxth	r3, r3
 800e65a:	1ad3      	subs	r3, r2, r3
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	4619      	mov	r1, r3
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f000 f8dd 	bl	800e820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e666:	e0b5      	b.n	800e7d4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e674:	b29b      	uxth	r3, r3
 800e676:	1ad3      	subs	r3, r2, r3
 800e678:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e680:	b29b      	uxth	r3, r3
 800e682:	2b00      	cmp	r3, #0
 800e684:	f000 80a8 	beq.w	800e7d8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800e688:	897b      	ldrh	r3, [r7, #10]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	f000 80a4 	beq.w	800e7d8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e69e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	6899      	ldr	r1, [r3, #8]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	4b3a      	ldr	r3, [pc, #232]	; (800e794 <HAL_UART_IRQHandler+0x524>)
 800e6ac:	400b      	ands	r3, r1
 800e6ae:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2220      	movs	r2, #32
 800e6b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f022 0210 	bic.w	r2, r2, #16
 800e6d2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e6d4:	897b      	ldrh	r3, [r7, #10]
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 f8a1 	bl	800e820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e6de:	e07b      	b.n	800e7d8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00d      	beq.n	800e706 <HAL_UART_IRQHandler+0x496>
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d008      	beq.n	800e706 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e6fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f001 fbf8 	bl	800fef4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e704:	e06b      	b.n	800e7de <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d012      	beq.n	800e736 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e716:	2b00      	cmp	r3, #0
 800e718:	d104      	bne.n	800e724 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e720:	2b00      	cmp	r3, #0
 800e722:	d008      	beq.n	800e736 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d057      	beq.n	800e7dc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	4798      	blx	r3
    }
    return;
 800e734:	e052      	b.n	800e7dc <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d02b      	beq.n	800e798 <HAL_UART_IRQHandler+0x528>
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e746:	2b00      	cmp	r3, #0
 800e748:	d026      	beq.n	800e798 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f001 f8dc 	bl	800f908 <UART_EndTransmit_IT>
    return;
 800e750:	e045      	b.n	800e7de <HAL_UART_IRQHandler+0x56e>
 800e752:	bf00      	nop
 800e754:	40020010 	.word	0x40020010
 800e758:	40020028 	.word	0x40020028
 800e75c:	40020040 	.word	0x40020040
 800e760:	40020058 	.word	0x40020058
 800e764:	40020070 	.word	0x40020070
 800e768:	40020088 	.word	0x40020088
 800e76c:	400200a0 	.word	0x400200a0
 800e770:	400200b8 	.word	0x400200b8
 800e774:	40020410 	.word	0x40020410
 800e778:	40020428 	.word	0x40020428
 800e77c:	40020440 	.word	0x40020440
 800e780:	40020458 	.word	0x40020458
 800e784:	40020470 	.word	0x40020470
 800e788:	40020488 	.word	0x40020488
 800e78c:	400204a0 	.word	0x400204a0
 800e790:	400204b8 	.word	0x400204b8
 800e794:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d008      	beq.n	800e7b4 <HAL_UART_IRQHandler+0x544>
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d003      	beq.n	800e7b4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f001 fbb5 	bl	800ff1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7b2:	e014      	b.n	800e7de <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00f      	beq.n	800e7de <HAL_UART_IRQHandler+0x56e>
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	da0c      	bge.n	800e7de <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f001 fb9f 	bl	800ff08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7ca:	e008      	b.n	800e7de <HAL_UART_IRQHandler+0x56e>
      return;
 800e7cc:	bf00      	nop
 800e7ce:	e006      	b.n	800e7de <HAL_UART_IRQHandler+0x56e>
    return;
 800e7d0:	bf00      	nop
 800e7d2:	e004      	b.n	800e7de <HAL_UART_IRQHandler+0x56e>
      return;
 800e7d4:	bf00      	nop
 800e7d6:	e002      	b.n	800e7de <HAL_UART_IRQHandler+0x56e>
      return;
 800e7d8:	bf00      	nop
 800e7da:	e000      	b.n	800e7de <HAL_UART_IRQHandler+0x56e>
    return;
 800e7dc:	bf00      	nop
  }
}
 800e7de:	3720      	adds	r7, #32
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e7ec:	bf00      	nop
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e800:	bf00      	nop
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	460b      	mov	r3, r1
 800e82a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e838:	b5b0      	push	{r4, r5, r7, lr}
 800e83a:	b08e      	sub	sp, #56	; 0x38
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e840:	2300      	movs	r3, #0
 800e842:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	689a      	ldr	r2, [r3, #8]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	691b      	ldr	r3, [r3, #16]
 800e84e:	431a      	orrs	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	695b      	ldr	r3, [r3, #20]
 800e854:	431a      	orrs	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	69db      	ldr	r3, [r3, #28]
 800e85a:	4313      	orrs	r3, r2
 800e85c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	4bbf      	ldr	r3, [pc, #764]	; (800eb64 <UART_SetConfig+0x32c>)
 800e866:	4013      	ands	r3, r2
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	6812      	ldr	r2, [r2, #0]
 800e86c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e86e:	430b      	orrs	r3, r1
 800e870:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	68da      	ldr	r2, [r3, #12]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	430a      	orrs	r2, r1
 800e886:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	699b      	ldr	r3, [r3, #24]
 800e88c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	4ab5      	ldr	r2, [pc, #724]	; (800eb68 <UART_SetConfig+0x330>)
 800e894:	4293      	cmp	r3, r2
 800e896:	d004      	beq.n	800e8a2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6a1b      	ldr	r3, [r3, #32]
 800e89c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	689a      	ldr	r2, [r3, #8]
 800e8a8:	4bb0      	ldr	r3, [pc, #704]	; (800eb6c <UART_SetConfig+0x334>)
 800e8aa:	4013      	ands	r3, r2
 800e8ac:	687a      	ldr	r2, [r7, #4]
 800e8ae:	6812      	ldr	r2, [r2, #0]
 800e8b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e8b2:	430b      	orrs	r3, r1
 800e8b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8bc:	f023 010f 	bic.w	r1, r3, #15
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	430a      	orrs	r2, r1
 800e8ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4aa7      	ldr	r2, [pc, #668]	; (800eb70 <UART_SetConfig+0x338>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d176      	bne.n	800e9c4 <UART_SetConfig+0x18c>
 800e8d6:	4ba7      	ldr	r3, [pc, #668]	; (800eb74 <UART_SetConfig+0x33c>)
 800e8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e8de:	2b28      	cmp	r3, #40	; 0x28
 800e8e0:	d86c      	bhi.n	800e9bc <UART_SetConfig+0x184>
 800e8e2:	a201      	add	r2, pc, #4	; (adr r2, 800e8e8 <UART_SetConfig+0xb0>)
 800e8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e8:	0800e98d 	.word	0x0800e98d
 800e8ec:	0800e9bd 	.word	0x0800e9bd
 800e8f0:	0800e9bd 	.word	0x0800e9bd
 800e8f4:	0800e9bd 	.word	0x0800e9bd
 800e8f8:	0800e9bd 	.word	0x0800e9bd
 800e8fc:	0800e9bd 	.word	0x0800e9bd
 800e900:	0800e9bd 	.word	0x0800e9bd
 800e904:	0800e9bd 	.word	0x0800e9bd
 800e908:	0800e995 	.word	0x0800e995
 800e90c:	0800e9bd 	.word	0x0800e9bd
 800e910:	0800e9bd 	.word	0x0800e9bd
 800e914:	0800e9bd 	.word	0x0800e9bd
 800e918:	0800e9bd 	.word	0x0800e9bd
 800e91c:	0800e9bd 	.word	0x0800e9bd
 800e920:	0800e9bd 	.word	0x0800e9bd
 800e924:	0800e9bd 	.word	0x0800e9bd
 800e928:	0800e99d 	.word	0x0800e99d
 800e92c:	0800e9bd 	.word	0x0800e9bd
 800e930:	0800e9bd 	.word	0x0800e9bd
 800e934:	0800e9bd 	.word	0x0800e9bd
 800e938:	0800e9bd 	.word	0x0800e9bd
 800e93c:	0800e9bd 	.word	0x0800e9bd
 800e940:	0800e9bd 	.word	0x0800e9bd
 800e944:	0800e9bd 	.word	0x0800e9bd
 800e948:	0800e9a5 	.word	0x0800e9a5
 800e94c:	0800e9bd 	.word	0x0800e9bd
 800e950:	0800e9bd 	.word	0x0800e9bd
 800e954:	0800e9bd 	.word	0x0800e9bd
 800e958:	0800e9bd 	.word	0x0800e9bd
 800e95c:	0800e9bd 	.word	0x0800e9bd
 800e960:	0800e9bd 	.word	0x0800e9bd
 800e964:	0800e9bd 	.word	0x0800e9bd
 800e968:	0800e9ad 	.word	0x0800e9ad
 800e96c:	0800e9bd 	.word	0x0800e9bd
 800e970:	0800e9bd 	.word	0x0800e9bd
 800e974:	0800e9bd 	.word	0x0800e9bd
 800e978:	0800e9bd 	.word	0x0800e9bd
 800e97c:	0800e9bd 	.word	0x0800e9bd
 800e980:	0800e9bd 	.word	0x0800e9bd
 800e984:	0800e9bd 	.word	0x0800e9bd
 800e988:	0800e9b5 	.word	0x0800e9b5
 800e98c:	2301      	movs	r3, #1
 800e98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e992:	e222      	b.n	800edda <UART_SetConfig+0x5a2>
 800e994:	2304      	movs	r3, #4
 800e996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e99a:	e21e      	b.n	800edda <UART_SetConfig+0x5a2>
 800e99c:	2308      	movs	r3, #8
 800e99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9a2:	e21a      	b.n	800edda <UART_SetConfig+0x5a2>
 800e9a4:	2310      	movs	r3, #16
 800e9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9aa:	e216      	b.n	800edda <UART_SetConfig+0x5a2>
 800e9ac:	2320      	movs	r3, #32
 800e9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9b2:	e212      	b.n	800edda <UART_SetConfig+0x5a2>
 800e9b4:	2340      	movs	r3, #64	; 0x40
 800e9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9ba:	e20e      	b.n	800edda <UART_SetConfig+0x5a2>
 800e9bc:	2380      	movs	r3, #128	; 0x80
 800e9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9c2:	e20a      	b.n	800edda <UART_SetConfig+0x5a2>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a6b      	ldr	r2, [pc, #428]	; (800eb78 <UART_SetConfig+0x340>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d130      	bne.n	800ea30 <UART_SetConfig+0x1f8>
 800e9ce:	4b69      	ldr	r3, [pc, #420]	; (800eb74 <UART_SetConfig+0x33c>)
 800e9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9d2:	f003 0307 	and.w	r3, r3, #7
 800e9d6:	2b05      	cmp	r3, #5
 800e9d8:	d826      	bhi.n	800ea28 <UART_SetConfig+0x1f0>
 800e9da:	a201      	add	r2, pc, #4	; (adr r2, 800e9e0 <UART_SetConfig+0x1a8>)
 800e9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e0:	0800e9f9 	.word	0x0800e9f9
 800e9e4:	0800ea01 	.word	0x0800ea01
 800e9e8:	0800ea09 	.word	0x0800ea09
 800e9ec:	0800ea11 	.word	0x0800ea11
 800e9f0:	0800ea19 	.word	0x0800ea19
 800e9f4:	0800ea21 	.word	0x0800ea21
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9fe:	e1ec      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea00:	2304      	movs	r3, #4
 800ea02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea06:	e1e8      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea08:	2308      	movs	r3, #8
 800ea0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea0e:	e1e4      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea10:	2310      	movs	r3, #16
 800ea12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea16:	e1e0      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea18:	2320      	movs	r3, #32
 800ea1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea1e:	e1dc      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea20:	2340      	movs	r3, #64	; 0x40
 800ea22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea26:	e1d8      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea28:	2380      	movs	r3, #128	; 0x80
 800ea2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea2e:	e1d4      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4a51      	ldr	r2, [pc, #324]	; (800eb7c <UART_SetConfig+0x344>)
 800ea36:	4293      	cmp	r3, r2
 800ea38:	d130      	bne.n	800ea9c <UART_SetConfig+0x264>
 800ea3a:	4b4e      	ldr	r3, [pc, #312]	; (800eb74 <UART_SetConfig+0x33c>)
 800ea3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea3e:	f003 0307 	and.w	r3, r3, #7
 800ea42:	2b05      	cmp	r3, #5
 800ea44:	d826      	bhi.n	800ea94 <UART_SetConfig+0x25c>
 800ea46:	a201      	add	r2, pc, #4	; (adr r2, 800ea4c <UART_SetConfig+0x214>)
 800ea48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea4c:	0800ea65 	.word	0x0800ea65
 800ea50:	0800ea6d 	.word	0x0800ea6d
 800ea54:	0800ea75 	.word	0x0800ea75
 800ea58:	0800ea7d 	.word	0x0800ea7d
 800ea5c:	0800ea85 	.word	0x0800ea85
 800ea60:	0800ea8d 	.word	0x0800ea8d
 800ea64:	2300      	movs	r3, #0
 800ea66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea6a:	e1b6      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea6c:	2304      	movs	r3, #4
 800ea6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea72:	e1b2      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea74:	2308      	movs	r3, #8
 800ea76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea7a:	e1ae      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea7c:	2310      	movs	r3, #16
 800ea7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea82:	e1aa      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea84:	2320      	movs	r3, #32
 800ea86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea8a:	e1a6      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea8c:	2340      	movs	r3, #64	; 0x40
 800ea8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea92:	e1a2      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea94:	2380      	movs	r3, #128	; 0x80
 800ea96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ea9a:	e19e      	b.n	800edda <UART_SetConfig+0x5a2>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a37      	ldr	r2, [pc, #220]	; (800eb80 <UART_SetConfig+0x348>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d130      	bne.n	800eb08 <UART_SetConfig+0x2d0>
 800eaa6:	4b33      	ldr	r3, [pc, #204]	; (800eb74 <UART_SetConfig+0x33c>)
 800eaa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaaa:	f003 0307 	and.w	r3, r3, #7
 800eaae:	2b05      	cmp	r3, #5
 800eab0:	d826      	bhi.n	800eb00 <UART_SetConfig+0x2c8>
 800eab2:	a201      	add	r2, pc, #4	; (adr r2, 800eab8 <UART_SetConfig+0x280>)
 800eab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab8:	0800ead1 	.word	0x0800ead1
 800eabc:	0800ead9 	.word	0x0800ead9
 800eac0:	0800eae1 	.word	0x0800eae1
 800eac4:	0800eae9 	.word	0x0800eae9
 800eac8:	0800eaf1 	.word	0x0800eaf1
 800eacc:	0800eaf9 	.word	0x0800eaf9
 800ead0:	2300      	movs	r3, #0
 800ead2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ead6:	e180      	b.n	800edda <UART_SetConfig+0x5a2>
 800ead8:	2304      	movs	r3, #4
 800eada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eade:	e17c      	b.n	800edda <UART_SetConfig+0x5a2>
 800eae0:	2308      	movs	r3, #8
 800eae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eae6:	e178      	b.n	800edda <UART_SetConfig+0x5a2>
 800eae8:	2310      	movs	r3, #16
 800eaea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaee:	e174      	b.n	800edda <UART_SetConfig+0x5a2>
 800eaf0:	2320      	movs	r3, #32
 800eaf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eaf6:	e170      	b.n	800edda <UART_SetConfig+0x5a2>
 800eaf8:	2340      	movs	r3, #64	; 0x40
 800eafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eafe:	e16c      	b.n	800edda <UART_SetConfig+0x5a2>
 800eb00:	2380      	movs	r3, #128	; 0x80
 800eb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb06:	e168      	b.n	800edda <UART_SetConfig+0x5a2>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a1d      	ldr	r2, [pc, #116]	; (800eb84 <UART_SetConfig+0x34c>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d142      	bne.n	800eb98 <UART_SetConfig+0x360>
 800eb12:	4b18      	ldr	r3, [pc, #96]	; (800eb74 <UART_SetConfig+0x33c>)
 800eb14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb16:	f003 0307 	and.w	r3, r3, #7
 800eb1a:	2b05      	cmp	r3, #5
 800eb1c:	d838      	bhi.n	800eb90 <UART_SetConfig+0x358>
 800eb1e:	a201      	add	r2, pc, #4	; (adr r2, 800eb24 <UART_SetConfig+0x2ec>)
 800eb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb24:	0800eb3d 	.word	0x0800eb3d
 800eb28:	0800eb45 	.word	0x0800eb45
 800eb2c:	0800eb4d 	.word	0x0800eb4d
 800eb30:	0800eb55 	.word	0x0800eb55
 800eb34:	0800eb5d 	.word	0x0800eb5d
 800eb38:	0800eb89 	.word	0x0800eb89
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb42:	e14a      	b.n	800edda <UART_SetConfig+0x5a2>
 800eb44:	2304      	movs	r3, #4
 800eb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb4a:	e146      	b.n	800edda <UART_SetConfig+0x5a2>
 800eb4c:	2308      	movs	r3, #8
 800eb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb52:	e142      	b.n	800edda <UART_SetConfig+0x5a2>
 800eb54:	2310      	movs	r3, #16
 800eb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb5a:	e13e      	b.n	800edda <UART_SetConfig+0x5a2>
 800eb5c:	2320      	movs	r3, #32
 800eb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb62:	e13a      	b.n	800edda <UART_SetConfig+0x5a2>
 800eb64:	cfff69f3 	.word	0xcfff69f3
 800eb68:	58000c00 	.word	0x58000c00
 800eb6c:	11fff4ff 	.word	0x11fff4ff
 800eb70:	40011000 	.word	0x40011000
 800eb74:	58024400 	.word	0x58024400
 800eb78:	40004400 	.word	0x40004400
 800eb7c:	40004800 	.word	0x40004800
 800eb80:	40004c00 	.word	0x40004c00
 800eb84:	40005000 	.word	0x40005000
 800eb88:	2340      	movs	r3, #64	; 0x40
 800eb8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb8e:	e124      	b.n	800edda <UART_SetConfig+0x5a2>
 800eb90:	2380      	movs	r3, #128	; 0x80
 800eb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb96:	e120      	b.n	800edda <UART_SetConfig+0x5a2>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4acc      	ldr	r2, [pc, #816]	; (800eed0 <UART_SetConfig+0x698>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d176      	bne.n	800ec90 <UART_SetConfig+0x458>
 800eba2:	4bcc      	ldr	r3, [pc, #816]	; (800eed4 <UART_SetConfig+0x69c>)
 800eba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ebaa:	2b28      	cmp	r3, #40	; 0x28
 800ebac:	d86c      	bhi.n	800ec88 <UART_SetConfig+0x450>
 800ebae:	a201      	add	r2, pc, #4	; (adr r2, 800ebb4 <UART_SetConfig+0x37c>)
 800ebb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebb4:	0800ec59 	.word	0x0800ec59
 800ebb8:	0800ec89 	.word	0x0800ec89
 800ebbc:	0800ec89 	.word	0x0800ec89
 800ebc0:	0800ec89 	.word	0x0800ec89
 800ebc4:	0800ec89 	.word	0x0800ec89
 800ebc8:	0800ec89 	.word	0x0800ec89
 800ebcc:	0800ec89 	.word	0x0800ec89
 800ebd0:	0800ec89 	.word	0x0800ec89
 800ebd4:	0800ec61 	.word	0x0800ec61
 800ebd8:	0800ec89 	.word	0x0800ec89
 800ebdc:	0800ec89 	.word	0x0800ec89
 800ebe0:	0800ec89 	.word	0x0800ec89
 800ebe4:	0800ec89 	.word	0x0800ec89
 800ebe8:	0800ec89 	.word	0x0800ec89
 800ebec:	0800ec89 	.word	0x0800ec89
 800ebf0:	0800ec89 	.word	0x0800ec89
 800ebf4:	0800ec69 	.word	0x0800ec69
 800ebf8:	0800ec89 	.word	0x0800ec89
 800ebfc:	0800ec89 	.word	0x0800ec89
 800ec00:	0800ec89 	.word	0x0800ec89
 800ec04:	0800ec89 	.word	0x0800ec89
 800ec08:	0800ec89 	.word	0x0800ec89
 800ec0c:	0800ec89 	.word	0x0800ec89
 800ec10:	0800ec89 	.word	0x0800ec89
 800ec14:	0800ec71 	.word	0x0800ec71
 800ec18:	0800ec89 	.word	0x0800ec89
 800ec1c:	0800ec89 	.word	0x0800ec89
 800ec20:	0800ec89 	.word	0x0800ec89
 800ec24:	0800ec89 	.word	0x0800ec89
 800ec28:	0800ec89 	.word	0x0800ec89
 800ec2c:	0800ec89 	.word	0x0800ec89
 800ec30:	0800ec89 	.word	0x0800ec89
 800ec34:	0800ec79 	.word	0x0800ec79
 800ec38:	0800ec89 	.word	0x0800ec89
 800ec3c:	0800ec89 	.word	0x0800ec89
 800ec40:	0800ec89 	.word	0x0800ec89
 800ec44:	0800ec89 	.word	0x0800ec89
 800ec48:	0800ec89 	.word	0x0800ec89
 800ec4c:	0800ec89 	.word	0x0800ec89
 800ec50:	0800ec89 	.word	0x0800ec89
 800ec54:	0800ec81 	.word	0x0800ec81
 800ec58:	2301      	movs	r3, #1
 800ec5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec5e:	e0bc      	b.n	800edda <UART_SetConfig+0x5a2>
 800ec60:	2304      	movs	r3, #4
 800ec62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec66:	e0b8      	b.n	800edda <UART_SetConfig+0x5a2>
 800ec68:	2308      	movs	r3, #8
 800ec6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec6e:	e0b4      	b.n	800edda <UART_SetConfig+0x5a2>
 800ec70:	2310      	movs	r3, #16
 800ec72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec76:	e0b0      	b.n	800edda <UART_SetConfig+0x5a2>
 800ec78:	2320      	movs	r3, #32
 800ec7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec7e:	e0ac      	b.n	800edda <UART_SetConfig+0x5a2>
 800ec80:	2340      	movs	r3, #64	; 0x40
 800ec82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec86:	e0a8      	b.n	800edda <UART_SetConfig+0x5a2>
 800ec88:	2380      	movs	r3, #128	; 0x80
 800ec8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec8e:	e0a4      	b.n	800edda <UART_SetConfig+0x5a2>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a90      	ldr	r2, [pc, #576]	; (800eed8 <UART_SetConfig+0x6a0>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d130      	bne.n	800ecfc <UART_SetConfig+0x4c4>
 800ec9a:	4b8e      	ldr	r3, [pc, #568]	; (800eed4 <UART_SetConfig+0x69c>)
 800ec9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec9e:	f003 0307 	and.w	r3, r3, #7
 800eca2:	2b05      	cmp	r3, #5
 800eca4:	d826      	bhi.n	800ecf4 <UART_SetConfig+0x4bc>
 800eca6:	a201      	add	r2, pc, #4	; (adr r2, 800ecac <UART_SetConfig+0x474>)
 800eca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecac:	0800ecc5 	.word	0x0800ecc5
 800ecb0:	0800eccd 	.word	0x0800eccd
 800ecb4:	0800ecd5 	.word	0x0800ecd5
 800ecb8:	0800ecdd 	.word	0x0800ecdd
 800ecbc:	0800ece5 	.word	0x0800ece5
 800ecc0:	0800eced 	.word	0x0800eced
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecca:	e086      	b.n	800edda <UART_SetConfig+0x5a2>
 800eccc:	2304      	movs	r3, #4
 800ecce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecd2:	e082      	b.n	800edda <UART_SetConfig+0x5a2>
 800ecd4:	2308      	movs	r3, #8
 800ecd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecda:	e07e      	b.n	800edda <UART_SetConfig+0x5a2>
 800ecdc:	2310      	movs	r3, #16
 800ecde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ece2:	e07a      	b.n	800edda <UART_SetConfig+0x5a2>
 800ece4:	2320      	movs	r3, #32
 800ece6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecea:	e076      	b.n	800edda <UART_SetConfig+0x5a2>
 800ecec:	2340      	movs	r3, #64	; 0x40
 800ecee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecf2:	e072      	b.n	800edda <UART_SetConfig+0x5a2>
 800ecf4:	2380      	movs	r3, #128	; 0x80
 800ecf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecfa:	e06e      	b.n	800edda <UART_SetConfig+0x5a2>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	4a76      	ldr	r2, [pc, #472]	; (800eedc <UART_SetConfig+0x6a4>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d130      	bne.n	800ed68 <UART_SetConfig+0x530>
 800ed06:	4b73      	ldr	r3, [pc, #460]	; (800eed4 <UART_SetConfig+0x69c>)
 800ed08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed0a:	f003 0307 	and.w	r3, r3, #7
 800ed0e:	2b05      	cmp	r3, #5
 800ed10:	d826      	bhi.n	800ed60 <UART_SetConfig+0x528>
 800ed12:	a201      	add	r2, pc, #4	; (adr r2, 800ed18 <UART_SetConfig+0x4e0>)
 800ed14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed18:	0800ed31 	.word	0x0800ed31
 800ed1c:	0800ed39 	.word	0x0800ed39
 800ed20:	0800ed41 	.word	0x0800ed41
 800ed24:	0800ed49 	.word	0x0800ed49
 800ed28:	0800ed51 	.word	0x0800ed51
 800ed2c:	0800ed59 	.word	0x0800ed59
 800ed30:	2300      	movs	r3, #0
 800ed32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed36:	e050      	b.n	800edda <UART_SetConfig+0x5a2>
 800ed38:	2304      	movs	r3, #4
 800ed3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed3e:	e04c      	b.n	800edda <UART_SetConfig+0x5a2>
 800ed40:	2308      	movs	r3, #8
 800ed42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed46:	e048      	b.n	800edda <UART_SetConfig+0x5a2>
 800ed48:	2310      	movs	r3, #16
 800ed4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed4e:	e044      	b.n	800edda <UART_SetConfig+0x5a2>
 800ed50:	2320      	movs	r3, #32
 800ed52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed56:	e040      	b.n	800edda <UART_SetConfig+0x5a2>
 800ed58:	2340      	movs	r3, #64	; 0x40
 800ed5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed5e:	e03c      	b.n	800edda <UART_SetConfig+0x5a2>
 800ed60:	2380      	movs	r3, #128	; 0x80
 800ed62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed66:	e038      	b.n	800edda <UART_SetConfig+0x5a2>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	4a5c      	ldr	r2, [pc, #368]	; (800eee0 <UART_SetConfig+0x6a8>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d130      	bne.n	800edd4 <UART_SetConfig+0x59c>
 800ed72:	4b58      	ldr	r3, [pc, #352]	; (800eed4 <UART_SetConfig+0x69c>)
 800ed74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed76:	f003 0307 	and.w	r3, r3, #7
 800ed7a:	2b05      	cmp	r3, #5
 800ed7c:	d826      	bhi.n	800edcc <UART_SetConfig+0x594>
 800ed7e:	a201      	add	r2, pc, #4	; (adr r2, 800ed84 <UART_SetConfig+0x54c>)
 800ed80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed84:	0800ed9d 	.word	0x0800ed9d
 800ed88:	0800eda5 	.word	0x0800eda5
 800ed8c:	0800edad 	.word	0x0800edad
 800ed90:	0800edb5 	.word	0x0800edb5
 800ed94:	0800edbd 	.word	0x0800edbd
 800ed98:	0800edc5 	.word	0x0800edc5
 800ed9c:	2302      	movs	r3, #2
 800ed9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eda2:	e01a      	b.n	800edda <UART_SetConfig+0x5a2>
 800eda4:	2304      	movs	r3, #4
 800eda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edaa:	e016      	b.n	800edda <UART_SetConfig+0x5a2>
 800edac:	2308      	movs	r3, #8
 800edae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edb2:	e012      	b.n	800edda <UART_SetConfig+0x5a2>
 800edb4:	2310      	movs	r3, #16
 800edb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edba:	e00e      	b.n	800edda <UART_SetConfig+0x5a2>
 800edbc:	2320      	movs	r3, #32
 800edbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edc2:	e00a      	b.n	800edda <UART_SetConfig+0x5a2>
 800edc4:	2340      	movs	r3, #64	; 0x40
 800edc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edca:	e006      	b.n	800edda <UART_SetConfig+0x5a2>
 800edcc:	2380      	movs	r3, #128	; 0x80
 800edce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edd2:	e002      	b.n	800edda <UART_SetConfig+0x5a2>
 800edd4:	2380      	movs	r3, #128	; 0x80
 800edd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	4a40      	ldr	r2, [pc, #256]	; (800eee0 <UART_SetConfig+0x6a8>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	f040 80ef 	bne.w	800efc4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ede6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800edea:	2b20      	cmp	r3, #32
 800edec:	dc46      	bgt.n	800ee7c <UART_SetConfig+0x644>
 800edee:	2b02      	cmp	r3, #2
 800edf0:	f2c0 8081 	blt.w	800eef6 <UART_SetConfig+0x6be>
 800edf4:	3b02      	subs	r3, #2
 800edf6:	2b1e      	cmp	r3, #30
 800edf8:	d87d      	bhi.n	800eef6 <UART_SetConfig+0x6be>
 800edfa:	a201      	add	r2, pc, #4	; (adr r2, 800ee00 <UART_SetConfig+0x5c8>)
 800edfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee00:	0800ee83 	.word	0x0800ee83
 800ee04:	0800eef7 	.word	0x0800eef7
 800ee08:	0800ee8b 	.word	0x0800ee8b
 800ee0c:	0800eef7 	.word	0x0800eef7
 800ee10:	0800eef7 	.word	0x0800eef7
 800ee14:	0800eef7 	.word	0x0800eef7
 800ee18:	0800ee9b 	.word	0x0800ee9b
 800ee1c:	0800eef7 	.word	0x0800eef7
 800ee20:	0800eef7 	.word	0x0800eef7
 800ee24:	0800eef7 	.word	0x0800eef7
 800ee28:	0800eef7 	.word	0x0800eef7
 800ee2c:	0800eef7 	.word	0x0800eef7
 800ee30:	0800eef7 	.word	0x0800eef7
 800ee34:	0800eef7 	.word	0x0800eef7
 800ee38:	0800eeab 	.word	0x0800eeab
 800ee3c:	0800eef7 	.word	0x0800eef7
 800ee40:	0800eef7 	.word	0x0800eef7
 800ee44:	0800eef7 	.word	0x0800eef7
 800ee48:	0800eef7 	.word	0x0800eef7
 800ee4c:	0800eef7 	.word	0x0800eef7
 800ee50:	0800eef7 	.word	0x0800eef7
 800ee54:	0800eef7 	.word	0x0800eef7
 800ee58:	0800eef7 	.word	0x0800eef7
 800ee5c:	0800eef7 	.word	0x0800eef7
 800ee60:	0800eef7 	.word	0x0800eef7
 800ee64:	0800eef7 	.word	0x0800eef7
 800ee68:	0800eef7 	.word	0x0800eef7
 800ee6c:	0800eef7 	.word	0x0800eef7
 800ee70:	0800eef7 	.word	0x0800eef7
 800ee74:	0800eef7 	.word	0x0800eef7
 800ee78:	0800eee9 	.word	0x0800eee9
 800ee7c:	2b40      	cmp	r3, #64	; 0x40
 800ee7e:	d036      	beq.n	800eeee <UART_SetConfig+0x6b6>
 800ee80:	e039      	b.n	800eef6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ee82:	f7fd f8b3 	bl	800bfec <HAL_RCCEx_GetD3PCLK1Freq>
 800ee86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ee88:	e03b      	b.n	800ef02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee8a:	f107 0314 	add.w	r3, r7, #20
 800ee8e:	4618      	mov	r0, r3
 800ee90:	f7fd f8c2 	bl	800c018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee98:	e033      	b.n	800ef02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee9a:	f107 0308 	add.w	r3, r7, #8
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7fd fa0e 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eea8:	e02b      	b.n	800ef02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eeaa:	4b0a      	ldr	r3, [pc, #40]	; (800eed4 <UART_SetConfig+0x69c>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	f003 0320 	and.w	r3, r3, #32
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d009      	beq.n	800eeca <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eeb6:	4b07      	ldr	r3, [pc, #28]	; (800eed4 <UART_SetConfig+0x69c>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	08db      	lsrs	r3, r3, #3
 800eebc:	f003 0303 	and.w	r3, r3, #3
 800eec0:	4a08      	ldr	r2, [pc, #32]	; (800eee4 <UART_SetConfig+0x6ac>)
 800eec2:	fa22 f303 	lsr.w	r3, r2, r3
 800eec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eec8:	e01b      	b.n	800ef02 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800eeca:	4b06      	ldr	r3, [pc, #24]	; (800eee4 <UART_SetConfig+0x6ac>)
 800eecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eece:	e018      	b.n	800ef02 <UART_SetConfig+0x6ca>
 800eed0:	40011400 	.word	0x40011400
 800eed4:	58024400 	.word	0x58024400
 800eed8:	40007800 	.word	0x40007800
 800eedc:	40007c00 	.word	0x40007c00
 800eee0:	58000c00 	.word	0x58000c00
 800eee4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eee8:	4bc4      	ldr	r3, [pc, #784]	; (800f1fc <UART_SetConfig+0x9c4>)
 800eeea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eeec:	e009      	b.n	800ef02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eeee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eef4:	e005      	b.n	800ef02 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800eef6:	2300      	movs	r3, #0
 800eef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800eefa:	2301      	movs	r3, #1
 800eefc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ef00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ef02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f000 81da 	beq.w	800f2be <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef0e:	4abc      	ldr	r2, [pc, #752]	; (800f200 <UART_SetConfig+0x9c8>)
 800ef10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef14:	461a      	mov	r2, r3
 800ef16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef18:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef1c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	685a      	ldr	r2, [r3, #4]
 800ef22:	4613      	mov	r3, r2
 800ef24:	005b      	lsls	r3, r3, #1
 800ef26:	4413      	add	r3, r2
 800ef28:	6a3a      	ldr	r2, [r7, #32]
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d305      	bcc.n	800ef3a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ef34:	6a3a      	ldr	r2, [r7, #32]
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d903      	bls.n	800ef42 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ef40:	e1bd      	b.n	800f2be <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef44:	4618      	mov	r0, r3
 800ef46:	f04f 0100 	mov.w	r1, #0
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef4e:	4aac      	ldr	r2, [pc, #688]	; (800f200 <UART_SetConfig+0x9c8>)
 800ef50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef54:	b29a      	uxth	r2, r3
 800ef56:	f04f 0300 	mov.w	r3, #0
 800ef5a:	f7f1 fa19 	bl	8000390 <__aeabi_uldivmod>
 800ef5e:	4602      	mov	r2, r0
 800ef60:	460b      	mov	r3, r1
 800ef62:	4610      	mov	r0, r2
 800ef64:	4619      	mov	r1, r3
 800ef66:	f04f 0200 	mov.w	r2, #0
 800ef6a:	f04f 0300 	mov.w	r3, #0
 800ef6e:	020b      	lsls	r3, r1, #8
 800ef70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ef74:	0202      	lsls	r2, r0, #8
 800ef76:	6879      	ldr	r1, [r7, #4]
 800ef78:	6849      	ldr	r1, [r1, #4]
 800ef7a:	0849      	lsrs	r1, r1, #1
 800ef7c:	4608      	mov	r0, r1
 800ef7e:	f04f 0100 	mov.w	r1, #0
 800ef82:	1814      	adds	r4, r2, r0
 800ef84:	eb43 0501 	adc.w	r5, r3, r1
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	f04f 0300 	mov.w	r3, #0
 800ef92:	4620      	mov	r0, r4
 800ef94:	4629      	mov	r1, r5
 800ef96:	f7f1 f9fb 	bl	8000390 <__aeabi_uldivmod>
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	4613      	mov	r3, r2
 800efa0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800efa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800efa8:	d308      	bcc.n	800efbc <UART_SetConfig+0x784>
 800efaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800efb0:	d204      	bcs.n	800efbc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efb8:	60da      	str	r2, [r3, #12]
 800efba:	e180      	b.n	800f2be <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800efbc:	2301      	movs	r3, #1
 800efbe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800efc2:	e17c      	b.n	800f2be <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	69db      	ldr	r3, [r3, #28]
 800efc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efcc:	f040 80bf 	bne.w	800f14e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800efd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800efd4:	2b20      	cmp	r3, #32
 800efd6:	dc49      	bgt.n	800f06c <UART_SetConfig+0x834>
 800efd8:	2b00      	cmp	r3, #0
 800efda:	db7c      	blt.n	800f0d6 <UART_SetConfig+0x89e>
 800efdc:	2b20      	cmp	r3, #32
 800efde:	d87a      	bhi.n	800f0d6 <UART_SetConfig+0x89e>
 800efe0:	a201      	add	r2, pc, #4	; (adr r2, 800efe8 <UART_SetConfig+0x7b0>)
 800efe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe6:	bf00      	nop
 800efe8:	0800f073 	.word	0x0800f073
 800efec:	0800f07b 	.word	0x0800f07b
 800eff0:	0800f0d7 	.word	0x0800f0d7
 800eff4:	0800f0d7 	.word	0x0800f0d7
 800eff8:	0800f083 	.word	0x0800f083
 800effc:	0800f0d7 	.word	0x0800f0d7
 800f000:	0800f0d7 	.word	0x0800f0d7
 800f004:	0800f0d7 	.word	0x0800f0d7
 800f008:	0800f093 	.word	0x0800f093
 800f00c:	0800f0d7 	.word	0x0800f0d7
 800f010:	0800f0d7 	.word	0x0800f0d7
 800f014:	0800f0d7 	.word	0x0800f0d7
 800f018:	0800f0d7 	.word	0x0800f0d7
 800f01c:	0800f0d7 	.word	0x0800f0d7
 800f020:	0800f0d7 	.word	0x0800f0d7
 800f024:	0800f0d7 	.word	0x0800f0d7
 800f028:	0800f0a3 	.word	0x0800f0a3
 800f02c:	0800f0d7 	.word	0x0800f0d7
 800f030:	0800f0d7 	.word	0x0800f0d7
 800f034:	0800f0d7 	.word	0x0800f0d7
 800f038:	0800f0d7 	.word	0x0800f0d7
 800f03c:	0800f0d7 	.word	0x0800f0d7
 800f040:	0800f0d7 	.word	0x0800f0d7
 800f044:	0800f0d7 	.word	0x0800f0d7
 800f048:	0800f0d7 	.word	0x0800f0d7
 800f04c:	0800f0d7 	.word	0x0800f0d7
 800f050:	0800f0d7 	.word	0x0800f0d7
 800f054:	0800f0d7 	.word	0x0800f0d7
 800f058:	0800f0d7 	.word	0x0800f0d7
 800f05c:	0800f0d7 	.word	0x0800f0d7
 800f060:	0800f0d7 	.word	0x0800f0d7
 800f064:	0800f0d7 	.word	0x0800f0d7
 800f068:	0800f0c9 	.word	0x0800f0c9
 800f06c:	2b40      	cmp	r3, #64	; 0x40
 800f06e:	d02e      	beq.n	800f0ce <UART_SetConfig+0x896>
 800f070:	e031      	b.n	800f0d6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f072:	f7fc f84f 	bl	800b114 <HAL_RCC_GetPCLK1Freq>
 800f076:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f078:	e033      	b.n	800f0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f07a:	f7fc f861 	bl	800b140 <HAL_RCC_GetPCLK2Freq>
 800f07e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f080:	e02f      	b.n	800f0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f082:	f107 0314 	add.w	r3, r7, #20
 800f086:	4618      	mov	r0, r3
 800f088:	f7fc ffc6 	bl	800c018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f08c:	69bb      	ldr	r3, [r7, #24]
 800f08e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f090:	e027      	b.n	800f0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f092:	f107 0308 	add.w	r3, r7, #8
 800f096:	4618      	mov	r0, r3
 800f098:	f7fd f912 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0a0:	e01f      	b.n	800f0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f0a2:	4b58      	ldr	r3, [pc, #352]	; (800f204 <UART_SetConfig+0x9cc>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f003 0320 	and.w	r3, r3, #32
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d009      	beq.n	800f0c2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f0ae:	4b55      	ldr	r3, [pc, #340]	; (800f204 <UART_SetConfig+0x9cc>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	08db      	lsrs	r3, r3, #3
 800f0b4:	f003 0303 	and.w	r3, r3, #3
 800f0b8:	4a53      	ldr	r2, [pc, #332]	; (800f208 <UART_SetConfig+0x9d0>)
 800f0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800f0be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f0c0:	e00f      	b.n	800f0e2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800f0c2:	4b51      	ldr	r3, [pc, #324]	; (800f208 <UART_SetConfig+0x9d0>)
 800f0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0c6:	e00c      	b.n	800f0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f0c8:	4b4c      	ldr	r3, [pc, #304]	; (800f1fc <UART_SetConfig+0x9c4>)
 800f0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0cc:	e009      	b.n	800f0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f0d4:	e005      	b.n	800f0e2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f0da:	2301      	movs	r3, #1
 800f0dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f0e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	f000 80ea 	beq.w	800f2be <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ee:	4a44      	ldr	r2, [pc, #272]	; (800f200 <UART_SetConfig+0x9c8>)
 800f0f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0f4:	461a      	mov	r2, r3
 800f0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0fc:	005a      	lsls	r2, r3, #1
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	685b      	ldr	r3, [r3, #4]
 800f102:	085b      	lsrs	r3, r3, #1
 800f104:	441a      	add	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f10e:	b29b      	uxth	r3, r3
 800f110:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f114:	2b0f      	cmp	r3, #15
 800f116:	d916      	bls.n	800f146 <UART_SetConfig+0x90e>
 800f118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f11e:	d212      	bcs.n	800f146 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f122:	b29b      	uxth	r3, r3
 800f124:	f023 030f 	bic.w	r3, r3, #15
 800f128:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12c:	085b      	lsrs	r3, r3, #1
 800f12e:	b29b      	uxth	r3, r3
 800f130:	f003 0307 	and.w	r3, r3, #7
 800f134:	b29a      	uxth	r2, r3
 800f136:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f138:	4313      	orrs	r3, r2
 800f13a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f142:	60da      	str	r2, [r3, #12]
 800f144:	e0bb      	b.n	800f2be <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f146:	2301      	movs	r3, #1
 800f148:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f14c:	e0b7      	b.n	800f2be <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f14e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f152:	2b20      	cmp	r3, #32
 800f154:	dc4a      	bgt.n	800f1ec <UART_SetConfig+0x9b4>
 800f156:	2b00      	cmp	r3, #0
 800f158:	f2c0 8086 	blt.w	800f268 <UART_SetConfig+0xa30>
 800f15c:	2b20      	cmp	r3, #32
 800f15e:	f200 8083 	bhi.w	800f268 <UART_SetConfig+0xa30>
 800f162:	a201      	add	r2, pc, #4	; (adr r2, 800f168 <UART_SetConfig+0x930>)
 800f164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f168:	0800f1f3 	.word	0x0800f1f3
 800f16c:	0800f20d 	.word	0x0800f20d
 800f170:	0800f269 	.word	0x0800f269
 800f174:	0800f269 	.word	0x0800f269
 800f178:	0800f215 	.word	0x0800f215
 800f17c:	0800f269 	.word	0x0800f269
 800f180:	0800f269 	.word	0x0800f269
 800f184:	0800f269 	.word	0x0800f269
 800f188:	0800f225 	.word	0x0800f225
 800f18c:	0800f269 	.word	0x0800f269
 800f190:	0800f269 	.word	0x0800f269
 800f194:	0800f269 	.word	0x0800f269
 800f198:	0800f269 	.word	0x0800f269
 800f19c:	0800f269 	.word	0x0800f269
 800f1a0:	0800f269 	.word	0x0800f269
 800f1a4:	0800f269 	.word	0x0800f269
 800f1a8:	0800f235 	.word	0x0800f235
 800f1ac:	0800f269 	.word	0x0800f269
 800f1b0:	0800f269 	.word	0x0800f269
 800f1b4:	0800f269 	.word	0x0800f269
 800f1b8:	0800f269 	.word	0x0800f269
 800f1bc:	0800f269 	.word	0x0800f269
 800f1c0:	0800f269 	.word	0x0800f269
 800f1c4:	0800f269 	.word	0x0800f269
 800f1c8:	0800f269 	.word	0x0800f269
 800f1cc:	0800f269 	.word	0x0800f269
 800f1d0:	0800f269 	.word	0x0800f269
 800f1d4:	0800f269 	.word	0x0800f269
 800f1d8:	0800f269 	.word	0x0800f269
 800f1dc:	0800f269 	.word	0x0800f269
 800f1e0:	0800f269 	.word	0x0800f269
 800f1e4:	0800f269 	.word	0x0800f269
 800f1e8:	0800f25b 	.word	0x0800f25b
 800f1ec:	2b40      	cmp	r3, #64	; 0x40
 800f1ee:	d037      	beq.n	800f260 <UART_SetConfig+0xa28>
 800f1f0:	e03a      	b.n	800f268 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1f2:	f7fb ff8f 	bl	800b114 <HAL_RCC_GetPCLK1Freq>
 800f1f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f1f8:	e03c      	b.n	800f274 <UART_SetConfig+0xa3c>
 800f1fa:	bf00      	nop
 800f1fc:	003d0900 	.word	0x003d0900
 800f200:	0801352c 	.word	0x0801352c
 800f204:	58024400 	.word	0x58024400
 800f208:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f20c:	f7fb ff98 	bl	800b140 <HAL_RCC_GetPCLK2Freq>
 800f210:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f212:	e02f      	b.n	800f274 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f214:	f107 0314 	add.w	r3, r7, #20
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fc fefd 	bl	800c018 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f222:	e027      	b.n	800f274 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f224:	f107 0308 	add.w	r3, r7, #8
 800f228:	4618      	mov	r0, r3
 800f22a:	f7fd f849 	bl	800c2c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f232:	e01f      	b.n	800f274 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f234:	4b2c      	ldr	r3, [pc, #176]	; (800f2e8 <UART_SetConfig+0xab0>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f003 0320 	and.w	r3, r3, #32
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d009      	beq.n	800f254 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f240:	4b29      	ldr	r3, [pc, #164]	; (800f2e8 <UART_SetConfig+0xab0>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	08db      	lsrs	r3, r3, #3
 800f246:	f003 0303 	and.w	r3, r3, #3
 800f24a:	4a28      	ldr	r2, [pc, #160]	; (800f2ec <UART_SetConfig+0xab4>)
 800f24c:	fa22 f303 	lsr.w	r3, r2, r3
 800f250:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f252:	e00f      	b.n	800f274 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800f254:	4b25      	ldr	r3, [pc, #148]	; (800f2ec <UART_SetConfig+0xab4>)
 800f256:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f258:	e00c      	b.n	800f274 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f25a:	4b25      	ldr	r3, [pc, #148]	; (800f2f0 <UART_SetConfig+0xab8>)
 800f25c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f25e:	e009      	b.n	800f274 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f260:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f264:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f266:	e005      	b.n	800f274 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800f268:	2300      	movs	r3, #0
 800f26a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f26c:	2301      	movs	r3, #1
 800f26e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f272:	bf00      	nop
    }

    if (pclk != 0U)
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	2b00      	cmp	r3, #0
 800f278:	d021      	beq.n	800f2be <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27e:	4a1d      	ldr	r2, [pc, #116]	; (800f2f4 <UART_SetConfig+0xabc>)
 800f280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f284:	461a      	mov	r2, r3
 800f286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f288:	fbb3 f2f2 	udiv	r2, r3, r2
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	085b      	lsrs	r3, r3, #1
 800f292:	441a      	add	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	fbb2 f3f3 	udiv	r3, r2, r3
 800f29c:	b29b      	uxth	r3, r3
 800f29e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a2:	2b0f      	cmp	r3, #15
 800f2a4:	d908      	bls.n	800f2b8 <UART_SetConfig+0xa80>
 800f2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2ac:	d204      	bcs.n	800f2b8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2b4:	60da      	str	r2, [r3, #12]
 800f2b6:	e002      	b.n	800f2be <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f2da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3738      	adds	r7, #56	; 0x38
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bdb0      	pop	{r4, r5, r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	58024400 	.word	0x58024400
 800f2ec:	03d09000 	.word	0x03d09000
 800f2f0:	003d0900 	.word	0x003d0900
 800f2f4:	0801352c 	.word	0x0801352c

0800f2f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f304:	f003 0301 	and.w	r3, r3, #1
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d00a      	beq.n	800f322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	430a      	orrs	r2, r1
 800f320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f326:	f003 0302 	and.w	r3, r3, #2
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00a      	beq.n	800f344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	685b      	ldr	r3, [r3, #4]
 800f334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	430a      	orrs	r2, r1
 800f342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f348:	f003 0304 	and.w	r3, r3, #4
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00a      	beq.n	800f366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	430a      	orrs	r2, r1
 800f364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f36a:	f003 0308 	and.w	r3, r3, #8
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00a      	beq.n	800f388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	430a      	orrs	r2, r1
 800f386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f38c:	f003 0310 	and.w	r3, r3, #16
 800f390:	2b00      	cmp	r3, #0
 800f392:	d00a      	beq.n	800f3aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	689b      	ldr	r3, [r3, #8]
 800f39a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	430a      	orrs	r2, r1
 800f3a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ae:	f003 0320 	and.w	r3, r3, #32
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00a      	beq.n	800f3cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	430a      	orrs	r2, r1
 800f3ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d01a      	beq.n	800f40e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	430a      	orrs	r2, r1
 800f3ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3f6:	d10a      	bne.n	800f40e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	430a      	orrs	r2, r1
 800f40c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f416:	2b00      	cmp	r3, #0
 800f418:	d00a      	beq.n	800f430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	685b      	ldr	r3, [r3, #4]
 800f420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	430a      	orrs	r2, r1
 800f42e:	605a      	str	r2, [r3, #4]
  }
}
 800f430:	bf00      	nop
 800f432:	370c      	adds	r7, #12
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr

0800f43c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b086      	sub	sp, #24
 800f440:	af02      	add	r7, sp, #8
 800f442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2200      	movs	r2, #0
 800f448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f44c:	f7f5 fafa 	bl	8004a44 <HAL_GetTick>
 800f450:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f003 0308 	and.w	r3, r3, #8
 800f45c:	2b08      	cmp	r3, #8
 800f45e:	d10e      	bne.n	800f47e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 f82f 	bl	800f4d2 <UART_WaitOnFlagUntilTimeout>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f47a:	2303      	movs	r3, #3
 800f47c:	e025      	b.n	800f4ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f003 0304 	and.w	r3, r3, #4
 800f488:	2b04      	cmp	r3, #4
 800f48a:	d10e      	bne.n	800f4aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f48c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f490:	9300      	str	r3, [sp, #0]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2200      	movs	r2, #0
 800f496:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f000 f819 	bl	800f4d2 <UART_WaitOnFlagUntilTimeout>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d001      	beq.n	800f4aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4a6:	2303      	movs	r3, #3
 800f4a8:	e00f      	b.n	800f4ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2220      	movs	r2, #32
 800f4ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2220      	movs	r2, #32
 800f4b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f4c8:	2300      	movs	r3, #0
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}

0800f4d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b084      	sub	sp, #16
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	60f8      	str	r0, [r7, #12]
 800f4da:	60b9      	str	r1, [r7, #8]
 800f4dc:	603b      	str	r3, [r7, #0]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4e2:	e062      	b.n	800f5aa <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4e4:	69bb      	ldr	r3, [r7, #24]
 800f4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ea:	d05e      	beq.n	800f5aa <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f4ec:	f7f5 faaa 	bl	8004a44 <HAL_GetTick>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	1ad3      	subs	r3, r2, r3
 800f4f6:	69ba      	ldr	r2, [r7, #24]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d302      	bcc.n	800f502 <UART_WaitOnFlagUntilTimeout+0x30>
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d11d      	bne.n	800f53e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f510:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	689a      	ldr	r2, [r3, #8]
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f022 0201 	bic.w	r2, r2, #1
 800f520:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	2220      	movs	r2, #32
 800f526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2220      	movs	r2, #32
 800f52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f53a:	2303      	movs	r3, #3
 800f53c:	e045      	b.n	800f5ca <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f003 0304 	and.w	r3, r3, #4
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d02e      	beq.n	800f5aa <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	69db      	ldr	r3, [r3, #28]
 800f552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f55a:	d126      	bne.n	800f5aa <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f564:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800f574:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	689a      	ldr	r2, [r3, #8]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	f022 0201 	bic.w	r2, r2, #1
 800f584:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2220      	movs	r2, #32
 800f58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2220      	movs	r2, #32
 800f592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	2220      	movs	r2, #32
 800f59a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f5a6:	2303      	movs	r3, #3
 800f5a8:	e00f      	b.n	800f5ca <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	69da      	ldr	r2, [r3, #28]
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	4013      	ands	r3, r2
 800f5b4:	68ba      	ldr	r2, [r7, #8]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	bf0c      	ite	eq
 800f5ba:	2301      	moveq	r3, #1
 800f5bc:	2300      	movne	r3, #0
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	461a      	mov	r2, r3
 800f5c2:	79fb      	ldrb	r3, [r7, #7]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d08d      	beq.n	800f4e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
	...

0800f5d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	4613      	mov	r3, r2
 800f5e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	68ba      	ldr	r2, [r7, #8]
 800f5e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	88fa      	ldrh	r2, [r7, #6]
 800f5ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	88fa      	ldrh	r2, [r7, #6]
 800f5f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	689b      	ldr	r3, [r3, #8]
 800f602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f606:	d10e      	bne.n	800f626 <UART_Start_Receive_IT+0x52>
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d105      	bne.n	800f61c <UART_Start_Receive_IT+0x48>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f616:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f61a:	e02d      	b.n	800f678 <UART_Start_Receive_IT+0xa4>
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	22ff      	movs	r2, #255	; 0xff
 800f620:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f624:	e028      	b.n	800f678 <UART_Start_Receive_IT+0xa4>
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	689b      	ldr	r3, [r3, #8]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d10d      	bne.n	800f64a <UART_Start_Receive_IT+0x76>
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	691b      	ldr	r3, [r3, #16]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d104      	bne.n	800f640 <UART_Start_Receive_IT+0x6c>
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	22ff      	movs	r2, #255	; 0xff
 800f63a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f63e:	e01b      	b.n	800f678 <UART_Start_Receive_IT+0xa4>
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	227f      	movs	r2, #127	; 0x7f
 800f644:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f648:	e016      	b.n	800f678 <UART_Start_Receive_IT+0xa4>
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f652:	d10d      	bne.n	800f670 <UART_Start_Receive_IT+0x9c>
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	691b      	ldr	r3, [r3, #16]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d104      	bne.n	800f666 <UART_Start_Receive_IT+0x92>
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	227f      	movs	r2, #127	; 0x7f
 800f660:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f664:	e008      	b.n	800f678 <UART_Start_Receive_IT+0xa4>
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	223f      	movs	r2, #63	; 0x3f
 800f66a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f66e:	e003      	b.n	800f678 <UART_Start_Receive_IT+0xa4>
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2200      	movs	r2, #0
 800f674:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2200      	movs	r2, #0
 800f67c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	2222      	movs	r2, #34	; 0x22
 800f684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	689a      	ldr	r2, [r3, #8]
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f042 0201 	orr.w	r2, r2, #1
 800f696:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f69c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6a0:	d12a      	bne.n	800f6f8 <UART_Start_Receive_IT+0x124>
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f6a8:	88fa      	ldrh	r2, [r7, #6]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d324      	bcc.n	800f6f8 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	689b      	ldr	r3, [r3, #8]
 800f6b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6b6:	d107      	bne.n	800f6c8 <UART_Start_Receive_IT+0xf4>
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	691b      	ldr	r3, [r3, #16]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d103      	bne.n	800f6c8 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	4a1f      	ldr	r2, [pc, #124]	; (800f740 <UART_Start_Receive_IT+0x16c>)
 800f6c4:	671a      	str	r2, [r3, #112]	; 0x70
 800f6c6:	e002      	b.n	800f6ce <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	4a1e      	ldr	r2, [pc, #120]	; (800f744 <UART_Start_Receive_IT+0x170>)
 800f6cc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	681a      	ldr	r2, [r3, #0]
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f6e4:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	689a      	ldr	r2, [r3, #8]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800f6f4:	609a      	str	r2, [r3, #8]
 800f6f6:	e01b      	b.n	800f730 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f700:	d107      	bne.n	800f712 <UART_Start_Receive_IT+0x13e>
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	691b      	ldr	r3, [r3, #16]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d103      	bne.n	800f712 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	4a0e      	ldr	r2, [pc, #56]	; (800f748 <UART_Start_Receive_IT+0x174>)
 800f70e:	671a      	str	r2, [r3, #112]	; 0x70
 800f710:	e002      	b.n	800f718 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	4a0d      	ldr	r2, [pc, #52]	; (800f74c <UART_Start_Receive_IT+0x178>)
 800f716:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2200      	movs	r2, #0
 800f71c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	681a      	ldr	r2, [r3, #0]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f72e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3714      	adds	r7, #20
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	0800fcf1 	.word	0x0800fcf1
 800f744:	0800faed 	.word	0x0800faed
 800f748:	0800fa15 	.word	0x0800fa15
 800f74c:	0800f93d 	.word	0x0800f93d

0800f750 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f766:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	689a      	ldr	r2, [r3, #8]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f776:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2220      	movs	r2, #32
 800f77c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f780:	bf00      	nop
 800f782:	370c      	adds	r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	681a      	ldr	r2, [r3, #0]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f7a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	6899      	ldr	r1, [r3, #8]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681a      	ldr	r2, [r3, #0]
 800f7ae:	4b0f      	ldr	r3, [pc, #60]	; (800f7ec <UART_EndRxTransfer+0x60>)
 800f7b0:	400b      	ands	r3, r1
 800f7b2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d107      	bne.n	800f7cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f022 0210 	bic.w	r2, r2, #16
 800f7ca:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2220      	movs	r2, #32
 800f7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f7e0:	bf00      	nop
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr
 800f7ec:	effffffe 	.word	0xeffffffe

0800f7f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b084      	sub	sp, #16
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7fc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	69db      	ldr	r3, [r3, #28]
 800f802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f806:	d014      	beq.n	800f832 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	2200      	movs	r2, #0
 800f80c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	689a      	ldr	r2, [r3, #8]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f81e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f82e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f830:	e002      	b.n	800f838 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f7fe ffd6 	bl	800e7e4 <HAL_UART_TxCpltCallback>
}
 800f838:	bf00      	nop
 800f83a:	3710      	adds	r7, #16
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b084      	sub	sp, #16
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f84c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f84e:	68f8      	ldr	r0, [r7, #12]
 800f850:	f7fe ffd2 	bl	800e7f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f854:	bf00      	nop
 800f856:	3710      	adds	r7, #16
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b086      	sub	sp, #24
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f868:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f870:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f878:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	689b      	ldr	r3, [r3, #8]
 800f880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f884:	2b80      	cmp	r3, #128	; 0x80
 800f886:	d109      	bne.n	800f89c <UART_DMAError+0x40>
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	2b21      	cmp	r3, #33	; 0x21
 800f88c:	d106      	bne.n	800f89c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	2200      	movs	r2, #0
 800f892:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f896:	6978      	ldr	r0, [r7, #20]
 800f898:	f7ff ff5a 	bl	800f750 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	689b      	ldr	r3, [r3, #8]
 800f8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8a6:	2b40      	cmp	r3, #64	; 0x40
 800f8a8:	d109      	bne.n	800f8be <UART_DMAError+0x62>
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2b22      	cmp	r3, #34	; 0x22
 800f8ae:	d106      	bne.n	800f8be <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f8b8:	6978      	ldr	r0, [r7, #20]
 800f8ba:	f7ff ff67 	bl	800f78c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8c4:	f043 0210 	orr.w	r2, r3, #16
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f8ce:	6978      	ldr	r0, [r7, #20]
 800f8d0:	f7fe ff9c 	bl	800e80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f8d4:	bf00      	nop
 800f8d6:	3718      	adds	r7, #24
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f7fe ff86 	bl	800e80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f900:	bf00      	nop
 800f902:	3710      	adds	r7, #16
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f91e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2220      	movs	r2, #32
 800f924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2200      	movs	r2, #0
 800f92c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f7fe ff58 	bl	800e7e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f934:	bf00      	nop
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f94a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f952:	2b22      	cmp	r3, #34	; 0x22
 800f954:	d152      	bne.n	800f9fc <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f95e:	89bb      	ldrh	r3, [r7, #12]
 800f960:	b2d9      	uxtb	r1, r3
 800f962:	89fb      	ldrh	r3, [r7, #14]
 800f964:	b2da      	uxtb	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f96a:	400a      	ands	r2, r1
 800f96c:	b2d2      	uxtb	r2, r2
 800f96e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f974:	1c5a      	adds	r2, r3, #1
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f980:	b29b      	uxth	r3, r3
 800f982:	3b01      	subs	r3, #1
 800f984:	b29a      	uxth	r2, r3
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f992:	b29b      	uxth	r3, r3
 800f994:	2b00      	cmp	r3, #0
 800f996:	d139      	bne.n	800fa0c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f9a6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	689a      	ldr	r2, [r3, #8]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f022 0201 	bic.w	r2, r2, #1
 800f9b6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2220      	movs	r2, #32
 800f9bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d10f      	bne.n	800f9ee <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f022 0210 	bic.w	r2, r2, #16
 800f9dc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f7fe ff1a 	bl	800e820 <HAL_UARTEx_RxEventCallback>
 800f9ec:	e002      	b.n	800f9f4 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f7f4 f938 	bl	8003c64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f9fa:	e007      	b.n	800fa0c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	699a      	ldr	r2, [r3, #24]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f042 0208 	orr.w	r2, r2, #8
 800fa0a:	619a      	str	r2, [r3, #24]
}
 800fa0c:	bf00      	nop
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b084      	sub	sp, #16
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa22:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa2a:	2b22      	cmp	r3, #34	; 0x22
 800fa2c:	d152      	bne.n	800fad4 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa34:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa3a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800fa3c:	89ba      	ldrh	r2, [r7, #12]
 800fa3e:	89fb      	ldrh	r3, [r7, #14]
 800fa40:	4013      	ands	r3, r2
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa4c:	1c9a      	adds	r2, r3, #2
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	3b01      	subs	r3, #1
 800fa5c:	b29a      	uxth	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d139      	bne.n	800fae4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fa7e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	689a      	ldr	r2, [r3, #8]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f022 0201 	bic.w	r2, r2, #1
 800fa8e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2220      	movs	r2, #32
 800fa94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800faa2:	2b01      	cmp	r3, #1
 800faa4:	d10f      	bne.n	800fac6 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	681a      	ldr	r2, [r3, #0]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f022 0210 	bic.w	r2, r2, #16
 800fab4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fabc:	4619      	mov	r1, r3
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f7fe feae 	bl	800e820 <HAL_UARTEx_RxEventCallback>
 800fac4:	e002      	b.n	800facc <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f7f4 f8cc 	bl	8003c64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2200      	movs	r2, #0
 800fad0:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fad2:	e007      	b.n	800fae4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	699a      	ldr	r2, [r3, #24]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f042 0208 	orr.w	r2, r2, #8
 800fae2:	619a      	str	r2, [r3, #24]
}
 800fae4:	bf00      	nop
 800fae6:	3710      	adds	r7, #16
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b088      	sub	sp, #32
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fafa:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	69db      	ldr	r3, [r3, #28]
 800fb02:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	689b      	ldr	r3, [r3, #8]
 800fb12:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb1a:	2b22      	cmp	r3, #34	; 0x22
 800fb1c:	f040 80d8 	bne.w	800fcd0 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fb26:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fb28:	e0a8      	b.n	800fc7c <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb30:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fb32:	89bb      	ldrh	r3, [r7, #12]
 800fb34:	b2d9      	uxtb	r1, r3
 800fb36:	8b7b      	ldrh	r3, [r7, #26]
 800fb38:	b2da      	uxtb	r2, r3
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb3e:	400a      	ands	r2, r1
 800fb40:	b2d2      	uxtb	r2, r2
 800fb42:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb48:	1c5a      	adds	r2, r3, #1
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	3b01      	subs	r3, #1
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	69db      	ldr	r3, [r3, #28]
 800fb66:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	f003 0307 	and.w	r3, r3, #7
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d04d      	beq.n	800fc0e <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	f003 0301 	and.w	r3, r3, #1
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d010      	beq.n	800fb9e <UART_RxISR_8BIT_FIFOEN+0xb2>
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d00b      	beq.n	800fb9e <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb94:	f043 0201 	orr.w	r2, r3, #1
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	f003 0302 	and.w	r3, r3, #2
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d010      	beq.n	800fbca <UART_RxISR_8BIT_FIFOEN+0xde>
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	f003 0301 	and.w	r3, r3, #1
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d00b      	beq.n	800fbca <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2202      	movs	r2, #2
 800fbb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbc0:	f043 0204 	orr.w	r2, r3, #4
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	f003 0304 	and.w	r3, r3, #4
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d010      	beq.n	800fbf6 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	f003 0301 	and.w	r3, r3, #1
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d00b      	beq.n	800fbf6 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	2204      	movs	r2, #4
 800fbe4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbec:	f043 0202 	orr.w	r2, r3, #2
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d006      	beq.n	800fc0e <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f7fe fe03 	bl	800e80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d130      	bne.n	800fc7c <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fc28:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	6899      	ldr	r1, [r3, #8]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681a      	ldr	r2, [r3, #0]
 800fc34:	4b2c      	ldr	r3, [pc, #176]	; (800fce8 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800fc36:	400b      	ands	r3, r1
 800fc38:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2220      	movs	r2, #32
 800fc3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2200      	movs	r2, #0
 800fc46:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d10f      	bne.n	800fc70 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	f022 0210 	bic.w	r2, r2, #16
 800fc5e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc66:	4619      	mov	r1, r3
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7fe fdd9 	bl	800e820 <HAL_UARTEx_RxEventCallback>
 800fc6e:	e002      	b.n	800fc76 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f7f3 fff7 	bl	8003c64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fc7c:	89fb      	ldrh	r3, [r7, #14]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d005      	beq.n	800fc8e <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800fc82:	69fb      	ldr	r3, [r7, #28]
 800fc84:	f003 0320 	and.w	r3, r3, #32
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f47f af4e 	bne.w	800fb2a <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fc94:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fc96:	897b      	ldrh	r3, [r7, #10]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d021      	beq.n	800fce0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fca2:	897a      	ldrh	r2, [r7, #10]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d21b      	bcs.n	800fce0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	689a      	ldr	r2, [r3, #8]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800fcb6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	4a0c      	ldr	r2, [pc, #48]	; (800fcec <UART_RxISR_8BIT_FIFOEN+0x200>)
 800fcbc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f042 0220 	orr.w	r2, r2, #32
 800fccc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fcce:	e007      	b.n	800fce0 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	699a      	ldr	r2, [r3, #24]
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	f042 0208 	orr.w	r2, r2, #8
 800fcde:	619a      	str	r2, [r3, #24]
}
 800fce0:	bf00      	nop
 800fce2:	3720      	adds	r7, #32
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}
 800fce8:	effffffe 	.word	0xeffffffe
 800fcec:	0800f93d 	.word	0x0800f93d

0800fcf0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b08a      	sub	sp, #40	; 0x28
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcfe:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	69db      	ldr	r3, [r3, #28]
 800fd06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	689b      	ldr	r3, [r3, #8]
 800fd16:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd1e:	2b22      	cmp	r3, #34	; 0x22
 800fd20:	f040 80d8 	bne.w	800fed4 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd2a:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fd2c:	e0a8      	b.n	800fe80 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd34:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd3a:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800fd3c:	8aba      	ldrh	r2, [r7, #20]
 800fd3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd40:	4013      	ands	r3, r2
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd4c:	1c9a      	adds	r2, r3, #2
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	3b01      	subs	r3, #1
 800fd5c:	b29a      	uxth	r2, r3
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	69db      	ldr	r3, [r3, #28]
 800fd6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6e:	f003 0307 	and.w	r3, r3, #7
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d04d      	beq.n	800fe12 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd78:	f003 0301 	and.w	r3, r3, #1
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d010      	beq.n	800fda2 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800fd80:	69fb      	ldr	r3, [r7, #28]
 800fd82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d00b      	beq.n	800fda2 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	2201      	movs	r2, #1
 800fd90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd98:	f043 0201 	orr.w	r2, r3, #1
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda4:	f003 0302 	and.w	r3, r3, #2
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d010      	beq.n	800fdce <UART_RxISR_16BIT_FIFOEN+0xde>
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	f003 0301 	and.w	r3, r3, #1
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d00b      	beq.n	800fdce <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2202      	movs	r2, #2
 800fdbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdc4:	f043 0204 	orr.w	r2, r3, #4
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd0:	f003 0304 	and.w	r3, r3, #4
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d010      	beq.n	800fdfa <UART_RxISR_16BIT_FIFOEN+0x10a>
 800fdd8:	69bb      	ldr	r3, [r7, #24]
 800fdda:	f003 0301 	and.w	r3, r3, #1
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d00b      	beq.n	800fdfa <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	2204      	movs	r2, #4
 800fde8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdf0:	f043 0202 	orr.w	r2, r3, #2
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d006      	beq.n	800fe12 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f7fe fd01 	bl	800e80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d130      	bne.n	800fe80 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fe2c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	6899      	ldr	r1, [r3, #8]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	4b2c      	ldr	r3, [pc, #176]	; (800feec <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800fe3a:	400b      	ands	r3, r1
 800fe3c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2220      	movs	r2, #32
 800fe42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d10f      	bne.n	800fe74 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f022 0210 	bic.w	r2, r2, #16
 800fe62:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7fe fcd7 	bl	800e820 <HAL_UARTEx_RxEventCallback>
 800fe72:	e002      	b.n	800fe7a <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f7f3 fef5 	bl	8003c64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fe80:	8afb      	ldrh	r3, [r7, #22]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d005      	beq.n	800fe92 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800fe86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe88:	f003 0320 	and.w	r3, r3, #32
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f47f af4e 	bne.w	800fd2e <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe98:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fe9a:	89fb      	ldrh	r3, [r7, #14]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d021      	beq.n	800fee4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fea6:	89fa      	ldrh	r2, [r7, #14]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d21b      	bcs.n	800fee4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	689a      	ldr	r2, [r3, #8]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800feba:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	4a0c      	ldr	r2, [pc, #48]	; (800fef0 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800fec0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f042 0220 	orr.w	r2, r2, #32
 800fed0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fed2:	e007      	b.n	800fee4 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	699a      	ldr	r2, [r3, #24]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	f042 0208 	orr.w	r2, r2, #8
 800fee2:	619a      	str	r2, [r3, #24]
}
 800fee4:	bf00      	nop
 800fee6:	3728      	adds	r7, #40	; 0x28
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	effffffe 	.word	0xeffffffe
 800fef0:	0800fa15 	.word	0x0800fa15

0800fef4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fefc:	bf00      	nop
 800fefe:	370c      	adds	r7, #12
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ff10:	bf00      	nop
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr

0800ff1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ff24:	bf00      	nop
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b085      	sub	sp, #20
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d101      	bne.n	800ff46 <HAL_UARTEx_DisableFifoMode+0x16>
 800ff42:	2302      	movs	r3, #2
 800ff44:	e027      	b.n	800ff96 <HAL_UARTEx_DisableFifoMode+0x66>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2201      	movs	r2, #1
 800ff4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2224      	movs	r2, #36	; 0x24
 800ff52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	681a      	ldr	r2, [r3, #0]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f022 0201 	bic.w	r2, r2, #1
 800ff6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ff74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2220      	movs	r2, #32
 800ff88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2200      	movs	r2, #0
 800ff90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ff94:	2300      	movs	r3, #0
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3714      	adds	r7, #20
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa0:	4770      	bx	lr

0800ffa2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ffa2:	b580      	push	{r7, lr}
 800ffa4:	b084      	sub	sp, #16
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
 800ffaa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	d101      	bne.n	800ffba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ffb6:	2302      	movs	r3, #2
 800ffb8:	e02d      	b.n	8010016 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2224      	movs	r2, #36	; 0x24
 800ffc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	681a      	ldr	r2, [r3, #0]
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f022 0201 	bic.w	r2, r2, #1
 800ffe0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	683a      	ldr	r2, [r7, #0]
 800fff2:	430a      	orrs	r2, r1
 800fff4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 f850 	bl	801009c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2220      	movs	r2, #32
 8010008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2200      	movs	r2, #0
 8010010:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010014:	2300      	movs	r3, #0
}
 8010016:	4618      	mov	r0, r3
 8010018:	3710      	adds	r7, #16
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}

0801001e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b084      	sub	sp, #16
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
 8010026:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801002e:	2b01      	cmp	r3, #1
 8010030:	d101      	bne.n	8010036 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010032:	2302      	movs	r3, #2
 8010034:	e02d      	b.n	8010092 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2201      	movs	r2, #1
 801003a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	2224      	movs	r2, #36	; 0x24
 8010042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	681a      	ldr	r2, [r3, #0]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f022 0201 	bic.w	r2, r2, #1
 801005c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	683a      	ldr	r2, [r7, #0]
 801006e:	430a      	orrs	r2, r1
 8010070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 f812 	bl	801009c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	68fa      	ldr	r2, [r7, #12]
 801007e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2220      	movs	r2, #32
 8010084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2200      	movs	r2, #0
 801008c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010090:	2300      	movs	r3, #0
}
 8010092:	4618      	mov	r0, r3
 8010094:	3710      	adds	r7, #16
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
	...

0801009c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801009c:	b480      	push	{r7}
 801009e:	b085      	sub	sp, #20
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d108      	bne.n	80100be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2201      	movs	r2, #1
 80100b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2201      	movs	r2, #1
 80100b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80100bc:	e031      	b.n	8010122 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80100be:	2310      	movs	r3, #16
 80100c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80100c2:	2310      	movs	r3, #16
 80100c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	689b      	ldr	r3, [r3, #8]
 80100cc:	0e5b      	lsrs	r3, r3, #25
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	f003 0307 	and.w	r3, r3, #7
 80100d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	689b      	ldr	r3, [r3, #8]
 80100dc:	0f5b      	lsrs	r3, r3, #29
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	f003 0307 	and.w	r3, r3, #7
 80100e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100e6:	7bbb      	ldrb	r3, [r7, #14]
 80100e8:	7b3a      	ldrb	r2, [r7, #12]
 80100ea:	4911      	ldr	r1, [pc, #68]	; (8010130 <UARTEx_SetNbDataToProcess+0x94>)
 80100ec:	5c8a      	ldrb	r2, [r1, r2]
 80100ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80100f2:	7b3a      	ldrb	r2, [r7, #12]
 80100f4:	490f      	ldr	r1, [pc, #60]	; (8010134 <UARTEx_SetNbDataToProcess+0x98>)
 80100f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80100f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80100fc:	b29a      	uxth	r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010104:	7bfb      	ldrb	r3, [r7, #15]
 8010106:	7b7a      	ldrb	r2, [r7, #13]
 8010108:	4909      	ldr	r1, [pc, #36]	; (8010130 <UARTEx_SetNbDataToProcess+0x94>)
 801010a:	5c8a      	ldrb	r2, [r1, r2]
 801010c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010110:	7b7a      	ldrb	r2, [r7, #13]
 8010112:	4908      	ldr	r1, [pc, #32]	; (8010134 <UARTEx_SetNbDataToProcess+0x98>)
 8010114:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010116:	fb93 f3f2 	sdiv	r3, r3, r2
 801011a:	b29a      	uxth	r2, r3
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010122:	bf00      	nop
 8010124:	3714      	adds	r7, #20
 8010126:	46bd      	mov	sp, r7
 8010128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012c:	4770      	bx	lr
 801012e:	bf00      	nop
 8010130:	08013544 	.word	0x08013544
 8010134:	0801354c 	.word	0x0801354c

08010138 <__errno>:
 8010138:	4b01      	ldr	r3, [pc, #4]	; (8010140 <__errno+0x8>)
 801013a:	6818      	ldr	r0, [r3, #0]
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop
 8010140:	24000028 	.word	0x24000028

08010144 <__libc_init_array>:
 8010144:	b570      	push	{r4, r5, r6, lr}
 8010146:	4d0d      	ldr	r5, [pc, #52]	; (801017c <__libc_init_array+0x38>)
 8010148:	4c0d      	ldr	r4, [pc, #52]	; (8010180 <__libc_init_array+0x3c>)
 801014a:	1b64      	subs	r4, r4, r5
 801014c:	10a4      	asrs	r4, r4, #2
 801014e:	2600      	movs	r6, #0
 8010150:	42a6      	cmp	r6, r4
 8010152:	d109      	bne.n	8010168 <__libc_init_array+0x24>
 8010154:	4d0b      	ldr	r5, [pc, #44]	; (8010184 <__libc_init_array+0x40>)
 8010156:	4c0c      	ldr	r4, [pc, #48]	; (8010188 <__libc_init_array+0x44>)
 8010158:	f003 f994 	bl	8013484 <_init>
 801015c:	1b64      	subs	r4, r4, r5
 801015e:	10a4      	asrs	r4, r4, #2
 8010160:	2600      	movs	r6, #0
 8010162:	42a6      	cmp	r6, r4
 8010164:	d105      	bne.n	8010172 <__libc_init_array+0x2e>
 8010166:	bd70      	pop	{r4, r5, r6, pc}
 8010168:	f855 3b04 	ldr.w	r3, [r5], #4
 801016c:	4798      	blx	r3
 801016e:	3601      	adds	r6, #1
 8010170:	e7ee      	b.n	8010150 <__libc_init_array+0xc>
 8010172:	f855 3b04 	ldr.w	r3, [r5], #4
 8010176:	4798      	blx	r3
 8010178:	3601      	adds	r6, #1
 801017a:	e7f2      	b.n	8010162 <__libc_init_array+0x1e>
 801017c:	080139e8 	.word	0x080139e8
 8010180:	080139e8 	.word	0x080139e8
 8010184:	080139e8 	.word	0x080139e8
 8010188:	080139ec 	.word	0x080139ec

0801018c <memset>:
 801018c:	4402      	add	r2, r0
 801018e:	4603      	mov	r3, r0
 8010190:	4293      	cmp	r3, r2
 8010192:	d100      	bne.n	8010196 <memset+0xa>
 8010194:	4770      	bx	lr
 8010196:	f803 1b01 	strb.w	r1, [r3], #1
 801019a:	e7f9      	b.n	8010190 <memset+0x4>

0801019c <__cvt>:
 801019c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801019e:	ed2d 8b02 	vpush	{d8}
 80101a2:	eeb0 8b40 	vmov.f64	d8, d0
 80101a6:	b085      	sub	sp, #20
 80101a8:	4617      	mov	r7, r2
 80101aa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80101ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80101ae:	ee18 2a90 	vmov	r2, s17
 80101b2:	f025 0520 	bic.w	r5, r5, #32
 80101b6:	2a00      	cmp	r2, #0
 80101b8:	bfb6      	itet	lt
 80101ba:	222d      	movlt	r2, #45	; 0x2d
 80101bc:	2200      	movge	r2, #0
 80101be:	eeb1 8b40 	vneglt.f64	d8, d0
 80101c2:	2d46      	cmp	r5, #70	; 0x46
 80101c4:	460c      	mov	r4, r1
 80101c6:	701a      	strb	r2, [r3, #0]
 80101c8:	d004      	beq.n	80101d4 <__cvt+0x38>
 80101ca:	2d45      	cmp	r5, #69	; 0x45
 80101cc:	d100      	bne.n	80101d0 <__cvt+0x34>
 80101ce:	3401      	adds	r4, #1
 80101d0:	2102      	movs	r1, #2
 80101d2:	e000      	b.n	80101d6 <__cvt+0x3a>
 80101d4:	2103      	movs	r1, #3
 80101d6:	ab03      	add	r3, sp, #12
 80101d8:	9301      	str	r3, [sp, #4]
 80101da:	ab02      	add	r3, sp, #8
 80101dc:	9300      	str	r3, [sp, #0]
 80101de:	4622      	mov	r2, r4
 80101e0:	4633      	mov	r3, r6
 80101e2:	eeb0 0b48 	vmov.f64	d0, d8
 80101e6:	f000 fdf7 	bl	8010dd8 <_dtoa_r>
 80101ea:	2d47      	cmp	r5, #71	; 0x47
 80101ec:	d109      	bne.n	8010202 <__cvt+0x66>
 80101ee:	07fb      	lsls	r3, r7, #31
 80101f0:	d407      	bmi.n	8010202 <__cvt+0x66>
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80101f6:	1a1b      	subs	r3, r3, r0
 80101f8:	6013      	str	r3, [r2, #0]
 80101fa:	b005      	add	sp, #20
 80101fc:	ecbd 8b02 	vpop	{d8}
 8010200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010202:	2d46      	cmp	r5, #70	; 0x46
 8010204:	eb00 0204 	add.w	r2, r0, r4
 8010208:	d10c      	bne.n	8010224 <__cvt+0x88>
 801020a:	7803      	ldrb	r3, [r0, #0]
 801020c:	2b30      	cmp	r3, #48	; 0x30
 801020e:	d107      	bne.n	8010220 <__cvt+0x84>
 8010210:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010218:	bf1c      	itt	ne
 801021a:	f1c4 0401 	rsbne	r4, r4, #1
 801021e:	6034      	strne	r4, [r6, #0]
 8010220:	6833      	ldr	r3, [r6, #0]
 8010222:	441a      	add	r2, r3
 8010224:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801022c:	bf08      	it	eq
 801022e:	9203      	streq	r2, [sp, #12]
 8010230:	2130      	movs	r1, #48	; 0x30
 8010232:	9b03      	ldr	r3, [sp, #12]
 8010234:	4293      	cmp	r3, r2
 8010236:	d2dc      	bcs.n	80101f2 <__cvt+0x56>
 8010238:	1c5c      	adds	r4, r3, #1
 801023a:	9403      	str	r4, [sp, #12]
 801023c:	7019      	strb	r1, [r3, #0]
 801023e:	e7f8      	b.n	8010232 <__cvt+0x96>

08010240 <__exponent>:
 8010240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010242:	4603      	mov	r3, r0
 8010244:	2900      	cmp	r1, #0
 8010246:	bfb8      	it	lt
 8010248:	4249      	neglt	r1, r1
 801024a:	f803 2b02 	strb.w	r2, [r3], #2
 801024e:	bfb4      	ite	lt
 8010250:	222d      	movlt	r2, #45	; 0x2d
 8010252:	222b      	movge	r2, #43	; 0x2b
 8010254:	2909      	cmp	r1, #9
 8010256:	7042      	strb	r2, [r0, #1]
 8010258:	dd2a      	ble.n	80102b0 <__exponent+0x70>
 801025a:	f10d 0407 	add.w	r4, sp, #7
 801025e:	46a4      	mov	ip, r4
 8010260:	270a      	movs	r7, #10
 8010262:	46a6      	mov	lr, r4
 8010264:	460a      	mov	r2, r1
 8010266:	fb91 f6f7 	sdiv	r6, r1, r7
 801026a:	fb07 1516 	mls	r5, r7, r6, r1
 801026e:	3530      	adds	r5, #48	; 0x30
 8010270:	2a63      	cmp	r2, #99	; 0x63
 8010272:	f104 34ff 	add.w	r4, r4, #4294967295
 8010276:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801027a:	4631      	mov	r1, r6
 801027c:	dcf1      	bgt.n	8010262 <__exponent+0x22>
 801027e:	3130      	adds	r1, #48	; 0x30
 8010280:	f1ae 0502 	sub.w	r5, lr, #2
 8010284:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010288:	1c44      	adds	r4, r0, #1
 801028a:	4629      	mov	r1, r5
 801028c:	4561      	cmp	r1, ip
 801028e:	d30a      	bcc.n	80102a6 <__exponent+0x66>
 8010290:	f10d 0209 	add.w	r2, sp, #9
 8010294:	eba2 020e 	sub.w	r2, r2, lr
 8010298:	4565      	cmp	r5, ip
 801029a:	bf88      	it	hi
 801029c:	2200      	movhi	r2, #0
 801029e:	4413      	add	r3, r2
 80102a0:	1a18      	subs	r0, r3, r0
 80102a2:	b003      	add	sp, #12
 80102a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80102aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80102ae:	e7ed      	b.n	801028c <__exponent+0x4c>
 80102b0:	2330      	movs	r3, #48	; 0x30
 80102b2:	3130      	adds	r1, #48	; 0x30
 80102b4:	7083      	strb	r3, [r0, #2]
 80102b6:	70c1      	strb	r1, [r0, #3]
 80102b8:	1d03      	adds	r3, r0, #4
 80102ba:	e7f1      	b.n	80102a0 <__exponent+0x60>
 80102bc:	0000      	movs	r0, r0
	...

080102c0 <_printf_float>:
 80102c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c4:	b08b      	sub	sp, #44	; 0x2c
 80102c6:	460c      	mov	r4, r1
 80102c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80102cc:	4616      	mov	r6, r2
 80102ce:	461f      	mov	r7, r3
 80102d0:	4605      	mov	r5, r0
 80102d2:	f001 fcbb 	bl	8011c4c <_localeconv_r>
 80102d6:	f8d0 b000 	ldr.w	fp, [r0]
 80102da:	4658      	mov	r0, fp
 80102dc:	f7f0 f800 	bl	80002e0 <strlen>
 80102e0:	2300      	movs	r3, #0
 80102e2:	9308      	str	r3, [sp, #32]
 80102e4:	f8d8 3000 	ldr.w	r3, [r8]
 80102e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80102ec:	6822      	ldr	r2, [r4, #0]
 80102ee:	3307      	adds	r3, #7
 80102f0:	f023 0307 	bic.w	r3, r3, #7
 80102f4:	f103 0108 	add.w	r1, r3, #8
 80102f8:	f8c8 1000 	str.w	r1, [r8]
 80102fc:	4682      	mov	sl, r0
 80102fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010302:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010306:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010568 <_printf_float+0x2a8>
 801030a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801030e:	eeb0 6bc0 	vabs.f64	d6, d0
 8010312:	eeb4 6b47 	vcmp.f64	d6, d7
 8010316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801031a:	dd24      	ble.n	8010366 <_printf_float+0xa6>
 801031c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010324:	d502      	bpl.n	801032c <_printf_float+0x6c>
 8010326:	232d      	movs	r3, #45	; 0x2d
 8010328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801032c:	4b90      	ldr	r3, [pc, #576]	; (8010570 <_printf_float+0x2b0>)
 801032e:	4891      	ldr	r0, [pc, #580]	; (8010574 <_printf_float+0x2b4>)
 8010330:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010334:	bf94      	ite	ls
 8010336:	4698      	movls	r8, r3
 8010338:	4680      	movhi	r8, r0
 801033a:	2303      	movs	r3, #3
 801033c:	6123      	str	r3, [r4, #16]
 801033e:	f022 0204 	bic.w	r2, r2, #4
 8010342:	2300      	movs	r3, #0
 8010344:	6022      	str	r2, [r4, #0]
 8010346:	9304      	str	r3, [sp, #16]
 8010348:	9700      	str	r7, [sp, #0]
 801034a:	4633      	mov	r3, r6
 801034c:	aa09      	add	r2, sp, #36	; 0x24
 801034e:	4621      	mov	r1, r4
 8010350:	4628      	mov	r0, r5
 8010352:	f000 f9d3 	bl	80106fc <_printf_common>
 8010356:	3001      	adds	r0, #1
 8010358:	f040 808a 	bne.w	8010470 <_printf_float+0x1b0>
 801035c:	f04f 30ff 	mov.w	r0, #4294967295
 8010360:	b00b      	add	sp, #44	; 0x2c
 8010362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010366:	eeb4 0b40 	vcmp.f64	d0, d0
 801036a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036e:	d709      	bvc.n	8010384 <_printf_float+0xc4>
 8010370:	ee10 3a90 	vmov	r3, s1
 8010374:	2b00      	cmp	r3, #0
 8010376:	bfbc      	itt	lt
 8010378:	232d      	movlt	r3, #45	; 0x2d
 801037a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801037e:	487e      	ldr	r0, [pc, #504]	; (8010578 <_printf_float+0x2b8>)
 8010380:	4b7e      	ldr	r3, [pc, #504]	; (801057c <_printf_float+0x2bc>)
 8010382:	e7d5      	b.n	8010330 <_printf_float+0x70>
 8010384:	6863      	ldr	r3, [r4, #4]
 8010386:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801038a:	9104      	str	r1, [sp, #16]
 801038c:	1c59      	adds	r1, r3, #1
 801038e:	d13c      	bne.n	801040a <_printf_float+0x14a>
 8010390:	2306      	movs	r3, #6
 8010392:	6063      	str	r3, [r4, #4]
 8010394:	2300      	movs	r3, #0
 8010396:	9303      	str	r3, [sp, #12]
 8010398:	ab08      	add	r3, sp, #32
 801039a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801039e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80103a2:	ab07      	add	r3, sp, #28
 80103a4:	6861      	ldr	r1, [r4, #4]
 80103a6:	9300      	str	r3, [sp, #0]
 80103a8:	6022      	str	r2, [r4, #0]
 80103aa:	f10d 031b 	add.w	r3, sp, #27
 80103ae:	4628      	mov	r0, r5
 80103b0:	f7ff fef4 	bl	801019c <__cvt>
 80103b4:	9b04      	ldr	r3, [sp, #16]
 80103b6:	9907      	ldr	r1, [sp, #28]
 80103b8:	2b47      	cmp	r3, #71	; 0x47
 80103ba:	4680      	mov	r8, r0
 80103bc:	d108      	bne.n	80103d0 <_printf_float+0x110>
 80103be:	1cc8      	adds	r0, r1, #3
 80103c0:	db02      	blt.n	80103c8 <_printf_float+0x108>
 80103c2:	6863      	ldr	r3, [r4, #4]
 80103c4:	4299      	cmp	r1, r3
 80103c6:	dd41      	ble.n	801044c <_printf_float+0x18c>
 80103c8:	f1a9 0902 	sub.w	r9, r9, #2
 80103cc:	fa5f f989 	uxtb.w	r9, r9
 80103d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80103d4:	d820      	bhi.n	8010418 <_printf_float+0x158>
 80103d6:	3901      	subs	r1, #1
 80103d8:	464a      	mov	r2, r9
 80103da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80103de:	9107      	str	r1, [sp, #28]
 80103e0:	f7ff ff2e 	bl	8010240 <__exponent>
 80103e4:	9a08      	ldr	r2, [sp, #32]
 80103e6:	9004      	str	r0, [sp, #16]
 80103e8:	1813      	adds	r3, r2, r0
 80103ea:	2a01      	cmp	r2, #1
 80103ec:	6123      	str	r3, [r4, #16]
 80103ee:	dc02      	bgt.n	80103f6 <_printf_float+0x136>
 80103f0:	6822      	ldr	r2, [r4, #0]
 80103f2:	07d2      	lsls	r2, r2, #31
 80103f4:	d501      	bpl.n	80103fa <_printf_float+0x13a>
 80103f6:	3301      	adds	r3, #1
 80103f8:	6123      	str	r3, [r4, #16]
 80103fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d0a2      	beq.n	8010348 <_printf_float+0x88>
 8010402:	232d      	movs	r3, #45	; 0x2d
 8010404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010408:	e79e      	b.n	8010348 <_printf_float+0x88>
 801040a:	9904      	ldr	r1, [sp, #16]
 801040c:	2947      	cmp	r1, #71	; 0x47
 801040e:	d1c1      	bne.n	8010394 <_printf_float+0xd4>
 8010410:	2b00      	cmp	r3, #0
 8010412:	d1bf      	bne.n	8010394 <_printf_float+0xd4>
 8010414:	2301      	movs	r3, #1
 8010416:	e7bc      	b.n	8010392 <_printf_float+0xd2>
 8010418:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801041c:	d118      	bne.n	8010450 <_printf_float+0x190>
 801041e:	2900      	cmp	r1, #0
 8010420:	6863      	ldr	r3, [r4, #4]
 8010422:	dd0b      	ble.n	801043c <_printf_float+0x17c>
 8010424:	6121      	str	r1, [r4, #16]
 8010426:	b913      	cbnz	r3, 801042e <_printf_float+0x16e>
 8010428:	6822      	ldr	r2, [r4, #0]
 801042a:	07d0      	lsls	r0, r2, #31
 801042c:	d502      	bpl.n	8010434 <_printf_float+0x174>
 801042e:	3301      	adds	r3, #1
 8010430:	440b      	add	r3, r1
 8010432:	6123      	str	r3, [r4, #16]
 8010434:	2300      	movs	r3, #0
 8010436:	65a1      	str	r1, [r4, #88]	; 0x58
 8010438:	9304      	str	r3, [sp, #16]
 801043a:	e7de      	b.n	80103fa <_printf_float+0x13a>
 801043c:	b913      	cbnz	r3, 8010444 <_printf_float+0x184>
 801043e:	6822      	ldr	r2, [r4, #0]
 8010440:	07d2      	lsls	r2, r2, #31
 8010442:	d501      	bpl.n	8010448 <_printf_float+0x188>
 8010444:	3302      	adds	r3, #2
 8010446:	e7f4      	b.n	8010432 <_printf_float+0x172>
 8010448:	2301      	movs	r3, #1
 801044a:	e7f2      	b.n	8010432 <_printf_float+0x172>
 801044c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010450:	9b08      	ldr	r3, [sp, #32]
 8010452:	4299      	cmp	r1, r3
 8010454:	db05      	blt.n	8010462 <_printf_float+0x1a2>
 8010456:	6823      	ldr	r3, [r4, #0]
 8010458:	6121      	str	r1, [r4, #16]
 801045a:	07d8      	lsls	r0, r3, #31
 801045c:	d5ea      	bpl.n	8010434 <_printf_float+0x174>
 801045e:	1c4b      	adds	r3, r1, #1
 8010460:	e7e7      	b.n	8010432 <_printf_float+0x172>
 8010462:	2900      	cmp	r1, #0
 8010464:	bfd4      	ite	le
 8010466:	f1c1 0202 	rsble	r2, r1, #2
 801046a:	2201      	movgt	r2, #1
 801046c:	4413      	add	r3, r2
 801046e:	e7e0      	b.n	8010432 <_printf_float+0x172>
 8010470:	6823      	ldr	r3, [r4, #0]
 8010472:	055a      	lsls	r2, r3, #21
 8010474:	d407      	bmi.n	8010486 <_printf_float+0x1c6>
 8010476:	6923      	ldr	r3, [r4, #16]
 8010478:	4642      	mov	r2, r8
 801047a:	4631      	mov	r1, r6
 801047c:	4628      	mov	r0, r5
 801047e:	47b8      	blx	r7
 8010480:	3001      	adds	r0, #1
 8010482:	d12a      	bne.n	80104da <_printf_float+0x21a>
 8010484:	e76a      	b.n	801035c <_printf_float+0x9c>
 8010486:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801048a:	f240 80e2 	bls.w	8010652 <_printf_float+0x392>
 801048e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010492:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801049a:	d133      	bne.n	8010504 <_printf_float+0x244>
 801049c:	4a38      	ldr	r2, [pc, #224]	; (8010580 <_printf_float+0x2c0>)
 801049e:	2301      	movs	r3, #1
 80104a0:	4631      	mov	r1, r6
 80104a2:	4628      	mov	r0, r5
 80104a4:	47b8      	blx	r7
 80104a6:	3001      	adds	r0, #1
 80104a8:	f43f af58 	beq.w	801035c <_printf_float+0x9c>
 80104ac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	db02      	blt.n	80104ba <_printf_float+0x1fa>
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	07d8      	lsls	r0, r3, #31
 80104b8:	d50f      	bpl.n	80104da <_printf_float+0x21a>
 80104ba:	4653      	mov	r3, sl
 80104bc:	465a      	mov	r2, fp
 80104be:	4631      	mov	r1, r6
 80104c0:	4628      	mov	r0, r5
 80104c2:	47b8      	blx	r7
 80104c4:	3001      	adds	r0, #1
 80104c6:	f43f af49 	beq.w	801035c <_printf_float+0x9c>
 80104ca:	f04f 0800 	mov.w	r8, #0
 80104ce:	f104 091a 	add.w	r9, r4, #26
 80104d2:	9b08      	ldr	r3, [sp, #32]
 80104d4:	3b01      	subs	r3, #1
 80104d6:	4543      	cmp	r3, r8
 80104d8:	dc09      	bgt.n	80104ee <_printf_float+0x22e>
 80104da:	6823      	ldr	r3, [r4, #0]
 80104dc:	079b      	lsls	r3, r3, #30
 80104de:	f100 8108 	bmi.w	80106f2 <_printf_float+0x432>
 80104e2:	68e0      	ldr	r0, [r4, #12]
 80104e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104e6:	4298      	cmp	r0, r3
 80104e8:	bfb8      	it	lt
 80104ea:	4618      	movlt	r0, r3
 80104ec:	e738      	b.n	8010360 <_printf_float+0xa0>
 80104ee:	2301      	movs	r3, #1
 80104f0:	464a      	mov	r2, r9
 80104f2:	4631      	mov	r1, r6
 80104f4:	4628      	mov	r0, r5
 80104f6:	47b8      	blx	r7
 80104f8:	3001      	adds	r0, #1
 80104fa:	f43f af2f 	beq.w	801035c <_printf_float+0x9c>
 80104fe:	f108 0801 	add.w	r8, r8, #1
 8010502:	e7e6      	b.n	80104d2 <_printf_float+0x212>
 8010504:	9b07      	ldr	r3, [sp, #28]
 8010506:	2b00      	cmp	r3, #0
 8010508:	dc3c      	bgt.n	8010584 <_printf_float+0x2c4>
 801050a:	4a1d      	ldr	r2, [pc, #116]	; (8010580 <_printf_float+0x2c0>)
 801050c:	2301      	movs	r3, #1
 801050e:	4631      	mov	r1, r6
 8010510:	4628      	mov	r0, r5
 8010512:	47b8      	blx	r7
 8010514:	3001      	adds	r0, #1
 8010516:	f43f af21 	beq.w	801035c <_printf_float+0x9c>
 801051a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801051e:	4313      	orrs	r3, r2
 8010520:	d102      	bne.n	8010528 <_printf_float+0x268>
 8010522:	6823      	ldr	r3, [r4, #0]
 8010524:	07d9      	lsls	r1, r3, #31
 8010526:	d5d8      	bpl.n	80104da <_printf_float+0x21a>
 8010528:	4653      	mov	r3, sl
 801052a:	465a      	mov	r2, fp
 801052c:	4631      	mov	r1, r6
 801052e:	4628      	mov	r0, r5
 8010530:	47b8      	blx	r7
 8010532:	3001      	adds	r0, #1
 8010534:	f43f af12 	beq.w	801035c <_printf_float+0x9c>
 8010538:	f04f 0900 	mov.w	r9, #0
 801053c:	f104 0a1a 	add.w	sl, r4, #26
 8010540:	9b07      	ldr	r3, [sp, #28]
 8010542:	425b      	negs	r3, r3
 8010544:	454b      	cmp	r3, r9
 8010546:	dc01      	bgt.n	801054c <_printf_float+0x28c>
 8010548:	9b08      	ldr	r3, [sp, #32]
 801054a:	e795      	b.n	8010478 <_printf_float+0x1b8>
 801054c:	2301      	movs	r3, #1
 801054e:	4652      	mov	r2, sl
 8010550:	4631      	mov	r1, r6
 8010552:	4628      	mov	r0, r5
 8010554:	47b8      	blx	r7
 8010556:	3001      	adds	r0, #1
 8010558:	f43f af00 	beq.w	801035c <_printf_float+0x9c>
 801055c:	f109 0901 	add.w	r9, r9, #1
 8010560:	e7ee      	b.n	8010540 <_printf_float+0x280>
 8010562:	bf00      	nop
 8010564:	f3af 8000 	nop.w
 8010568:	ffffffff 	.word	0xffffffff
 801056c:	7fefffff 	.word	0x7fefffff
 8010570:	08013558 	.word	0x08013558
 8010574:	0801355c 	.word	0x0801355c
 8010578:	08013564 	.word	0x08013564
 801057c:	08013560 	.word	0x08013560
 8010580:	08013568 	.word	0x08013568
 8010584:	9a08      	ldr	r2, [sp, #32]
 8010586:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010588:	429a      	cmp	r2, r3
 801058a:	bfa8      	it	ge
 801058c:	461a      	movge	r2, r3
 801058e:	2a00      	cmp	r2, #0
 8010590:	4691      	mov	r9, r2
 8010592:	dc38      	bgt.n	8010606 <_printf_float+0x346>
 8010594:	2300      	movs	r3, #0
 8010596:	9305      	str	r3, [sp, #20]
 8010598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801059c:	f104 021a 	add.w	r2, r4, #26
 80105a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80105a2:	9905      	ldr	r1, [sp, #20]
 80105a4:	9304      	str	r3, [sp, #16]
 80105a6:	eba3 0309 	sub.w	r3, r3, r9
 80105aa:	428b      	cmp	r3, r1
 80105ac:	dc33      	bgt.n	8010616 <_printf_float+0x356>
 80105ae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	db3c      	blt.n	8010630 <_printf_float+0x370>
 80105b6:	6823      	ldr	r3, [r4, #0]
 80105b8:	07da      	lsls	r2, r3, #31
 80105ba:	d439      	bmi.n	8010630 <_printf_float+0x370>
 80105bc:	9a08      	ldr	r2, [sp, #32]
 80105be:	9b04      	ldr	r3, [sp, #16]
 80105c0:	9907      	ldr	r1, [sp, #28]
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	eba2 0901 	sub.w	r9, r2, r1
 80105c8:	4599      	cmp	r9, r3
 80105ca:	bfa8      	it	ge
 80105cc:	4699      	movge	r9, r3
 80105ce:	f1b9 0f00 	cmp.w	r9, #0
 80105d2:	dc35      	bgt.n	8010640 <_printf_float+0x380>
 80105d4:	f04f 0800 	mov.w	r8, #0
 80105d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80105dc:	f104 0a1a 	add.w	sl, r4, #26
 80105e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80105e4:	1a9b      	subs	r3, r3, r2
 80105e6:	eba3 0309 	sub.w	r3, r3, r9
 80105ea:	4543      	cmp	r3, r8
 80105ec:	f77f af75 	ble.w	80104da <_printf_float+0x21a>
 80105f0:	2301      	movs	r3, #1
 80105f2:	4652      	mov	r2, sl
 80105f4:	4631      	mov	r1, r6
 80105f6:	4628      	mov	r0, r5
 80105f8:	47b8      	blx	r7
 80105fa:	3001      	adds	r0, #1
 80105fc:	f43f aeae 	beq.w	801035c <_printf_float+0x9c>
 8010600:	f108 0801 	add.w	r8, r8, #1
 8010604:	e7ec      	b.n	80105e0 <_printf_float+0x320>
 8010606:	4613      	mov	r3, r2
 8010608:	4631      	mov	r1, r6
 801060a:	4642      	mov	r2, r8
 801060c:	4628      	mov	r0, r5
 801060e:	47b8      	blx	r7
 8010610:	3001      	adds	r0, #1
 8010612:	d1bf      	bne.n	8010594 <_printf_float+0x2d4>
 8010614:	e6a2      	b.n	801035c <_printf_float+0x9c>
 8010616:	2301      	movs	r3, #1
 8010618:	4631      	mov	r1, r6
 801061a:	4628      	mov	r0, r5
 801061c:	9204      	str	r2, [sp, #16]
 801061e:	47b8      	blx	r7
 8010620:	3001      	adds	r0, #1
 8010622:	f43f ae9b 	beq.w	801035c <_printf_float+0x9c>
 8010626:	9b05      	ldr	r3, [sp, #20]
 8010628:	9a04      	ldr	r2, [sp, #16]
 801062a:	3301      	adds	r3, #1
 801062c:	9305      	str	r3, [sp, #20]
 801062e:	e7b7      	b.n	80105a0 <_printf_float+0x2e0>
 8010630:	4653      	mov	r3, sl
 8010632:	465a      	mov	r2, fp
 8010634:	4631      	mov	r1, r6
 8010636:	4628      	mov	r0, r5
 8010638:	47b8      	blx	r7
 801063a:	3001      	adds	r0, #1
 801063c:	d1be      	bne.n	80105bc <_printf_float+0x2fc>
 801063e:	e68d      	b.n	801035c <_printf_float+0x9c>
 8010640:	9a04      	ldr	r2, [sp, #16]
 8010642:	464b      	mov	r3, r9
 8010644:	4442      	add	r2, r8
 8010646:	4631      	mov	r1, r6
 8010648:	4628      	mov	r0, r5
 801064a:	47b8      	blx	r7
 801064c:	3001      	adds	r0, #1
 801064e:	d1c1      	bne.n	80105d4 <_printf_float+0x314>
 8010650:	e684      	b.n	801035c <_printf_float+0x9c>
 8010652:	9a08      	ldr	r2, [sp, #32]
 8010654:	2a01      	cmp	r2, #1
 8010656:	dc01      	bgt.n	801065c <_printf_float+0x39c>
 8010658:	07db      	lsls	r3, r3, #31
 801065a:	d537      	bpl.n	80106cc <_printf_float+0x40c>
 801065c:	2301      	movs	r3, #1
 801065e:	4642      	mov	r2, r8
 8010660:	4631      	mov	r1, r6
 8010662:	4628      	mov	r0, r5
 8010664:	47b8      	blx	r7
 8010666:	3001      	adds	r0, #1
 8010668:	f43f ae78 	beq.w	801035c <_printf_float+0x9c>
 801066c:	4653      	mov	r3, sl
 801066e:	465a      	mov	r2, fp
 8010670:	4631      	mov	r1, r6
 8010672:	4628      	mov	r0, r5
 8010674:	47b8      	blx	r7
 8010676:	3001      	adds	r0, #1
 8010678:	f43f ae70 	beq.w	801035c <_printf_float+0x9c>
 801067c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010680:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010688:	d01b      	beq.n	80106c2 <_printf_float+0x402>
 801068a:	9b08      	ldr	r3, [sp, #32]
 801068c:	f108 0201 	add.w	r2, r8, #1
 8010690:	3b01      	subs	r3, #1
 8010692:	4631      	mov	r1, r6
 8010694:	4628      	mov	r0, r5
 8010696:	47b8      	blx	r7
 8010698:	3001      	adds	r0, #1
 801069a:	d10e      	bne.n	80106ba <_printf_float+0x3fa>
 801069c:	e65e      	b.n	801035c <_printf_float+0x9c>
 801069e:	2301      	movs	r3, #1
 80106a0:	464a      	mov	r2, r9
 80106a2:	4631      	mov	r1, r6
 80106a4:	4628      	mov	r0, r5
 80106a6:	47b8      	blx	r7
 80106a8:	3001      	adds	r0, #1
 80106aa:	f43f ae57 	beq.w	801035c <_printf_float+0x9c>
 80106ae:	f108 0801 	add.w	r8, r8, #1
 80106b2:	9b08      	ldr	r3, [sp, #32]
 80106b4:	3b01      	subs	r3, #1
 80106b6:	4543      	cmp	r3, r8
 80106b8:	dcf1      	bgt.n	801069e <_printf_float+0x3de>
 80106ba:	9b04      	ldr	r3, [sp, #16]
 80106bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80106c0:	e6db      	b.n	801047a <_printf_float+0x1ba>
 80106c2:	f04f 0800 	mov.w	r8, #0
 80106c6:	f104 091a 	add.w	r9, r4, #26
 80106ca:	e7f2      	b.n	80106b2 <_printf_float+0x3f2>
 80106cc:	2301      	movs	r3, #1
 80106ce:	4642      	mov	r2, r8
 80106d0:	e7df      	b.n	8010692 <_printf_float+0x3d2>
 80106d2:	2301      	movs	r3, #1
 80106d4:	464a      	mov	r2, r9
 80106d6:	4631      	mov	r1, r6
 80106d8:	4628      	mov	r0, r5
 80106da:	47b8      	blx	r7
 80106dc:	3001      	adds	r0, #1
 80106de:	f43f ae3d 	beq.w	801035c <_printf_float+0x9c>
 80106e2:	f108 0801 	add.w	r8, r8, #1
 80106e6:	68e3      	ldr	r3, [r4, #12]
 80106e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106ea:	1a5b      	subs	r3, r3, r1
 80106ec:	4543      	cmp	r3, r8
 80106ee:	dcf0      	bgt.n	80106d2 <_printf_float+0x412>
 80106f0:	e6f7      	b.n	80104e2 <_printf_float+0x222>
 80106f2:	f04f 0800 	mov.w	r8, #0
 80106f6:	f104 0919 	add.w	r9, r4, #25
 80106fa:	e7f4      	b.n	80106e6 <_printf_float+0x426>

080106fc <_printf_common>:
 80106fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010700:	4616      	mov	r6, r2
 8010702:	4699      	mov	r9, r3
 8010704:	688a      	ldr	r2, [r1, #8]
 8010706:	690b      	ldr	r3, [r1, #16]
 8010708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801070c:	4293      	cmp	r3, r2
 801070e:	bfb8      	it	lt
 8010710:	4613      	movlt	r3, r2
 8010712:	6033      	str	r3, [r6, #0]
 8010714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010718:	4607      	mov	r7, r0
 801071a:	460c      	mov	r4, r1
 801071c:	b10a      	cbz	r2, 8010722 <_printf_common+0x26>
 801071e:	3301      	adds	r3, #1
 8010720:	6033      	str	r3, [r6, #0]
 8010722:	6823      	ldr	r3, [r4, #0]
 8010724:	0699      	lsls	r1, r3, #26
 8010726:	bf42      	ittt	mi
 8010728:	6833      	ldrmi	r3, [r6, #0]
 801072a:	3302      	addmi	r3, #2
 801072c:	6033      	strmi	r3, [r6, #0]
 801072e:	6825      	ldr	r5, [r4, #0]
 8010730:	f015 0506 	ands.w	r5, r5, #6
 8010734:	d106      	bne.n	8010744 <_printf_common+0x48>
 8010736:	f104 0a19 	add.w	sl, r4, #25
 801073a:	68e3      	ldr	r3, [r4, #12]
 801073c:	6832      	ldr	r2, [r6, #0]
 801073e:	1a9b      	subs	r3, r3, r2
 8010740:	42ab      	cmp	r3, r5
 8010742:	dc26      	bgt.n	8010792 <_printf_common+0x96>
 8010744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010748:	1e13      	subs	r3, r2, #0
 801074a:	6822      	ldr	r2, [r4, #0]
 801074c:	bf18      	it	ne
 801074e:	2301      	movne	r3, #1
 8010750:	0692      	lsls	r2, r2, #26
 8010752:	d42b      	bmi.n	80107ac <_printf_common+0xb0>
 8010754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010758:	4649      	mov	r1, r9
 801075a:	4638      	mov	r0, r7
 801075c:	47c0      	blx	r8
 801075e:	3001      	adds	r0, #1
 8010760:	d01e      	beq.n	80107a0 <_printf_common+0xa4>
 8010762:	6823      	ldr	r3, [r4, #0]
 8010764:	68e5      	ldr	r5, [r4, #12]
 8010766:	6832      	ldr	r2, [r6, #0]
 8010768:	f003 0306 	and.w	r3, r3, #6
 801076c:	2b04      	cmp	r3, #4
 801076e:	bf08      	it	eq
 8010770:	1aad      	subeq	r5, r5, r2
 8010772:	68a3      	ldr	r3, [r4, #8]
 8010774:	6922      	ldr	r2, [r4, #16]
 8010776:	bf0c      	ite	eq
 8010778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801077c:	2500      	movne	r5, #0
 801077e:	4293      	cmp	r3, r2
 8010780:	bfc4      	itt	gt
 8010782:	1a9b      	subgt	r3, r3, r2
 8010784:	18ed      	addgt	r5, r5, r3
 8010786:	2600      	movs	r6, #0
 8010788:	341a      	adds	r4, #26
 801078a:	42b5      	cmp	r5, r6
 801078c:	d11a      	bne.n	80107c4 <_printf_common+0xc8>
 801078e:	2000      	movs	r0, #0
 8010790:	e008      	b.n	80107a4 <_printf_common+0xa8>
 8010792:	2301      	movs	r3, #1
 8010794:	4652      	mov	r2, sl
 8010796:	4649      	mov	r1, r9
 8010798:	4638      	mov	r0, r7
 801079a:	47c0      	blx	r8
 801079c:	3001      	adds	r0, #1
 801079e:	d103      	bne.n	80107a8 <_printf_common+0xac>
 80107a0:	f04f 30ff 	mov.w	r0, #4294967295
 80107a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107a8:	3501      	adds	r5, #1
 80107aa:	e7c6      	b.n	801073a <_printf_common+0x3e>
 80107ac:	18e1      	adds	r1, r4, r3
 80107ae:	1c5a      	adds	r2, r3, #1
 80107b0:	2030      	movs	r0, #48	; 0x30
 80107b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80107b6:	4422      	add	r2, r4
 80107b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80107bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80107c0:	3302      	adds	r3, #2
 80107c2:	e7c7      	b.n	8010754 <_printf_common+0x58>
 80107c4:	2301      	movs	r3, #1
 80107c6:	4622      	mov	r2, r4
 80107c8:	4649      	mov	r1, r9
 80107ca:	4638      	mov	r0, r7
 80107cc:	47c0      	blx	r8
 80107ce:	3001      	adds	r0, #1
 80107d0:	d0e6      	beq.n	80107a0 <_printf_common+0xa4>
 80107d2:	3601      	adds	r6, #1
 80107d4:	e7d9      	b.n	801078a <_printf_common+0x8e>
	...

080107d8 <_printf_i>:
 80107d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80107dc:	460c      	mov	r4, r1
 80107de:	4691      	mov	r9, r2
 80107e0:	7e27      	ldrb	r7, [r4, #24]
 80107e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80107e4:	2f78      	cmp	r7, #120	; 0x78
 80107e6:	4680      	mov	r8, r0
 80107e8:	469a      	mov	sl, r3
 80107ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80107ee:	d807      	bhi.n	8010800 <_printf_i+0x28>
 80107f0:	2f62      	cmp	r7, #98	; 0x62
 80107f2:	d80a      	bhi.n	801080a <_printf_i+0x32>
 80107f4:	2f00      	cmp	r7, #0
 80107f6:	f000 80d8 	beq.w	80109aa <_printf_i+0x1d2>
 80107fa:	2f58      	cmp	r7, #88	; 0x58
 80107fc:	f000 80a3 	beq.w	8010946 <_printf_i+0x16e>
 8010800:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010808:	e03a      	b.n	8010880 <_printf_i+0xa8>
 801080a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801080e:	2b15      	cmp	r3, #21
 8010810:	d8f6      	bhi.n	8010800 <_printf_i+0x28>
 8010812:	a001      	add	r0, pc, #4	; (adr r0, 8010818 <_printf_i+0x40>)
 8010814:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010818:	08010871 	.word	0x08010871
 801081c:	08010885 	.word	0x08010885
 8010820:	08010801 	.word	0x08010801
 8010824:	08010801 	.word	0x08010801
 8010828:	08010801 	.word	0x08010801
 801082c:	08010801 	.word	0x08010801
 8010830:	08010885 	.word	0x08010885
 8010834:	08010801 	.word	0x08010801
 8010838:	08010801 	.word	0x08010801
 801083c:	08010801 	.word	0x08010801
 8010840:	08010801 	.word	0x08010801
 8010844:	08010991 	.word	0x08010991
 8010848:	080108b5 	.word	0x080108b5
 801084c:	08010973 	.word	0x08010973
 8010850:	08010801 	.word	0x08010801
 8010854:	08010801 	.word	0x08010801
 8010858:	080109b3 	.word	0x080109b3
 801085c:	08010801 	.word	0x08010801
 8010860:	080108b5 	.word	0x080108b5
 8010864:	08010801 	.word	0x08010801
 8010868:	08010801 	.word	0x08010801
 801086c:	0801097b 	.word	0x0801097b
 8010870:	680b      	ldr	r3, [r1, #0]
 8010872:	1d1a      	adds	r2, r3, #4
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	600a      	str	r2, [r1, #0]
 8010878:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801087c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010880:	2301      	movs	r3, #1
 8010882:	e0a3      	b.n	80109cc <_printf_i+0x1f4>
 8010884:	6825      	ldr	r5, [r4, #0]
 8010886:	6808      	ldr	r0, [r1, #0]
 8010888:	062e      	lsls	r6, r5, #24
 801088a:	f100 0304 	add.w	r3, r0, #4
 801088e:	d50a      	bpl.n	80108a6 <_printf_i+0xce>
 8010890:	6805      	ldr	r5, [r0, #0]
 8010892:	600b      	str	r3, [r1, #0]
 8010894:	2d00      	cmp	r5, #0
 8010896:	da03      	bge.n	80108a0 <_printf_i+0xc8>
 8010898:	232d      	movs	r3, #45	; 0x2d
 801089a:	426d      	negs	r5, r5
 801089c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108a0:	485e      	ldr	r0, [pc, #376]	; (8010a1c <_printf_i+0x244>)
 80108a2:	230a      	movs	r3, #10
 80108a4:	e019      	b.n	80108da <_printf_i+0x102>
 80108a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80108aa:	6805      	ldr	r5, [r0, #0]
 80108ac:	600b      	str	r3, [r1, #0]
 80108ae:	bf18      	it	ne
 80108b0:	b22d      	sxthne	r5, r5
 80108b2:	e7ef      	b.n	8010894 <_printf_i+0xbc>
 80108b4:	680b      	ldr	r3, [r1, #0]
 80108b6:	6825      	ldr	r5, [r4, #0]
 80108b8:	1d18      	adds	r0, r3, #4
 80108ba:	6008      	str	r0, [r1, #0]
 80108bc:	0628      	lsls	r0, r5, #24
 80108be:	d501      	bpl.n	80108c4 <_printf_i+0xec>
 80108c0:	681d      	ldr	r5, [r3, #0]
 80108c2:	e002      	b.n	80108ca <_printf_i+0xf2>
 80108c4:	0669      	lsls	r1, r5, #25
 80108c6:	d5fb      	bpl.n	80108c0 <_printf_i+0xe8>
 80108c8:	881d      	ldrh	r5, [r3, #0]
 80108ca:	4854      	ldr	r0, [pc, #336]	; (8010a1c <_printf_i+0x244>)
 80108cc:	2f6f      	cmp	r7, #111	; 0x6f
 80108ce:	bf0c      	ite	eq
 80108d0:	2308      	moveq	r3, #8
 80108d2:	230a      	movne	r3, #10
 80108d4:	2100      	movs	r1, #0
 80108d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80108da:	6866      	ldr	r6, [r4, #4]
 80108dc:	60a6      	str	r6, [r4, #8]
 80108de:	2e00      	cmp	r6, #0
 80108e0:	bfa2      	ittt	ge
 80108e2:	6821      	ldrge	r1, [r4, #0]
 80108e4:	f021 0104 	bicge.w	r1, r1, #4
 80108e8:	6021      	strge	r1, [r4, #0]
 80108ea:	b90d      	cbnz	r5, 80108f0 <_printf_i+0x118>
 80108ec:	2e00      	cmp	r6, #0
 80108ee:	d04d      	beq.n	801098c <_printf_i+0x1b4>
 80108f0:	4616      	mov	r6, r2
 80108f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80108f6:	fb03 5711 	mls	r7, r3, r1, r5
 80108fa:	5dc7      	ldrb	r7, [r0, r7]
 80108fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010900:	462f      	mov	r7, r5
 8010902:	42bb      	cmp	r3, r7
 8010904:	460d      	mov	r5, r1
 8010906:	d9f4      	bls.n	80108f2 <_printf_i+0x11a>
 8010908:	2b08      	cmp	r3, #8
 801090a:	d10b      	bne.n	8010924 <_printf_i+0x14c>
 801090c:	6823      	ldr	r3, [r4, #0]
 801090e:	07df      	lsls	r7, r3, #31
 8010910:	d508      	bpl.n	8010924 <_printf_i+0x14c>
 8010912:	6923      	ldr	r3, [r4, #16]
 8010914:	6861      	ldr	r1, [r4, #4]
 8010916:	4299      	cmp	r1, r3
 8010918:	bfde      	ittt	le
 801091a:	2330      	movle	r3, #48	; 0x30
 801091c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010920:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010924:	1b92      	subs	r2, r2, r6
 8010926:	6122      	str	r2, [r4, #16]
 8010928:	f8cd a000 	str.w	sl, [sp]
 801092c:	464b      	mov	r3, r9
 801092e:	aa03      	add	r2, sp, #12
 8010930:	4621      	mov	r1, r4
 8010932:	4640      	mov	r0, r8
 8010934:	f7ff fee2 	bl	80106fc <_printf_common>
 8010938:	3001      	adds	r0, #1
 801093a:	d14c      	bne.n	80109d6 <_printf_i+0x1fe>
 801093c:	f04f 30ff 	mov.w	r0, #4294967295
 8010940:	b004      	add	sp, #16
 8010942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010946:	4835      	ldr	r0, [pc, #212]	; (8010a1c <_printf_i+0x244>)
 8010948:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801094c:	6823      	ldr	r3, [r4, #0]
 801094e:	680e      	ldr	r6, [r1, #0]
 8010950:	061f      	lsls	r7, r3, #24
 8010952:	f856 5b04 	ldr.w	r5, [r6], #4
 8010956:	600e      	str	r6, [r1, #0]
 8010958:	d514      	bpl.n	8010984 <_printf_i+0x1ac>
 801095a:	07d9      	lsls	r1, r3, #31
 801095c:	bf44      	itt	mi
 801095e:	f043 0320 	orrmi.w	r3, r3, #32
 8010962:	6023      	strmi	r3, [r4, #0]
 8010964:	b91d      	cbnz	r5, 801096e <_printf_i+0x196>
 8010966:	6823      	ldr	r3, [r4, #0]
 8010968:	f023 0320 	bic.w	r3, r3, #32
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	2310      	movs	r3, #16
 8010970:	e7b0      	b.n	80108d4 <_printf_i+0xfc>
 8010972:	6823      	ldr	r3, [r4, #0]
 8010974:	f043 0320 	orr.w	r3, r3, #32
 8010978:	6023      	str	r3, [r4, #0]
 801097a:	2378      	movs	r3, #120	; 0x78
 801097c:	4828      	ldr	r0, [pc, #160]	; (8010a20 <_printf_i+0x248>)
 801097e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010982:	e7e3      	b.n	801094c <_printf_i+0x174>
 8010984:	065e      	lsls	r6, r3, #25
 8010986:	bf48      	it	mi
 8010988:	b2ad      	uxthmi	r5, r5
 801098a:	e7e6      	b.n	801095a <_printf_i+0x182>
 801098c:	4616      	mov	r6, r2
 801098e:	e7bb      	b.n	8010908 <_printf_i+0x130>
 8010990:	680b      	ldr	r3, [r1, #0]
 8010992:	6826      	ldr	r6, [r4, #0]
 8010994:	6960      	ldr	r0, [r4, #20]
 8010996:	1d1d      	adds	r5, r3, #4
 8010998:	600d      	str	r5, [r1, #0]
 801099a:	0635      	lsls	r5, r6, #24
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	d501      	bpl.n	80109a4 <_printf_i+0x1cc>
 80109a0:	6018      	str	r0, [r3, #0]
 80109a2:	e002      	b.n	80109aa <_printf_i+0x1d2>
 80109a4:	0671      	lsls	r1, r6, #25
 80109a6:	d5fb      	bpl.n	80109a0 <_printf_i+0x1c8>
 80109a8:	8018      	strh	r0, [r3, #0]
 80109aa:	2300      	movs	r3, #0
 80109ac:	6123      	str	r3, [r4, #16]
 80109ae:	4616      	mov	r6, r2
 80109b0:	e7ba      	b.n	8010928 <_printf_i+0x150>
 80109b2:	680b      	ldr	r3, [r1, #0]
 80109b4:	1d1a      	adds	r2, r3, #4
 80109b6:	600a      	str	r2, [r1, #0]
 80109b8:	681e      	ldr	r6, [r3, #0]
 80109ba:	6862      	ldr	r2, [r4, #4]
 80109bc:	2100      	movs	r1, #0
 80109be:	4630      	mov	r0, r6
 80109c0:	f7ef fc96 	bl	80002f0 <memchr>
 80109c4:	b108      	cbz	r0, 80109ca <_printf_i+0x1f2>
 80109c6:	1b80      	subs	r0, r0, r6
 80109c8:	6060      	str	r0, [r4, #4]
 80109ca:	6863      	ldr	r3, [r4, #4]
 80109cc:	6123      	str	r3, [r4, #16]
 80109ce:	2300      	movs	r3, #0
 80109d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109d4:	e7a8      	b.n	8010928 <_printf_i+0x150>
 80109d6:	6923      	ldr	r3, [r4, #16]
 80109d8:	4632      	mov	r2, r6
 80109da:	4649      	mov	r1, r9
 80109dc:	4640      	mov	r0, r8
 80109de:	47d0      	blx	sl
 80109e0:	3001      	adds	r0, #1
 80109e2:	d0ab      	beq.n	801093c <_printf_i+0x164>
 80109e4:	6823      	ldr	r3, [r4, #0]
 80109e6:	079b      	lsls	r3, r3, #30
 80109e8:	d413      	bmi.n	8010a12 <_printf_i+0x23a>
 80109ea:	68e0      	ldr	r0, [r4, #12]
 80109ec:	9b03      	ldr	r3, [sp, #12]
 80109ee:	4298      	cmp	r0, r3
 80109f0:	bfb8      	it	lt
 80109f2:	4618      	movlt	r0, r3
 80109f4:	e7a4      	b.n	8010940 <_printf_i+0x168>
 80109f6:	2301      	movs	r3, #1
 80109f8:	4632      	mov	r2, r6
 80109fa:	4649      	mov	r1, r9
 80109fc:	4640      	mov	r0, r8
 80109fe:	47d0      	blx	sl
 8010a00:	3001      	adds	r0, #1
 8010a02:	d09b      	beq.n	801093c <_printf_i+0x164>
 8010a04:	3501      	adds	r5, #1
 8010a06:	68e3      	ldr	r3, [r4, #12]
 8010a08:	9903      	ldr	r1, [sp, #12]
 8010a0a:	1a5b      	subs	r3, r3, r1
 8010a0c:	42ab      	cmp	r3, r5
 8010a0e:	dcf2      	bgt.n	80109f6 <_printf_i+0x21e>
 8010a10:	e7eb      	b.n	80109ea <_printf_i+0x212>
 8010a12:	2500      	movs	r5, #0
 8010a14:	f104 0619 	add.w	r6, r4, #25
 8010a18:	e7f5      	b.n	8010a06 <_printf_i+0x22e>
 8010a1a:	bf00      	nop
 8010a1c:	0801356a 	.word	0x0801356a
 8010a20:	0801357b 	.word	0x0801357b

08010a24 <iprintf>:
 8010a24:	b40f      	push	{r0, r1, r2, r3}
 8010a26:	4b0a      	ldr	r3, [pc, #40]	; (8010a50 <iprintf+0x2c>)
 8010a28:	b513      	push	{r0, r1, r4, lr}
 8010a2a:	681c      	ldr	r4, [r3, #0]
 8010a2c:	b124      	cbz	r4, 8010a38 <iprintf+0x14>
 8010a2e:	69a3      	ldr	r3, [r4, #24]
 8010a30:	b913      	cbnz	r3, 8010a38 <iprintf+0x14>
 8010a32:	4620      	mov	r0, r4
 8010a34:	f001 f86c 	bl	8011b10 <__sinit>
 8010a38:	ab05      	add	r3, sp, #20
 8010a3a:	9a04      	ldr	r2, [sp, #16]
 8010a3c:	68a1      	ldr	r1, [r4, #8]
 8010a3e:	9301      	str	r3, [sp, #4]
 8010a40:	4620      	mov	r0, r4
 8010a42:	f001 fde7 	bl	8012614 <_vfiprintf_r>
 8010a46:	b002      	add	sp, #8
 8010a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a4c:	b004      	add	sp, #16
 8010a4e:	4770      	bx	lr
 8010a50:	24000028 	.word	0x24000028

08010a54 <_puts_r>:
 8010a54:	b570      	push	{r4, r5, r6, lr}
 8010a56:	460e      	mov	r6, r1
 8010a58:	4605      	mov	r5, r0
 8010a5a:	b118      	cbz	r0, 8010a64 <_puts_r+0x10>
 8010a5c:	6983      	ldr	r3, [r0, #24]
 8010a5e:	b90b      	cbnz	r3, 8010a64 <_puts_r+0x10>
 8010a60:	f001 f856 	bl	8011b10 <__sinit>
 8010a64:	69ab      	ldr	r3, [r5, #24]
 8010a66:	68ac      	ldr	r4, [r5, #8]
 8010a68:	b913      	cbnz	r3, 8010a70 <_puts_r+0x1c>
 8010a6a:	4628      	mov	r0, r5
 8010a6c:	f001 f850 	bl	8011b10 <__sinit>
 8010a70:	4b2c      	ldr	r3, [pc, #176]	; (8010b24 <_puts_r+0xd0>)
 8010a72:	429c      	cmp	r4, r3
 8010a74:	d120      	bne.n	8010ab8 <_puts_r+0x64>
 8010a76:	686c      	ldr	r4, [r5, #4]
 8010a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a7a:	07db      	lsls	r3, r3, #31
 8010a7c:	d405      	bmi.n	8010a8a <_puts_r+0x36>
 8010a7e:	89a3      	ldrh	r3, [r4, #12]
 8010a80:	0598      	lsls	r0, r3, #22
 8010a82:	d402      	bmi.n	8010a8a <_puts_r+0x36>
 8010a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a86:	f001 f8e6 	bl	8011c56 <__retarget_lock_acquire_recursive>
 8010a8a:	89a3      	ldrh	r3, [r4, #12]
 8010a8c:	0719      	lsls	r1, r3, #28
 8010a8e:	d51d      	bpl.n	8010acc <_puts_r+0x78>
 8010a90:	6923      	ldr	r3, [r4, #16]
 8010a92:	b1db      	cbz	r3, 8010acc <_puts_r+0x78>
 8010a94:	3e01      	subs	r6, #1
 8010a96:	68a3      	ldr	r3, [r4, #8]
 8010a98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010a9c:	3b01      	subs	r3, #1
 8010a9e:	60a3      	str	r3, [r4, #8]
 8010aa0:	bb39      	cbnz	r1, 8010af2 <_puts_r+0x9e>
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	da38      	bge.n	8010b18 <_puts_r+0xc4>
 8010aa6:	4622      	mov	r2, r4
 8010aa8:	210a      	movs	r1, #10
 8010aaa:	4628      	mov	r0, r5
 8010aac:	f000 f848 	bl	8010b40 <__swbuf_r>
 8010ab0:	3001      	adds	r0, #1
 8010ab2:	d011      	beq.n	8010ad8 <_puts_r+0x84>
 8010ab4:	250a      	movs	r5, #10
 8010ab6:	e011      	b.n	8010adc <_puts_r+0x88>
 8010ab8:	4b1b      	ldr	r3, [pc, #108]	; (8010b28 <_puts_r+0xd4>)
 8010aba:	429c      	cmp	r4, r3
 8010abc:	d101      	bne.n	8010ac2 <_puts_r+0x6e>
 8010abe:	68ac      	ldr	r4, [r5, #8]
 8010ac0:	e7da      	b.n	8010a78 <_puts_r+0x24>
 8010ac2:	4b1a      	ldr	r3, [pc, #104]	; (8010b2c <_puts_r+0xd8>)
 8010ac4:	429c      	cmp	r4, r3
 8010ac6:	bf08      	it	eq
 8010ac8:	68ec      	ldreq	r4, [r5, #12]
 8010aca:	e7d5      	b.n	8010a78 <_puts_r+0x24>
 8010acc:	4621      	mov	r1, r4
 8010ace:	4628      	mov	r0, r5
 8010ad0:	f000 f888 	bl	8010be4 <__swsetup_r>
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	d0dd      	beq.n	8010a94 <_puts_r+0x40>
 8010ad8:	f04f 35ff 	mov.w	r5, #4294967295
 8010adc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ade:	07da      	lsls	r2, r3, #31
 8010ae0:	d405      	bmi.n	8010aee <_puts_r+0x9a>
 8010ae2:	89a3      	ldrh	r3, [r4, #12]
 8010ae4:	059b      	lsls	r3, r3, #22
 8010ae6:	d402      	bmi.n	8010aee <_puts_r+0x9a>
 8010ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010aea:	f001 f8b5 	bl	8011c58 <__retarget_lock_release_recursive>
 8010aee:	4628      	mov	r0, r5
 8010af0:	bd70      	pop	{r4, r5, r6, pc}
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	da04      	bge.n	8010b00 <_puts_r+0xac>
 8010af6:	69a2      	ldr	r2, [r4, #24]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	dc06      	bgt.n	8010b0a <_puts_r+0xb6>
 8010afc:	290a      	cmp	r1, #10
 8010afe:	d004      	beq.n	8010b0a <_puts_r+0xb6>
 8010b00:	6823      	ldr	r3, [r4, #0]
 8010b02:	1c5a      	adds	r2, r3, #1
 8010b04:	6022      	str	r2, [r4, #0]
 8010b06:	7019      	strb	r1, [r3, #0]
 8010b08:	e7c5      	b.n	8010a96 <_puts_r+0x42>
 8010b0a:	4622      	mov	r2, r4
 8010b0c:	4628      	mov	r0, r5
 8010b0e:	f000 f817 	bl	8010b40 <__swbuf_r>
 8010b12:	3001      	adds	r0, #1
 8010b14:	d1bf      	bne.n	8010a96 <_puts_r+0x42>
 8010b16:	e7df      	b.n	8010ad8 <_puts_r+0x84>
 8010b18:	6823      	ldr	r3, [r4, #0]
 8010b1a:	250a      	movs	r5, #10
 8010b1c:	1c5a      	adds	r2, r3, #1
 8010b1e:	6022      	str	r2, [r4, #0]
 8010b20:	701d      	strb	r5, [r3, #0]
 8010b22:	e7db      	b.n	8010adc <_puts_r+0x88>
 8010b24:	08013640 	.word	0x08013640
 8010b28:	08013660 	.word	0x08013660
 8010b2c:	08013620 	.word	0x08013620

08010b30 <puts>:
 8010b30:	4b02      	ldr	r3, [pc, #8]	; (8010b3c <puts+0xc>)
 8010b32:	4601      	mov	r1, r0
 8010b34:	6818      	ldr	r0, [r3, #0]
 8010b36:	f7ff bf8d 	b.w	8010a54 <_puts_r>
 8010b3a:	bf00      	nop
 8010b3c:	24000028 	.word	0x24000028

08010b40 <__swbuf_r>:
 8010b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b42:	460e      	mov	r6, r1
 8010b44:	4614      	mov	r4, r2
 8010b46:	4605      	mov	r5, r0
 8010b48:	b118      	cbz	r0, 8010b52 <__swbuf_r+0x12>
 8010b4a:	6983      	ldr	r3, [r0, #24]
 8010b4c:	b90b      	cbnz	r3, 8010b52 <__swbuf_r+0x12>
 8010b4e:	f000 ffdf 	bl	8011b10 <__sinit>
 8010b52:	4b21      	ldr	r3, [pc, #132]	; (8010bd8 <__swbuf_r+0x98>)
 8010b54:	429c      	cmp	r4, r3
 8010b56:	d12b      	bne.n	8010bb0 <__swbuf_r+0x70>
 8010b58:	686c      	ldr	r4, [r5, #4]
 8010b5a:	69a3      	ldr	r3, [r4, #24]
 8010b5c:	60a3      	str	r3, [r4, #8]
 8010b5e:	89a3      	ldrh	r3, [r4, #12]
 8010b60:	071a      	lsls	r2, r3, #28
 8010b62:	d52f      	bpl.n	8010bc4 <__swbuf_r+0x84>
 8010b64:	6923      	ldr	r3, [r4, #16]
 8010b66:	b36b      	cbz	r3, 8010bc4 <__swbuf_r+0x84>
 8010b68:	6923      	ldr	r3, [r4, #16]
 8010b6a:	6820      	ldr	r0, [r4, #0]
 8010b6c:	1ac0      	subs	r0, r0, r3
 8010b6e:	6963      	ldr	r3, [r4, #20]
 8010b70:	b2f6      	uxtb	r6, r6
 8010b72:	4283      	cmp	r3, r0
 8010b74:	4637      	mov	r7, r6
 8010b76:	dc04      	bgt.n	8010b82 <__swbuf_r+0x42>
 8010b78:	4621      	mov	r1, r4
 8010b7a:	4628      	mov	r0, r5
 8010b7c:	f000 ff34 	bl	80119e8 <_fflush_r>
 8010b80:	bb30      	cbnz	r0, 8010bd0 <__swbuf_r+0x90>
 8010b82:	68a3      	ldr	r3, [r4, #8]
 8010b84:	3b01      	subs	r3, #1
 8010b86:	60a3      	str	r3, [r4, #8]
 8010b88:	6823      	ldr	r3, [r4, #0]
 8010b8a:	1c5a      	adds	r2, r3, #1
 8010b8c:	6022      	str	r2, [r4, #0]
 8010b8e:	701e      	strb	r6, [r3, #0]
 8010b90:	6963      	ldr	r3, [r4, #20]
 8010b92:	3001      	adds	r0, #1
 8010b94:	4283      	cmp	r3, r0
 8010b96:	d004      	beq.n	8010ba2 <__swbuf_r+0x62>
 8010b98:	89a3      	ldrh	r3, [r4, #12]
 8010b9a:	07db      	lsls	r3, r3, #31
 8010b9c:	d506      	bpl.n	8010bac <__swbuf_r+0x6c>
 8010b9e:	2e0a      	cmp	r6, #10
 8010ba0:	d104      	bne.n	8010bac <__swbuf_r+0x6c>
 8010ba2:	4621      	mov	r1, r4
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	f000 ff1f 	bl	80119e8 <_fflush_r>
 8010baa:	b988      	cbnz	r0, 8010bd0 <__swbuf_r+0x90>
 8010bac:	4638      	mov	r0, r7
 8010bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bb0:	4b0a      	ldr	r3, [pc, #40]	; (8010bdc <__swbuf_r+0x9c>)
 8010bb2:	429c      	cmp	r4, r3
 8010bb4:	d101      	bne.n	8010bba <__swbuf_r+0x7a>
 8010bb6:	68ac      	ldr	r4, [r5, #8]
 8010bb8:	e7cf      	b.n	8010b5a <__swbuf_r+0x1a>
 8010bba:	4b09      	ldr	r3, [pc, #36]	; (8010be0 <__swbuf_r+0xa0>)
 8010bbc:	429c      	cmp	r4, r3
 8010bbe:	bf08      	it	eq
 8010bc0:	68ec      	ldreq	r4, [r5, #12]
 8010bc2:	e7ca      	b.n	8010b5a <__swbuf_r+0x1a>
 8010bc4:	4621      	mov	r1, r4
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	f000 f80c 	bl	8010be4 <__swsetup_r>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d0cb      	beq.n	8010b68 <__swbuf_r+0x28>
 8010bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8010bd4:	e7ea      	b.n	8010bac <__swbuf_r+0x6c>
 8010bd6:	bf00      	nop
 8010bd8:	08013640 	.word	0x08013640
 8010bdc:	08013660 	.word	0x08013660
 8010be0:	08013620 	.word	0x08013620

08010be4 <__swsetup_r>:
 8010be4:	4b32      	ldr	r3, [pc, #200]	; (8010cb0 <__swsetup_r+0xcc>)
 8010be6:	b570      	push	{r4, r5, r6, lr}
 8010be8:	681d      	ldr	r5, [r3, #0]
 8010bea:	4606      	mov	r6, r0
 8010bec:	460c      	mov	r4, r1
 8010bee:	b125      	cbz	r5, 8010bfa <__swsetup_r+0x16>
 8010bf0:	69ab      	ldr	r3, [r5, #24]
 8010bf2:	b913      	cbnz	r3, 8010bfa <__swsetup_r+0x16>
 8010bf4:	4628      	mov	r0, r5
 8010bf6:	f000 ff8b 	bl	8011b10 <__sinit>
 8010bfa:	4b2e      	ldr	r3, [pc, #184]	; (8010cb4 <__swsetup_r+0xd0>)
 8010bfc:	429c      	cmp	r4, r3
 8010bfe:	d10f      	bne.n	8010c20 <__swsetup_r+0x3c>
 8010c00:	686c      	ldr	r4, [r5, #4]
 8010c02:	89a3      	ldrh	r3, [r4, #12]
 8010c04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c08:	0719      	lsls	r1, r3, #28
 8010c0a:	d42c      	bmi.n	8010c66 <__swsetup_r+0x82>
 8010c0c:	06dd      	lsls	r5, r3, #27
 8010c0e:	d411      	bmi.n	8010c34 <__swsetup_r+0x50>
 8010c10:	2309      	movs	r3, #9
 8010c12:	6033      	str	r3, [r6, #0]
 8010c14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010c18:	81a3      	strh	r3, [r4, #12]
 8010c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c1e:	e03e      	b.n	8010c9e <__swsetup_r+0xba>
 8010c20:	4b25      	ldr	r3, [pc, #148]	; (8010cb8 <__swsetup_r+0xd4>)
 8010c22:	429c      	cmp	r4, r3
 8010c24:	d101      	bne.n	8010c2a <__swsetup_r+0x46>
 8010c26:	68ac      	ldr	r4, [r5, #8]
 8010c28:	e7eb      	b.n	8010c02 <__swsetup_r+0x1e>
 8010c2a:	4b24      	ldr	r3, [pc, #144]	; (8010cbc <__swsetup_r+0xd8>)
 8010c2c:	429c      	cmp	r4, r3
 8010c2e:	bf08      	it	eq
 8010c30:	68ec      	ldreq	r4, [r5, #12]
 8010c32:	e7e6      	b.n	8010c02 <__swsetup_r+0x1e>
 8010c34:	0758      	lsls	r0, r3, #29
 8010c36:	d512      	bpl.n	8010c5e <__swsetup_r+0x7a>
 8010c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c3a:	b141      	cbz	r1, 8010c4e <__swsetup_r+0x6a>
 8010c3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c40:	4299      	cmp	r1, r3
 8010c42:	d002      	beq.n	8010c4a <__swsetup_r+0x66>
 8010c44:	4630      	mov	r0, r6
 8010c46:	f001 fc11 	bl	801246c <_free_r>
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	6363      	str	r3, [r4, #52]	; 0x34
 8010c4e:	89a3      	ldrh	r3, [r4, #12]
 8010c50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c54:	81a3      	strh	r3, [r4, #12]
 8010c56:	2300      	movs	r3, #0
 8010c58:	6063      	str	r3, [r4, #4]
 8010c5a:	6923      	ldr	r3, [r4, #16]
 8010c5c:	6023      	str	r3, [r4, #0]
 8010c5e:	89a3      	ldrh	r3, [r4, #12]
 8010c60:	f043 0308 	orr.w	r3, r3, #8
 8010c64:	81a3      	strh	r3, [r4, #12]
 8010c66:	6923      	ldr	r3, [r4, #16]
 8010c68:	b94b      	cbnz	r3, 8010c7e <__swsetup_r+0x9a>
 8010c6a:	89a3      	ldrh	r3, [r4, #12]
 8010c6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c74:	d003      	beq.n	8010c7e <__swsetup_r+0x9a>
 8010c76:	4621      	mov	r1, r4
 8010c78:	4630      	mov	r0, r6
 8010c7a:	f001 f813 	bl	8011ca4 <__smakebuf_r>
 8010c7e:	89a0      	ldrh	r0, [r4, #12]
 8010c80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c84:	f010 0301 	ands.w	r3, r0, #1
 8010c88:	d00a      	beq.n	8010ca0 <__swsetup_r+0xbc>
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	60a3      	str	r3, [r4, #8]
 8010c8e:	6963      	ldr	r3, [r4, #20]
 8010c90:	425b      	negs	r3, r3
 8010c92:	61a3      	str	r3, [r4, #24]
 8010c94:	6923      	ldr	r3, [r4, #16]
 8010c96:	b943      	cbnz	r3, 8010caa <__swsetup_r+0xc6>
 8010c98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c9c:	d1ba      	bne.n	8010c14 <__swsetup_r+0x30>
 8010c9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ca0:	0781      	lsls	r1, r0, #30
 8010ca2:	bf58      	it	pl
 8010ca4:	6963      	ldrpl	r3, [r4, #20]
 8010ca6:	60a3      	str	r3, [r4, #8]
 8010ca8:	e7f4      	b.n	8010c94 <__swsetup_r+0xb0>
 8010caa:	2000      	movs	r0, #0
 8010cac:	e7f7      	b.n	8010c9e <__swsetup_r+0xba>
 8010cae:	bf00      	nop
 8010cb0:	24000028 	.word	0x24000028
 8010cb4:	08013640 	.word	0x08013640
 8010cb8:	08013660 	.word	0x08013660
 8010cbc:	08013620 	.word	0x08013620

08010cc0 <quorem>:
 8010cc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc4:	6903      	ldr	r3, [r0, #16]
 8010cc6:	690c      	ldr	r4, [r1, #16]
 8010cc8:	42a3      	cmp	r3, r4
 8010cca:	4607      	mov	r7, r0
 8010ccc:	f2c0 8081 	blt.w	8010dd2 <quorem+0x112>
 8010cd0:	3c01      	subs	r4, #1
 8010cd2:	f101 0814 	add.w	r8, r1, #20
 8010cd6:	f100 0514 	add.w	r5, r0, #20
 8010cda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010cde:	9301      	str	r3, [sp, #4]
 8010ce0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010ce4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ce8:	3301      	adds	r3, #1
 8010cea:	429a      	cmp	r2, r3
 8010cec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010cf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010cf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8010cf8:	d331      	bcc.n	8010d5e <quorem+0x9e>
 8010cfa:	f04f 0e00 	mov.w	lr, #0
 8010cfe:	4640      	mov	r0, r8
 8010d00:	46ac      	mov	ip, r5
 8010d02:	46f2      	mov	sl, lr
 8010d04:	f850 2b04 	ldr.w	r2, [r0], #4
 8010d08:	b293      	uxth	r3, r2
 8010d0a:	fb06 e303 	mla	r3, r6, r3, lr
 8010d0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	ebaa 0303 	sub.w	r3, sl, r3
 8010d18:	0c12      	lsrs	r2, r2, #16
 8010d1a:	f8dc a000 	ldr.w	sl, [ip]
 8010d1e:	fb06 e202 	mla	r2, r6, r2, lr
 8010d22:	fa13 f38a 	uxtah	r3, r3, sl
 8010d26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010d2a:	fa1f fa82 	uxth.w	sl, r2
 8010d2e:	f8dc 2000 	ldr.w	r2, [ip]
 8010d32:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010d36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d40:	4581      	cmp	r9, r0
 8010d42:	f84c 3b04 	str.w	r3, [ip], #4
 8010d46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010d4a:	d2db      	bcs.n	8010d04 <quorem+0x44>
 8010d4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010d50:	b92b      	cbnz	r3, 8010d5e <quorem+0x9e>
 8010d52:	9b01      	ldr	r3, [sp, #4]
 8010d54:	3b04      	subs	r3, #4
 8010d56:	429d      	cmp	r5, r3
 8010d58:	461a      	mov	r2, r3
 8010d5a:	d32e      	bcc.n	8010dba <quorem+0xfa>
 8010d5c:	613c      	str	r4, [r7, #16]
 8010d5e:	4638      	mov	r0, r7
 8010d60:	f001 fa74 	bl	801224c <__mcmp>
 8010d64:	2800      	cmp	r0, #0
 8010d66:	db24      	blt.n	8010db2 <quorem+0xf2>
 8010d68:	3601      	adds	r6, #1
 8010d6a:	4628      	mov	r0, r5
 8010d6c:	f04f 0c00 	mov.w	ip, #0
 8010d70:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d74:	f8d0 e000 	ldr.w	lr, [r0]
 8010d78:	b293      	uxth	r3, r2
 8010d7a:	ebac 0303 	sub.w	r3, ip, r3
 8010d7e:	0c12      	lsrs	r2, r2, #16
 8010d80:	fa13 f38e 	uxtah	r3, r3, lr
 8010d84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d92:	45c1      	cmp	r9, r8
 8010d94:	f840 3b04 	str.w	r3, [r0], #4
 8010d98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010d9c:	d2e8      	bcs.n	8010d70 <quorem+0xb0>
 8010d9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010da6:	b922      	cbnz	r2, 8010db2 <quorem+0xf2>
 8010da8:	3b04      	subs	r3, #4
 8010daa:	429d      	cmp	r5, r3
 8010dac:	461a      	mov	r2, r3
 8010dae:	d30a      	bcc.n	8010dc6 <quorem+0x106>
 8010db0:	613c      	str	r4, [r7, #16]
 8010db2:	4630      	mov	r0, r6
 8010db4:	b003      	add	sp, #12
 8010db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dba:	6812      	ldr	r2, [r2, #0]
 8010dbc:	3b04      	subs	r3, #4
 8010dbe:	2a00      	cmp	r2, #0
 8010dc0:	d1cc      	bne.n	8010d5c <quorem+0x9c>
 8010dc2:	3c01      	subs	r4, #1
 8010dc4:	e7c7      	b.n	8010d56 <quorem+0x96>
 8010dc6:	6812      	ldr	r2, [r2, #0]
 8010dc8:	3b04      	subs	r3, #4
 8010dca:	2a00      	cmp	r2, #0
 8010dcc:	d1f0      	bne.n	8010db0 <quorem+0xf0>
 8010dce:	3c01      	subs	r4, #1
 8010dd0:	e7eb      	b.n	8010daa <quorem+0xea>
 8010dd2:	2000      	movs	r0, #0
 8010dd4:	e7ee      	b.n	8010db4 <quorem+0xf4>
	...

08010dd8 <_dtoa_r>:
 8010dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ddc:	ec59 8b10 	vmov	r8, r9, d0
 8010de0:	b095      	sub	sp, #84	; 0x54
 8010de2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010de4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8010de6:	9107      	str	r1, [sp, #28]
 8010de8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010dec:	4606      	mov	r6, r0
 8010dee:	9209      	str	r2, [sp, #36]	; 0x24
 8010df0:	9310      	str	r3, [sp, #64]	; 0x40
 8010df2:	b975      	cbnz	r5, 8010e12 <_dtoa_r+0x3a>
 8010df4:	2010      	movs	r0, #16
 8010df6:	f000 ff95 	bl	8011d24 <malloc>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	6270      	str	r0, [r6, #36]	; 0x24
 8010dfe:	b920      	cbnz	r0, 8010e0a <_dtoa_r+0x32>
 8010e00:	4bab      	ldr	r3, [pc, #684]	; (80110b0 <_dtoa_r+0x2d8>)
 8010e02:	21ea      	movs	r1, #234	; 0xea
 8010e04:	48ab      	ldr	r0, [pc, #684]	; (80110b4 <_dtoa_r+0x2dc>)
 8010e06:	f001 fd9b 	bl	8012940 <__assert_func>
 8010e0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010e0e:	6005      	str	r5, [r0, #0]
 8010e10:	60c5      	str	r5, [r0, #12]
 8010e12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010e14:	6819      	ldr	r1, [r3, #0]
 8010e16:	b151      	cbz	r1, 8010e2e <_dtoa_r+0x56>
 8010e18:	685a      	ldr	r2, [r3, #4]
 8010e1a:	604a      	str	r2, [r1, #4]
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	4093      	lsls	r3, r2
 8010e20:	608b      	str	r3, [r1, #8]
 8010e22:	4630      	mov	r0, r6
 8010e24:	f000 ffd4 	bl	8011dd0 <_Bfree>
 8010e28:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	601a      	str	r2, [r3, #0]
 8010e2e:	f1b9 0300 	subs.w	r3, r9, #0
 8010e32:	bfbb      	ittet	lt
 8010e34:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010e38:	9303      	strlt	r3, [sp, #12]
 8010e3a:	2300      	movge	r3, #0
 8010e3c:	2201      	movlt	r2, #1
 8010e3e:	bfac      	ite	ge
 8010e40:	6023      	strge	r3, [r4, #0]
 8010e42:	6022      	strlt	r2, [r4, #0]
 8010e44:	4b9c      	ldr	r3, [pc, #624]	; (80110b8 <_dtoa_r+0x2e0>)
 8010e46:	9c03      	ldr	r4, [sp, #12]
 8010e48:	43a3      	bics	r3, r4
 8010e4a:	d11a      	bne.n	8010e82 <_dtoa_r+0xaa>
 8010e4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010e52:	6013      	str	r3, [r2, #0]
 8010e54:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010e58:	ea53 0308 	orrs.w	r3, r3, r8
 8010e5c:	f000 8512 	beq.w	8011884 <_dtoa_r+0xaac>
 8010e60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010e62:	b953      	cbnz	r3, 8010e7a <_dtoa_r+0xa2>
 8010e64:	4b95      	ldr	r3, [pc, #596]	; (80110bc <_dtoa_r+0x2e4>)
 8010e66:	e01f      	b.n	8010ea8 <_dtoa_r+0xd0>
 8010e68:	4b95      	ldr	r3, [pc, #596]	; (80110c0 <_dtoa_r+0x2e8>)
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	3308      	adds	r3, #8
 8010e6e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010e70:	6013      	str	r3, [r2, #0]
 8010e72:	9800      	ldr	r0, [sp, #0]
 8010e74:	b015      	add	sp, #84	; 0x54
 8010e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e7a:	4b90      	ldr	r3, [pc, #576]	; (80110bc <_dtoa_r+0x2e4>)
 8010e7c:	9300      	str	r3, [sp, #0]
 8010e7e:	3303      	adds	r3, #3
 8010e80:	e7f5      	b.n	8010e6e <_dtoa_r+0x96>
 8010e82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010e92:	d10b      	bne.n	8010eac <_dtoa_r+0xd4>
 8010e94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e96:	2301      	movs	r3, #1
 8010e98:	6013      	str	r3, [r2, #0]
 8010e9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f000 84ee 	beq.w	801187e <_dtoa_r+0xaa6>
 8010ea2:	4888      	ldr	r0, [pc, #544]	; (80110c4 <_dtoa_r+0x2ec>)
 8010ea4:	6018      	str	r0, [r3, #0]
 8010ea6:	1e43      	subs	r3, r0, #1
 8010ea8:	9300      	str	r3, [sp, #0]
 8010eaa:	e7e2      	b.n	8010e72 <_dtoa_r+0x9a>
 8010eac:	a913      	add	r1, sp, #76	; 0x4c
 8010eae:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010eb2:	aa12      	add	r2, sp, #72	; 0x48
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	f001 fa6d 	bl	8012394 <__d2b>
 8010eba:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8010ebe:	4605      	mov	r5, r0
 8010ec0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010ec2:	2900      	cmp	r1, #0
 8010ec4:	d047      	beq.n	8010f56 <_dtoa_r+0x17e>
 8010ec6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010ec8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010ecc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010ed0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8010ed4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010ed8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010edc:	2400      	movs	r4, #0
 8010ede:	ec43 2b16 	vmov	d6, r2, r3
 8010ee2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010ee6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8011098 <_dtoa_r+0x2c0>
 8010eea:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010eee:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80110a0 <_dtoa_r+0x2c8>
 8010ef2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010ef6:	eeb0 7b46 	vmov.f64	d7, d6
 8010efa:	ee06 1a90 	vmov	s13, r1
 8010efe:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8010f02:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80110a8 <_dtoa_r+0x2d0>
 8010f06:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010f0a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010f0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f16:	ee16 ba90 	vmov	fp, s13
 8010f1a:	9411      	str	r4, [sp, #68]	; 0x44
 8010f1c:	d508      	bpl.n	8010f30 <_dtoa_r+0x158>
 8010f1e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010f22:	eeb4 6b47 	vcmp.f64	d6, d7
 8010f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f2a:	bf18      	it	ne
 8010f2c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010f30:	f1bb 0f16 	cmp.w	fp, #22
 8010f34:	d832      	bhi.n	8010f9c <_dtoa_r+0x1c4>
 8010f36:	4b64      	ldr	r3, [pc, #400]	; (80110c8 <_dtoa_r+0x2f0>)
 8010f38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010f3c:	ed93 7b00 	vldr	d7, [r3]
 8010f40:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010f44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4c:	d501      	bpl.n	8010f52 <_dtoa_r+0x17a>
 8010f4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010f52:	2300      	movs	r3, #0
 8010f54:	e023      	b.n	8010f9e <_dtoa_r+0x1c6>
 8010f56:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010f58:	4401      	add	r1, r0
 8010f5a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010f5e:	2b20      	cmp	r3, #32
 8010f60:	bfc3      	ittte	gt
 8010f62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010f66:	fa04 f303 	lslgt.w	r3, r4, r3
 8010f6a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010f6e:	f1c3 0320 	rsble	r3, r3, #32
 8010f72:	bfc6      	itte	gt
 8010f74:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010f78:	ea43 0308 	orrgt.w	r3, r3, r8
 8010f7c:	fa08 f303 	lslle.w	r3, r8, r3
 8010f80:	ee07 3a90 	vmov	s15, r3
 8010f84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010f88:	3901      	subs	r1, #1
 8010f8a:	ed8d 7b00 	vstr	d7, [sp]
 8010f8e:	9c01      	ldr	r4, [sp, #4]
 8010f90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f94:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010f98:	2401      	movs	r4, #1
 8010f9a:	e7a0      	b.n	8010ede <_dtoa_r+0x106>
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010fa0:	1a43      	subs	r3, r0, r1
 8010fa2:	1e5a      	subs	r2, r3, #1
 8010fa4:	bf45      	ittet	mi
 8010fa6:	f1c3 0301 	rsbmi	r3, r3, #1
 8010faa:	9305      	strmi	r3, [sp, #20]
 8010fac:	2300      	movpl	r3, #0
 8010fae:	2300      	movmi	r3, #0
 8010fb0:	9206      	str	r2, [sp, #24]
 8010fb2:	bf54      	ite	pl
 8010fb4:	9305      	strpl	r3, [sp, #20]
 8010fb6:	9306      	strmi	r3, [sp, #24]
 8010fb8:	f1bb 0f00 	cmp.w	fp, #0
 8010fbc:	db18      	blt.n	8010ff0 <_dtoa_r+0x218>
 8010fbe:	9b06      	ldr	r3, [sp, #24]
 8010fc0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010fc4:	445b      	add	r3, fp
 8010fc6:	9306      	str	r3, [sp, #24]
 8010fc8:	2300      	movs	r3, #0
 8010fca:	9a07      	ldr	r2, [sp, #28]
 8010fcc:	2a09      	cmp	r2, #9
 8010fce:	d849      	bhi.n	8011064 <_dtoa_r+0x28c>
 8010fd0:	2a05      	cmp	r2, #5
 8010fd2:	bfc4      	itt	gt
 8010fd4:	3a04      	subgt	r2, #4
 8010fd6:	9207      	strgt	r2, [sp, #28]
 8010fd8:	9a07      	ldr	r2, [sp, #28]
 8010fda:	f1a2 0202 	sub.w	r2, r2, #2
 8010fde:	bfcc      	ite	gt
 8010fe0:	2400      	movgt	r4, #0
 8010fe2:	2401      	movle	r4, #1
 8010fe4:	2a03      	cmp	r2, #3
 8010fe6:	d848      	bhi.n	801107a <_dtoa_r+0x2a2>
 8010fe8:	e8df f002 	tbb	[pc, r2]
 8010fec:	3a2c2e0b 	.word	0x3a2c2e0b
 8010ff0:	9b05      	ldr	r3, [sp, #20]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	eba3 030b 	sub.w	r3, r3, fp
 8010ff8:	9305      	str	r3, [sp, #20]
 8010ffa:	920e      	str	r2, [sp, #56]	; 0x38
 8010ffc:	f1cb 0300 	rsb	r3, fp, #0
 8011000:	e7e3      	b.n	8010fca <_dtoa_r+0x1f2>
 8011002:	2200      	movs	r2, #0
 8011004:	9208      	str	r2, [sp, #32]
 8011006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011008:	2a00      	cmp	r2, #0
 801100a:	dc39      	bgt.n	8011080 <_dtoa_r+0x2a8>
 801100c:	f04f 0a01 	mov.w	sl, #1
 8011010:	46d1      	mov	r9, sl
 8011012:	4652      	mov	r2, sl
 8011014:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011018:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801101a:	2100      	movs	r1, #0
 801101c:	6079      	str	r1, [r7, #4]
 801101e:	2004      	movs	r0, #4
 8011020:	f100 0c14 	add.w	ip, r0, #20
 8011024:	4594      	cmp	ip, r2
 8011026:	6879      	ldr	r1, [r7, #4]
 8011028:	d92f      	bls.n	801108a <_dtoa_r+0x2b2>
 801102a:	4630      	mov	r0, r6
 801102c:	930c      	str	r3, [sp, #48]	; 0x30
 801102e:	f000 fe8f 	bl	8011d50 <_Balloc>
 8011032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011034:	9000      	str	r0, [sp, #0]
 8011036:	4602      	mov	r2, r0
 8011038:	2800      	cmp	r0, #0
 801103a:	d149      	bne.n	80110d0 <_dtoa_r+0x2f8>
 801103c:	4b23      	ldr	r3, [pc, #140]	; (80110cc <_dtoa_r+0x2f4>)
 801103e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011042:	e6df      	b.n	8010e04 <_dtoa_r+0x2c>
 8011044:	2201      	movs	r2, #1
 8011046:	e7dd      	b.n	8011004 <_dtoa_r+0x22c>
 8011048:	2200      	movs	r2, #0
 801104a:	9208      	str	r2, [sp, #32]
 801104c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801104e:	eb0b 0a02 	add.w	sl, fp, r2
 8011052:	f10a 0901 	add.w	r9, sl, #1
 8011056:	464a      	mov	r2, r9
 8011058:	2a01      	cmp	r2, #1
 801105a:	bfb8      	it	lt
 801105c:	2201      	movlt	r2, #1
 801105e:	e7db      	b.n	8011018 <_dtoa_r+0x240>
 8011060:	2201      	movs	r2, #1
 8011062:	e7f2      	b.n	801104a <_dtoa_r+0x272>
 8011064:	2401      	movs	r4, #1
 8011066:	2200      	movs	r2, #0
 8011068:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801106c:	f04f 3aff 	mov.w	sl, #4294967295
 8011070:	2100      	movs	r1, #0
 8011072:	46d1      	mov	r9, sl
 8011074:	2212      	movs	r2, #18
 8011076:	9109      	str	r1, [sp, #36]	; 0x24
 8011078:	e7ce      	b.n	8011018 <_dtoa_r+0x240>
 801107a:	2201      	movs	r2, #1
 801107c:	9208      	str	r2, [sp, #32]
 801107e:	e7f5      	b.n	801106c <_dtoa_r+0x294>
 8011080:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8011084:	46d1      	mov	r9, sl
 8011086:	4652      	mov	r2, sl
 8011088:	e7c6      	b.n	8011018 <_dtoa_r+0x240>
 801108a:	3101      	adds	r1, #1
 801108c:	6079      	str	r1, [r7, #4]
 801108e:	0040      	lsls	r0, r0, #1
 8011090:	e7c6      	b.n	8011020 <_dtoa_r+0x248>
 8011092:	bf00      	nop
 8011094:	f3af 8000 	nop.w
 8011098:	636f4361 	.word	0x636f4361
 801109c:	3fd287a7 	.word	0x3fd287a7
 80110a0:	8b60c8b3 	.word	0x8b60c8b3
 80110a4:	3fc68a28 	.word	0x3fc68a28
 80110a8:	509f79fb 	.word	0x509f79fb
 80110ac:	3fd34413 	.word	0x3fd34413
 80110b0:	08013599 	.word	0x08013599
 80110b4:	080135b0 	.word	0x080135b0
 80110b8:	7ff00000 	.word	0x7ff00000
 80110bc:	08013595 	.word	0x08013595
 80110c0:	0801358c 	.word	0x0801358c
 80110c4:	08013569 	.word	0x08013569
 80110c8:	08013708 	.word	0x08013708
 80110cc:	0801360f 	.word	0x0801360f
 80110d0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80110d2:	9900      	ldr	r1, [sp, #0]
 80110d4:	6011      	str	r1, [r2, #0]
 80110d6:	f1b9 0f0e 	cmp.w	r9, #14
 80110da:	d872      	bhi.n	80111c2 <_dtoa_r+0x3ea>
 80110dc:	2c00      	cmp	r4, #0
 80110de:	d070      	beq.n	80111c2 <_dtoa_r+0x3ea>
 80110e0:	f1bb 0f00 	cmp.w	fp, #0
 80110e4:	f340 80a6 	ble.w	8011234 <_dtoa_r+0x45c>
 80110e8:	49ca      	ldr	r1, [pc, #808]	; (8011414 <_dtoa_r+0x63c>)
 80110ea:	f00b 020f 	and.w	r2, fp, #15
 80110ee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80110f2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80110f6:	ed92 7b00 	vldr	d7, [r2]
 80110fa:	ea4f 112b 	mov.w	r1, fp, asr #4
 80110fe:	f000 808d 	beq.w	801121c <_dtoa_r+0x444>
 8011102:	4ac5      	ldr	r2, [pc, #788]	; (8011418 <_dtoa_r+0x640>)
 8011104:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011108:	ed92 6b08 	vldr	d6, [r2, #32]
 801110c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8011110:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011114:	f001 010f 	and.w	r1, r1, #15
 8011118:	2203      	movs	r2, #3
 801111a:	48bf      	ldr	r0, [pc, #764]	; (8011418 <_dtoa_r+0x640>)
 801111c:	2900      	cmp	r1, #0
 801111e:	d17f      	bne.n	8011220 <_dtoa_r+0x448>
 8011120:	ed9d 6b02 	vldr	d6, [sp, #8]
 8011124:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011128:	ed8d 7b02 	vstr	d7, [sp, #8]
 801112c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801112e:	2900      	cmp	r1, #0
 8011130:	f000 80b2 	beq.w	8011298 <_dtoa_r+0x4c0>
 8011134:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011138:	ed9d 7b02 	vldr	d7, [sp, #8]
 801113c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011144:	f140 80a8 	bpl.w	8011298 <_dtoa_r+0x4c0>
 8011148:	f1b9 0f00 	cmp.w	r9, #0
 801114c:	f000 80a4 	beq.w	8011298 <_dtoa_r+0x4c0>
 8011150:	f1ba 0f00 	cmp.w	sl, #0
 8011154:	dd31      	ble.n	80111ba <_dtoa_r+0x3e2>
 8011156:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801115a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801115e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011162:	f10b 37ff 	add.w	r7, fp, #4294967295
 8011166:	3201      	adds	r2, #1
 8011168:	4650      	mov	r0, sl
 801116a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801116e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8011172:	ee07 2a90 	vmov	s15, r2
 8011176:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801117a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801117e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8011182:	9c03      	ldr	r4, [sp, #12]
 8011184:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011188:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801118c:	2800      	cmp	r0, #0
 801118e:	f040 8086 	bne.w	801129e <_dtoa_r+0x4c6>
 8011192:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8011196:	ee36 6b47 	vsub.f64	d6, d6, d7
 801119a:	ec42 1b17 	vmov	d7, r1, r2
 801119e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80111a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a6:	f300 8272 	bgt.w	801168e <_dtoa_r+0x8b6>
 80111aa:	eeb1 7b47 	vneg.f64	d7, d7
 80111ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80111b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b6:	f100 8267 	bmi.w	8011688 <_dtoa_r+0x8b0>
 80111ba:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80111be:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80111c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80111c4:	2a00      	cmp	r2, #0
 80111c6:	f2c0 8129 	blt.w	801141c <_dtoa_r+0x644>
 80111ca:	f1bb 0f0e 	cmp.w	fp, #14
 80111ce:	f300 8125 	bgt.w	801141c <_dtoa_r+0x644>
 80111d2:	4b90      	ldr	r3, [pc, #576]	; (8011414 <_dtoa_r+0x63c>)
 80111d4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80111d8:	ed93 6b00 	vldr	d6, [r3]
 80111dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111de:	2b00      	cmp	r3, #0
 80111e0:	f280 80c3 	bge.w	801136a <_dtoa_r+0x592>
 80111e4:	f1b9 0f00 	cmp.w	r9, #0
 80111e8:	f300 80bf 	bgt.w	801136a <_dtoa_r+0x592>
 80111ec:	f040 824c 	bne.w	8011688 <_dtoa_r+0x8b0>
 80111f0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80111f4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80111f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80111fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011204:	464c      	mov	r4, r9
 8011206:	464f      	mov	r7, r9
 8011208:	f280 8222 	bge.w	8011650 <_dtoa_r+0x878>
 801120c:	f8dd 8000 	ldr.w	r8, [sp]
 8011210:	2331      	movs	r3, #49	; 0x31
 8011212:	f808 3b01 	strb.w	r3, [r8], #1
 8011216:	f10b 0b01 	add.w	fp, fp, #1
 801121a:	e21e      	b.n	801165a <_dtoa_r+0x882>
 801121c:	2202      	movs	r2, #2
 801121e:	e77c      	b.n	801111a <_dtoa_r+0x342>
 8011220:	07cc      	lsls	r4, r1, #31
 8011222:	d504      	bpl.n	801122e <_dtoa_r+0x456>
 8011224:	ed90 6b00 	vldr	d6, [r0]
 8011228:	3201      	adds	r2, #1
 801122a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801122e:	1049      	asrs	r1, r1, #1
 8011230:	3008      	adds	r0, #8
 8011232:	e773      	b.n	801111c <_dtoa_r+0x344>
 8011234:	d02e      	beq.n	8011294 <_dtoa_r+0x4bc>
 8011236:	f1cb 0100 	rsb	r1, fp, #0
 801123a:	4a76      	ldr	r2, [pc, #472]	; (8011414 <_dtoa_r+0x63c>)
 801123c:	f001 000f 	and.w	r0, r1, #15
 8011240:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8011244:	ed92 7b00 	vldr	d7, [r2]
 8011248:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801124c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011250:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8011254:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8011258:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801125c:	486e      	ldr	r0, [pc, #440]	; (8011418 <_dtoa_r+0x640>)
 801125e:	1109      	asrs	r1, r1, #4
 8011260:	2400      	movs	r4, #0
 8011262:	2202      	movs	r2, #2
 8011264:	b939      	cbnz	r1, 8011276 <_dtoa_r+0x49e>
 8011266:	2c00      	cmp	r4, #0
 8011268:	f43f af60 	beq.w	801112c <_dtoa_r+0x354>
 801126c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011270:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011274:	e75a      	b.n	801112c <_dtoa_r+0x354>
 8011276:	07cf      	lsls	r7, r1, #31
 8011278:	d509      	bpl.n	801128e <_dtoa_r+0x4b6>
 801127a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801127e:	ed90 7b00 	vldr	d7, [r0]
 8011282:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011286:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801128a:	3201      	adds	r2, #1
 801128c:	2401      	movs	r4, #1
 801128e:	1049      	asrs	r1, r1, #1
 8011290:	3008      	adds	r0, #8
 8011292:	e7e7      	b.n	8011264 <_dtoa_r+0x48c>
 8011294:	2202      	movs	r2, #2
 8011296:	e749      	b.n	801112c <_dtoa_r+0x354>
 8011298:	465f      	mov	r7, fp
 801129a:	4648      	mov	r0, r9
 801129c:	e765      	b.n	801116a <_dtoa_r+0x392>
 801129e:	ec42 1b17 	vmov	d7, r1, r2
 80112a2:	4a5c      	ldr	r2, [pc, #368]	; (8011414 <_dtoa_r+0x63c>)
 80112a4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80112a8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80112ac:	9a00      	ldr	r2, [sp, #0]
 80112ae:	1814      	adds	r4, r2, r0
 80112b0:	9a08      	ldr	r2, [sp, #32]
 80112b2:	b352      	cbz	r2, 801130a <_dtoa_r+0x532>
 80112b4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80112b8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80112bc:	f8dd 8000 	ldr.w	r8, [sp]
 80112c0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80112c4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80112c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80112cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80112d0:	ee14 2a90 	vmov	r2, s9
 80112d4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80112d8:	3230      	adds	r2, #48	; 0x30
 80112da:	ee36 6b45 	vsub.f64	d6, d6, d5
 80112de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80112e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e6:	f808 2b01 	strb.w	r2, [r8], #1
 80112ea:	d439      	bmi.n	8011360 <_dtoa_r+0x588>
 80112ec:	ee32 5b46 	vsub.f64	d5, d2, d6
 80112f0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80112f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f8:	d472      	bmi.n	80113e0 <_dtoa_r+0x608>
 80112fa:	45a0      	cmp	r8, r4
 80112fc:	f43f af5d 	beq.w	80111ba <_dtoa_r+0x3e2>
 8011300:	ee27 7b03 	vmul.f64	d7, d7, d3
 8011304:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011308:	e7e0      	b.n	80112cc <_dtoa_r+0x4f4>
 801130a:	f8dd 8000 	ldr.w	r8, [sp]
 801130e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011312:	4621      	mov	r1, r4
 8011314:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8011318:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801131c:	ee14 2a90 	vmov	r2, s9
 8011320:	3230      	adds	r2, #48	; 0x30
 8011322:	f808 2b01 	strb.w	r2, [r8], #1
 8011326:	45a0      	cmp	r8, r4
 8011328:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801132c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8011330:	d118      	bne.n	8011364 <_dtoa_r+0x58c>
 8011332:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011336:	ee37 4b05 	vadd.f64	d4, d7, d5
 801133a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011342:	dc4d      	bgt.n	80113e0 <_dtoa_r+0x608>
 8011344:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011348:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011350:	f57f af33 	bpl.w	80111ba <_dtoa_r+0x3e2>
 8011354:	4688      	mov	r8, r1
 8011356:	3901      	subs	r1, #1
 8011358:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801135c:	2b30      	cmp	r3, #48	; 0x30
 801135e:	d0f9      	beq.n	8011354 <_dtoa_r+0x57c>
 8011360:	46bb      	mov	fp, r7
 8011362:	e02a      	b.n	80113ba <_dtoa_r+0x5e2>
 8011364:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011368:	e7d6      	b.n	8011318 <_dtoa_r+0x540>
 801136a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801136e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011372:	f8dd 8000 	ldr.w	r8, [sp]
 8011376:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801137a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801137e:	ee15 3a10 	vmov	r3, s10
 8011382:	3330      	adds	r3, #48	; 0x30
 8011384:	f808 3b01 	strb.w	r3, [r8], #1
 8011388:	9b00      	ldr	r3, [sp, #0]
 801138a:	eba8 0303 	sub.w	r3, r8, r3
 801138e:	4599      	cmp	r9, r3
 8011390:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011394:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011398:	d133      	bne.n	8011402 <_dtoa_r+0x62a>
 801139a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801139e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80113a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a6:	dc1a      	bgt.n	80113de <_dtoa_r+0x606>
 80113a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80113ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b0:	d103      	bne.n	80113ba <_dtoa_r+0x5e2>
 80113b2:	ee15 3a10 	vmov	r3, s10
 80113b6:	07d9      	lsls	r1, r3, #31
 80113b8:	d411      	bmi.n	80113de <_dtoa_r+0x606>
 80113ba:	4629      	mov	r1, r5
 80113bc:	4630      	mov	r0, r6
 80113be:	f000 fd07 	bl	8011dd0 <_Bfree>
 80113c2:	2300      	movs	r3, #0
 80113c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80113c6:	f888 3000 	strb.w	r3, [r8]
 80113ca:	f10b 0301 	add.w	r3, fp, #1
 80113ce:	6013      	str	r3, [r2, #0]
 80113d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	f43f ad4d 	beq.w	8010e72 <_dtoa_r+0x9a>
 80113d8:	f8c3 8000 	str.w	r8, [r3]
 80113dc:	e549      	b.n	8010e72 <_dtoa_r+0x9a>
 80113de:	465f      	mov	r7, fp
 80113e0:	4643      	mov	r3, r8
 80113e2:	4698      	mov	r8, r3
 80113e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80113e8:	2a39      	cmp	r2, #57	; 0x39
 80113ea:	d106      	bne.n	80113fa <_dtoa_r+0x622>
 80113ec:	9a00      	ldr	r2, [sp, #0]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d1f7      	bne.n	80113e2 <_dtoa_r+0x60a>
 80113f2:	9900      	ldr	r1, [sp, #0]
 80113f4:	2230      	movs	r2, #48	; 0x30
 80113f6:	3701      	adds	r7, #1
 80113f8:	700a      	strb	r2, [r1, #0]
 80113fa:	781a      	ldrb	r2, [r3, #0]
 80113fc:	3201      	adds	r2, #1
 80113fe:	701a      	strb	r2, [r3, #0]
 8011400:	e7ae      	b.n	8011360 <_dtoa_r+0x588>
 8011402:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011406:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801140e:	d1b2      	bne.n	8011376 <_dtoa_r+0x59e>
 8011410:	e7d3      	b.n	80113ba <_dtoa_r+0x5e2>
 8011412:	bf00      	nop
 8011414:	08013708 	.word	0x08013708
 8011418:	080136e0 	.word	0x080136e0
 801141c:	9908      	ldr	r1, [sp, #32]
 801141e:	2900      	cmp	r1, #0
 8011420:	f000 80d1 	beq.w	80115c6 <_dtoa_r+0x7ee>
 8011424:	9907      	ldr	r1, [sp, #28]
 8011426:	2901      	cmp	r1, #1
 8011428:	f300 80b4 	bgt.w	8011594 <_dtoa_r+0x7bc>
 801142c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801142e:	2900      	cmp	r1, #0
 8011430:	f000 80ac 	beq.w	801158c <_dtoa_r+0x7b4>
 8011434:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011438:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801143c:	461c      	mov	r4, r3
 801143e:	930a      	str	r3, [sp, #40]	; 0x28
 8011440:	9b05      	ldr	r3, [sp, #20]
 8011442:	4413      	add	r3, r2
 8011444:	9305      	str	r3, [sp, #20]
 8011446:	9b06      	ldr	r3, [sp, #24]
 8011448:	2101      	movs	r1, #1
 801144a:	4413      	add	r3, r2
 801144c:	4630      	mov	r0, r6
 801144e:	9306      	str	r3, [sp, #24]
 8011450:	f000 fd7a 	bl	8011f48 <__i2b>
 8011454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011456:	4607      	mov	r7, r0
 8011458:	f1b8 0f00 	cmp.w	r8, #0
 801145c:	dd0d      	ble.n	801147a <_dtoa_r+0x6a2>
 801145e:	9a06      	ldr	r2, [sp, #24]
 8011460:	2a00      	cmp	r2, #0
 8011462:	dd0a      	ble.n	801147a <_dtoa_r+0x6a2>
 8011464:	4542      	cmp	r2, r8
 8011466:	9905      	ldr	r1, [sp, #20]
 8011468:	bfa8      	it	ge
 801146a:	4642      	movge	r2, r8
 801146c:	1a89      	subs	r1, r1, r2
 801146e:	9105      	str	r1, [sp, #20]
 8011470:	9906      	ldr	r1, [sp, #24]
 8011472:	eba8 0802 	sub.w	r8, r8, r2
 8011476:	1a8a      	subs	r2, r1, r2
 8011478:	9206      	str	r2, [sp, #24]
 801147a:	b303      	cbz	r3, 80114be <_dtoa_r+0x6e6>
 801147c:	9a08      	ldr	r2, [sp, #32]
 801147e:	2a00      	cmp	r2, #0
 8011480:	f000 80a6 	beq.w	80115d0 <_dtoa_r+0x7f8>
 8011484:	2c00      	cmp	r4, #0
 8011486:	dd13      	ble.n	80114b0 <_dtoa_r+0x6d8>
 8011488:	4639      	mov	r1, r7
 801148a:	4622      	mov	r2, r4
 801148c:	4630      	mov	r0, r6
 801148e:	930c      	str	r3, [sp, #48]	; 0x30
 8011490:	f000 fe16 	bl	80120c0 <__pow5mult>
 8011494:	462a      	mov	r2, r5
 8011496:	4601      	mov	r1, r0
 8011498:	4607      	mov	r7, r0
 801149a:	4630      	mov	r0, r6
 801149c:	f000 fd6a 	bl	8011f74 <__multiply>
 80114a0:	4629      	mov	r1, r5
 80114a2:	900a      	str	r0, [sp, #40]	; 0x28
 80114a4:	4630      	mov	r0, r6
 80114a6:	f000 fc93 	bl	8011dd0 <_Bfree>
 80114aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114ae:	4615      	mov	r5, r2
 80114b0:	1b1a      	subs	r2, r3, r4
 80114b2:	d004      	beq.n	80114be <_dtoa_r+0x6e6>
 80114b4:	4629      	mov	r1, r5
 80114b6:	4630      	mov	r0, r6
 80114b8:	f000 fe02 	bl	80120c0 <__pow5mult>
 80114bc:	4605      	mov	r5, r0
 80114be:	2101      	movs	r1, #1
 80114c0:	4630      	mov	r0, r6
 80114c2:	f000 fd41 	bl	8011f48 <__i2b>
 80114c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	4604      	mov	r4, r0
 80114cc:	f340 8082 	ble.w	80115d4 <_dtoa_r+0x7fc>
 80114d0:	461a      	mov	r2, r3
 80114d2:	4601      	mov	r1, r0
 80114d4:	4630      	mov	r0, r6
 80114d6:	f000 fdf3 	bl	80120c0 <__pow5mult>
 80114da:	9b07      	ldr	r3, [sp, #28]
 80114dc:	2b01      	cmp	r3, #1
 80114de:	4604      	mov	r4, r0
 80114e0:	dd7b      	ble.n	80115da <_dtoa_r+0x802>
 80114e2:	2300      	movs	r3, #0
 80114e4:	930a      	str	r3, [sp, #40]	; 0x28
 80114e6:	6922      	ldr	r2, [r4, #16]
 80114e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80114ec:	6910      	ldr	r0, [r2, #16]
 80114ee:	f000 fcdb 	bl	8011ea8 <__hi0bits>
 80114f2:	f1c0 0020 	rsb	r0, r0, #32
 80114f6:	9b06      	ldr	r3, [sp, #24]
 80114f8:	4418      	add	r0, r3
 80114fa:	f010 001f 	ands.w	r0, r0, #31
 80114fe:	f000 808d 	beq.w	801161c <_dtoa_r+0x844>
 8011502:	f1c0 0220 	rsb	r2, r0, #32
 8011506:	2a04      	cmp	r2, #4
 8011508:	f340 8086 	ble.w	8011618 <_dtoa_r+0x840>
 801150c:	f1c0 001c 	rsb	r0, r0, #28
 8011510:	9b05      	ldr	r3, [sp, #20]
 8011512:	4403      	add	r3, r0
 8011514:	9305      	str	r3, [sp, #20]
 8011516:	9b06      	ldr	r3, [sp, #24]
 8011518:	4403      	add	r3, r0
 801151a:	4480      	add	r8, r0
 801151c:	9306      	str	r3, [sp, #24]
 801151e:	9b05      	ldr	r3, [sp, #20]
 8011520:	2b00      	cmp	r3, #0
 8011522:	dd05      	ble.n	8011530 <_dtoa_r+0x758>
 8011524:	4629      	mov	r1, r5
 8011526:	461a      	mov	r2, r3
 8011528:	4630      	mov	r0, r6
 801152a:	f000 fe23 	bl	8012174 <__lshift>
 801152e:	4605      	mov	r5, r0
 8011530:	9b06      	ldr	r3, [sp, #24]
 8011532:	2b00      	cmp	r3, #0
 8011534:	dd05      	ble.n	8011542 <_dtoa_r+0x76a>
 8011536:	4621      	mov	r1, r4
 8011538:	461a      	mov	r2, r3
 801153a:	4630      	mov	r0, r6
 801153c:	f000 fe1a 	bl	8012174 <__lshift>
 8011540:	4604      	mov	r4, r0
 8011542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011544:	2b00      	cmp	r3, #0
 8011546:	d06b      	beq.n	8011620 <_dtoa_r+0x848>
 8011548:	4621      	mov	r1, r4
 801154a:	4628      	mov	r0, r5
 801154c:	f000 fe7e 	bl	801224c <__mcmp>
 8011550:	2800      	cmp	r0, #0
 8011552:	da65      	bge.n	8011620 <_dtoa_r+0x848>
 8011554:	2300      	movs	r3, #0
 8011556:	4629      	mov	r1, r5
 8011558:	220a      	movs	r2, #10
 801155a:	4630      	mov	r0, r6
 801155c:	f000 fc5a 	bl	8011e14 <__multadd>
 8011560:	9b08      	ldr	r3, [sp, #32]
 8011562:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011566:	4605      	mov	r5, r0
 8011568:	2b00      	cmp	r3, #0
 801156a:	f000 8192 	beq.w	8011892 <_dtoa_r+0xaba>
 801156e:	4639      	mov	r1, r7
 8011570:	2300      	movs	r3, #0
 8011572:	220a      	movs	r2, #10
 8011574:	4630      	mov	r0, r6
 8011576:	f000 fc4d 	bl	8011e14 <__multadd>
 801157a:	f1ba 0f00 	cmp.w	sl, #0
 801157e:	4607      	mov	r7, r0
 8011580:	f300 808e 	bgt.w	80116a0 <_dtoa_r+0x8c8>
 8011584:	9b07      	ldr	r3, [sp, #28]
 8011586:	2b02      	cmp	r3, #2
 8011588:	dc51      	bgt.n	801162e <_dtoa_r+0x856>
 801158a:	e089      	b.n	80116a0 <_dtoa_r+0x8c8>
 801158c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801158e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011592:	e751      	b.n	8011438 <_dtoa_r+0x660>
 8011594:	f109 34ff 	add.w	r4, r9, #4294967295
 8011598:	42a3      	cmp	r3, r4
 801159a:	bfbf      	itttt	lt
 801159c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801159e:	1ae3      	sublt	r3, r4, r3
 80115a0:	18d2      	addlt	r2, r2, r3
 80115a2:	4613      	movlt	r3, r2
 80115a4:	bfb7      	itett	lt
 80115a6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80115a8:	1b1c      	subge	r4, r3, r4
 80115aa:	4623      	movlt	r3, r4
 80115ac:	2400      	movlt	r4, #0
 80115ae:	f1b9 0f00 	cmp.w	r9, #0
 80115b2:	bfb5      	itete	lt
 80115b4:	9a05      	ldrlt	r2, [sp, #20]
 80115b6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80115ba:	eba2 0809 	sublt.w	r8, r2, r9
 80115be:	464a      	movge	r2, r9
 80115c0:	bfb8      	it	lt
 80115c2:	2200      	movlt	r2, #0
 80115c4:	e73b      	b.n	801143e <_dtoa_r+0x666>
 80115c6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80115ca:	9f08      	ldr	r7, [sp, #32]
 80115cc:	461c      	mov	r4, r3
 80115ce:	e743      	b.n	8011458 <_dtoa_r+0x680>
 80115d0:	461a      	mov	r2, r3
 80115d2:	e76f      	b.n	80114b4 <_dtoa_r+0x6dc>
 80115d4:	9b07      	ldr	r3, [sp, #28]
 80115d6:	2b01      	cmp	r3, #1
 80115d8:	dc18      	bgt.n	801160c <_dtoa_r+0x834>
 80115da:	9b02      	ldr	r3, [sp, #8]
 80115dc:	b9b3      	cbnz	r3, 801160c <_dtoa_r+0x834>
 80115de:	9b03      	ldr	r3, [sp, #12]
 80115e0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80115e4:	b9a2      	cbnz	r2, 8011610 <_dtoa_r+0x838>
 80115e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80115ea:	0d12      	lsrs	r2, r2, #20
 80115ec:	0512      	lsls	r2, r2, #20
 80115ee:	b18a      	cbz	r2, 8011614 <_dtoa_r+0x83c>
 80115f0:	9b05      	ldr	r3, [sp, #20]
 80115f2:	3301      	adds	r3, #1
 80115f4:	9305      	str	r3, [sp, #20]
 80115f6:	9b06      	ldr	r3, [sp, #24]
 80115f8:	3301      	adds	r3, #1
 80115fa:	9306      	str	r3, [sp, #24]
 80115fc:	2301      	movs	r3, #1
 80115fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011602:	2b00      	cmp	r3, #0
 8011604:	f47f af6f 	bne.w	80114e6 <_dtoa_r+0x70e>
 8011608:	2001      	movs	r0, #1
 801160a:	e774      	b.n	80114f6 <_dtoa_r+0x71e>
 801160c:	2300      	movs	r3, #0
 801160e:	e7f6      	b.n	80115fe <_dtoa_r+0x826>
 8011610:	9b02      	ldr	r3, [sp, #8]
 8011612:	e7f4      	b.n	80115fe <_dtoa_r+0x826>
 8011614:	920a      	str	r2, [sp, #40]	; 0x28
 8011616:	e7f3      	b.n	8011600 <_dtoa_r+0x828>
 8011618:	d081      	beq.n	801151e <_dtoa_r+0x746>
 801161a:	4610      	mov	r0, r2
 801161c:	301c      	adds	r0, #28
 801161e:	e777      	b.n	8011510 <_dtoa_r+0x738>
 8011620:	f1b9 0f00 	cmp.w	r9, #0
 8011624:	dc37      	bgt.n	8011696 <_dtoa_r+0x8be>
 8011626:	9b07      	ldr	r3, [sp, #28]
 8011628:	2b02      	cmp	r3, #2
 801162a:	dd34      	ble.n	8011696 <_dtoa_r+0x8be>
 801162c:	46ca      	mov	sl, r9
 801162e:	f1ba 0f00 	cmp.w	sl, #0
 8011632:	d10d      	bne.n	8011650 <_dtoa_r+0x878>
 8011634:	4621      	mov	r1, r4
 8011636:	4653      	mov	r3, sl
 8011638:	2205      	movs	r2, #5
 801163a:	4630      	mov	r0, r6
 801163c:	f000 fbea 	bl	8011e14 <__multadd>
 8011640:	4601      	mov	r1, r0
 8011642:	4604      	mov	r4, r0
 8011644:	4628      	mov	r0, r5
 8011646:	f000 fe01 	bl	801224c <__mcmp>
 801164a:	2800      	cmp	r0, #0
 801164c:	f73f adde 	bgt.w	801120c <_dtoa_r+0x434>
 8011650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011652:	f8dd 8000 	ldr.w	r8, [sp]
 8011656:	ea6f 0b03 	mvn.w	fp, r3
 801165a:	f04f 0900 	mov.w	r9, #0
 801165e:	4621      	mov	r1, r4
 8011660:	4630      	mov	r0, r6
 8011662:	f000 fbb5 	bl	8011dd0 <_Bfree>
 8011666:	2f00      	cmp	r7, #0
 8011668:	f43f aea7 	beq.w	80113ba <_dtoa_r+0x5e2>
 801166c:	f1b9 0f00 	cmp.w	r9, #0
 8011670:	d005      	beq.n	801167e <_dtoa_r+0x8a6>
 8011672:	45b9      	cmp	r9, r7
 8011674:	d003      	beq.n	801167e <_dtoa_r+0x8a6>
 8011676:	4649      	mov	r1, r9
 8011678:	4630      	mov	r0, r6
 801167a:	f000 fba9 	bl	8011dd0 <_Bfree>
 801167e:	4639      	mov	r1, r7
 8011680:	4630      	mov	r0, r6
 8011682:	f000 fba5 	bl	8011dd0 <_Bfree>
 8011686:	e698      	b.n	80113ba <_dtoa_r+0x5e2>
 8011688:	2400      	movs	r4, #0
 801168a:	4627      	mov	r7, r4
 801168c:	e7e0      	b.n	8011650 <_dtoa_r+0x878>
 801168e:	46bb      	mov	fp, r7
 8011690:	4604      	mov	r4, r0
 8011692:	4607      	mov	r7, r0
 8011694:	e5ba      	b.n	801120c <_dtoa_r+0x434>
 8011696:	9b08      	ldr	r3, [sp, #32]
 8011698:	46ca      	mov	sl, r9
 801169a:	2b00      	cmp	r3, #0
 801169c:	f000 8100 	beq.w	80118a0 <_dtoa_r+0xac8>
 80116a0:	f1b8 0f00 	cmp.w	r8, #0
 80116a4:	dd05      	ble.n	80116b2 <_dtoa_r+0x8da>
 80116a6:	4639      	mov	r1, r7
 80116a8:	4642      	mov	r2, r8
 80116aa:	4630      	mov	r0, r6
 80116ac:	f000 fd62 	bl	8012174 <__lshift>
 80116b0:	4607      	mov	r7, r0
 80116b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d05d      	beq.n	8011774 <_dtoa_r+0x99c>
 80116b8:	6879      	ldr	r1, [r7, #4]
 80116ba:	4630      	mov	r0, r6
 80116bc:	f000 fb48 	bl	8011d50 <_Balloc>
 80116c0:	4680      	mov	r8, r0
 80116c2:	b928      	cbnz	r0, 80116d0 <_dtoa_r+0x8f8>
 80116c4:	4b82      	ldr	r3, [pc, #520]	; (80118d0 <_dtoa_r+0xaf8>)
 80116c6:	4602      	mov	r2, r0
 80116c8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80116cc:	f7ff bb9a 	b.w	8010e04 <_dtoa_r+0x2c>
 80116d0:	693a      	ldr	r2, [r7, #16]
 80116d2:	3202      	adds	r2, #2
 80116d4:	0092      	lsls	r2, r2, #2
 80116d6:	f107 010c 	add.w	r1, r7, #12
 80116da:	300c      	adds	r0, #12
 80116dc:	f000 fb2a 	bl	8011d34 <memcpy>
 80116e0:	2201      	movs	r2, #1
 80116e2:	4641      	mov	r1, r8
 80116e4:	4630      	mov	r0, r6
 80116e6:	f000 fd45 	bl	8012174 <__lshift>
 80116ea:	9b00      	ldr	r3, [sp, #0]
 80116ec:	3301      	adds	r3, #1
 80116ee:	9305      	str	r3, [sp, #20]
 80116f0:	9b00      	ldr	r3, [sp, #0]
 80116f2:	4453      	add	r3, sl
 80116f4:	9309      	str	r3, [sp, #36]	; 0x24
 80116f6:	9b02      	ldr	r3, [sp, #8]
 80116f8:	f003 0301 	and.w	r3, r3, #1
 80116fc:	46b9      	mov	r9, r7
 80116fe:	9308      	str	r3, [sp, #32]
 8011700:	4607      	mov	r7, r0
 8011702:	9b05      	ldr	r3, [sp, #20]
 8011704:	4621      	mov	r1, r4
 8011706:	3b01      	subs	r3, #1
 8011708:	4628      	mov	r0, r5
 801170a:	9302      	str	r3, [sp, #8]
 801170c:	f7ff fad8 	bl	8010cc0 <quorem>
 8011710:	4603      	mov	r3, r0
 8011712:	3330      	adds	r3, #48	; 0x30
 8011714:	9006      	str	r0, [sp, #24]
 8011716:	4649      	mov	r1, r9
 8011718:	4628      	mov	r0, r5
 801171a:	930a      	str	r3, [sp, #40]	; 0x28
 801171c:	f000 fd96 	bl	801224c <__mcmp>
 8011720:	463a      	mov	r2, r7
 8011722:	4682      	mov	sl, r0
 8011724:	4621      	mov	r1, r4
 8011726:	4630      	mov	r0, r6
 8011728:	f000 fdac 	bl	8012284 <__mdiff>
 801172c:	68c2      	ldr	r2, [r0, #12]
 801172e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011730:	4680      	mov	r8, r0
 8011732:	bb0a      	cbnz	r2, 8011778 <_dtoa_r+0x9a0>
 8011734:	4601      	mov	r1, r0
 8011736:	4628      	mov	r0, r5
 8011738:	f000 fd88 	bl	801224c <__mcmp>
 801173c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801173e:	4602      	mov	r2, r0
 8011740:	4641      	mov	r1, r8
 8011742:	4630      	mov	r0, r6
 8011744:	920e      	str	r2, [sp, #56]	; 0x38
 8011746:	930a      	str	r3, [sp, #40]	; 0x28
 8011748:	f000 fb42 	bl	8011dd0 <_Bfree>
 801174c:	9b07      	ldr	r3, [sp, #28]
 801174e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011750:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011754:	ea43 0102 	orr.w	r1, r3, r2
 8011758:	9b08      	ldr	r3, [sp, #32]
 801175a:	430b      	orrs	r3, r1
 801175c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801175e:	d10d      	bne.n	801177c <_dtoa_r+0x9a4>
 8011760:	2b39      	cmp	r3, #57	; 0x39
 8011762:	d029      	beq.n	80117b8 <_dtoa_r+0x9e0>
 8011764:	f1ba 0f00 	cmp.w	sl, #0
 8011768:	dd01      	ble.n	801176e <_dtoa_r+0x996>
 801176a:	9b06      	ldr	r3, [sp, #24]
 801176c:	3331      	adds	r3, #49	; 0x31
 801176e:	9a02      	ldr	r2, [sp, #8]
 8011770:	7013      	strb	r3, [r2, #0]
 8011772:	e774      	b.n	801165e <_dtoa_r+0x886>
 8011774:	4638      	mov	r0, r7
 8011776:	e7b8      	b.n	80116ea <_dtoa_r+0x912>
 8011778:	2201      	movs	r2, #1
 801177a:	e7e1      	b.n	8011740 <_dtoa_r+0x968>
 801177c:	f1ba 0f00 	cmp.w	sl, #0
 8011780:	db06      	blt.n	8011790 <_dtoa_r+0x9b8>
 8011782:	9907      	ldr	r1, [sp, #28]
 8011784:	ea41 0a0a 	orr.w	sl, r1, sl
 8011788:	9908      	ldr	r1, [sp, #32]
 801178a:	ea5a 0101 	orrs.w	r1, sl, r1
 801178e:	d120      	bne.n	80117d2 <_dtoa_r+0x9fa>
 8011790:	2a00      	cmp	r2, #0
 8011792:	ddec      	ble.n	801176e <_dtoa_r+0x996>
 8011794:	4629      	mov	r1, r5
 8011796:	2201      	movs	r2, #1
 8011798:	4630      	mov	r0, r6
 801179a:	9305      	str	r3, [sp, #20]
 801179c:	f000 fcea 	bl	8012174 <__lshift>
 80117a0:	4621      	mov	r1, r4
 80117a2:	4605      	mov	r5, r0
 80117a4:	f000 fd52 	bl	801224c <__mcmp>
 80117a8:	2800      	cmp	r0, #0
 80117aa:	9b05      	ldr	r3, [sp, #20]
 80117ac:	dc02      	bgt.n	80117b4 <_dtoa_r+0x9dc>
 80117ae:	d1de      	bne.n	801176e <_dtoa_r+0x996>
 80117b0:	07da      	lsls	r2, r3, #31
 80117b2:	d5dc      	bpl.n	801176e <_dtoa_r+0x996>
 80117b4:	2b39      	cmp	r3, #57	; 0x39
 80117b6:	d1d8      	bne.n	801176a <_dtoa_r+0x992>
 80117b8:	9a02      	ldr	r2, [sp, #8]
 80117ba:	2339      	movs	r3, #57	; 0x39
 80117bc:	7013      	strb	r3, [r2, #0]
 80117be:	4643      	mov	r3, r8
 80117c0:	4698      	mov	r8, r3
 80117c2:	3b01      	subs	r3, #1
 80117c4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80117c8:	2a39      	cmp	r2, #57	; 0x39
 80117ca:	d051      	beq.n	8011870 <_dtoa_r+0xa98>
 80117cc:	3201      	adds	r2, #1
 80117ce:	701a      	strb	r2, [r3, #0]
 80117d0:	e745      	b.n	801165e <_dtoa_r+0x886>
 80117d2:	2a00      	cmp	r2, #0
 80117d4:	dd03      	ble.n	80117de <_dtoa_r+0xa06>
 80117d6:	2b39      	cmp	r3, #57	; 0x39
 80117d8:	d0ee      	beq.n	80117b8 <_dtoa_r+0x9e0>
 80117da:	3301      	adds	r3, #1
 80117dc:	e7c7      	b.n	801176e <_dtoa_r+0x996>
 80117de:	9a05      	ldr	r2, [sp, #20]
 80117e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80117e2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80117e6:	428a      	cmp	r2, r1
 80117e8:	d02b      	beq.n	8011842 <_dtoa_r+0xa6a>
 80117ea:	4629      	mov	r1, r5
 80117ec:	2300      	movs	r3, #0
 80117ee:	220a      	movs	r2, #10
 80117f0:	4630      	mov	r0, r6
 80117f2:	f000 fb0f 	bl	8011e14 <__multadd>
 80117f6:	45b9      	cmp	r9, r7
 80117f8:	4605      	mov	r5, r0
 80117fa:	f04f 0300 	mov.w	r3, #0
 80117fe:	f04f 020a 	mov.w	r2, #10
 8011802:	4649      	mov	r1, r9
 8011804:	4630      	mov	r0, r6
 8011806:	d107      	bne.n	8011818 <_dtoa_r+0xa40>
 8011808:	f000 fb04 	bl	8011e14 <__multadd>
 801180c:	4681      	mov	r9, r0
 801180e:	4607      	mov	r7, r0
 8011810:	9b05      	ldr	r3, [sp, #20]
 8011812:	3301      	adds	r3, #1
 8011814:	9305      	str	r3, [sp, #20]
 8011816:	e774      	b.n	8011702 <_dtoa_r+0x92a>
 8011818:	f000 fafc 	bl	8011e14 <__multadd>
 801181c:	4639      	mov	r1, r7
 801181e:	4681      	mov	r9, r0
 8011820:	2300      	movs	r3, #0
 8011822:	220a      	movs	r2, #10
 8011824:	4630      	mov	r0, r6
 8011826:	f000 faf5 	bl	8011e14 <__multadd>
 801182a:	4607      	mov	r7, r0
 801182c:	e7f0      	b.n	8011810 <_dtoa_r+0xa38>
 801182e:	f1ba 0f00 	cmp.w	sl, #0
 8011832:	9a00      	ldr	r2, [sp, #0]
 8011834:	bfcc      	ite	gt
 8011836:	46d0      	movgt	r8, sl
 8011838:	f04f 0801 	movle.w	r8, #1
 801183c:	4490      	add	r8, r2
 801183e:	f04f 0900 	mov.w	r9, #0
 8011842:	4629      	mov	r1, r5
 8011844:	2201      	movs	r2, #1
 8011846:	4630      	mov	r0, r6
 8011848:	9302      	str	r3, [sp, #8]
 801184a:	f000 fc93 	bl	8012174 <__lshift>
 801184e:	4621      	mov	r1, r4
 8011850:	4605      	mov	r5, r0
 8011852:	f000 fcfb 	bl	801224c <__mcmp>
 8011856:	2800      	cmp	r0, #0
 8011858:	dcb1      	bgt.n	80117be <_dtoa_r+0x9e6>
 801185a:	d102      	bne.n	8011862 <_dtoa_r+0xa8a>
 801185c:	9b02      	ldr	r3, [sp, #8]
 801185e:	07db      	lsls	r3, r3, #31
 8011860:	d4ad      	bmi.n	80117be <_dtoa_r+0x9e6>
 8011862:	4643      	mov	r3, r8
 8011864:	4698      	mov	r8, r3
 8011866:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801186a:	2a30      	cmp	r2, #48	; 0x30
 801186c:	d0fa      	beq.n	8011864 <_dtoa_r+0xa8c>
 801186e:	e6f6      	b.n	801165e <_dtoa_r+0x886>
 8011870:	9a00      	ldr	r2, [sp, #0]
 8011872:	429a      	cmp	r2, r3
 8011874:	d1a4      	bne.n	80117c0 <_dtoa_r+0x9e8>
 8011876:	f10b 0b01 	add.w	fp, fp, #1
 801187a:	2331      	movs	r3, #49	; 0x31
 801187c:	e778      	b.n	8011770 <_dtoa_r+0x998>
 801187e:	4b15      	ldr	r3, [pc, #84]	; (80118d4 <_dtoa_r+0xafc>)
 8011880:	f7ff bb12 	b.w	8010ea8 <_dtoa_r+0xd0>
 8011884:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011886:	2b00      	cmp	r3, #0
 8011888:	f47f aaee 	bne.w	8010e68 <_dtoa_r+0x90>
 801188c:	4b12      	ldr	r3, [pc, #72]	; (80118d8 <_dtoa_r+0xb00>)
 801188e:	f7ff bb0b 	b.w	8010ea8 <_dtoa_r+0xd0>
 8011892:	f1ba 0f00 	cmp.w	sl, #0
 8011896:	dc03      	bgt.n	80118a0 <_dtoa_r+0xac8>
 8011898:	9b07      	ldr	r3, [sp, #28]
 801189a:	2b02      	cmp	r3, #2
 801189c:	f73f aec7 	bgt.w	801162e <_dtoa_r+0x856>
 80118a0:	f8dd 8000 	ldr.w	r8, [sp]
 80118a4:	4621      	mov	r1, r4
 80118a6:	4628      	mov	r0, r5
 80118a8:	f7ff fa0a 	bl	8010cc0 <quorem>
 80118ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80118b0:	f808 3b01 	strb.w	r3, [r8], #1
 80118b4:	9a00      	ldr	r2, [sp, #0]
 80118b6:	eba8 0202 	sub.w	r2, r8, r2
 80118ba:	4592      	cmp	sl, r2
 80118bc:	ddb7      	ble.n	801182e <_dtoa_r+0xa56>
 80118be:	4629      	mov	r1, r5
 80118c0:	2300      	movs	r3, #0
 80118c2:	220a      	movs	r2, #10
 80118c4:	4630      	mov	r0, r6
 80118c6:	f000 faa5 	bl	8011e14 <__multadd>
 80118ca:	4605      	mov	r5, r0
 80118cc:	e7ea      	b.n	80118a4 <_dtoa_r+0xacc>
 80118ce:	bf00      	nop
 80118d0:	0801360f 	.word	0x0801360f
 80118d4:	08013568 	.word	0x08013568
 80118d8:	0801358c 	.word	0x0801358c

080118dc <__sflush_r>:
 80118dc:	898a      	ldrh	r2, [r1, #12]
 80118de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e2:	4605      	mov	r5, r0
 80118e4:	0710      	lsls	r0, r2, #28
 80118e6:	460c      	mov	r4, r1
 80118e8:	d458      	bmi.n	801199c <__sflush_r+0xc0>
 80118ea:	684b      	ldr	r3, [r1, #4]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	dc05      	bgt.n	80118fc <__sflush_r+0x20>
 80118f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	dc02      	bgt.n	80118fc <__sflush_r+0x20>
 80118f6:	2000      	movs	r0, #0
 80118f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80118fe:	2e00      	cmp	r6, #0
 8011900:	d0f9      	beq.n	80118f6 <__sflush_r+0x1a>
 8011902:	2300      	movs	r3, #0
 8011904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011908:	682f      	ldr	r7, [r5, #0]
 801190a:	602b      	str	r3, [r5, #0]
 801190c:	d032      	beq.n	8011974 <__sflush_r+0x98>
 801190e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011910:	89a3      	ldrh	r3, [r4, #12]
 8011912:	075a      	lsls	r2, r3, #29
 8011914:	d505      	bpl.n	8011922 <__sflush_r+0x46>
 8011916:	6863      	ldr	r3, [r4, #4]
 8011918:	1ac0      	subs	r0, r0, r3
 801191a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801191c:	b10b      	cbz	r3, 8011922 <__sflush_r+0x46>
 801191e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011920:	1ac0      	subs	r0, r0, r3
 8011922:	2300      	movs	r3, #0
 8011924:	4602      	mov	r2, r0
 8011926:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011928:	6a21      	ldr	r1, [r4, #32]
 801192a:	4628      	mov	r0, r5
 801192c:	47b0      	blx	r6
 801192e:	1c43      	adds	r3, r0, #1
 8011930:	89a3      	ldrh	r3, [r4, #12]
 8011932:	d106      	bne.n	8011942 <__sflush_r+0x66>
 8011934:	6829      	ldr	r1, [r5, #0]
 8011936:	291d      	cmp	r1, #29
 8011938:	d82c      	bhi.n	8011994 <__sflush_r+0xb8>
 801193a:	4a2a      	ldr	r2, [pc, #168]	; (80119e4 <__sflush_r+0x108>)
 801193c:	40ca      	lsrs	r2, r1
 801193e:	07d6      	lsls	r6, r2, #31
 8011940:	d528      	bpl.n	8011994 <__sflush_r+0xb8>
 8011942:	2200      	movs	r2, #0
 8011944:	6062      	str	r2, [r4, #4]
 8011946:	04d9      	lsls	r1, r3, #19
 8011948:	6922      	ldr	r2, [r4, #16]
 801194a:	6022      	str	r2, [r4, #0]
 801194c:	d504      	bpl.n	8011958 <__sflush_r+0x7c>
 801194e:	1c42      	adds	r2, r0, #1
 8011950:	d101      	bne.n	8011956 <__sflush_r+0x7a>
 8011952:	682b      	ldr	r3, [r5, #0]
 8011954:	b903      	cbnz	r3, 8011958 <__sflush_r+0x7c>
 8011956:	6560      	str	r0, [r4, #84]	; 0x54
 8011958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801195a:	602f      	str	r7, [r5, #0]
 801195c:	2900      	cmp	r1, #0
 801195e:	d0ca      	beq.n	80118f6 <__sflush_r+0x1a>
 8011960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011964:	4299      	cmp	r1, r3
 8011966:	d002      	beq.n	801196e <__sflush_r+0x92>
 8011968:	4628      	mov	r0, r5
 801196a:	f000 fd7f 	bl	801246c <_free_r>
 801196e:	2000      	movs	r0, #0
 8011970:	6360      	str	r0, [r4, #52]	; 0x34
 8011972:	e7c1      	b.n	80118f8 <__sflush_r+0x1c>
 8011974:	6a21      	ldr	r1, [r4, #32]
 8011976:	2301      	movs	r3, #1
 8011978:	4628      	mov	r0, r5
 801197a:	47b0      	blx	r6
 801197c:	1c41      	adds	r1, r0, #1
 801197e:	d1c7      	bne.n	8011910 <__sflush_r+0x34>
 8011980:	682b      	ldr	r3, [r5, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d0c4      	beq.n	8011910 <__sflush_r+0x34>
 8011986:	2b1d      	cmp	r3, #29
 8011988:	d001      	beq.n	801198e <__sflush_r+0xb2>
 801198a:	2b16      	cmp	r3, #22
 801198c:	d101      	bne.n	8011992 <__sflush_r+0xb6>
 801198e:	602f      	str	r7, [r5, #0]
 8011990:	e7b1      	b.n	80118f6 <__sflush_r+0x1a>
 8011992:	89a3      	ldrh	r3, [r4, #12]
 8011994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011998:	81a3      	strh	r3, [r4, #12]
 801199a:	e7ad      	b.n	80118f8 <__sflush_r+0x1c>
 801199c:	690f      	ldr	r7, [r1, #16]
 801199e:	2f00      	cmp	r7, #0
 80119a0:	d0a9      	beq.n	80118f6 <__sflush_r+0x1a>
 80119a2:	0793      	lsls	r3, r2, #30
 80119a4:	680e      	ldr	r6, [r1, #0]
 80119a6:	bf08      	it	eq
 80119a8:	694b      	ldreq	r3, [r1, #20]
 80119aa:	600f      	str	r7, [r1, #0]
 80119ac:	bf18      	it	ne
 80119ae:	2300      	movne	r3, #0
 80119b0:	eba6 0807 	sub.w	r8, r6, r7
 80119b4:	608b      	str	r3, [r1, #8]
 80119b6:	f1b8 0f00 	cmp.w	r8, #0
 80119ba:	dd9c      	ble.n	80118f6 <__sflush_r+0x1a>
 80119bc:	6a21      	ldr	r1, [r4, #32]
 80119be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80119c0:	4643      	mov	r3, r8
 80119c2:	463a      	mov	r2, r7
 80119c4:	4628      	mov	r0, r5
 80119c6:	47b0      	blx	r6
 80119c8:	2800      	cmp	r0, #0
 80119ca:	dc06      	bgt.n	80119da <__sflush_r+0xfe>
 80119cc:	89a3      	ldrh	r3, [r4, #12]
 80119ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119d2:	81a3      	strh	r3, [r4, #12]
 80119d4:	f04f 30ff 	mov.w	r0, #4294967295
 80119d8:	e78e      	b.n	80118f8 <__sflush_r+0x1c>
 80119da:	4407      	add	r7, r0
 80119dc:	eba8 0800 	sub.w	r8, r8, r0
 80119e0:	e7e9      	b.n	80119b6 <__sflush_r+0xda>
 80119e2:	bf00      	nop
 80119e4:	20400001 	.word	0x20400001

080119e8 <_fflush_r>:
 80119e8:	b538      	push	{r3, r4, r5, lr}
 80119ea:	690b      	ldr	r3, [r1, #16]
 80119ec:	4605      	mov	r5, r0
 80119ee:	460c      	mov	r4, r1
 80119f0:	b913      	cbnz	r3, 80119f8 <_fflush_r+0x10>
 80119f2:	2500      	movs	r5, #0
 80119f4:	4628      	mov	r0, r5
 80119f6:	bd38      	pop	{r3, r4, r5, pc}
 80119f8:	b118      	cbz	r0, 8011a02 <_fflush_r+0x1a>
 80119fa:	6983      	ldr	r3, [r0, #24]
 80119fc:	b90b      	cbnz	r3, 8011a02 <_fflush_r+0x1a>
 80119fe:	f000 f887 	bl	8011b10 <__sinit>
 8011a02:	4b14      	ldr	r3, [pc, #80]	; (8011a54 <_fflush_r+0x6c>)
 8011a04:	429c      	cmp	r4, r3
 8011a06:	d11b      	bne.n	8011a40 <_fflush_r+0x58>
 8011a08:	686c      	ldr	r4, [r5, #4]
 8011a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d0ef      	beq.n	80119f2 <_fflush_r+0xa>
 8011a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011a14:	07d0      	lsls	r0, r2, #31
 8011a16:	d404      	bmi.n	8011a22 <_fflush_r+0x3a>
 8011a18:	0599      	lsls	r1, r3, #22
 8011a1a:	d402      	bmi.n	8011a22 <_fflush_r+0x3a>
 8011a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a1e:	f000 f91a 	bl	8011c56 <__retarget_lock_acquire_recursive>
 8011a22:	4628      	mov	r0, r5
 8011a24:	4621      	mov	r1, r4
 8011a26:	f7ff ff59 	bl	80118dc <__sflush_r>
 8011a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011a2c:	07da      	lsls	r2, r3, #31
 8011a2e:	4605      	mov	r5, r0
 8011a30:	d4e0      	bmi.n	80119f4 <_fflush_r+0xc>
 8011a32:	89a3      	ldrh	r3, [r4, #12]
 8011a34:	059b      	lsls	r3, r3, #22
 8011a36:	d4dd      	bmi.n	80119f4 <_fflush_r+0xc>
 8011a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a3a:	f000 f90d 	bl	8011c58 <__retarget_lock_release_recursive>
 8011a3e:	e7d9      	b.n	80119f4 <_fflush_r+0xc>
 8011a40:	4b05      	ldr	r3, [pc, #20]	; (8011a58 <_fflush_r+0x70>)
 8011a42:	429c      	cmp	r4, r3
 8011a44:	d101      	bne.n	8011a4a <_fflush_r+0x62>
 8011a46:	68ac      	ldr	r4, [r5, #8]
 8011a48:	e7df      	b.n	8011a0a <_fflush_r+0x22>
 8011a4a:	4b04      	ldr	r3, [pc, #16]	; (8011a5c <_fflush_r+0x74>)
 8011a4c:	429c      	cmp	r4, r3
 8011a4e:	bf08      	it	eq
 8011a50:	68ec      	ldreq	r4, [r5, #12]
 8011a52:	e7da      	b.n	8011a0a <_fflush_r+0x22>
 8011a54:	08013640 	.word	0x08013640
 8011a58:	08013660 	.word	0x08013660
 8011a5c:	08013620 	.word	0x08013620

08011a60 <std>:
 8011a60:	2300      	movs	r3, #0
 8011a62:	b510      	push	{r4, lr}
 8011a64:	4604      	mov	r4, r0
 8011a66:	e9c0 3300 	strd	r3, r3, [r0]
 8011a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a6e:	6083      	str	r3, [r0, #8]
 8011a70:	8181      	strh	r1, [r0, #12]
 8011a72:	6643      	str	r3, [r0, #100]	; 0x64
 8011a74:	81c2      	strh	r2, [r0, #14]
 8011a76:	6183      	str	r3, [r0, #24]
 8011a78:	4619      	mov	r1, r3
 8011a7a:	2208      	movs	r2, #8
 8011a7c:	305c      	adds	r0, #92	; 0x5c
 8011a7e:	f7fe fb85 	bl	801018c <memset>
 8011a82:	4b05      	ldr	r3, [pc, #20]	; (8011a98 <std+0x38>)
 8011a84:	6263      	str	r3, [r4, #36]	; 0x24
 8011a86:	4b05      	ldr	r3, [pc, #20]	; (8011a9c <std+0x3c>)
 8011a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8011a8a:	4b05      	ldr	r3, [pc, #20]	; (8011aa0 <std+0x40>)
 8011a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011a8e:	4b05      	ldr	r3, [pc, #20]	; (8011aa4 <std+0x44>)
 8011a90:	6224      	str	r4, [r4, #32]
 8011a92:	6323      	str	r3, [r4, #48]	; 0x30
 8011a94:	bd10      	pop	{r4, pc}
 8011a96:	bf00      	nop
 8011a98:	08012895 	.word	0x08012895
 8011a9c:	080128b7 	.word	0x080128b7
 8011aa0:	080128ef 	.word	0x080128ef
 8011aa4:	08012913 	.word	0x08012913

08011aa8 <_cleanup_r>:
 8011aa8:	4901      	ldr	r1, [pc, #4]	; (8011ab0 <_cleanup_r+0x8>)
 8011aaa:	f000 b8af 	b.w	8011c0c <_fwalk_reent>
 8011aae:	bf00      	nop
 8011ab0:	080119e9 	.word	0x080119e9

08011ab4 <__sfmoreglue>:
 8011ab4:	b570      	push	{r4, r5, r6, lr}
 8011ab6:	1e4a      	subs	r2, r1, #1
 8011ab8:	2568      	movs	r5, #104	; 0x68
 8011aba:	4355      	muls	r5, r2
 8011abc:	460e      	mov	r6, r1
 8011abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011ac2:	f000 fd23 	bl	801250c <_malloc_r>
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	b140      	cbz	r0, 8011adc <__sfmoreglue+0x28>
 8011aca:	2100      	movs	r1, #0
 8011acc:	e9c0 1600 	strd	r1, r6, [r0]
 8011ad0:	300c      	adds	r0, #12
 8011ad2:	60a0      	str	r0, [r4, #8]
 8011ad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011ad8:	f7fe fb58 	bl	801018c <memset>
 8011adc:	4620      	mov	r0, r4
 8011ade:	bd70      	pop	{r4, r5, r6, pc}

08011ae0 <__sfp_lock_acquire>:
 8011ae0:	4801      	ldr	r0, [pc, #4]	; (8011ae8 <__sfp_lock_acquire+0x8>)
 8011ae2:	f000 b8b8 	b.w	8011c56 <__retarget_lock_acquire_recursive>
 8011ae6:	bf00      	nop
 8011ae8:	2400069c 	.word	0x2400069c

08011aec <__sfp_lock_release>:
 8011aec:	4801      	ldr	r0, [pc, #4]	; (8011af4 <__sfp_lock_release+0x8>)
 8011aee:	f000 b8b3 	b.w	8011c58 <__retarget_lock_release_recursive>
 8011af2:	bf00      	nop
 8011af4:	2400069c 	.word	0x2400069c

08011af8 <__sinit_lock_acquire>:
 8011af8:	4801      	ldr	r0, [pc, #4]	; (8011b00 <__sinit_lock_acquire+0x8>)
 8011afa:	f000 b8ac 	b.w	8011c56 <__retarget_lock_acquire_recursive>
 8011afe:	bf00      	nop
 8011b00:	24000697 	.word	0x24000697

08011b04 <__sinit_lock_release>:
 8011b04:	4801      	ldr	r0, [pc, #4]	; (8011b0c <__sinit_lock_release+0x8>)
 8011b06:	f000 b8a7 	b.w	8011c58 <__retarget_lock_release_recursive>
 8011b0a:	bf00      	nop
 8011b0c:	24000697 	.word	0x24000697

08011b10 <__sinit>:
 8011b10:	b510      	push	{r4, lr}
 8011b12:	4604      	mov	r4, r0
 8011b14:	f7ff fff0 	bl	8011af8 <__sinit_lock_acquire>
 8011b18:	69a3      	ldr	r3, [r4, #24]
 8011b1a:	b11b      	cbz	r3, 8011b24 <__sinit+0x14>
 8011b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b20:	f7ff bff0 	b.w	8011b04 <__sinit_lock_release>
 8011b24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011b28:	6523      	str	r3, [r4, #80]	; 0x50
 8011b2a:	4b13      	ldr	r3, [pc, #76]	; (8011b78 <__sinit+0x68>)
 8011b2c:	4a13      	ldr	r2, [pc, #76]	; (8011b7c <__sinit+0x6c>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	62a2      	str	r2, [r4, #40]	; 0x28
 8011b32:	42a3      	cmp	r3, r4
 8011b34:	bf04      	itt	eq
 8011b36:	2301      	moveq	r3, #1
 8011b38:	61a3      	streq	r3, [r4, #24]
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f000 f820 	bl	8011b80 <__sfp>
 8011b40:	6060      	str	r0, [r4, #4]
 8011b42:	4620      	mov	r0, r4
 8011b44:	f000 f81c 	bl	8011b80 <__sfp>
 8011b48:	60a0      	str	r0, [r4, #8]
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	f000 f818 	bl	8011b80 <__sfp>
 8011b50:	2200      	movs	r2, #0
 8011b52:	60e0      	str	r0, [r4, #12]
 8011b54:	2104      	movs	r1, #4
 8011b56:	6860      	ldr	r0, [r4, #4]
 8011b58:	f7ff ff82 	bl	8011a60 <std>
 8011b5c:	68a0      	ldr	r0, [r4, #8]
 8011b5e:	2201      	movs	r2, #1
 8011b60:	2109      	movs	r1, #9
 8011b62:	f7ff ff7d 	bl	8011a60 <std>
 8011b66:	68e0      	ldr	r0, [r4, #12]
 8011b68:	2202      	movs	r2, #2
 8011b6a:	2112      	movs	r1, #18
 8011b6c:	f7ff ff78 	bl	8011a60 <std>
 8011b70:	2301      	movs	r3, #1
 8011b72:	61a3      	str	r3, [r4, #24]
 8011b74:	e7d2      	b.n	8011b1c <__sinit+0xc>
 8011b76:	bf00      	nop
 8011b78:	08013554 	.word	0x08013554
 8011b7c:	08011aa9 	.word	0x08011aa9

08011b80 <__sfp>:
 8011b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b82:	4607      	mov	r7, r0
 8011b84:	f7ff ffac 	bl	8011ae0 <__sfp_lock_acquire>
 8011b88:	4b1e      	ldr	r3, [pc, #120]	; (8011c04 <__sfp+0x84>)
 8011b8a:	681e      	ldr	r6, [r3, #0]
 8011b8c:	69b3      	ldr	r3, [r6, #24]
 8011b8e:	b913      	cbnz	r3, 8011b96 <__sfp+0x16>
 8011b90:	4630      	mov	r0, r6
 8011b92:	f7ff ffbd 	bl	8011b10 <__sinit>
 8011b96:	3648      	adds	r6, #72	; 0x48
 8011b98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011b9c:	3b01      	subs	r3, #1
 8011b9e:	d503      	bpl.n	8011ba8 <__sfp+0x28>
 8011ba0:	6833      	ldr	r3, [r6, #0]
 8011ba2:	b30b      	cbz	r3, 8011be8 <__sfp+0x68>
 8011ba4:	6836      	ldr	r6, [r6, #0]
 8011ba6:	e7f7      	b.n	8011b98 <__sfp+0x18>
 8011ba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011bac:	b9d5      	cbnz	r5, 8011be4 <__sfp+0x64>
 8011bae:	4b16      	ldr	r3, [pc, #88]	; (8011c08 <__sfp+0x88>)
 8011bb0:	60e3      	str	r3, [r4, #12]
 8011bb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011bb6:	6665      	str	r5, [r4, #100]	; 0x64
 8011bb8:	f000 f84c 	bl	8011c54 <__retarget_lock_init_recursive>
 8011bbc:	f7ff ff96 	bl	8011aec <__sfp_lock_release>
 8011bc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011bc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011bc8:	6025      	str	r5, [r4, #0]
 8011bca:	61a5      	str	r5, [r4, #24]
 8011bcc:	2208      	movs	r2, #8
 8011bce:	4629      	mov	r1, r5
 8011bd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011bd4:	f7fe fada 	bl	801018c <memset>
 8011bd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011bdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011be0:	4620      	mov	r0, r4
 8011be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011be4:	3468      	adds	r4, #104	; 0x68
 8011be6:	e7d9      	b.n	8011b9c <__sfp+0x1c>
 8011be8:	2104      	movs	r1, #4
 8011bea:	4638      	mov	r0, r7
 8011bec:	f7ff ff62 	bl	8011ab4 <__sfmoreglue>
 8011bf0:	4604      	mov	r4, r0
 8011bf2:	6030      	str	r0, [r6, #0]
 8011bf4:	2800      	cmp	r0, #0
 8011bf6:	d1d5      	bne.n	8011ba4 <__sfp+0x24>
 8011bf8:	f7ff ff78 	bl	8011aec <__sfp_lock_release>
 8011bfc:	230c      	movs	r3, #12
 8011bfe:	603b      	str	r3, [r7, #0]
 8011c00:	e7ee      	b.n	8011be0 <__sfp+0x60>
 8011c02:	bf00      	nop
 8011c04:	08013554 	.word	0x08013554
 8011c08:	ffff0001 	.word	0xffff0001

08011c0c <_fwalk_reent>:
 8011c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c10:	4606      	mov	r6, r0
 8011c12:	4688      	mov	r8, r1
 8011c14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011c18:	2700      	movs	r7, #0
 8011c1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011c1e:	f1b9 0901 	subs.w	r9, r9, #1
 8011c22:	d505      	bpl.n	8011c30 <_fwalk_reent+0x24>
 8011c24:	6824      	ldr	r4, [r4, #0]
 8011c26:	2c00      	cmp	r4, #0
 8011c28:	d1f7      	bne.n	8011c1a <_fwalk_reent+0xe>
 8011c2a:	4638      	mov	r0, r7
 8011c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c30:	89ab      	ldrh	r3, [r5, #12]
 8011c32:	2b01      	cmp	r3, #1
 8011c34:	d907      	bls.n	8011c46 <_fwalk_reent+0x3a>
 8011c36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	d003      	beq.n	8011c46 <_fwalk_reent+0x3a>
 8011c3e:	4629      	mov	r1, r5
 8011c40:	4630      	mov	r0, r6
 8011c42:	47c0      	blx	r8
 8011c44:	4307      	orrs	r7, r0
 8011c46:	3568      	adds	r5, #104	; 0x68
 8011c48:	e7e9      	b.n	8011c1e <_fwalk_reent+0x12>
	...

08011c4c <_localeconv_r>:
 8011c4c:	4800      	ldr	r0, [pc, #0]	; (8011c50 <_localeconv_r+0x4>)
 8011c4e:	4770      	bx	lr
 8011c50:	2400017c 	.word	0x2400017c

08011c54 <__retarget_lock_init_recursive>:
 8011c54:	4770      	bx	lr

08011c56 <__retarget_lock_acquire_recursive>:
 8011c56:	4770      	bx	lr

08011c58 <__retarget_lock_release_recursive>:
 8011c58:	4770      	bx	lr

08011c5a <__swhatbuf_r>:
 8011c5a:	b570      	push	{r4, r5, r6, lr}
 8011c5c:	460e      	mov	r6, r1
 8011c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c62:	2900      	cmp	r1, #0
 8011c64:	b096      	sub	sp, #88	; 0x58
 8011c66:	4614      	mov	r4, r2
 8011c68:	461d      	mov	r5, r3
 8011c6a:	da07      	bge.n	8011c7c <__swhatbuf_r+0x22>
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	602b      	str	r3, [r5, #0]
 8011c70:	89b3      	ldrh	r3, [r6, #12]
 8011c72:	061a      	lsls	r2, r3, #24
 8011c74:	d410      	bmi.n	8011c98 <__swhatbuf_r+0x3e>
 8011c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c7a:	e00e      	b.n	8011c9a <__swhatbuf_r+0x40>
 8011c7c:	466a      	mov	r2, sp
 8011c7e:	f000 fe9f 	bl	80129c0 <_fstat_r>
 8011c82:	2800      	cmp	r0, #0
 8011c84:	dbf2      	blt.n	8011c6c <__swhatbuf_r+0x12>
 8011c86:	9a01      	ldr	r2, [sp, #4]
 8011c88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c90:	425a      	negs	r2, r3
 8011c92:	415a      	adcs	r2, r3
 8011c94:	602a      	str	r2, [r5, #0]
 8011c96:	e7ee      	b.n	8011c76 <__swhatbuf_r+0x1c>
 8011c98:	2340      	movs	r3, #64	; 0x40
 8011c9a:	2000      	movs	r0, #0
 8011c9c:	6023      	str	r3, [r4, #0]
 8011c9e:	b016      	add	sp, #88	; 0x58
 8011ca0:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ca4 <__smakebuf_r>:
 8011ca4:	898b      	ldrh	r3, [r1, #12]
 8011ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ca8:	079d      	lsls	r5, r3, #30
 8011caa:	4606      	mov	r6, r0
 8011cac:	460c      	mov	r4, r1
 8011cae:	d507      	bpl.n	8011cc0 <__smakebuf_r+0x1c>
 8011cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011cb4:	6023      	str	r3, [r4, #0]
 8011cb6:	6123      	str	r3, [r4, #16]
 8011cb8:	2301      	movs	r3, #1
 8011cba:	6163      	str	r3, [r4, #20]
 8011cbc:	b002      	add	sp, #8
 8011cbe:	bd70      	pop	{r4, r5, r6, pc}
 8011cc0:	ab01      	add	r3, sp, #4
 8011cc2:	466a      	mov	r2, sp
 8011cc4:	f7ff ffc9 	bl	8011c5a <__swhatbuf_r>
 8011cc8:	9900      	ldr	r1, [sp, #0]
 8011cca:	4605      	mov	r5, r0
 8011ccc:	4630      	mov	r0, r6
 8011cce:	f000 fc1d 	bl	801250c <_malloc_r>
 8011cd2:	b948      	cbnz	r0, 8011ce8 <__smakebuf_r+0x44>
 8011cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cd8:	059a      	lsls	r2, r3, #22
 8011cda:	d4ef      	bmi.n	8011cbc <__smakebuf_r+0x18>
 8011cdc:	f023 0303 	bic.w	r3, r3, #3
 8011ce0:	f043 0302 	orr.w	r3, r3, #2
 8011ce4:	81a3      	strh	r3, [r4, #12]
 8011ce6:	e7e3      	b.n	8011cb0 <__smakebuf_r+0xc>
 8011ce8:	4b0d      	ldr	r3, [pc, #52]	; (8011d20 <__smakebuf_r+0x7c>)
 8011cea:	62b3      	str	r3, [r6, #40]	; 0x28
 8011cec:	89a3      	ldrh	r3, [r4, #12]
 8011cee:	6020      	str	r0, [r4, #0]
 8011cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cf4:	81a3      	strh	r3, [r4, #12]
 8011cf6:	9b00      	ldr	r3, [sp, #0]
 8011cf8:	6163      	str	r3, [r4, #20]
 8011cfa:	9b01      	ldr	r3, [sp, #4]
 8011cfc:	6120      	str	r0, [r4, #16]
 8011cfe:	b15b      	cbz	r3, 8011d18 <__smakebuf_r+0x74>
 8011d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d04:	4630      	mov	r0, r6
 8011d06:	f000 fe6d 	bl	80129e4 <_isatty_r>
 8011d0a:	b128      	cbz	r0, 8011d18 <__smakebuf_r+0x74>
 8011d0c:	89a3      	ldrh	r3, [r4, #12]
 8011d0e:	f023 0303 	bic.w	r3, r3, #3
 8011d12:	f043 0301 	orr.w	r3, r3, #1
 8011d16:	81a3      	strh	r3, [r4, #12]
 8011d18:	89a0      	ldrh	r0, [r4, #12]
 8011d1a:	4305      	orrs	r5, r0
 8011d1c:	81a5      	strh	r5, [r4, #12]
 8011d1e:	e7cd      	b.n	8011cbc <__smakebuf_r+0x18>
 8011d20:	08011aa9 	.word	0x08011aa9

08011d24 <malloc>:
 8011d24:	4b02      	ldr	r3, [pc, #8]	; (8011d30 <malloc+0xc>)
 8011d26:	4601      	mov	r1, r0
 8011d28:	6818      	ldr	r0, [r3, #0]
 8011d2a:	f000 bbef 	b.w	801250c <_malloc_r>
 8011d2e:	bf00      	nop
 8011d30:	24000028 	.word	0x24000028

08011d34 <memcpy>:
 8011d34:	440a      	add	r2, r1
 8011d36:	4291      	cmp	r1, r2
 8011d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d3c:	d100      	bne.n	8011d40 <memcpy+0xc>
 8011d3e:	4770      	bx	lr
 8011d40:	b510      	push	{r4, lr}
 8011d42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d4a:	4291      	cmp	r1, r2
 8011d4c:	d1f9      	bne.n	8011d42 <memcpy+0xe>
 8011d4e:	bd10      	pop	{r4, pc}

08011d50 <_Balloc>:
 8011d50:	b570      	push	{r4, r5, r6, lr}
 8011d52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011d54:	4604      	mov	r4, r0
 8011d56:	460d      	mov	r5, r1
 8011d58:	b976      	cbnz	r6, 8011d78 <_Balloc+0x28>
 8011d5a:	2010      	movs	r0, #16
 8011d5c:	f7ff ffe2 	bl	8011d24 <malloc>
 8011d60:	4602      	mov	r2, r0
 8011d62:	6260      	str	r0, [r4, #36]	; 0x24
 8011d64:	b920      	cbnz	r0, 8011d70 <_Balloc+0x20>
 8011d66:	4b18      	ldr	r3, [pc, #96]	; (8011dc8 <_Balloc+0x78>)
 8011d68:	4818      	ldr	r0, [pc, #96]	; (8011dcc <_Balloc+0x7c>)
 8011d6a:	2166      	movs	r1, #102	; 0x66
 8011d6c:	f000 fde8 	bl	8012940 <__assert_func>
 8011d70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011d74:	6006      	str	r6, [r0, #0]
 8011d76:	60c6      	str	r6, [r0, #12]
 8011d78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011d7a:	68f3      	ldr	r3, [r6, #12]
 8011d7c:	b183      	cbz	r3, 8011da0 <_Balloc+0x50>
 8011d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011d80:	68db      	ldr	r3, [r3, #12]
 8011d82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011d86:	b9b8      	cbnz	r0, 8011db8 <_Balloc+0x68>
 8011d88:	2101      	movs	r1, #1
 8011d8a:	fa01 f605 	lsl.w	r6, r1, r5
 8011d8e:	1d72      	adds	r2, r6, #5
 8011d90:	0092      	lsls	r2, r2, #2
 8011d92:	4620      	mov	r0, r4
 8011d94:	f000 fb5a 	bl	801244c <_calloc_r>
 8011d98:	b160      	cbz	r0, 8011db4 <_Balloc+0x64>
 8011d9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011d9e:	e00e      	b.n	8011dbe <_Balloc+0x6e>
 8011da0:	2221      	movs	r2, #33	; 0x21
 8011da2:	2104      	movs	r1, #4
 8011da4:	4620      	mov	r0, r4
 8011da6:	f000 fb51 	bl	801244c <_calloc_r>
 8011daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011dac:	60f0      	str	r0, [r6, #12]
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d1e4      	bne.n	8011d7e <_Balloc+0x2e>
 8011db4:	2000      	movs	r0, #0
 8011db6:	bd70      	pop	{r4, r5, r6, pc}
 8011db8:	6802      	ldr	r2, [r0, #0]
 8011dba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011dc4:	e7f7      	b.n	8011db6 <_Balloc+0x66>
 8011dc6:	bf00      	nop
 8011dc8:	08013599 	.word	0x08013599
 8011dcc:	08013680 	.word	0x08013680

08011dd0 <_Bfree>:
 8011dd0:	b570      	push	{r4, r5, r6, lr}
 8011dd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011dd4:	4605      	mov	r5, r0
 8011dd6:	460c      	mov	r4, r1
 8011dd8:	b976      	cbnz	r6, 8011df8 <_Bfree+0x28>
 8011dda:	2010      	movs	r0, #16
 8011ddc:	f7ff ffa2 	bl	8011d24 <malloc>
 8011de0:	4602      	mov	r2, r0
 8011de2:	6268      	str	r0, [r5, #36]	; 0x24
 8011de4:	b920      	cbnz	r0, 8011df0 <_Bfree+0x20>
 8011de6:	4b09      	ldr	r3, [pc, #36]	; (8011e0c <_Bfree+0x3c>)
 8011de8:	4809      	ldr	r0, [pc, #36]	; (8011e10 <_Bfree+0x40>)
 8011dea:	218a      	movs	r1, #138	; 0x8a
 8011dec:	f000 fda8 	bl	8012940 <__assert_func>
 8011df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011df4:	6006      	str	r6, [r0, #0]
 8011df6:	60c6      	str	r6, [r0, #12]
 8011df8:	b13c      	cbz	r4, 8011e0a <_Bfree+0x3a>
 8011dfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011dfc:	6862      	ldr	r2, [r4, #4]
 8011dfe:	68db      	ldr	r3, [r3, #12]
 8011e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011e04:	6021      	str	r1, [r4, #0]
 8011e06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011e0a:	bd70      	pop	{r4, r5, r6, pc}
 8011e0c:	08013599 	.word	0x08013599
 8011e10:	08013680 	.word	0x08013680

08011e14 <__multadd>:
 8011e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e18:	690e      	ldr	r6, [r1, #16]
 8011e1a:	4607      	mov	r7, r0
 8011e1c:	4698      	mov	r8, r3
 8011e1e:	460c      	mov	r4, r1
 8011e20:	f101 0014 	add.w	r0, r1, #20
 8011e24:	2300      	movs	r3, #0
 8011e26:	6805      	ldr	r5, [r0, #0]
 8011e28:	b2a9      	uxth	r1, r5
 8011e2a:	fb02 8101 	mla	r1, r2, r1, r8
 8011e2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011e32:	0c2d      	lsrs	r5, r5, #16
 8011e34:	fb02 c505 	mla	r5, r2, r5, ip
 8011e38:	b289      	uxth	r1, r1
 8011e3a:	3301      	adds	r3, #1
 8011e3c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011e40:	429e      	cmp	r6, r3
 8011e42:	f840 1b04 	str.w	r1, [r0], #4
 8011e46:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011e4a:	dcec      	bgt.n	8011e26 <__multadd+0x12>
 8011e4c:	f1b8 0f00 	cmp.w	r8, #0
 8011e50:	d022      	beq.n	8011e98 <__multadd+0x84>
 8011e52:	68a3      	ldr	r3, [r4, #8]
 8011e54:	42b3      	cmp	r3, r6
 8011e56:	dc19      	bgt.n	8011e8c <__multadd+0x78>
 8011e58:	6861      	ldr	r1, [r4, #4]
 8011e5a:	4638      	mov	r0, r7
 8011e5c:	3101      	adds	r1, #1
 8011e5e:	f7ff ff77 	bl	8011d50 <_Balloc>
 8011e62:	4605      	mov	r5, r0
 8011e64:	b928      	cbnz	r0, 8011e72 <__multadd+0x5e>
 8011e66:	4602      	mov	r2, r0
 8011e68:	4b0d      	ldr	r3, [pc, #52]	; (8011ea0 <__multadd+0x8c>)
 8011e6a:	480e      	ldr	r0, [pc, #56]	; (8011ea4 <__multadd+0x90>)
 8011e6c:	21b5      	movs	r1, #181	; 0xb5
 8011e6e:	f000 fd67 	bl	8012940 <__assert_func>
 8011e72:	6922      	ldr	r2, [r4, #16]
 8011e74:	3202      	adds	r2, #2
 8011e76:	f104 010c 	add.w	r1, r4, #12
 8011e7a:	0092      	lsls	r2, r2, #2
 8011e7c:	300c      	adds	r0, #12
 8011e7e:	f7ff ff59 	bl	8011d34 <memcpy>
 8011e82:	4621      	mov	r1, r4
 8011e84:	4638      	mov	r0, r7
 8011e86:	f7ff ffa3 	bl	8011dd0 <_Bfree>
 8011e8a:	462c      	mov	r4, r5
 8011e8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011e90:	3601      	adds	r6, #1
 8011e92:	f8c3 8014 	str.w	r8, [r3, #20]
 8011e96:	6126      	str	r6, [r4, #16]
 8011e98:	4620      	mov	r0, r4
 8011e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e9e:	bf00      	nop
 8011ea0:	0801360f 	.word	0x0801360f
 8011ea4:	08013680 	.word	0x08013680

08011ea8 <__hi0bits>:
 8011ea8:	0c03      	lsrs	r3, r0, #16
 8011eaa:	041b      	lsls	r3, r3, #16
 8011eac:	b9d3      	cbnz	r3, 8011ee4 <__hi0bits+0x3c>
 8011eae:	0400      	lsls	r0, r0, #16
 8011eb0:	2310      	movs	r3, #16
 8011eb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011eb6:	bf04      	itt	eq
 8011eb8:	0200      	lsleq	r0, r0, #8
 8011eba:	3308      	addeq	r3, #8
 8011ebc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011ec0:	bf04      	itt	eq
 8011ec2:	0100      	lsleq	r0, r0, #4
 8011ec4:	3304      	addeq	r3, #4
 8011ec6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011eca:	bf04      	itt	eq
 8011ecc:	0080      	lsleq	r0, r0, #2
 8011ece:	3302      	addeq	r3, #2
 8011ed0:	2800      	cmp	r0, #0
 8011ed2:	db05      	blt.n	8011ee0 <__hi0bits+0x38>
 8011ed4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011ed8:	f103 0301 	add.w	r3, r3, #1
 8011edc:	bf08      	it	eq
 8011ede:	2320      	moveq	r3, #32
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	4770      	bx	lr
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	e7e4      	b.n	8011eb2 <__hi0bits+0xa>

08011ee8 <__lo0bits>:
 8011ee8:	6803      	ldr	r3, [r0, #0]
 8011eea:	f013 0207 	ands.w	r2, r3, #7
 8011eee:	4601      	mov	r1, r0
 8011ef0:	d00b      	beq.n	8011f0a <__lo0bits+0x22>
 8011ef2:	07da      	lsls	r2, r3, #31
 8011ef4:	d424      	bmi.n	8011f40 <__lo0bits+0x58>
 8011ef6:	0798      	lsls	r0, r3, #30
 8011ef8:	bf49      	itett	mi
 8011efa:	085b      	lsrmi	r3, r3, #1
 8011efc:	089b      	lsrpl	r3, r3, #2
 8011efe:	2001      	movmi	r0, #1
 8011f00:	600b      	strmi	r3, [r1, #0]
 8011f02:	bf5c      	itt	pl
 8011f04:	600b      	strpl	r3, [r1, #0]
 8011f06:	2002      	movpl	r0, #2
 8011f08:	4770      	bx	lr
 8011f0a:	b298      	uxth	r0, r3
 8011f0c:	b9b0      	cbnz	r0, 8011f3c <__lo0bits+0x54>
 8011f0e:	0c1b      	lsrs	r3, r3, #16
 8011f10:	2010      	movs	r0, #16
 8011f12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011f16:	bf04      	itt	eq
 8011f18:	0a1b      	lsreq	r3, r3, #8
 8011f1a:	3008      	addeq	r0, #8
 8011f1c:	071a      	lsls	r2, r3, #28
 8011f1e:	bf04      	itt	eq
 8011f20:	091b      	lsreq	r3, r3, #4
 8011f22:	3004      	addeq	r0, #4
 8011f24:	079a      	lsls	r2, r3, #30
 8011f26:	bf04      	itt	eq
 8011f28:	089b      	lsreq	r3, r3, #2
 8011f2a:	3002      	addeq	r0, #2
 8011f2c:	07da      	lsls	r2, r3, #31
 8011f2e:	d403      	bmi.n	8011f38 <__lo0bits+0x50>
 8011f30:	085b      	lsrs	r3, r3, #1
 8011f32:	f100 0001 	add.w	r0, r0, #1
 8011f36:	d005      	beq.n	8011f44 <__lo0bits+0x5c>
 8011f38:	600b      	str	r3, [r1, #0]
 8011f3a:	4770      	bx	lr
 8011f3c:	4610      	mov	r0, r2
 8011f3e:	e7e8      	b.n	8011f12 <__lo0bits+0x2a>
 8011f40:	2000      	movs	r0, #0
 8011f42:	4770      	bx	lr
 8011f44:	2020      	movs	r0, #32
 8011f46:	4770      	bx	lr

08011f48 <__i2b>:
 8011f48:	b510      	push	{r4, lr}
 8011f4a:	460c      	mov	r4, r1
 8011f4c:	2101      	movs	r1, #1
 8011f4e:	f7ff feff 	bl	8011d50 <_Balloc>
 8011f52:	4602      	mov	r2, r0
 8011f54:	b928      	cbnz	r0, 8011f62 <__i2b+0x1a>
 8011f56:	4b05      	ldr	r3, [pc, #20]	; (8011f6c <__i2b+0x24>)
 8011f58:	4805      	ldr	r0, [pc, #20]	; (8011f70 <__i2b+0x28>)
 8011f5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011f5e:	f000 fcef 	bl	8012940 <__assert_func>
 8011f62:	2301      	movs	r3, #1
 8011f64:	6144      	str	r4, [r0, #20]
 8011f66:	6103      	str	r3, [r0, #16]
 8011f68:	bd10      	pop	{r4, pc}
 8011f6a:	bf00      	nop
 8011f6c:	0801360f 	.word	0x0801360f
 8011f70:	08013680 	.word	0x08013680

08011f74 <__multiply>:
 8011f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f78:	4614      	mov	r4, r2
 8011f7a:	690a      	ldr	r2, [r1, #16]
 8011f7c:	6923      	ldr	r3, [r4, #16]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	bfb8      	it	lt
 8011f82:	460b      	movlt	r3, r1
 8011f84:	460d      	mov	r5, r1
 8011f86:	bfbc      	itt	lt
 8011f88:	4625      	movlt	r5, r4
 8011f8a:	461c      	movlt	r4, r3
 8011f8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011f90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011f94:	68ab      	ldr	r3, [r5, #8]
 8011f96:	6869      	ldr	r1, [r5, #4]
 8011f98:	eb0a 0709 	add.w	r7, sl, r9
 8011f9c:	42bb      	cmp	r3, r7
 8011f9e:	b085      	sub	sp, #20
 8011fa0:	bfb8      	it	lt
 8011fa2:	3101      	addlt	r1, #1
 8011fa4:	f7ff fed4 	bl	8011d50 <_Balloc>
 8011fa8:	b930      	cbnz	r0, 8011fb8 <__multiply+0x44>
 8011faa:	4602      	mov	r2, r0
 8011fac:	4b42      	ldr	r3, [pc, #264]	; (80120b8 <__multiply+0x144>)
 8011fae:	4843      	ldr	r0, [pc, #268]	; (80120bc <__multiply+0x148>)
 8011fb0:	f240 115d 	movw	r1, #349	; 0x15d
 8011fb4:	f000 fcc4 	bl	8012940 <__assert_func>
 8011fb8:	f100 0614 	add.w	r6, r0, #20
 8011fbc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011fc0:	4633      	mov	r3, r6
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	4543      	cmp	r3, r8
 8011fc6:	d31e      	bcc.n	8012006 <__multiply+0x92>
 8011fc8:	f105 0c14 	add.w	ip, r5, #20
 8011fcc:	f104 0314 	add.w	r3, r4, #20
 8011fd0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011fd4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011fd8:	9202      	str	r2, [sp, #8]
 8011fda:	ebac 0205 	sub.w	r2, ip, r5
 8011fde:	3a15      	subs	r2, #21
 8011fe0:	f022 0203 	bic.w	r2, r2, #3
 8011fe4:	3204      	adds	r2, #4
 8011fe6:	f105 0115 	add.w	r1, r5, #21
 8011fea:	458c      	cmp	ip, r1
 8011fec:	bf38      	it	cc
 8011fee:	2204      	movcc	r2, #4
 8011ff0:	9201      	str	r2, [sp, #4]
 8011ff2:	9a02      	ldr	r2, [sp, #8]
 8011ff4:	9303      	str	r3, [sp, #12]
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d808      	bhi.n	801200c <__multiply+0x98>
 8011ffa:	2f00      	cmp	r7, #0
 8011ffc:	dc55      	bgt.n	80120aa <__multiply+0x136>
 8011ffe:	6107      	str	r7, [r0, #16]
 8012000:	b005      	add	sp, #20
 8012002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012006:	f843 2b04 	str.w	r2, [r3], #4
 801200a:	e7db      	b.n	8011fc4 <__multiply+0x50>
 801200c:	f8b3 a000 	ldrh.w	sl, [r3]
 8012010:	f1ba 0f00 	cmp.w	sl, #0
 8012014:	d020      	beq.n	8012058 <__multiply+0xe4>
 8012016:	f105 0e14 	add.w	lr, r5, #20
 801201a:	46b1      	mov	r9, r6
 801201c:	2200      	movs	r2, #0
 801201e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8012022:	f8d9 b000 	ldr.w	fp, [r9]
 8012026:	b2a1      	uxth	r1, r4
 8012028:	fa1f fb8b 	uxth.w	fp, fp
 801202c:	fb0a b101 	mla	r1, sl, r1, fp
 8012030:	4411      	add	r1, r2
 8012032:	f8d9 2000 	ldr.w	r2, [r9]
 8012036:	0c24      	lsrs	r4, r4, #16
 8012038:	0c12      	lsrs	r2, r2, #16
 801203a:	fb0a 2404 	mla	r4, sl, r4, r2
 801203e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8012042:	b289      	uxth	r1, r1
 8012044:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012048:	45f4      	cmp	ip, lr
 801204a:	f849 1b04 	str.w	r1, [r9], #4
 801204e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8012052:	d8e4      	bhi.n	801201e <__multiply+0xaa>
 8012054:	9901      	ldr	r1, [sp, #4]
 8012056:	5072      	str	r2, [r6, r1]
 8012058:	9a03      	ldr	r2, [sp, #12]
 801205a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801205e:	3304      	adds	r3, #4
 8012060:	f1b9 0f00 	cmp.w	r9, #0
 8012064:	d01f      	beq.n	80120a6 <__multiply+0x132>
 8012066:	6834      	ldr	r4, [r6, #0]
 8012068:	f105 0114 	add.w	r1, r5, #20
 801206c:	46b6      	mov	lr, r6
 801206e:	f04f 0a00 	mov.w	sl, #0
 8012072:	880a      	ldrh	r2, [r1, #0]
 8012074:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012078:	fb09 b202 	mla	r2, r9, r2, fp
 801207c:	4492      	add	sl, r2
 801207e:	b2a4      	uxth	r4, r4
 8012080:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012084:	f84e 4b04 	str.w	r4, [lr], #4
 8012088:	f851 4b04 	ldr.w	r4, [r1], #4
 801208c:	f8be 2000 	ldrh.w	r2, [lr]
 8012090:	0c24      	lsrs	r4, r4, #16
 8012092:	fb09 2404 	mla	r4, r9, r4, r2
 8012096:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801209a:	458c      	cmp	ip, r1
 801209c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80120a0:	d8e7      	bhi.n	8012072 <__multiply+0xfe>
 80120a2:	9a01      	ldr	r2, [sp, #4]
 80120a4:	50b4      	str	r4, [r6, r2]
 80120a6:	3604      	adds	r6, #4
 80120a8:	e7a3      	b.n	8011ff2 <__multiply+0x7e>
 80120aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d1a5      	bne.n	8011ffe <__multiply+0x8a>
 80120b2:	3f01      	subs	r7, #1
 80120b4:	e7a1      	b.n	8011ffa <__multiply+0x86>
 80120b6:	bf00      	nop
 80120b8:	0801360f 	.word	0x0801360f
 80120bc:	08013680 	.word	0x08013680

080120c0 <__pow5mult>:
 80120c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120c4:	4615      	mov	r5, r2
 80120c6:	f012 0203 	ands.w	r2, r2, #3
 80120ca:	4606      	mov	r6, r0
 80120cc:	460f      	mov	r7, r1
 80120ce:	d007      	beq.n	80120e0 <__pow5mult+0x20>
 80120d0:	4c25      	ldr	r4, [pc, #148]	; (8012168 <__pow5mult+0xa8>)
 80120d2:	3a01      	subs	r2, #1
 80120d4:	2300      	movs	r3, #0
 80120d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80120da:	f7ff fe9b 	bl	8011e14 <__multadd>
 80120de:	4607      	mov	r7, r0
 80120e0:	10ad      	asrs	r5, r5, #2
 80120e2:	d03d      	beq.n	8012160 <__pow5mult+0xa0>
 80120e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80120e6:	b97c      	cbnz	r4, 8012108 <__pow5mult+0x48>
 80120e8:	2010      	movs	r0, #16
 80120ea:	f7ff fe1b 	bl	8011d24 <malloc>
 80120ee:	4602      	mov	r2, r0
 80120f0:	6270      	str	r0, [r6, #36]	; 0x24
 80120f2:	b928      	cbnz	r0, 8012100 <__pow5mult+0x40>
 80120f4:	4b1d      	ldr	r3, [pc, #116]	; (801216c <__pow5mult+0xac>)
 80120f6:	481e      	ldr	r0, [pc, #120]	; (8012170 <__pow5mult+0xb0>)
 80120f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80120fc:	f000 fc20 	bl	8012940 <__assert_func>
 8012100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012104:	6004      	str	r4, [r0, #0]
 8012106:	60c4      	str	r4, [r0, #12]
 8012108:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801210c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012110:	b94c      	cbnz	r4, 8012126 <__pow5mult+0x66>
 8012112:	f240 2171 	movw	r1, #625	; 0x271
 8012116:	4630      	mov	r0, r6
 8012118:	f7ff ff16 	bl	8011f48 <__i2b>
 801211c:	2300      	movs	r3, #0
 801211e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012122:	4604      	mov	r4, r0
 8012124:	6003      	str	r3, [r0, #0]
 8012126:	f04f 0900 	mov.w	r9, #0
 801212a:	07eb      	lsls	r3, r5, #31
 801212c:	d50a      	bpl.n	8012144 <__pow5mult+0x84>
 801212e:	4639      	mov	r1, r7
 8012130:	4622      	mov	r2, r4
 8012132:	4630      	mov	r0, r6
 8012134:	f7ff ff1e 	bl	8011f74 <__multiply>
 8012138:	4639      	mov	r1, r7
 801213a:	4680      	mov	r8, r0
 801213c:	4630      	mov	r0, r6
 801213e:	f7ff fe47 	bl	8011dd0 <_Bfree>
 8012142:	4647      	mov	r7, r8
 8012144:	106d      	asrs	r5, r5, #1
 8012146:	d00b      	beq.n	8012160 <__pow5mult+0xa0>
 8012148:	6820      	ldr	r0, [r4, #0]
 801214a:	b938      	cbnz	r0, 801215c <__pow5mult+0x9c>
 801214c:	4622      	mov	r2, r4
 801214e:	4621      	mov	r1, r4
 8012150:	4630      	mov	r0, r6
 8012152:	f7ff ff0f 	bl	8011f74 <__multiply>
 8012156:	6020      	str	r0, [r4, #0]
 8012158:	f8c0 9000 	str.w	r9, [r0]
 801215c:	4604      	mov	r4, r0
 801215e:	e7e4      	b.n	801212a <__pow5mult+0x6a>
 8012160:	4638      	mov	r0, r7
 8012162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012166:	bf00      	nop
 8012168:	080137d0 	.word	0x080137d0
 801216c:	08013599 	.word	0x08013599
 8012170:	08013680 	.word	0x08013680

08012174 <__lshift>:
 8012174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012178:	460c      	mov	r4, r1
 801217a:	6849      	ldr	r1, [r1, #4]
 801217c:	6923      	ldr	r3, [r4, #16]
 801217e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012182:	68a3      	ldr	r3, [r4, #8]
 8012184:	4607      	mov	r7, r0
 8012186:	4691      	mov	r9, r2
 8012188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801218c:	f108 0601 	add.w	r6, r8, #1
 8012190:	42b3      	cmp	r3, r6
 8012192:	db0b      	blt.n	80121ac <__lshift+0x38>
 8012194:	4638      	mov	r0, r7
 8012196:	f7ff fddb 	bl	8011d50 <_Balloc>
 801219a:	4605      	mov	r5, r0
 801219c:	b948      	cbnz	r0, 80121b2 <__lshift+0x3e>
 801219e:	4602      	mov	r2, r0
 80121a0:	4b28      	ldr	r3, [pc, #160]	; (8012244 <__lshift+0xd0>)
 80121a2:	4829      	ldr	r0, [pc, #164]	; (8012248 <__lshift+0xd4>)
 80121a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80121a8:	f000 fbca 	bl	8012940 <__assert_func>
 80121ac:	3101      	adds	r1, #1
 80121ae:	005b      	lsls	r3, r3, #1
 80121b0:	e7ee      	b.n	8012190 <__lshift+0x1c>
 80121b2:	2300      	movs	r3, #0
 80121b4:	f100 0114 	add.w	r1, r0, #20
 80121b8:	f100 0210 	add.w	r2, r0, #16
 80121bc:	4618      	mov	r0, r3
 80121be:	4553      	cmp	r3, sl
 80121c0:	db33      	blt.n	801222a <__lshift+0xb6>
 80121c2:	6920      	ldr	r0, [r4, #16]
 80121c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80121c8:	f104 0314 	add.w	r3, r4, #20
 80121cc:	f019 091f 	ands.w	r9, r9, #31
 80121d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80121d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80121d8:	d02b      	beq.n	8012232 <__lshift+0xbe>
 80121da:	f1c9 0e20 	rsb	lr, r9, #32
 80121de:	468a      	mov	sl, r1
 80121e0:	2200      	movs	r2, #0
 80121e2:	6818      	ldr	r0, [r3, #0]
 80121e4:	fa00 f009 	lsl.w	r0, r0, r9
 80121e8:	4302      	orrs	r2, r0
 80121ea:	f84a 2b04 	str.w	r2, [sl], #4
 80121ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80121f2:	459c      	cmp	ip, r3
 80121f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80121f8:	d8f3      	bhi.n	80121e2 <__lshift+0x6e>
 80121fa:	ebac 0304 	sub.w	r3, ip, r4
 80121fe:	3b15      	subs	r3, #21
 8012200:	f023 0303 	bic.w	r3, r3, #3
 8012204:	3304      	adds	r3, #4
 8012206:	f104 0015 	add.w	r0, r4, #21
 801220a:	4584      	cmp	ip, r0
 801220c:	bf38      	it	cc
 801220e:	2304      	movcc	r3, #4
 8012210:	50ca      	str	r2, [r1, r3]
 8012212:	b10a      	cbz	r2, 8012218 <__lshift+0xa4>
 8012214:	f108 0602 	add.w	r6, r8, #2
 8012218:	3e01      	subs	r6, #1
 801221a:	4638      	mov	r0, r7
 801221c:	612e      	str	r6, [r5, #16]
 801221e:	4621      	mov	r1, r4
 8012220:	f7ff fdd6 	bl	8011dd0 <_Bfree>
 8012224:	4628      	mov	r0, r5
 8012226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801222a:	f842 0f04 	str.w	r0, [r2, #4]!
 801222e:	3301      	adds	r3, #1
 8012230:	e7c5      	b.n	80121be <__lshift+0x4a>
 8012232:	3904      	subs	r1, #4
 8012234:	f853 2b04 	ldr.w	r2, [r3], #4
 8012238:	f841 2f04 	str.w	r2, [r1, #4]!
 801223c:	459c      	cmp	ip, r3
 801223e:	d8f9      	bhi.n	8012234 <__lshift+0xc0>
 8012240:	e7ea      	b.n	8012218 <__lshift+0xa4>
 8012242:	bf00      	nop
 8012244:	0801360f 	.word	0x0801360f
 8012248:	08013680 	.word	0x08013680

0801224c <__mcmp>:
 801224c:	b530      	push	{r4, r5, lr}
 801224e:	6902      	ldr	r2, [r0, #16]
 8012250:	690c      	ldr	r4, [r1, #16]
 8012252:	1b12      	subs	r2, r2, r4
 8012254:	d10e      	bne.n	8012274 <__mcmp+0x28>
 8012256:	f100 0314 	add.w	r3, r0, #20
 801225a:	3114      	adds	r1, #20
 801225c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012260:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012264:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012268:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801226c:	42a5      	cmp	r5, r4
 801226e:	d003      	beq.n	8012278 <__mcmp+0x2c>
 8012270:	d305      	bcc.n	801227e <__mcmp+0x32>
 8012272:	2201      	movs	r2, #1
 8012274:	4610      	mov	r0, r2
 8012276:	bd30      	pop	{r4, r5, pc}
 8012278:	4283      	cmp	r3, r0
 801227a:	d3f3      	bcc.n	8012264 <__mcmp+0x18>
 801227c:	e7fa      	b.n	8012274 <__mcmp+0x28>
 801227e:	f04f 32ff 	mov.w	r2, #4294967295
 8012282:	e7f7      	b.n	8012274 <__mcmp+0x28>

08012284 <__mdiff>:
 8012284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012288:	460c      	mov	r4, r1
 801228a:	4606      	mov	r6, r0
 801228c:	4611      	mov	r1, r2
 801228e:	4620      	mov	r0, r4
 8012290:	4617      	mov	r7, r2
 8012292:	f7ff ffdb 	bl	801224c <__mcmp>
 8012296:	1e05      	subs	r5, r0, #0
 8012298:	d110      	bne.n	80122bc <__mdiff+0x38>
 801229a:	4629      	mov	r1, r5
 801229c:	4630      	mov	r0, r6
 801229e:	f7ff fd57 	bl	8011d50 <_Balloc>
 80122a2:	b930      	cbnz	r0, 80122b2 <__mdiff+0x2e>
 80122a4:	4b39      	ldr	r3, [pc, #228]	; (801238c <__mdiff+0x108>)
 80122a6:	4602      	mov	r2, r0
 80122a8:	f240 2132 	movw	r1, #562	; 0x232
 80122ac:	4838      	ldr	r0, [pc, #224]	; (8012390 <__mdiff+0x10c>)
 80122ae:	f000 fb47 	bl	8012940 <__assert_func>
 80122b2:	2301      	movs	r3, #1
 80122b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80122b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122bc:	bfa4      	itt	ge
 80122be:	463b      	movge	r3, r7
 80122c0:	4627      	movge	r7, r4
 80122c2:	4630      	mov	r0, r6
 80122c4:	6879      	ldr	r1, [r7, #4]
 80122c6:	bfa6      	itte	ge
 80122c8:	461c      	movge	r4, r3
 80122ca:	2500      	movge	r5, #0
 80122cc:	2501      	movlt	r5, #1
 80122ce:	f7ff fd3f 	bl	8011d50 <_Balloc>
 80122d2:	b920      	cbnz	r0, 80122de <__mdiff+0x5a>
 80122d4:	4b2d      	ldr	r3, [pc, #180]	; (801238c <__mdiff+0x108>)
 80122d6:	4602      	mov	r2, r0
 80122d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80122dc:	e7e6      	b.n	80122ac <__mdiff+0x28>
 80122de:	693e      	ldr	r6, [r7, #16]
 80122e0:	60c5      	str	r5, [r0, #12]
 80122e2:	6925      	ldr	r5, [r4, #16]
 80122e4:	f107 0114 	add.w	r1, r7, #20
 80122e8:	f104 0914 	add.w	r9, r4, #20
 80122ec:	f100 0e14 	add.w	lr, r0, #20
 80122f0:	f107 0210 	add.w	r2, r7, #16
 80122f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80122f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80122fc:	46f2      	mov	sl, lr
 80122fe:	2700      	movs	r7, #0
 8012300:	f859 3b04 	ldr.w	r3, [r9], #4
 8012304:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012308:	fa1f f883 	uxth.w	r8, r3
 801230c:	fa17 f78b 	uxtah	r7, r7, fp
 8012310:	0c1b      	lsrs	r3, r3, #16
 8012312:	eba7 0808 	sub.w	r8, r7, r8
 8012316:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801231a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801231e:	fa1f f888 	uxth.w	r8, r8
 8012322:	141f      	asrs	r7, r3, #16
 8012324:	454d      	cmp	r5, r9
 8012326:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801232a:	f84a 3b04 	str.w	r3, [sl], #4
 801232e:	d8e7      	bhi.n	8012300 <__mdiff+0x7c>
 8012330:	1b2b      	subs	r3, r5, r4
 8012332:	3b15      	subs	r3, #21
 8012334:	f023 0303 	bic.w	r3, r3, #3
 8012338:	3304      	adds	r3, #4
 801233a:	3415      	adds	r4, #21
 801233c:	42a5      	cmp	r5, r4
 801233e:	bf38      	it	cc
 8012340:	2304      	movcc	r3, #4
 8012342:	4419      	add	r1, r3
 8012344:	4473      	add	r3, lr
 8012346:	469e      	mov	lr, r3
 8012348:	460d      	mov	r5, r1
 801234a:	4565      	cmp	r5, ip
 801234c:	d30e      	bcc.n	801236c <__mdiff+0xe8>
 801234e:	f10c 0203 	add.w	r2, ip, #3
 8012352:	1a52      	subs	r2, r2, r1
 8012354:	f022 0203 	bic.w	r2, r2, #3
 8012358:	3903      	subs	r1, #3
 801235a:	458c      	cmp	ip, r1
 801235c:	bf38      	it	cc
 801235e:	2200      	movcc	r2, #0
 8012360:	441a      	add	r2, r3
 8012362:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012366:	b17b      	cbz	r3, 8012388 <__mdiff+0x104>
 8012368:	6106      	str	r6, [r0, #16]
 801236a:	e7a5      	b.n	80122b8 <__mdiff+0x34>
 801236c:	f855 8b04 	ldr.w	r8, [r5], #4
 8012370:	fa17 f488 	uxtah	r4, r7, r8
 8012374:	1422      	asrs	r2, r4, #16
 8012376:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801237a:	b2a4      	uxth	r4, r4
 801237c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012380:	f84e 4b04 	str.w	r4, [lr], #4
 8012384:	1417      	asrs	r7, r2, #16
 8012386:	e7e0      	b.n	801234a <__mdiff+0xc6>
 8012388:	3e01      	subs	r6, #1
 801238a:	e7ea      	b.n	8012362 <__mdiff+0xde>
 801238c:	0801360f 	.word	0x0801360f
 8012390:	08013680 	.word	0x08013680

08012394 <__d2b>:
 8012394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012398:	4689      	mov	r9, r1
 801239a:	2101      	movs	r1, #1
 801239c:	ec57 6b10 	vmov	r6, r7, d0
 80123a0:	4690      	mov	r8, r2
 80123a2:	f7ff fcd5 	bl	8011d50 <_Balloc>
 80123a6:	4604      	mov	r4, r0
 80123a8:	b930      	cbnz	r0, 80123b8 <__d2b+0x24>
 80123aa:	4602      	mov	r2, r0
 80123ac:	4b25      	ldr	r3, [pc, #148]	; (8012444 <__d2b+0xb0>)
 80123ae:	4826      	ldr	r0, [pc, #152]	; (8012448 <__d2b+0xb4>)
 80123b0:	f240 310a 	movw	r1, #778	; 0x30a
 80123b4:	f000 fac4 	bl	8012940 <__assert_func>
 80123b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80123bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80123c0:	bb35      	cbnz	r5, 8012410 <__d2b+0x7c>
 80123c2:	2e00      	cmp	r6, #0
 80123c4:	9301      	str	r3, [sp, #4]
 80123c6:	d028      	beq.n	801241a <__d2b+0x86>
 80123c8:	4668      	mov	r0, sp
 80123ca:	9600      	str	r6, [sp, #0]
 80123cc:	f7ff fd8c 	bl	8011ee8 <__lo0bits>
 80123d0:	9900      	ldr	r1, [sp, #0]
 80123d2:	b300      	cbz	r0, 8012416 <__d2b+0x82>
 80123d4:	9a01      	ldr	r2, [sp, #4]
 80123d6:	f1c0 0320 	rsb	r3, r0, #32
 80123da:	fa02 f303 	lsl.w	r3, r2, r3
 80123de:	430b      	orrs	r3, r1
 80123e0:	40c2      	lsrs	r2, r0
 80123e2:	6163      	str	r3, [r4, #20]
 80123e4:	9201      	str	r2, [sp, #4]
 80123e6:	9b01      	ldr	r3, [sp, #4]
 80123e8:	61a3      	str	r3, [r4, #24]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	bf14      	ite	ne
 80123ee:	2202      	movne	r2, #2
 80123f0:	2201      	moveq	r2, #1
 80123f2:	6122      	str	r2, [r4, #16]
 80123f4:	b1d5      	cbz	r5, 801242c <__d2b+0x98>
 80123f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80123fa:	4405      	add	r5, r0
 80123fc:	f8c9 5000 	str.w	r5, [r9]
 8012400:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012404:	f8c8 0000 	str.w	r0, [r8]
 8012408:	4620      	mov	r0, r4
 801240a:	b003      	add	sp, #12
 801240c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012414:	e7d5      	b.n	80123c2 <__d2b+0x2e>
 8012416:	6161      	str	r1, [r4, #20]
 8012418:	e7e5      	b.n	80123e6 <__d2b+0x52>
 801241a:	a801      	add	r0, sp, #4
 801241c:	f7ff fd64 	bl	8011ee8 <__lo0bits>
 8012420:	9b01      	ldr	r3, [sp, #4]
 8012422:	6163      	str	r3, [r4, #20]
 8012424:	2201      	movs	r2, #1
 8012426:	6122      	str	r2, [r4, #16]
 8012428:	3020      	adds	r0, #32
 801242a:	e7e3      	b.n	80123f4 <__d2b+0x60>
 801242c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012430:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012434:	f8c9 0000 	str.w	r0, [r9]
 8012438:	6918      	ldr	r0, [r3, #16]
 801243a:	f7ff fd35 	bl	8011ea8 <__hi0bits>
 801243e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012442:	e7df      	b.n	8012404 <__d2b+0x70>
 8012444:	0801360f 	.word	0x0801360f
 8012448:	08013680 	.word	0x08013680

0801244c <_calloc_r>:
 801244c:	b513      	push	{r0, r1, r4, lr}
 801244e:	434a      	muls	r2, r1
 8012450:	4611      	mov	r1, r2
 8012452:	9201      	str	r2, [sp, #4]
 8012454:	f000 f85a 	bl	801250c <_malloc_r>
 8012458:	4604      	mov	r4, r0
 801245a:	b118      	cbz	r0, 8012464 <_calloc_r+0x18>
 801245c:	9a01      	ldr	r2, [sp, #4]
 801245e:	2100      	movs	r1, #0
 8012460:	f7fd fe94 	bl	801018c <memset>
 8012464:	4620      	mov	r0, r4
 8012466:	b002      	add	sp, #8
 8012468:	bd10      	pop	{r4, pc}
	...

0801246c <_free_r>:
 801246c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801246e:	2900      	cmp	r1, #0
 8012470:	d048      	beq.n	8012504 <_free_r+0x98>
 8012472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012476:	9001      	str	r0, [sp, #4]
 8012478:	2b00      	cmp	r3, #0
 801247a:	f1a1 0404 	sub.w	r4, r1, #4
 801247e:	bfb8      	it	lt
 8012480:	18e4      	addlt	r4, r4, r3
 8012482:	f000 fae3 	bl	8012a4c <__malloc_lock>
 8012486:	4a20      	ldr	r2, [pc, #128]	; (8012508 <_free_r+0x9c>)
 8012488:	9801      	ldr	r0, [sp, #4]
 801248a:	6813      	ldr	r3, [r2, #0]
 801248c:	4615      	mov	r5, r2
 801248e:	b933      	cbnz	r3, 801249e <_free_r+0x32>
 8012490:	6063      	str	r3, [r4, #4]
 8012492:	6014      	str	r4, [r2, #0]
 8012494:	b003      	add	sp, #12
 8012496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801249a:	f000 badd 	b.w	8012a58 <__malloc_unlock>
 801249e:	42a3      	cmp	r3, r4
 80124a0:	d90b      	bls.n	80124ba <_free_r+0x4e>
 80124a2:	6821      	ldr	r1, [r4, #0]
 80124a4:	1862      	adds	r2, r4, r1
 80124a6:	4293      	cmp	r3, r2
 80124a8:	bf04      	itt	eq
 80124aa:	681a      	ldreq	r2, [r3, #0]
 80124ac:	685b      	ldreq	r3, [r3, #4]
 80124ae:	6063      	str	r3, [r4, #4]
 80124b0:	bf04      	itt	eq
 80124b2:	1852      	addeq	r2, r2, r1
 80124b4:	6022      	streq	r2, [r4, #0]
 80124b6:	602c      	str	r4, [r5, #0]
 80124b8:	e7ec      	b.n	8012494 <_free_r+0x28>
 80124ba:	461a      	mov	r2, r3
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	b10b      	cbz	r3, 80124c4 <_free_r+0x58>
 80124c0:	42a3      	cmp	r3, r4
 80124c2:	d9fa      	bls.n	80124ba <_free_r+0x4e>
 80124c4:	6811      	ldr	r1, [r2, #0]
 80124c6:	1855      	adds	r5, r2, r1
 80124c8:	42a5      	cmp	r5, r4
 80124ca:	d10b      	bne.n	80124e4 <_free_r+0x78>
 80124cc:	6824      	ldr	r4, [r4, #0]
 80124ce:	4421      	add	r1, r4
 80124d0:	1854      	adds	r4, r2, r1
 80124d2:	42a3      	cmp	r3, r4
 80124d4:	6011      	str	r1, [r2, #0]
 80124d6:	d1dd      	bne.n	8012494 <_free_r+0x28>
 80124d8:	681c      	ldr	r4, [r3, #0]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	6053      	str	r3, [r2, #4]
 80124de:	4421      	add	r1, r4
 80124e0:	6011      	str	r1, [r2, #0]
 80124e2:	e7d7      	b.n	8012494 <_free_r+0x28>
 80124e4:	d902      	bls.n	80124ec <_free_r+0x80>
 80124e6:	230c      	movs	r3, #12
 80124e8:	6003      	str	r3, [r0, #0]
 80124ea:	e7d3      	b.n	8012494 <_free_r+0x28>
 80124ec:	6825      	ldr	r5, [r4, #0]
 80124ee:	1961      	adds	r1, r4, r5
 80124f0:	428b      	cmp	r3, r1
 80124f2:	bf04      	itt	eq
 80124f4:	6819      	ldreq	r1, [r3, #0]
 80124f6:	685b      	ldreq	r3, [r3, #4]
 80124f8:	6063      	str	r3, [r4, #4]
 80124fa:	bf04      	itt	eq
 80124fc:	1949      	addeq	r1, r1, r5
 80124fe:	6021      	streq	r1, [r4, #0]
 8012500:	6054      	str	r4, [r2, #4]
 8012502:	e7c7      	b.n	8012494 <_free_r+0x28>
 8012504:	b003      	add	sp, #12
 8012506:	bd30      	pop	{r4, r5, pc}
 8012508:	2400024c 	.word	0x2400024c

0801250c <_malloc_r>:
 801250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801250e:	1ccd      	adds	r5, r1, #3
 8012510:	f025 0503 	bic.w	r5, r5, #3
 8012514:	3508      	adds	r5, #8
 8012516:	2d0c      	cmp	r5, #12
 8012518:	bf38      	it	cc
 801251a:	250c      	movcc	r5, #12
 801251c:	2d00      	cmp	r5, #0
 801251e:	4606      	mov	r6, r0
 8012520:	db01      	blt.n	8012526 <_malloc_r+0x1a>
 8012522:	42a9      	cmp	r1, r5
 8012524:	d903      	bls.n	801252e <_malloc_r+0x22>
 8012526:	230c      	movs	r3, #12
 8012528:	6033      	str	r3, [r6, #0]
 801252a:	2000      	movs	r0, #0
 801252c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801252e:	f000 fa8d 	bl	8012a4c <__malloc_lock>
 8012532:	4921      	ldr	r1, [pc, #132]	; (80125b8 <_malloc_r+0xac>)
 8012534:	680a      	ldr	r2, [r1, #0]
 8012536:	4614      	mov	r4, r2
 8012538:	b99c      	cbnz	r4, 8012562 <_malloc_r+0x56>
 801253a:	4f20      	ldr	r7, [pc, #128]	; (80125bc <_malloc_r+0xb0>)
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	b923      	cbnz	r3, 801254a <_malloc_r+0x3e>
 8012540:	4621      	mov	r1, r4
 8012542:	4630      	mov	r0, r6
 8012544:	f000 f996 	bl	8012874 <_sbrk_r>
 8012548:	6038      	str	r0, [r7, #0]
 801254a:	4629      	mov	r1, r5
 801254c:	4630      	mov	r0, r6
 801254e:	f000 f991 	bl	8012874 <_sbrk_r>
 8012552:	1c43      	adds	r3, r0, #1
 8012554:	d123      	bne.n	801259e <_malloc_r+0x92>
 8012556:	230c      	movs	r3, #12
 8012558:	6033      	str	r3, [r6, #0]
 801255a:	4630      	mov	r0, r6
 801255c:	f000 fa7c 	bl	8012a58 <__malloc_unlock>
 8012560:	e7e3      	b.n	801252a <_malloc_r+0x1e>
 8012562:	6823      	ldr	r3, [r4, #0]
 8012564:	1b5b      	subs	r3, r3, r5
 8012566:	d417      	bmi.n	8012598 <_malloc_r+0x8c>
 8012568:	2b0b      	cmp	r3, #11
 801256a:	d903      	bls.n	8012574 <_malloc_r+0x68>
 801256c:	6023      	str	r3, [r4, #0]
 801256e:	441c      	add	r4, r3
 8012570:	6025      	str	r5, [r4, #0]
 8012572:	e004      	b.n	801257e <_malloc_r+0x72>
 8012574:	6863      	ldr	r3, [r4, #4]
 8012576:	42a2      	cmp	r2, r4
 8012578:	bf0c      	ite	eq
 801257a:	600b      	streq	r3, [r1, #0]
 801257c:	6053      	strne	r3, [r2, #4]
 801257e:	4630      	mov	r0, r6
 8012580:	f000 fa6a 	bl	8012a58 <__malloc_unlock>
 8012584:	f104 000b 	add.w	r0, r4, #11
 8012588:	1d23      	adds	r3, r4, #4
 801258a:	f020 0007 	bic.w	r0, r0, #7
 801258e:	1ac2      	subs	r2, r0, r3
 8012590:	d0cc      	beq.n	801252c <_malloc_r+0x20>
 8012592:	1a1b      	subs	r3, r3, r0
 8012594:	50a3      	str	r3, [r4, r2]
 8012596:	e7c9      	b.n	801252c <_malloc_r+0x20>
 8012598:	4622      	mov	r2, r4
 801259a:	6864      	ldr	r4, [r4, #4]
 801259c:	e7cc      	b.n	8012538 <_malloc_r+0x2c>
 801259e:	1cc4      	adds	r4, r0, #3
 80125a0:	f024 0403 	bic.w	r4, r4, #3
 80125a4:	42a0      	cmp	r0, r4
 80125a6:	d0e3      	beq.n	8012570 <_malloc_r+0x64>
 80125a8:	1a21      	subs	r1, r4, r0
 80125aa:	4630      	mov	r0, r6
 80125ac:	f000 f962 	bl	8012874 <_sbrk_r>
 80125b0:	3001      	adds	r0, #1
 80125b2:	d1dd      	bne.n	8012570 <_malloc_r+0x64>
 80125b4:	e7cf      	b.n	8012556 <_malloc_r+0x4a>
 80125b6:	bf00      	nop
 80125b8:	2400024c 	.word	0x2400024c
 80125bc:	24000250 	.word	0x24000250

080125c0 <__sfputc_r>:
 80125c0:	6893      	ldr	r3, [r2, #8]
 80125c2:	3b01      	subs	r3, #1
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	b410      	push	{r4}
 80125c8:	6093      	str	r3, [r2, #8]
 80125ca:	da08      	bge.n	80125de <__sfputc_r+0x1e>
 80125cc:	6994      	ldr	r4, [r2, #24]
 80125ce:	42a3      	cmp	r3, r4
 80125d0:	db01      	blt.n	80125d6 <__sfputc_r+0x16>
 80125d2:	290a      	cmp	r1, #10
 80125d4:	d103      	bne.n	80125de <__sfputc_r+0x1e>
 80125d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125da:	f7fe bab1 	b.w	8010b40 <__swbuf_r>
 80125de:	6813      	ldr	r3, [r2, #0]
 80125e0:	1c58      	adds	r0, r3, #1
 80125e2:	6010      	str	r0, [r2, #0]
 80125e4:	7019      	strb	r1, [r3, #0]
 80125e6:	4608      	mov	r0, r1
 80125e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80125ec:	4770      	bx	lr

080125ee <__sfputs_r>:
 80125ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125f0:	4606      	mov	r6, r0
 80125f2:	460f      	mov	r7, r1
 80125f4:	4614      	mov	r4, r2
 80125f6:	18d5      	adds	r5, r2, r3
 80125f8:	42ac      	cmp	r4, r5
 80125fa:	d101      	bne.n	8012600 <__sfputs_r+0x12>
 80125fc:	2000      	movs	r0, #0
 80125fe:	e007      	b.n	8012610 <__sfputs_r+0x22>
 8012600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012604:	463a      	mov	r2, r7
 8012606:	4630      	mov	r0, r6
 8012608:	f7ff ffda 	bl	80125c0 <__sfputc_r>
 801260c:	1c43      	adds	r3, r0, #1
 801260e:	d1f3      	bne.n	80125f8 <__sfputs_r+0xa>
 8012610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012614 <_vfiprintf_r>:
 8012614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012618:	460d      	mov	r5, r1
 801261a:	b09d      	sub	sp, #116	; 0x74
 801261c:	4614      	mov	r4, r2
 801261e:	4698      	mov	r8, r3
 8012620:	4606      	mov	r6, r0
 8012622:	b118      	cbz	r0, 801262c <_vfiprintf_r+0x18>
 8012624:	6983      	ldr	r3, [r0, #24]
 8012626:	b90b      	cbnz	r3, 801262c <_vfiprintf_r+0x18>
 8012628:	f7ff fa72 	bl	8011b10 <__sinit>
 801262c:	4b89      	ldr	r3, [pc, #548]	; (8012854 <_vfiprintf_r+0x240>)
 801262e:	429d      	cmp	r5, r3
 8012630:	d11b      	bne.n	801266a <_vfiprintf_r+0x56>
 8012632:	6875      	ldr	r5, [r6, #4]
 8012634:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012636:	07d9      	lsls	r1, r3, #31
 8012638:	d405      	bmi.n	8012646 <_vfiprintf_r+0x32>
 801263a:	89ab      	ldrh	r3, [r5, #12]
 801263c:	059a      	lsls	r2, r3, #22
 801263e:	d402      	bmi.n	8012646 <_vfiprintf_r+0x32>
 8012640:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012642:	f7ff fb08 	bl	8011c56 <__retarget_lock_acquire_recursive>
 8012646:	89ab      	ldrh	r3, [r5, #12]
 8012648:	071b      	lsls	r3, r3, #28
 801264a:	d501      	bpl.n	8012650 <_vfiprintf_r+0x3c>
 801264c:	692b      	ldr	r3, [r5, #16]
 801264e:	b9eb      	cbnz	r3, 801268c <_vfiprintf_r+0x78>
 8012650:	4629      	mov	r1, r5
 8012652:	4630      	mov	r0, r6
 8012654:	f7fe fac6 	bl	8010be4 <__swsetup_r>
 8012658:	b1c0      	cbz	r0, 801268c <_vfiprintf_r+0x78>
 801265a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801265c:	07dc      	lsls	r4, r3, #31
 801265e:	d50e      	bpl.n	801267e <_vfiprintf_r+0x6a>
 8012660:	f04f 30ff 	mov.w	r0, #4294967295
 8012664:	b01d      	add	sp, #116	; 0x74
 8012666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801266a:	4b7b      	ldr	r3, [pc, #492]	; (8012858 <_vfiprintf_r+0x244>)
 801266c:	429d      	cmp	r5, r3
 801266e:	d101      	bne.n	8012674 <_vfiprintf_r+0x60>
 8012670:	68b5      	ldr	r5, [r6, #8]
 8012672:	e7df      	b.n	8012634 <_vfiprintf_r+0x20>
 8012674:	4b79      	ldr	r3, [pc, #484]	; (801285c <_vfiprintf_r+0x248>)
 8012676:	429d      	cmp	r5, r3
 8012678:	bf08      	it	eq
 801267a:	68f5      	ldreq	r5, [r6, #12]
 801267c:	e7da      	b.n	8012634 <_vfiprintf_r+0x20>
 801267e:	89ab      	ldrh	r3, [r5, #12]
 8012680:	0598      	lsls	r0, r3, #22
 8012682:	d4ed      	bmi.n	8012660 <_vfiprintf_r+0x4c>
 8012684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012686:	f7ff fae7 	bl	8011c58 <__retarget_lock_release_recursive>
 801268a:	e7e9      	b.n	8012660 <_vfiprintf_r+0x4c>
 801268c:	2300      	movs	r3, #0
 801268e:	9309      	str	r3, [sp, #36]	; 0x24
 8012690:	2320      	movs	r3, #32
 8012692:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012696:	f8cd 800c 	str.w	r8, [sp, #12]
 801269a:	2330      	movs	r3, #48	; 0x30
 801269c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012860 <_vfiprintf_r+0x24c>
 80126a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80126a4:	f04f 0901 	mov.w	r9, #1
 80126a8:	4623      	mov	r3, r4
 80126aa:	469a      	mov	sl, r3
 80126ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126b0:	b10a      	cbz	r2, 80126b6 <_vfiprintf_r+0xa2>
 80126b2:	2a25      	cmp	r2, #37	; 0x25
 80126b4:	d1f9      	bne.n	80126aa <_vfiprintf_r+0x96>
 80126b6:	ebba 0b04 	subs.w	fp, sl, r4
 80126ba:	d00b      	beq.n	80126d4 <_vfiprintf_r+0xc0>
 80126bc:	465b      	mov	r3, fp
 80126be:	4622      	mov	r2, r4
 80126c0:	4629      	mov	r1, r5
 80126c2:	4630      	mov	r0, r6
 80126c4:	f7ff ff93 	bl	80125ee <__sfputs_r>
 80126c8:	3001      	adds	r0, #1
 80126ca:	f000 80aa 	beq.w	8012822 <_vfiprintf_r+0x20e>
 80126ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126d0:	445a      	add	r2, fp
 80126d2:	9209      	str	r2, [sp, #36]	; 0x24
 80126d4:	f89a 3000 	ldrb.w	r3, [sl]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f000 80a2 	beq.w	8012822 <_vfiprintf_r+0x20e>
 80126de:	2300      	movs	r3, #0
 80126e0:	f04f 32ff 	mov.w	r2, #4294967295
 80126e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80126e8:	f10a 0a01 	add.w	sl, sl, #1
 80126ec:	9304      	str	r3, [sp, #16]
 80126ee:	9307      	str	r3, [sp, #28]
 80126f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80126f4:	931a      	str	r3, [sp, #104]	; 0x68
 80126f6:	4654      	mov	r4, sl
 80126f8:	2205      	movs	r2, #5
 80126fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126fe:	4858      	ldr	r0, [pc, #352]	; (8012860 <_vfiprintf_r+0x24c>)
 8012700:	f7ed fdf6 	bl	80002f0 <memchr>
 8012704:	9a04      	ldr	r2, [sp, #16]
 8012706:	b9d8      	cbnz	r0, 8012740 <_vfiprintf_r+0x12c>
 8012708:	06d1      	lsls	r1, r2, #27
 801270a:	bf44      	itt	mi
 801270c:	2320      	movmi	r3, #32
 801270e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012712:	0713      	lsls	r3, r2, #28
 8012714:	bf44      	itt	mi
 8012716:	232b      	movmi	r3, #43	; 0x2b
 8012718:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801271c:	f89a 3000 	ldrb.w	r3, [sl]
 8012720:	2b2a      	cmp	r3, #42	; 0x2a
 8012722:	d015      	beq.n	8012750 <_vfiprintf_r+0x13c>
 8012724:	9a07      	ldr	r2, [sp, #28]
 8012726:	4654      	mov	r4, sl
 8012728:	2000      	movs	r0, #0
 801272a:	f04f 0c0a 	mov.w	ip, #10
 801272e:	4621      	mov	r1, r4
 8012730:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012734:	3b30      	subs	r3, #48	; 0x30
 8012736:	2b09      	cmp	r3, #9
 8012738:	d94e      	bls.n	80127d8 <_vfiprintf_r+0x1c4>
 801273a:	b1b0      	cbz	r0, 801276a <_vfiprintf_r+0x156>
 801273c:	9207      	str	r2, [sp, #28]
 801273e:	e014      	b.n	801276a <_vfiprintf_r+0x156>
 8012740:	eba0 0308 	sub.w	r3, r0, r8
 8012744:	fa09 f303 	lsl.w	r3, r9, r3
 8012748:	4313      	orrs	r3, r2
 801274a:	9304      	str	r3, [sp, #16]
 801274c:	46a2      	mov	sl, r4
 801274e:	e7d2      	b.n	80126f6 <_vfiprintf_r+0xe2>
 8012750:	9b03      	ldr	r3, [sp, #12]
 8012752:	1d19      	adds	r1, r3, #4
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	9103      	str	r1, [sp, #12]
 8012758:	2b00      	cmp	r3, #0
 801275a:	bfbb      	ittet	lt
 801275c:	425b      	neglt	r3, r3
 801275e:	f042 0202 	orrlt.w	r2, r2, #2
 8012762:	9307      	strge	r3, [sp, #28]
 8012764:	9307      	strlt	r3, [sp, #28]
 8012766:	bfb8      	it	lt
 8012768:	9204      	strlt	r2, [sp, #16]
 801276a:	7823      	ldrb	r3, [r4, #0]
 801276c:	2b2e      	cmp	r3, #46	; 0x2e
 801276e:	d10c      	bne.n	801278a <_vfiprintf_r+0x176>
 8012770:	7863      	ldrb	r3, [r4, #1]
 8012772:	2b2a      	cmp	r3, #42	; 0x2a
 8012774:	d135      	bne.n	80127e2 <_vfiprintf_r+0x1ce>
 8012776:	9b03      	ldr	r3, [sp, #12]
 8012778:	1d1a      	adds	r2, r3, #4
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	9203      	str	r2, [sp, #12]
 801277e:	2b00      	cmp	r3, #0
 8012780:	bfb8      	it	lt
 8012782:	f04f 33ff 	movlt.w	r3, #4294967295
 8012786:	3402      	adds	r4, #2
 8012788:	9305      	str	r3, [sp, #20]
 801278a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012870 <_vfiprintf_r+0x25c>
 801278e:	7821      	ldrb	r1, [r4, #0]
 8012790:	2203      	movs	r2, #3
 8012792:	4650      	mov	r0, sl
 8012794:	f7ed fdac 	bl	80002f0 <memchr>
 8012798:	b140      	cbz	r0, 80127ac <_vfiprintf_r+0x198>
 801279a:	2340      	movs	r3, #64	; 0x40
 801279c:	eba0 000a 	sub.w	r0, r0, sl
 80127a0:	fa03 f000 	lsl.w	r0, r3, r0
 80127a4:	9b04      	ldr	r3, [sp, #16]
 80127a6:	4303      	orrs	r3, r0
 80127a8:	3401      	adds	r4, #1
 80127aa:	9304      	str	r3, [sp, #16]
 80127ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127b0:	482c      	ldr	r0, [pc, #176]	; (8012864 <_vfiprintf_r+0x250>)
 80127b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80127b6:	2206      	movs	r2, #6
 80127b8:	f7ed fd9a 	bl	80002f0 <memchr>
 80127bc:	2800      	cmp	r0, #0
 80127be:	d03f      	beq.n	8012840 <_vfiprintf_r+0x22c>
 80127c0:	4b29      	ldr	r3, [pc, #164]	; (8012868 <_vfiprintf_r+0x254>)
 80127c2:	bb1b      	cbnz	r3, 801280c <_vfiprintf_r+0x1f8>
 80127c4:	9b03      	ldr	r3, [sp, #12]
 80127c6:	3307      	adds	r3, #7
 80127c8:	f023 0307 	bic.w	r3, r3, #7
 80127cc:	3308      	adds	r3, #8
 80127ce:	9303      	str	r3, [sp, #12]
 80127d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127d2:	443b      	add	r3, r7
 80127d4:	9309      	str	r3, [sp, #36]	; 0x24
 80127d6:	e767      	b.n	80126a8 <_vfiprintf_r+0x94>
 80127d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80127dc:	460c      	mov	r4, r1
 80127de:	2001      	movs	r0, #1
 80127e0:	e7a5      	b.n	801272e <_vfiprintf_r+0x11a>
 80127e2:	2300      	movs	r3, #0
 80127e4:	3401      	adds	r4, #1
 80127e6:	9305      	str	r3, [sp, #20]
 80127e8:	4619      	mov	r1, r3
 80127ea:	f04f 0c0a 	mov.w	ip, #10
 80127ee:	4620      	mov	r0, r4
 80127f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80127f4:	3a30      	subs	r2, #48	; 0x30
 80127f6:	2a09      	cmp	r2, #9
 80127f8:	d903      	bls.n	8012802 <_vfiprintf_r+0x1ee>
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d0c5      	beq.n	801278a <_vfiprintf_r+0x176>
 80127fe:	9105      	str	r1, [sp, #20]
 8012800:	e7c3      	b.n	801278a <_vfiprintf_r+0x176>
 8012802:	fb0c 2101 	mla	r1, ip, r1, r2
 8012806:	4604      	mov	r4, r0
 8012808:	2301      	movs	r3, #1
 801280a:	e7f0      	b.n	80127ee <_vfiprintf_r+0x1da>
 801280c:	ab03      	add	r3, sp, #12
 801280e:	9300      	str	r3, [sp, #0]
 8012810:	462a      	mov	r2, r5
 8012812:	4b16      	ldr	r3, [pc, #88]	; (801286c <_vfiprintf_r+0x258>)
 8012814:	a904      	add	r1, sp, #16
 8012816:	4630      	mov	r0, r6
 8012818:	f7fd fd52 	bl	80102c0 <_printf_float>
 801281c:	4607      	mov	r7, r0
 801281e:	1c78      	adds	r0, r7, #1
 8012820:	d1d6      	bne.n	80127d0 <_vfiprintf_r+0x1bc>
 8012822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012824:	07d9      	lsls	r1, r3, #31
 8012826:	d405      	bmi.n	8012834 <_vfiprintf_r+0x220>
 8012828:	89ab      	ldrh	r3, [r5, #12]
 801282a:	059a      	lsls	r2, r3, #22
 801282c:	d402      	bmi.n	8012834 <_vfiprintf_r+0x220>
 801282e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012830:	f7ff fa12 	bl	8011c58 <__retarget_lock_release_recursive>
 8012834:	89ab      	ldrh	r3, [r5, #12]
 8012836:	065b      	lsls	r3, r3, #25
 8012838:	f53f af12 	bmi.w	8012660 <_vfiprintf_r+0x4c>
 801283c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801283e:	e711      	b.n	8012664 <_vfiprintf_r+0x50>
 8012840:	ab03      	add	r3, sp, #12
 8012842:	9300      	str	r3, [sp, #0]
 8012844:	462a      	mov	r2, r5
 8012846:	4b09      	ldr	r3, [pc, #36]	; (801286c <_vfiprintf_r+0x258>)
 8012848:	a904      	add	r1, sp, #16
 801284a:	4630      	mov	r0, r6
 801284c:	f7fd ffc4 	bl	80107d8 <_printf_i>
 8012850:	e7e4      	b.n	801281c <_vfiprintf_r+0x208>
 8012852:	bf00      	nop
 8012854:	08013640 	.word	0x08013640
 8012858:	08013660 	.word	0x08013660
 801285c:	08013620 	.word	0x08013620
 8012860:	080137dc 	.word	0x080137dc
 8012864:	080137e6 	.word	0x080137e6
 8012868:	080102c1 	.word	0x080102c1
 801286c:	080125ef 	.word	0x080125ef
 8012870:	080137e2 	.word	0x080137e2

08012874 <_sbrk_r>:
 8012874:	b538      	push	{r3, r4, r5, lr}
 8012876:	4d06      	ldr	r5, [pc, #24]	; (8012890 <_sbrk_r+0x1c>)
 8012878:	2300      	movs	r3, #0
 801287a:	4604      	mov	r4, r0
 801287c:	4608      	mov	r0, r1
 801287e:	602b      	str	r3, [r5, #0]
 8012880:	f7f1 fb60 	bl	8003f44 <_sbrk>
 8012884:	1c43      	adds	r3, r0, #1
 8012886:	d102      	bne.n	801288e <_sbrk_r+0x1a>
 8012888:	682b      	ldr	r3, [r5, #0]
 801288a:	b103      	cbz	r3, 801288e <_sbrk_r+0x1a>
 801288c:	6023      	str	r3, [r4, #0]
 801288e:	bd38      	pop	{r3, r4, r5, pc}
 8012890:	240006a0 	.word	0x240006a0

08012894 <__sread>:
 8012894:	b510      	push	{r4, lr}
 8012896:	460c      	mov	r4, r1
 8012898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801289c:	f000 f8e2 	bl	8012a64 <_read_r>
 80128a0:	2800      	cmp	r0, #0
 80128a2:	bfab      	itete	ge
 80128a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80128a6:	89a3      	ldrhlt	r3, [r4, #12]
 80128a8:	181b      	addge	r3, r3, r0
 80128aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80128ae:	bfac      	ite	ge
 80128b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80128b2:	81a3      	strhlt	r3, [r4, #12]
 80128b4:	bd10      	pop	{r4, pc}

080128b6 <__swrite>:
 80128b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ba:	461f      	mov	r7, r3
 80128bc:	898b      	ldrh	r3, [r1, #12]
 80128be:	05db      	lsls	r3, r3, #23
 80128c0:	4605      	mov	r5, r0
 80128c2:	460c      	mov	r4, r1
 80128c4:	4616      	mov	r6, r2
 80128c6:	d505      	bpl.n	80128d4 <__swrite+0x1e>
 80128c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128cc:	2302      	movs	r3, #2
 80128ce:	2200      	movs	r2, #0
 80128d0:	f000 f898 	bl	8012a04 <_lseek_r>
 80128d4:	89a3      	ldrh	r3, [r4, #12]
 80128d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80128de:	81a3      	strh	r3, [r4, #12]
 80128e0:	4632      	mov	r2, r6
 80128e2:	463b      	mov	r3, r7
 80128e4:	4628      	mov	r0, r5
 80128e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128ea:	f000 b817 	b.w	801291c <_write_r>

080128ee <__sseek>:
 80128ee:	b510      	push	{r4, lr}
 80128f0:	460c      	mov	r4, r1
 80128f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128f6:	f000 f885 	bl	8012a04 <_lseek_r>
 80128fa:	1c43      	adds	r3, r0, #1
 80128fc:	89a3      	ldrh	r3, [r4, #12]
 80128fe:	bf15      	itete	ne
 8012900:	6560      	strne	r0, [r4, #84]	; 0x54
 8012902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801290a:	81a3      	strheq	r3, [r4, #12]
 801290c:	bf18      	it	ne
 801290e:	81a3      	strhne	r3, [r4, #12]
 8012910:	bd10      	pop	{r4, pc}

08012912 <__sclose>:
 8012912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012916:	f000 b831 	b.w	801297c <_close_r>
	...

0801291c <_write_r>:
 801291c:	b538      	push	{r3, r4, r5, lr}
 801291e:	4d07      	ldr	r5, [pc, #28]	; (801293c <_write_r+0x20>)
 8012920:	4604      	mov	r4, r0
 8012922:	4608      	mov	r0, r1
 8012924:	4611      	mov	r1, r2
 8012926:	2200      	movs	r2, #0
 8012928:	602a      	str	r2, [r5, #0]
 801292a:	461a      	mov	r2, r3
 801292c:	f7f0 f964 	bl	8002bf8 <_write>
 8012930:	1c43      	adds	r3, r0, #1
 8012932:	d102      	bne.n	801293a <_write_r+0x1e>
 8012934:	682b      	ldr	r3, [r5, #0]
 8012936:	b103      	cbz	r3, 801293a <_write_r+0x1e>
 8012938:	6023      	str	r3, [r4, #0]
 801293a:	bd38      	pop	{r3, r4, r5, pc}
 801293c:	240006a0 	.word	0x240006a0

08012940 <__assert_func>:
 8012940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012942:	4614      	mov	r4, r2
 8012944:	461a      	mov	r2, r3
 8012946:	4b09      	ldr	r3, [pc, #36]	; (801296c <__assert_func+0x2c>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	4605      	mov	r5, r0
 801294c:	68d8      	ldr	r0, [r3, #12]
 801294e:	b14c      	cbz	r4, 8012964 <__assert_func+0x24>
 8012950:	4b07      	ldr	r3, [pc, #28]	; (8012970 <__assert_func+0x30>)
 8012952:	9100      	str	r1, [sp, #0]
 8012954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012958:	4906      	ldr	r1, [pc, #24]	; (8012974 <__assert_func+0x34>)
 801295a:	462b      	mov	r3, r5
 801295c:	f000 f81e 	bl	801299c <fiprintf>
 8012960:	f000 f89f 	bl	8012aa2 <abort>
 8012964:	4b04      	ldr	r3, [pc, #16]	; (8012978 <__assert_func+0x38>)
 8012966:	461c      	mov	r4, r3
 8012968:	e7f3      	b.n	8012952 <__assert_func+0x12>
 801296a:	bf00      	nop
 801296c:	24000028 	.word	0x24000028
 8012970:	080137ed 	.word	0x080137ed
 8012974:	080137fa 	.word	0x080137fa
 8012978:	08013828 	.word	0x08013828

0801297c <_close_r>:
 801297c:	b538      	push	{r3, r4, r5, lr}
 801297e:	4d06      	ldr	r5, [pc, #24]	; (8012998 <_close_r+0x1c>)
 8012980:	2300      	movs	r3, #0
 8012982:	4604      	mov	r4, r0
 8012984:	4608      	mov	r0, r1
 8012986:	602b      	str	r3, [r5, #0]
 8012988:	f7f1 faa7 	bl	8003eda <_close>
 801298c:	1c43      	adds	r3, r0, #1
 801298e:	d102      	bne.n	8012996 <_close_r+0x1a>
 8012990:	682b      	ldr	r3, [r5, #0]
 8012992:	b103      	cbz	r3, 8012996 <_close_r+0x1a>
 8012994:	6023      	str	r3, [r4, #0]
 8012996:	bd38      	pop	{r3, r4, r5, pc}
 8012998:	240006a0 	.word	0x240006a0

0801299c <fiprintf>:
 801299c:	b40e      	push	{r1, r2, r3}
 801299e:	b503      	push	{r0, r1, lr}
 80129a0:	4601      	mov	r1, r0
 80129a2:	ab03      	add	r3, sp, #12
 80129a4:	4805      	ldr	r0, [pc, #20]	; (80129bc <fiprintf+0x20>)
 80129a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80129aa:	6800      	ldr	r0, [r0, #0]
 80129ac:	9301      	str	r3, [sp, #4]
 80129ae:	f7ff fe31 	bl	8012614 <_vfiprintf_r>
 80129b2:	b002      	add	sp, #8
 80129b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80129b8:	b003      	add	sp, #12
 80129ba:	4770      	bx	lr
 80129bc:	24000028 	.word	0x24000028

080129c0 <_fstat_r>:
 80129c0:	b538      	push	{r3, r4, r5, lr}
 80129c2:	4d07      	ldr	r5, [pc, #28]	; (80129e0 <_fstat_r+0x20>)
 80129c4:	2300      	movs	r3, #0
 80129c6:	4604      	mov	r4, r0
 80129c8:	4608      	mov	r0, r1
 80129ca:	4611      	mov	r1, r2
 80129cc:	602b      	str	r3, [r5, #0]
 80129ce:	f7f1 fa90 	bl	8003ef2 <_fstat>
 80129d2:	1c43      	adds	r3, r0, #1
 80129d4:	d102      	bne.n	80129dc <_fstat_r+0x1c>
 80129d6:	682b      	ldr	r3, [r5, #0]
 80129d8:	b103      	cbz	r3, 80129dc <_fstat_r+0x1c>
 80129da:	6023      	str	r3, [r4, #0]
 80129dc:	bd38      	pop	{r3, r4, r5, pc}
 80129de:	bf00      	nop
 80129e0:	240006a0 	.word	0x240006a0

080129e4 <_isatty_r>:
 80129e4:	b538      	push	{r3, r4, r5, lr}
 80129e6:	4d06      	ldr	r5, [pc, #24]	; (8012a00 <_isatty_r+0x1c>)
 80129e8:	2300      	movs	r3, #0
 80129ea:	4604      	mov	r4, r0
 80129ec:	4608      	mov	r0, r1
 80129ee:	602b      	str	r3, [r5, #0]
 80129f0:	f7f1 fa8f 	bl	8003f12 <_isatty>
 80129f4:	1c43      	adds	r3, r0, #1
 80129f6:	d102      	bne.n	80129fe <_isatty_r+0x1a>
 80129f8:	682b      	ldr	r3, [r5, #0]
 80129fa:	b103      	cbz	r3, 80129fe <_isatty_r+0x1a>
 80129fc:	6023      	str	r3, [r4, #0]
 80129fe:	bd38      	pop	{r3, r4, r5, pc}
 8012a00:	240006a0 	.word	0x240006a0

08012a04 <_lseek_r>:
 8012a04:	b538      	push	{r3, r4, r5, lr}
 8012a06:	4d07      	ldr	r5, [pc, #28]	; (8012a24 <_lseek_r+0x20>)
 8012a08:	4604      	mov	r4, r0
 8012a0a:	4608      	mov	r0, r1
 8012a0c:	4611      	mov	r1, r2
 8012a0e:	2200      	movs	r2, #0
 8012a10:	602a      	str	r2, [r5, #0]
 8012a12:	461a      	mov	r2, r3
 8012a14:	f7f1 fa88 	bl	8003f28 <_lseek>
 8012a18:	1c43      	adds	r3, r0, #1
 8012a1a:	d102      	bne.n	8012a22 <_lseek_r+0x1e>
 8012a1c:	682b      	ldr	r3, [r5, #0]
 8012a1e:	b103      	cbz	r3, 8012a22 <_lseek_r+0x1e>
 8012a20:	6023      	str	r3, [r4, #0]
 8012a22:	bd38      	pop	{r3, r4, r5, pc}
 8012a24:	240006a0 	.word	0x240006a0

08012a28 <__ascii_mbtowc>:
 8012a28:	b082      	sub	sp, #8
 8012a2a:	b901      	cbnz	r1, 8012a2e <__ascii_mbtowc+0x6>
 8012a2c:	a901      	add	r1, sp, #4
 8012a2e:	b142      	cbz	r2, 8012a42 <__ascii_mbtowc+0x1a>
 8012a30:	b14b      	cbz	r3, 8012a46 <__ascii_mbtowc+0x1e>
 8012a32:	7813      	ldrb	r3, [r2, #0]
 8012a34:	600b      	str	r3, [r1, #0]
 8012a36:	7812      	ldrb	r2, [r2, #0]
 8012a38:	1e10      	subs	r0, r2, #0
 8012a3a:	bf18      	it	ne
 8012a3c:	2001      	movne	r0, #1
 8012a3e:	b002      	add	sp, #8
 8012a40:	4770      	bx	lr
 8012a42:	4610      	mov	r0, r2
 8012a44:	e7fb      	b.n	8012a3e <__ascii_mbtowc+0x16>
 8012a46:	f06f 0001 	mvn.w	r0, #1
 8012a4a:	e7f8      	b.n	8012a3e <__ascii_mbtowc+0x16>

08012a4c <__malloc_lock>:
 8012a4c:	4801      	ldr	r0, [pc, #4]	; (8012a54 <__malloc_lock+0x8>)
 8012a4e:	f7ff b902 	b.w	8011c56 <__retarget_lock_acquire_recursive>
 8012a52:	bf00      	nop
 8012a54:	24000698 	.word	0x24000698

08012a58 <__malloc_unlock>:
 8012a58:	4801      	ldr	r0, [pc, #4]	; (8012a60 <__malloc_unlock+0x8>)
 8012a5a:	f7ff b8fd 	b.w	8011c58 <__retarget_lock_release_recursive>
 8012a5e:	bf00      	nop
 8012a60:	24000698 	.word	0x24000698

08012a64 <_read_r>:
 8012a64:	b538      	push	{r3, r4, r5, lr}
 8012a66:	4d07      	ldr	r5, [pc, #28]	; (8012a84 <_read_r+0x20>)
 8012a68:	4604      	mov	r4, r0
 8012a6a:	4608      	mov	r0, r1
 8012a6c:	4611      	mov	r1, r2
 8012a6e:	2200      	movs	r2, #0
 8012a70:	602a      	str	r2, [r5, #0]
 8012a72:	461a      	mov	r2, r3
 8012a74:	f7f1 fa14 	bl	8003ea0 <_read>
 8012a78:	1c43      	adds	r3, r0, #1
 8012a7a:	d102      	bne.n	8012a82 <_read_r+0x1e>
 8012a7c:	682b      	ldr	r3, [r5, #0]
 8012a7e:	b103      	cbz	r3, 8012a82 <_read_r+0x1e>
 8012a80:	6023      	str	r3, [r4, #0]
 8012a82:	bd38      	pop	{r3, r4, r5, pc}
 8012a84:	240006a0 	.word	0x240006a0

08012a88 <__ascii_wctomb>:
 8012a88:	b149      	cbz	r1, 8012a9e <__ascii_wctomb+0x16>
 8012a8a:	2aff      	cmp	r2, #255	; 0xff
 8012a8c:	bf85      	ittet	hi
 8012a8e:	238a      	movhi	r3, #138	; 0x8a
 8012a90:	6003      	strhi	r3, [r0, #0]
 8012a92:	700a      	strbls	r2, [r1, #0]
 8012a94:	f04f 30ff 	movhi.w	r0, #4294967295
 8012a98:	bf98      	it	ls
 8012a9a:	2001      	movls	r0, #1
 8012a9c:	4770      	bx	lr
 8012a9e:	4608      	mov	r0, r1
 8012aa0:	4770      	bx	lr

08012aa2 <abort>:
 8012aa2:	b508      	push	{r3, lr}
 8012aa4:	2006      	movs	r0, #6
 8012aa6:	f000 f82b 	bl	8012b00 <raise>
 8012aaa:	2001      	movs	r0, #1
 8012aac:	f7f1 f9ee 	bl	8003e8c <_exit>

08012ab0 <_raise_r>:
 8012ab0:	291f      	cmp	r1, #31
 8012ab2:	b538      	push	{r3, r4, r5, lr}
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	460d      	mov	r5, r1
 8012ab8:	d904      	bls.n	8012ac4 <_raise_r+0x14>
 8012aba:	2316      	movs	r3, #22
 8012abc:	6003      	str	r3, [r0, #0]
 8012abe:	f04f 30ff 	mov.w	r0, #4294967295
 8012ac2:	bd38      	pop	{r3, r4, r5, pc}
 8012ac4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012ac6:	b112      	cbz	r2, 8012ace <_raise_r+0x1e>
 8012ac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012acc:	b94b      	cbnz	r3, 8012ae2 <_raise_r+0x32>
 8012ace:	4620      	mov	r0, r4
 8012ad0:	f000 f830 	bl	8012b34 <_getpid_r>
 8012ad4:	462a      	mov	r2, r5
 8012ad6:	4601      	mov	r1, r0
 8012ad8:	4620      	mov	r0, r4
 8012ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ade:	f000 b817 	b.w	8012b10 <_kill_r>
 8012ae2:	2b01      	cmp	r3, #1
 8012ae4:	d00a      	beq.n	8012afc <_raise_r+0x4c>
 8012ae6:	1c59      	adds	r1, r3, #1
 8012ae8:	d103      	bne.n	8012af2 <_raise_r+0x42>
 8012aea:	2316      	movs	r3, #22
 8012aec:	6003      	str	r3, [r0, #0]
 8012aee:	2001      	movs	r0, #1
 8012af0:	e7e7      	b.n	8012ac2 <_raise_r+0x12>
 8012af2:	2400      	movs	r4, #0
 8012af4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012af8:	4628      	mov	r0, r5
 8012afa:	4798      	blx	r3
 8012afc:	2000      	movs	r0, #0
 8012afe:	e7e0      	b.n	8012ac2 <_raise_r+0x12>

08012b00 <raise>:
 8012b00:	4b02      	ldr	r3, [pc, #8]	; (8012b0c <raise+0xc>)
 8012b02:	4601      	mov	r1, r0
 8012b04:	6818      	ldr	r0, [r3, #0]
 8012b06:	f7ff bfd3 	b.w	8012ab0 <_raise_r>
 8012b0a:	bf00      	nop
 8012b0c:	24000028 	.word	0x24000028

08012b10 <_kill_r>:
 8012b10:	b538      	push	{r3, r4, r5, lr}
 8012b12:	4d07      	ldr	r5, [pc, #28]	; (8012b30 <_kill_r+0x20>)
 8012b14:	2300      	movs	r3, #0
 8012b16:	4604      	mov	r4, r0
 8012b18:	4608      	mov	r0, r1
 8012b1a:	4611      	mov	r1, r2
 8012b1c:	602b      	str	r3, [r5, #0]
 8012b1e:	f7f1 f9a5 	bl	8003e6c <_kill>
 8012b22:	1c43      	adds	r3, r0, #1
 8012b24:	d102      	bne.n	8012b2c <_kill_r+0x1c>
 8012b26:	682b      	ldr	r3, [r5, #0]
 8012b28:	b103      	cbz	r3, 8012b2c <_kill_r+0x1c>
 8012b2a:	6023      	str	r3, [r4, #0]
 8012b2c:	bd38      	pop	{r3, r4, r5, pc}
 8012b2e:	bf00      	nop
 8012b30:	240006a0 	.word	0x240006a0

08012b34 <_getpid_r>:
 8012b34:	f7f1 b992 	b.w	8003e5c <_getpid>

08012b38 <atan2>:
 8012b38:	f000 b862 	b.w	8012c00 <__ieee754_atan2>
 8012b3c:	0000      	movs	r0, r0
	...

08012b40 <sqrt>:
 8012b40:	b508      	push	{r3, lr}
 8012b42:	ed2d 8b04 	vpush	{d8-d9}
 8012b46:	eeb0 8b40 	vmov.f64	d8, d0
 8012b4a:	f000 f927 	bl	8012d9c <__ieee754_sqrt>
 8012b4e:	4b10      	ldr	r3, [pc, #64]	; (8012b90 <sqrt+0x50>)
 8012b50:	f993 3000 	ldrsb.w	r3, [r3]
 8012b54:	3301      	adds	r3, #1
 8012b56:	d011      	beq.n	8012b7c <sqrt+0x3c>
 8012b58:	eeb4 8b48 	vcmp.f64	d8, d8
 8012b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b60:	d60c      	bvs.n	8012b7c <sqrt+0x3c>
 8012b62:	ed9f 9b09 	vldr	d9, [pc, #36]	; 8012b88 <sqrt+0x48>
 8012b66:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b6e:	d505      	bpl.n	8012b7c <sqrt+0x3c>
 8012b70:	f7fd fae2 	bl	8010138 <__errno>
 8012b74:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8012b78:	2321      	movs	r3, #33	; 0x21
 8012b7a:	6003      	str	r3, [r0, #0]
 8012b7c:	ecbd 8b04 	vpop	{d8-d9}
 8012b80:	bd08      	pop	{r3, pc}
 8012b82:	bf00      	nop
 8012b84:	f3af 8000 	nop.w
	...
 8012b90:	240001f8 	.word	0x240001f8

08012b94 <asinf>:
 8012b94:	b508      	push	{r3, lr}
 8012b96:	ed2d 8b02 	vpush	{d8}
 8012b9a:	eeb0 8a40 	vmov.f32	s16, s0
 8012b9e:	f000 f901 	bl	8012da4 <__ieee754_asinf>
 8012ba2:	4b13      	ldr	r3, [pc, #76]	; (8012bf0 <asinf+0x5c>)
 8012ba4:	f993 3000 	ldrsb.w	r3, [r3]
 8012ba8:	3301      	adds	r3, #1
 8012baa:	eef0 8a40 	vmov.f32	s17, s0
 8012bae:	d01a      	beq.n	8012be6 <asinf+0x52>
 8012bb0:	eeb4 8a48 	vcmp.f32	s16, s16
 8012bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb8:	d615      	bvs.n	8012be6 <asinf+0x52>
 8012bba:	eeb0 0a48 	vmov.f32	s0, s16
 8012bbe:	f000 fc53 	bl	8013468 <fabsf>
 8012bc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012bc6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bce:	dd0a      	ble.n	8012be6 <asinf+0x52>
 8012bd0:	f7fd fab2 	bl	8010138 <__errno>
 8012bd4:	ecbd 8b02 	vpop	{d8}
 8012bd8:	2321      	movs	r3, #33	; 0x21
 8012bda:	6003      	str	r3, [r0, #0]
 8012bdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012be0:	4804      	ldr	r0, [pc, #16]	; (8012bf4 <asinf+0x60>)
 8012be2:	f000 bc49 	b.w	8013478 <nanf>
 8012be6:	eeb0 0a68 	vmov.f32	s0, s17
 8012bea:	ecbd 8b02 	vpop	{d8}
 8012bee:	bd08      	pop	{r3, pc}
 8012bf0:	240001f8 	.word	0x240001f8
 8012bf4:	08013828 	.word	0x08013828

08012bf8 <atan2f>:
 8012bf8:	f000 b9ba 	b.w	8012f70 <__ieee754_atan2f>
 8012bfc:	0000      	movs	r0, r0
	...

08012c00 <__ieee754_atan2>:
 8012c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c02:	ee11 6a10 	vmov	r6, s2
 8012c06:	ee11 0a90 	vmov	r0, s3
 8012c0a:	4273      	negs	r3, r6
 8012c0c:	4f60      	ldr	r7, [pc, #384]	; (8012d90 <__ieee754_atan2+0x190>)
 8012c0e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8012c12:	4333      	orrs	r3, r6
 8012c14:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012c18:	42bb      	cmp	r3, r7
 8012c1a:	ed8d 0b00 	vstr	d0, [sp]
 8012c1e:	d80b      	bhi.n	8012c38 <__ieee754_atan2+0x38>
 8012c20:	e9dd c500 	ldrd	ip, r5, [sp]
 8012c24:	f1cc 0100 	rsb	r1, ip, #0
 8012c28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c2c:	ea41 010c 	orr.w	r1, r1, ip
 8012c30:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8012c34:	42b9      	cmp	r1, r7
 8012c36:	d906      	bls.n	8012c46 <__ieee754_atan2+0x46>
 8012c38:	ed9d 7b00 	vldr	d7, [sp]
 8012c3c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8012c40:	ed8d 7b00 	vstr	d7, [sp]
 8012c44:	e054      	b.n	8012cf0 <__ieee754_atan2+0xf0>
 8012c46:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8012c4a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8012c4e:	4331      	orrs	r1, r6
 8012c50:	d104      	bne.n	8012c5c <__ieee754_atan2+0x5c>
 8012c52:	b003      	add	sp, #12
 8012c54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012c58:	f000 ba2e 	b.w	80130b8 <atan>
 8012c5c:	1784      	asrs	r4, r0, #30
 8012c5e:	f004 0402 	and.w	r4, r4, #2
 8012c62:	ea53 010c 	orrs.w	r1, r3, ip
 8012c66:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8012c6a:	d109      	bne.n	8012c80 <__ieee754_atan2+0x80>
 8012c6c:	2c02      	cmp	r4, #2
 8012c6e:	d069      	beq.n	8012d44 <__ieee754_atan2+0x144>
 8012c70:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8012d58 <__ieee754_atan2+0x158>
 8012c74:	ed9d 6b00 	vldr	d6, [sp]
 8012c78:	2c03      	cmp	r4, #3
 8012c7a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8012c7e:	e7df      	b.n	8012c40 <__ieee754_atan2+0x40>
 8012c80:	ea52 0106 	orrs.w	r1, r2, r6
 8012c84:	d107      	bne.n	8012c96 <__ieee754_atan2+0x96>
 8012c86:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8012d60 <__ieee754_atan2+0x160>
 8012c8a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8012d68 <__ieee754_atan2+0x168>
 8012c8e:	2d00      	cmp	r5, #0
 8012c90:	fe26 7b07 	vselge.f64	d7, d6, d7
 8012c94:	e7d4      	b.n	8012c40 <__ieee754_atan2+0x40>
 8012c96:	42ba      	cmp	r2, r7
 8012c98:	d10f      	bne.n	8012cba <__ieee754_atan2+0xba>
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	f104 34ff 	add.w	r4, r4, #4294967295
 8012ca0:	d107      	bne.n	8012cb2 <__ieee754_atan2+0xb2>
 8012ca2:	2c02      	cmp	r4, #2
 8012ca4:	d851      	bhi.n	8012d4a <__ieee754_atan2+0x14a>
 8012ca6:	4b3b      	ldr	r3, [pc, #236]	; (8012d94 <__ieee754_atan2+0x194>)
 8012ca8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8012cac:	ed94 7b00 	vldr	d7, [r4]
 8012cb0:	e7c6      	b.n	8012c40 <__ieee754_atan2+0x40>
 8012cb2:	2c02      	cmp	r4, #2
 8012cb4:	d84c      	bhi.n	8012d50 <__ieee754_atan2+0x150>
 8012cb6:	4b38      	ldr	r3, [pc, #224]	; (8012d98 <__ieee754_atan2+0x198>)
 8012cb8:	e7f6      	b.n	8012ca8 <__ieee754_atan2+0xa8>
 8012cba:	42bb      	cmp	r3, r7
 8012cbc:	d0e3      	beq.n	8012c86 <__ieee754_atan2+0x86>
 8012cbe:	1a9b      	subs	r3, r3, r2
 8012cc0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8012cc4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012cc8:	da16      	bge.n	8012cf8 <__ieee754_atan2+0xf8>
 8012cca:	2800      	cmp	r0, #0
 8012ccc:	da01      	bge.n	8012cd2 <__ieee754_atan2+0xd2>
 8012cce:	323c      	adds	r2, #60	; 0x3c
 8012cd0:	db17      	blt.n	8012d02 <__ieee754_atan2+0x102>
 8012cd2:	ed9d 7b00 	vldr	d7, [sp]
 8012cd6:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8012cda:	f000 fae7 	bl	80132ac <fabs>
 8012cde:	f000 f9eb 	bl	80130b8 <atan>
 8012ce2:	ed8d 0b00 	vstr	d0, [sp]
 8012ce6:	2c01      	cmp	r4, #1
 8012ce8:	d00e      	beq.n	8012d08 <__ieee754_atan2+0x108>
 8012cea:	2c02      	cmp	r4, #2
 8012cec:	d014      	beq.n	8012d18 <__ieee754_atan2+0x118>
 8012cee:	b9f4      	cbnz	r4, 8012d2e <__ieee754_atan2+0x12e>
 8012cf0:	ed9d 0b00 	vldr	d0, [sp]
 8012cf4:	b003      	add	sp, #12
 8012cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cf8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8012d60 <__ieee754_atan2+0x160>
 8012cfc:	ed8d 7b00 	vstr	d7, [sp]
 8012d00:	e7f1      	b.n	8012ce6 <__ieee754_atan2+0xe6>
 8012d02:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8012d70 <__ieee754_atan2+0x170>
 8012d06:	e7f9      	b.n	8012cfc <__ieee754_atan2+0xfc>
 8012d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d0c:	9901      	ldr	r1, [sp, #4]
 8012d0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d12:	e9cd 2300 	strd	r2, r3, [sp]
 8012d16:	e7eb      	b.n	8012cf0 <__ieee754_atan2+0xf0>
 8012d18:	ed9d 6b00 	vldr	d6, [sp]
 8012d1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8012d78 <__ieee754_atan2+0x178>
 8012d20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012d24:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8012d80 <__ieee754_atan2+0x180>
 8012d28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012d2c:	e788      	b.n	8012c40 <__ieee754_atan2+0x40>
 8012d2e:	ed9d 6b00 	vldr	d6, [sp]
 8012d32:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8012d78 <__ieee754_atan2+0x178>
 8012d36:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012d3a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8012d80 <__ieee754_atan2+0x180>
 8012d3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012d42:	e77d      	b.n	8012c40 <__ieee754_atan2+0x40>
 8012d44:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012d80 <__ieee754_atan2+0x180>
 8012d48:	e77a      	b.n	8012c40 <__ieee754_atan2+0x40>
 8012d4a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8012d88 <__ieee754_atan2+0x188>
 8012d4e:	e777      	b.n	8012c40 <__ieee754_atan2+0x40>
 8012d50:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8012d70 <__ieee754_atan2+0x170>
 8012d54:	e774      	b.n	8012c40 <__ieee754_atan2+0x40>
 8012d56:	bf00      	nop
 8012d58:	54442d18 	.word	0x54442d18
 8012d5c:	c00921fb 	.word	0xc00921fb
 8012d60:	54442d18 	.word	0x54442d18
 8012d64:	3ff921fb 	.word	0x3ff921fb
 8012d68:	54442d18 	.word	0x54442d18
 8012d6c:	bff921fb 	.word	0xbff921fb
	...
 8012d78:	33145c07 	.word	0x33145c07
 8012d7c:	3ca1a626 	.word	0x3ca1a626
 8012d80:	54442d18 	.word	0x54442d18
 8012d84:	400921fb 	.word	0x400921fb
 8012d88:	54442d18 	.word	0x54442d18
 8012d8c:	3fe921fb 	.word	0x3fe921fb
 8012d90:	7ff00000 	.word	0x7ff00000
 8012d94:	08013938 	.word	0x08013938
 8012d98:	08013950 	.word	0x08013950

08012d9c <__ieee754_sqrt>:
 8012d9c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8012da0:	4770      	bx	lr
	...

08012da4 <__ieee754_asinf>:
 8012da4:	b538      	push	{r3, r4, r5, lr}
 8012da6:	ee10 5a10 	vmov	r5, s0
 8012daa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012dae:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8012db2:	ed2d 8b04 	vpush	{d8-d9}
 8012db6:	d10c      	bne.n	8012dd2 <__ieee754_asinf+0x2e>
 8012db8:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8012f30 <__ieee754_asinf+0x18c>
 8012dbc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8012f34 <__ieee754_asinf+0x190>
 8012dc0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012dc4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8012dcc:	ecbd 8b04 	vpop	{d8-d9}
 8012dd0:	bd38      	pop	{r3, r4, r5, pc}
 8012dd2:	dd04      	ble.n	8012dde <__ieee754_asinf+0x3a>
 8012dd4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012dd8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012ddc:	e7f6      	b.n	8012dcc <__ieee754_asinf+0x28>
 8012dde:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8012de2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012de6:	da0b      	bge.n	8012e00 <__ieee754_asinf+0x5c>
 8012de8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012dec:	da52      	bge.n	8012e94 <__ieee754_asinf+0xf0>
 8012dee:	eddf 7a52 	vldr	s15, [pc, #328]	; 8012f38 <__ieee754_asinf+0x194>
 8012df2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012df6:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dfe:	dce5      	bgt.n	8012dcc <__ieee754_asinf+0x28>
 8012e00:	f000 fb32 	bl	8013468 <fabsf>
 8012e04:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8012e08:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8012e0c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8012e10:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8012f3c <__ieee754_asinf+0x198>
 8012e14:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8012f40 <__ieee754_asinf+0x19c>
 8012e18:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8012f44 <__ieee754_asinf+0x1a0>
 8012e1c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8012e20:	eddf 7a49 	vldr	s15, [pc, #292]	; 8012f48 <__ieee754_asinf+0x1a4>
 8012e24:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012e28:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012f4c <__ieee754_asinf+0x1a8>
 8012e2c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012e30:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012f50 <__ieee754_asinf+0x1ac>
 8012e34:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012e38:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012f54 <__ieee754_asinf+0x1b0>
 8012e3c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8012e40:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012f58 <__ieee754_asinf+0x1b4>
 8012e44:	eee8 7a07 	vfma.f32	s15, s16, s14
 8012e48:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012f5c <__ieee754_asinf+0x1b8>
 8012e4c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8012e50:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012f60 <__ieee754_asinf+0x1bc>
 8012e54:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012e58:	eeb0 0a48 	vmov.f32	s0, s16
 8012e5c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8012e60:	f000 f924 	bl	80130ac <__ieee754_sqrtf>
 8012e64:	4b3f      	ldr	r3, [pc, #252]	; (8012f64 <__ieee754_asinf+0x1c0>)
 8012e66:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012e6a:	429c      	cmp	r4, r3
 8012e6c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8012e70:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012e74:	dd3d      	ble.n	8012ef2 <__ieee754_asinf+0x14e>
 8012e76:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012e7a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012f68 <__ieee754_asinf+0x1c4>
 8012e7e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012e82:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012f34 <__ieee754_asinf+0x190>
 8012e86:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012e8a:	2d00      	cmp	r5, #0
 8012e8c:	bfd8      	it	le
 8012e8e:	eeb1 0a40 	vnegle.f32	s0, s0
 8012e92:	e79b      	b.n	8012dcc <__ieee754_asinf+0x28>
 8012e94:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012e98:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012f3c <__ieee754_asinf+0x198>
 8012e9c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012f40 <__ieee754_asinf+0x19c>
 8012ea0:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8012f54 <__ieee754_asinf+0x1b0>
 8012ea4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012ea8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012f48 <__ieee754_asinf+0x1a4>
 8012eac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012eb0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8012f4c <__ieee754_asinf+0x1a8>
 8012eb4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012eb8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8012f50 <__ieee754_asinf+0x1ac>
 8012ebc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012ec0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8012f44 <__ieee754_asinf+0x1a0>
 8012ec4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012ec8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8012f58 <__ieee754_asinf+0x1b4>
 8012ecc:	eee7 6a86 	vfma.f32	s13, s15, s12
 8012ed0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012f5c <__ieee754_asinf+0x1b8>
 8012ed4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012ed8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8012f60 <__ieee754_asinf+0x1bc>
 8012edc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012ee4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012ee8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012eec:	eea0 0a27 	vfma.f32	s0, s0, s15
 8012ef0:	e76c      	b.n	8012dcc <__ieee754_asinf+0x28>
 8012ef2:	ee10 3a10 	vmov	r3, s0
 8012ef6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012efa:	f023 030f 	bic.w	r3, r3, #15
 8012efe:	ee07 3a10 	vmov	s14, r3
 8012f02:	eea7 8a47 	vfms.f32	s16, s14, s14
 8012f06:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012f0a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012f0e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8012f12:	eddf 7a07 	vldr	s15, [pc, #28]	; 8012f30 <__ieee754_asinf+0x18c>
 8012f16:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8012f1a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8012f1e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012f6c <__ieee754_asinf+0x1c8>
 8012f22:	eeb0 6a40 	vmov.f32	s12, s0
 8012f26:	eea7 6a66 	vfms.f32	s12, s14, s13
 8012f2a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012f2e:	e7aa      	b.n	8012e86 <__ieee754_asinf+0xe2>
 8012f30:	b33bbd2e 	.word	0xb33bbd2e
 8012f34:	3fc90fdb 	.word	0x3fc90fdb
 8012f38:	7149f2ca 	.word	0x7149f2ca
 8012f3c:	3811ef08 	.word	0x3811ef08
 8012f40:	3a4f7f04 	.word	0x3a4f7f04
 8012f44:	3e2aaaab 	.word	0x3e2aaaab
 8012f48:	bd241146 	.word	0xbd241146
 8012f4c:	3e4e0aa8 	.word	0x3e4e0aa8
 8012f50:	bea6b090 	.word	0xbea6b090
 8012f54:	3d9dc62e 	.word	0x3d9dc62e
 8012f58:	bf303361 	.word	0xbf303361
 8012f5c:	4001572d 	.word	0x4001572d
 8012f60:	c019d139 	.word	0xc019d139
 8012f64:	3f799999 	.word	0x3f799999
 8012f68:	333bbd2e 	.word	0x333bbd2e
 8012f6c:	3f490fdb 	.word	0x3f490fdb

08012f70 <__ieee754_atan2f>:
 8012f70:	ee10 2a90 	vmov	r2, s1
 8012f74:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012f78:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012f7c:	b510      	push	{r4, lr}
 8012f7e:	eef0 7a40 	vmov.f32	s15, s0
 8012f82:	dc06      	bgt.n	8012f92 <__ieee754_atan2f+0x22>
 8012f84:	ee10 0a10 	vmov	r0, s0
 8012f88:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012f8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012f90:	dd04      	ble.n	8012f9c <__ieee754_atan2f+0x2c>
 8012f92:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012f96:	eeb0 0a67 	vmov.f32	s0, s15
 8012f9a:	bd10      	pop	{r4, pc}
 8012f9c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012fa0:	d103      	bne.n	8012faa <__ieee754_atan2f+0x3a>
 8012fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012fa6:	f000 b98b 	b.w	80132c0 <atanf>
 8012faa:	1794      	asrs	r4, r2, #30
 8012fac:	f004 0402 	and.w	r4, r4, #2
 8012fb0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012fb4:	b93b      	cbnz	r3, 8012fc6 <__ieee754_atan2f+0x56>
 8012fb6:	2c02      	cmp	r4, #2
 8012fb8:	d05c      	beq.n	8013074 <__ieee754_atan2f+0x104>
 8012fba:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013088 <__ieee754_atan2f+0x118>
 8012fbe:	2c03      	cmp	r4, #3
 8012fc0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8012fc4:	e7e7      	b.n	8012f96 <__ieee754_atan2f+0x26>
 8012fc6:	b939      	cbnz	r1, 8012fd8 <__ieee754_atan2f+0x68>
 8012fc8:	eddf 7a30 	vldr	s15, [pc, #192]	; 801308c <__ieee754_atan2f+0x11c>
 8012fcc:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8013090 <__ieee754_atan2f+0x120>
 8012fd0:	2800      	cmp	r0, #0
 8012fd2:	fe67 7a80 	vselge.f32	s15, s15, s0
 8012fd6:	e7de      	b.n	8012f96 <__ieee754_atan2f+0x26>
 8012fd8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012fdc:	d110      	bne.n	8013000 <__ieee754_atan2f+0x90>
 8012fde:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012fe2:	f104 34ff 	add.w	r4, r4, #4294967295
 8012fe6:	d107      	bne.n	8012ff8 <__ieee754_atan2f+0x88>
 8012fe8:	2c02      	cmp	r4, #2
 8012fea:	d846      	bhi.n	801307a <__ieee754_atan2f+0x10a>
 8012fec:	4b29      	ldr	r3, [pc, #164]	; (8013094 <__ieee754_atan2f+0x124>)
 8012fee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012ff2:	edd4 7a00 	vldr	s15, [r4]
 8012ff6:	e7ce      	b.n	8012f96 <__ieee754_atan2f+0x26>
 8012ff8:	2c02      	cmp	r4, #2
 8012ffa:	d841      	bhi.n	8013080 <__ieee754_atan2f+0x110>
 8012ffc:	4b26      	ldr	r3, [pc, #152]	; (8013098 <__ieee754_atan2f+0x128>)
 8012ffe:	e7f6      	b.n	8012fee <__ieee754_atan2f+0x7e>
 8013000:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013004:	d0e0      	beq.n	8012fc8 <__ieee754_atan2f+0x58>
 8013006:	1a5b      	subs	r3, r3, r1
 8013008:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801300c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8013010:	da1a      	bge.n	8013048 <__ieee754_atan2f+0xd8>
 8013012:	2a00      	cmp	r2, #0
 8013014:	da01      	bge.n	801301a <__ieee754_atan2f+0xaa>
 8013016:	313c      	adds	r1, #60	; 0x3c
 8013018:	db19      	blt.n	801304e <__ieee754_atan2f+0xde>
 801301a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801301e:	f000 fa23 	bl	8013468 <fabsf>
 8013022:	f000 f94d 	bl	80132c0 <atanf>
 8013026:	eef0 7a40 	vmov.f32	s15, s0
 801302a:	2c01      	cmp	r4, #1
 801302c:	d012      	beq.n	8013054 <__ieee754_atan2f+0xe4>
 801302e:	2c02      	cmp	r4, #2
 8013030:	d017      	beq.n	8013062 <__ieee754_atan2f+0xf2>
 8013032:	2c00      	cmp	r4, #0
 8013034:	d0af      	beq.n	8012f96 <__ieee754_atan2f+0x26>
 8013036:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801309c <__ieee754_atan2f+0x12c>
 801303a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801303e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80130a0 <__ieee754_atan2f+0x130>
 8013042:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013046:	e7a6      	b.n	8012f96 <__ieee754_atan2f+0x26>
 8013048:	eddf 7a10 	vldr	s15, [pc, #64]	; 801308c <__ieee754_atan2f+0x11c>
 801304c:	e7ed      	b.n	801302a <__ieee754_atan2f+0xba>
 801304e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80130a4 <__ieee754_atan2f+0x134>
 8013052:	e7ea      	b.n	801302a <__ieee754_atan2f+0xba>
 8013054:	ee17 3a90 	vmov	r3, s15
 8013058:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801305c:	ee07 3a90 	vmov	s15, r3
 8013060:	e799      	b.n	8012f96 <__ieee754_atan2f+0x26>
 8013062:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801309c <__ieee754_atan2f+0x12c>
 8013066:	ee77 7a80 	vadd.f32	s15, s15, s0
 801306a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80130a0 <__ieee754_atan2f+0x130>
 801306e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013072:	e790      	b.n	8012f96 <__ieee754_atan2f+0x26>
 8013074:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80130a0 <__ieee754_atan2f+0x130>
 8013078:	e78d      	b.n	8012f96 <__ieee754_atan2f+0x26>
 801307a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80130a8 <__ieee754_atan2f+0x138>
 801307e:	e78a      	b.n	8012f96 <__ieee754_atan2f+0x26>
 8013080:	eddf 7a08 	vldr	s15, [pc, #32]	; 80130a4 <__ieee754_atan2f+0x134>
 8013084:	e787      	b.n	8012f96 <__ieee754_atan2f+0x26>
 8013086:	bf00      	nop
 8013088:	c0490fdb 	.word	0xc0490fdb
 801308c:	3fc90fdb 	.word	0x3fc90fdb
 8013090:	bfc90fdb 	.word	0xbfc90fdb
 8013094:	08013968 	.word	0x08013968
 8013098:	08013974 	.word	0x08013974
 801309c:	33bbbd2e 	.word	0x33bbbd2e
 80130a0:	40490fdb 	.word	0x40490fdb
 80130a4:	00000000 	.word	0x00000000
 80130a8:	3f490fdb 	.word	0x3f490fdb

080130ac <__ieee754_sqrtf>:
 80130ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80130b0:	4770      	bx	lr
 80130b2:	0000      	movs	r0, r0
 80130b4:	0000      	movs	r0, r0
	...

080130b8 <atan>:
 80130b8:	b538      	push	{r3, r4, r5, lr}
 80130ba:	eeb0 7b40 	vmov.f64	d7, d0
 80130be:	ee17 5a90 	vmov	r5, s15
 80130c2:	4b73      	ldr	r3, [pc, #460]	; (8013290 <atan+0x1d8>)
 80130c4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80130c8:	429c      	cmp	r4, r3
 80130ca:	dd13      	ble.n	80130f4 <atan+0x3c>
 80130cc:	4b71      	ldr	r3, [pc, #452]	; (8013294 <atan+0x1dc>)
 80130ce:	429c      	cmp	r4, r3
 80130d0:	dc03      	bgt.n	80130da <atan+0x22>
 80130d2:	d107      	bne.n	80130e4 <atan+0x2c>
 80130d4:	ee10 3a10 	vmov	r3, s0
 80130d8:	b123      	cbz	r3, 80130e4 <atan+0x2c>
 80130da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80130de:	eeb0 0b47 	vmov.f64	d0, d7
 80130e2:	bd38      	pop	{r3, r4, r5, pc}
 80130e4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8013220 <atan+0x168>
 80130e8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8013228 <atan+0x170>
 80130ec:	2d00      	cmp	r5, #0
 80130ee:	fe36 7b07 	vselgt.f64	d7, d6, d7
 80130f2:	e7f4      	b.n	80130de <atan+0x26>
 80130f4:	4b68      	ldr	r3, [pc, #416]	; (8013298 <atan+0x1e0>)
 80130f6:	429c      	cmp	r4, r3
 80130f8:	dc11      	bgt.n	801311e <atan+0x66>
 80130fa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80130fe:	429c      	cmp	r4, r3
 8013100:	dc0a      	bgt.n	8013118 <atan+0x60>
 8013102:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8013106:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8013230 <atan+0x178>
 801310a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801310e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013116:	dce2      	bgt.n	80130de <atan+0x26>
 8013118:	f04f 33ff 	mov.w	r3, #4294967295
 801311c:	e013      	b.n	8013146 <atan+0x8e>
 801311e:	f000 f8c5 	bl	80132ac <fabs>
 8013122:	4b5e      	ldr	r3, [pc, #376]	; (801329c <atan+0x1e4>)
 8013124:	429c      	cmp	r4, r3
 8013126:	dc4f      	bgt.n	80131c8 <atan+0x110>
 8013128:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801312c:	429c      	cmp	r4, r3
 801312e:	dc41      	bgt.n	80131b4 <atan+0xfc>
 8013130:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8013134:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8013138:	2300      	movs	r3, #0
 801313a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801313e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8013142:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8013146:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013238 <atan+0x180>
 801314a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801314e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8013152:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8013240 <atan+0x188>
 8013156:	eea5 3b06 	vfma.f64	d3, d5, d6
 801315a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8013248 <atan+0x190>
 801315e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013162:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8013250 <atan+0x198>
 8013166:	eea6 3b05 	vfma.f64	d3, d6, d5
 801316a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8013258 <atan+0x1a0>
 801316e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8013172:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8013260 <atan+0x1a8>
 8013176:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8013268 <atan+0x1b0>
 801317a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801317e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013270 <atan+0x1b8>
 8013182:	eea5 2b06 	vfma.f64	d2, d5, d6
 8013186:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013278 <atan+0x1c0>
 801318a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801318e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8013280 <atan+0x1c8>
 8013192:	eea6 2b05 	vfma.f64	d2, d6, d5
 8013196:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8013288 <atan+0x1d0>
 801319a:	1c5a      	adds	r2, r3, #1
 801319c:	eea2 6b05 	vfma.f64	d6, d2, d5
 80131a0:	ee26 6b05 	vmul.f64	d6, d6, d5
 80131a4:	eea3 6b04 	vfma.f64	d6, d3, d4
 80131a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80131ac:	d121      	bne.n	80131f2 <atan+0x13a>
 80131ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80131b2:	e794      	b.n	80130de <atan+0x26>
 80131b4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80131b8:	2301      	movs	r3, #1
 80131ba:	ee30 6b47 	vsub.f64	d6, d0, d7
 80131be:	ee30 0b07 	vadd.f64	d0, d0, d7
 80131c2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80131c6:	e7be      	b.n	8013146 <atan+0x8e>
 80131c8:	4b35      	ldr	r3, [pc, #212]	; (80132a0 <atan+0x1e8>)
 80131ca:	429c      	cmp	r4, r3
 80131cc:	da0b      	bge.n	80131e6 <atan+0x12e>
 80131ce:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80131d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80131d6:	ee30 5b47 	vsub.f64	d5, d0, d7
 80131da:	eea0 6b07 	vfma.f64	d6, d0, d7
 80131de:	2302      	movs	r3, #2
 80131e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80131e4:	e7af      	b.n	8013146 <atan+0x8e>
 80131e6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80131ea:	2303      	movs	r3, #3
 80131ec:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80131f0:	e7a9      	b.n	8013146 <atan+0x8e>
 80131f2:	4a2c      	ldr	r2, [pc, #176]	; (80132a4 <atan+0x1ec>)
 80131f4:	492c      	ldr	r1, [pc, #176]	; (80132a8 <atan+0x1f0>)
 80131f6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80131fa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80131fe:	ed93 5b00 	vldr	d5, [r3]
 8013202:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013206:	ee36 7b47 	vsub.f64	d7, d6, d7
 801320a:	ed92 6b00 	vldr	d6, [r2]
 801320e:	2d00      	cmp	r5, #0
 8013210:	ee36 7b47 	vsub.f64	d7, d6, d7
 8013214:	bfb8      	it	lt
 8013216:	eeb1 7b47 	vneglt.f64	d7, d7
 801321a:	e760      	b.n	80130de <atan+0x26>
 801321c:	f3af 8000 	nop.w
 8013220:	54442d18 	.word	0x54442d18
 8013224:	3ff921fb 	.word	0x3ff921fb
 8013228:	54442d18 	.word	0x54442d18
 801322c:	bff921fb 	.word	0xbff921fb
 8013230:	8800759c 	.word	0x8800759c
 8013234:	7e37e43c 	.word	0x7e37e43c
 8013238:	e322da11 	.word	0xe322da11
 801323c:	3f90ad3a 	.word	0x3f90ad3a
 8013240:	24760deb 	.word	0x24760deb
 8013244:	3fa97b4b 	.word	0x3fa97b4b
 8013248:	a0d03d51 	.word	0xa0d03d51
 801324c:	3fb10d66 	.word	0x3fb10d66
 8013250:	c54c206e 	.word	0xc54c206e
 8013254:	3fb745cd 	.word	0x3fb745cd
 8013258:	920083ff 	.word	0x920083ff
 801325c:	3fc24924 	.word	0x3fc24924
 8013260:	5555550d 	.word	0x5555550d
 8013264:	3fd55555 	.word	0x3fd55555
 8013268:	52defd9a 	.word	0x52defd9a
 801326c:	bfadde2d 	.word	0xbfadde2d
 8013270:	2c6a6c2f 	.word	0x2c6a6c2f
 8013274:	bfa2b444 	.word	0xbfa2b444
 8013278:	af749a6d 	.word	0xaf749a6d
 801327c:	bfb3b0f2 	.word	0xbfb3b0f2
 8013280:	fe231671 	.word	0xfe231671
 8013284:	bfbc71c6 	.word	0xbfbc71c6
 8013288:	9998ebc4 	.word	0x9998ebc4
 801328c:	bfc99999 	.word	0xbfc99999
 8013290:	440fffff 	.word	0x440fffff
 8013294:	7ff00000 	.word	0x7ff00000
 8013298:	3fdbffff 	.word	0x3fdbffff
 801329c:	3ff2ffff 	.word	0x3ff2ffff
 80132a0:	40038000 	.word	0x40038000
 80132a4:	08013980 	.word	0x08013980
 80132a8:	080139a0 	.word	0x080139a0

080132ac <fabs>:
 80132ac:	ec51 0b10 	vmov	r0, r1, d0
 80132b0:	ee10 2a10 	vmov	r2, s0
 80132b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80132b8:	ec43 2b10 	vmov	d0, r2, r3
 80132bc:	4770      	bx	lr
	...

080132c0 <atanf>:
 80132c0:	b538      	push	{r3, r4, r5, lr}
 80132c2:	ee10 5a10 	vmov	r5, s0
 80132c6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80132ca:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80132ce:	eef0 7a40 	vmov.f32	s15, s0
 80132d2:	db0f      	blt.n	80132f4 <atanf+0x34>
 80132d4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80132d8:	dd04      	ble.n	80132e4 <atanf+0x24>
 80132da:	ee70 7a00 	vadd.f32	s15, s0, s0
 80132de:	eeb0 0a67 	vmov.f32	s0, s15
 80132e2:	bd38      	pop	{r3, r4, r5, pc}
 80132e4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801341c <atanf+0x15c>
 80132e8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8013420 <atanf+0x160>
 80132ec:	2d00      	cmp	r5, #0
 80132ee:	fe77 7a80 	vselgt.f32	s15, s15, s0
 80132f2:	e7f4      	b.n	80132de <atanf+0x1e>
 80132f4:	4b4b      	ldr	r3, [pc, #300]	; (8013424 <atanf+0x164>)
 80132f6:	429c      	cmp	r4, r3
 80132f8:	dc10      	bgt.n	801331c <atanf+0x5c>
 80132fa:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80132fe:	da0a      	bge.n	8013316 <atanf+0x56>
 8013300:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013428 <atanf+0x168>
 8013304:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013308:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801330c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013314:	dce3      	bgt.n	80132de <atanf+0x1e>
 8013316:	f04f 33ff 	mov.w	r3, #4294967295
 801331a:	e013      	b.n	8013344 <atanf+0x84>
 801331c:	f000 f8a4 	bl	8013468 <fabsf>
 8013320:	4b42      	ldr	r3, [pc, #264]	; (801342c <atanf+0x16c>)
 8013322:	429c      	cmp	r4, r3
 8013324:	dc4f      	bgt.n	80133c6 <atanf+0x106>
 8013326:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801332a:	429c      	cmp	r4, r3
 801332c:	dc41      	bgt.n	80133b2 <atanf+0xf2>
 801332e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013332:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013336:	eea0 7a27 	vfma.f32	s14, s0, s15
 801333a:	2300      	movs	r3, #0
 801333c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013340:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013344:	1c5a      	adds	r2, r3, #1
 8013346:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801334a:	eddf 5a39 	vldr	s11, [pc, #228]	; 8013430 <atanf+0x170>
 801334e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8013434 <atanf+0x174>
 8013352:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8013438 <atanf+0x178>
 8013356:	ed9f 0a39 	vldr	s0, [pc, #228]	; 801343c <atanf+0x17c>
 801335a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801335e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013362:	eddf 5a37 	vldr	s11, [pc, #220]	; 8013440 <atanf+0x180>
 8013366:	eee6 5a07 	vfma.f32	s11, s12, s14
 801336a:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8013444 <atanf+0x184>
 801336e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013372:	eddf 5a35 	vldr	s11, [pc, #212]	; 8013448 <atanf+0x188>
 8013376:	eee6 5a07 	vfma.f32	s11, s12, s14
 801337a:	ed9f 6a34 	vldr	s12, [pc, #208]	; 801344c <atanf+0x18c>
 801337e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013382:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013450 <atanf+0x190>
 8013386:	eee7 5a05 	vfma.f32	s11, s14, s10
 801338a:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8013454 <atanf+0x194>
 801338e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013392:	eddf 5a31 	vldr	s11, [pc, #196]	; 8013458 <atanf+0x198>
 8013396:	eee5 5a07 	vfma.f32	s11, s10, s14
 801339a:	eea5 0a87 	vfma.f32	s0, s11, s14
 801339e:	ee20 0a07 	vmul.f32	s0, s0, s14
 80133a2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80133a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80133aa:	d121      	bne.n	80133f0 <atanf+0x130>
 80133ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80133b0:	e795      	b.n	80132de <atanf+0x1e>
 80133b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80133b6:	ee30 7a67 	vsub.f32	s14, s0, s15
 80133ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80133be:	2301      	movs	r3, #1
 80133c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80133c4:	e7be      	b.n	8013344 <atanf+0x84>
 80133c6:	4b25      	ldr	r3, [pc, #148]	; (801345c <atanf+0x19c>)
 80133c8:	429c      	cmp	r4, r3
 80133ca:	dc0b      	bgt.n	80133e4 <atanf+0x124>
 80133cc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80133d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80133d4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80133d8:	2302      	movs	r3, #2
 80133da:	ee70 6a67 	vsub.f32	s13, s0, s15
 80133de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80133e2:	e7af      	b.n	8013344 <atanf+0x84>
 80133e4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80133e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80133ec:	2303      	movs	r3, #3
 80133ee:	e7a9      	b.n	8013344 <atanf+0x84>
 80133f0:	4a1b      	ldr	r2, [pc, #108]	; (8013460 <atanf+0x1a0>)
 80133f2:	491c      	ldr	r1, [pc, #112]	; (8013464 <atanf+0x1a4>)
 80133f4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80133f8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80133fc:	ed93 7a00 	vldr	s14, [r3]
 8013400:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013404:	2d00      	cmp	r5, #0
 8013406:	ee70 7a67 	vsub.f32	s15, s0, s15
 801340a:	ed92 0a00 	vldr	s0, [r2]
 801340e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8013412:	bfb8      	it	lt
 8013414:	eef1 7a67 	vneglt.f32	s15, s15
 8013418:	e761      	b.n	80132de <atanf+0x1e>
 801341a:	bf00      	nop
 801341c:	3fc90fdb 	.word	0x3fc90fdb
 8013420:	bfc90fdb 	.word	0xbfc90fdb
 8013424:	3edfffff 	.word	0x3edfffff
 8013428:	7149f2ca 	.word	0x7149f2ca
 801342c:	3f97ffff 	.word	0x3f97ffff
 8013430:	3c8569d7 	.word	0x3c8569d7
 8013434:	3d4bda59 	.word	0x3d4bda59
 8013438:	bd15a221 	.word	0xbd15a221
 801343c:	be4ccccd 	.word	0xbe4ccccd
 8013440:	3d886b35 	.word	0x3d886b35
 8013444:	3dba2e6e 	.word	0x3dba2e6e
 8013448:	3e124925 	.word	0x3e124925
 801344c:	3eaaaaab 	.word	0x3eaaaaab
 8013450:	bd6ef16b 	.word	0xbd6ef16b
 8013454:	bd9d8795 	.word	0xbd9d8795
 8013458:	bde38e38 	.word	0xbde38e38
 801345c:	401bffff 	.word	0x401bffff
 8013460:	080139c0 	.word	0x080139c0
 8013464:	080139d0 	.word	0x080139d0

08013468 <fabsf>:
 8013468:	ee10 3a10 	vmov	r3, s0
 801346c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013470:	ee00 3a10 	vmov	s0, r3
 8013474:	4770      	bx	lr
	...

08013478 <nanf>:
 8013478:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013480 <nanf+0x8>
 801347c:	4770      	bx	lr
 801347e:	bf00      	nop
 8013480:	7fc00000 	.word	0x7fc00000

08013484 <_init>:
 8013484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013486:	bf00      	nop
 8013488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801348a:	bc08      	pop	{r3}
 801348c:	469e      	mov	lr, r3
 801348e:	4770      	bx	lr

08013490 <_fini>:
 8013490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013492:	bf00      	nop
 8013494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013496:	bc08      	pop	{r3}
 8013498:	469e      	mov	lr, r3
 801349a:	4770      	bx	lr
