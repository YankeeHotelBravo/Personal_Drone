
Personal Drone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a1c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08014cc0  08014cc0  00024cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015200  08015200  00025200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015208  08015208  00025208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801520c  0801520c  0002520c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  08015210  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000067c  240001f8  08015408  000301f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000874  08015408  00030874  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bb76  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004543  00000000  00000000  0005bd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f0  00000000  00000000  000602e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000016f8  00000000  00000000  00061ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000394ed  00000000  00000000  000631c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f6c6  00000000  00000000  0009c6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001685be  00000000  00000000  000bbd7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00224339  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000076fc  00000000  00000000  0022438c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014ca4 	.word	0x08014ca4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08014ca4 	.word	0x08014ca4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <iBus_Check_CHKSUM>:

FSiA6B_iBus iBus;
uint8_t iBus_return;

unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	460b      	mov	r3, r1
 8000692:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8000694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000698:	81fb      	strh	r3, [r7, #14]

	for(int i=0; i<len-2;i++)
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	e00a      	b.n	80006b6 <iBus_Check_CHKSUM+0x2e>
	{
		chksum = chksum - data[i];
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i<len-2;i++)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	78fb      	ldrb	r3, [r7, #3]
 80006b8:	3b02      	subs	r3, #2
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dbef      	blt.n	80006a0 <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum&0x00ff)==data[30]) && ((chksum>>8) && data[31]);
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	321e      	adds	r2, #30
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d10b      	bne.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006ce:	89fb      	ldrh	r3, [r7, #14]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d006      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	331f      	adds	r3, #31
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <iBus_Check_CHKSUM+0x5e>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <iBus_Check_CHKSUM+0x60>
 80006e6:	2300      	movs	r3, #0
 80006e8:	b2db      	uxtb	r3, r3

}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <iBus_Parsing>:

void iBus_Parsing(unsigned char* data, FSiA6B_iBus* iBus)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	iBus->RH = (data[2] | data[3]<<8) & 0x0FFF;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3302      	adds	r3, #2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b21a      	sxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3303      	adds	r3, #3
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21b      	sxth	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b21b      	sxth	r3, r3
 8000716:	b29b      	uxth	r3, r3
 8000718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	801a      	strh	r2, [r3, #0]
	iBus->RV = (data[4] | data[5]<<8) & 0x0FFF;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3304      	adds	r3, #4
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	b21a      	sxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073e:	b29a      	uxth	r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	805a      	strh	r2, [r3, #2]
	iBus->LV = (data[6] | data[7]<<8) & 0x0FFF;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3306      	adds	r3, #6
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	b21a      	sxth	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3307      	adds	r3, #7
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	b21b      	sxth	r3, r3
 8000756:	4313      	orrs	r3, r2
 8000758:	b21b      	sxth	r3, r3
 800075a:	b29b      	uxth	r3, r3
 800075c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000760:	b29a      	uxth	r2, r3
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	809a      	strh	r2, [r3, #4]
	iBus->LH = (data[8] | data[9]<<8) & 0x0FFF;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3308      	adds	r3, #8
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b21a      	sxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	3309      	adds	r3, #9
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	b29b      	uxth	r3, r3
 800077e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000782:	b29a      	uxth	r2, r3
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	80da      	strh	r2, [r3, #6]
	iBus->SwA = (data[10] | data[11]<<8) & 0x0FFF;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	330a      	adds	r3, #10
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b21a      	sxth	r2, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	330b      	adds	r3, #11
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	811a      	strh	r2, [r3, #8]
	iBus->SwB = (data[12] | data[13]<<8) & 0x0FFF;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	330c      	adds	r3, #12
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	330d      	adds	r3, #13
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	815a      	strh	r2, [r3, #10]
	iBus->VrA = (data[14] | data[15]<<8) & 0x0FFF;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	330e      	adds	r3, #14
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	330f      	adds	r3, #15
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	b21b      	sxth	r3, r3
 80007de:	4313      	orrs	r3, r2
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	821a      	strh	r2, [r3, #16]
	iBus->VrB = (data[16] | data[17]<<8) & 0x0FFF;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	3310      	adds	r3, #16
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3311      	adds	r3, #17
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	b21b      	sxth	r3, r3
 8000804:	b29b      	uxth	r3, r3
 8000806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800080a:	b29a      	uxth	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	825a      	strh	r2, [r3, #18]
	iBus->SwC = (data[18] | data[19]<<8) & 0x0FFF;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3312      	adds	r3, #18
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b21a      	sxth	r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3313      	adds	r3, #19
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21b      	sxth	r3, r3
 8000822:	4313      	orrs	r3, r2
 8000824:	b21b      	sxth	r3, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800082c:	b29a      	uxth	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	819a      	strh	r2, [r3, #12]
	iBus->SwD = (data[20] | data[21]<<8) & 0x0FFF;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	3314      	adds	r3, #20
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b21a      	sxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3315      	adds	r3, #21
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	b21b      	sxth	r3, r3
 8000844:	4313      	orrs	r3, r2
 8000846:	b21b      	sxth	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	b29a      	uxth	r2, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	81da      	strh	r2, [r3, #14]

	iBus->FailSafe = (data[13] >> 4);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	330d      	adds	r3, #13
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	b2da      	uxtb	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	751a      	strb	r2, [r3, #20]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <iBus_isActiveFailSafe>:

unsigned char iBus_isActiveFailSafe(FSiA6B_iBus* iBus)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	7d1b      	ldrb	r3, [r3, #20]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <MPU9250_Init>:
float MPU9250_Acc_LSB = 16384.0;
float MPU9250_Mag_LSB = 0.15;

//Functions
uint8_t MPU9250_Init(I2C_HandleTypeDef *I2Cx, uint8_t Gyro_FS, uint8_t Acc_FS, uint8_t DLPF_CFG, uint8_t A_DLPF_CFG)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af04      	add	r7, sp, #16
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4608      	mov	r0, r1
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	4603      	mov	r3, r0
 80008a0:	70fb      	strb	r3, [r7, #3]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70bb      	strb	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	707b      	strb	r3, [r7, #1]
	//Save LSB/Unit for both gyro and acc in order to use them later
	switch(Gyro_FS)
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d81b      	bhi.n	80008e8 <MPU9250_Init+0x58>
 80008b0:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <MPU9250_Init+0x28>)
 80008b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b6:	bf00      	nop
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	080008d1 	.word	0x080008d1
 80008c0:	080008d9 	.word	0x080008d9
 80008c4:	080008e1 	.word	0x080008e1
	{
	case 0: //250dps
		MPU9250_Gyro_LSB = 131.0;
 80008c8:	4b5d      	ldr	r3, [pc, #372]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008ca:	4a5e      	ldr	r2, [pc, #376]	; (8000a44 <MPU9250_Init+0x1b4>)
 80008cc:	601a      	str	r2, [r3, #0]
		break;
 80008ce:	e00c      	b.n	80008ea <MPU9250_Init+0x5a>
	case 1: //500dps
		MPU9250_Gyro_LSB = 65.5;
 80008d0:	4b5b      	ldr	r3, [pc, #364]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008d2:	4a5d      	ldr	r2, [pc, #372]	; (8000a48 <MPU9250_Init+0x1b8>)
 80008d4:	601a      	str	r2, [r3, #0]
		break;
 80008d6:	e008      	b.n	80008ea <MPU9250_Init+0x5a>
	case 2: //1000dps
		MPU9250_Gyro_LSB = 32.8;
 80008d8:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008da:	4a5c      	ldr	r2, [pc, #368]	; (8000a4c <MPU9250_Init+0x1bc>)
 80008dc:	601a      	str	r2, [r3, #0]
		break;
 80008de:	e004      	b.n	80008ea <MPU9250_Init+0x5a>
	case 3: //2000dps
		MPU9250_Gyro_LSB = 16.4;
 80008e0:	4b57      	ldr	r3, [pc, #348]	; (8000a40 <MPU9250_Init+0x1b0>)
 80008e2:	4a5b      	ldr	r2, [pc, #364]	; (8000a50 <MPU9250_Init+0x1c0>)
 80008e4:	601a      	str	r2, [r3, #0]
		break;
 80008e6:	e000      	b.n	80008ea <MPU9250_Init+0x5a>
	default:
		break;
 80008e8:	bf00      	nop
	}

	switch(Acc_FS)
 80008ea:	78bb      	ldrb	r3, [r7, #2]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d81f      	bhi.n	8000930 <MPU9250_Init+0xa0>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <MPU9250_Init+0x68>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	08000909 	.word	0x08000909
 80008fc:	08000913 	.word	0x08000913
 8000900:	0800091d 	.word	0x0800091d
 8000904:	08000927 	.word	0x08000927
	{
	case 0: //2g
		MPU9250_Acc_LSB = 16384.0;
 8000908:	4b52      	ldr	r3, [pc, #328]	; (8000a54 <MPU9250_Init+0x1c4>)
 800090a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800090e:	601a      	str	r2, [r3, #0]
		break;
 8000910:	e00f      	b.n	8000932 <MPU9250_Init+0xa2>
	case 1: //4g
		MPU9250_Acc_LSB = 8192.0;
 8000912:	4b50      	ldr	r3, [pc, #320]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000914:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000918:	601a      	str	r2, [r3, #0]
		break;
 800091a:	e00a      	b.n	8000932 <MPU9250_Init+0xa2>
	case 2: //8g
		MPU9250_Acc_LSB = 4096.0;
 800091c:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <MPU9250_Init+0x1c4>)
 800091e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000922:	601a      	str	r2, [r3, #0]
		break;
 8000924:	e005      	b.n	8000932 <MPU9250_Init+0xa2>
	case 3: //16g
		MPU9250_Acc_LSB = 2048.0;
 8000926:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <MPU9250_Init+0x1c4>)
 8000928:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800092c:	601a      	str	r2, [r3, #0]
		break;
 800092e:	e000      	b.n	8000932 <MPU9250_Init+0xa2>
	default:
		break;
 8000930:	bf00      	nop
	}

	HAL_I2C_Mem_Read(I2Cx, MPU6500_ADDR, MPU6500_WHO_AM_I, 1, &MPU9250_rx, 1, 100);
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	9302      	str	r3, [sp, #8]
 8000936:	2301      	movs	r3, #1
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <MPU9250_Init+0x1c8>)
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2301      	movs	r3, #1
 8000940:	2275      	movs	r2, #117	; 0x75
 8000942:	21d0      	movs	r1, #208	; 0xd0
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f007 ff31 	bl	80087ac <HAL_I2C_Mem_Read>
	if (MPU9250_rx == 0x71)
 800094a:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <MPU9250_Init+0x1c8>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b71      	cmp	r3, #113	; 0x71
 8000950:	d171      	bne.n	8000a36 <MPU9250_Init+0x1a6>
	{
		MPU9250_tx = 0x01; // Set Sampling by 2 = 500Hz
 8000952:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_SMPLRT_DIV, 1, &MPU9250_tx, 1, 100);
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	2301      	movs	r3, #1
 800095e:	9301      	str	r3, [sp, #4]
 8000960:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	2301      	movs	r3, #1
 8000966:	2219      	movs	r2, #25
 8000968:	21d0      	movs	r1, #208	; 0xd0
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f007 fe0a 	bl	8008584 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000970:	200a      	movs	r0, #10
 8000972:	f004 fbff 	bl	8005174 <HAL_Delay>

		MPU9250_tx = DLPF_CFG; // Digital Low Pass Filter Setting
 8000976:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000978:	787b      	ldrb	r3, [r7, #1]
 800097a:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_CONFIG, 1, &MPU9250_tx, 1, 100);
 800097c:	2364      	movs	r3, #100	; 0x64
 800097e:	9302      	str	r3, [sp, #8]
 8000980:	2301      	movs	r3, #1
 8000982:	9301      	str	r3, [sp, #4]
 8000984:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2301      	movs	r3, #1
 800098a:	221a      	movs	r2, #26
 800098c:	21d0      	movs	r1, #208	; 0xd0
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f007 fdf8 	bl	8008584 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000994:	200a      	movs	r0, #10
 8000996:	f004 fbed 	bl	8005174 <HAL_Delay>

		MPU9250_tx = Gyro_FS << 3;
 800099a:	78fb      	ldrb	r3, [r7, #3]
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009a2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_GYRO_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009a4:	2364      	movs	r3, #100	; 0x64
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	2301      	movs	r3, #1
 80009aa:	9301      	str	r3, [sp, #4]
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	221b      	movs	r2, #27
 80009b4:	21d0      	movs	r1, #208	; 0xd0
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f007 fde4 	bl	8008584 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009bc:	200a      	movs	r0, #10
 80009be:	f004 fbd9 	bl	8005174 <HAL_Delay>

		MPU9250_tx = Acc_FS << 3;
 80009c2:	78bb      	ldrb	r3, [r7, #2]
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ca:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG, 1, &MPU9250_tx, 1, 100);
 80009cc:	2364      	movs	r3, #100	; 0x64
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	2301      	movs	r3, #1
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2301      	movs	r3, #1
 80009da:	221c      	movs	r2, #28
 80009dc:	21d0      	movs	r1, #208	; 0xd0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f007 fdd0 	bl	8008584 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f004 fbc5 	bl	8005174 <HAL_Delay>

		MPU9250_tx = A_DLPF_CFG;
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009ec:	7c3b      	ldrb	r3, [r7, #16]
 80009ee:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_CONFIG2, 1, &MPU9250_tx, 1, 100);
 80009f0:	2364      	movs	r3, #100	; 0x64
 80009f2:	9302      	str	r3, [sp, #8]
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MPU9250_Init+0x1cc>)
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	221d      	movs	r2, #29
 8000a00:	21d0      	movs	r1, #208	; 0xd0
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f007 fdbe 	bl	8008584 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f004 fbb3 	bl	8005174 <HAL_Delay>

		MPU9250_tx = 0x00;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	9302      	str	r3, [sp, #8]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <MPU9250_Init+0x1cc>)
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2301      	movs	r3, #1
 8000a22:	226b      	movs	r2, #107	; 0x6b
 8000a24:	21d0      	movs	r1, #208	; 0xd0
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f007 fdac 	bl	8008584 <HAL_I2C_Mem_Write>
		HAL_Delay(10);
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f004 fba1 	bl	8005174 <HAL_Delay>

		return 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <MPU9250_Init+0x1a8>
	}
	return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	24000000 	.word	0x24000000
 8000a44:	43030000 	.word	0x43030000
 8000a48:	42830000 	.word	0x42830000
 8000a4c:	42033333 	.word	0x42033333
 8000a50:	41833333 	.word	0x41833333
 8000a54:	24000004 	.word	0x24000004
 8000a58:	240002e9 	.word	0x240002e9
 8000a5c:	24000269 	.word	0x24000269

08000a60 <MPU9250_Bypass>:

void MPU9250_Bypass(I2C_HandleTypeDef *I2Cx)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af04      	add	r7, sp, #16
 8000a66:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Master Mode
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Disable
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	2301      	movs	r3, #1
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	226a      	movs	r2, #106	; 0x6a
 8000a7e:	21d0      	movs	r1, #208	; 0xd0
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f007 fd7f 	bl	8008584 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000a86:	200a      	movs	r0, #10
 8000a88:	f004 fb74 	bl	8005174 <HAL_Delay>

	MPU9250_tx = 0b00000010; //Enable Bypass Mode
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a8e:	2202      	movs	r2, #2
 8000a90:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Bypass Enable
 8000a92:	2364      	movs	r3, #100	; 0x64
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2301      	movs	r3, #1
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MPU9250_Bypass+0x58>)
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	2237      	movs	r2, #55	; 0x37
 8000aa2:	21d0      	movs	r1, #208	; 0xd0
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f007 fd6d 	bl	8008584 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000aaa:	200a      	movs	r0, #10
 8000aac:	f004 fb62 	bl	8005174 <HAL_Delay>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000269 	.word	0x24000269

08000abc <MPU9250_Master>:

void MPU9250_Master(I2C_HandleTypeDef *I2Cx)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	6078      	str	r0, [r7, #4]
	MPU9250_tx = 0x00; //Disable Bypass Mode
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_INT_PIN_CFG, 1, &MPU9250_tx, 1, 100); //Disable Bypass
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <MPU9250_Master+0xa0>)
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	2237      	movs	r2, #55	; 0x37
 8000ada:	21d0      	movs	r1, #208	; 0xd0
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f007 fd51 	bl	8008584 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000ae2:	200a      	movs	r0, #10
 8000ae4:	f004 fb46 	bl	8005174 <HAL_Delay>

	MPU9250_tx = 0b00100000; //Enable Master Mode
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <MPU9250_Master+0xa0>)
 8000aea:	2220      	movs	r2, #32
 8000aec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_USER_CTRL, 1, &MPU9250_tx, 1, 100); //Master Enable
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2301      	movs	r3, #1
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <MPU9250_Master+0xa0>)
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	226a      	movs	r2, #106	; 0x6a
 8000afe:	21d0      	movs	r1, #208	; 0xd0
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f007 fd3f 	bl	8008584 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b06:	200a      	movs	r0, #10
 8000b08:	f004 fb34 	bl	8005174 <HAL_Delay>

	MPU9250_tx = 0b00001101; //Set I2C Clock to 400kHz
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b0e:	220d      	movs	r2, #13
 8000b10:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_MST_CTRL, 1, &MPU9250_tx, 1, 100); //Master Clock to 400kHz
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	9302      	str	r3, [sp, #8]
 8000b16:	2301      	movs	r3, #1
 8000b18:	9301      	str	r3, [sp, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b1c:	9300      	str	r3, [sp, #0]
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2224      	movs	r2, #36	; 0x24
 8000b22:	21d0      	movs	r1, #208	; 0xd0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f007 fd2d 	bl	8008584 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f004 fb22 	bl	8005174 <HAL_Delay>

	MPU9250_tx = 0x00;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_PWR_MGMT_1, 1, &MPU9250_tx, 1, 100);
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	9302      	str	r3, [sp, #8]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MPU9250_Master+0xa0>)
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2301      	movs	r3, #1
 8000b44:	226b      	movs	r2, #107	; 0x6b
 8000b46:	21d0      	movs	r1, #208	; 0xd0
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f007 fd1b 	bl	8008584 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b4e:	200a      	movs	r0, #10
 8000b50:	f004 fb10 	bl	8005174 <HAL_Delay>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000269 	.word	0x24000269

08000b60 <MPU9250_AK8963_Setup>:

uint8_t MPU9250_AK8963_Setup(I2C_HandleTypeDef *I2Cx, MPU9250_t *DataStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	MPU9250_tx = AK8963_CNTL1_Continous2; //Continuous Mode 2 (100Hz) + 16Bit Output
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b6c:	2216      	movs	r2, #22
 8000b6e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, AK8963_ADDR, AK8963_CNTL1, 1, &MPU9250_tx, 1, 100);
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	9302      	str	r3, [sp, #8]
 8000b74:	2301      	movs	r3, #1
 8000b76:	9301      	str	r3, [sp, #4]
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <MPU9250_AK8963_Setup+0xa0>)
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	220a      	movs	r2, #10
 8000b80:	2118      	movs	r1, #24
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f007 fcfe 	bl	8008584 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000b88:	200a      	movs	r0, #10
 8000b8a:	f004 faf3 	bl	8005174 <HAL_Delay>

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_MPU9250_ASAX, 1, &MPU9250_rx_buf[0], 3, 100);
 8000b8e:	2364      	movs	r3, #100	; 0x64
 8000b90:	9302      	str	r3, [sp, #8]
 8000b92:	2303      	movs	r3, #3
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2210      	movs	r2, #16
 8000b9e:	2118      	movs	r1, #24
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f007 fe03 	bl	80087ac <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f004 fae4 	bl	8005174 <HAL_Delay>

	DataStruct->ASAX = MPU9250_rx_buf[0];
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	DataStruct->ASAY = MPU9250_rx_buf[1];
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bb8:	785a      	ldrb	r2, [r3, #1]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	DataStruct->ASAZ = MPU9250_rx_buf[2];
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MPU9250_AK8963_Setup+0xa4>)
 8000bc2:	789a      	ldrb	r2, [r3, #2]
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	HAL_I2C_Mem_Read(I2Cx, AK8963_ADDR, AK8963_WIA, 1, &AK8963_WAI, 3, 100);
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	2303      	movs	r3, #3
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2118      	movs	r1, #24
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f007 fde5 	bl	80087ac <HAL_I2C_Mem_Read>
	HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f004 fac6 	bl	8005174 <HAL_Delay>

	if(AK8963_WAI == 0b01001000) return 1;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MPU9250_AK8963_Setup+0xa8>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b48      	cmp	r3, #72	; 0x48
 8000bee:	d101      	bne.n	8000bf4 <MPU9250_AK8963_Setup+0x94>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <MPU9250_AK8963_Setup+0x96>
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	24000269 	.word	0x24000269
 8000c04:	240002ec 	.word	0x240002ec
 8000c08:	240002e8 	.word	0x240002e8

08000c0c <MPU9250_Slave0_Enable>:

void MPU9250_Slave0_Enable(I2C_HandleTypeDef *I2Cx)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af04      	add	r7, sp, #16
 8000c12:	6078      	str	r0, [r7, #4]
	MPU9250_tx = (AK8963_ADDR >> 1) | 0x80; //Access Slave into read mode
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c16:	228c      	movs	r2, #140	; 0x8c
 8000c18:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_ADDR, 1, &MPU9250_tx, 1, 100);
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	9302      	str	r3, [sp, #8]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	2225      	movs	r2, #37	; 0x25
 8000c2a:	21d0      	movs	r1, #208	; 0xd0
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f007 fca9 	bl	8008584 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c32:	200a      	movs	r0, #10
 8000c34:	f004 fa9e 	bl	8005174 <HAL_Delay>

	MPU9250_tx = AK8963_HXL; //Slave REG for reading to take place
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_REG, 1, &MPU9250_tx, 1, 100);
 8000c3e:	2364      	movs	r3, #100	; 0x64
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	2301      	movs	r3, #1
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	2226      	movs	r2, #38	; 0x26
 8000c4e:	21d0      	movs	r1, #208	; 0xd0
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f007 fc97 	bl	8008584 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f004 fa8c 	bl	8005174 <HAL_Delay>

	MPU9250_tx = 0x80 | 0x07; //Number of data bytes
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c5e:	2287      	movs	r2, #135	; 0x87
 8000c60:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(I2Cx, MPU6500_ADDR, MPU6500_I2C_SLV0_CTRL, 1, &MPU9250_tx, 1, 100);
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	9302      	str	r3, [sp, #8]
 8000c66:	2301      	movs	r3, #1
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MPU9250_Slave0_Enable+0x7c>)
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2227      	movs	r2, #39	; 0x27
 8000c72:	21d0      	movs	r1, #208	; 0xd0
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f007 fc85 	bl	8008584 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8000c7a:	200a      	movs	r0, #10
 8000c7c:	f004 fa7a 	bl	8005174 <HAL_Delay>
}
 8000c80:	bf00      	nop
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	24000269 	.word	0x24000269

08000c8c <MPU9250_Read_All>:

void MPU9250_Read_All(I2C_HandleTypeDef *I2Cx)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(I2Cx, MPU6500_ADDR, MPU6500_ACCEL_XOUT_H, 1, &MPU9250_rx_buf[0], 20);
 8000c94:	2314      	movs	r3, #20
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <MPU9250_Read_All+0x24>)
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	223b      	movs	r2, #59	; 0x3b
 8000ca0:	21d0      	movs	r1, #208	; 0xd0
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f007 fe9c 	bl	80089e0 <HAL_I2C_Mem_Read_DMA>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	240002ec 	.word	0x240002ec
 8000cb4:	00000000 	.word	0x00000000

08000cb8 <MPU9250_Parsing>:

void MPU9250_Parsing(MPU9250_t *DataStruct)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8000cc0:	4bb7      	ldr	r3, [pc, #732]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	4bb5      	ldr	r3, [pc, #724]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000cca:	785b      	ldrb	r3, [r3, #1]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21b      	sxth	r3, r3
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8000cde:	4bb0      	ldr	r3, [pc, #704]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000ce0:	789b      	ldrb	r3, [r3, #2]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	4bae      	ldr	r3, [pc, #696]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000ce8:	78db      	ldrb	r3, [r3, #3]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b21a      	sxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 8000cf4:	4baa      	ldr	r3, [pc, #680]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000cf6:	791b      	ldrb	r3, [r3, #4]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	4ba8      	ldr	r3, [pc, #672]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000cfe:	795b      	ldrb	r3, [r3, #5]
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8000d0a:	4ba5      	ldr	r3, [pc, #660]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d0c:	7a1b      	ldrb	r3, [r3, #8]
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	4ba3      	ldr	r3, [pc, #652]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d14:	7a5b      	ldrb	r3, [r3, #9]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b21a      	sxth	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8000d20:	4b9f      	ldr	r3, [pc, #636]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d22:	7a9b      	ldrb	r3, [r3, #10]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	b21a      	sxth	r2, r3
 8000d28:	4b9d      	ldr	r3, [pc, #628]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d2a:	7adb      	ldrb	r3, [r3, #11]
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	425b      	negs	r3, r3
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8000d3e:	4b98      	ldr	r3, [pc, #608]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d40:	7b1b      	ldrb	r3, [r3, #12]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	4b96      	ldr	r3, [pc, #600]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d48:	7b5b      	ldrb	r3, [r3, #13]
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b21b      	sxth	r3, r3
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	425b      	negs	r3, r3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 8000d5c:	4b90      	ldr	r3, [pc, #576]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d5e:	7bdb      	ldrb	r3, [r3, #15]
 8000d60:	021b      	lsls	r3, r3, #8
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	4b8e      	ldr	r3, [pc, #568]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d66:	7b9b      	ldrb	r3, [r3, #14]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	425b      	negs	r3, r3
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 8000d7c:	4b88      	ldr	r3, [pc, #544]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d7e:	7c5b      	ldrb	r3, [r3, #17]
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	4b86      	ldr	r3, [pc, #536]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d86:	7c1b      	ldrb	r3, [r3, #16]
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 8000d94:	4b82      	ldr	r3, [pc, #520]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d96:	7cdb      	ldrb	r3, [r3, #19]
 8000d98:	021b      	lsls	r3, r3, #8
 8000d9a:	b21a      	sxth	r2, r3
 8000d9c:	4b80      	ldr	r3, [pc, #512]	; (8000fa0 <MPU9250_Parsing+0x2e8>)
 8000d9e:	7c9b      	ldrb	r3, [r3, #18]
 8000da0:	b21b      	sxth	r3, r3
 8000da2:	4313      	orrs	r3, r2
 8000da4:	b21a      	sxth	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db2:	ee07 3a90 	vmov	s15, r3
 8000db6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dba:	4b7a      	ldr	r3, [pc, #488]	; (8000fa4 <MPU9250_Parsing+0x2ec>)
 8000dbc:	ed93 7a00 	vldr	s14, [r3]
 8000dc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dd8:	4b72      	ldr	r3, [pc, #456]	; (8000fa4 <MPU9250_Parsing+0x2ec>)
 8000dda:	ed93 7a00 	vldr	s14, [r3]
 8000dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dee:	ee07 3a90 	vmov	s15, r3
 8000df2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000df6:	4b6b      	ldr	r3, [pc, #428]	; (8000fa4 <MPU9250_Parsing+0x2ec>)
 8000df8:	ed93 7a00 	vldr	s14, [r3]
 8000dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e04:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8000f90 <MPU9250_Parsing+0x2d8>
 8000e08:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000e0c:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8000f98 <MPU9250_Parsing+0x2e0>
 8000e10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e2c:	4b5e      	ldr	r3, [pc, #376]	; (8000fa8 <MPU9250_Parsing+0x2f0>)
 8000e2e:	ed93 7a00 	vldr	s14, [r3]
 8000e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e4a:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <MPU9250_Parsing+0x2f0>)
 8000e4c:	ed93 7a00 	vldr	s14, [r3]
 8000e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e68:	4b4f      	ldr	r3, [pc, #316]	; (8000fa8 <MPU9250_Parsing+0x2f0>)
 8000e6a:	ed93 7a00 	vldr	s14, [r3]
 8000e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000e86:	3b80      	subs	r3, #128	; 0x80
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da00      	bge.n	8000e8e <MPU9250_Parsing+0x1d6>
 8000e8c:	33ff      	adds	r3, #255	; 0xff
 8000e8e:	121b      	asrs	r3, r3, #8
 8000e90:	3301      	adds	r3, #1
 8000e92:	fb03 f302 	mul.w	r3, r3, r2
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e9e:	4b43      	ldr	r3, [pc, #268]	; (8000fac <MPU9250_Parsing+0x2f4>)
 8000ea0:	edd3 7a00 	vldr	s15, [r3]
 8000ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8000ebc:	3b80      	subs	r3, #128	; 0x80
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	da00      	bge.n	8000ec4 <MPU9250_Parsing+0x20c>
 8000ec2:	33ff      	adds	r3, #255	; 0xff
 8000ec4:	121b      	asrs	r3, r3, #8
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	fb03 f302 	mul.w	r3, r3, r2
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed4:	4b35      	ldr	r3, [pc, #212]	; (8000fac <MPU9250_Parsing+0x2f4>)
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000ef2:	3b80      	subs	r3, #128	; 0x80
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da00      	bge.n	8000efa <MPU9250_Parsing+0x242>
 8000ef8:	33ff      	adds	r3, #255	; 0xff
 8000efa:	121b      	asrs	r3, r3, #8
 8000efc:	3301      	adds	r3, #1
 8000efe:	fb03 f302 	mul.w	r3, r3, r2
 8000f02:	ee07 3a90 	vmov	s15, r3
 8000f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <MPU9250_Parsing+0x2f4>)
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx -= DataStruct->Gx_Offset;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy -= DataStruct->Gy_Offset;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz -= DataStruct->Gz_Offset;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx -= DataStruct->Mx_Offset;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My -= DataStruct->My_Offset;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8000f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz -= DataStruct->Mz_Offset;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8000f8e:	e011      	b.n	8000fb4 <MPU9250_Parsing+0x2fc>
 8000f90:	33333333 	.word	0x33333333
 8000f94:	3fc33333 	.word	0x3fc33333
 8000f98:	147ae148 	.word	0x147ae148
 8000f9c:	3ff147ae 	.word	0x3ff147ae
 8000fa0:	240002ec 	.word	0x240002ec
 8000fa4:	24000004 	.word	0x24000004
 8000fa8:	24000000 	.word	0x24000000
 8000fac:	24000008 	.word	0x24000008
 8000fb0:	3c8efa35 	.word	0x3c8efa35
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8000fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fca:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8000fb0 <MPU9250_Parsing+0x2f8>
 8000fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fde:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8000fb0 <MPU9250_Parsing+0x2f8>
 8000fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000ff2:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8000fb0 <MPU9250_Parsing+0x2f8>
 8000ff6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	0000      	movs	r0, r0
	...

08001010 <MPU9250_Parsing_NoOffset>:

void MPU9250_Parsing_NoOffset(MPU9250_t *DataStruct)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	DataStruct->Ax_Raw = -(MPU9250_rx_buf[0] << 8 | MPU9250_rx_buf[1]);
 8001018:	4bad      	ldr	r3, [pc, #692]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b21a      	sxth	r2, r3
 8001020:	4bab      	ldr	r3, [pc, #684]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001022:	785b      	ldrb	r3, [r3, #1]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21b      	sxth	r3, r3
 800102a:	b29b      	uxth	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	b29b      	uxth	r3, r3
 8001030:	b21a      	sxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	801a      	strh	r2, [r3, #0]
	DataStruct->Ay_Raw = (MPU9250_rx_buf[2] << 8 | MPU9250_rx_buf[3]);
 8001036:	4ba6      	ldr	r3, [pc, #664]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001038:	789b      	ldrb	r3, [r3, #2]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	4ba4      	ldr	r3, [pc, #656]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001040:	78db      	ldrb	r3, [r3, #3]
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21a      	sxth	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	805a      	strh	r2, [r3, #2]
	DataStruct->Az_Raw = (MPU9250_rx_buf[4] << 8 | MPU9250_rx_buf[5]); // Didn't Save Temp Value
 800104c:	4ba0      	ldr	r3, [pc, #640]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 800104e:	791b      	ldrb	r3, [r3, #4]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b9e      	ldr	r3, [pc, #632]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001056:	795b      	ldrb	r3, [r3, #5]
 8001058:	b21b      	sxth	r3, r3
 800105a:	4313      	orrs	r3, r2
 800105c:	b21a      	sxth	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	809a      	strh	r2, [r3, #4]
	DataStruct->Gx_Raw = (MPU9250_rx_buf[8] << 8 | MPU9250_rx_buf[9]);
 8001062:	4b9b      	ldr	r3, [pc, #620]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001064:	7a1b      	ldrb	r3, [r3, #8]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b21a      	sxth	r2, r3
 800106a:	4b99      	ldr	r3, [pc, #612]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 800106c:	7a5b      	ldrb	r3, [r3, #9]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21a      	sxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	829a      	strh	r2, [r3, #20]
	DataStruct->Gy_Raw = -(MPU9250_rx_buf[10] << 8 | MPU9250_rx_buf[11]);
 8001078:	4b95      	ldr	r3, [pc, #596]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 800107a:	7a9b      	ldrb	r3, [r3, #10]
 800107c:	021b      	lsls	r3, r3, #8
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b93      	ldr	r3, [pc, #588]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001082:	7adb      	ldrb	r3, [r3, #11]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21b      	sxth	r3, r3
 800108a:	b29b      	uxth	r3, r3
 800108c:	425b      	negs	r3, r3
 800108e:	b29b      	uxth	r3, r3
 8001090:	b21a      	sxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	82da      	strh	r2, [r3, #22]
	DataStruct->Gz_Raw = -(MPU9250_rx_buf[12] << 8 | MPU9250_rx_buf[13]);
 8001096:	4b8e      	ldr	r3, [pc, #568]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 8001098:	7b1b      	ldrb	r3, [r3, #12]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	4b8c      	ldr	r3, [pc, #560]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010a0:	7b5b      	ldrb	r3, [r3, #13]
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	425b      	negs	r3, r3
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	831a      	strh	r2, [r3, #24]
	DataStruct->My_Raw = -(MPU9250_rx_buf[15] << 8 | MPU9250_rx_buf[14]);
 80010b4:	4b86      	ldr	r3, [pc, #536]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010b6:	7bdb      	ldrb	r3, [r3, #15]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b84      	ldr	r3, [pc, #528]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010be:	7b9b      	ldrb	r3, [r3, #14]
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	4313      	orrs	r3, r2
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	425b      	negs	r3, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	DataStruct->Mx_Raw = (MPU9250_rx_buf[17] << 8 | MPU9250_rx_buf[16]);
 80010d4:	4b7e      	ldr	r3, [pc, #504]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010d6:	7c5b      	ldrb	r3, [r3, #17]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	4b7c      	ldr	r3, [pc, #496]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010de:	7c1b      	ldrb	r3, [r3, #16]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	DataStruct->Mz_Raw = (MPU9250_rx_buf[19] << 8 | MPU9250_rx_buf[18]);
 80010ec:	4b78      	ldr	r3, [pc, #480]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010ee:	7cdb      	ldrb	r3, [r3, #19]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	4b76      	ldr	r3, [pc, #472]	; (80012d0 <MPU9250_Parsing_NoOffset+0x2c0>)
 80010f6:	7c9b      	ldrb	r3, [r3, #18]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	DataStruct->Ax = DataStruct->Ax_Raw / MPU9250_Acc_LSB;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001112:	4b70      	ldr	r3, [pc, #448]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2c4>)
 8001114:	ed93 7a00 	vldr	s14, [r3]
 8001118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	edc3 7a02 	vstr	s15, [r3, #8]
	DataStruct->Ay = DataStruct->Ay_Raw / MPU9250_Acc_LSB;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001130:	4b68      	ldr	r3, [pc, #416]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2c4>)
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	edc3 7a03 	vstr	s15, [r3, #12]
	DataStruct->Az = ((DataStruct->Az_Raw / MPU9250_Acc_LSB)-0.15) / 1.08;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800114e:	4b61      	ldr	r3, [pc, #388]	; (80012d4 <MPU9250_Parsing_NoOffset+0x2c4>)
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001158:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800115c:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80012c0 <MPU9250_Parsing_NoOffset+0x2b0>
 8001160:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001164:	ed9f 5b58 	vldr	d5, [pc, #352]	; 80012c8 <MPU9250_Parsing_NoOffset+0x2b8>
 8001168:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800116c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
	DataStruct->Gx = DataStruct->Gx_Raw / MPU9250_Gyro_LSB;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001184:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2c8>)
 8001186:	ed93 7a00 	vldr	s14, [r3]
 800118a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edc3 7a07 	vstr	s15, [r3, #28]
	DataStruct->Gy = DataStruct->Gy_Raw / MPU9250_Gyro_LSB;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011a2:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80011a4:	ed93 7a00 	vldr	s14, [r3]
 80011a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	edc3 7a08 	vstr	s15, [r3, #32]
	DataStruct->Gz = DataStruct->Gz_Raw / MPU9250_Gyro_LSB;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80011c0:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <MPU9250_Parsing_NoOffset+0x2c8>)
 80011c2:	ed93 7a00 	vldr	s14, [r3]
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	DataStruct->Mx = (DataStruct->Mx_Raw * ((DataStruct->ASAX - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80011de:	3b80      	subs	r3, #128	; 0x80
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da00      	bge.n	80011e6 <MPU9250_Parsing_NoOffset+0x1d6>
 80011e4:	33ff      	adds	r3, #255	; 0xff
 80011e6:	121b      	asrs	r3, r3, #8
 80011e8:	3301      	adds	r3, #1
 80011ea:	fb03 f302 	mul.w	r3, r3, r2
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f6:	4b39      	ldr	r3, [pc, #228]	; (80012dc <MPU9250_Parsing_NoOffset+0x2cc>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	DataStruct->My = (DataStruct->My_Raw * ((DataStruct->ASAY - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800120c:	461a      	mov	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8001214:	3b80      	subs	r3, #128	; 0x80
 8001216:	2b00      	cmp	r3, #0
 8001218:	da00      	bge.n	800121c <MPU9250_Parsing_NoOffset+0x20c>
 800121a:	33ff      	adds	r3, #255	; 0xff
 800121c:	121b      	asrs	r3, r3, #8
 800121e:	3301      	adds	r3, #1
 8001220:	fb03 f302 	mul.w	r3, r3, r2
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122c:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <MPU9250_Parsing_NoOffset+0x2cc>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	DataStruct->Mz = (DataStruct->Mz_Raw * ((DataStruct->ASAZ - 128) / 256 + 1)) * MPU9250_Mag_LSB;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800124a:	3b80      	subs	r3, #128	; 0x80
 800124c:	2b00      	cmp	r3, #0
 800124e:	da00      	bge.n	8001252 <MPU9250_Parsing_NoOffset+0x242>
 8001250:	33ff      	adds	r3, #255	; 0xff
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	3301      	adds	r3, #1
 8001256:	fb03 f302 	mul.w	r3, r3, r2
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MPU9250_Parsing_NoOffset+0x2cc>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	DataStruct->Gx_Rad = DataStruct->Gx * D2R;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	edd3 7a07 	vldr	s15, [r3, #28]
 8001278:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80012e0 <MPU9250_Parsing_NoOffset+0x2d0>
 800127c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	DataStruct->Gy_Rad = DataStruct->Gy * D2R;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	edd3 7a08 	vldr	s15, [r3, #32]
 800128c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012e0 <MPU9250_Parsing_NoOffset+0x2d0>
 8001290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	DataStruct->Gz_Rad = DataStruct->Gz * D2R;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80012a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80012e0 <MPU9250_Parsing_NoOffset+0x2d0>
 80012a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	33333333 	.word	0x33333333
 80012c4:	3fc33333 	.word	0x3fc33333
 80012c8:	147ae148 	.word	0x147ae148
 80012cc:	3ff147ae 	.word	0x3ff147ae
 80012d0:	240002ec 	.word	0x240002ec
 80012d4:	24000004 	.word	0x24000004
 80012d8:	24000000 	.word	0x24000000
 80012dc:	24000008 	.word	0x24000008
 80012e0:	3c8efa35 	.word	0x3c8efa35

080012e4 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0ae      	sub	sp, #184	; 0xb8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80012ee:	edc7 0a08 	vstr	s1, [r7, #32]
 80012f2:	ed87 1a07 	vstr	s2, [r7, #28]
 80012f6:	edc7 1a06 	vstr	s3, [r7, #24]
 80012fa:	ed87 2a05 	vstr	s4, [r7, #20]
 80012fe:	edc7 2a04 	vstr	s5, [r7, #16]
 8001302:	ed87 3a03 	vstr	s6, [r7, #12]
 8001306:	edc7 3a02 	vstr	s7, [r7, #8]
 800130a:	ed87 4a01 	vstr	s8, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800130e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001312:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	d11d      	bne.n	8001358 <MadgwickAHRSupdate+0x74>
 800131c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001320:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001328:	d116      	bne.n	8001358 <MadgwickAHRSupdate+0x74>
 800132a:	edd7 7a01 	vldr	s15, [r7, #4]
 800132e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001336:	d10f      	bne.n	8001358 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001338:	edd7 2a04 	vldr	s5, [r7, #16]
 800133c:	ed97 2a05 	vldr	s4, [r7, #20]
 8001340:	edd7 1a06 	vldr	s3, [r7, #24]
 8001344:	ed97 1a07 	vldr	s2, [r7, #28]
 8001348:	edd7 0a08 	vldr	s1, [r7, #32]
 800134c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001350:	f000 ffd6 	bl	8002300 <MadgwickAHRSupdateIMU>
		return;
 8001354:	f000 bfb4 	b.w	80022c0 <MadgwickAHRSupdate+0xfdc>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001358:	4be6      	ldr	r3, [pc, #920]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	eeb1 7a67 	vneg.f32	s14, s15
 8001362:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136a:	4be3      	ldr	r3, [pc, #908]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 800136c:	edd3 6a00 	vldr	s13, [r3]
 8001370:	edd7 7a08 	vldr	s15, [r7, #32]
 8001374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001378:	ee37 7a67 	vsub.f32	s14, s14, s15
 800137c:	4bdf      	ldr	r3, [pc, #892]	; (80016fc <MadgwickAHRSupdate+0x418>)
 800137e:	edd3 6a00 	vldr	s13, [r3]
 8001382:	edd7 7a07 	vldr	s15, [r7, #28]
 8001386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001396:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800139a:	4bd9      	ldr	r3, [pc, #868]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a8:	4bd3      	ldr	r3, [pc, #844]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 80013aa:	edd3 6a00 	vldr	s13, [r3]
 80013ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80013b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ba:	4bd0      	ldr	r3, [pc, #832]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80013bc:	edd3 6a00 	vldr	s13, [r3]
 80013c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80013c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80013d8:	4bc9      	ldr	r3, [pc, #804]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e6:	4bc3      	ldr	r3, [pc, #780]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 80013e8:	edd3 6a00 	vldr	s13, [r3]
 80013ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80013f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f8:	4bc0      	ldr	r3, [pc, #768]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80013fa:	edd3 6a00 	vldr	s13, [r3]
 80013fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800140e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001412:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001416:	4bba      	ldr	r3, [pc, #744]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001418:	ed93 7a00 	vldr	s14, [r3]
 800141c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001424:	4bb3      	ldr	r3, [pc, #716]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 8001426:	edd3 6a00 	vldr	s13, [r3]
 800142a:	edd7 7a08 	vldr	s15, [r7, #32]
 800142e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001432:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001436:	4bb0      	ldr	r3, [pc, #704]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 8001438:	edd3 6a00 	vldr	s13, [r3]
 800143c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001448:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800144c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001450:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001454:	edd7 7a06 	vldr	s15, [r7, #24]
 8001458:	eef5 7a40 	vcmp.f32	s15, #0.0
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	d10e      	bne.n	8001480 <MadgwickAHRSupdate+0x19c>
 8001462:	edd7 7a05 	vldr	s15, [r7, #20]
 8001466:	eef5 7a40 	vcmp.f32	s15, #0.0
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d107      	bne.n	8001480 <MadgwickAHRSupdate+0x19c>
 8001470:	edd7 7a04 	vldr	s15, [r7, #16]
 8001474:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	f000 85a6 	beq.w	8001fcc <MadgwickAHRSupdate+0xce8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001488:	edd7 7a05 	vldr	s15, [r7, #20]
 800148c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 7a04 	vldr	s15, [r7, #16]
 8001498:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	f001 fb5a 	bl	8002b5c <invSqrt>
 80014a8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80014ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80014b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b8:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80014bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80014c0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 80014cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80014d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80014dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001500:	f001 fb2c 	bl	8002b5c <invSqrt>
 8001504:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001508:	ed97 7a03 	vldr	s14, [r7, #12]
 800150c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001514:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001518:	ed97 7a02 	vldr	s14, [r7, #8]
 800151c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001528:	ed97 7a01 	vldr	s14, [r7, #4]
 800152c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001538:	4b71      	ldr	r3, [pc, #452]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001542:	ed97 7a03 	vldr	s14, [r7, #12]
 8001546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 800154e:	4b6c      	ldr	r3, [pc, #432]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001550:	edd3 7a00 	vldr	s15, [r3]
 8001554:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001558:	ed97 7a02 	vldr	s14, [r7, #8]
 800155c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001560:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001564:	4b66      	ldr	r3, [pc, #408]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800156e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001576:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 800157a:	4b5e      	ldr	r3, [pc, #376]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001584:	ed97 7a03 	vldr	s14, [r7, #12]
 8001588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001590:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800159a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 800159e:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015a8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80015ac:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015b6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80015ba:	4b50      	ldr	r3, [pc, #320]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015c4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 80015c8:	4b4d      	ldr	r3, [pc, #308]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015d2:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 80015e0:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015ea:	4b44      	ldr	r3, [pc, #272]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f4:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 80015f8:	4b41      	ldr	r3, [pc, #260]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 80015fa:	ed93 7a00 	vldr	s14, [r3]
 80015fe:	4b40      	ldr	r3, [pc, #256]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 800160c:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 800160e:	ed93 7a00 	vldr	s14, [r3]
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001620:	4b37      	ldr	r3, [pc, #220]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001622:	ed93 7a00 	vldr	s14, [r3]
 8001626:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <MadgwickAHRSupdate+0x41c>)
 8001636:	ed93 7a00 	vldr	s14, [r3]
 800163a:	4b30      	ldr	r3, [pc, #192]	; (80016fc <MadgwickAHRSupdate+0x418>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001658:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 800165c:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 800165e:	ed93 7a00 	vldr	s14, [r3]
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001670:	4b20      	ldr	r3, [pc, #128]	; (80016f4 <MadgwickAHRSupdate+0x410>)
 8001672:	ed93 7a00 	vldr	s14, [r3]
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MadgwickAHRSupdate+0x418>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 8001686:	ed93 7a00 	vldr	s14, [r3]
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001694:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 800169a:	ed93 7a00 	vldr	s14, [r3]
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80016ae:	ed93 7a00 	vldr	s14, [r3]
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016bc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80016c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80016c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <MadgwickAHRSupdate+0x418>)
 80016ce:	edd3 6a00 	vldr	s13, [r3]
 80016d2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80016d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MadgwickAHRSupdate+0x414>)
 80016e0:	edd3 6a00 	vldr	s13, [r3]
 80016e4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80016e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f0:	e008      	b.n	8001704 <MadgwickAHRSupdate+0x420>
 80016f2:	bf00      	nop
 80016f4:	24000214 	.word	0x24000214
 80016f8:	24000218 	.word	0x24000218
 80016fc:	2400021c 	.word	0x2400021c
 8001700:	24000010 	.word	0x24000010
 8001704:	edd7 6a03 	vldr	s13, [r7, #12]
 8001708:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800170c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001710:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001714:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001718:	edd7 7a02 	vldr	s15, [r7, #8]
 800171c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001720:	4bf5      	ldr	r3, [pc, #980]	; (8001af8 <MadgwickAHRSupdate+0x814>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172e:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001732:	edd7 7a01 	vldr	s15, [r7, #4]
 8001736:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800173a:	4bf0      	ldr	r3, [pc, #960]	; (8001afc <MadgwickAHRSupdate+0x818>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001748:	edd7 6a03 	vldr	s13, [r7, #12]
 800174c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001754:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001758:	edd7 6a03 	vldr	s13, [r7, #12]
 800175c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001768:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 800176c:	4be3      	ldr	r3, [pc, #908]	; (8001afc <MadgwickAHRSupdate+0x818>)
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177a:	edd7 6a02 	vldr	s13, [r7, #8]
 800177e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001786:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178a:	4bdd      	ldr	r3, [pc, #884]	; (8001b00 <MadgwickAHRSupdate+0x81c>)
 800178c:	edd3 6a00 	vldr	s13, [r3]
 8001790:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800179c:	4bd6      	ldr	r3, [pc, #856]	; (8001af8 <MadgwickAHRSupdate+0x814>)
 800179e:	edd3 6a00 	vldr	s13, [r3]
 80017a2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80017a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ae:	edd7 6a02 	vldr	s13, [r7, #8]
 80017b2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017be:	edd7 6a02 	vldr	s13, [r7, #8]
 80017c2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ce:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80017d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017da:	4bc8      	ldr	r3, [pc, #800]	; (8001afc <MadgwickAHRSupdate+0x818>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e8:	edd7 6a02 	vldr	s13, [r7, #8]
 80017ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80017fc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001800:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001804:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001808:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800180c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001810:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001814:	eeb0 0b47 	vmov.f64	d0, d7
 8001818:	f012 fda2 	bl	8014360 <sqrt>
 800181c:	eeb0 7b40 	vmov.f64	d7, d0
 8001820:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001824:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001828:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800182c:	eeb1 7a67 	vneg.f32	s14, s15
 8001830:	4bb1      	ldr	r3, [pc, #708]	; (8001af8 <MadgwickAHRSupdate+0x814>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183a:	4bb1      	ldr	r3, [pc, #708]	; (8001b00 <MadgwickAHRSupdate+0x81c>)
 800183c:	edd3 6a00 	vldr	s13, [r3]
 8001840:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800184c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001850:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800185c:	4ba7      	ldr	r3, [pc, #668]	; (8001afc <MadgwickAHRSupdate+0x818>)
 800185e:	edd3 6a00 	vldr	s13, [r3]
 8001862:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800186e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001872:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800187e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001882:	edd7 7a02 	vldr	s15, [r7, #8]
 8001886:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800188a:	4b9c      	ldr	r3, [pc, #624]	; (8001afc <MadgwickAHRSupdate+0x818>)
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001894:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001898:	edd7 6a01 	vldr	s13, [r7, #4]
 800189c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a8:	edd7 6a01 	vldr	s13, [r7, #4]
 80018ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 80018bc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018c4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 80018c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80018d4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80018d8:	eeb1 7a67 	vneg.f32	s14, s15
 80018dc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018e4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80018e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80018f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018f8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80018fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001900:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001904:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001908:	edd7 7a05 	vldr	s15, [r7, #20]
 800190c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001910:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800191c:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <MadgwickAHRSupdate+0x814>)
 800191e:	edd3 6a00 	vldr	s13, [r3]
 8001922:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001926:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800192a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800192e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001932:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001936:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800193a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800193e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001942:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001946:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800194a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800194e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001952:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001956:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800195a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800195e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001962:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800196e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001972:	eef1 6a67 	vneg.f32	s13, s15
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <MadgwickAHRSupdate+0x818>)
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001980:	4b5f      	ldr	r3, [pc, #380]	; (8001b00 <MadgwickAHRSupdate+0x81c>)
 8001982:	ed93 6a00 	vldr	s12, [r3]
 8001986:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800198a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800198e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001992:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001996:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800199a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800199e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019a2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019a6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80019aa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80019ae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80019b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019b6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019be:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <MadgwickAHRSupdate+0x814>)
 80019d0:	edd3 6a00 	vldr	s13, [r3]
 80019d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019dc:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80019e0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019e4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019e8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019ec:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019f0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80019f4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019f8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019fc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a00:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a04:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a08:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a0c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a14:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a20:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001a24:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a28:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a2c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a38:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a3c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a44:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a48:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a4c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a54:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a58:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a5c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a68:	4b25      	ldr	r3, [pc, #148]	; (8001b00 <MadgwickAHRSupdate+0x81c>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001a72:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a76:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a7e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001a82:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a86:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a8e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a92:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a96:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MadgwickAHRSupdate+0x818>)
 8001aa4:	edd3 6a00 	vldr	s13, [r3]
 8001aa8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ab0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001ab4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ab8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001abc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ac0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ac4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ac8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001acc:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001ad0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ad4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ad8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001adc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ae0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af4:	e006      	b.n	8001b04 <MadgwickAHRSupdate+0x820>
 8001af6:	bf00      	nop
 8001af8:	24000218 	.word	0x24000218
 8001afc:	2400021c 	.word	0x2400021c
 8001b00:	24000214 	.word	0x24000214
 8001b04:	4bf6      	ldr	r3, [pc, #984]	; (8001ee0 <MadgwickAHRSupdate+0xbfc>)
 8001b06:	edd3 6a00 	vldr	s13, [r3]
 8001b0a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b12:	4bf4      	ldr	r3, [pc, #976]	; (8001ee4 <MadgwickAHRSupdate+0xc00>)
 8001b14:	ed93 6a00 	vldr	s12, [r3]
 8001b18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b1c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b20:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b24:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001b28:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b38:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001b3c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b40:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001b44:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b48:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b4c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b54:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b60:	4be1      	ldr	r3, [pc, #900]	; (8001ee8 <MadgwickAHRSupdate+0xc04>)
 8001b62:	edd3 6a00 	vldr	s13, [r3]
 8001b66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b6a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b6e:	4bdf      	ldr	r3, [pc, #892]	; (8001eec <MadgwickAHRSupdate+0xc08>)
 8001b70:	ed93 6a00 	vldr	s12, [r3]
 8001b74:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001b78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b7c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b80:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b84:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b8c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b90:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b94:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b98:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ba0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ba4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ba8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bac:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001bb0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bb8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001bc8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001bcc:	eeb1 7a67 	vneg.f32	s14, s15
 8001bd0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001bd4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bd8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001bdc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001be0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001be4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bec:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001bf0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001bf4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001bf8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c04:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c10:	4bb3      	ldr	r3, [pc, #716]	; (8001ee0 <MadgwickAHRSupdate+0xbfc>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c1a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c1e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001c2a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c2e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c36:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c3e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c4a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c4e:	eef1 6a67 	vneg.f32	s13, s15
 8001c52:	4ba3      	ldr	r3, [pc, #652]	; (8001ee0 <MadgwickAHRSupdate+0xbfc>)
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c5c:	4ba1      	ldr	r3, [pc, #644]	; (8001ee4 <MadgwickAHRSupdate+0xc00>)
 8001c5e:	ed93 6a00 	vldr	s12, [r3]
 8001c62:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c66:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c6e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001c72:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c76:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c7a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c7e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c82:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c86:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c8a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c8e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c92:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c96:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c9a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb2:	4b8e      	ldr	r3, [pc, #568]	; (8001eec <MadgwickAHRSupdate+0xc08>)
 8001cb4:	edd3 6a00 	vldr	s13, [r3]
 8001cb8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cc0:	4b89      	ldr	r3, [pc, #548]	; (8001ee8 <MadgwickAHRSupdate+0xc04>)
 8001cc2:	ed93 6a00 	vldr	s12, [r3]
 8001cc6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cd2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001cd6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001cda:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001cde:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ce2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ce6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001cea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001cee:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001cf2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cf6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cfa:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d02:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d0e:	4b75      	ldr	r3, [pc, #468]	; (8001ee4 <MadgwickAHRSupdate+0xc00>)
 8001d10:	edd3 6a00 	vldr	s13, [r3]
 8001d14:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d1c:	4b70      	ldr	r3, [pc, #448]	; (8001ee0 <MadgwickAHRSupdate+0xbfc>)
 8001d1e:	ed93 6a00 	vldr	s12, [r3]
 8001d22:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d2e:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001d32:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d36:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d3a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d3e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d42:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001d46:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001d4a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d4e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d52:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d56:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d5a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d5e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d66:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d72:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d76:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d7e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d8e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d96:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d9a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d9e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001da2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001da6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001daa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dae:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dba:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001dbe:	eef1 6a67 	vneg.f32	s13, s15
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <MadgwickAHRSupdate+0xc04>)
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dcc:	4b47      	ldr	r3, [pc, #284]	; (8001eec <MadgwickAHRSupdate+0xc08>)
 8001dce:	ed93 6a00 	vldr	s12, [r3]
 8001dd2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dda:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dde:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001de2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001de6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001dee:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001df2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001df6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dfa:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001dfe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001e02:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e0a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e0e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e16:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e22:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e26:	eef1 6a67 	vneg.f32	s13, s15
 8001e2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <MadgwickAHRSupdate+0xc00>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <MadgwickAHRSupdate+0xbfc>)
 8001e36:	ed93 6a00 	vldr	s12, [r3]
 8001e3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e42:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e46:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001e4a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e52:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e56:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e5a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e5e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e62:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e66:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e6a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e6e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e76:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e82:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <MadgwickAHRSupdate+0xc08>)
 8001e84:	edd3 6a00 	vldr	s13, [r3]
 8001e88:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e90:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e94:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e98:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e9c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ea0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ea4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001ea8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001eac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001eb0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001eb4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001eb8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ebc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ec0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ec4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001ed8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001edc:	e008      	b.n	8001ef0 <MadgwickAHRSupdate+0xc0c>
 8001ede:	bf00      	nop
 8001ee0:	24000218 	.word	0x24000218
 8001ee4:	24000010 	.word	0x24000010
 8001ee8:	2400021c 	.word	0x2400021c
 8001eec:	24000214 	.word	0x24000214
 8001ef0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ef4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ef8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001efc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f00:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f0c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f18:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1c:	f000 fe1e 	bl	8002b5c <invSqrt>
 8001f20:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001f24:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001f28:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001f34:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001f38:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f40:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001f44:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f48:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f50:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001f54:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001f58:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001f64:	4bd8      	ldr	r3, [pc, #864]	; (80022c8 <MadgwickAHRSupdate+0xfe4>)
 8001f66:	ed93 7a00 	vldr	s14, [r3]
 8001f6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001f7e:	4bd2      	ldr	r3, [pc, #840]	; (80022c8 <MadgwickAHRSupdate+0xfe4>)
 8001f80:	ed93 7a00 	vldr	s14, [r3]
 8001f84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f94:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001f98:	4bcb      	ldr	r3, [pc, #812]	; (80022c8 <MadgwickAHRSupdate+0xfe4>)
 8001f9a:	ed93 7a00 	vldr	s14, [r3]
 8001f9e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fae:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001fb2:	4bc5      	ldr	r3, [pc, #788]	; (80022c8 <MadgwickAHRSupdate+0xfe4>)
 8001fb4:	ed93 7a00 	vldr	s14, [r3]
 8001fb8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc0:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001fcc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001fd0:	ed9f 7abe 	vldr	s14, [pc, #760]	; 80022cc <MadgwickAHRSupdate+0xfe8>
 8001fd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd8:	4bbd      	ldr	r3, [pc, #756]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe2:	4bbb      	ldr	r3, [pc, #748]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 8001fe4:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001fe8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001fec:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80022cc <MadgwickAHRSupdate+0xfe8>
 8001ff0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ff4:	4bb7      	ldr	r3, [pc, #732]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 8001ff6:	edd3 7a00 	vldr	s15, [r3]
 8001ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffe:	4bb5      	ldr	r3, [pc, #724]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 8002000:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002004:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002008:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 80022cc <MadgwickAHRSupdate+0xfe8>
 800200c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002010:	4bb1      	ldr	r3, [pc, #708]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201a:	4baf      	ldr	r3, [pc, #700]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 800201c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002020:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002024:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80022cc <MadgwickAHRSupdate+0xfe8>
 8002028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800202c:	4bab      	ldr	r3, [pc, #684]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002036:	4ba9      	ldr	r3, [pc, #676]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 8002038:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800203c:	4ba4      	ldr	r3, [pc, #656]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	4ba3      	ldr	r3, [pc, #652]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800204c:	4ba1      	ldr	r3, [pc, #644]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 800204e:	edd3 6a00 	vldr	s13, [r3]
 8002052:	4ba0      	ldr	r3, [pc, #640]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 8002054:	edd3 7a00 	vldr	s15, [r3]
 8002058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002060:	4b9d      	ldr	r3, [pc, #628]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002062:	edd3 6a00 	vldr	s13, [r3]
 8002066:	4b9c      	ldr	r3, [pc, #624]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002074:	4b99      	ldr	r3, [pc, #612]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 8002076:	edd3 6a00 	vldr	s13, [r3]
 800207a:	4b98      	ldr	r3, [pc, #608]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002088:	eeb0 0a67 	vmov.f32	s0, s15
 800208c:	f000 fd66 	bl	8002b5c <invSqrt>
 8002090:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8002094:	4b8e      	ldr	r3, [pc, #568]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 8002096:	ed93 7a00 	vldr	s14, [r3]
 800209a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a2:	4b8b      	ldr	r3, [pc, #556]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 80020a4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80020a8:	4b8a      	ldr	r3, [pc, #552]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 80020aa:	ed93 7a00 	vldr	s14, [r3]
 80020ae:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b6:	4b87      	ldr	r3, [pc, #540]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 80020b8:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80020bc:	4b86      	ldr	r3, [pc, #536]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 80020be:	ed93 7a00 	vldr	s14, [r3]
 80020c2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ca:	4b83      	ldr	r3, [pc, #524]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 80020cc:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80020d0:	4b82      	ldr	r3, [pc, #520]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80020d2:	ed93 7a00 	vldr	s14, [r3]
 80020d6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020de:	4b7f      	ldr	r3, [pc, #508]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80020e0:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 80020e4:	4b7a      	ldr	r3, [pc, #488]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 80020e6:	ed93 7a00 	vldr	s14, [r3]
 80020ea:	4b7a      	ldr	r3, [pc, #488]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f4:	4b78      	ldr	r3, [pc, #480]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 80020f6:	edd3 6a00 	vldr	s13, [r3]
 80020fa:	4b78      	ldr	r3, [pc, #480]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002104:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002108:	4b72      	ldr	r3, [pc, #456]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 800210a:	ed93 7a00 	vldr	s14, [r3]
 800210e:	4b71      	ldr	r3, [pc, #452]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002118:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800211c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002120:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002122:	edd3 6a00 	vldr	s13, [r3]
 8002126:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002134:	eef0 0a67 	vmov.f32	s1, s15
 8002138:	eeb0 0a46 	vmov.f32	s0, s12
 800213c:	f012 f96c 	bl	8014418 <atan2f>
 8002140:	eef0 7a40 	vmov.f32	s15, s0
 8002144:	4b66      	ldr	r3, [pc, #408]	; (80022e0 <MadgwickAHRSupdate+0xffc>)
 8002146:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 800214a:	4b62      	ldr	r3, [pc, #392]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 800214c:	ed93 7a00 	vldr	s14, [r3]
 8002150:	4b62      	ldr	r3, [pc, #392]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215a:	4b5d      	ldr	r3, [pc, #372]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 800215c:	edd3 6a00 	vldr	s13, [r3]
 8002160:	4b5d      	ldr	r3, [pc, #372]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002176:	eeb0 0a67 	vmov.f32	s0, s15
 800217a:	f012 f91b 	bl	80143b4 <asinf>
 800217e:	eef0 7a40 	vmov.f32	s15, s0
 8002182:	4b58      	ldr	r3, [pc, #352]	; (80022e4 <MadgwickAHRSupdate+0x1000>)
 8002184:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 8002188:	4b52      	ldr	r3, [pc, #328]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 800218a:	ed93 7a00 	vldr	s14, [r3]
 800218e:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002198:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 800219a:	edd3 6a00 	vldr	s13, [r3]
 800219e:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021b4:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 80021b6:	ed93 6a00 	vldr	s12, [r3]
 80021ba:	4b45      	ldr	r3, [pc, #276]	; (80022d0 <MadgwickAHRSupdate+0xfec>)
 80021bc:	edd3 6a00 	vldr	s13, [r3]
 80021c0:	ee26 6a26 	vmul.f32	s12, s12, s13
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 80021c6:	edd3 5a00 	vldr	s11, [r3]
 80021ca:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <MadgwickAHRSupdate+0xff0>)
 80021cc:	edd3 6a00 	vldr	s13, [r3]
 80021d0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021d4:	ee36 6a26 	vadd.f32	s12, s12, s13
 80021d8:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 80021da:	edd3 5a00 	vldr	s11, [r3]
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <MadgwickAHRSupdate+0xff4>)
 80021e0:	edd3 6a00 	vldr	s13, [r3]
 80021e4:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021e8:	ee36 6a66 	vsub.f32	s12, s12, s13
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80021ee:	edd3 5a00 	vldr	s11, [r3]
 80021f2:	4b3a      	ldr	r3, [pc, #232]	; (80022dc <MadgwickAHRSupdate+0xff8>)
 80021f4:	edd3 6a00 	vldr	s13, [r3]
 80021f8:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80021fc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002200:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002204:	eeb0 1b46 	vmov.f64	d1, d6
 8002208:	eeb0 0b47 	vmov.f64	d0, d7
 800220c:	f012 f8a4 	bl	8014358 <atan2>
 8002210:	eeb0 7b40 	vmov.f64	d7, d0
 8002214:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002218:	4b33      	ldr	r3, [pc, #204]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 800221a:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <MadgwickAHRSupdate+0xffc>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80022ec <MadgwickAHRSupdate+0x1008>
 8002228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800222c:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <MadgwickAHRSupdate+0xffc>)
 800222e:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002232:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <MadgwickAHRSupdate+0x1000>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80022ec <MadgwickAHRSupdate+0x1008>
 800223c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002240:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <MadgwickAHRSupdate+0x1000>)
 8002242:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80022ec <MadgwickAHRSupdate+0x1008>
 8002250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002254:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 8002256:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 800225a:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <MadgwickAHRSupdate+0xffc>)
 800225c:	ed93 7a00 	vldr	s14, [r3]
 8002260:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <MadgwickAHRSupdate+0x100c>)
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <MadgwickAHRSupdate+0xffc>)
 800226c:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002270:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <MadgwickAHRSupdate+0x1000>)
 8002272:	ed93 7a00 	vldr	s14, [r3]
 8002276:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <MadgwickAHRSupdate+0x1010>)
 8002278:	edd3 7a00 	vldr	s15, [r3]
 800227c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <MadgwickAHRSupdate+0x1000>)
 8002282:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 8002288:	ed93 7a00 	vldr	s14, [r3]
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <MadgwickAHRSupdate+0x1014>)
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 8002298:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	d509      	bpl.n	80022c0 <MadgwickAHRSupdate+0xfdc>
	{
		System_Yaw = 360.0f + System_Yaw;
 80022ac:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80022fc <MadgwickAHRSupdate+0x1018>
 80022b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <MadgwickAHRSupdate+0x1004>)
 80022bc:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80022c0:	37b8      	adds	r7, #184	; 0xb8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2400000c 	.word	0x2400000c
 80022cc:	3b03126f 	.word	0x3b03126f
 80022d0:	24000010 	.word	0x24000010
 80022d4:	24000214 	.word	0x24000214
 80022d8:	24000218 	.word	0x24000218
 80022dc:	2400021c 	.word	0x2400021c
 80022e0:	24000304 	.word	0x24000304
 80022e4:	24000308 	.word	0x24000308
 80022e8:	24000300 	.word	0x24000300
 80022ec:	42652ee1 	.word	0x42652ee1
 80022f0:	24000220 	.word	0x24000220
 80022f4:	24000224 	.word	0x24000224
 80022f8:	24000228 	.word	0x24000228
 80022fc:	43b40000 	.word	0x43b40000

08002300 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b09c      	sub	sp, #112	; 0x70
 8002304:	af00      	add	r7, sp, #0
 8002306:	ed87 0a05 	vstr	s0, [r7, #20]
 800230a:	edc7 0a04 	vstr	s1, [r7, #16]
 800230e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002312:	edc7 1a02 	vstr	s3, [r7, #8]
 8002316:	ed87 2a01 	vstr	s4, [r7, #4]
 800231a:	edc7 2a00 	vstr	s5, [r7]
	float recipNorm;
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;
	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800231e:	4bee      	ldr	r3, [pc, #952]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	eeb1 7a67 	vneg.f32	s14, s15
 8002328:	edd7 7a05 	vldr	s15, [r7, #20]
 800232c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002330:	4bea      	ldr	r3, [pc, #936]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002332:	edd3 6a00 	vldr	s13, [r3]
 8002336:	edd7 7a04 	vldr	s15, [r7, #16]
 800233a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002342:	4be7      	ldr	r3, [pc, #924]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002344:	edd3 6a00 	vldr	s13, [r3]
 8002348:	edd7 7a03 	vldr	s15, [r7, #12]
 800234c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002350:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002354:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002360:	4be0      	ldr	r3, [pc, #896]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 8002362:	ed93 7a00 	vldr	s14, [r3]
 8002366:	edd7 7a05 	vldr	s15, [r7, #20]
 800236a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236e:	4bdb      	ldr	r3, [pc, #876]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002370:	edd3 6a00 	vldr	s13, [r3]
 8002374:	edd7 7a03 	vldr	s15, [r7, #12]
 8002378:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800237c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002380:	4bd7      	ldr	r3, [pc, #860]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002382:	edd3 6a00 	vldr	s13, [r3]
 8002386:	edd7 7a04 	vldr	s15, [r7, #16]
 800238a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002392:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800239e:	4bd1      	ldr	r3, [pc, #836]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 80023a0:	ed93 7a00 	vldr	s14, [r3]
 80023a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80023a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ac:	4bca      	ldr	r3, [pc, #808]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 80023ae:	edd3 6a00 	vldr	s13, [r3]
 80023b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023be:	4bc8      	ldr	r3, [pc, #800]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 80023c0:	edd3 6a00 	vldr	s13, [r3]
 80023c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80023c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80023dc:	4bc1      	ldr	r3, [pc, #772]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 80023de:	ed93 7a00 	vldr	s14, [r3]
 80023e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80023e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ea:	4bbb      	ldr	r3, [pc, #748]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 80023ec:	edd3 6a00 	vldr	s13, [r3]
 80023f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fc:	4bb7      	ldr	r3, [pc, #732]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 80023fe:	edd3 6a00 	vldr	s13, [r3]
 8002402:	edd7 7a05 	vldr	s15, [r7, #20]
 8002406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002416:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800241a:	edd7 7a02 	vldr	s15, [r7, #8]
 800241e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	d10e      	bne.n	8002446 <MadgwickAHRSupdateIMU+0x146>
 8002428:	edd7 7a01 	vldr	s15, [r7, #4]
 800242c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002434:	d107      	bne.n	8002446 <MadgwickAHRSupdateIMU+0x146>
 8002436:	edd7 7a00 	vldr	s15, [r7]
 800243a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800243e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002442:	f000 81e5 	beq.w	8002810 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002446:	edd7 7a02 	vldr	s15, [r7, #8]
 800244a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800244e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002452:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245a:	edd7 7a00 	vldr	s15, [r7]
 800245e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002466:	eeb0 0a67 	vmov.f32	s0, s15
 800246a:	f000 fb77 	bl	8002b5c <invSqrt>
 800246e:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		ax *= recipNorm;
 8002472:	ed97 7a02 	vldr	s14, [r7, #8]
 8002476:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800247a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247e:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002482:	ed97 7a01 	vldr	s14, [r7, #4]
 8002486:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800248a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800248e:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 8002492:	ed97 7a00 	vldr	s14, [r7]
 8002496:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800249a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249e:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80024a2:	4b90      	ldr	r3, [pc, #576]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ac:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q1 = 2.0f * q1;
 80024b0:	4b89      	ldr	r3, [pc, #548]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 80024b2:	edd3 7a00 	vldr	s15, [r3]
 80024b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ba:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_2q2 = 2.0f * q2;
 80024be:	4b87      	ldr	r3, [pc, #540]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024c8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_2q3 = 2.0f * q3;
 80024cc:	4b84      	ldr	r3, [pc, #528]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024d6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q0 = 4.0f * q0;
 80024da:	4b82      	ldr	r3, [pc, #520]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_4q1 = 4.0f * q1;
 80024ec:	4b7a      	ldr	r3, [pc, #488]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4q2 = 4.0f * q2;
 80024fe:	4b77      	ldr	r3, [pc, #476]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_8q1 = 8.0f * q1;
 8002510:	4b71      	ldr	r3, [pc, #452]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800251a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		_8q2 = 8.0f * q2;
 8002522:	4b6e      	ldr	r3, [pc, #440]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800252c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002530:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q0q0 = q0 * q0;
 8002534:	4b6b      	ldr	r3, [pc, #428]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 8002536:	ed93 7a00 	vldr	s14, [r3]
 800253a:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <MadgwickAHRSupdateIMU+0x3e4>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002544:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q1q1 = q1 * q1;
 8002548:	4b63      	ldr	r3, [pc, #396]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	4b62      	ldr	r3, [pc, #392]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002558:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		q2q2 = q2 * q2;
 800255c:	4b5f      	ldr	r3, [pc, #380]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	4b5e      	ldr	r3, [pc, #376]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		q3q3 = q3 * q3;
 8002570:	4b5b      	ldr	r3, [pc, #364]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002572:	ed93 7a00 	vldr	s14, [r3]
 8002576:	4b5a      	ldr	r3, [pc, #360]	; (80026e0 <MadgwickAHRSupdateIMU+0x3e0>)
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002580:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002584:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002588:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800258c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002590:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002594:	edd7 7a02 	vldr	s15, [r7, #8]
 8002598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80025a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025b0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80025b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80025c4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80025c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80025cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d0:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80025d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025e4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80025e8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80025ec:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <MadgwickAHRSupdateIMU+0x3d8>)
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025fa:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80025fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800260a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800260e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002612:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002616:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800261a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002622:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002626:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800262a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002632:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002636:	edd7 7a00 	vldr	s15, [r7]
 800263a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002642:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002646:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800264a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800264e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <MadgwickAHRSupdateIMU+0x3dc>)
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800265c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002660:	edd7 7a02 	vldr	s15, [r7, #8]
 8002664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800266c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002670:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800267c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002680:	edd7 7a01 	vldr	s15, [r7, #4]
 8002684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002688:	ee37 7a67 	vsub.f32	s14, s14, s15
 800268c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002694:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002698:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800269c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80026a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80026b8:	edd7 7a00 	vldr	s15, [r7]
 80026bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c4:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80026c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026cc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80026d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026d4:	e008      	b.n	80026e8 <MadgwickAHRSupdateIMU+0x3e8>
 80026d6:	bf00      	nop
 80026d8:	24000214 	.word	0x24000214
 80026dc:	24000218 	.word	0x24000218
 80026e0:	2400021c 	.word	0x2400021c
 80026e4:	24000010 	.word	0x24000010
 80026e8:	4be0      	ldr	r3, [pc, #896]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80026f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002702:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002706:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800270a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800270e:	4bd7      	ldr	r3, [pc, #860]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800271c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002720:	edd7 7a01 	vldr	s15, [r7, #4]
 8002724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272c:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002730:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002734:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002738:	edd7 7a08 	vldr	s15, [r7, #32]
 800273c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002744:	edd7 7a07 	vldr	s15, [r7, #28]
 8002748:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800274c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002750:	edd7 7a06 	vldr	s15, [r7, #24]
 8002754:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275c:	eeb0 0a67 	vmov.f32	s0, s15
 8002760:	f000 f9fc 	bl	8002b5c <invSqrt>
 8002764:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
		s0 *= recipNorm;
 8002768:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800276c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s1 *= recipNorm;
 8002778:	ed97 7a08 	vldr	s14, [r7, #32]
 800277c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002784:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 8002788:	ed97 7a07 	vldr	s14, [r7, #28]
 800278c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002794:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8002798:	ed97 7a06 	vldr	s14, [r7, #24]
 800279c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a4:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 80027a8:	4bb1      	ldr	r3, [pc, #708]	; (8002a70 <MadgwickAHRSupdateIMU+0x770>)
 80027aa:	ed93 7a00 	vldr	s14, [r3]
 80027ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80027ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027be:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 80027c2:	4bab      	ldr	r3, [pc, #684]	; (8002a70 <MadgwickAHRSupdateIMU+0x770>)
 80027c4:	ed93 7a00 	vldr	s14, [r3]
 80027c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80027cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80027d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 80027dc:	4ba4      	ldr	r3, [pc, #656]	; (8002a70 <MadgwickAHRSupdateIMU+0x770>)
 80027de:	ed93 7a00 	vldr	s14, [r3]
 80027e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80027e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ea:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80027ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 80027f6:	4b9e      	ldr	r3, [pc, #632]	; (8002a70 <MadgwickAHRSupdateIMU+0x770>)
 80027f8:	ed93 7a00 	vldr	s14, [r3]
 80027fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002804:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800280c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002810:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002814:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002a74 <MadgwickAHRSupdateIMU+0x774>
 8002818:	ee27 7a87 	vmul.f32	s14, s15, s14
 800281c:	4b96      	ldr	r3, [pc, #600]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	4b94      	ldr	r3, [pc, #592]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 8002828:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800282c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002830:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a74 <MadgwickAHRSupdateIMU+0x774>
 8002834:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002838:	4b90      	ldr	r3, [pc, #576]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002842:	4b8e      	ldr	r3, [pc, #568]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002844:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002848:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800284c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002a74 <MadgwickAHRSupdateIMU+0x774>
 8002850:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002854:	4b8a      	ldr	r3, [pc, #552]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800285e:	4b88      	ldr	r3, [pc, #544]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002860:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002864:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002868:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002a74 <MadgwickAHRSupdateIMU+0x774>
 800286c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002870:	4b7e      	ldr	r3, [pc, #504]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002872:	edd3 7a00 	vldr	s15, [r3]
 8002876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287a:	4b7c      	ldr	r3, [pc, #496]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 800287c:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002880:	4b7d      	ldr	r3, [pc, #500]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 8002882:	ed93 7a00 	vldr	s14, [r3]
 8002886:	4b7c      	ldr	r3, [pc, #496]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002890:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002892:	edd3 6a00 	vldr	s13, [r3]
 8002896:	4b79      	ldr	r3, [pc, #484]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028a4:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 80028a6:	edd3 6a00 	vldr	s13, [r3]
 80028aa:	4b75      	ldr	r3, [pc, #468]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b8:	4b6c      	ldr	r3, [pc, #432]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 80028ba:	edd3 6a00 	vldr	s13, [r3]
 80028be:	4b6b      	ldr	r3, [pc, #428]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 80028c0:	edd3 7a00 	vldr	s15, [r3]
 80028c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028cc:	eeb0 0a67 	vmov.f32	s0, s15
 80028d0:	f000 f944 	bl	8002b5c <invSqrt>
 80028d4:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	q0 *= recipNorm;
 80028d8:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 80028da:	ed93 7a00 	vldr	s14, [r3]
 80028de:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e6:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 80028e8:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80028ec:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80028f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fa:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 80028fc:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002900:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	4b5c      	ldr	r3, [pc, #368]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002910:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002914:	4b55      	ldr	r3, [pc, #340]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002916:	ed93 7a00 	vldr	s14, [r3]
 800291a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800291e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002922:	4b52      	ldr	r3, [pc, #328]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002924:	edc3 7a00 	vstr	s15, [r3]

	//Roll, Pitch, Yaw System Conversion
	System_Roll  = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 8002928:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 800292a:	ed93 7a00 	vldr	s14, [r3]
 800292e:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002930:	edd3 7a00 	vldr	s15, [r3]
 8002934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002938:	4b51      	ldr	r3, [pc, #324]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 800293a:	edd3 6a00 	vldr	s13, [r3]
 800293e:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002948:	ee37 6a27 	vadd.f32	s12, s14, s15
 800294c:	4b4b      	ldr	r3, [pc, #300]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 800294e:	ed93 7a00 	vldr	s14, [r3]
 8002952:	4b4a      	ldr	r3, [pc, #296]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002960:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002964:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002966:	edd3 6a00 	vldr	s13, [r3]
 800296a:	4b45      	ldr	r3, [pc, #276]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002978:	eef0 0a67 	vmov.f32	s1, s15
 800297c:	eeb0 0a46 	vmov.f32	s0, s12
 8002980:	f011 fd4a 	bl	8014418 <atan2f>
 8002984:	eef0 7a40 	vmov.f32	s15, s0
 8002988:	4b3e      	ldr	r3, [pc, #248]	; (8002a84 <MadgwickAHRSupdateIMU+0x784>)
 800298a:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002990:	ed93 7a00 	vldr	s14, [r3]
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800299e:	4b36      	ldr	r3, [pc, #216]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 80029a0:	edd3 6a00 	vldr	s13, [r3]
 80029a4:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80029b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ba:	eeb0 0a67 	vmov.f32	s0, s15
 80029be:	f011 fcf9 	bl	80143b4 <asinf>
 80029c2:	eef0 7a40 	vmov.f32	s15, s0
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <MadgwickAHRSupdateIMU+0x788>)
 80029c8:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw = atan2(2.0f * (q1*q2 + q0*q3),q0*q0 + q1*q1 - q2*q2 - q3*q3);
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 80029ce:	ed93 7a00 	vldr	s14, [r3]
 80029d2:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 80029de:	edd3 6a00 	vldr	s13, [r3]
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029f8:	4b1f      	ldr	r3, [pc, #124]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 80029fa:	ed93 6a00 	vldr	s12, [r3]
 80029fe:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <MadgwickAHRSupdateIMU+0x778>)
 8002a00:	edd3 6a00 	vldr	s13, [r3]
 8002a04:	ee26 6a26 	vmul.f32	s12, s12, s13
 8002a08:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002a0a:	edd3 5a00 	vldr	s11, [r3]
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <MadgwickAHRSupdateIMU+0x77c>)
 8002a10:	edd3 6a00 	vldr	s13, [r3]
 8002a14:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a18:	ee36 6a26 	vadd.f32	s12, s12, s13
 8002a1c:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002a1e:	edd3 5a00 	vldr	s11, [r3]
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <MadgwickAHRSupdateIMU+0x780>)
 8002a24:	edd3 6a00 	vldr	s13, [r3]
 8002a28:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a2c:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002a32:	edd3 5a00 	vldr	s11, [r3]
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <MadgwickAHRSupdateIMU+0x76c>)
 8002a38:	edd3 6a00 	vldr	s13, [r3]
 8002a3c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8002a40:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002a44:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002a48:	eeb0 1b46 	vmov.f64	d1, d6
 8002a4c:	eeb0 0b47 	vmov.f64	d0, d7
 8002a50:	f011 fc82 	bl	8014358 <atan2>
 8002a54:	eeb0 7b40 	vmov.f64	d7, d0
 8002a58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <MadgwickAHRSupdateIMU+0x78c>)
 8002a5e:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  *= 57.295779515f;
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <MadgwickAHRSupdateIMU+0x784>)
 8002a64:	edd3 7a00 	vldr	s15, [r3]
 8002a68:	e014      	b.n	8002a94 <MadgwickAHRSupdateIMU+0x794>
 8002a6a:	bf00      	nop
 8002a6c:	2400021c 	.word	0x2400021c
 8002a70:	2400000c 	.word	0x2400000c
 8002a74:	3b03126f 	.word	0x3b03126f
 8002a78:	24000010 	.word	0x24000010
 8002a7c:	24000214 	.word	0x24000214
 8002a80:	24000218 	.word	0x24000218
 8002a84:	24000304 	.word	0x24000304
 8002a88:	24000308 	.word	0x24000308
 8002a8c:	24000300 	.word	0x24000300
 8002a90:	42652ee1 	.word	0x42652ee1
 8002a94:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002a90 <MadgwickAHRSupdateIMU+0x790>
 8002a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <MadgwickAHRSupdateIMU+0x83c>)
 8002a9e:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch *= 57.295779515f;
 8002aa2:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <MadgwickAHRSupdateIMU+0x840>)
 8002aa4:	edd3 7a00 	vldr	s15, [r3]
 8002aa8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b44 <MadgwickAHRSupdateIMU+0x844>
 8002aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <MadgwickAHRSupdateIMU+0x840>)
 8002ab2:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   *= 57.295779515f;
 8002ab6:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002b44 <MadgwickAHRSupdateIMU+0x844>
 8002ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac4:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002ac6:	edc3 7a00 	vstr	s15, [r3]

	System_Roll  -= System_Roll_Offset;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <MadgwickAHRSupdateIMU+0x83c>)
 8002acc:	ed93 7a00 	vldr	s14, [r3]
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <MadgwickAHRSupdateIMU+0x84c>)
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <MadgwickAHRSupdateIMU+0x83c>)
 8002adc:	edc3 7a00 	vstr	s15, [r3]
	System_Pitch -= System_Pitch_Offset;
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <MadgwickAHRSupdateIMU+0x840>)
 8002ae2:	ed93 7a00 	vldr	s14, [r3]
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <MadgwickAHRSupdateIMU+0x850>)
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <MadgwickAHRSupdateIMU+0x840>)
 8002af2:	edc3 7a00 	vstr	s15, [r3]
	System_Yaw   -= System_Yaw_Offset;
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002af8:	ed93 7a00 	vldr	s14, [r3]
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <MadgwickAHRSupdateIMU+0x854>)
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002b08:	edc3 7a00 	vstr	s15, [r3]
	if(System_Yaw < 0)
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	d400      	bmi.n	8002b1e <MadgwickAHRSupdateIMU+0x81e>
	{
		System_Yaw = 360.0f + System_Yaw;
	}
}
 8002b1c:	e009      	b.n	8002b32 <MadgwickAHRSupdateIMU+0x832>
		System_Yaw = 360.0f + System_Yaw;
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b58 <MadgwickAHRSupdateIMU+0x858>
 8002b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <MadgwickAHRSupdateIMU+0x848>)
 8002b2e:	edc3 7a00 	vstr	s15, [r3]
}
 8002b32:	bf00      	nop
 8002b34:	3770      	adds	r7, #112	; 0x70
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	24000304 	.word	0x24000304
 8002b40:	24000308 	.word	0x24000308
 8002b44:	42652ee1 	.word	0x42652ee1
 8002b48:	24000300 	.word	0x24000300
 8002b4c:	24000220 	.word	0x24000220
 8002b50:	24000224 	.word	0x24000224
 8002b54:	24000228 	.word	0x24000228
 8002b58:	43b40000 	.word	0x43b40000

08002b5c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002b66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b72:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002b7a:	f107 0310 	add.w	r3, r7, #16
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	105a      	asrs	r2, r3, #1
 8002b86:	4b12      	ldr	r3, [pc, #72]	; (8002bd0 <invSqrt+0x74>)
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002b8c:	f107 030c 	add.w	r3, r7, #12
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002b94:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b98:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002bac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	ee07 3a90 	vmov	s15, r3
}
 8002bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	5f3759df 	.word	0x5f3759df

08002bd4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit_DMA(&huart1, p, len);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <_write+0x24>)
 8002bea:	f00c fdad 	bl	800f748 <HAL_UART_Transmit_DMA>
}
 8002bee:	bf00      	nop
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	2400059c 	.word	0x2400059c

08002bfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c00:	b088      	sub	sp, #32
 8002c02:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c04:	f002 fa24 	bl	8005050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c08:	f000 fa46 	bl	8003098 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c0c:	f000 fac2 	bl	8003194 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c10:	f000 fd5c 	bl	80036cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002c14:	f000 fd22 	bl	800365c <MX_DMA_Init>
  MX_TIM7_Init();
 8002c18:	f000 fc06 	bl	8003428 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8002c1c:	f000 fc3a 	bl	8003494 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002c20:	f000 fad4 	bl	80031cc <MX_I2C1_Init>
  MX_SPI1_Init();
 8002c24:	f000 fb12 	bl	800324c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8002c28:	f000 fc80 	bl	800352c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002c2c:	f000 fcca 	bl	80035c4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002c30:	f000 fb62 	bl	80032f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7); //General Timer
 8002c34:	48bc      	ldr	r0, [pc, #752]	; (8002f28 <main+0x32c>)
 8002c36:	f00b fab3 	bl	800e1a0 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1); //FTDI
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	49bb      	ldr	r1, [pc, #748]	; (8002f2c <main+0x330>)
 8002c3e:	48bc      	ldr	r0, [pc, #752]	; (8002f30 <main+0x334>)
 8002c40:	f00c fd3c 	bl	800f6bc <HAL_UART_Receive_IT>
	HAL_UART_Receive_DMA(&huart2, &uart2_rx_data, 1); //Receiver
 8002c44:	2201      	movs	r2, #1
 8002c46:	49bb      	ldr	r1, [pc, #748]	; (8002f34 <main+0x338>)
 8002c48:	48bb      	ldr	r0, [pc, #748]	; (8002f38 <main+0x33c>)
 8002c4a:	f00c fdfd 	bl	800f848 <HAL_UART_Receive_DMA>

	//Motor PWM
	HAL_TIM_Base_Start_IT(&htim3);
 8002c4e:	48bb      	ldr	r0, [pc, #748]	; (8002f3c <main+0x340>)
 8002c50:	f00b faa6 	bl	800e1a0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002c54:	2100      	movs	r1, #0
 8002c56:	48b9      	ldr	r0, [pc, #740]	; (8002f3c <main+0x340>)
 8002c58:	f00b fb74 	bl	800e344 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8002c5c:	2104      	movs	r1, #4
 8002c5e:	48b7      	ldr	r0, [pc, #732]	; (8002f3c <main+0x340>)
 8002c60:	f00b fb70 	bl	800e344 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8002c64:	2108      	movs	r1, #8
 8002c66:	48b5      	ldr	r0, [pc, #724]	; (8002f3c <main+0x340>)
 8002c68:	f00b fb6c 	bl	800e344 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_4);
 8002c6c:	210c      	movs	r1, #12
 8002c6e:	48b3      	ldr	r0, [pc, #716]	; (8002f3c <main+0x340>)
 8002c70:	f00b fb68 	bl	800e344 <HAL_TIM_PWM_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(2000);
 8002c74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c78:	f002 fa7c 	bl	8005174 <HAL_Delay>

	//Initialize MPU9250
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c7c:	e009      	b.n	8002c92 <main+0x96>
	{
		if(tim1_20ms_flag == 1)
 8002c7e:	4bb0      	ldr	r3, [pc, #704]	; (8002f40 <main+0x344>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <main+0x96>
		{
			tim1_20ms_flag = 0;
 8002c86:	4bae      	ldr	r3, [pc, #696]	; (8002f40 <main+0x344>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
			printf("MPU9250 Initialing \n");
 8002c8c:	48ad      	ldr	r0, [pc, #692]	; (8002f44 <main+0x348>)
 8002c8e:	f00f fb5f 	bl	8012350 <puts>
	while(MPU9250_Init(&hi2c1, 3, 3, 3, 3) == 0)
 8002c92:	2303      	movs	r3, #3
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2303      	movs	r3, #3
 8002c98:	2203      	movs	r2, #3
 8002c9a:	2103      	movs	r1, #3
 8002c9c:	48aa      	ldr	r0, [pc, #680]	; (8002f48 <main+0x34c>)
 8002c9e:	f7fd fdf7 	bl	8000890 <MPU9250_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ea      	beq.n	8002c7e <main+0x82>
		}
	}
	MPU9250_Bypass(&hi2c1);
 8002ca8:	48a7      	ldr	r0, [pc, #668]	; (8002f48 <main+0x34c>)
 8002caa:	f7fd fed9 	bl	8000a60 <MPU9250_Bypass>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002cae:	e009      	b.n	8002cc4 <main+0xc8>
	{
		if(tim1_20ms_flag == 1)
 8002cb0:	4ba3      	ldr	r3, [pc, #652]	; (8002f40 <main+0x344>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <main+0xc8>
		{
			tim1_20ms_flag = 0;
 8002cb8:	4ba1      	ldr	r3, [pc, #644]	; (8002f40 <main+0x344>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
			printf("AK8963 Initialing \n");
 8002cbe:	48a3      	ldr	r0, [pc, #652]	; (8002f4c <main+0x350>)
 8002cc0:	f00f fb46 	bl	8012350 <puts>
	while(MPU9250_AK8963_Setup(&hi2c1, &MPU9250) == 0)
 8002cc4:	49a2      	ldr	r1, [pc, #648]	; (8002f50 <main+0x354>)
 8002cc6:	48a0      	ldr	r0, [pc, #640]	; (8002f48 <main+0x34c>)
 8002cc8:	f7fd ff4a 	bl	8000b60 <MPU9250_AK8963_Setup>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0ee      	beq.n	8002cb0 <main+0xb4>
		}
	}
	MPU9250_Master(&hi2c1);
 8002cd2:	489d      	ldr	r0, [pc, #628]	; (8002f48 <main+0x34c>)
 8002cd4:	f7fd fef2 	bl	8000abc <MPU9250_Master>
	MPU9250_Slave0_Enable(&hi2c1);
 8002cd8:	489b      	ldr	r0, [pc, #620]	; (8002f48 <main+0x34c>)
 8002cda:	f7fd ff97 	bl	8000c0c <MPU9250_Slave0_Enable>

	//Initialize MS5611

	//EEPROM
	W25qxx_Init();
 8002cde:	f001 fe87 	bl	80049f0 <W25qxx_Init>
	W25qxx_ReadSector(Mag_Calib, 0, 0, 12);
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	489a      	ldr	r0, [pc, #616]	; (8002f54 <main+0x358>)
 8002cea:	f002 f925 	bl	8004f38 <W25qxx_ReadSector>
	MPU9250.Mx_Offset = *(float*)&Mag_Calib[0];
 8002cee:	4b99      	ldr	r3, [pc, #612]	; (8002f54 <main+0x358>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a97      	ldr	r2, [pc, #604]	; (8002f50 <main+0x354>)
 8002cf4:	6653      	str	r3, [r2, #100]	; 0x64
	MPU9250.My_Offset = *(float*)&Mag_Calib[4];
 8002cf6:	4b98      	ldr	r3, [pc, #608]	; (8002f58 <main+0x35c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a95      	ldr	r2, [pc, #596]	; (8002f50 <main+0x354>)
 8002cfc:	6693      	str	r3, [r2, #104]	; 0x68
	MPU9250.Mz_Offset = *(float*)&Mag_Calib[8];
 8002cfe:	4b97      	ldr	r3, [pc, #604]	; (8002f5c <main+0x360>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a93      	ldr	r2, [pc, #588]	; (8002f50 <main+0x354>)
 8002d04:	66d3      	str	r3, [r2, #108]	; 0x6c

	//Receiver Check
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002d06:	e007      	b.n	8002d18 <main+0x11c>
	{
		HAL_Delay(500);
 8002d08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d0c:	f002 fa32 	bl	8005174 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002d10:	2102      	movs	r1, #2
 8002d12:	4893      	ldr	r0, [pc, #588]	; (8002f60 <main+0x364>)
 8002d14:	f005 fb8b 	bl	800842e <HAL_GPIO_TogglePin>
	while(Is_iBus_Received(ibus_rx_cplt_flag) == 0)
 8002d18:	4b92      	ldr	r3, [pc, #584]	; (8002f64 <main+0x368>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 fbc3 	bl	80044a8 <Is_iBus_Received>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0ef      	beq.n	8002d08 <main+0x10c>
	}
	while(Is_Throttle_Min() == 0)
 8002d28:	e00c      	b.n	8002d44 <main+0x148>
	{
		HAL_Delay(500);
 8002d2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d2e:	f002 fa21 	bl	8005174 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002d32:	2102      	movs	r1, #2
 8002d34:	488a      	ldr	r0, [pc, #552]	; (8002f60 <main+0x364>)
 8002d36:	f005 fb7a 	bl	800842e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_GPIO_Port);
 8002d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d3e:	488a      	ldr	r0, [pc, #552]	; (8002f68 <main+0x36c>)
 8002d40:	f005 fb75 	bl	800842e <HAL_GPIO_TogglePin>
	while(Is_Throttle_Min() == 0)
 8002d44:	f001 fbea 	bl	800451c <Is_Throttle_Min>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0ed      	beq.n	8002d2a <main+0x12e>
	}

	//ESC Calibration
	if(iBus.SwB == 2000 && iBus.SwC == 2000)
 8002d4e:	4b87      	ldr	r3, [pc, #540]	; (8002f6c <main+0x370>)
 8002d50:	895b      	ldrh	r3, [r3, #10]
 8002d52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d56:	d111      	bne.n	8002d7c <main+0x180>
 8002d58:	4b84      	ldr	r3, [pc, #528]	; (8002f6c <main+0x370>)
 8002d5a:	899b      	ldrh	r3, [r3, #12]
 8002d5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002d60:	d10c      	bne.n	8002d7c <main+0x180>
	{
		ESC_Calibration();
 8002d62:	f000 fe3d 	bl	80039e0 <ESC_Calibration>
		while(iBus.SwB != 1000) Is_iBus_Received(ibus_rx_cplt_flag);
 8002d66:	e004      	b.n	8002d72 <main+0x176>
 8002d68:	4b7e      	ldr	r3, [pc, #504]	; (8002f64 <main+0x368>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f001 fb9b 	bl	80044a8 <Is_iBus_Received>
 8002d72:	4b7e      	ldr	r3, [pc, #504]	; (8002f6c <main+0x370>)
 8002d74:	895b      	ldrh	r3, [r3, #10]
 8002d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d7a:	d1f5      	bne.n	8002d68 <main+0x16c>
	}

	while (1)
	{
		Receive_Command();
 8002d7c:	f001 fb1c 	bl	80043b8 <Receive_Command>
		Compass_Calibration(mag_calibration_enable);
 8002d80:	4b7b      	ldr	r3, [pc, #492]	; (8002f70 <main+0x374>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fd3d 	bl	8003804 <Compass_Calibration>

		Is_iBus_Received(ibus_rx_cplt_flag);
 8002d8a:	4b76      	ldr	r3, [pc, #472]	; (8002f64 <main+0x368>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f001 fb8a 	bl	80044a8 <Is_iBus_Received>

		//Read MPU9250 + Motor PID
		if(tim1_2ms_flag == 1)
 8002d94:	4b77      	ldr	r3, [pc, #476]	; (8002f74 <main+0x378>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d16b      	bne.n	8002e74 <main+0x278>
		{
			tim1_2ms_flag = 0;
 8002d9c:	4b75      	ldr	r3, [pc, #468]	; (8002f74 <main+0x378>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
			MPU9250_Read_All(&hi2c1);
 8002da2:	4869      	ldr	r0, [pc, #420]	; (8002f48 <main+0x34c>)
 8002da4:	f7fd ff72 	bl	8000c8c <MPU9250_Read_All>
			MPU9250_Parsing(&MPU9250);
 8002da8:	4869      	ldr	r0, [pc, #420]	; (8002f50 <main+0x354>)
 8002daa:	f7fd ff85 	bl	8000cb8 <MPU9250_Parsing>
			MadgwickAHRSupdate(MPU9250.Gx_Rad, MPU9250.Gy_Rad, MPU9250.Gz_Rad, MPU9250.Ax, MPU9250.Ay, MPU9250.Az, MPU9250.Mx, MPU9250.My, MPU9250.Mz);
 8002dae:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <main+0x354>)
 8002db0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002db4:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <main+0x354>)
 8002db6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <main+0x354>)
 8002dbc:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002dc0:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <main+0x354>)
 8002dc2:	ed93 6a02 	vldr	s12, [r3, #8]
 8002dc6:	4b62      	ldr	r3, [pc, #392]	; (8002f50 <main+0x354>)
 8002dc8:	edd3 5a03 	vldr	s11, [r3, #12]
 8002dcc:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <main+0x354>)
 8002dce:	ed93 5a04 	vldr	s10, [r3, #16]
 8002dd2:	4b5f      	ldr	r3, [pc, #380]	; (8002f50 <main+0x354>)
 8002dd4:	edd3 4a1c 	vldr	s9, [r3, #112]	; 0x70
 8002dd8:	4b5d      	ldr	r3, [pc, #372]	; (8002f50 <main+0x354>)
 8002dda:	edd3 3a1d 	vldr	s7, [r3, #116]	; 0x74
 8002dde:	4b5c      	ldr	r3, [pc, #368]	; (8002f50 <main+0x354>)
 8002de0:	ed93 4a1e 	vldr	s8, [r3, #120]	; 0x78
 8002de4:	eeb0 3a64 	vmov.f32	s6, s9
 8002de8:	eef0 2a45 	vmov.f32	s5, s10
 8002dec:	eeb0 2a65 	vmov.f32	s4, s11
 8002df0:	eef0 1a46 	vmov.f32	s3, s12
 8002df4:	eeb0 1a66 	vmov.f32	s2, s13
 8002df8:	eef0 0a47 	vmov.f32	s1, s14
 8002dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002e00:	f7fe fa70 	bl	80012e4 <MadgwickAHRSupdate>

			TIM3->CCR1 = 10000 + (iBus.LV-1000)*10;
 8002e04:	4b59      	ldr	r3, [pc, #356]	; (8002f6c <main+0x370>)
 8002e06:	889b      	ldrh	r3, [r3, #4]
 8002e08:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	461a      	mov	r2, r3
 8002e16:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4a56      	ldr	r2, [pc, #344]	; (8002f78 <main+0x37c>)
 8002e1e:	6353      	str	r3, [r2, #52]	; 0x34
			TIM3->CCR2 = 10000 + (iBus.LV-1000)*10;
 8002e20:	4b52      	ldr	r3, [pc, #328]	; (8002f6c <main+0x370>)
 8002e22:	889b      	ldrh	r3, [r3, #4]
 8002e24:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	461a      	mov	r2, r3
 8002e32:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e36:	4413      	add	r3, r2
 8002e38:	4a4f      	ldr	r2, [pc, #316]	; (8002f78 <main+0x37c>)
 8002e3a:	6393      	str	r3, [r2, #56]	; 0x38
			TIM3->CCR3 = 10000 + (iBus.LV-1000)*10;
 8002e3c:	4b4b      	ldr	r3, [pc, #300]	; (8002f6c <main+0x370>)
 8002e3e:	889b      	ldrh	r3, [r3, #4]
 8002e40:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e52:	4413      	add	r3, r2
 8002e54:	4a48      	ldr	r2, [pc, #288]	; (8002f78 <main+0x37c>)
 8002e56:	63d3      	str	r3, [r2, #60]	; 0x3c
			TIM3->CCR4 = 10000 + (iBus.LV-1000)*10;
 8002e58:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <main+0x370>)
 8002e5a:	889b      	ldrh	r3, [r3, #4]
 8002e5c:	f5a3 727a 	sub.w	r2, r3, #1000	; 0x3e8
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002e6e:	4413      	add	r3, r2
 8002e70:	4a41      	ldr	r2, [pc, #260]	; (8002f78 <main+0x37c>)
 8002e72:	6413      	str	r3, [r2, #64]	; 0x40
		}

		//Print According to the Input
		if(tim1_20ms_flag == 1)
 8002e74:	4b32      	ldr	r3, [pc, #200]	; (8002f40 <main+0x344>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	f040 80ff 	bne.w	800307c <main+0x480>
		{
			tim1_20ms_flag = 0;
 8002e7e:	4b30      	ldr	r3, [pc, #192]	; (8002f40 <main+0x344>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]

			switch(print_mode)
 8002e84:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <main+0x380>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	2b0a      	cmp	r3, #10
 8002e8c:	f200 80f8 	bhi.w	8003080 <main+0x484>
 8002e90:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <main+0x29c>)
 8002e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e96:	bf00      	nop
 8002e98:	08002ec5 	.word	0x08002ec5
 8002e9c:	08003081 	.word	0x08003081
 8002ea0:	08002ef7 	.word	0x08002ef7
 8002ea4:	08002f91 	.word	0x08002f91
 8002ea8:	08002fc3 	.word	0x08002fc3
 8002eac:	08002ff5 	.word	0x08002ff5
 8002eb0:	08003081 	.word	0x08003081
 8002eb4:	08003081 	.word	0x08003081
 8002eb8:	08003081 	.word	0x08003081
 8002ebc:	08003081 	.word	0x08003081
 8002ec0:	08003027 	.word	0x08003027
			{
			case 1: printf("%.2f \t %.2f \t %.2f \t \n", System_Roll, System_Pitch, System_Yaw); break; //Roll, Pitch, Yaw
 8002ec4:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <main+0x384>)
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
 8002eca:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002ece:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <main+0x388>)
 8002ed0:	edd3 7a00 	vldr	s15, [r3]
 8002ed4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ed8:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <main+0x38c>)
 8002eda:	edd3 6a00 	vldr	s13, [r3]
 8002ede:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002ee2:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002ee6:	ed8d 7b00 	vstr	d7, [sp]
 8002eea:	ec53 2b15 	vmov	r2, r3, d5
 8002eee:	4827      	ldr	r0, [pc, #156]	; (8002f8c <main+0x390>)
 8002ef0:	f00f f9a8 	bl	8012244 <iprintf>
 8002ef4:	e0c5      	b.n	8003082 <main+0x486>
			case 2: /* printf("%.2f \t %.2f \t \m", Alt, Alt_Filt); */ break; //Alt Raw, Alt Filt
			case 3: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Gx, MPU9250.Gy, MPU9250.Gz); break; //Gyro
 8002ef6:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <main+0x354>)
 8002ef8:	edd3 7a07 	vldr	s15, [r3, #28]
 8002efc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <main+0x354>)
 8002f02:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <main+0x354>)
 8002f0c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002f10:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002f14:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002f18:	ed8d 7b00 	vstr	d7, [sp]
 8002f1c:	ec53 2b15 	vmov	r2, r3, d5
 8002f20:	481a      	ldr	r0, [pc, #104]	; (8002f8c <main+0x390>)
 8002f22:	f00f f98f 	bl	8012244 <iprintf>
 8002f26:	e0ac      	b.n	8003082 <main+0x486>
 8002f28:	240007c8 	.word	0x240007c8
 8002f2c:	24000231 	.word	0x24000231
 8002f30:	2400059c 	.word	0x2400059c
 8002f34:	24000233 	.word	0x24000233
 8002f38:	2400072c 	.word	0x2400072c
 8002f3c:	240004d8 	.word	0x240004d8
 8002f40:	2400022f 	.word	0x2400022f
 8002f44:	08014cc0 	.word	0x08014cc0
 8002f48:	2400048c 	.word	0x2400048c
 8002f4c:	08014cd4 	.word	0x08014cd4
 8002f50:	2400026c 	.word	0x2400026c
 8002f54:	240007bc 	.word	0x240007bc
 8002f58:	240007c0 	.word	0x240007c0
 8002f5c:	240007c4 	.word	0x240007c4
 8002f60:	58020000 	.word	0x58020000
 8002f64:	24000234 	.word	0x24000234
 8002f68:	58021000 	.word	0x58021000
 8002f6c:	24000250 	.word	0x24000250
 8002f70:	2400022d 	.word	0x2400022d
 8002f74:	2400022e 	.word	0x2400022e
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	2400022c 	.word	0x2400022c
 8002f80:	24000304 	.word	0x24000304
 8002f84:	24000308 	.word	0x24000308
 8002f88:	24000300 	.word	0x24000300
 8002f8c:	08014ce8 	.word	0x08014ce8
			case 4: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Ax, MPU9250.Ay, MPU9250.Az); break; //Accel
 8002f90:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <main+0x488>)
 8002f92:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f96:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002f9a:	4b3a      	ldr	r3, [pc, #232]	; (8003084 <main+0x488>)
 8002f9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fa0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fa4:	4b37      	ldr	r3, [pc, #220]	; (8003084 <main+0x488>)
 8002fa6:	edd3 6a04 	vldr	s13, [r3, #16]
 8002faa:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002fae:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002fb2:	ed8d 7b00 	vstr	d7, [sp]
 8002fb6:	ec53 2b15 	vmov	r2, r3, d5
 8002fba:	4833      	ldr	r0, [pc, #204]	; (8003088 <main+0x48c>)
 8002fbc:	f00f f942 	bl	8012244 <iprintf>
 8002fc0:	e05f      	b.n	8003082 <main+0x486>
			case 5: printf("%.2f \t %.2f \t %.2f \t \n", MPU9250.Mx, MPU9250.My, MPU9250.Mz); break; //Mag
 8002fc2:	4b30      	ldr	r3, [pc, #192]	; (8003084 <main+0x488>)
 8002fc4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002fc8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002fcc:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <main+0x488>)
 8002fce:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002fd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002fd6:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <main+0x488>)
 8002fd8:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 8002fdc:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8002fe0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8002fe4:	ed8d 7b00 	vstr	d7, [sp]
 8002fe8:	ec53 2b15 	vmov	r2, r3, d5
 8002fec:	4826      	ldr	r0, [pc, #152]	; (8003088 <main+0x48c>)
 8002fee:	f00f f929 	bl	8012244 <iprintf>
 8002ff2:	e046      	b.n	8003082 <main+0x486>
			case 6: printf("%f \t %f \t %f \t \n", MPU9250.Mx_Offset, MPU9250.My_Offset, MPU9250.Mz_Offset); break; //Mag_Offset
 8002ff4:	4b23      	ldr	r3, [pc, #140]	; (8003084 <main+0x488>)
 8002ff6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8002ffa:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <main+0x488>)
 8003000:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003004:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003008:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <main+0x488>)
 800300a:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800300e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8003012:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003016:	ed8d 7b00 	vstr	d7, [sp]
 800301a:	ec53 2b15 	vmov	r2, r3, d5
 800301e:	481b      	ldr	r0, [pc, #108]	; (800308c <main+0x490>)
 8003020:	f00f f910 	bl	8012244 <iprintf>
 8003024:	e02d      	b.n	8003082 <main+0x486>
			case 11: printf("%d %d %d %d %d %d %d %d %d %d \n", iBus.RH, iBus.RV, iBus.LV, iBus.LH, iBus.SwA, iBus.SwB, iBus.VrA, iBus.VrB, iBus.SwC, iBus.SwD); break; //Mag_Offset
 8003026:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <main+0x494>)
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	469c      	mov	ip, r3
 800302c:	4b18      	ldr	r3, [pc, #96]	; (8003090 <main+0x494>)
 800302e:	885b      	ldrh	r3, [r3, #2]
 8003030:	469e      	mov	lr, r3
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <main+0x494>)
 8003034:	889b      	ldrh	r3, [r3, #4]
 8003036:	4698      	mov	r8, r3
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <main+0x494>)
 800303a:	88db      	ldrh	r3, [r3, #6]
 800303c:	461a      	mov	r2, r3
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <main+0x494>)
 8003040:	891b      	ldrh	r3, [r3, #8]
 8003042:	4619      	mov	r1, r3
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <main+0x494>)
 8003046:	895b      	ldrh	r3, [r3, #10]
 8003048:	4618      	mov	r0, r3
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <main+0x494>)
 800304c:	8a1b      	ldrh	r3, [r3, #16]
 800304e:	461c      	mov	r4, r3
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <main+0x494>)
 8003052:	8a5b      	ldrh	r3, [r3, #18]
 8003054:	461d      	mov	r5, r3
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <main+0x494>)
 8003058:	899b      	ldrh	r3, [r3, #12]
 800305a:	461e      	mov	r6, r3
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <main+0x494>)
 800305e:	89db      	ldrh	r3, [r3, #14]
 8003060:	9306      	str	r3, [sp, #24]
 8003062:	9605      	str	r6, [sp, #20]
 8003064:	9504      	str	r5, [sp, #16]
 8003066:	9403      	str	r4, [sp, #12]
 8003068:	9002      	str	r0, [sp, #8]
 800306a:	9101      	str	r1, [sp, #4]
 800306c:	9200      	str	r2, [sp, #0]
 800306e:	4643      	mov	r3, r8
 8003070:	4672      	mov	r2, lr
 8003072:	4661      	mov	r1, ip
 8003074:	4807      	ldr	r0, [pc, #28]	; (8003094 <main+0x498>)
 8003076:	f00f f8e5 	bl	8012244 <iprintf>
 800307a:	e002      	b.n	8003082 <main+0x486>
			default: break;
			}
		}
 800307c:	bf00      	nop
 800307e:	e67d      	b.n	8002d7c <main+0x180>
			default: break;
 8003080:	bf00      	nop
	{
 8003082:	e67b      	b.n	8002d7c <main+0x180>
 8003084:	2400026c 	.word	0x2400026c
 8003088:	08014ce8 	.word	0x08014ce8
 800308c:	08014d00 	.word	0x08014d00
 8003090:	24000250 	.word	0x24000250
 8003094:	08014d14 	.word	0x08014d14

08003098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b09c      	sub	sp, #112	; 0x70
 800309c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800309e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a2:	224c      	movs	r2, #76	; 0x4c
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f00e fc82 	bl	80119b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	2220      	movs	r2, #32
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f00e fc7c 	bl	80119b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80030b8:	2002      	movs	r0, #2
 80030ba:	f007 fc27 	bl	800a90c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80030be:	2300      	movs	r3, #0
 80030c0:	603b      	str	r3, [r7, #0]
 80030c2:	4b32      	ldr	r3, [pc, #200]	; (800318c <SystemClock_Config+0xf4>)
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	4a31      	ldr	r2, [pc, #196]	; (800318c <SystemClock_Config+0xf4>)
 80030c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030cc:	6193      	str	r3, [r2, #24]
 80030ce:	4b2f      	ldr	r3, [pc, #188]	; (800318c <SystemClock_Config+0xf4>)
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <SystemClock_Config+0xf8>)
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	4a2c      	ldr	r2, [pc, #176]	; (8003190 <SystemClock_Config+0xf8>)
 80030de:	f043 0301 	orr.w	r3, r3, #1
 80030e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80030e4:	4b2a      	ldr	r3, [pc, #168]	; (8003190 <SystemClock_Config+0xf8>)
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80030f0:	bf00      	nop
 80030f2:	4b26      	ldr	r3, [pc, #152]	; (800318c <SystemClock_Config+0xf4>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030fe:	d1f8      	bne.n	80030f2 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003100:	2303      	movs	r3, #3
 8003102:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800310a:	2301      	movs	r3, #1
 800310c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800310e:	2340      	movs	r3, #64	; 0x40
 8003110:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003112:	2302      	movs	r3, #2
 8003114:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003116:	2302      	movs	r3, #2
 8003118:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800311a:	2305      	movs	r3, #5
 800311c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 800311e:	23c0      	movs	r3, #192	; 0xc0
 8003120:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003122:	2302      	movs	r3, #2
 8003124:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003126:	2302      	movs	r3, #2
 8003128:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800312a:	2302      	movs	r3, #2
 800312c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800312e:	2308      	movs	r3, #8
 8003130:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003132:	2300      	movs	r3, #0
 8003134:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800313a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800313e:	4618      	mov	r0, r3
 8003140:	f007 fc1e 	bl	800a980 <HAL_RCC_OscConfig>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800314a:	f000 fc77 	bl	8003a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800314e:	233f      	movs	r3, #63	; 0x3f
 8003150:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003152:	2303      	movs	r3, #3
 8003154:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800315a:	2308      	movs	r3, #8
 800315c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800315e:	2340      	movs	r3, #64	; 0x40
 8003160:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003162:	2340      	movs	r3, #64	; 0x40
 8003164:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800316a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800316c:	2340      	movs	r3, #64	; 0x40
 800316e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	2104      	movs	r1, #4
 8003174:	4618      	mov	r0, r3
 8003176:	f008 f813 	bl	800b1a0 <HAL_RCC_ClockConfig>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8003180:	f000 fc5c 	bl	8003a3c <Error_Handler>
  }
}
 8003184:	bf00      	nop
 8003186:	3770      	adds	r7, #112	; 0x70
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	58024800 	.word	0x58024800
 8003190:	58000400 	.word	0x58000400

08003194 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b0b0      	sub	sp, #192	; 0xc0
 8003198:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800319a:	1d3b      	adds	r3, r7, #4
 800319c:	22bc      	movs	r2, #188	; 0xbc
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f00e fc05 	bl	80119b0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80031a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80031aa:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80031ac:	2300      	movs	r3, #0
 80031ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031b0:	1d3b      	adds	r3, r7, #4
 80031b2:	4618      	mov	r0, r3
 80031b4:	f008 fb80 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 80031be:	f000 fc3d 	bl	8003a3c <Error_Handler>
  }
}
 80031c2:	bf00      	nop
 80031c4:	37c0      	adds	r7, #192	; 0xc0
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031d0:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <MX_I2C1_Init+0x74>)
 80031d2:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <MX_I2C1_Init+0x78>)
 80031d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B03FDB;
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <MX_I2C1_Init+0x74>)
 80031d8:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <MX_I2C1_Init+0x7c>)
 80031da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80031dc:	4b18      	ldr	r3, [pc, #96]	; (8003240 <MX_I2C1_Init+0x74>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031e2:	4b17      	ldr	r3, [pc, #92]	; (8003240 <MX_I2C1_Init+0x74>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031e8:	4b15      	ldr	r3, [pc, #84]	; (8003240 <MX_I2C1_Init+0x74>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <MX_I2C1_Init+0x74>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <MX_I2C1_Init+0x74>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <MX_I2C1_Init+0x74>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <MX_I2C1_Init+0x74>)
 8003202:	2200      	movs	r2, #0
 8003204:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003206:	480e      	ldr	r0, [pc, #56]	; (8003240 <MX_I2C1_Init+0x74>)
 8003208:	f005 f92c 	bl	8008464 <HAL_I2C_Init>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003212:	f000 fc13 	bl	8003a3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003216:	2100      	movs	r1, #0
 8003218:	4809      	ldr	r0, [pc, #36]	; (8003240 <MX_I2C1_Init+0x74>)
 800321a:	f007 fadf 	bl	800a7dc <HAL_I2CEx_ConfigAnalogFilter>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003224:	f000 fc0a 	bl	8003a3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003228:	2100      	movs	r1, #0
 800322a:	4805      	ldr	r0, [pc, #20]	; (8003240 <MX_I2C1_Init+0x74>)
 800322c:	f007 fb21 	bl	800a872 <HAL_I2CEx_ConfigDigitalFilter>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003236:	f000 fc01 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	2400048c 	.word	0x2400048c
 8003244:	40005400 	.word	0x40005400
 8003248:	00b03fdb 	.word	0x00b03fdb

0800324c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <MX_SPI1_Init+0xa4>)
 8003252:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <MX_SPI1_Init+0xa8>)
 8003254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003256:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <MX_SPI1_Init+0xa4>)
 8003258:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800325c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <MX_SPI1_Init+0xa4>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003264:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <MX_SPI1_Init+0xa4>)
 8003266:	2207      	movs	r2, #7
 8003268:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800326a:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <MX_SPI1_Init+0xa4>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003270:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <MX_SPI1_Init+0xa4>)
 8003272:	2200      	movs	r2, #0
 8003274:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003276:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <MX_SPI1_Init+0xa4>)
 8003278:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800327c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800327e:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <MX_SPI1_Init+0xa4>)
 8003280:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003284:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003286:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <MX_SPI1_Init+0xa4>)
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <MX_SPI1_Init+0xa4>)
 800328e:	2200      	movs	r2, #0
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003292:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <MX_SPI1_Init+0xa4>)
 8003294:	2200      	movs	r2, #0
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <MX_SPI1_Init+0xa4>)
 800329a:	2200      	movs	r2, #0
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <MX_SPI1_Init+0xa4>)
 80032a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80032a6:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <MX_SPI1_Init+0xa4>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <MX_SPI1_Init+0xa4>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <MX_SPI1_Init+0xa4>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80032b8:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <MX_SPI1_Init+0xa4>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80032be:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <MX_SPI1_Init+0xa4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <MX_SPI1_Init+0xa4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <MX_SPI1_Init+0xa4>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <MX_SPI1_Init+0xa4>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <MX_SPI1_Init+0xa4>)
 80032d8:	2200      	movs	r2, #0
 80032da:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032dc:	4804      	ldr	r0, [pc, #16]	; (80032f0 <MX_SPI1_Init+0xa4>)
 80032de:	f009 fe4d 	bl	800cf7c <HAL_SPI_Init>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80032e8:	f000 fba8 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	240006a4 	.word	0x240006a4
 80032f4:	40013000 	.word	0x40013000

080032f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	; 0x38
 80032fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800330c:	f107 031c 	add.w	r3, r7, #28
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003318:	463b      	mov	r3, r7
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	611a      	str	r2, [r3, #16]
 8003326:	615a      	str	r2, [r3, #20]
 8003328:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800332a:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <MX_TIM3_Init+0x128>)
 800332c:	4a3d      	ldr	r2, [pc, #244]	; (8003424 <MX_TIM3_Init+0x12c>)
 800332e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 23;
 8003330:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <MX_TIM3_Init+0x128>)
 8003332:	2217      	movs	r2, #23
 8003334:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003336:	4b3a      	ldr	r3, [pc, #232]	; (8003420 <MX_TIM3_Init+0x128>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800333c:	4b38      	ldr	r3, [pc, #224]	; (8003420 <MX_TIM3_Init+0x128>)
 800333e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003342:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003344:	4b36      	ldr	r3, [pc, #216]	; (8003420 <MX_TIM3_Init+0x128>)
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334a:	4b35      	ldr	r3, [pc, #212]	; (8003420 <MX_TIM3_Init+0x128>)
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003350:	4833      	ldr	r0, [pc, #204]	; (8003420 <MX_TIM3_Init+0x128>)
 8003352:	f00a fece 	bl	800e0f2 <HAL_TIM_Base_Init>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800335c:	f000 fb6e 	bl	8003a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336a:	4619      	mov	r1, r3
 800336c:	482c      	ldr	r0, [pc, #176]	; (8003420 <MX_TIM3_Init+0x128>)
 800336e:	f00b fb67 	bl	800ea40 <HAL_TIM_ConfigClockSource>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003378:	f000 fb60 	bl	8003a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800337c:	4828      	ldr	r0, [pc, #160]	; (8003420 <MX_TIM3_Init+0x128>)
 800337e:	f00a ff7f 	bl	800e280 <HAL_TIM_PWM_Init>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003388:	f000 fb58 	bl	8003a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003394:	f107 031c 	add.w	r3, r7, #28
 8003398:	4619      	mov	r1, r3
 800339a:	4821      	ldr	r0, [pc, #132]	; (8003420 <MX_TIM3_Init+0x128>)
 800339c:	f00c f898 	bl	800f4d0 <HAL_TIMEx_MasterConfigSynchronization>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80033a6:	f000 fb49 	bl	8003a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033aa:	2360      	movs	r3, #96	; 0x60
 80033ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033ba:	463b      	mov	r3, r7
 80033bc:	2200      	movs	r2, #0
 80033be:	4619      	mov	r1, r3
 80033c0:	4817      	ldr	r0, [pc, #92]	; (8003420 <MX_TIM3_Init+0x128>)
 80033c2:	f00b fa2d 	bl	800e820 <HAL_TIM_PWM_ConfigChannel>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80033cc:	f000 fb36 	bl	8003a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033d0:	463b      	mov	r3, r7
 80033d2:	2204      	movs	r2, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4812      	ldr	r0, [pc, #72]	; (8003420 <MX_TIM3_Init+0x128>)
 80033d8:	f00b fa22 	bl	800e820 <HAL_TIM_PWM_ConfigChannel>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80033e2:	f000 fb2b 	bl	8003a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033e6:	463b      	mov	r3, r7
 80033e8:	2208      	movs	r2, #8
 80033ea:	4619      	mov	r1, r3
 80033ec:	480c      	ldr	r0, [pc, #48]	; (8003420 <MX_TIM3_Init+0x128>)
 80033ee:	f00b fa17 	bl	800e820 <HAL_TIM_PWM_ConfigChannel>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80033f8:	f000 fb20 	bl	8003a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033fc:	463b      	mov	r3, r7
 80033fe:	220c      	movs	r2, #12
 8003400:	4619      	mov	r1, r3
 8003402:	4807      	ldr	r0, [pc, #28]	; (8003420 <MX_TIM3_Init+0x128>)
 8003404:	f00b fa0c 	bl	800e820 <HAL_TIM_PWM_ConfigChannel>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800340e:	f000 fb15 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003412:	4803      	ldr	r0, [pc, #12]	; (8003420 <MX_TIM3_Init+0x128>)
 8003414:	f000 fc76 	bl	8003d04 <HAL_TIM_MspPostInit>

}
 8003418:	bf00      	nop
 800341a:	3738      	adds	r7, #56	; 0x38
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	240004d8 	.word	0x240004d8
 8003424:	40000400 	.word	0x40000400

08003428 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003438:	4b14      	ldr	r3, [pc, #80]	; (800348c <MX_TIM7_Init+0x64>)
 800343a:	4a15      	ldr	r2, [pc, #84]	; (8003490 <MX_TIM7_Init+0x68>)
 800343c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 39999;
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <MX_TIM7_Init+0x64>)
 8003440:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003444:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <MX_TIM7_Init+0x64>)
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5;
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <MX_TIM7_Init+0x64>)
 800344e:	2205      	movs	r2, #5
 8003450:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <MX_TIM7_Init+0x64>)
 8003454:	2280      	movs	r2, #128	; 0x80
 8003456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003458:	480c      	ldr	r0, [pc, #48]	; (800348c <MX_TIM7_Init+0x64>)
 800345a:	f00a fe4a 	bl	800e0f2 <HAL_TIM_Base_Init>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003464:	f000 faea 	bl	8003a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003468:	2300      	movs	r3, #0
 800346a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003470:	1d3b      	adds	r3, r7, #4
 8003472:	4619      	mov	r1, r3
 8003474:	4805      	ldr	r0, [pc, #20]	; (800348c <MX_TIM7_Init+0x64>)
 8003476:	f00c f82b 	bl	800f4d0 <HAL_TIMEx_MasterConfigSynchronization>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003480:	f000 fadc 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	240007c8 	.word	0x240007c8
 8003490:	40001400 	.word	0x40001400

08003494 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003498:	4b22      	ldr	r3, [pc, #136]	; (8003524 <MX_USART1_UART_Init+0x90>)
 800349a:	4a23      	ldr	r2, [pc, #140]	; (8003528 <MX_USART1_UART_Init+0x94>)
 800349c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800349e:	4b21      	ldr	r3, [pc, #132]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034a6:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034ac:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034b2:	4b1c      	ldr	r3, [pc, #112]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034b8:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034ba:	220c      	movs	r2, #12
 80034bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034be:	4b19      	ldr	r3, [pc, #100]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034c4:	4b17      	ldr	r3, [pc, #92]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034ca:	4b16      	ldr	r3, [pc, #88]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034d0:	4b14      	ldr	r3, [pc, #80]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034d8:	2200      	movs	r2, #0
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034dc:	4811      	ldr	r0, [pc, #68]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034de:	f00c f89d 	bl	800f61c <HAL_UART_Init>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80034e8:	f000 faa8 	bl	8003a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034ec:	2100      	movs	r1, #0
 80034ee:	480d      	ldr	r0, [pc, #52]	; (8003524 <MX_USART1_UART_Init+0x90>)
 80034f0:	f00e f969 	bl	80117c6 <HAL_UARTEx_SetTxFifoThreshold>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80034fa:	f000 fa9f 	bl	8003a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034fe:	2100      	movs	r1, #0
 8003500:	4808      	ldr	r0, [pc, #32]	; (8003524 <MX_USART1_UART_Init+0x90>)
 8003502:	f00e f99e 	bl	8011842 <HAL_UARTEx_SetRxFifoThreshold>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800350c:	f000 fa96 	bl	8003a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003510:	4804      	ldr	r0, [pc, #16]	; (8003524 <MX_USART1_UART_Init+0x90>)
 8003512:	f00e f91f 	bl	8011754 <HAL_UARTEx_DisableFifoMode>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800351c:	f000 fa8e 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}
 8003524:	2400059c 	.word	0x2400059c
 8003528:	40011000 	.word	0x40011000

0800352c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <MX_USART2_UART_Init+0x90>)
 8003532:	4a23      	ldr	r2, [pc, #140]	; (80035c0 <MX_USART2_UART_Init+0x94>)
 8003534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <MX_USART2_UART_Init+0x90>)
 8003538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800353c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800353e:	4b1f      	ldr	r3, [pc, #124]	; (80035bc <MX_USART2_UART_Init+0x90>)
 8003540:	2200      	movs	r2, #0
 8003542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <MX_USART2_UART_Init+0x90>)
 8003546:	2200      	movs	r2, #0
 8003548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800354a:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <MX_USART2_UART_Init+0x90>)
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003550:	4b1a      	ldr	r3, [pc, #104]	; (80035bc <MX_USART2_UART_Init+0x90>)
 8003552:	220c      	movs	r2, #12
 8003554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003556:	4b19      	ldr	r3, [pc, #100]	; (80035bc <MX_USART2_UART_Init+0x90>)
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800355c:	4b17      	ldr	r3, [pc, #92]	; (80035bc <MX_USART2_UART_Init+0x90>)
 800355e:	2200      	movs	r2, #0
 8003560:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003562:	4b16      	ldr	r3, [pc, #88]	; (80035bc <MX_USART2_UART_Init+0x90>)
 8003564:	2200      	movs	r2, #0
 8003566:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <MX_USART2_UART_Init+0x90>)
 800356a:	2200      	movs	r2, #0
 800356c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <MX_USART2_UART_Init+0x90>)
 8003570:	2200      	movs	r2, #0
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003574:	4811      	ldr	r0, [pc, #68]	; (80035bc <MX_USART2_UART_Init+0x90>)
 8003576:	f00c f851 	bl	800f61c <HAL_UART_Init>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003580:	f000 fa5c 	bl	8003a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003584:	2100      	movs	r1, #0
 8003586:	480d      	ldr	r0, [pc, #52]	; (80035bc <MX_USART2_UART_Init+0x90>)
 8003588:	f00e f91d 	bl	80117c6 <HAL_UARTEx_SetTxFifoThreshold>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003592:	f000 fa53 	bl	8003a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003596:	2100      	movs	r1, #0
 8003598:	4808      	ldr	r0, [pc, #32]	; (80035bc <MX_USART2_UART_Init+0x90>)
 800359a:	f00e f952 	bl	8011842 <HAL_UARTEx_SetRxFifoThreshold>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80035a4:	f000 fa4a 	bl	8003a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80035a8:	4804      	ldr	r0, [pc, #16]	; (80035bc <MX_USART2_UART_Init+0x90>)
 80035aa:	f00e f8d3 	bl	8011754 <HAL_UARTEx_DisableFifoMode>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80035b4:	f000 fa42 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	2400072c 	.word	0x2400072c
 80035c0:	40004400 	.word	0x40004400

080035c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80035c8:	4b22      	ldr	r3, [pc, #136]	; (8003654 <MX_USART3_UART_Init+0x90>)
 80035ca:	4a23      	ldr	r2, [pc, #140]	; (8003658 <MX_USART3_UART_Init+0x94>)
 80035cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80035ce:	4b21      	ldr	r3, [pc, #132]	; (8003654 <MX_USART3_UART_Init+0x90>)
 80035d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80035d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035d6:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <MX_USART3_UART_Init+0x90>)
 80035d8:	2200      	movs	r2, #0
 80035da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035dc:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <MX_USART3_UART_Init+0x90>)
 80035de:	2200      	movs	r2, #0
 80035e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035e2:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <MX_USART3_UART_Init+0x90>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <MX_USART3_UART_Init+0x90>)
 80035ea:	220c      	movs	r2, #12
 80035ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ee:	4b19      	ldr	r3, [pc, #100]	; (8003654 <MX_USART3_UART_Init+0x90>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <MX_USART3_UART_Init+0x90>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035fa:	4b16      	ldr	r3, [pc, #88]	; (8003654 <MX_USART3_UART_Init+0x90>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003600:	4b14      	ldr	r3, [pc, #80]	; (8003654 <MX_USART3_UART_Init+0x90>)
 8003602:	2200      	movs	r2, #0
 8003604:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <MX_USART3_UART_Init+0x90>)
 8003608:	2200      	movs	r2, #0
 800360a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800360c:	4811      	ldr	r0, [pc, #68]	; (8003654 <MX_USART3_UART_Init+0x90>)
 800360e:	f00c f805 	bl	800f61c <HAL_UART_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003618:	f000 fa10 	bl	8003a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800361c:	2100      	movs	r1, #0
 800361e:	480d      	ldr	r0, [pc, #52]	; (8003654 <MX_USART3_UART_Init+0x90>)
 8003620:	f00e f8d1 	bl	80117c6 <HAL_UARTEx_SetTxFifoThreshold>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800362a:	f000 fa07 	bl	8003a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800362e:	2100      	movs	r1, #0
 8003630:	4808      	ldr	r0, [pc, #32]	; (8003654 <MX_USART3_UART_Init+0x90>)
 8003632:	f00e f906 	bl	8011842 <HAL_UARTEx_SetRxFifoThreshold>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800363c:	f000 f9fe 	bl	8003a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003640:	4804      	ldr	r0, [pc, #16]	; (8003654 <MX_USART3_UART_Init+0x90>)
 8003642:	f00e f887 	bl	8011754 <HAL_UARTEx_DisableFifoMode>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800364c:	f000 f9f6 	bl	8003a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003650:	bf00      	nop
 8003652:	bd80      	pop	{r7, pc}
 8003654:	240003fc 	.word	0x240003fc
 8003658:	40004800 	.word	0x40004800

0800365c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003662:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <MX_DMA_Init+0x6c>)
 8003664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003668:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <MX_DMA_Init+0x6c>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <MX_DMA_Init+0x6c>)
 8003674:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003680:	2200      	movs	r2, #0
 8003682:	2100      	movs	r1, #0
 8003684:	200b      	movs	r0, #11
 8003686:	f001 fe80 	bl	800538a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800368a:	200b      	movs	r0, #11
 800368c:	f001 fe97 	bl	80053be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	2100      	movs	r1, #0
 8003694:	200c      	movs	r0, #12
 8003696:	f001 fe78 	bl	800538a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800369a:	200c      	movs	r0, #12
 800369c:	f001 fe8f 	bl	80053be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2100      	movs	r1, #0
 80036a4:	200d      	movs	r0, #13
 80036a6:	f001 fe70 	bl	800538a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80036aa:	200d      	movs	r0, #13
 80036ac:	f001 fe87 	bl	80053be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80036b0:	2200      	movs	r2, #0
 80036b2:	2100      	movs	r1, #0
 80036b4:	200e      	movs	r0, #14
 80036b6:	f001 fe68 	bl	800538a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80036ba:	200e      	movs	r0, #14
 80036bc:	f001 fe7f 	bl	80053be <HAL_NVIC_EnableIRQ>

}
 80036c0:	bf00      	nop
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	58024400 	.word	0x58024400

080036cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	60da      	str	r2, [r3, #12]
 80036e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80036e2:	4b44      	ldr	r3, [pc, #272]	; (80037f4 <MX_GPIO_Init+0x128>)
 80036e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e8:	4a42      	ldr	r2, [pc, #264]	; (80037f4 <MX_GPIO_Init+0x128>)
 80036ea:	f043 0310 	orr.w	r3, r3, #16
 80036ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036f2:	4b40      	ldr	r3, [pc, #256]	; (80037f4 <MX_GPIO_Init+0x128>)
 80036f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003700:	4b3c      	ldr	r3, [pc, #240]	; (80037f4 <MX_GPIO_Init+0x128>)
 8003702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003706:	4a3b      	ldr	r2, [pc, #236]	; (80037f4 <MX_GPIO_Init+0x128>)
 8003708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003710:	4b38      	ldr	r3, [pc, #224]	; (80037f4 <MX_GPIO_Init+0x128>)
 8003712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800371e:	4b35      	ldr	r3, [pc, #212]	; (80037f4 <MX_GPIO_Init+0x128>)
 8003720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003724:	4a33      	ldr	r2, [pc, #204]	; (80037f4 <MX_GPIO_Init+0x128>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800372e:	4b31      	ldr	r3, [pc, #196]	; (80037f4 <MX_GPIO_Init+0x128>)
 8003730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800373c:	4b2d      	ldr	r3, [pc, #180]	; (80037f4 <MX_GPIO_Init+0x128>)
 800373e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003742:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <MX_GPIO_Init+0x128>)
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800374c:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <MX_GPIO_Init+0x128>)
 800374e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800375a:	4b26      	ldr	r3, [pc, #152]	; (80037f4 <MX_GPIO_Init+0x128>)
 800375c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003760:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <MX_GPIO_Init+0x128>)
 8003762:	f043 0304 	orr.w	r3, r3, #4
 8003766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800376a:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <MX_GPIO_Init+0x128>)
 800376c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8003778:	2200      	movs	r2, #0
 800377a:	2108      	movs	r1, #8
 800377c:	481e      	ldr	r0, [pc, #120]	; (80037f8 <MX_GPIO_Init+0x12c>)
 800377e:	f004 fe3d 	bl	80083fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003782:	2200      	movs	r2, #0
 8003784:	2102      	movs	r1, #2
 8003786:	481d      	ldr	r0, [pc, #116]	; (80037fc <MX_GPIO_Init+0x130>)
 8003788:	f004 fe38 	bl	80083fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25qxx_CS_GPIO_Port, W25qxx_CS_Pin, GPIO_PIN_RESET);
 800378c:	2200      	movs	r2, #0
 800378e:	2140      	movs	r1, #64	; 0x40
 8003790:	481b      	ldr	r0, [pc, #108]	; (8003800 <MX_GPIO_Init+0x134>)
 8003792:	f004 fe33 	bl	80083fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8003796:	2308      	movs	r3, #8
 8003798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800379a:	2301      	movs	r3, #1
 800379c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80037a6:	f107 0314 	add.w	r3, r7, #20
 80037aa:	4619      	mov	r1, r3
 80037ac:	4812      	ldr	r0, [pc, #72]	; (80037f8 <MX_GPIO_Init+0x12c>)
 80037ae:	f004 fc75 	bl	800809c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80037b2:	2302      	movs	r3, #2
 80037b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b6:	2301      	movs	r3, #1
 80037b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037be:	2300      	movs	r3, #0
 80037c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	4619      	mov	r1, r3
 80037c8:	480c      	ldr	r0, [pc, #48]	; (80037fc <MX_GPIO_Init+0x130>)
 80037ca:	f004 fc67 	bl	800809c <HAL_GPIO_Init>

  /*Configure GPIO pin : W25qxx_CS_Pin */
  GPIO_InitStruct.Pin = W25qxx_CS_Pin;
 80037ce:	2340      	movs	r3, #64	; 0x40
 80037d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d2:	2301      	movs	r3, #1
 80037d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037da:	2300      	movs	r3, #0
 80037dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(W25qxx_CS_GPIO_Port, &GPIO_InitStruct);
 80037de:	f107 0314 	add.w	r3, r7, #20
 80037e2:	4619      	mov	r1, r3
 80037e4:	4806      	ldr	r0, [pc, #24]	; (8003800 <MX_GPIO_Init+0x134>)
 80037e6:	f004 fc59 	bl	800809c <HAL_GPIO_Init>

}
 80037ea:	bf00      	nop
 80037ec:	3728      	adds	r7, #40	; 0x28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	58024400 	.word	0x58024400
 80037f8:	58021000 	.word	0x58021000
 80037fc:	58020000 	.word	0x58020000
 8003800:	58020400 	.word	0x58020400

08003804 <Compass_Calibration>:

/* USER CODE BEGIN 4 */
void Compass_Calibration(uint8_t mag_calibration_enable)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
	if(mag_calibration_enable == 1)
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	2b01      	cmp	r3, #1
 8003812:	f040 80d6 	bne.w	80039c2 <Compass_Calibration+0x1be>
	{
		for(int i =0;i<5;i++)
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	e00b      	b.n	8003834 <Compass_Calibration+0x30>
		{
			MPU9250_Read_All(&hi2c1);
 800381c:	486b      	ldr	r0, [pc, #428]	; (80039cc <Compass_Calibration+0x1c8>)
 800381e:	f7fd fa35 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 8003822:	2001      	movs	r0, #1
 8003824:	f001 fca6 	bl	8005174 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 8003828:	4869      	ldr	r0, [pc, #420]	; (80039d0 <Compass_Calibration+0x1cc>)
 800382a:	f7fd fbf1 	bl	8001010 <MPU9250_Parsing_NoOffset>
		for(int i =0;i<5;i++)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3301      	adds	r3, #1
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b04      	cmp	r3, #4
 8003838:	ddf0      	ble.n	800381c <Compass_Calibration+0x18>
		}
		MPU9250.Mx_Max = MPU9250.Mx;
 800383a:	4b65      	ldr	r3, [pc, #404]	; (80039d0 <Compass_Calibration+0x1cc>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a64      	ldr	r2, [pc, #400]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003840:	6593      	str	r3, [r2, #88]	; 0x58
		MPU9250.Mx_Min = MPU9250.Mx;
 8003842:	4b63      	ldr	r3, [pc, #396]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a62      	ldr	r2, [pc, #392]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003848:	64d3      	str	r3, [r2, #76]	; 0x4c
		MPU9250.My_Max = MPU9250.My;
 800384a:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <Compass_Calibration+0x1cc>)
 800384c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384e:	4a60      	ldr	r2, [pc, #384]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003850:	65d3      	str	r3, [r2, #92]	; 0x5c
		MPU9250.My_Min = MPU9250.My;
 8003852:	4b5f      	ldr	r3, [pc, #380]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003856:	4a5e      	ldr	r2, [pc, #376]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003858:	6513      	str	r3, [r2, #80]	; 0x50
		MPU9250.Mz_Max = MPU9250.Mz;
 800385a:	4b5d      	ldr	r3, [pc, #372]	; (80039d0 <Compass_Calibration+0x1cc>)
 800385c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800385e:	4a5c      	ldr	r2, [pc, #368]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003860:	6613      	str	r3, [r2, #96]	; 0x60
		MPU9250.Mz_Min = MPU9250.Mz;
 8003862:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003866:	4a5a      	ldr	r2, [pc, #360]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003868:	6553      	str	r3, [r2, #84]	; 0x54

		while(mag_calibration_enable != 0)
 800386a:	e065      	b.n	8003938 <Compass_Calibration+0x134>
		{
			Receive_Command();
 800386c:	f000 fda4 	bl	80043b8 <Receive_Command>
			MPU9250_Read_All(&hi2c1);
 8003870:	4856      	ldr	r0, [pc, #344]	; (80039cc <Compass_Calibration+0x1c8>)
 8003872:	f7fd fa0b 	bl	8000c8c <MPU9250_Read_All>
			HAL_Delay(1);
 8003876:	2001      	movs	r0, #1
 8003878:	f001 fc7c 	bl	8005174 <HAL_Delay>
			MPU9250_Parsing_NoOffset(&MPU9250);
 800387c:	4854      	ldr	r0, [pc, #336]	; (80039d0 <Compass_Calibration+0x1cc>)
 800387e:	f7fd fbc7 	bl	8001010 <MPU9250_Parsing_NoOffset>
			if(MPU9250.Mx > MPU9250.Mx_Max) MPU9250.Mx_Max = MPU9250.Mx;
 8003882:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003884:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8003888:	4b51      	ldr	r3, [pc, #324]	; (80039d0 <Compass_Calibration+0x1cc>)
 800388a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800388e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003896:	dd03      	ble.n	80038a0 <Compass_Calibration+0x9c>
 8003898:	4b4d      	ldr	r3, [pc, #308]	; (80039d0 <Compass_Calibration+0x1cc>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a4c      	ldr	r2, [pc, #304]	; (80039d0 <Compass_Calibration+0x1cc>)
 800389e:	6593      	str	r3, [r2, #88]	; 0x58
			if(MPU9250.Mx < MPU9250.Mx_Min) MPU9250.Mx_Min = MPU9250.Mx;
 80038a0:	4b4b      	ldr	r3, [pc, #300]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038a2:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80038a6:	4b4a      	ldr	r3, [pc, #296]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038a8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80038ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b4:	d503      	bpl.n	80038be <Compass_Calibration+0xba>
 80038b6:	4b46      	ldr	r3, [pc, #280]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a45      	ldr	r2, [pc, #276]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038bc:	64d3      	str	r3, [r2, #76]	; 0x4c

			if(MPU9250.My > MPU9250.My_Max) MPU9250.My_Max = MPU9250.My;
 80038be:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038c0:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80038c4:	4b42      	ldr	r3, [pc, #264]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038c6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80038ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d2:	dd03      	ble.n	80038dc <Compass_Calibration+0xd8>
 80038d4:	4b3e      	ldr	r3, [pc, #248]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d8:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038da:	65d3      	str	r3, [r2, #92]	; 0x5c
			if(MPU9250.My < MPU9250.My_Min) MPU9250.My_Min = MPU9250.My;
 80038dc:	4b3c      	ldr	r3, [pc, #240]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038de:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038e4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80038e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	d503      	bpl.n	80038fa <Compass_Calibration+0xf6>
 80038f2:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	4a36      	ldr	r2, [pc, #216]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038f8:	6513      	str	r3, [r2, #80]	; 0x50

			if(MPU9250.Mz > MPU9250.Mz_Max) MPU9250.Mz_Max = MPU9250.Mz;
 80038fa:	4b35      	ldr	r3, [pc, #212]	; (80039d0 <Compass_Calibration+0x1cc>)
 80038fc:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003900:	4b33      	ldr	r3, [pc, #204]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003902:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800390a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800390e:	dd03      	ble.n	8003918 <Compass_Calibration+0x114>
 8003910:	4b2f      	ldr	r3, [pc, #188]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003914:	4a2e      	ldr	r2, [pc, #184]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003916:	6613      	str	r3, [r2, #96]	; 0x60
			if(MPU9250.Mz < MPU9250.Mz_Min) MPU9250.Mz_Min = MPU9250.Mz;
 8003918:	4b2d      	ldr	r3, [pc, #180]	; (80039d0 <Compass_Calibration+0x1cc>)
 800391a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800391e:	4b2c      	ldr	r3, [pc, #176]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003920:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392c:	d400      	bmi.n	8003930 <Compass_Calibration+0x12c>
 800392e:	e003      	b.n	8003938 <Compass_Calibration+0x134>
 8003930:	4b27      	ldr	r3, [pc, #156]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003934:	4a26      	ldr	r2, [pc, #152]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003936:	6553      	str	r3, [r2, #84]	; 0x54
		while(mag_calibration_enable != 0)
 8003938:	79fb      	ldrb	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d196      	bne.n	800386c <Compass_Calibration+0x68>
		}
		MPU9250.Mx_Offset = (MPU9250.Mx_Max + MPU9250.Mx_Min) / 2;
 800393e:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003940:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8003944:	4b22      	ldr	r3, [pc, #136]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003946:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800394a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800394e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003956:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003958:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		MPU9250.My_Offset = (MPU9250.My_Max + MPU9250.My_Min) / 2;
 800395c:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <Compass_Calibration+0x1cc>)
 800395e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003964:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800396c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003970:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003974:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003976:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		MPU9250.Mz_Offset = (MPU9250.Mz_Max + MPU9250.Mz_Min) / 2;
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <Compass_Calibration+0x1cc>)
 800397c:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003982:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8003986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800398a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800398e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003992:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <Compass_Calibration+0x1cc>)
 8003994:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c

		*(float*)&Mag_Calib[0] = MPU9250.Mx_Offset;
 8003998:	4a0e      	ldr	r2, [pc, #56]	; (80039d4 <Compass_Calibration+0x1d0>)
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <Compass_Calibration+0x1cc>)
 800399c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800399e:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[4] = MPU9250.My_Offset;
 80039a0:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <Compass_Calibration+0x1d4>)
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <Compass_Calibration+0x1cc>)
 80039a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a6:	6013      	str	r3, [r2, #0]
		*(float*)&Mag_Calib[8] = MPU9250.Mz_Offset;
 80039a8:	4a0c      	ldr	r2, [pc, #48]	; (80039dc <Compass_Calibration+0x1d8>)
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <Compass_Calibration+0x1cc>)
 80039ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ae:	6013      	str	r3, [r2, #0]

		W25qxx_EraseSector(0);
 80039b0:	2000      	movs	r0, #0
 80039b2:	f001 f8ef 	bl	8004b94 <W25qxx_EraseSector>
		W25qxx_WriteSector(Mag_Calib, 0, 0, 12);
 80039b6:	230c      	movs	r3, #12
 80039b8:	2200      	movs	r2, #0
 80039ba:	2100      	movs	r1, #0
 80039bc:	4805      	ldr	r0, [pc, #20]	; (80039d4 <Compass_Calibration+0x1d0>)
 80039be:	f001 f9db 	bl	8004d78 <W25qxx_WriteSector>
	}
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	2400048c 	.word	0x2400048c
 80039d0:	2400026c 	.word	0x2400026c
 80039d4:	240007bc 	.word	0x240007bc
 80039d8:	240007c0 	.word	0x240007c0
 80039dc:	240007c4 	.word	0x240007c4

080039e0 <ESC_Calibration>:

void ESC_Calibration(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 20000;
 80039e4:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <ESC_Calibration+0x58>)
 80039e6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80039ea:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 20000;
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <ESC_Calibration+0x58>)
 80039ee:	f644 6220 	movw	r2, #20000	; 0x4e20
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 20000;
 80039f4:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <ESC_Calibration+0x58>)
 80039f6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80039fa:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 20000;
 80039fc:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <ESC_Calibration+0x58>)
 80039fe:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(7000);
 8003a04:	f641 3058 	movw	r0, #7000	; 0x1b58
 8003a08:	f001 fbb4 	bl	8005174 <HAL_Delay>
	TIM3->CCR1 = 10000;
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <ESC_Calibration+0x58>)
 8003a0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a12:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 10000;
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <ESC_Calibration+0x58>)
 8003a16:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 10000;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <ESC_Calibration+0x58>)
 8003a1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a22:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 10000;
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <ESC_Calibration+0x58>)
 8003a26:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(8000);
 8003a2c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8003a30:	f001 fba0 	bl	8005174 <HAL_Delay>
}
 8003a34:	bf00      	nop
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40000400 	.word	0x40000400

08003a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a40:	b672      	cpsid	i
}
 8003a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003a44:	e7fe      	b.n	8003a44 <Error_Handler+0x8>
	...

08003a48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <HAL_MspInit+0x30>)
 8003a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <HAL_MspInit+0x30>)
 8003a56:	f043 0302 	orr.w	r3, r3, #2
 8003a5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_MspInit+0x30>)
 8003a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	58024400 	.word	0x58024400

08003a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b0b8      	sub	sp, #224	; 0xe0
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a94:	f107 0310 	add.w	r3, r7, #16
 8003a98:	22bc      	movs	r2, #188	; 0xbc
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f00d ff87 	bl	80119b0 <memset>
  if(hi2c->Instance==I2C1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a3f      	ldr	r2, [pc, #252]	; (8003ba4 <HAL_I2C_MspInit+0x128>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d177      	bne.n	8003b9c <HAL_I2C_MspInit+0x120>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003aac:	2308      	movs	r3, #8
 8003aae:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ab6:	f107 0310 	add.w	r3, r7, #16
 8003aba:	4618      	mov	r0, r3
 8003abc:	f007 fefc 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003ac6:	f7ff ffb9 	bl	8003a3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aca:	4b37      	ldr	r3, [pc, #220]	; (8003ba8 <HAL_I2C_MspInit+0x12c>)
 8003acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad0:	4a35      	ldr	r2, [pc, #212]	; (8003ba8 <HAL_I2C_MspInit+0x12c>)
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ada:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_I2C_MspInit+0x12c>)
 8003adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003ae8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003af0:	2312      	movs	r3, #18
 8003af2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b02:	2304      	movs	r3, #4
 8003b04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4827      	ldr	r0, [pc, #156]	; (8003bac <HAL_I2C_MspInit+0x130>)
 8003b10:	f004 fac4 	bl	800809c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b14:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_I2C_MspInit+0x12c>)
 8003b16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b1a:	4a23      	ldr	r2, [pc, #140]	; (8003ba8 <HAL_I2C_MspInit+0x12c>)
 8003b1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b24:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_I2C_MspInit+0x12c>)
 8003b26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 8003b32:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <HAL_I2C_MspInit+0x138>)
 8003b36:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003b38:	4b1d      	ldr	r3, [pc, #116]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b3a:	2221      	movs	r2, #33	; 0x21
 8003b3c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b4a:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b50:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b52:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b58:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003b5e:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003b70:	480f      	ldr	r0, [pc, #60]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b72:	f001 fc3f 	bl	80053f4 <HAL_DMA_Init>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8003b7c:	f7ff ff5e 	bl	8003a3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a0b      	ldr	r2, [pc, #44]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <HAL_I2C_MspInit+0x134>)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2100      	movs	r1, #0
 8003b90:	201f      	movs	r0, #31
 8003b92:	f001 fbfa 	bl	800538a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b96:	201f      	movs	r0, #31
 8003b98:	f001 fc11 	bl	80053be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b9c:	bf00      	nop
 8003b9e:	37e0      	adds	r7, #224	; 0xe0
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40005400 	.word	0x40005400
 8003ba8:	58024400 	.word	0x58024400
 8003bac:	58020400 	.word	0x58020400
 8003bb0:	2400062c 	.word	0x2400062c
 8003bb4:	40020028 	.word	0x40020028

08003bb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b0b8      	sub	sp, #224	; 0xe0
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	60da      	str	r2, [r3, #12]
 8003bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bd0:	f107 0310 	add.w	r3, r7, #16
 8003bd4:	22bc      	movs	r2, #188	; 0xbc
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f00d fee9 	bl	80119b0 <memset>
  if(hspi->Instance==SPI1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <HAL_SPI_MspInit+0xc0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d142      	bne.n	8003c6e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003bee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bf4:	f107 0310 	add.w	r3, r7, #16
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f007 fe5d 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8003c04:	f7ff ff1a 	bl	8003a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c08:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <HAL_SPI_MspInit+0xc4>)
 8003c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c0e:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <HAL_SPI_MspInit+0xc4>)
 8003c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_SPI_MspInit+0xc4>)
 8003c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <HAL_SPI_MspInit+0xc4>)
 8003c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <HAL_SPI_MspInit+0xc4>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_SPI_MspInit+0xc4>)
 8003c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003c44:	23e0      	movs	r3, #224	; 0xe0
 8003c46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c5c:	2305      	movs	r3, #5
 8003c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c66:	4619      	mov	r1, r3
 8003c68:	4805      	ldr	r0, [pc, #20]	; (8003c80 <HAL_SPI_MspInit+0xc8>)
 8003c6a:	f004 fa17 	bl	800809c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003c6e:	bf00      	nop
 8003c70:	37e0      	adds	r7, #224	; 0xe0
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40013000 	.word	0x40013000
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	58020000 	.word	0x58020000

08003c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a19      	ldr	r2, [pc, #100]	; (8003cf8 <HAL_TIM_Base_MspInit+0x74>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10f      	bne.n	8003cb6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c96:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_TIM_Base_MspInit+0x78>)
 8003c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c9c:	4a17      	ldr	r2, [pc, #92]	; (8003cfc <HAL_TIM_Base_MspInit+0x78>)
 8003c9e:	f043 0302 	orr.w	r3, r3, #2
 8003ca2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_TIM_Base_MspInit+0x78>)
 8003ca8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003cb4:	e01b      	b.n	8003cee <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM7)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a11      	ldr	r2, [pc, #68]	; (8003d00 <HAL_TIM_Base_MspInit+0x7c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d116      	bne.n	8003cee <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <HAL_TIM_Base_MspInit+0x78>)
 8003cc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cc6:	4a0d      	ldr	r2, [pc, #52]	; (8003cfc <HAL_TIM_Base_MspInit+0x78>)
 8003cc8:	f043 0320 	orr.w	r3, r3, #32
 8003ccc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cd0:	4b0a      	ldr	r3, [pc, #40]	; (8003cfc <HAL_TIM_Base_MspInit+0x78>)
 8003cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2037      	movs	r0, #55	; 0x37
 8003ce4:	f001 fb51 	bl	800538a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ce8:	2037      	movs	r0, #55	; 0x37
 8003cea:	f001 fb68 	bl	80053be <HAL_NVIC_EnableIRQ>
}
 8003cee:	bf00      	nop
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	58024400 	.word	0x58024400
 8003d00:	40001400 	.word	0x40001400

08003d04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b08a      	sub	sp, #40	; 0x28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	609a      	str	r2, [r3, #8]
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a22      	ldr	r2, [pc, #136]	; (8003dac <HAL_TIM_MspPostInit+0xa8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d13d      	bne.n	8003da2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d26:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <HAL_TIM_MspPostInit+0xac>)
 8003d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d2c:	4a20      	ldr	r2, [pc, #128]	; (8003db0 <HAL_TIM_MspPostInit+0xac>)
 8003d2e:	f043 0302 	orr.w	r3, r3, #2
 8003d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <HAL_TIM_MspPostInit+0xac>)
 8003d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d44:	4b1a      	ldr	r3, [pc, #104]	; (8003db0 <HAL_TIM_MspPostInit+0xac>)
 8003d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d4a:	4a19      	ldr	r2, [pc, #100]	; (8003db0 <HAL_TIM_MspPostInit+0xac>)
 8003d4c:	f043 0304 	orr.w	r3, r3, #4
 8003d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d54:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <HAL_TIM_MspPostInit+0xac>)
 8003d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d5a:	f003 0304 	and.w	r3, r3, #4
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d62:	2303      	movs	r3, #3
 8003d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d66:	2302      	movs	r3, #2
 8003d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d72:	2302      	movs	r3, #2
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d76:	f107 0314 	add.w	r3, r7, #20
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	480d      	ldr	r0, [pc, #52]	; (8003db4 <HAL_TIM_MspPostInit+0xb0>)
 8003d7e:	f004 f98d 	bl	800809c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d82:	23c0      	movs	r3, #192	; 0xc0
 8003d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d86:	2302      	movs	r3, #2
 8003d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d92:	2302      	movs	r3, #2
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d96:	f107 0314 	add.w	r3, r7, #20
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4806      	ldr	r0, [pc, #24]	; (8003db8 <HAL_TIM_MspPostInit+0xb4>)
 8003d9e:	f004 f97d 	bl	800809c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003da2:	bf00      	nop
 8003da4:	3728      	adds	r7, #40	; 0x28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40000400 	.word	0x40000400
 8003db0:	58024400 	.word	0x58024400
 8003db4:	58020400 	.word	0x58020400
 8003db8:	58020800 	.word	0x58020800

08003dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b0bc      	sub	sp, #240	; 0xf0
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dd4:	f107 0320 	add.w	r3, r7, #32
 8003dd8:	22bc      	movs	r2, #188	; 0xbc
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f00d fde7 	bl	80119b0 <memset>
  if(huart->Instance==USART1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a7e      	ldr	r2, [pc, #504]	; (8003fe0 <HAL_UART_MspInit+0x224>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d178      	bne.n	8003ede <HAL_UART_MspInit+0x122>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003dec:	2301      	movs	r3, #1
 8003dee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003df0:	2300      	movs	r3, #0
 8003df2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003df6:	f107 0320 	add.w	r3, r7, #32
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f007 fd5c 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003e06:	f7ff fe19 	bl	8003a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e0a:	4b76      	ldr	r3, [pc, #472]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e10:	4a74      	ldr	r2, [pc, #464]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003e12:	f043 0310 	orr.w	r3, r3, #16
 8003e16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e1a:	4b72      	ldr	r3, [pc, #456]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e28:	4b6e      	ldr	r3, [pc, #440]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e2e:	4a6d      	ldr	r2, [pc, #436]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003e30:	f043 0302 	orr.w	r3, r3, #2
 8003e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e38:	4b6a      	ldr	r3, [pc, #424]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003e46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003e60:	2304      	movs	r3, #4
 8003e62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e66:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	485e      	ldr	r0, [pc, #376]	; (8003fe8 <HAL_UART_MspInit+0x22c>)
 8003e6e:	f004 f915 	bl	800809c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8003e72:	4b5e      	ldr	r3, [pc, #376]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003e74:	4a5e      	ldr	r2, [pc, #376]	; (8003ff0 <HAL_UART_MspInit+0x234>)
 8003e76:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003e78:	4b5c      	ldr	r3, [pc, #368]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003e7a:	222a      	movs	r2, #42	; 0x2a
 8003e7c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e7e:	4b5b      	ldr	r3, [pc, #364]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003e80:	2240      	movs	r2, #64	; 0x40
 8003e82:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e84:	4b59      	ldr	r3, [pc, #356]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e8a:	4b58      	ldr	r3, [pc, #352]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e90:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e92:	4b56      	ldr	r3, [pc, #344]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e98:	4b54      	ldr	r3, [pc, #336]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e9e:	4b53      	ldr	r3, [pc, #332]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ea4:	4b51      	ldr	r3, [pc, #324]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eaa:	4b50      	ldr	r3, [pc, #320]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003eb0:	484e      	ldr	r0, [pc, #312]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003eb2:	f001 fa9f 	bl	80053f4 <HAL_DMA_Init>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8003ebc:	f7ff fdbe 	bl	8003a3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a4a      	ldr	r2, [pc, #296]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003ec4:	679a      	str	r2, [r3, #120]	; 0x78
 8003ec6:	4a49      	ldr	r2, [pc, #292]	; (8003fec <HAL_UART_MspInit+0x230>)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2100      	movs	r1, #0
 8003ed0:	2025      	movs	r0, #37	; 0x25
 8003ed2:	f001 fa5a 	bl	800538a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ed6:	2025      	movs	r0, #37	; 0x25
 8003ed8:	f001 fa71 	bl	80053be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003edc:	e10f      	b.n	80040fe <HAL_UART_MspInit+0x342>
  else if(huart->Instance==USART2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a44      	ldr	r2, [pc, #272]	; (8003ff4 <HAL_UART_MspInit+0x238>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	f040 808d 	bne.w	8004004 <HAL_UART_MspInit+0x248>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003eea:	2302      	movs	r3, #2
 8003eec:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ef4:	f107 0320 	add.w	r3, r7, #32
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f007 fcdd 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <HAL_UART_MspInit+0x14c>
      Error_Handler();
 8003f04:	f7ff fd9a 	bl	8003a3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f08:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f0e:	4a35      	ldr	r2, [pc, #212]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f18:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003f1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f2c:	4a2d      	ldr	r2, [pc, #180]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f36:	4b2b      	ldr	r3, [pc, #172]	; (8003fe4 <HAL_UART_MspInit+0x228>)
 8003f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f44:	230c      	movs	r3, #12
 8003f46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f5c:	2307      	movs	r3, #7
 8003f5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f62:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003f66:	4619      	mov	r1, r3
 8003f68:	4823      	ldr	r0, [pc, #140]	; (8003ff8 <HAL_UART_MspInit+0x23c>)
 8003f6a:	f004 f897 	bl	800809c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream2;
 8003f6e:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003f70:	4a23      	ldr	r2, [pc, #140]	; (8004000 <HAL_UART_MspInit+0x244>)
 8003f72:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003f74:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003f76:	222b      	movs	r2, #43	; 0x2b
 8003f78:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f80:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f86:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f8e:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003f9a:	4b18      	ldr	r3, [pc, #96]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fa0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003fa2:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003fa4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003fa8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003fb0:	4812      	ldr	r0, [pc, #72]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003fb2:	f001 fa1f 	bl	80053f4 <HAL_DMA_Init>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_UART_MspInit+0x204>
      Error_Handler();
 8003fbc:	f7ff fd3e 	bl	8003a3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003fc4:	67da      	str	r2, [r3, #124]	; 0x7c
 8003fc6:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <HAL_UART_MspInit+0x240>)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2100      	movs	r1, #0
 8003fd0:	2026      	movs	r0, #38	; 0x26
 8003fd2:	f001 f9da 	bl	800538a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003fd6:	2026      	movs	r0, #38	; 0x26
 8003fd8:	f001 f9f1 	bl	80053be <HAL_NVIC_EnableIRQ>
}
 8003fdc:	e08f      	b.n	80040fe <HAL_UART_MspInit+0x342>
 8003fde:	bf00      	nop
 8003fe0:	40011000 	.word	0x40011000
 8003fe4:	58024400 	.word	0x58024400
 8003fe8:	58020400 	.word	0x58020400
 8003fec:	24000524 	.word	0x24000524
 8003ff0:	40020010 	.word	0x40020010
 8003ff4:	40004400 	.word	0x40004400
 8003ff8:	58020000 	.word	0x58020000
 8003ffc:	2400030c 	.word	0x2400030c
 8004000:	40020040 	.word	0x40020040
  else if(huart->Instance==USART3)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a3f      	ldr	r2, [pc, #252]	; (8004108 <HAL_UART_MspInit+0x34c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d177      	bne.n	80040fe <HAL_UART_MspInit+0x342>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800400e:	2302      	movs	r3, #2
 8004010:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004018:	f107 0320 	add.w	r3, r7, #32
 800401c:	4618      	mov	r0, r3
 800401e:	f007 fc4b 	bl	800b8b8 <HAL_RCCEx_PeriphCLKConfig>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <HAL_UART_MspInit+0x270>
      Error_Handler();
 8004028:	f7ff fd08 	bl	8003a3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800402c:	4b37      	ldr	r3, [pc, #220]	; (800410c <HAL_UART_MspInit+0x350>)
 800402e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004032:	4a36      	ldr	r2, [pc, #216]	; (800410c <HAL_UART_MspInit+0x350>)
 8004034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004038:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800403c:	4b33      	ldr	r3, [pc, #204]	; (800410c <HAL_UART_MspInit+0x350>)
 800403e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800404a:	4b30      	ldr	r3, [pc, #192]	; (800410c <HAL_UART_MspInit+0x350>)
 800404c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004050:	4a2e      	ldr	r2, [pc, #184]	; (800410c <HAL_UART_MspInit+0x350>)
 8004052:	f043 0302 	orr.w	r3, r3, #2
 8004056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800405a:	4b2c      	ldr	r3, [pc, #176]	; (800410c <HAL_UART_MspInit+0x350>)
 800405c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004068:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800406c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004082:	2307      	movs	r3, #7
 8004084:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004088:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800408c:	4619      	mov	r1, r3
 800408e:	4820      	ldr	r0, [pc, #128]	; (8004110 <HAL_UART_MspInit+0x354>)
 8004090:	f004 f804 	bl	800809c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream3;
 8004094:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <HAL_UART_MspInit+0x358>)
 8004096:	4a20      	ldr	r2, [pc, #128]	; (8004118 <HAL_UART_MspInit+0x35c>)
 8004098:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800409a:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <HAL_UART_MspInit+0x358>)
 800409c:	222d      	movs	r2, #45	; 0x2d
 800409e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040a0:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <HAL_UART_MspInit+0x358>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_UART_MspInit+0x358>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_UART_MspInit+0x358>)
 80040ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040b4:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_UART_MspInit+0x358>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040ba:	4b16      	ldr	r3, [pc, #88]	; (8004114 <HAL_UART_MspInit+0x358>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80040c0:	4b14      	ldr	r3, [pc, #80]	; (8004114 <HAL_UART_MspInit+0x358>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <HAL_UART_MspInit+0x358>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040cc:	4b11      	ldr	r3, [pc, #68]	; (8004114 <HAL_UART_MspInit+0x358>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80040d2:	4810      	ldr	r0, [pc, #64]	; (8004114 <HAL_UART_MspInit+0x358>)
 80040d4:	f001 f98e 	bl	80053f4 <HAL_DMA_Init>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <HAL_UART_MspInit+0x326>
      Error_Handler();
 80040de:	f7ff fcad 	bl	8003a3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <HAL_UART_MspInit+0x358>)
 80040e6:	67da      	str	r2, [r3, #124]	; 0x7c
 80040e8:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <HAL_UART_MspInit+0x358>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80040ee:	2200      	movs	r2, #0
 80040f0:	2100      	movs	r1, #0
 80040f2:	2027      	movs	r0, #39	; 0x27
 80040f4:	f001 f949 	bl	800538a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80040f8:	2027      	movs	r0, #39	; 0x27
 80040fa:	f001 f960 	bl	80053be <HAL_NVIC_EnableIRQ>
}
 80040fe:	bf00      	nop
 8004100:	37f0      	adds	r7, #240	; 0xf0
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40004800 	.word	0x40004800
 800410c:	58024400 	.word	0x58024400
 8004110:	58020400 	.word	0x58020400
 8004114:	24000384 	.word	0x24000384
 8004118:	40020058 	.word	0x40020058

0800411c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8004120:	e7fe      	b.n	8004120 <NMI_Handler+0x4>

08004122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004122:	b480      	push	{r7}
 8004124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004126:	e7fe      	b.n	8004126 <HardFault_Handler+0x4>

08004128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800412c:	e7fe      	b.n	800412c <MemManage_Handler+0x4>

0800412e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800412e:	b480      	push	{r7}
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004132:	e7fe      	b.n	8004132 <BusFault_Handler+0x4>

08004134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004138:	e7fe      	b.n	8004138 <UsageFault_Handler+0x4>

0800413a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800413a:	b480      	push	{r7}
 800413c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004168:	f000 ffe4 	bl	8005134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800416c:	bf00      	nop
 800416e:	bd80      	pop	{r7, pc}

08004170 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004174:	4802      	ldr	r0, [pc, #8]	; (8004180 <DMA1_Stream0_IRQHandler+0x10>)
 8004176:	f002 fc65 	bl	8006a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	24000524 	.word	0x24000524

08004184 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004188:	4802      	ldr	r0, [pc, #8]	; (8004194 <DMA1_Stream1_IRQHandler+0x10>)
 800418a:	f002 fc5b 	bl	8006a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	2400062c 	.word	0x2400062c

08004198 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800419c:	4802      	ldr	r0, [pc, #8]	; (80041a8 <DMA1_Stream2_IRQHandler+0x10>)
 800419e:	f002 fc51 	bl	8006a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	2400030c 	.word	0x2400030c

080041ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <DMA1_Stream3_IRQHandler+0x10>)
 80041b2:	f002 fc47 	bl	8006a44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	24000384 	.word	0x24000384

080041c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80041c4:	4802      	ldr	r0, [pc, #8]	; (80041d0 <I2C1_EV_IRQHandler+0x10>)
 80041c6:	f004 fd03 	bl	8008bd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2400048c 	.word	0x2400048c

080041d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041d8:	4802      	ldr	r0, [pc, #8]	; (80041e4 <USART1_IRQHandler+0x10>)
 80041da:	f00b fb7b 	bl	800f8d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	2400059c 	.word	0x2400059c

080041e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041ec:	4802      	ldr	r0, [pc, #8]	; (80041f8 <USART2_IRQHandler+0x10>)
 80041ee:	f00b fb71 	bl	800f8d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	2400072c 	.word	0x2400072c

080041fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004200:	4802      	ldr	r0, [pc, #8]	; (800420c <USART3_IRQHandler+0x10>)
 8004202:	f00b fb67 	bl	800f8d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	240003fc 	.word	0x240003fc

08004210 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004214:	4802      	ldr	r0, [pc, #8]	; (8004220 <TIM7_IRQHandler+0x10>)
 8004216:	f00a f9e3 	bl	800e5e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	240007c8 	.word	0x240007c8

08004224 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	static unsigned int tim1_2ms_count = 0;
	static unsigned int tim1_10ms_count = 0;
	static unsigned int tim1_20ms_count = 0;

	if(htim->Instance == TIM7)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1a      	ldr	r2, [pc, #104]	; (800429c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d12c      	bne.n	8004290 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		tim1_2ms_count++;
 8004236:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3301      	adds	r3, #1
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800423e:	6013      	str	r3, [r2, #0]
		if(tim1_2ms_count == 2)
 8004240:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d105      	bne.n	8004254 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			tim1_2ms_count = 0;
 8004248:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
			tim1_2ms_flag = 1;
 800424e:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004250:	2201      	movs	r2, #1
 8004252:	701a      	strb	r2, [r3, #0]
		}
		tim1_2ms_count++;
 8004254:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3301      	adds	r3, #1
 800425a:	4a11      	ldr	r2, [pc, #68]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800425c:	6013      	str	r3, [r2, #0]
		if(tim1_2ms_count == 10)
 800425e:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b0a      	cmp	r3, #10
 8004264:	d105      	bne.n	8004272 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			tim1_2ms_count = 0;
 8004266:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
			tim1_2ms_flag = 1;
 800426c:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
		}
		tim1_20ms_count++;
 8004272:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	4a0b      	ldr	r2, [pc, #44]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800427a:	6013      	str	r3, [r2, #0]
		if(tim1_20ms_count == 20)
 800427c:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b14      	cmp	r3, #20
 8004282:	d105      	bne.n	8004290 <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			tim1_20ms_count = 0;
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
			tim1_20ms_flag = 1;
 800428a:	4b08      	ldr	r3, [pc, #32]	; (80042ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40001400 	.word	0x40001400
 80042a0:	24000238 	.word	0x24000238
 80042a4:	2400022e 	.word	0x2400022e
 80042a8:	2400023c 	.word	0x2400023c
 80042ac:	2400022f 	.word	0x2400022f

080042b0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]


	if(huart->Instance == USART1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a34      	ldr	r2, [pc, #208]	; (8004390 <HAL_UART_RxCpltCallback+0xe0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d108      	bne.n	80042d4 <HAL_UART_RxCpltCallback+0x24>
	{
		uart1_rx_flag = 1;
 80042c2:	4b34      	ldr	r3, [pc, #208]	; (8004394 <HAL_UART_RxCpltCallback+0xe4>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);
 80042c8:	2201      	movs	r2, #1
 80042ca:	4933      	ldr	r1, [pc, #204]	; (8004398 <HAL_UART_RxCpltCallback+0xe8>)
 80042cc:	4833      	ldr	r0, [pc, #204]	; (800439c <HAL_UART_RxCpltCallback+0xec>)
 80042ce:	f00b f9f5 	bl	800f6bc <HAL_UART_Receive_IT>
					ibus_rx_buf[cnt]=uart2_rx_data;
					cnt++;
					break;
				}
	}
}
 80042d2:	e059      	b.n	8004388 <HAL_UART_RxCpltCallback+0xd8>
	else if(huart->Instance == USART2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a31      	ldr	r2, [pc, #196]	; (80043a0 <HAL_UART_RxCpltCallback+0xf0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d151      	bne.n	8004382 <HAL_UART_RxCpltCallback+0xd2>
		uart2_rx_flag = 1;
 80042de:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <HAL_UART_RxCpltCallback+0xf4>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
		switch(cnt)
 80042e4:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b1f      	cmp	r3, #31
 80042ea:	d02e      	beq.n	800434a <HAL_UART_RxCpltCallback+0x9a>
 80042ec:	2b1f      	cmp	r3, #31
 80042ee:	dc3a      	bgt.n	8004366 <HAL_UART_RxCpltCallback+0xb6>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_UART_RxCpltCallback+0x4a>
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d012      	beq.n	800431e <HAL_UART_RxCpltCallback+0x6e>
 80042f8:	e035      	b.n	8004366 <HAL_UART_RxCpltCallback+0xb6>
					if(uart2_rx_data==0x20)
 80042fa:	4b2c      	ldr	r3, [pc, #176]	; (80043ac <HAL_UART_RxCpltCallback+0xfc>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d141      	bne.n	8004386 <HAL_UART_RxCpltCallback+0xd6>
						ibus_rx_buf[cnt]=uart2_rx_data;
 8004302:	4b29      	ldr	r3, [pc, #164]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	4b28      	ldr	r3, [pc, #160]	; (80043ac <HAL_UART_RxCpltCallback+0xfc>)
 800430a:	7819      	ldrb	r1, [r3, #0]
 800430c:	4b28      	ldr	r3, [pc, #160]	; (80043b0 <HAL_UART_RxCpltCallback+0x100>)
 800430e:	5499      	strb	r1, [r3, r2]
						cnt++;
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	3301      	adds	r3, #1
 8004316:	b2da      	uxtb	r2, r3
 8004318:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 800431a:	701a      	strb	r2, [r3, #0]
					break;
 800431c:	e033      	b.n	8004386 <HAL_UART_RxCpltCallback+0xd6>
					if(uart2_rx_data==0x40)
 800431e:	4b23      	ldr	r3, [pc, #140]	; (80043ac <HAL_UART_RxCpltCallback+0xfc>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d10d      	bne.n	8004342 <HAL_UART_RxCpltCallback+0x92>
						ibus_rx_buf[cnt]=uart2_rx_data;
 8004326:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	4b1f      	ldr	r3, [pc, #124]	; (80043ac <HAL_UART_RxCpltCallback+0xfc>)
 800432e:	7819      	ldrb	r1, [r3, #0]
 8004330:	4b1f      	ldr	r3, [pc, #124]	; (80043b0 <HAL_UART_RxCpltCallback+0x100>)
 8004332:	5499      	strb	r1, [r3, r2]
						cnt++;
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	3301      	adds	r3, #1
 800433a:	b2da      	uxtb	r2, r3
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 800433e:	701a      	strb	r2, [r3, #0]
					break;
 8004340:	e022      	b.n	8004388 <HAL_UART_RxCpltCallback+0xd8>
						cnt=0;
 8004342:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 8004344:	2200      	movs	r2, #0
 8004346:	701a      	strb	r2, [r3, #0]
					break;
 8004348:	e01e      	b.n	8004388 <HAL_UART_RxCpltCallback+0xd8>
					ibus_rx_buf[cnt]=uart2_rx_data;
 800434a:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	4b16      	ldr	r3, [pc, #88]	; (80043ac <HAL_UART_RxCpltCallback+0xfc>)
 8004352:	7819      	ldrb	r1, [r3, #0]
 8004354:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <HAL_UART_RxCpltCallback+0x100>)
 8004356:	5499      	strb	r1, [r3, r2]
					cnt=0;
 8004358:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
					ibus_rx_cplt_flag = 1;
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <HAL_UART_RxCpltCallback+0x104>)
 8004360:	2201      	movs	r2, #1
 8004362:	701a      	strb	r2, [r3, #0]
					break;
 8004364:	e010      	b.n	8004388 <HAL_UART_RxCpltCallback+0xd8>
					ibus_rx_buf[cnt]=uart2_rx_data;
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <HAL_UART_RxCpltCallback+0xfc>)
 800436e:	7819      	ldrb	r1, [r3, #0]
 8004370:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <HAL_UART_RxCpltCallback+0x100>)
 8004372:	5499      	strb	r1, [r3, r2]
					cnt++;
 8004374:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	3301      	adds	r3, #1
 800437a:	b2da      	uxtb	r2, r3
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_UART_RxCpltCallback+0xf8>)
 800437e:	701a      	strb	r2, [r3, #0]
					break;
 8004380:	e002      	b.n	8004388 <HAL_UART_RxCpltCallback+0xd8>
	}
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <HAL_UART_RxCpltCallback+0xd8>
					break;
 8004386:	bf00      	nop
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40011000 	.word	0x40011000
 8004394:	24000230 	.word	0x24000230
 8004398:	24000231 	.word	0x24000231
 800439c:	2400059c 	.word	0x2400059c
 80043a0:	40004400 	.word	0x40004400
 80043a4:	24000232 	.word	0x24000232
 80043a8:	24000240 	.word	0x24000240
 80043ac:	24000233 	.word	0x24000233
 80043b0:	24000818 	.word	0x24000818
 80043b4:	24000234 	.word	0x24000234

080043b8 <Receive_Command>:

void Receive_Command(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
	if(uart1_rx_flag == 1)
 80043bc:	4b36      	ldr	r3, [pc, #216]	; (8004498 <Receive_Command+0xe0>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d163      	bne.n	800448c <Receive_Command+0xd4>
	{
		uart1_rx_flag = 0;
 80043c4:	4b34      	ldr	r3, [pc, #208]	; (8004498 <Receive_Command+0xe0>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]

		switch(uart1_rx_data)
 80043ca:	4b34      	ldr	r3, [pc, #208]	; (800449c <Receive_Command+0xe4>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	2b14      	cmp	r3, #20
 80043d2:	d854      	bhi.n	800447e <Receive_Command+0xc6>
 80043d4:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <Receive_Command+0x24>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004431 	.word	0x08004431
 80043e0:	08004439 	.word	0x08004439
 80043e4:	08004441 	.word	0x08004441
 80043e8:	08004449 	.word	0x08004449
 80043ec:	08004451 	.word	0x08004451
 80043f0:	08004459 	.word	0x08004459
 80043f4:	0800447f 	.word	0x0800447f
 80043f8:	0800447f 	.word	0x0800447f
 80043fc:	0800447f 	.word	0x0800447f
 8004400:	0800447f 	.word	0x0800447f
 8004404:	08004461 	.word	0x08004461
 8004408:	08004469 	.word	0x08004469
 800440c:	0800447f 	.word	0x0800447f
 8004410:	0800447f 	.word	0x0800447f
 8004414:	0800447f 	.word	0x0800447f
 8004418:	0800447f 	.word	0x0800447f
 800441c:	0800447f 	.word	0x0800447f
 8004420:	0800447f 	.word	0x0800447f
 8004424:	0800447f 	.word	0x0800447f
 8004428:	0800447f 	.word	0x0800447f
 800442c:	08004471 	.word	0x08004471
		{
		case 1: print_mode = 1; break; //Roll, Pitch, Yaw
 8004430:	4b1b      	ldr	r3, [pc, #108]	; (80044a0 <Receive_Command+0xe8>)
 8004432:	2201      	movs	r2, #1
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	e02a      	b.n	800448e <Receive_Command+0xd6>
		case 2: print_mode = 2; break; //Alt Raw, Alt Filt
 8004438:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <Receive_Command+0xe8>)
 800443a:	2202      	movs	r2, #2
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e026      	b.n	800448e <Receive_Command+0xd6>
		case 3: print_mode = 3; break; //Gyro
 8004440:	4b17      	ldr	r3, [pc, #92]	; (80044a0 <Receive_Command+0xe8>)
 8004442:	2203      	movs	r2, #3
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	e022      	b.n	800448e <Receive_Command+0xd6>
		case 4: print_mode = 4; break; //Accel
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <Receive_Command+0xe8>)
 800444a:	2204      	movs	r2, #4
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e01e      	b.n	800448e <Receive_Command+0xd6>
		case 5: print_mode = 5; break; //Mag
 8004450:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <Receive_Command+0xe8>)
 8004452:	2205      	movs	r2, #5
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	e01a      	b.n	800448e <Receive_Command+0xd6>
		case 6: print_mode = 6; break; //Mag_Offset
 8004458:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <Receive_Command+0xe8>)
 800445a:	2206      	movs	r2, #6
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	e016      	b.n	800448e <Receive_Command+0xd6>
		case 11: print_mode = 11; break; //Controller Channels
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <Receive_Command+0xe8>)
 8004462:	220b      	movs	r2, #11
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	e012      	b.n	800448e <Receive_Command+0xd6>
		case 12: print_mode = 12; break; //GPS
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <Receive_Command+0xe8>)
 800446a:	220c      	movs	r2, #12
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	e00e      	b.n	800448e <Receive_Command+0xd6>
		case 21: mag_calibration_enable = 1; print_mode = 0; break; //Mag Offset
 8004470:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <Receive_Command+0xec>)
 8004472:	2201      	movs	r2, #1
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <Receive_Command+0xe8>)
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]
 800447c:	e007      	b.n	800448e <Receive_Command+0xd6>
		default: mag_calibration_enable = 0; print_mode = 0; break; // Stop Printing
 800447e:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <Receive_Command+0xec>)
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <Receive_Command+0xe8>)
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e000      	b.n	800448e <Receive_Command+0xd6>
		}
	}
 800448c:	bf00      	nop
}
 800448e:	bf00      	nop
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	24000230 	.word	0x24000230
 800449c:	24000231 	.word	0x24000231
 80044a0:	2400022c 	.word	0x2400022c
 80044a4:	2400022d 	.word	0x2400022d

080044a8 <Is_iBus_Received>:

int Is_iBus_Received(uint8_t ibus_rx_cplt_flag)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
	iBus_return = 0;
 80044b2:	4b16      	ldr	r3, [pc, #88]	; (800450c <Is_iBus_Received+0x64>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
	if(ibus_rx_cplt_flag==1)
 80044b8:	79fb      	ldrb	r3, [r7, #7]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d120      	bne.n	8004500 <Is_iBus_Received+0x58>
	{
		ibus_rx_cplt_flag=0;
 80044be:	2300      	movs	r3, #0
 80044c0:	71fb      	strb	r3, [r7, #7]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 80044c2:	2120      	movs	r1, #32
 80044c4:	4812      	ldr	r0, [pc, #72]	; (8004510 <Is_iBus_Received+0x68>)
 80044c6:	f7fc f8df 	bl	8000688 <iBus_Check_CHKSUM>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d117      	bne.n	8004500 <Is_iBus_Received+0x58>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 80044d0:	4910      	ldr	r1, [pc, #64]	; (8004514 <Is_iBus_Received+0x6c>)
 80044d2:	480f      	ldr	r0, [pc, #60]	; (8004510 <Is_iBus_Received+0x68>)
 80044d4:	f7fc f90f 	bl	80006f6 <iBus_Parsing>
			if(iBus_isActiveFailSafe(&iBus) == 1)
 80044d8:	480e      	ldr	r0, [pc, #56]	; (8004514 <Is_iBus_Received+0x6c>)
 80044da:	f7fc f9c8 	bl	800086e <iBus_isActiveFailSafe>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <Is_iBus_Received+0x48>
			{
				HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80044e4:	2201      	movs	r2, #1
 80044e6:	2108      	movs	r1, #8
 80044e8:	480b      	ldr	r0, [pc, #44]	; (8004518 <Is_iBus_Received+0x70>)
 80044ea:	f003 ff87 	bl	80083fc <HAL_GPIO_WritePin>
 80044ee:	e007      	b.n	8004500 <Is_iBus_Received+0x58>
			}
			else
			{
				HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80044f0:	2200      	movs	r2, #0
 80044f2:	2108      	movs	r1, #8
 80044f4:	4808      	ldr	r0, [pc, #32]	; (8004518 <Is_iBus_Received+0x70>)
 80044f6:	f003 ff81 	bl	80083fc <HAL_GPIO_WritePin>
				iBus_return = 1;
 80044fa:	4b04      	ldr	r3, [pc, #16]	; (800450c <Is_iBus_Received+0x64>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return iBus_return;
 8004500:	4b02      	ldr	r3, [pc, #8]	; (800450c <Is_iBus_Received+0x64>)
 8004502:	781b      	ldrb	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	24000266 	.word	0x24000266
 8004510:	24000818 	.word	0x24000818
 8004514:	24000250 	.word	0x24000250
 8004518:	58021000 	.word	0x58021000

0800451c <Is_Throttle_Min>:

int Is_Throttle_Min(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
	iBus_return = 0;
 8004520:	4b10      	ldr	r3, [pc, #64]	; (8004564 <Is_Throttle_Min+0x48>)
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
	if(ibus_rx_cplt_flag==1)
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <Is_Throttle_Min+0x4c>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d115      	bne.n	800455a <Is_Throttle_Min+0x3e>
	{
		ibus_rx_cplt_flag=0;
 800452e:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <Is_Throttle_Min+0x4c>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
		if(iBus_Check_CHKSUM(&ibus_rx_buf[0],32)==1)
 8004534:	2120      	movs	r1, #32
 8004536:	480d      	ldr	r0, [pc, #52]	; (800456c <Is_Throttle_Min+0x50>)
 8004538:	f7fc f8a6 	bl	8000688 <iBus_Check_CHKSUM>
 800453c:	4603      	mov	r3, r0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d10b      	bne.n	800455a <Is_Throttle_Min+0x3e>
		{
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8004542:	490b      	ldr	r1, [pc, #44]	; (8004570 <Is_Throttle_Min+0x54>)
 8004544:	4809      	ldr	r0, [pc, #36]	; (800456c <Is_Throttle_Min+0x50>)
 8004546:	f7fc f8d6 	bl	80006f6 <iBus_Parsing>
			if(iBus.LV < 1025) iBus_return =  1;
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <Is_Throttle_Min+0x54>)
 800454c:	889b      	ldrh	r3, [r3, #4]
 800454e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004552:	d802      	bhi.n	800455a <Is_Throttle_Min+0x3e>
 8004554:	4b03      	ldr	r3, [pc, #12]	; (8004564 <Is_Throttle_Min+0x48>)
 8004556:	2201      	movs	r2, #1
 8004558:	701a      	strb	r2, [r3, #0]
		}
	}
	return iBus_return;
 800455a:	4b02      	ldr	r3, [pc, #8]	; (8004564 <Is_Throttle_Min+0x48>)
 800455c:	781b      	ldrb	r3, [r3, #0]
}
 800455e:	4618      	mov	r0, r3
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	24000266 	.word	0x24000266
 8004568:	24000234 	.word	0x24000234
 800456c:	24000818 	.word	0x24000818
 8004570:	24000250 	.word	0x24000250

08004574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
	return 1;
 8004578:	2301      	movs	r3, #1
}
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <_kill>:

int _kill(int pid, int sig)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800458e:	f00d f9e5 	bl	801195c <__errno>
 8004592:	4603      	mov	r3, r0
 8004594:	2216      	movs	r2, #22
 8004596:	601a      	str	r2, [r3, #0]
	return -1;
 8004598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <_exit>:

void _exit (int status)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80045ac:	f04f 31ff 	mov.w	r1, #4294967295
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7ff ffe7 	bl	8004584 <_kill>
	while (1) {}		/* Make sure we hang here */
 80045b6:	e7fe      	b.n	80045b6 <_exit+0x12>

080045b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e00a      	b.n	80045e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80045ca:	f3af 8000 	nop.w
 80045ce:	4601      	mov	r1, r0
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	60ba      	str	r2, [r7, #8]
 80045d6:	b2ca      	uxtb	r2, r1
 80045d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	3301      	adds	r3, #1
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	dbf0      	blt.n	80045ca <_read+0x12>
	}

return len;
 80045e8:	687b      	ldr	r3, [r7, #4]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3718      	adds	r7, #24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
	return -1;
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800461a:	605a      	str	r2, [r3, #4]
	return 0;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <_isatty>:

int _isatty(int file)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
	return 1;
 8004632:	2301      	movs	r3, #1
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
	return 0;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004664:	4a14      	ldr	r2, [pc, #80]	; (80046b8 <_sbrk+0x5c>)
 8004666:	4b15      	ldr	r3, [pc, #84]	; (80046bc <_sbrk+0x60>)
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <_sbrk+0x64>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d102      	bne.n	800467e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <_sbrk+0x64>)
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <_sbrk+0x68>)
 800467c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800467e:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <_sbrk+0x64>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	429a      	cmp	r2, r3
 800468a:	d207      	bcs.n	800469c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800468c:	f00d f966 	bl	801195c <__errno>
 8004690:	4603      	mov	r3, r0
 8004692:	220c      	movs	r2, #12
 8004694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004696:	f04f 33ff 	mov.w	r3, #4294967295
 800469a:	e009      	b.n	80046b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800469c:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <_sbrk+0x64>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046a2:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <_sbrk+0x64>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	4a05      	ldr	r2, [pc, #20]	; (80046c0 <_sbrk+0x64>)
 80046ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046ae:	68fb      	ldr	r3, [r7, #12]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	24080000 	.word	0x24080000
 80046bc:	00000400 	.word	0x00000400
 80046c0:	24000244 	.word	0x24000244
 80046c4:	24000878 	.word	0x24000878

080046c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80046cc:	4b39      	ldr	r3, [pc, #228]	; (80047b4 <SystemInit+0xec>)
 80046ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d2:	4a38      	ldr	r2, [pc, #224]	; (80047b4 <SystemInit+0xec>)
 80046d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046dc:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <SystemInit+0xf0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	2b06      	cmp	r3, #6
 80046e6:	d807      	bhi.n	80046f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80046e8:	4b33      	ldr	r3, [pc, #204]	; (80047b8 <SystemInit+0xf0>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 030f 	bic.w	r3, r3, #15
 80046f0:	4a31      	ldr	r2, [pc, #196]	; (80047b8 <SystemInit+0xf0>)
 80046f2:	f043 0307 	orr.w	r3, r3, #7
 80046f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80046f8:	4b30      	ldr	r3, [pc, #192]	; (80047bc <SystemInit+0xf4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a2f      	ldr	r2, [pc, #188]	; (80047bc <SystemInit+0xf4>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004704:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <SystemInit+0xf4>)
 8004706:	2200      	movs	r2, #0
 8004708:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800470a:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <SystemInit+0xf4>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	492b      	ldr	r1, [pc, #172]	; (80047bc <SystemInit+0xf4>)
 8004710:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <SystemInit+0xf8>)
 8004712:	4013      	ands	r3, r2
 8004714:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004716:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <SystemInit+0xf0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004722:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <SystemInit+0xf0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 030f 	bic.w	r3, r3, #15
 800472a:	4a23      	ldr	r2, [pc, #140]	; (80047b8 <SystemInit+0xf0>)
 800472c:	f043 0307 	orr.w	r3, r3, #7
 8004730:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004732:	4b22      	ldr	r3, [pc, #136]	; (80047bc <SystemInit+0xf4>)
 8004734:	2200      	movs	r2, #0
 8004736:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004738:	4b20      	ldr	r3, [pc, #128]	; (80047bc <SystemInit+0xf4>)
 800473a:	2200      	movs	r2, #0
 800473c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800473e:	4b1f      	ldr	r3, [pc, #124]	; (80047bc <SystemInit+0xf4>)
 8004740:	2200      	movs	r2, #0
 8004742:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004744:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <SystemInit+0xf4>)
 8004746:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <SystemInit+0xfc>)
 8004748:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <SystemInit+0xf4>)
 800474c:	4a1e      	ldr	r2, [pc, #120]	; (80047c8 <SystemInit+0x100>)
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004750:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <SystemInit+0xf4>)
 8004752:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <SystemInit+0x104>)
 8004754:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004756:	4b19      	ldr	r3, [pc, #100]	; (80047bc <SystemInit+0xf4>)
 8004758:	2200      	movs	r2, #0
 800475a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800475c:	4b17      	ldr	r3, [pc, #92]	; (80047bc <SystemInit+0xf4>)
 800475e:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <SystemInit+0x104>)
 8004760:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004762:	4b16      	ldr	r3, [pc, #88]	; (80047bc <SystemInit+0xf4>)
 8004764:	2200      	movs	r2, #0
 8004766:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <SystemInit+0xf4>)
 800476a:	4a18      	ldr	r2, [pc, #96]	; (80047cc <SystemInit+0x104>)
 800476c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800476e:	4b13      	ldr	r3, [pc, #76]	; (80047bc <SystemInit+0xf4>)
 8004770:	2200      	movs	r2, #0
 8004772:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <SystemInit+0xf4>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a10      	ldr	r2, [pc, #64]	; (80047bc <SystemInit+0xf4>)
 800477a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004780:	4b0e      	ldr	r3, [pc, #56]	; (80047bc <SystemInit+0xf4>)
 8004782:	2200      	movs	r2, #0
 8004784:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <SystemInit+0x108>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <SystemInit+0x10c>)
 800478c:	4013      	ands	r3, r2
 800478e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004792:	d202      	bcs.n	800479a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004794:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <SystemInit+0x110>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <SystemInit+0x114>)
 800479c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80047a0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80047a2:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <SystemInit+0xec>)
 80047a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047a8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	e000ed00 	.word	0xe000ed00
 80047b8:	52002000 	.word	0x52002000
 80047bc:	58024400 	.word	0x58024400
 80047c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80047c4:	02020200 	.word	0x02020200
 80047c8:	01ff0000 	.word	0x01ff0000
 80047cc:	01010280 	.word	0x01010280
 80047d0:	5c001000 	.word	0x5c001000
 80047d4:	ffff0000 	.word	0xffff0000
 80047d8:	51008108 	.word	0x51008108
 80047dc:	52004000 	.word	0x52004000

080047e0 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	4603      	mov	r3, r0
 80047e8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80047ea:	f107 020f 	add.w	r2, r7, #15
 80047ee:	1df9      	adds	r1, r7, #7
 80047f0:	2364      	movs	r3, #100	; 0x64
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2301      	movs	r3, #1
 80047f6:	4804      	ldr	r0, [pc, #16]	; (8004808 <W25qxx_Spi+0x28>)
 80047f8:	f009 f8a6 	bl	800d948 <HAL_SPI_TransmitReceive>
	return ret;
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	240006a4 	.word	0x240006a4

0800480c <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	2300      	movs	r3, #0
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	2300      	movs	r3, #0
 8004820:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004822:	2200      	movs	r2, #0
 8004824:	2140      	movs	r1, #64	; 0x40
 8004826:	4813      	ldr	r0, [pc, #76]	; (8004874 <W25qxx_ReadID+0x68>)
 8004828:	f003 fde8 	bl	80083fc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 800482c:	209f      	movs	r0, #159	; 0x9f
 800482e:	f7ff ffd7 	bl	80047e0 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004832:	20a5      	movs	r0, #165	; 0xa5
 8004834:	f7ff ffd4 	bl	80047e0 <W25qxx_Spi>
 8004838:	4603      	mov	r3, r0
 800483a:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800483c:	20a5      	movs	r0, #165	; 0xa5
 800483e:	f7ff ffcf 	bl	80047e0 <W25qxx_Spi>
 8004842:	4603      	mov	r3, r0
 8004844:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004846:	20a5      	movs	r0, #165	; 0xa5
 8004848:	f7ff ffca 	bl	80047e0 <W25qxx_Spi>
 800484c:	4603      	mov	r3, r0
 800484e:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004850:	2201      	movs	r2, #1
 8004852:	2140      	movs	r1, #64	; 0x40
 8004854:	4807      	ldr	r0, [pc, #28]	; (8004874 <W25qxx_ReadID+0x68>)
 8004856:	f003 fdd1 	bl	80083fc <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	041a      	lsls	r2, r3, #16
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	021b      	lsls	r3, r3, #8
 8004862:	4313      	orrs	r3, r2
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
	return Temp;
 800486a:	68fb      	ldr	r3, [r7, #12]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	58020400 	.word	0x58020400

08004878 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800487e:	2200      	movs	r2, #0
 8004880:	2140      	movs	r1, #64	; 0x40
 8004882:	4816      	ldr	r0, [pc, #88]	; (80048dc <W25qxx_ReadUniqID+0x64>)
 8004884:	f003 fdba 	bl	80083fc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004888:	204b      	movs	r0, #75	; 0x4b
 800488a:	f7ff ffa9 	bl	80047e0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800488e:	2300      	movs	r3, #0
 8004890:	71fb      	strb	r3, [r7, #7]
 8004892:	e005      	b.n	80048a0 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004894:	20a5      	movs	r0, #165	; 0xa5
 8004896:	f7ff ffa3 	bl	80047e0 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	3301      	adds	r3, #1
 800489e:	71fb      	strb	r3, [r7, #7]
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d9f6      	bls.n	8004894 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80048a6:	2300      	movs	r3, #0
 80048a8:	71bb      	strb	r3, [r7, #6]
 80048aa:	e00b      	b.n	80048c4 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80048ac:	79bc      	ldrb	r4, [r7, #6]
 80048ae:	20a5      	movs	r0, #165	; 0xa5
 80048b0:	f7ff ff96 	bl	80047e0 <W25qxx_Spi>
 80048b4:	4603      	mov	r3, r0
 80048b6:	461a      	mov	r2, r3
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <W25qxx_ReadUniqID+0x68>)
 80048ba:	4423      	add	r3, r4
 80048bc:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80048be:	79bb      	ldrb	r3, [r7, #6]
 80048c0:	3301      	adds	r3, #1
 80048c2:	71bb      	strb	r3, [r7, #6]
 80048c4:	79bb      	ldrb	r3, [r7, #6]
 80048c6:	2b07      	cmp	r3, #7
 80048c8:	d9f0      	bls.n	80048ac <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80048ca:	2201      	movs	r2, #1
 80048cc:	2140      	movs	r1, #64	; 0x40
 80048ce:	4803      	ldr	r0, [pc, #12]	; (80048dc <W25qxx_ReadUniqID+0x64>)
 80048d0:	f003 fd94 	bl	80083fc <HAL_GPIO_WritePin>
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd90      	pop	{r4, r7, pc}
 80048dc:	58020400 	.word	0x58020400
 80048e0:	24000838 	.word	0x24000838

080048e4 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80048e8:	2200      	movs	r2, #0
 80048ea:	2140      	movs	r1, #64	; 0x40
 80048ec:	4807      	ldr	r0, [pc, #28]	; (800490c <W25qxx_WriteEnable+0x28>)
 80048ee:	f003 fd85 	bl	80083fc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80048f2:	2006      	movs	r0, #6
 80048f4:	f7ff ff74 	bl	80047e0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80048f8:	2201      	movs	r2, #1
 80048fa:	2140      	movs	r1, #64	; 0x40
 80048fc:	4803      	ldr	r0, [pc, #12]	; (800490c <W25qxx_WriteEnable+0x28>)
 80048fe:	f003 fd7d 	bl	80083fc <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8004902:	2001      	movs	r0, #1
 8004904:	f000 fc36 	bl	8005174 <HAL_Delay>
}
 8004908:	bf00      	nop
 800490a:	bd80      	pop	{r7, pc}
 800490c:	58020400 	.word	0x58020400

08004910 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800491e:	2200      	movs	r2, #0
 8004920:	2140      	movs	r1, #64	; 0x40
 8004922:	481c      	ldr	r0, [pc, #112]	; (8004994 <W25qxx_ReadStatusRegister+0x84>)
 8004924:	f003 fd6a 	bl	80083fc <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10c      	bne.n	8004948 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800492e:	2005      	movs	r0, #5
 8004930:	f7ff ff56 	bl	80047e0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004934:	20a5      	movs	r0, #165	; 0xa5
 8004936:	f7ff ff53 	bl	80047e0 <W25qxx_Spi>
 800493a:	4603      	mov	r3, r0
 800493c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800493e:	4a16      	ldr	r2, [pc, #88]	; (8004998 <W25qxx_ReadStatusRegister+0x88>)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004946:	e01b      	b.n	8004980 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d10c      	bne.n	8004968 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800494e:	2035      	movs	r0, #53	; 0x35
 8004950:	f7ff ff46 	bl	80047e0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004954:	20a5      	movs	r0, #165	; 0xa5
 8004956:	f7ff ff43 	bl	80047e0 <W25qxx_Spi>
 800495a:	4603      	mov	r3, r0
 800495c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800495e:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <W25qxx_ReadStatusRegister+0x88>)
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004966:	e00b      	b.n	8004980 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004968:	2015      	movs	r0, #21
 800496a:	f7ff ff39 	bl	80047e0 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800496e:	20a5      	movs	r0, #165	; 0xa5
 8004970:	f7ff ff36 	bl	80047e0 <W25qxx_Spi>
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004978:	4a07      	ldr	r2, [pc, #28]	; (8004998 <W25qxx_ReadStatusRegister+0x88>)
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004980:	2201      	movs	r2, #1
 8004982:	2140      	movs	r1, #64	; 0x40
 8004984:	4803      	ldr	r0, [pc, #12]	; (8004994 <W25qxx_ReadStatusRegister+0x84>)
 8004986:	f003 fd39 	bl	80083fc <HAL_GPIO_WritePin>
	return status;
 800498a:	7bfb      	ldrb	r3, [r7, #15]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	58020400 	.word	0x58020400
 8004998:	24000838 	.word	0x24000838

0800499c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80049a0:	2001      	movs	r0, #1
 80049a2:	f000 fbe7 	bl	8005174 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80049a6:	2200      	movs	r2, #0
 80049a8:	2140      	movs	r1, #64	; 0x40
 80049aa:	480f      	ldr	r0, [pc, #60]	; (80049e8 <W25qxx_WaitForWriteEnd+0x4c>)
 80049ac:	f003 fd26 	bl	80083fc <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80049b0:	2005      	movs	r0, #5
 80049b2:	f7ff ff15 	bl	80047e0 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80049b6:	20a5      	movs	r0, #165	; 0xa5
 80049b8:	f7ff ff12 	bl	80047e0 <W25qxx_Spi>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <W25qxx_WaitForWriteEnd+0x50>)
 80049c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80049c6:	2001      	movs	r0, #1
 80049c8:	f000 fbd4 	bl	8005174 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80049cc:	4b07      	ldr	r3, [pc, #28]	; (80049ec <W25qxx_WaitForWriteEnd+0x50>)
 80049ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1ed      	bne.n	80049b6 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80049da:	2201      	movs	r2, #1
 80049dc:	2140      	movs	r1, #64	; 0x40
 80049de:	4802      	ldr	r0, [pc, #8]	; (80049e8 <W25qxx_WaitForWriteEnd+0x4c>)
 80049e0:	f003 fd0c 	bl	80083fc <HAL_GPIO_WritePin>
}
 80049e4:	bf00      	nop
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	58020400 	.word	0x58020400
 80049ec:	24000838 	.word	0x24000838

080049f0 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80049f6:	4b65      	ldr	r3, [pc, #404]	; (8004b8c <W25qxx_Init+0x19c>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80049fe:	e002      	b.n	8004a06 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8004a00:	2001      	movs	r0, #1
 8004a02:	f000 fbb7 	bl	8005174 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8004a06:	f000 fba9 	bl	800515c <HAL_GetTick>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b63      	cmp	r3, #99	; 0x63
 8004a0e:	d9f7      	bls.n	8004a00 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004a10:	2201      	movs	r2, #1
 8004a12:	2140      	movs	r1, #64	; 0x40
 8004a14:	485e      	ldr	r0, [pc, #376]	; (8004b90 <W25qxx_Init+0x1a0>)
 8004a16:	f003 fcf1 	bl	80083fc <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004a1a:	2064      	movs	r0, #100	; 0x64
 8004a1c:	f000 fbaa 	bl	8005174 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8004a20:	f7ff fef4 	bl	800480c <W25qxx_ReadID>
 8004a24:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	3b11      	subs	r3, #17
 8004a2c:	2b0f      	cmp	r3, #15
 8004a2e:	d86c      	bhi.n	8004b0a <W25qxx_Init+0x11a>
 8004a30:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <W25qxx_Init+0x48>)
 8004a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a36:	bf00      	nop
 8004a38:	08004afd 	.word	0x08004afd
 8004a3c:	08004aef 	.word	0x08004aef
 8004a40:	08004ae1 	.word	0x08004ae1
 8004a44:	08004ad3 	.word	0x08004ad3
 8004a48:	08004ac5 	.word	0x08004ac5
 8004a4c:	08004ab7 	.word	0x08004ab7
 8004a50:	08004aa9 	.word	0x08004aa9
 8004a54:	08004a99 	.word	0x08004a99
 8004a58:	08004a89 	.word	0x08004a89
 8004a5c:	08004b0b 	.word	0x08004b0b
 8004a60:	08004b0b 	.word	0x08004b0b
 8004a64:	08004b0b 	.word	0x08004b0b
 8004a68:	08004b0b 	.word	0x08004b0b
 8004a6c:	08004b0b 	.word	0x08004b0b
 8004a70:	08004b0b 	.word	0x08004b0b
 8004a74:	08004a79 	.word	0x08004a79
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004a78:	4b44      	ldr	r3, [pc, #272]	; (8004b8c <W25qxx_Init+0x19c>)
 8004a7a:	220a      	movs	r2, #10
 8004a7c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004a7e:	4b43      	ldr	r3, [pc, #268]	; (8004b8c <W25qxx_Init+0x19c>)
 8004a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a84:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8004a86:	e046      	b.n	8004b16 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004a88:	4b40      	ldr	r3, [pc, #256]	; (8004b8c <W25qxx_Init+0x19c>)
 8004a8a:	2209      	movs	r2, #9
 8004a8c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004a8e:	4b3f      	ldr	r3, [pc, #252]	; (8004b8c <W25qxx_Init+0x19c>)
 8004a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a94:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8004a96:	e03e      	b.n	8004b16 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004a98:	4b3c      	ldr	r3, [pc, #240]	; (8004b8c <W25qxx_Init+0x19c>)
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004a9e:	4b3b      	ldr	r3, [pc, #236]	; (8004b8c <W25qxx_Init+0x19c>)
 8004aa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aa4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8004aa6:	e036      	b.n	8004b16 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004aa8:	4b38      	ldr	r3, [pc, #224]	; (8004b8c <W25qxx_Init+0x19c>)
 8004aaa:	2207      	movs	r2, #7
 8004aac:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004aae:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <W25qxx_Init+0x19c>)
 8004ab0:	2280      	movs	r2, #128	; 0x80
 8004ab2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8004ab4:	e02f      	b.n	8004b16 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004ab6:	4b35      	ldr	r3, [pc, #212]	; (8004b8c <W25qxx_Init+0x19c>)
 8004ab8:	2206      	movs	r2, #6
 8004aba:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004abc:	4b33      	ldr	r3, [pc, #204]	; (8004b8c <W25qxx_Init+0x19c>)
 8004abe:	2240      	movs	r2, #64	; 0x40
 8004ac0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8004ac2:	e028      	b.n	8004b16 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004ac4:	4b31      	ldr	r3, [pc, #196]	; (8004b8c <W25qxx_Init+0x19c>)
 8004ac6:	2205      	movs	r2, #5
 8004ac8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004aca:	4b30      	ldr	r3, [pc, #192]	; (8004b8c <W25qxx_Init+0x19c>)
 8004acc:	2220      	movs	r2, #32
 8004ace:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8004ad0:	e021      	b.n	8004b16 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004ad2:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <W25qxx_Init+0x19c>)
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004ad8:	4b2c      	ldr	r3, [pc, #176]	; (8004b8c <W25qxx_Init+0x19c>)
 8004ada:	2210      	movs	r2, #16
 8004adc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8004ade:	e01a      	b.n	8004b16 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004ae0:	4b2a      	ldr	r3, [pc, #168]	; (8004b8c <W25qxx_Init+0x19c>)
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <W25qxx_Init+0x19c>)
 8004ae8:	2208      	movs	r2, #8
 8004aea:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8004aec:	e013      	b.n	8004b16 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004aee:	4b27      	ldr	r3, [pc, #156]	; (8004b8c <W25qxx_Init+0x19c>)
 8004af0:	2202      	movs	r2, #2
 8004af2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004af4:	4b25      	ldr	r3, [pc, #148]	; (8004b8c <W25qxx_Init+0x19c>)
 8004af6:	2204      	movs	r2, #4
 8004af8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8004afa:	e00c      	b.n	8004b16 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004afc:	4b23      	ldr	r3, [pc, #140]	; (8004b8c <W25qxx_Init+0x19c>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004b02:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b04:	2202      	movs	r2, #2
 8004b06:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8004b08:	e005      	b.n	8004b16 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8004b0a:	4b20      	ldr	r3, [pc, #128]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e036      	b.n	8004b84 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8004b16:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b1c:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004b1e:	4b1b      	ldr	r3, [pc, #108]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b24:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004b26:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	4a17      	ldr	r2, [pc, #92]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b2e:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004b30:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b36:	6912      	ldr	r2, [r2, #16]
 8004b38:	fb02 f303 	mul.w	r3, r2, r3
 8004b3c:	4a13      	ldr	r2, [pc, #76]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b3e:	8952      	ldrh	r2, [r2, #10]
 8004b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b44:	4a11      	ldr	r2, [pc, #68]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b46:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b50:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004b52:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	4a0d      	ldr	r2, [pc, #52]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b58:	6912      	ldr	r2, [r2, #16]
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
 8004b5e:	0a9b      	lsrs	r3, r3, #10
 8004b60:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b62:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004b64:	f7ff fe88 	bl	8004878 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004b68:	2001      	movs	r0, #1
 8004b6a:	f7ff fed1 	bl	8004910 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004b6e:	2002      	movs	r0, #2
 8004b70:	f7ff fece 	bl	8004910 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004b74:	2003      	movs	r0, #3
 8004b76:	f7ff fecb 	bl	8004910 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <W25qxx_Init+0x19c>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004b82:	2301      	movs	r3, #1
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	24000838 	.word	0x24000838
 8004b90:	58020400 	.word	0x58020400

08004b94 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004b9c:	e002      	b.n	8004ba4 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	f000 fae8 	bl	8005174 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004ba4:	4b25      	ldr	r3, [pc, #148]	; (8004c3c <W25qxx_EraseSector+0xa8>)
 8004ba6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d0f7      	beq.n	8004b9e <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <W25qxx_EraseSector+0xa8>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8004bb6:	f7ff fef1 	bl	800499c <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004bba:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <W25qxx_EraseSector+0xa8>)
 8004bbc:	691a      	ldr	r2, [r3, #16]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	fb02 f303 	mul.w	r3, r2, r3
 8004bc4:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004bc6:	f7ff fe8d 	bl	80048e4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2140      	movs	r1, #64	; 0x40
 8004bce:	481c      	ldr	r0, [pc, #112]	; (8004c40 <W25qxx_EraseSector+0xac>)
 8004bd0:	f003 fc14 	bl	80083fc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <W25qxx_EraseSector+0xa8>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d909      	bls.n	8004bf0 <W25qxx_EraseSector+0x5c>
	{
		W25qxx_Spi(0x21);
 8004bdc:	2021      	movs	r0, #33	; 0x21
 8004bde:	f7ff fdff 	bl	80047e0 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	0e1b      	lsrs	r3, r3, #24
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fdf9 	bl	80047e0 <W25qxx_Spi>
 8004bee:	e002      	b.n	8004bf6 <W25qxx_EraseSector+0x62>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004bf0:	2020      	movs	r0, #32
 8004bf2:	f7ff fdf5 	bl	80047e0 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fdef 	bl	80047e0 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	0a1b      	lsrs	r3, r3, #8
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fde9 	bl	80047e0 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fde4 	bl	80047e0 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004c18:	2201      	movs	r2, #1
 8004c1a:	2140      	movs	r1, #64	; 0x40
 8004c1c:	4808      	ldr	r0, [pc, #32]	; (8004c40 <W25qxx_EraseSector+0xac>)
 8004c1e:	f003 fbed 	bl	80083fc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004c22:	f7ff febb 	bl	800499c <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8004c26:	2001      	movs	r0, #1
 8004c28:	f000 faa4 	bl	8005174 <HAL_Delay>
	w25qxx.Lock = 0;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <W25qxx_EraseSector+0xa8>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	24000838 	.word	0x24000838
 8004c40:	58020400 	.word	0x58020400

08004c44 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <W25qxx_SectorToPage+0x28>)
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <W25qxx_SectorToPage+0x28>)
 8004c58:	8952      	ldrh	r2, [r2, #10]
 8004c5a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	24000838 	.word	0x24000838

08004c70 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004c7e:	e002      	b.n	8004c86 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004c80:	2001      	movs	r0, #1
 8004c82:	f000 fa77 	bl	8005174 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004c86:	4b39      	ldr	r3, [pc, #228]	; (8004d6c <W25qxx_WritePage+0xfc>)
 8004c88:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d0f7      	beq.n	8004c80 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004c90:	4b36      	ldr	r3, [pc, #216]	; (8004d6c <W25qxx_WritePage+0xfc>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	4a33      	ldr	r2, [pc, #204]	; (8004d6c <W25qxx_WritePage+0xfc>)
 8004ca0:	8952      	ldrh	r2, [r2, #10]
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d802      	bhi.n	8004cac <W25qxx_WritePage+0x3c>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d105      	bne.n	8004cb8 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004cac:	4b2f      	ldr	r3, [pc, #188]	; (8004d6c <W25qxx_WritePage+0xfc>)
 8004cae:	895b      	ldrh	r3, [r3, #10]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	4a2b      	ldr	r2, [pc, #172]	; (8004d6c <W25qxx_WritePage+0xfc>)
 8004cc0:	8952      	ldrh	r2, [r2, #10]
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d905      	bls.n	8004cd2 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004cc6:	4b29      	ldr	r3, [pc, #164]	; (8004d6c <W25qxx_WritePage+0xfc>)
 8004cc8:	895b      	ldrh	r3, [r3, #10]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	W25qxx_WaitForWriteEnd();
 8004cd2:	f7ff fe63 	bl	800499c <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8004cd6:	f7ff fe05 	bl	80048e4 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2140      	movs	r1, #64	; 0x40
 8004cde:	4824      	ldr	r0, [pc, #144]	; (8004d70 <W25qxx_WritePage+0x100>)
 8004ce0:	f003 fb8c 	bl	80083fc <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004ce4:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <W25qxx_WritePage+0xfc>)
 8004ce6:	895b      	ldrh	r3, [r3, #10]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	fb03 f302 	mul.w	r3, r3, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004cf6:	4b1d      	ldr	r3, [pc, #116]	; (8004d6c <W25qxx_WritePage+0xfc>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d909      	bls.n	8004d12 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8004cfe:	2012      	movs	r0, #18
 8004d00:	f7ff fd6e 	bl	80047e0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	0e1b      	lsrs	r3, r3, #24
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fd68 	bl	80047e0 <W25qxx_Spi>
 8004d10:	e002      	b.n	8004d18 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004d12:	2002      	movs	r0, #2
 8004d14:	f7ff fd64 	bl	80047e0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	0c1b      	lsrs	r3, r3, #16
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fd5e 	bl	80047e0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	0a1b      	lsrs	r3, r3, #8
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fd58 	bl	80047e0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fd53 	bl	80047e0 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	2364      	movs	r3, #100	; 0x64
 8004d40:	68f9      	ldr	r1, [r7, #12]
 8004d42:	480c      	ldr	r0, [pc, #48]	; (8004d74 <W25qxx_WritePage+0x104>)
 8004d44:	f008 fa1c 	bl	800d180 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004d48:	2201      	movs	r2, #1
 8004d4a:	2140      	movs	r1, #64	; 0x40
 8004d4c:	4808      	ldr	r0, [pc, #32]	; (8004d70 <W25qxx_WritePage+0x100>)
 8004d4e:	f003 fb55 	bl	80083fc <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004d52:	f7ff fe23 	bl	800499c <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004d56:	2001      	movs	r0, #1
 8004d58:	f000 fa0c 	bl	8005174 <HAL_Delay>
	w25qxx.Lock = 0;
 8004d5c:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <W25qxx_WritePage+0xfc>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	24000838 	.word	0x24000838
 8004d70:	58020400 	.word	0x58020400
 8004d74:	240006a4 	.word	0x240006a4

08004d78 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004d86:	4b2c      	ldr	r3, [pc, #176]	; (8004e38 <W25qxx_WriteSector+0xc0>)
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d802      	bhi.n	8004d96 <W25qxx_WriteSector+0x1e>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004d96:	4b28      	ldr	r3, [pc, #160]	; (8004e38 <W25qxx_WriteSector+0xc0>)
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004d9c:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <W25qxx_WriteSector+0xc0>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d243      	bcs.n	8004e2e <W25qxx_WriteSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	441a      	add	r2, r3
 8004dac:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <W25qxx_WriteSector+0xc0>)
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d905      	bls.n	8004dc0 <W25qxx_WriteSector+0x48>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004db4:	4b20      	ldr	r3, [pc, #128]	; (8004e38 <W25qxx_WriteSector+0xc0>)
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	e001      	b.n	8004dc4 <W25qxx_WriteSector+0x4c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004dc4:	68b8      	ldr	r0, [r7, #8]
 8004dc6:	f7ff ff3d 	bl	8004c44 <W25qxx_SectorToPage>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <W25qxx_WriteSector+0xc0>)
 8004dce:	895b      	ldrh	r3, [r3, #10]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dd8:	4413      	add	r3, r2
 8004dda:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004ddc:	4b16      	ldr	r3, [pc, #88]	; (8004e38 <W25qxx_WriteSector+0xc0>)
 8004dde:	895b      	ldrh	r3, [r3, #10]
 8004de0:	461a      	mov	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004de8:	fb02 f201 	mul.w	r2, r2, r1
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	69f9      	ldr	r1, [r7, #28]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7ff ff3a 	bl	8004c70 <W25qxx_WritePage>
		StartPage++;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <W25qxx_WriteSector+0xc0>)
 8004e04:	895b      	ldrh	r3, [r3, #10]
 8004e06:	461a      	mov	r2, r3
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	1a9a      	subs	r2, r3, r2
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	4413      	add	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <W25qxx_WriteSector+0xc0>)
 8004e14:	895b      	ldrh	r3, [r3, #10]
 8004e16:	461a      	mov	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	dce1      	bgt.n	8004df0 <W25qxx_WriteSector+0x78>
 8004e2c:	e000      	b.n	8004e30 <W25qxx_WriteSector+0xb8>
		return;
 8004e2e:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	24000838 	.word	0x24000838

08004e3c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004e4a:	e002      	b.n	8004e52 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f000 f991 	bl	8005174 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004e52:	4b36      	ldr	r3, [pc, #216]	; (8004f2c <W25qxx_ReadPage+0xf0>)
 8004e54:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d0f7      	beq.n	8004e4c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004e5c:	4b33      	ldr	r3, [pc, #204]	; (8004f2c <W25qxx_ReadPage+0xf0>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004e64:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <W25qxx_ReadPage+0xf0>)
 8004e66:	895b      	ldrh	r3, [r3, #10]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d802      	bhi.n	8004e76 <W25qxx_ReadPage+0x3a>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d102      	bne.n	8004e7c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004e76:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <W25qxx_ReadPage+0xf0>)
 8004e78:	895b      	ldrh	r3, [r3, #10]
 8004e7a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	4413      	add	r3, r2
 8004e82:	4a2a      	ldr	r2, [pc, #168]	; (8004f2c <W25qxx_ReadPage+0xf0>)
 8004e84:	8952      	ldrh	r2, [r2, #10]
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d905      	bls.n	8004e96 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004e8a:	4b28      	ldr	r3, [pc, #160]	; (8004f2c <W25qxx_ReadPage+0xf0>)
 8004e8c:	895b      	ldrh	r3, [r3, #10]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	W25qxx_Delay(100);
	uint32_t StartTime = HAL_GetTick();
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004e96:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <W25qxx_ReadPage+0xf0>)
 8004e98:	895b      	ldrh	r3, [r3, #10]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	fb03 f302 	mul.w	r3, r3, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2140      	movs	r1, #64	; 0x40
 8004eac:	4820      	ldr	r0, [pc, #128]	; (8004f30 <W25qxx_ReadPage+0xf4>)
 8004eae:	f003 faa5 	bl	80083fc <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004eb2:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <W25qxx_ReadPage+0xf0>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d909      	bls.n	8004ece <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8004eba:	200c      	movs	r0, #12
 8004ebc:	f7ff fc90 	bl	80047e0 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	0e1b      	lsrs	r3, r3, #24
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff fc8a 	bl	80047e0 <W25qxx_Spi>
 8004ecc:	e002      	b.n	8004ed4 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8004ece:	200b      	movs	r0, #11
 8004ed0:	f7ff fc86 	bl	80047e0 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	0c1b      	lsrs	r3, r3, #16
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fc80 	bl	80047e0 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fc7a 	bl	80047e0 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff fc75 	bl	80047e0 <W25qxx_Spi>
	W25qxx_Spi(0);
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f7ff fc72 	bl	80047e0 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	2364      	movs	r3, #100	; 0x64
 8004f02:	68f9      	ldr	r1, [r7, #12]
 8004f04:	480b      	ldr	r0, [pc, #44]	; (8004f34 <W25qxx_ReadPage+0xf8>)
 8004f06:	f008 fb2d 	bl	800d564 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	2140      	movs	r1, #64	; 0x40
 8004f0e:	4808      	ldr	r0, [pc, #32]	; (8004f30 <W25qxx_ReadPage+0xf4>)
 8004f10:	f003 fa74 	bl	80083fc <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8004f14:	2001      	movs	r0, #1
 8004f16:	f000 f92d 	bl	8005174 <HAL_Delay>
	w25qxx.Lock = 0;
 8004f1a:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <W25qxx_ReadPage+0xf0>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004f22:	bf00      	nop
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	24000838 	.word	0x24000838
 8004f30:	58020400 	.word	0x58020400
 8004f34:	240006a4 	.word	0x240006a4

08004f38 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004f46:	4b2c      	ldr	r3, [pc, #176]	; (8004ff8 <W25qxx_ReadSector+0xc0>)
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d802      	bhi.n	8004f56 <W25qxx_ReadSector+0x1e>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d102      	bne.n	8004f5c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004f56:	4b28      	ldr	r3, [pc, #160]	; (8004ff8 <W25qxx_ReadSector+0xc0>)
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004f5c:	4b26      	ldr	r3, [pc, #152]	; (8004ff8 <W25qxx_ReadSector+0xc0>)
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d243      	bcs.n	8004fee <W25qxx_ReadSector+0xb6>
		return;
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	441a      	add	r2, r3
 8004f6c:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <W25qxx_ReadSector+0xc0>)
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d905      	bls.n	8004f80 <W25qxx_ReadSector+0x48>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004f74:	4b20      	ldr	r3, [pc, #128]	; (8004ff8 <W25qxx_ReadSector+0xc0>)
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	e001      	b.n	8004f84 <W25qxx_ReadSector+0x4c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004f84:	68b8      	ldr	r0, [r7, #8]
 8004f86:	f7ff fe5d 	bl	8004c44 <W25qxx_SectorToPage>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <W25qxx_ReadSector+0xc0>)
 8004f8e:	895b      	ldrh	r3, [r3, #10]
 8004f90:	4619      	mov	r1, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f98:	4413      	add	r3, r2
 8004f9a:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004f9c:	4b16      	ldr	r3, [pc, #88]	; (8004ff8 <W25qxx_ReadSector+0xc0>)
 8004f9e:	895b      	ldrh	r3, [r3, #10]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fa8:	fb02 f201 	mul.w	r2, r2, r1
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	69f9      	ldr	r1, [r7, #28]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f7ff ff40 	bl	8004e3c <W25qxx_ReadPage>
		StartPage++;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004fc2:	4b0d      	ldr	r3, [pc, #52]	; (8004ff8 <W25qxx_ReadSector+0xc0>)
 8004fc4:	895b      	ldrh	r3, [r3, #10]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	1a9a      	subs	r2, r3, r2
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	4413      	add	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <W25qxx_ReadSector+0xc0>)
 8004fd4:	895b      	ldrh	r3, [r3, #10]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dce1      	bgt.n	8004fb0 <W25qxx_ReadSector+0x78>
 8004fec:	e000      	b.n	8004ff0 <W25qxx_ReadSector+0xb8>
		return;
 8004fee:	bf00      	nop
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif
}
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	24000838 	.word	0x24000838

08004ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005034 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005000:	f7ff fb62 	bl	80046c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005004:	480c      	ldr	r0, [pc, #48]	; (8005038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005006:	490d      	ldr	r1, [pc, #52]	; (800503c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005008:	4a0d      	ldr	r2, [pc, #52]	; (8005040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800500a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800500c:	e002      	b.n	8005014 <LoopCopyDataInit>

0800500e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800500e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005012:	3304      	adds	r3, #4

08005014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005018:	d3f9      	bcc.n	800500e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800501a:	4a0a      	ldr	r2, [pc, #40]	; (8005044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800501c:	4c0a      	ldr	r4, [pc, #40]	; (8005048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800501e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005020:	e001      	b.n	8005026 <LoopFillZerobss>

08005022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005024:	3204      	adds	r2, #4

08005026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005028:	d3fb      	bcc.n	8005022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800502a:	f00c fc9d 	bl	8011968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800502e:	f7fd fde5 	bl	8002bfc <main>
  bx  lr
 8005032:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005034:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005038:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800503c:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8005040:	08015210 	.word	0x08015210
  ldr r2, =_sbss
 8005044:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8005048:	24000874 	.word	0x24000874

0800504c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800504c:	e7fe      	b.n	800504c <ADC3_IRQHandler>
	...

08005050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005056:	2003      	movs	r0, #3
 8005058:	f000 f98c 	bl	8005374 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800505c:	f006 fa56 	bl	800b50c <HAL_RCC_GetSysClockFreq>
 8005060:	4602      	mov	r2, r0
 8005062:	4b15      	ldr	r3, [pc, #84]	; (80050b8 <HAL_Init+0x68>)
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	0a1b      	lsrs	r3, r3, #8
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	4913      	ldr	r1, [pc, #76]	; (80050bc <HAL_Init+0x6c>)
 800506e:	5ccb      	ldrb	r3, [r1, r3]
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
 8005078:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800507a:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <HAL_Init+0x68>)
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <HAL_Init+0x6c>)
 8005084:	5cd3      	ldrb	r3, [r2, r3]
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	fa22 f303 	lsr.w	r3, r2, r3
 8005090:	4a0b      	ldr	r2, [pc, #44]	; (80050c0 <HAL_Init+0x70>)
 8005092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005094:	4a0b      	ldr	r2, [pc, #44]	; (80050c4 <HAL_Init+0x74>)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800509a:	200f      	movs	r0, #15
 800509c:	f000 f814 	bl	80050c8 <HAL_InitTick>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e002      	b.n	80050b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80050aa:	f7fe fccd 	bl	8003a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	58024400 	.word	0x58024400
 80050bc:	08014d34 	.word	0x08014d34
 80050c0:	24000018 	.word	0x24000018
 80050c4:	24000014 	.word	0x24000014

080050c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80050d0:	4b15      	ldr	r3, [pc, #84]	; (8005128 <HAL_InitTick+0x60>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e021      	b.n	8005120 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80050dc:	4b13      	ldr	r3, [pc, #76]	; (800512c <HAL_InitTick+0x64>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4b11      	ldr	r3, [pc, #68]	; (8005128 <HAL_InitTick+0x60>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80050ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f971 	bl	80053da <HAL_SYSTICK_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e00e      	b.n	8005120 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b0f      	cmp	r3, #15
 8005106:	d80a      	bhi.n	800511e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005108:	2200      	movs	r2, #0
 800510a:	6879      	ldr	r1, [r7, #4]
 800510c:	f04f 30ff 	mov.w	r0, #4294967295
 8005110:	f000 f93b 	bl	800538a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005114:	4a06      	ldr	r2, [pc, #24]	; (8005130 <HAL_InitTick+0x68>)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	e000      	b.n	8005120 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	24000020 	.word	0x24000020
 800512c:	24000014 	.word	0x24000014
 8005130:	2400001c 	.word	0x2400001c

08005134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005138:	4b06      	ldr	r3, [pc, #24]	; (8005154 <HAL_IncTick+0x20>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <HAL_IncTick+0x24>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4413      	add	r3, r2
 8005144:	4a04      	ldr	r2, [pc, #16]	; (8005158 <HAL_IncTick+0x24>)
 8005146:	6013      	str	r3, [r2, #0]
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	24000020 	.word	0x24000020
 8005158:	24000860 	.word	0x24000860

0800515c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return uwTick;
 8005160:	4b03      	ldr	r3, [pc, #12]	; (8005170 <HAL_GetTick+0x14>)
 8005162:	681b      	ldr	r3, [r3, #0]
}
 8005164:	4618      	mov	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	24000860 	.word	0x24000860

08005174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800517c:	f7ff ffee 	bl	800515c <HAL_GetTick>
 8005180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518c:	d005      	beq.n	800519a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800518e:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <HAL_Delay+0x44>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800519a:	bf00      	nop
 800519c:	f7ff ffde 	bl	800515c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d8f7      	bhi.n	800519c <HAL_Delay+0x28>
  {
  }
}
 80051ac:	bf00      	nop
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	24000020 	.word	0x24000020

080051bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <HAL_GetREVID+0x14>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	0c1b      	lsrs	r3, r3, #16
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	5c001000 	.word	0x5c001000

080051d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <__NVIC_SetPriorityGrouping+0x40>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051f0:	4013      	ands	r3, r2
 80051f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80051fc:	4b06      	ldr	r3, [pc, #24]	; (8005218 <__NVIC_SetPriorityGrouping+0x44>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005202:	4a04      	ldr	r2, [pc, #16]	; (8005214 <__NVIC_SetPriorityGrouping+0x40>)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	60d3      	str	r3, [r2, #12]
}
 8005208:	bf00      	nop
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	e000ed00 	.word	0xe000ed00
 8005218:	05fa0000 	.word	0x05fa0000

0800521c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800521c:	b480      	push	{r7}
 800521e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005220:	4b04      	ldr	r3, [pc, #16]	; (8005234 <__NVIC_GetPriorityGrouping+0x18>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	0a1b      	lsrs	r3, r3, #8
 8005226:	f003 0307 	and.w	r3, r3, #7
}
 800522a:	4618      	mov	r0, r3
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	e000ed00 	.word	0xe000ed00

08005238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005246:	2b00      	cmp	r3, #0
 8005248:	db0b      	blt.n	8005262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	f003 021f 	and.w	r2, r3, #31
 8005250:	4907      	ldr	r1, [pc, #28]	; (8005270 <__NVIC_EnableIRQ+0x38>)
 8005252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	2001      	movs	r0, #1
 800525a:	fa00 f202 	lsl.w	r2, r0, r2
 800525e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000e100 	.word	0xe000e100

08005274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	6039      	str	r1, [r7, #0]
 800527e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005284:	2b00      	cmp	r3, #0
 8005286:	db0a      	blt.n	800529e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	b2da      	uxtb	r2, r3
 800528c:	490c      	ldr	r1, [pc, #48]	; (80052c0 <__NVIC_SetPriority+0x4c>)
 800528e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005292:	0112      	lsls	r2, r2, #4
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	440b      	add	r3, r1
 8005298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800529c:	e00a      	b.n	80052b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	4908      	ldr	r1, [pc, #32]	; (80052c4 <__NVIC_SetPriority+0x50>)
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	3b04      	subs	r3, #4
 80052ac:	0112      	lsls	r2, r2, #4
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	440b      	add	r3, r1
 80052b2:	761a      	strb	r2, [r3, #24]
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	e000e100 	.word	0xe000e100
 80052c4:	e000ed00 	.word	0xe000ed00

080052c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b089      	sub	sp, #36	; 0x24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f1c3 0307 	rsb	r3, r3, #7
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	bf28      	it	cs
 80052e6:	2304      	movcs	r3, #4
 80052e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3304      	adds	r3, #4
 80052ee:	2b06      	cmp	r3, #6
 80052f0:	d902      	bls.n	80052f8 <NVIC_EncodePriority+0x30>
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	3b03      	subs	r3, #3
 80052f6:	e000      	b.n	80052fa <NVIC_EncodePriority+0x32>
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43da      	mvns	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	401a      	ands	r2, r3
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005310:	f04f 31ff 	mov.w	r1, #4294967295
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	fa01 f303 	lsl.w	r3, r1, r3
 800531a:	43d9      	mvns	r1, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005320:	4313      	orrs	r3, r2
         );
}
 8005322:	4618      	mov	r0, r3
 8005324:	3724      	adds	r7, #36	; 0x24
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3b01      	subs	r3, #1
 800533c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005340:	d301      	bcc.n	8005346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005342:	2301      	movs	r3, #1
 8005344:	e00f      	b.n	8005366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005346:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <SysTick_Config+0x40>)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3b01      	subs	r3, #1
 800534c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800534e:	210f      	movs	r1, #15
 8005350:	f04f 30ff 	mov.w	r0, #4294967295
 8005354:	f7ff ff8e 	bl	8005274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <SysTick_Config+0x40>)
 800535a:	2200      	movs	r2, #0
 800535c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800535e:	4b04      	ldr	r3, [pc, #16]	; (8005370 <SysTick_Config+0x40>)
 8005360:	2207      	movs	r2, #7
 8005362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	e000e010 	.word	0xe000e010

08005374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff ff29 	bl	80051d4 <__NVIC_SetPriorityGrouping>
}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b086      	sub	sp, #24
 800538e:	af00      	add	r7, sp, #0
 8005390:	4603      	mov	r3, r0
 8005392:	60b9      	str	r1, [r7, #8]
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005398:	f7ff ff40 	bl	800521c <__NVIC_GetPriorityGrouping>
 800539c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	6978      	ldr	r0, [r7, #20]
 80053a4:	f7ff ff90 	bl	80052c8 <NVIC_EncodePriority>
 80053a8:	4602      	mov	r2, r0
 80053aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053ae:	4611      	mov	r1, r2
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff ff5f 	bl	8005274 <__NVIC_SetPriority>
}
 80053b6:	bf00      	nop
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b082      	sub	sp, #8
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	4603      	mov	r3, r0
 80053c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff ff33 	bl	8005238 <__NVIC_EnableIRQ>
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b082      	sub	sp, #8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff ffa4 	bl	8005330 <SysTick_Config>
 80053e8:	4603      	mov	r3, r0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80053fc:	f7ff feae 	bl	800515c <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e316      	b.n	8005a3a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a66      	ldr	r2, [pc, #408]	; (80055ac <HAL_DMA_Init+0x1b8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d04a      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a65      	ldr	r2, [pc, #404]	; (80055b0 <HAL_DMA_Init+0x1bc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d045      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a63      	ldr	r2, [pc, #396]	; (80055b4 <HAL_DMA_Init+0x1c0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d040      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a62      	ldr	r2, [pc, #392]	; (80055b8 <HAL_DMA_Init+0x1c4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d03b      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a60      	ldr	r2, [pc, #384]	; (80055bc <HAL_DMA_Init+0x1c8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d036      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a5f      	ldr	r2, [pc, #380]	; (80055c0 <HAL_DMA_Init+0x1cc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d031      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a5d      	ldr	r2, [pc, #372]	; (80055c4 <HAL_DMA_Init+0x1d0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d02c      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a5c      	ldr	r2, [pc, #368]	; (80055c8 <HAL_DMA_Init+0x1d4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d027      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a5a      	ldr	r2, [pc, #360]	; (80055cc <HAL_DMA_Init+0x1d8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d022      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a59      	ldr	r2, [pc, #356]	; (80055d0 <HAL_DMA_Init+0x1dc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d01d      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a57      	ldr	r2, [pc, #348]	; (80055d4 <HAL_DMA_Init+0x1e0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d018      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a56      	ldr	r2, [pc, #344]	; (80055d8 <HAL_DMA_Init+0x1e4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a54      	ldr	r2, [pc, #336]	; (80055dc <HAL_DMA_Init+0x1e8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00e      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a53      	ldr	r2, [pc, #332]	; (80055e0 <HAL_DMA_Init+0x1ec>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d009      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a51      	ldr	r2, [pc, #324]	; (80055e4 <HAL_DMA_Init+0x1f0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_DMA_Init+0xb8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a50      	ldr	r2, [pc, #320]	; (80055e8 <HAL_DMA_Init+0x1f4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d101      	bne.n	80054b0 <HAL_DMA_Init+0xbc>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <HAL_DMA_Init+0xbe>
 80054b0:	2300      	movs	r3, #0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 813b 	beq.w	800572e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a37      	ldr	r2, [pc, #220]	; (80055ac <HAL_DMA_Init+0x1b8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d04a      	beq.n	8005568 <HAL_DMA_Init+0x174>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a36      	ldr	r2, [pc, #216]	; (80055b0 <HAL_DMA_Init+0x1bc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d045      	beq.n	8005568 <HAL_DMA_Init+0x174>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a34      	ldr	r2, [pc, #208]	; (80055b4 <HAL_DMA_Init+0x1c0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d040      	beq.n	8005568 <HAL_DMA_Init+0x174>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a33      	ldr	r2, [pc, #204]	; (80055b8 <HAL_DMA_Init+0x1c4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d03b      	beq.n	8005568 <HAL_DMA_Init+0x174>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a31      	ldr	r2, [pc, #196]	; (80055bc <HAL_DMA_Init+0x1c8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d036      	beq.n	8005568 <HAL_DMA_Init+0x174>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a30      	ldr	r2, [pc, #192]	; (80055c0 <HAL_DMA_Init+0x1cc>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d031      	beq.n	8005568 <HAL_DMA_Init+0x174>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a2e      	ldr	r2, [pc, #184]	; (80055c4 <HAL_DMA_Init+0x1d0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d02c      	beq.n	8005568 <HAL_DMA_Init+0x174>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2d      	ldr	r2, [pc, #180]	; (80055c8 <HAL_DMA_Init+0x1d4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d027      	beq.n	8005568 <HAL_DMA_Init+0x174>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a2b      	ldr	r2, [pc, #172]	; (80055cc <HAL_DMA_Init+0x1d8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d022      	beq.n	8005568 <HAL_DMA_Init+0x174>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a2a      	ldr	r2, [pc, #168]	; (80055d0 <HAL_DMA_Init+0x1dc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d01d      	beq.n	8005568 <HAL_DMA_Init+0x174>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a28      	ldr	r2, [pc, #160]	; (80055d4 <HAL_DMA_Init+0x1e0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d018      	beq.n	8005568 <HAL_DMA_Init+0x174>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a27      	ldr	r2, [pc, #156]	; (80055d8 <HAL_DMA_Init+0x1e4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d013      	beq.n	8005568 <HAL_DMA_Init+0x174>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a25      	ldr	r2, [pc, #148]	; (80055dc <HAL_DMA_Init+0x1e8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00e      	beq.n	8005568 <HAL_DMA_Init+0x174>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a24      	ldr	r2, [pc, #144]	; (80055e0 <HAL_DMA_Init+0x1ec>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d009      	beq.n	8005568 <HAL_DMA_Init+0x174>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a22      	ldr	r2, [pc, #136]	; (80055e4 <HAL_DMA_Init+0x1f0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d004      	beq.n	8005568 <HAL_DMA_Init+0x174>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a21      	ldr	r2, [pc, #132]	; (80055e8 <HAL_DMA_Init+0x1f4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d108      	bne.n	800557a <HAL_DMA_Init+0x186>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0201 	bic.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e007      	b.n	800558a <HAL_DMA_Init+0x196>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0201 	bic.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800558a:	e02f      	b.n	80055ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800558c:	f7ff fde6 	bl	800515c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b05      	cmp	r3, #5
 8005598:	d928      	bls.n	80055ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2203      	movs	r2, #3
 80055a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e246      	b.n	8005a3a <HAL_DMA_Init+0x646>
 80055ac:	40020010 	.word	0x40020010
 80055b0:	40020028 	.word	0x40020028
 80055b4:	40020040 	.word	0x40020040
 80055b8:	40020058 	.word	0x40020058
 80055bc:	40020070 	.word	0x40020070
 80055c0:	40020088 	.word	0x40020088
 80055c4:	400200a0 	.word	0x400200a0
 80055c8:	400200b8 	.word	0x400200b8
 80055cc:	40020410 	.word	0x40020410
 80055d0:	40020428 	.word	0x40020428
 80055d4:	40020440 	.word	0x40020440
 80055d8:	40020458 	.word	0x40020458
 80055dc:	40020470 	.word	0x40020470
 80055e0:	40020488 	.word	0x40020488
 80055e4:	400204a0 	.word	0x400204a0
 80055e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1c8      	bne.n	800558c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4b83      	ldr	r3, [pc, #524]	; (8005814 <HAL_DMA_Init+0x420>)
 8005606:	4013      	ands	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005612:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800561e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800562a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	2b04      	cmp	r3, #4
 800563e:	d107      	bne.n	8005650 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	4313      	orrs	r3, r2
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005650:	4b71      	ldr	r3, [pc, #452]	; (8005818 <HAL_DMA_Init+0x424>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4b71      	ldr	r3, [pc, #452]	; (800581c <HAL_DMA_Init+0x428>)
 8005656:	4013      	ands	r3, r2
 8005658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800565c:	d328      	bcc.n	80056b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b28      	cmp	r3, #40	; 0x28
 8005664:	d903      	bls.n	800566e <HAL_DMA_Init+0x27a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2b2e      	cmp	r3, #46	; 0x2e
 800566c:	d917      	bls.n	800569e <HAL_DMA_Init+0x2aa>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b3e      	cmp	r3, #62	; 0x3e
 8005674:	d903      	bls.n	800567e <HAL_DMA_Init+0x28a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b42      	cmp	r3, #66	; 0x42
 800567c:	d90f      	bls.n	800569e <HAL_DMA_Init+0x2aa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	2b46      	cmp	r3, #70	; 0x46
 8005684:	d903      	bls.n	800568e <HAL_DMA_Init+0x29a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b48      	cmp	r3, #72	; 0x48
 800568c:	d907      	bls.n	800569e <HAL_DMA_Init+0x2aa>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b4e      	cmp	r3, #78	; 0x4e
 8005694:	d905      	bls.n	80056a2 <HAL_DMA_Init+0x2ae>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b52      	cmp	r3, #82	; 0x52
 800569c:	d801      	bhi.n	80056a2 <HAL_DMA_Init+0x2ae>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <HAL_DMA_Init+0x2b0>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f023 0307 	bic.w	r3, r3, #7
 80056c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d117      	bne.n	800570a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00e      	beq.n	800570a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f002 fb4b 	bl	8007d88 <DMA_CheckFifoParam>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2240      	movs	r2, #64	; 0x40
 80056fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e197      	b.n	8005a3a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f002 fa86 	bl	8007c24 <DMA_CalcBaseAndBitshift>
 8005718:	4603      	mov	r3, r0
 800571a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	223f      	movs	r2, #63	; 0x3f
 8005726:	409a      	lsls	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	609a      	str	r2, [r3, #8]
 800572c:	e0cd      	b.n	80058ca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a3b      	ldr	r2, [pc, #236]	; (8005820 <HAL_DMA_Init+0x42c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d022      	beq.n	800577e <HAL_DMA_Init+0x38a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a39      	ldr	r2, [pc, #228]	; (8005824 <HAL_DMA_Init+0x430>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d01d      	beq.n	800577e <HAL_DMA_Init+0x38a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a38      	ldr	r2, [pc, #224]	; (8005828 <HAL_DMA_Init+0x434>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d018      	beq.n	800577e <HAL_DMA_Init+0x38a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a36      	ldr	r2, [pc, #216]	; (800582c <HAL_DMA_Init+0x438>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d013      	beq.n	800577e <HAL_DMA_Init+0x38a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a35      	ldr	r2, [pc, #212]	; (8005830 <HAL_DMA_Init+0x43c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00e      	beq.n	800577e <HAL_DMA_Init+0x38a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a33      	ldr	r2, [pc, #204]	; (8005834 <HAL_DMA_Init+0x440>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d009      	beq.n	800577e <HAL_DMA_Init+0x38a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a32      	ldr	r2, [pc, #200]	; (8005838 <HAL_DMA_Init+0x444>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_DMA_Init+0x38a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a30      	ldr	r2, [pc, #192]	; (800583c <HAL_DMA_Init+0x448>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d101      	bne.n	8005782 <HAL_DMA_Init+0x38e>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <HAL_DMA_Init+0x390>
 8005782:	2300      	movs	r3, #0
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8097 	beq.w	80058b8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a24      	ldr	r2, [pc, #144]	; (8005820 <HAL_DMA_Init+0x42c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d021      	beq.n	80057d8 <HAL_DMA_Init+0x3e4>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a22      	ldr	r2, [pc, #136]	; (8005824 <HAL_DMA_Init+0x430>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01c      	beq.n	80057d8 <HAL_DMA_Init+0x3e4>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a21      	ldr	r2, [pc, #132]	; (8005828 <HAL_DMA_Init+0x434>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d017      	beq.n	80057d8 <HAL_DMA_Init+0x3e4>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1f      	ldr	r2, [pc, #124]	; (800582c <HAL_DMA_Init+0x438>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d012      	beq.n	80057d8 <HAL_DMA_Init+0x3e4>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <HAL_DMA_Init+0x43c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00d      	beq.n	80057d8 <HAL_DMA_Init+0x3e4>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <HAL_DMA_Init+0x440>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d008      	beq.n	80057d8 <HAL_DMA_Init+0x3e4>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <HAL_DMA_Init+0x444>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d003      	beq.n	80057d8 <HAL_DMA_Init+0x3e4>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a19      	ldr	r2, [pc, #100]	; (800583c <HAL_DMA_Init+0x448>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2202      	movs	r2, #2
 80057e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	4b12      	ldr	r3, [pc, #72]	; (8005840 <HAL_DMA_Init+0x44c>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d020      	beq.n	8005844 <HAL_DMA_Init+0x450>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b80      	cmp	r3, #128	; 0x80
 8005808:	d102      	bne.n	8005810 <HAL_DMA_Init+0x41c>
 800580a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800580e:	e01a      	b.n	8005846 <HAL_DMA_Init+0x452>
 8005810:	2300      	movs	r3, #0
 8005812:	e018      	b.n	8005846 <HAL_DMA_Init+0x452>
 8005814:	fe10803f 	.word	0xfe10803f
 8005818:	5c001000 	.word	0x5c001000
 800581c:	ffff0000 	.word	0xffff0000
 8005820:	58025408 	.word	0x58025408
 8005824:	5802541c 	.word	0x5802541c
 8005828:	58025430 	.word	0x58025430
 800582c:	58025444 	.word	0x58025444
 8005830:	58025458 	.word	0x58025458
 8005834:	5802546c 	.word	0x5802546c
 8005838:	58025480 	.word	0x58025480
 800583c:	58025494 	.word	0x58025494
 8005840:	fffe000f 	.word	0xfffe000f
 8005844:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68d2      	ldr	r2, [r2, #12]
 800584a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800584c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800585c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005864:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800586c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005874:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	4b6e      	ldr	r3, [pc, #440]	; (8005a44 <HAL_DMA_Init+0x650>)
 800588c:	4413      	add	r3, r2
 800588e:	4a6e      	ldr	r2, [pc, #440]	; (8005a48 <HAL_DMA_Init+0x654>)
 8005890:	fba2 2303 	umull	r2, r3, r2, r3
 8005894:	091b      	lsrs	r3, r3, #4
 8005896:	009a      	lsls	r2, r3, #2
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f002 f9c1 	bl	8007c24 <DMA_CalcBaseAndBitshift>
 80058a2:	4603      	mov	r3, r0
 80058a4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	2201      	movs	r2, #1
 80058b0:	409a      	lsls	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	e008      	b.n	80058ca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2240      	movs	r2, #64	; 0x40
 80058bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2203      	movs	r2, #3
 80058c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e0b7      	b.n	8005a3a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a5f      	ldr	r2, [pc, #380]	; (8005a4c <HAL_DMA_Init+0x658>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d072      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a5d      	ldr	r2, [pc, #372]	; (8005a50 <HAL_DMA_Init+0x65c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d06d      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a5c      	ldr	r2, [pc, #368]	; (8005a54 <HAL_DMA_Init+0x660>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d068      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a5a      	ldr	r2, [pc, #360]	; (8005a58 <HAL_DMA_Init+0x664>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d063      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a59      	ldr	r2, [pc, #356]	; (8005a5c <HAL_DMA_Init+0x668>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d05e      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a57      	ldr	r2, [pc, #348]	; (8005a60 <HAL_DMA_Init+0x66c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d059      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a56      	ldr	r2, [pc, #344]	; (8005a64 <HAL_DMA_Init+0x670>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d054      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a54      	ldr	r2, [pc, #336]	; (8005a68 <HAL_DMA_Init+0x674>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d04f      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a53      	ldr	r2, [pc, #332]	; (8005a6c <HAL_DMA_Init+0x678>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d04a      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a51      	ldr	r2, [pc, #324]	; (8005a70 <HAL_DMA_Init+0x67c>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d045      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a50      	ldr	r2, [pc, #320]	; (8005a74 <HAL_DMA_Init+0x680>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d040      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a4e      	ldr	r2, [pc, #312]	; (8005a78 <HAL_DMA_Init+0x684>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d03b      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a4d      	ldr	r2, [pc, #308]	; (8005a7c <HAL_DMA_Init+0x688>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d036      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a4b      	ldr	r2, [pc, #300]	; (8005a80 <HAL_DMA_Init+0x68c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d031      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a4a      	ldr	r2, [pc, #296]	; (8005a84 <HAL_DMA_Init+0x690>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d02c      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a48      	ldr	r2, [pc, #288]	; (8005a88 <HAL_DMA_Init+0x694>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d027      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a47      	ldr	r2, [pc, #284]	; (8005a8c <HAL_DMA_Init+0x698>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d022      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a45      	ldr	r2, [pc, #276]	; (8005a90 <HAL_DMA_Init+0x69c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d01d      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a44      	ldr	r2, [pc, #272]	; (8005a94 <HAL_DMA_Init+0x6a0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d018      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a42      	ldr	r2, [pc, #264]	; (8005a98 <HAL_DMA_Init+0x6a4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d013      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a41      	ldr	r2, [pc, #260]	; (8005a9c <HAL_DMA_Init+0x6a8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00e      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a3f      	ldr	r2, [pc, #252]	; (8005aa0 <HAL_DMA_Init+0x6ac>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d009      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a3e      	ldr	r2, [pc, #248]	; (8005aa4 <HAL_DMA_Init+0x6b0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d004      	beq.n	80059ba <HAL_DMA_Init+0x5c6>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a3c      	ldr	r2, [pc, #240]	; (8005aa8 <HAL_DMA_Init+0x6b4>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d101      	bne.n	80059be <HAL_DMA_Init+0x5ca>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <HAL_DMA_Init+0x5cc>
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d032      	beq.n	8005a2a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f002 fa5b 	bl	8007e80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	2b80      	cmp	r3, #128	; 0x80
 80059d0:	d102      	bne.n	80059d8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d010      	beq.n	8005a18 <HAL_DMA_Init+0x624>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d80c      	bhi.n	8005a18 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f002 fad8 	bl	8007fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	e008      	b.n	8005a2a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	a7fdabf8 	.word	0xa7fdabf8
 8005a48:	cccccccd 	.word	0xcccccccd
 8005a4c:	40020010 	.word	0x40020010
 8005a50:	40020028 	.word	0x40020028
 8005a54:	40020040 	.word	0x40020040
 8005a58:	40020058 	.word	0x40020058
 8005a5c:	40020070 	.word	0x40020070
 8005a60:	40020088 	.word	0x40020088
 8005a64:	400200a0 	.word	0x400200a0
 8005a68:	400200b8 	.word	0x400200b8
 8005a6c:	40020410 	.word	0x40020410
 8005a70:	40020428 	.word	0x40020428
 8005a74:	40020440 	.word	0x40020440
 8005a78:	40020458 	.word	0x40020458
 8005a7c:	40020470 	.word	0x40020470
 8005a80:	40020488 	.word	0x40020488
 8005a84:	400204a0 	.word	0x400204a0
 8005a88:	400204b8 	.word	0x400204b8
 8005a8c:	58025408 	.word	0x58025408
 8005a90:	5802541c 	.word	0x5802541c
 8005a94:	58025430 	.word	0x58025430
 8005a98:	58025444 	.word	0x58025444
 8005a9c:	58025458 	.word	0x58025458
 8005aa0:	5802546c 	.word	0x5802546c
 8005aa4:	58025480 	.word	0x58025480
 8005aa8:	58025494 	.word	0x58025494

08005aac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e226      	b.n	8005f16 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_DMA_Start_IT+0x2a>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e21f      	b.n	8005f16 <HAL_DMA_Start_IT+0x46a>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	f040 820a 	bne.w	8005f00 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a68      	ldr	r2, [pc, #416]	; (8005ca0 <HAL_DMA_Start_IT+0x1f4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d04a      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a66      	ldr	r2, [pc, #408]	; (8005ca4 <HAL_DMA_Start_IT+0x1f8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d045      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a65      	ldr	r2, [pc, #404]	; (8005ca8 <HAL_DMA_Start_IT+0x1fc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d040      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a63      	ldr	r2, [pc, #396]	; (8005cac <HAL_DMA_Start_IT+0x200>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d03b      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a62      	ldr	r2, [pc, #392]	; (8005cb0 <HAL_DMA_Start_IT+0x204>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d036      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a60      	ldr	r2, [pc, #384]	; (8005cb4 <HAL_DMA_Start_IT+0x208>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d031      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a5f      	ldr	r2, [pc, #380]	; (8005cb8 <HAL_DMA_Start_IT+0x20c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d02c      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a5d      	ldr	r2, [pc, #372]	; (8005cbc <HAL_DMA_Start_IT+0x210>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d027      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a5c      	ldr	r2, [pc, #368]	; (8005cc0 <HAL_DMA_Start_IT+0x214>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d022      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a5a      	ldr	r2, [pc, #360]	; (8005cc4 <HAL_DMA_Start_IT+0x218>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01d      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a59      	ldr	r2, [pc, #356]	; (8005cc8 <HAL_DMA_Start_IT+0x21c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d018      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a57      	ldr	r2, [pc, #348]	; (8005ccc <HAL_DMA_Start_IT+0x220>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a56      	ldr	r2, [pc, #344]	; (8005cd0 <HAL_DMA_Start_IT+0x224>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00e      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a54      	ldr	r2, [pc, #336]	; (8005cd4 <HAL_DMA_Start_IT+0x228>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d009      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a53      	ldr	r2, [pc, #332]	; (8005cd8 <HAL_DMA_Start_IT+0x22c>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <HAL_DMA_Start_IT+0xee>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a51      	ldr	r2, [pc, #324]	; (8005cdc <HAL_DMA_Start_IT+0x230>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d108      	bne.n	8005bac <HAL_DMA_Start_IT+0x100>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0201 	bic.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e007      	b.n	8005bbc <HAL_DMA_Start_IT+0x110>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0201 	bic.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f001 fe82 	bl	80078cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a34      	ldr	r2, [pc, #208]	; (8005ca0 <HAL_DMA_Start_IT+0x1f4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d04a      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a33      	ldr	r2, [pc, #204]	; (8005ca4 <HAL_DMA_Start_IT+0x1f8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d045      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a31      	ldr	r2, [pc, #196]	; (8005ca8 <HAL_DMA_Start_IT+0x1fc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d040      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a30      	ldr	r2, [pc, #192]	; (8005cac <HAL_DMA_Start_IT+0x200>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d03b      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a2e      	ldr	r2, [pc, #184]	; (8005cb0 <HAL_DMA_Start_IT+0x204>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d036      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a2d      	ldr	r2, [pc, #180]	; (8005cb4 <HAL_DMA_Start_IT+0x208>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d031      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2b      	ldr	r2, [pc, #172]	; (8005cb8 <HAL_DMA_Start_IT+0x20c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d02c      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a2a      	ldr	r2, [pc, #168]	; (8005cbc <HAL_DMA_Start_IT+0x210>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d027      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a28      	ldr	r2, [pc, #160]	; (8005cc0 <HAL_DMA_Start_IT+0x214>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d022      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a27      	ldr	r2, [pc, #156]	; (8005cc4 <HAL_DMA_Start_IT+0x218>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d01d      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a25      	ldr	r2, [pc, #148]	; (8005cc8 <HAL_DMA_Start_IT+0x21c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d018      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a24      	ldr	r2, [pc, #144]	; (8005ccc <HAL_DMA_Start_IT+0x220>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d013      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a22      	ldr	r2, [pc, #136]	; (8005cd0 <HAL_DMA_Start_IT+0x224>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00e      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a21      	ldr	r2, [pc, #132]	; (8005cd4 <HAL_DMA_Start_IT+0x228>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d009      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a1f      	ldr	r2, [pc, #124]	; (8005cd8 <HAL_DMA_Start_IT+0x22c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d004      	beq.n	8005c68 <HAL_DMA_Start_IT+0x1bc>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a1e      	ldr	r2, [pc, #120]	; (8005cdc <HAL_DMA_Start_IT+0x230>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d101      	bne.n	8005c6c <HAL_DMA_Start_IT+0x1c0>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <HAL_DMA_Start_IT+0x1c2>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d036      	beq.n	8005ce0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f023 021e 	bic.w	r2, r3, #30
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0216 	orr.w	r2, r2, #22
 8005c84:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d03e      	beq.n	8005d0c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0208 	orr.w	r2, r2, #8
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	e035      	b.n	8005d0c <HAL_DMA_Start_IT+0x260>
 8005ca0:	40020010 	.word	0x40020010
 8005ca4:	40020028 	.word	0x40020028
 8005ca8:	40020040 	.word	0x40020040
 8005cac:	40020058 	.word	0x40020058
 8005cb0:	40020070 	.word	0x40020070
 8005cb4:	40020088 	.word	0x40020088
 8005cb8:	400200a0 	.word	0x400200a0
 8005cbc:	400200b8 	.word	0x400200b8
 8005cc0:	40020410 	.word	0x40020410
 8005cc4:	40020428 	.word	0x40020428
 8005cc8:	40020440 	.word	0x40020440
 8005ccc:	40020458 	.word	0x40020458
 8005cd0:	40020470 	.word	0x40020470
 8005cd4:	40020488 	.word	0x40020488
 8005cd8:	400204a0 	.word	0x400204a0
 8005cdc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 020e 	bic.w	r2, r3, #14
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 020a 	orr.w	r2, r2, #10
 8005cf2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0204 	orr.w	r2, r2, #4
 8005d0a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a83      	ldr	r2, [pc, #524]	; (8005f20 <HAL_DMA_Start_IT+0x474>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d072      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a82      	ldr	r2, [pc, #520]	; (8005f24 <HAL_DMA_Start_IT+0x478>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d06d      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a80      	ldr	r2, [pc, #512]	; (8005f28 <HAL_DMA_Start_IT+0x47c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d068      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a7f      	ldr	r2, [pc, #508]	; (8005f2c <HAL_DMA_Start_IT+0x480>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d063      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a7d      	ldr	r2, [pc, #500]	; (8005f30 <HAL_DMA_Start_IT+0x484>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d05e      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a7c      	ldr	r2, [pc, #496]	; (8005f34 <HAL_DMA_Start_IT+0x488>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d059      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a7a      	ldr	r2, [pc, #488]	; (8005f38 <HAL_DMA_Start_IT+0x48c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d054      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a79      	ldr	r2, [pc, #484]	; (8005f3c <HAL_DMA_Start_IT+0x490>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d04f      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a77      	ldr	r2, [pc, #476]	; (8005f40 <HAL_DMA_Start_IT+0x494>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d04a      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a76      	ldr	r2, [pc, #472]	; (8005f44 <HAL_DMA_Start_IT+0x498>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d045      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a74      	ldr	r2, [pc, #464]	; (8005f48 <HAL_DMA_Start_IT+0x49c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d040      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a73      	ldr	r2, [pc, #460]	; (8005f4c <HAL_DMA_Start_IT+0x4a0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d03b      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a71      	ldr	r2, [pc, #452]	; (8005f50 <HAL_DMA_Start_IT+0x4a4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d036      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a70      	ldr	r2, [pc, #448]	; (8005f54 <HAL_DMA_Start_IT+0x4a8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d031      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a6e      	ldr	r2, [pc, #440]	; (8005f58 <HAL_DMA_Start_IT+0x4ac>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02c      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a6d      	ldr	r2, [pc, #436]	; (8005f5c <HAL_DMA_Start_IT+0x4b0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d027      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a6b      	ldr	r2, [pc, #428]	; (8005f60 <HAL_DMA_Start_IT+0x4b4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d022      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a6a      	ldr	r2, [pc, #424]	; (8005f64 <HAL_DMA_Start_IT+0x4b8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d01d      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a68      	ldr	r2, [pc, #416]	; (8005f68 <HAL_DMA_Start_IT+0x4bc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a67      	ldr	r2, [pc, #412]	; (8005f6c <HAL_DMA_Start_IT+0x4c0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a65      	ldr	r2, [pc, #404]	; (8005f70 <HAL_DMA_Start_IT+0x4c4>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a64      	ldr	r2, [pc, #400]	; (8005f74 <HAL_DMA_Start_IT+0x4c8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a62      	ldr	r2, [pc, #392]	; (8005f78 <HAL_DMA_Start_IT+0x4cc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_DMA_Start_IT+0x350>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a61      	ldr	r2, [pc, #388]	; (8005f7c <HAL_DMA_Start_IT+0x4d0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d101      	bne.n	8005e00 <HAL_DMA_Start_IT+0x354>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <HAL_DMA_Start_IT+0x356>
 8005e00:	2300      	movs	r3, #0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01a      	beq.n	8005e3c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e22:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e3a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a37      	ldr	r2, [pc, #220]	; (8005f20 <HAL_DMA_Start_IT+0x474>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d04a      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a36      	ldr	r2, [pc, #216]	; (8005f24 <HAL_DMA_Start_IT+0x478>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d045      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a34      	ldr	r2, [pc, #208]	; (8005f28 <HAL_DMA_Start_IT+0x47c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d040      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a33      	ldr	r2, [pc, #204]	; (8005f2c <HAL_DMA_Start_IT+0x480>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d03b      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a31      	ldr	r2, [pc, #196]	; (8005f30 <HAL_DMA_Start_IT+0x484>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d036      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a30      	ldr	r2, [pc, #192]	; (8005f34 <HAL_DMA_Start_IT+0x488>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d031      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a2e      	ldr	r2, [pc, #184]	; (8005f38 <HAL_DMA_Start_IT+0x48c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d02c      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2d      	ldr	r2, [pc, #180]	; (8005f3c <HAL_DMA_Start_IT+0x490>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d027      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2b      	ldr	r2, [pc, #172]	; (8005f40 <HAL_DMA_Start_IT+0x494>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d022      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2a      	ldr	r2, [pc, #168]	; (8005f44 <HAL_DMA_Start_IT+0x498>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d01d      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a28      	ldr	r2, [pc, #160]	; (8005f48 <HAL_DMA_Start_IT+0x49c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a27      	ldr	r2, [pc, #156]	; (8005f4c <HAL_DMA_Start_IT+0x4a0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a25      	ldr	r2, [pc, #148]	; (8005f50 <HAL_DMA_Start_IT+0x4a4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a24      	ldr	r2, [pc, #144]	; (8005f54 <HAL_DMA_Start_IT+0x4a8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a22      	ldr	r2, [pc, #136]	; (8005f58 <HAL_DMA_Start_IT+0x4ac>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_DMA_Start_IT+0x430>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a21      	ldr	r2, [pc, #132]	; (8005f5c <HAL_DMA_Start_IT+0x4b0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d108      	bne.n	8005eee <HAL_DMA_Start_IT+0x442>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	e012      	b.n	8005f14 <HAL_DMA_Start_IT+0x468>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0201 	orr.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e009      	b.n	8005f14 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	40020010 	.word	0x40020010
 8005f24:	40020028 	.word	0x40020028
 8005f28:	40020040 	.word	0x40020040
 8005f2c:	40020058 	.word	0x40020058
 8005f30:	40020070 	.word	0x40020070
 8005f34:	40020088 	.word	0x40020088
 8005f38:	400200a0 	.word	0x400200a0
 8005f3c:	400200b8 	.word	0x400200b8
 8005f40:	40020410 	.word	0x40020410
 8005f44:	40020428 	.word	0x40020428
 8005f48:	40020440 	.word	0x40020440
 8005f4c:	40020458 	.word	0x40020458
 8005f50:	40020470 	.word	0x40020470
 8005f54:	40020488 	.word	0x40020488
 8005f58:	400204a0 	.word	0x400204a0
 8005f5c:	400204b8 	.word	0x400204b8
 8005f60:	58025408 	.word	0x58025408
 8005f64:	5802541c 	.word	0x5802541c
 8005f68:	58025430 	.word	0x58025430
 8005f6c:	58025444 	.word	0x58025444
 8005f70:	58025458 	.word	0x58025458
 8005f74:	5802546c 	.word	0x5802546c
 8005f78:	58025480 	.word	0x58025480
 8005f7c:	58025494 	.word	0x58025494

08005f80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005f88:	f7ff f8e8 	bl	800515c <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e2dc      	b.n	8006552 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d008      	beq.n	8005fb6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2280      	movs	r2, #128	; 0x80
 8005fa8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e2cd      	b.n	8006552 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a76      	ldr	r2, [pc, #472]	; (8006194 <HAL_DMA_Abort+0x214>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d04a      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a74      	ldr	r2, [pc, #464]	; (8006198 <HAL_DMA_Abort+0x218>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d045      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a73      	ldr	r2, [pc, #460]	; (800619c <HAL_DMA_Abort+0x21c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d040      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a71      	ldr	r2, [pc, #452]	; (80061a0 <HAL_DMA_Abort+0x220>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d03b      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a70      	ldr	r2, [pc, #448]	; (80061a4 <HAL_DMA_Abort+0x224>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d036      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a6e      	ldr	r2, [pc, #440]	; (80061a8 <HAL_DMA_Abort+0x228>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d031      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a6d      	ldr	r2, [pc, #436]	; (80061ac <HAL_DMA_Abort+0x22c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d02c      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a6b      	ldr	r2, [pc, #428]	; (80061b0 <HAL_DMA_Abort+0x230>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d027      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a6a      	ldr	r2, [pc, #424]	; (80061b4 <HAL_DMA_Abort+0x234>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d022      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a68      	ldr	r2, [pc, #416]	; (80061b8 <HAL_DMA_Abort+0x238>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01d      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a67      	ldr	r2, [pc, #412]	; (80061bc <HAL_DMA_Abort+0x23c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d018      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a65      	ldr	r2, [pc, #404]	; (80061c0 <HAL_DMA_Abort+0x240>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a64      	ldr	r2, [pc, #400]	; (80061c4 <HAL_DMA_Abort+0x244>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00e      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a62      	ldr	r2, [pc, #392]	; (80061c8 <HAL_DMA_Abort+0x248>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a61      	ldr	r2, [pc, #388]	; (80061cc <HAL_DMA_Abort+0x24c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_DMA_Abort+0xd6>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a5f      	ldr	r2, [pc, #380]	; (80061d0 <HAL_DMA_Abort+0x250>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d101      	bne.n	800605a <HAL_DMA_Abort+0xda>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <HAL_DMA_Abort+0xdc>
 800605a:	2300      	movs	r3, #0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d013      	beq.n	8006088 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 021e 	bic.w	r2, r2, #30
 800606e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695a      	ldr	r2, [r3, #20]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800607e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e00a      	b.n	800609e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 020e 	bic.w	r2, r2, #14
 8006096:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a3c      	ldr	r2, [pc, #240]	; (8006194 <HAL_DMA_Abort+0x214>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d072      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a3a      	ldr	r2, [pc, #232]	; (8006198 <HAL_DMA_Abort+0x218>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d06d      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a39      	ldr	r2, [pc, #228]	; (800619c <HAL_DMA_Abort+0x21c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d068      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a37      	ldr	r2, [pc, #220]	; (80061a0 <HAL_DMA_Abort+0x220>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d063      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a36      	ldr	r2, [pc, #216]	; (80061a4 <HAL_DMA_Abort+0x224>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d05e      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a34      	ldr	r2, [pc, #208]	; (80061a8 <HAL_DMA_Abort+0x228>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d059      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a33      	ldr	r2, [pc, #204]	; (80061ac <HAL_DMA_Abort+0x22c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d054      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a31      	ldr	r2, [pc, #196]	; (80061b0 <HAL_DMA_Abort+0x230>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d04f      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a30      	ldr	r2, [pc, #192]	; (80061b4 <HAL_DMA_Abort+0x234>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d04a      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2e      	ldr	r2, [pc, #184]	; (80061b8 <HAL_DMA_Abort+0x238>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d045      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a2d      	ldr	r2, [pc, #180]	; (80061bc <HAL_DMA_Abort+0x23c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d040      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a2b      	ldr	r2, [pc, #172]	; (80061c0 <HAL_DMA_Abort+0x240>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d03b      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a2a      	ldr	r2, [pc, #168]	; (80061c4 <HAL_DMA_Abort+0x244>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d036      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a28      	ldr	r2, [pc, #160]	; (80061c8 <HAL_DMA_Abort+0x248>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d031      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a27      	ldr	r2, [pc, #156]	; (80061cc <HAL_DMA_Abort+0x24c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d02c      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a25      	ldr	r2, [pc, #148]	; (80061d0 <HAL_DMA_Abort+0x250>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d027      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a24      	ldr	r2, [pc, #144]	; (80061d4 <HAL_DMA_Abort+0x254>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d022      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a22      	ldr	r2, [pc, #136]	; (80061d8 <HAL_DMA_Abort+0x258>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d01d      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a21      	ldr	r2, [pc, #132]	; (80061dc <HAL_DMA_Abort+0x25c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d018      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1f      	ldr	r2, [pc, #124]	; (80061e0 <HAL_DMA_Abort+0x260>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <HAL_DMA_Abort+0x264>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00e      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1c      	ldr	r2, [pc, #112]	; (80061e8 <HAL_DMA_Abort+0x268>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d009      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1b      	ldr	r2, [pc, #108]	; (80061ec <HAL_DMA_Abort+0x26c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d004      	beq.n	800618e <HAL_DMA_Abort+0x20e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a19      	ldr	r2, [pc, #100]	; (80061f0 <HAL_DMA_Abort+0x270>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d132      	bne.n	80061f4 <HAL_DMA_Abort+0x274>
 800618e:	2301      	movs	r3, #1
 8006190:	e031      	b.n	80061f6 <HAL_DMA_Abort+0x276>
 8006192:	bf00      	nop
 8006194:	40020010 	.word	0x40020010
 8006198:	40020028 	.word	0x40020028
 800619c:	40020040 	.word	0x40020040
 80061a0:	40020058 	.word	0x40020058
 80061a4:	40020070 	.word	0x40020070
 80061a8:	40020088 	.word	0x40020088
 80061ac:	400200a0 	.word	0x400200a0
 80061b0:	400200b8 	.word	0x400200b8
 80061b4:	40020410 	.word	0x40020410
 80061b8:	40020428 	.word	0x40020428
 80061bc:	40020440 	.word	0x40020440
 80061c0:	40020458 	.word	0x40020458
 80061c4:	40020470 	.word	0x40020470
 80061c8:	40020488 	.word	0x40020488
 80061cc:	400204a0 	.word	0x400204a0
 80061d0:	400204b8 	.word	0x400204b8
 80061d4:	58025408 	.word	0x58025408
 80061d8:	5802541c 	.word	0x5802541c
 80061dc:	58025430 	.word	0x58025430
 80061e0:	58025444 	.word	0x58025444
 80061e4:	58025458 	.word	0x58025458
 80061e8:	5802546c 	.word	0x5802546c
 80061ec:	58025480 	.word	0x58025480
 80061f0:	58025494 	.word	0x58025494
 80061f4:	2300      	movs	r3, #0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006208:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a6d      	ldr	r2, [pc, #436]	; (80063c4 <HAL_DMA_Abort+0x444>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d04a      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a6b      	ldr	r2, [pc, #428]	; (80063c8 <HAL_DMA_Abort+0x448>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d045      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a6a      	ldr	r2, [pc, #424]	; (80063cc <HAL_DMA_Abort+0x44c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d040      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a68      	ldr	r2, [pc, #416]	; (80063d0 <HAL_DMA_Abort+0x450>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d03b      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a67      	ldr	r2, [pc, #412]	; (80063d4 <HAL_DMA_Abort+0x454>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d036      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a65      	ldr	r2, [pc, #404]	; (80063d8 <HAL_DMA_Abort+0x458>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d031      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a64      	ldr	r2, [pc, #400]	; (80063dc <HAL_DMA_Abort+0x45c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d02c      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a62      	ldr	r2, [pc, #392]	; (80063e0 <HAL_DMA_Abort+0x460>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d027      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a61      	ldr	r2, [pc, #388]	; (80063e4 <HAL_DMA_Abort+0x464>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d022      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a5f      	ldr	r2, [pc, #380]	; (80063e8 <HAL_DMA_Abort+0x468>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d01d      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a5e      	ldr	r2, [pc, #376]	; (80063ec <HAL_DMA_Abort+0x46c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d018      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a5c      	ldr	r2, [pc, #368]	; (80063f0 <HAL_DMA_Abort+0x470>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a5b      	ldr	r2, [pc, #364]	; (80063f4 <HAL_DMA_Abort+0x474>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00e      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a59      	ldr	r2, [pc, #356]	; (80063f8 <HAL_DMA_Abort+0x478>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d009      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a58      	ldr	r2, [pc, #352]	; (80063fc <HAL_DMA_Abort+0x47c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d004      	beq.n	80062aa <HAL_DMA_Abort+0x32a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a56      	ldr	r2, [pc, #344]	; (8006400 <HAL_DMA_Abort+0x480>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d108      	bne.n	80062bc <HAL_DMA_Abort+0x33c>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0201 	bic.w	r2, r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e007      	b.n	80062cc <HAL_DMA_Abort+0x34c>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80062cc:	e013      	b.n	80062f6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062ce:	f7fe ff45 	bl	800515c <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b05      	cmp	r3, #5
 80062da:	d90c      	bls.n	80062f6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2220      	movs	r2, #32
 80062e0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2203      	movs	r2, #3
 80062ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e12d      	b.n	8006552 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e5      	bne.n	80062ce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a2f      	ldr	r2, [pc, #188]	; (80063c4 <HAL_DMA_Abort+0x444>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d04a      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a2d      	ldr	r2, [pc, #180]	; (80063c8 <HAL_DMA_Abort+0x448>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d045      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a2c      	ldr	r2, [pc, #176]	; (80063cc <HAL_DMA_Abort+0x44c>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d040      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a2a      	ldr	r2, [pc, #168]	; (80063d0 <HAL_DMA_Abort+0x450>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d03b      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a29      	ldr	r2, [pc, #164]	; (80063d4 <HAL_DMA_Abort+0x454>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d036      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a27      	ldr	r2, [pc, #156]	; (80063d8 <HAL_DMA_Abort+0x458>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d031      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a26      	ldr	r2, [pc, #152]	; (80063dc <HAL_DMA_Abort+0x45c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d02c      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a24      	ldr	r2, [pc, #144]	; (80063e0 <HAL_DMA_Abort+0x460>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d027      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a23      	ldr	r2, [pc, #140]	; (80063e4 <HAL_DMA_Abort+0x464>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d022      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a21      	ldr	r2, [pc, #132]	; (80063e8 <HAL_DMA_Abort+0x468>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d01d      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a20      	ldr	r2, [pc, #128]	; (80063ec <HAL_DMA_Abort+0x46c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d018      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1e      	ldr	r2, [pc, #120]	; (80063f0 <HAL_DMA_Abort+0x470>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <HAL_DMA_Abort+0x474>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00e      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1b      	ldr	r2, [pc, #108]	; (80063f8 <HAL_DMA_Abort+0x478>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d009      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1a      	ldr	r2, [pc, #104]	; (80063fc <HAL_DMA_Abort+0x47c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d004      	beq.n	80063a2 <HAL_DMA_Abort+0x422>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a18      	ldr	r2, [pc, #96]	; (8006400 <HAL_DMA_Abort+0x480>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d101      	bne.n	80063a6 <HAL_DMA_Abort+0x426>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <HAL_DMA_Abort+0x428>
 80063a6:	2300      	movs	r3, #0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d02b      	beq.n	8006404 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	223f      	movs	r2, #63	; 0x3f
 80063bc:	409a      	lsls	r2, r3
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	609a      	str	r2, [r3, #8]
 80063c2:	e02a      	b.n	800641a <HAL_DMA_Abort+0x49a>
 80063c4:	40020010 	.word	0x40020010
 80063c8:	40020028 	.word	0x40020028
 80063cc:	40020040 	.word	0x40020040
 80063d0:	40020058 	.word	0x40020058
 80063d4:	40020070 	.word	0x40020070
 80063d8:	40020088 	.word	0x40020088
 80063dc:	400200a0 	.word	0x400200a0
 80063e0:	400200b8 	.word	0x400200b8
 80063e4:	40020410 	.word	0x40020410
 80063e8:	40020428 	.word	0x40020428
 80063ec:	40020440 	.word	0x40020440
 80063f0:	40020458 	.word	0x40020458
 80063f4:	40020470 	.word	0x40020470
 80063f8:	40020488 	.word	0x40020488
 80063fc:	400204a0 	.word	0x400204a0
 8006400:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006408:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2201      	movs	r2, #1
 8006414:	409a      	lsls	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a4f      	ldr	r2, [pc, #316]	; (800655c <HAL_DMA_Abort+0x5dc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d072      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a4d      	ldr	r2, [pc, #308]	; (8006560 <HAL_DMA_Abort+0x5e0>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d06d      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a4c      	ldr	r2, [pc, #304]	; (8006564 <HAL_DMA_Abort+0x5e4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d068      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a4a      	ldr	r2, [pc, #296]	; (8006568 <HAL_DMA_Abort+0x5e8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d063      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a49      	ldr	r2, [pc, #292]	; (800656c <HAL_DMA_Abort+0x5ec>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d05e      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a47      	ldr	r2, [pc, #284]	; (8006570 <HAL_DMA_Abort+0x5f0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d059      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a46      	ldr	r2, [pc, #280]	; (8006574 <HAL_DMA_Abort+0x5f4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d054      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a44      	ldr	r2, [pc, #272]	; (8006578 <HAL_DMA_Abort+0x5f8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d04f      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a43      	ldr	r2, [pc, #268]	; (800657c <HAL_DMA_Abort+0x5fc>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d04a      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a41      	ldr	r2, [pc, #260]	; (8006580 <HAL_DMA_Abort+0x600>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d045      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a40      	ldr	r2, [pc, #256]	; (8006584 <HAL_DMA_Abort+0x604>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d040      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a3e      	ldr	r2, [pc, #248]	; (8006588 <HAL_DMA_Abort+0x608>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d03b      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a3d      	ldr	r2, [pc, #244]	; (800658c <HAL_DMA_Abort+0x60c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d036      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a3b      	ldr	r2, [pc, #236]	; (8006590 <HAL_DMA_Abort+0x610>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d031      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a3a      	ldr	r2, [pc, #232]	; (8006594 <HAL_DMA_Abort+0x614>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d02c      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a38      	ldr	r2, [pc, #224]	; (8006598 <HAL_DMA_Abort+0x618>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d027      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a37      	ldr	r2, [pc, #220]	; (800659c <HAL_DMA_Abort+0x61c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d022      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a35      	ldr	r2, [pc, #212]	; (80065a0 <HAL_DMA_Abort+0x620>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d01d      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a34      	ldr	r2, [pc, #208]	; (80065a4 <HAL_DMA_Abort+0x624>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d018      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a32      	ldr	r2, [pc, #200]	; (80065a8 <HAL_DMA_Abort+0x628>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d013      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a31      	ldr	r2, [pc, #196]	; (80065ac <HAL_DMA_Abort+0x62c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00e      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2f      	ldr	r2, [pc, #188]	; (80065b0 <HAL_DMA_Abort+0x630>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2e      	ldr	r2, [pc, #184]	; (80065b4 <HAL_DMA_Abort+0x634>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_DMA_Abort+0x58a>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a2c      	ldr	r2, [pc, #176]	; (80065b8 <HAL_DMA_Abort+0x638>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d101      	bne.n	800650e <HAL_DMA_Abort+0x58e>
 800650a:	2301      	movs	r3, #1
 800650c:	e000      	b.n	8006510 <HAL_DMA_Abort+0x590>
 800650e:	2300      	movs	r3, #0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d015      	beq.n	8006540 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800651c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00c      	beq.n	8006540 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006534:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800653e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	40020010 	.word	0x40020010
 8006560:	40020028 	.word	0x40020028
 8006564:	40020040 	.word	0x40020040
 8006568:	40020058 	.word	0x40020058
 800656c:	40020070 	.word	0x40020070
 8006570:	40020088 	.word	0x40020088
 8006574:	400200a0 	.word	0x400200a0
 8006578:	400200b8 	.word	0x400200b8
 800657c:	40020410 	.word	0x40020410
 8006580:	40020428 	.word	0x40020428
 8006584:	40020440 	.word	0x40020440
 8006588:	40020458 	.word	0x40020458
 800658c:	40020470 	.word	0x40020470
 8006590:	40020488 	.word	0x40020488
 8006594:	400204a0 	.word	0x400204a0
 8006598:	400204b8 	.word	0x400204b8
 800659c:	58025408 	.word	0x58025408
 80065a0:	5802541c 	.word	0x5802541c
 80065a4:	58025430 	.word	0x58025430
 80065a8:	58025444 	.word	0x58025444
 80065ac:	58025458 	.word	0x58025458
 80065b0:	5802546c 	.word	0x5802546c
 80065b4:	58025480 	.word	0x58025480
 80065b8:	58025494 	.word	0x58025494

080065bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e205      	b.n	80069da <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d004      	beq.n	80065e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2280      	movs	r2, #128	; 0x80
 80065de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e1fa      	b.n	80069da <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a8c      	ldr	r2, [pc, #560]	; (800681c <HAL_DMA_Abort_IT+0x260>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d04a      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a8b      	ldr	r2, [pc, #556]	; (8006820 <HAL_DMA_Abort_IT+0x264>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d045      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a89      	ldr	r2, [pc, #548]	; (8006824 <HAL_DMA_Abort_IT+0x268>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d040      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a88      	ldr	r2, [pc, #544]	; (8006828 <HAL_DMA_Abort_IT+0x26c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d03b      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a86      	ldr	r2, [pc, #536]	; (800682c <HAL_DMA_Abort_IT+0x270>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d036      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a85      	ldr	r2, [pc, #532]	; (8006830 <HAL_DMA_Abort_IT+0x274>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d031      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a83      	ldr	r2, [pc, #524]	; (8006834 <HAL_DMA_Abort_IT+0x278>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d02c      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a82      	ldr	r2, [pc, #520]	; (8006838 <HAL_DMA_Abort_IT+0x27c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d027      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a80      	ldr	r2, [pc, #512]	; (800683c <HAL_DMA_Abort_IT+0x280>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d022      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a7f      	ldr	r2, [pc, #508]	; (8006840 <HAL_DMA_Abort_IT+0x284>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d01d      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a7d      	ldr	r2, [pc, #500]	; (8006844 <HAL_DMA_Abort_IT+0x288>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d018      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a7c      	ldr	r2, [pc, #496]	; (8006848 <HAL_DMA_Abort_IT+0x28c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d013      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a7a      	ldr	r2, [pc, #488]	; (800684c <HAL_DMA_Abort_IT+0x290>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00e      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a79      	ldr	r2, [pc, #484]	; (8006850 <HAL_DMA_Abort_IT+0x294>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d009      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a77      	ldr	r2, [pc, #476]	; (8006854 <HAL_DMA_Abort_IT+0x298>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <HAL_DMA_Abort_IT+0xc8>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a76      	ldr	r2, [pc, #472]	; (8006858 <HAL_DMA_Abort_IT+0x29c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d101      	bne.n	8006688 <HAL_DMA_Abort_IT+0xcc>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <HAL_DMA_Abort_IT+0xce>
 8006688:	2300      	movs	r3, #0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d065      	beq.n	800675a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2204      	movs	r2, #4
 8006692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a60      	ldr	r2, [pc, #384]	; (800681c <HAL_DMA_Abort_IT+0x260>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d04a      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a5e      	ldr	r2, [pc, #376]	; (8006820 <HAL_DMA_Abort_IT+0x264>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d045      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a5d      	ldr	r2, [pc, #372]	; (8006824 <HAL_DMA_Abort_IT+0x268>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d040      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a5b      	ldr	r2, [pc, #364]	; (8006828 <HAL_DMA_Abort_IT+0x26c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d03b      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a5a      	ldr	r2, [pc, #360]	; (800682c <HAL_DMA_Abort_IT+0x270>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d036      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a58      	ldr	r2, [pc, #352]	; (8006830 <HAL_DMA_Abort_IT+0x274>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d031      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a57      	ldr	r2, [pc, #348]	; (8006834 <HAL_DMA_Abort_IT+0x278>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d02c      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a55      	ldr	r2, [pc, #340]	; (8006838 <HAL_DMA_Abort_IT+0x27c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d027      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a54      	ldr	r2, [pc, #336]	; (800683c <HAL_DMA_Abort_IT+0x280>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d022      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a52      	ldr	r2, [pc, #328]	; (8006840 <HAL_DMA_Abort_IT+0x284>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d01d      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a51      	ldr	r2, [pc, #324]	; (8006844 <HAL_DMA_Abort_IT+0x288>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d018      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a4f      	ldr	r2, [pc, #316]	; (8006848 <HAL_DMA_Abort_IT+0x28c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d013      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a4e      	ldr	r2, [pc, #312]	; (800684c <HAL_DMA_Abort_IT+0x290>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00e      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a4c      	ldr	r2, [pc, #304]	; (8006850 <HAL_DMA_Abort_IT+0x294>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d009      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a4b      	ldr	r2, [pc, #300]	; (8006854 <HAL_DMA_Abort_IT+0x298>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d004      	beq.n	8006736 <HAL_DMA_Abort_IT+0x17a>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a49      	ldr	r2, [pc, #292]	; (8006858 <HAL_DMA_Abort_IT+0x29c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d108      	bne.n	8006748 <HAL_DMA_Abort_IT+0x18c>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f022 0201 	bic.w	r2, r2, #1
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	e147      	b.n	80069d8 <HAL_DMA_Abort_IT+0x41c>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0201 	bic.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	e13e      	b.n	80069d8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 020e 	bic.w	r2, r2, #14
 8006768:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a2b      	ldr	r2, [pc, #172]	; (800681c <HAL_DMA_Abort_IT+0x260>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d04a      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a29      	ldr	r2, [pc, #164]	; (8006820 <HAL_DMA_Abort_IT+0x264>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d045      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a28      	ldr	r2, [pc, #160]	; (8006824 <HAL_DMA_Abort_IT+0x268>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d040      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a26      	ldr	r2, [pc, #152]	; (8006828 <HAL_DMA_Abort_IT+0x26c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d03b      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a25      	ldr	r2, [pc, #148]	; (800682c <HAL_DMA_Abort_IT+0x270>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d036      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a23      	ldr	r2, [pc, #140]	; (8006830 <HAL_DMA_Abort_IT+0x274>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d031      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a22      	ldr	r2, [pc, #136]	; (8006834 <HAL_DMA_Abort_IT+0x278>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d02c      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a20      	ldr	r2, [pc, #128]	; (8006838 <HAL_DMA_Abort_IT+0x27c>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d027      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1f      	ldr	r2, [pc, #124]	; (800683c <HAL_DMA_Abort_IT+0x280>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d022      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1d      	ldr	r2, [pc, #116]	; (8006840 <HAL_DMA_Abort_IT+0x284>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d01d      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1c      	ldr	r2, [pc, #112]	; (8006844 <HAL_DMA_Abort_IT+0x288>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d018      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1a      	ldr	r2, [pc, #104]	; (8006848 <HAL_DMA_Abort_IT+0x28c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d013      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a19      	ldr	r2, [pc, #100]	; (800684c <HAL_DMA_Abort_IT+0x290>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00e      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a17      	ldr	r2, [pc, #92]	; (8006850 <HAL_DMA_Abort_IT+0x294>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d009      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a16      	ldr	r2, [pc, #88]	; (8006854 <HAL_DMA_Abort_IT+0x298>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d004      	beq.n	800680a <HAL_DMA_Abort_IT+0x24e>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a14      	ldr	r2, [pc, #80]	; (8006858 <HAL_DMA_Abort_IT+0x29c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d128      	bne.n	800685c <HAL_DMA_Abort_IT+0x2a0>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0201 	bic.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e027      	b.n	800686c <HAL_DMA_Abort_IT+0x2b0>
 800681c:	40020010 	.word	0x40020010
 8006820:	40020028 	.word	0x40020028
 8006824:	40020040 	.word	0x40020040
 8006828:	40020058 	.word	0x40020058
 800682c:	40020070 	.word	0x40020070
 8006830:	40020088 	.word	0x40020088
 8006834:	400200a0 	.word	0x400200a0
 8006838:	400200b8 	.word	0x400200b8
 800683c:	40020410 	.word	0x40020410
 8006840:	40020428 	.word	0x40020428
 8006844:	40020440 	.word	0x40020440
 8006848:	40020458 	.word	0x40020458
 800684c:	40020470 	.word	0x40020470
 8006850:	40020488 	.word	0x40020488
 8006854:	400204a0 	.word	0x400204a0
 8006858:	400204b8 	.word	0x400204b8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0201 	bic.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a5c      	ldr	r2, [pc, #368]	; (80069e4 <HAL_DMA_Abort_IT+0x428>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d072      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a5b      	ldr	r2, [pc, #364]	; (80069e8 <HAL_DMA_Abort_IT+0x42c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d06d      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a59      	ldr	r2, [pc, #356]	; (80069ec <HAL_DMA_Abort_IT+0x430>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d068      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a58      	ldr	r2, [pc, #352]	; (80069f0 <HAL_DMA_Abort_IT+0x434>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d063      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a56      	ldr	r2, [pc, #344]	; (80069f4 <HAL_DMA_Abort_IT+0x438>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d05e      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a55      	ldr	r2, [pc, #340]	; (80069f8 <HAL_DMA_Abort_IT+0x43c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d059      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a53      	ldr	r2, [pc, #332]	; (80069fc <HAL_DMA_Abort_IT+0x440>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d054      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a52      	ldr	r2, [pc, #328]	; (8006a00 <HAL_DMA_Abort_IT+0x444>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d04f      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a50      	ldr	r2, [pc, #320]	; (8006a04 <HAL_DMA_Abort_IT+0x448>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d04a      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a4f      	ldr	r2, [pc, #316]	; (8006a08 <HAL_DMA_Abort_IT+0x44c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d045      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a4d      	ldr	r2, [pc, #308]	; (8006a0c <HAL_DMA_Abort_IT+0x450>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d040      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a4c      	ldr	r2, [pc, #304]	; (8006a10 <HAL_DMA_Abort_IT+0x454>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d03b      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a4a      	ldr	r2, [pc, #296]	; (8006a14 <HAL_DMA_Abort_IT+0x458>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d036      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a49      	ldr	r2, [pc, #292]	; (8006a18 <HAL_DMA_Abort_IT+0x45c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d031      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a47      	ldr	r2, [pc, #284]	; (8006a1c <HAL_DMA_Abort_IT+0x460>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d02c      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a46      	ldr	r2, [pc, #280]	; (8006a20 <HAL_DMA_Abort_IT+0x464>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d027      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a44      	ldr	r2, [pc, #272]	; (8006a24 <HAL_DMA_Abort_IT+0x468>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d022      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a43      	ldr	r2, [pc, #268]	; (8006a28 <HAL_DMA_Abort_IT+0x46c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d01d      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a41      	ldr	r2, [pc, #260]	; (8006a2c <HAL_DMA_Abort_IT+0x470>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d018      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a40      	ldr	r2, [pc, #256]	; (8006a30 <HAL_DMA_Abort_IT+0x474>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d013      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a3e      	ldr	r2, [pc, #248]	; (8006a34 <HAL_DMA_Abort_IT+0x478>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d00e      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a3d      	ldr	r2, [pc, #244]	; (8006a38 <HAL_DMA_Abort_IT+0x47c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d009      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a3b      	ldr	r2, [pc, #236]	; (8006a3c <HAL_DMA_Abort_IT+0x480>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d004      	beq.n	800695c <HAL_DMA_Abort_IT+0x3a0>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a3a      	ldr	r2, [pc, #232]	; (8006a40 <HAL_DMA_Abort_IT+0x484>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d101      	bne.n	8006960 <HAL_DMA_Abort_IT+0x3a4>
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <HAL_DMA_Abort_IT+0x3a6>
 8006960:	2300      	movs	r3, #0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d028      	beq.n	80069b8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006974:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006980:	f003 031f 	and.w	r3, r3, #31
 8006984:	2201      	movs	r2, #1
 8006986:	409a      	lsls	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006994:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00c      	beq.n	80069b8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80069b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40020010 	.word	0x40020010
 80069e8:	40020028 	.word	0x40020028
 80069ec:	40020040 	.word	0x40020040
 80069f0:	40020058 	.word	0x40020058
 80069f4:	40020070 	.word	0x40020070
 80069f8:	40020088 	.word	0x40020088
 80069fc:	400200a0 	.word	0x400200a0
 8006a00:	400200b8 	.word	0x400200b8
 8006a04:	40020410 	.word	0x40020410
 8006a08:	40020428 	.word	0x40020428
 8006a0c:	40020440 	.word	0x40020440
 8006a10:	40020458 	.word	0x40020458
 8006a14:	40020470 	.word	0x40020470
 8006a18:	40020488 	.word	0x40020488
 8006a1c:	400204a0 	.word	0x400204a0
 8006a20:	400204b8 	.word	0x400204b8
 8006a24:	58025408 	.word	0x58025408
 8006a28:	5802541c 	.word	0x5802541c
 8006a2c:	58025430 	.word	0x58025430
 8006a30:	58025444 	.word	0x58025444
 8006a34:	58025458 	.word	0x58025458
 8006a38:	5802546c 	.word	0x5802546c
 8006a3c:	58025480 	.word	0x58025480
 8006a40:	58025494 	.word	0x58025494

08006a44 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08a      	sub	sp, #40	; 0x28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006a50:	4b67      	ldr	r3, [pc, #412]	; (8006bf0 <HAL_DMA_IRQHandler+0x1ac>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a67      	ldr	r2, [pc, #412]	; (8006bf4 <HAL_DMA_IRQHandler+0x1b0>)
 8006a56:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5a:	0a9b      	lsrs	r3, r3, #10
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a62:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a68:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a5f      	ldr	r2, [pc, #380]	; (8006bf8 <HAL_DMA_IRQHandler+0x1b4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d04a      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a5d      	ldr	r2, [pc, #372]	; (8006bfc <HAL_DMA_IRQHandler+0x1b8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d045      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a5c      	ldr	r2, [pc, #368]	; (8006c00 <HAL_DMA_IRQHandler+0x1bc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d040      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a5a      	ldr	r2, [pc, #360]	; (8006c04 <HAL_DMA_IRQHandler+0x1c0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d03b      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a59      	ldr	r2, [pc, #356]	; (8006c08 <HAL_DMA_IRQHandler+0x1c4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d036      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a57      	ldr	r2, [pc, #348]	; (8006c0c <HAL_DMA_IRQHandler+0x1c8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d031      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a56      	ldr	r2, [pc, #344]	; (8006c10 <HAL_DMA_IRQHandler+0x1cc>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d02c      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a54      	ldr	r2, [pc, #336]	; (8006c14 <HAL_DMA_IRQHandler+0x1d0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d027      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a53      	ldr	r2, [pc, #332]	; (8006c18 <HAL_DMA_IRQHandler+0x1d4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d022      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a51      	ldr	r2, [pc, #324]	; (8006c1c <HAL_DMA_IRQHandler+0x1d8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d01d      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a50      	ldr	r2, [pc, #320]	; (8006c20 <HAL_DMA_IRQHandler+0x1dc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d018      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a4e      	ldr	r2, [pc, #312]	; (8006c24 <HAL_DMA_IRQHandler+0x1e0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d013      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a4d      	ldr	r2, [pc, #308]	; (8006c28 <HAL_DMA_IRQHandler+0x1e4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00e      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a4b      	ldr	r2, [pc, #300]	; (8006c2c <HAL_DMA_IRQHandler+0x1e8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d009      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a4a      	ldr	r2, [pc, #296]	; (8006c30 <HAL_DMA_IRQHandler+0x1ec>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d004      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xd2>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a48      	ldr	r2, [pc, #288]	; (8006c34 <HAL_DMA_IRQHandler+0x1f0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d101      	bne.n	8006b1a <HAL_DMA_IRQHandler+0xd6>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <HAL_DMA_IRQHandler+0xd8>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 842b 	beq.w	8007378 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	2208      	movs	r2, #8
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 80a2 	beq.w	8006c7c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a2e      	ldr	r2, [pc, #184]	; (8006bf8 <HAL_DMA_IRQHandler+0x1b4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d04a      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2d      	ldr	r2, [pc, #180]	; (8006bfc <HAL_DMA_IRQHandler+0x1b8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d045      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a2b      	ldr	r2, [pc, #172]	; (8006c00 <HAL_DMA_IRQHandler+0x1bc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d040      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a2a      	ldr	r2, [pc, #168]	; (8006c04 <HAL_DMA_IRQHandler+0x1c0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d03b      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a28      	ldr	r2, [pc, #160]	; (8006c08 <HAL_DMA_IRQHandler+0x1c4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d036      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a27      	ldr	r2, [pc, #156]	; (8006c0c <HAL_DMA_IRQHandler+0x1c8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d031      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a25      	ldr	r2, [pc, #148]	; (8006c10 <HAL_DMA_IRQHandler+0x1cc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d02c      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a24      	ldr	r2, [pc, #144]	; (8006c14 <HAL_DMA_IRQHandler+0x1d0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d027      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a22      	ldr	r2, [pc, #136]	; (8006c18 <HAL_DMA_IRQHandler+0x1d4>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d022      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a21      	ldr	r2, [pc, #132]	; (8006c1c <HAL_DMA_IRQHandler+0x1d8>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d01d      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <HAL_DMA_IRQHandler+0x1dc>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d018      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1e      	ldr	r2, [pc, #120]	; (8006c24 <HAL_DMA_IRQHandler+0x1e0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d013      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1c      	ldr	r2, [pc, #112]	; (8006c28 <HAL_DMA_IRQHandler+0x1e4>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00e      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1b      	ldr	r2, [pc, #108]	; (8006c2c <HAL_DMA_IRQHandler+0x1e8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d009      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a19      	ldr	r2, [pc, #100]	; (8006c30 <HAL_DMA_IRQHandler+0x1ec>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d004      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0x194>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a18      	ldr	r2, [pc, #96]	; (8006c34 <HAL_DMA_IRQHandler+0x1f0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d12f      	bne.n	8006c38 <HAL_DMA_IRQHandler+0x1f4>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bf14      	ite	ne
 8006be6:	2301      	movne	r3, #1
 8006be8:	2300      	moveq	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	e02e      	b.n	8006c4c <HAL_DMA_IRQHandler+0x208>
 8006bee:	bf00      	nop
 8006bf0:	24000014 	.word	0x24000014
 8006bf4:	1b4e81b5 	.word	0x1b4e81b5
 8006bf8:	40020010 	.word	0x40020010
 8006bfc:	40020028 	.word	0x40020028
 8006c00:	40020040 	.word	0x40020040
 8006c04:	40020058 	.word	0x40020058
 8006c08:	40020070 	.word	0x40020070
 8006c0c:	40020088 	.word	0x40020088
 8006c10:	400200a0 	.word	0x400200a0
 8006c14:	400200b8 	.word	0x400200b8
 8006c18:	40020410 	.word	0x40020410
 8006c1c:	40020428 	.word	0x40020428
 8006c20:	40020440 	.word	0x40020440
 8006c24:	40020458 	.word	0x40020458
 8006c28:	40020470 	.word	0x40020470
 8006c2c:	40020488 	.word	0x40020488
 8006c30:	400204a0 	.word	0x400204a0
 8006c34:	400204b8 	.word	0x400204b8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	bf14      	ite	ne
 8006c46:	2301      	movne	r3, #1
 8006c48:	2300      	moveq	r3, #0
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d015      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0204 	bic.w	r2, r2, #4
 8006c5e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c64:	f003 031f 	and.w	r3, r3, #31
 8006c68:	2208      	movs	r2, #8
 8006c6a:	409a      	lsls	r2, r3
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c74:	f043 0201 	orr.w	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c80:	f003 031f 	and.w	r3, r3, #31
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d06e      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a69      	ldr	r2, [pc, #420]	; (8006e3c <HAL_DMA_IRQHandler+0x3f8>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d04a      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a67      	ldr	r2, [pc, #412]	; (8006e40 <HAL_DMA_IRQHandler+0x3fc>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d045      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a66      	ldr	r2, [pc, #408]	; (8006e44 <HAL_DMA_IRQHandler+0x400>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d040      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a64      	ldr	r2, [pc, #400]	; (8006e48 <HAL_DMA_IRQHandler+0x404>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d03b      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a63      	ldr	r2, [pc, #396]	; (8006e4c <HAL_DMA_IRQHandler+0x408>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d036      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a61      	ldr	r2, [pc, #388]	; (8006e50 <HAL_DMA_IRQHandler+0x40c>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d031      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a60      	ldr	r2, [pc, #384]	; (8006e54 <HAL_DMA_IRQHandler+0x410>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d02c      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a5e      	ldr	r2, [pc, #376]	; (8006e58 <HAL_DMA_IRQHandler+0x414>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d027      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a5d      	ldr	r2, [pc, #372]	; (8006e5c <HAL_DMA_IRQHandler+0x418>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d022      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a5b      	ldr	r2, [pc, #364]	; (8006e60 <HAL_DMA_IRQHandler+0x41c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d01d      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a5a      	ldr	r2, [pc, #360]	; (8006e64 <HAL_DMA_IRQHandler+0x420>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d018      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a58      	ldr	r2, [pc, #352]	; (8006e68 <HAL_DMA_IRQHandler+0x424>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d013      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a57      	ldr	r2, [pc, #348]	; (8006e6c <HAL_DMA_IRQHandler+0x428>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00e      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a55      	ldr	r2, [pc, #340]	; (8006e70 <HAL_DMA_IRQHandler+0x42c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d009      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a54      	ldr	r2, [pc, #336]	; (8006e74 <HAL_DMA_IRQHandler+0x430>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d004      	beq.n	8006d32 <HAL_DMA_IRQHandler+0x2ee>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a52      	ldr	r2, [pc, #328]	; (8006e78 <HAL_DMA_IRQHandler+0x434>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d10a      	bne.n	8006d48 <HAL_DMA_IRQHandler+0x304>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	bf14      	ite	ne
 8006d40:	2301      	movne	r3, #1
 8006d42:	2300      	moveq	r3, #0
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	e003      	b.n	8006d50 <HAL_DMA_IRQHandler+0x30c>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00d      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	409a      	lsls	r2, r3
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d68:	f043 0202 	orr.w	r2, r3, #2
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	2204      	movs	r2, #4
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 808f 	beq.w	8006ea4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a2c      	ldr	r2, [pc, #176]	; (8006e3c <HAL_DMA_IRQHandler+0x3f8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d04a      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a2a      	ldr	r2, [pc, #168]	; (8006e40 <HAL_DMA_IRQHandler+0x3fc>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d045      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a29      	ldr	r2, [pc, #164]	; (8006e44 <HAL_DMA_IRQHandler+0x400>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d040      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a27      	ldr	r2, [pc, #156]	; (8006e48 <HAL_DMA_IRQHandler+0x404>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d03b      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a26      	ldr	r2, [pc, #152]	; (8006e4c <HAL_DMA_IRQHandler+0x408>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d036      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a24      	ldr	r2, [pc, #144]	; (8006e50 <HAL_DMA_IRQHandler+0x40c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d031      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a23      	ldr	r2, [pc, #140]	; (8006e54 <HAL_DMA_IRQHandler+0x410>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d02c      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a21      	ldr	r2, [pc, #132]	; (8006e58 <HAL_DMA_IRQHandler+0x414>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d027      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a20      	ldr	r2, [pc, #128]	; (8006e5c <HAL_DMA_IRQHandler+0x418>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d022      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a1e      	ldr	r2, [pc, #120]	; (8006e60 <HAL_DMA_IRQHandler+0x41c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01d      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a1d      	ldr	r2, [pc, #116]	; (8006e64 <HAL_DMA_IRQHandler+0x420>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d018      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1b      	ldr	r2, [pc, #108]	; (8006e68 <HAL_DMA_IRQHandler+0x424>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d013      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1a      	ldr	r2, [pc, #104]	; (8006e6c <HAL_DMA_IRQHandler+0x428>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00e      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a18      	ldr	r2, [pc, #96]	; (8006e70 <HAL_DMA_IRQHandler+0x42c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d009      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a17      	ldr	r2, [pc, #92]	; (8006e74 <HAL_DMA_IRQHandler+0x430>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d004      	beq.n	8006e26 <HAL_DMA_IRQHandler+0x3e2>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <HAL_DMA_IRQHandler+0x434>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d12a      	bne.n	8006e7c <HAL_DMA_IRQHandler+0x438>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	bf14      	ite	ne
 8006e34:	2301      	movne	r3, #1
 8006e36:	2300      	moveq	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	e023      	b.n	8006e84 <HAL_DMA_IRQHandler+0x440>
 8006e3c:	40020010 	.word	0x40020010
 8006e40:	40020028 	.word	0x40020028
 8006e44:	40020040 	.word	0x40020040
 8006e48:	40020058 	.word	0x40020058
 8006e4c:	40020070 	.word	0x40020070
 8006e50:	40020088 	.word	0x40020088
 8006e54:	400200a0 	.word	0x400200a0
 8006e58:	400200b8 	.word	0x400200b8
 8006e5c:	40020410 	.word	0x40020410
 8006e60:	40020428 	.word	0x40020428
 8006e64:	40020440 	.word	0x40020440
 8006e68:	40020458 	.word	0x40020458
 8006e6c:	40020470 	.word	0x40020470
 8006e70:	40020488 	.word	0x40020488
 8006e74:	400204a0 	.word	0x400204a0
 8006e78:	400204b8 	.word	0x400204b8
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2300      	movs	r3, #0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00d      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	2204      	movs	r2, #4
 8006e92:	409a      	lsls	r2, r3
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9c:	f043 0204 	orr.w	r2, r3, #4
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	2210      	movs	r2, #16
 8006eae:	409a      	lsls	r2, r3
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80a6 	beq.w	8007006 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a85      	ldr	r2, [pc, #532]	; (80070d4 <HAL_DMA_IRQHandler+0x690>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d04a      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a83      	ldr	r2, [pc, #524]	; (80070d8 <HAL_DMA_IRQHandler+0x694>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d045      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a82      	ldr	r2, [pc, #520]	; (80070dc <HAL_DMA_IRQHandler+0x698>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d040      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a80      	ldr	r2, [pc, #512]	; (80070e0 <HAL_DMA_IRQHandler+0x69c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d03b      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a7f      	ldr	r2, [pc, #508]	; (80070e4 <HAL_DMA_IRQHandler+0x6a0>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d036      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a7d      	ldr	r2, [pc, #500]	; (80070e8 <HAL_DMA_IRQHandler+0x6a4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d031      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a7c      	ldr	r2, [pc, #496]	; (80070ec <HAL_DMA_IRQHandler+0x6a8>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d02c      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a7a      	ldr	r2, [pc, #488]	; (80070f0 <HAL_DMA_IRQHandler+0x6ac>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d027      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a79      	ldr	r2, [pc, #484]	; (80070f4 <HAL_DMA_IRQHandler+0x6b0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d022      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a77      	ldr	r2, [pc, #476]	; (80070f8 <HAL_DMA_IRQHandler+0x6b4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d01d      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a76      	ldr	r2, [pc, #472]	; (80070fc <HAL_DMA_IRQHandler+0x6b8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d018      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a74      	ldr	r2, [pc, #464]	; (8007100 <HAL_DMA_IRQHandler+0x6bc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d013      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a73      	ldr	r2, [pc, #460]	; (8007104 <HAL_DMA_IRQHandler+0x6c0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d00e      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a71      	ldr	r2, [pc, #452]	; (8007108 <HAL_DMA_IRQHandler+0x6c4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d009      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a70      	ldr	r2, [pc, #448]	; (800710c <HAL_DMA_IRQHandler+0x6c8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d004      	beq.n	8006f5a <HAL_DMA_IRQHandler+0x516>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a6e      	ldr	r2, [pc, #440]	; (8007110 <HAL_DMA_IRQHandler+0x6cc>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d10a      	bne.n	8006f70 <HAL_DMA_IRQHandler+0x52c>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0308 	and.w	r3, r3, #8
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	bf14      	ite	ne
 8006f68:	2301      	movne	r3, #1
 8006f6a:	2300      	moveq	r3, #0
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	e009      	b.n	8006f84 <HAL_DMA_IRQHandler+0x540>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	bf14      	ite	ne
 8006f7e:	2301      	movne	r3, #1
 8006f80:	2300      	moveq	r3, #0
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d03e      	beq.n	8007006 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f8c:	f003 031f 	and.w	r3, r3, #31
 8006f90:	2210      	movs	r2, #16
 8006f92:	409a      	lsls	r2, r3
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d018      	beq.n	8006fd8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d108      	bne.n	8006fc6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d024      	beq.n	8007006 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	4798      	blx	r3
 8006fc4:	e01f      	b.n	8007006 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01b      	beq.n	8007006 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	4798      	blx	r3
 8006fd6:	e016      	b.n	8007006 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d107      	bne.n	8006ff6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0208 	bic.w	r2, r2, #8
 8006ff4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2220      	movs	r2, #32
 8007010:	409a      	lsls	r2, r3
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	4013      	ands	r3, r2
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 8110 	beq.w	800723c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a2c      	ldr	r2, [pc, #176]	; (80070d4 <HAL_DMA_IRQHandler+0x690>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d04a      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a2b      	ldr	r2, [pc, #172]	; (80070d8 <HAL_DMA_IRQHandler+0x694>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d045      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a29      	ldr	r2, [pc, #164]	; (80070dc <HAL_DMA_IRQHandler+0x698>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d040      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a28      	ldr	r2, [pc, #160]	; (80070e0 <HAL_DMA_IRQHandler+0x69c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d03b      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a26      	ldr	r2, [pc, #152]	; (80070e4 <HAL_DMA_IRQHandler+0x6a0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d036      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a25      	ldr	r2, [pc, #148]	; (80070e8 <HAL_DMA_IRQHandler+0x6a4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d031      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a23      	ldr	r2, [pc, #140]	; (80070ec <HAL_DMA_IRQHandler+0x6a8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d02c      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a22      	ldr	r2, [pc, #136]	; (80070f0 <HAL_DMA_IRQHandler+0x6ac>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d027      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a20      	ldr	r2, [pc, #128]	; (80070f4 <HAL_DMA_IRQHandler+0x6b0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d022      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1f      	ldr	r2, [pc, #124]	; (80070f8 <HAL_DMA_IRQHandler+0x6b4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d01d      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a1d      	ldr	r2, [pc, #116]	; (80070fc <HAL_DMA_IRQHandler+0x6b8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d018      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a1c      	ldr	r2, [pc, #112]	; (8007100 <HAL_DMA_IRQHandler+0x6bc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d013      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <HAL_DMA_IRQHandler+0x6c0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00e      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a19      	ldr	r2, [pc, #100]	; (8007108 <HAL_DMA_IRQHandler+0x6c4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d009      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a17      	ldr	r2, [pc, #92]	; (800710c <HAL_DMA_IRQHandler+0x6c8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d004      	beq.n	80070bc <HAL_DMA_IRQHandler+0x678>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a16      	ldr	r2, [pc, #88]	; (8007110 <HAL_DMA_IRQHandler+0x6cc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d12b      	bne.n	8007114 <HAL_DMA_IRQHandler+0x6d0>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0310 	and.w	r3, r3, #16
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bf14      	ite	ne
 80070ca:	2301      	movne	r3, #1
 80070cc:	2300      	moveq	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	e02a      	b.n	8007128 <HAL_DMA_IRQHandler+0x6e4>
 80070d2:	bf00      	nop
 80070d4:	40020010 	.word	0x40020010
 80070d8:	40020028 	.word	0x40020028
 80070dc:	40020040 	.word	0x40020040
 80070e0:	40020058 	.word	0x40020058
 80070e4:	40020070 	.word	0x40020070
 80070e8:	40020088 	.word	0x40020088
 80070ec:	400200a0 	.word	0x400200a0
 80070f0:	400200b8 	.word	0x400200b8
 80070f4:	40020410 	.word	0x40020410
 80070f8:	40020428 	.word	0x40020428
 80070fc:	40020440 	.word	0x40020440
 8007100:	40020458 	.word	0x40020458
 8007104:	40020470 	.word	0x40020470
 8007108:	40020488 	.word	0x40020488
 800710c:	400204a0 	.word	0x400204a0
 8007110:	400204b8 	.word	0x400204b8
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	bf14      	ite	ne
 8007122:	2301      	movne	r3, #1
 8007124:	2300      	moveq	r3, #0
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 8087 	beq.w	800723c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	2220      	movs	r2, #32
 8007138:	409a      	lsls	r2, r3
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b04      	cmp	r3, #4
 8007148:	d139      	bne.n	80071be <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0216 	bic.w	r2, r2, #22
 8007158:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	695a      	ldr	r2, [r3, #20]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007168:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <HAL_DMA_IRQHandler+0x736>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007176:	2b00      	cmp	r3, #0
 8007178:	d007      	beq.n	800718a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f022 0208 	bic.w	r2, r2, #8
 8007188:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718e:	f003 031f 	and.w	r3, r3, #31
 8007192:	223f      	movs	r2, #63	; 0x3f
 8007194:	409a      	lsls	r2, r3
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 834a 	beq.w	8007848 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	4798      	blx	r3
          }
          return;
 80071bc:	e344      	b.n	8007848 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d018      	beq.n	80071fe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d108      	bne.n	80071ec <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d02c      	beq.n	800723c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	4798      	blx	r3
 80071ea:	e027      	b.n	800723c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d023      	beq.n	800723c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	4798      	blx	r3
 80071fc:	e01e      	b.n	800723c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10f      	bne.n	800722c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0210 	bic.w	r2, r2, #16
 800721a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007230:	2b00      	cmp	r3, #0
 8007232:	d003      	beq.n	800723c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 8306 	beq.w	8007852 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 8088 	beq.w	8007364 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2204      	movs	r2, #4
 8007258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a7a      	ldr	r2, [pc, #488]	; (800744c <HAL_DMA_IRQHandler+0xa08>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d04a      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a79      	ldr	r2, [pc, #484]	; (8007450 <HAL_DMA_IRQHandler+0xa0c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d045      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a77      	ldr	r2, [pc, #476]	; (8007454 <HAL_DMA_IRQHandler+0xa10>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d040      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a76      	ldr	r2, [pc, #472]	; (8007458 <HAL_DMA_IRQHandler+0xa14>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d03b      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a74      	ldr	r2, [pc, #464]	; (800745c <HAL_DMA_IRQHandler+0xa18>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d036      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a73      	ldr	r2, [pc, #460]	; (8007460 <HAL_DMA_IRQHandler+0xa1c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d031      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a71      	ldr	r2, [pc, #452]	; (8007464 <HAL_DMA_IRQHandler+0xa20>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d02c      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a70      	ldr	r2, [pc, #448]	; (8007468 <HAL_DMA_IRQHandler+0xa24>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d027      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a6e      	ldr	r2, [pc, #440]	; (800746c <HAL_DMA_IRQHandler+0xa28>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d022      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a6d      	ldr	r2, [pc, #436]	; (8007470 <HAL_DMA_IRQHandler+0xa2c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d01d      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a6b      	ldr	r2, [pc, #428]	; (8007474 <HAL_DMA_IRQHandler+0xa30>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d018      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a6a      	ldr	r2, [pc, #424]	; (8007478 <HAL_DMA_IRQHandler+0xa34>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d013      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a68      	ldr	r2, [pc, #416]	; (800747c <HAL_DMA_IRQHandler+0xa38>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00e      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a67      	ldr	r2, [pc, #412]	; (8007480 <HAL_DMA_IRQHandler+0xa3c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d009      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a65      	ldr	r2, [pc, #404]	; (8007484 <HAL_DMA_IRQHandler+0xa40>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d004      	beq.n	80072fc <HAL_DMA_IRQHandler+0x8b8>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a64      	ldr	r2, [pc, #400]	; (8007488 <HAL_DMA_IRQHandler+0xa44>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d108      	bne.n	800730e <HAL_DMA_IRQHandler+0x8ca>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0201 	bic.w	r2, r2, #1
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	e007      	b.n	800731e <HAL_DMA_IRQHandler+0x8da>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3301      	adds	r3, #1
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007326:	429a      	cmp	r2, r3
 8007328:	d307      	bcc.n	800733a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1f2      	bne.n	800731e <HAL_DMA_IRQHandler+0x8da>
 8007338:	e000      	b.n	800733c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800733a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d004      	beq.n	800735c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2203      	movs	r2, #3
 8007356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800735a:	e003      	b.n	8007364 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 8272 	beq.w	8007852 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	4798      	blx	r3
 8007376:	e26c      	b.n	8007852 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a43      	ldr	r2, [pc, #268]	; (800748c <HAL_DMA_IRQHandler+0xa48>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d022      	beq.n	80073c8 <HAL_DMA_IRQHandler+0x984>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a42      	ldr	r2, [pc, #264]	; (8007490 <HAL_DMA_IRQHandler+0xa4c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d01d      	beq.n	80073c8 <HAL_DMA_IRQHandler+0x984>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a40      	ldr	r2, [pc, #256]	; (8007494 <HAL_DMA_IRQHandler+0xa50>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d018      	beq.n	80073c8 <HAL_DMA_IRQHandler+0x984>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a3f      	ldr	r2, [pc, #252]	; (8007498 <HAL_DMA_IRQHandler+0xa54>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d013      	beq.n	80073c8 <HAL_DMA_IRQHandler+0x984>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a3d      	ldr	r2, [pc, #244]	; (800749c <HAL_DMA_IRQHandler+0xa58>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d00e      	beq.n	80073c8 <HAL_DMA_IRQHandler+0x984>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a3c      	ldr	r2, [pc, #240]	; (80074a0 <HAL_DMA_IRQHandler+0xa5c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d009      	beq.n	80073c8 <HAL_DMA_IRQHandler+0x984>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a3a      	ldr	r2, [pc, #232]	; (80074a4 <HAL_DMA_IRQHandler+0xa60>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d004      	beq.n	80073c8 <HAL_DMA_IRQHandler+0x984>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a39      	ldr	r2, [pc, #228]	; (80074a8 <HAL_DMA_IRQHandler+0xa64>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d101      	bne.n	80073cc <HAL_DMA_IRQHandler+0x988>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <HAL_DMA_IRQHandler+0x98a>
 80073cc:	2300      	movs	r3, #0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 823f 	beq.w	8007852 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e0:	f003 031f 	and.w	r3, r3, #31
 80073e4:	2204      	movs	r2, #4
 80073e6:	409a      	lsls	r2, r3
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	4013      	ands	r3, r2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80cd 	beq.w	800758c <HAL_DMA_IRQHandler+0xb48>
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f000 80c7 	beq.w	800758c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	2204      	movs	r2, #4
 8007408:	409a      	lsls	r2, r3
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d049      	beq.n	80074ac <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d109      	bne.n	8007436 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 8210 	beq.w	800784c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007434:	e20a      	b.n	800784c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 8206 	beq.w	800784c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007448:	e200      	b.n	800784c <HAL_DMA_IRQHandler+0xe08>
 800744a:	bf00      	nop
 800744c:	40020010 	.word	0x40020010
 8007450:	40020028 	.word	0x40020028
 8007454:	40020040 	.word	0x40020040
 8007458:	40020058 	.word	0x40020058
 800745c:	40020070 	.word	0x40020070
 8007460:	40020088 	.word	0x40020088
 8007464:	400200a0 	.word	0x400200a0
 8007468:	400200b8 	.word	0x400200b8
 800746c:	40020410 	.word	0x40020410
 8007470:	40020428 	.word	0x40020428
 8007474:	40020440 	.word	0x40020440
 8007478:	40020458 	.word	0x40020458
 800747c:	40020470 	.word	0x40020470
 8007480:	40020488 	.word	0x40020488
 8007484:	400204a0 	.word	0x400204a0
 8007488:	400204b8 	.word	0x400204b8
 800748c:	58025408 	.word	0x58025408
 8007490:	5802541c 	.word	0x5802541c
 8007494:	58025430 	.word	0x58025430
 8007498:	58025444 	.word	0x58025444
 800749c:	58025458 	.word	0x58025458
 80074a0:	5802546c 	.word	0x5802546c
 80074a4:	58025480 	.word	0x58025480
 80074a8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d160      	bne.n	8007578 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a8c      	ldr	r2, [pc, #560]	; (80076ec <HAL_DMA_IRQHandler+0xca8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d04a      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a8a      	ldr	r2, [pc, #552]	; (80076f0 <HAL_DMA_IRQHandler+0xcac>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d045      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a89      	ldr	r2, [pc, #548]	; (80076f4 <HAL_DMA_IRQHandler+0xcb0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d040      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a87      	ldr	r2, [pc, #540]	; (80076f8 <HAL_DMA_IRQHandler+0xcb4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d03b      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a86      	ldr	r2, [pc, #536]	; (80076fc <HAL_DMA_IRQHandler+0xcb8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d036      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a84      	ldr	r2, [pc, #528]	; (8007700 <HAL_DMA_IRQHandler+0xcbc>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d031      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a83      	ldr	r2, [pc, #524]	; (8007704 <HAL_DMA_IRQHandler+0xcc0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d02c      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a81      	ldr	r2, [pc, #516]	; (8007708 <HAL_DMA_IRQHandler+0xcc4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d027      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a80      	ldr	r2, [pc, #512]	; (800770c <HAL_DMA_IRQHandler+0xcc8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d022      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a7e      	ldr	r2, [pc, #504]	; (8007710 <HAL_DMA_IRQHandler+0xccc>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d01d      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a7d      	ldr	r2, [pc, #500]	; (8007714 <HAL_DMA_IRQHandler+0xcd0>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d018      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a7b      	ldr	r2, [pc, #492]	; (8007718 <HAL_DMA_IRQHandler+0xcd4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d013      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a7a      	ldr	r2, [pc, #488]	; (800771c <HAL_DMA_IRQHandler+0xcd8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00e      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a78      	ldr	r2, [pc, #480]	; (8007720 <HAL_DMA_IRQHandler+0xcdc>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d009      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a77      	ldr	r2, [pc, #476]	; (8007724 <HAL_DMA_IRQHandler+0xce0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d004      	beq.n	8007556 <HAL_DMA_IRQHandler+0xb12>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a75      	ldr	r2, [pc, #468]	; (8007728 <HAL_DMA_IRQHandler+0xce4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d108      	bne.n	8007568 <HAL_DMA_IRQHandler+0xb24>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0208 	bic.w	r2, r2, #8
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	e007      	b.n	8007578 <HAL_DMA_IRQHandler+0xb34>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0204 	bic.w	r2, r2, #4
 8007576:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 8165 	beq.w	800784c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800758a:	e15f      	b.n	800784c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	2202      	movs	r2, #2
 8007596:	409a      	lsls	r2, r3
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80c5 	beq.w	800772c <HAL_DMA_IRQHandler+0xce8>
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 80bf 	beq.w	800772c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	2202      	movs	r2, #2
 80075b8:	409a      	lsls	r2, r3
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d018      	beq.n	80075fa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 813a 	beq.w	8007850 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075e4:	e134      	b.n	8007850 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8130 	beq.w	8007850 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075f8:	e12a      	b.n	8007850 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f003 0320 	and.w	r3, r3, #32
 8007600:	2b00      	cmp	r3, #0
 8007602:	d168      	bne.n	80076d6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a38      	ldr	r2, [pc, #224]	; (80076ec <HAL_DMA_IRQHandler+0xca8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d04a      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a37      	ldr	r2, [pc, #220]	; (80076f0 <HAL_DMA_IRQHandler+0xcac>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d045      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a35      	ldr	r2, [pc, #212]	; (80076f4 <HAL_DMA_IRQHandler+0xcb0>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d040      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a34      	ldr	r2, [pc, #208]	; (80076f8 <HAL_DMA_IRQHandler+0xcb4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d03b      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a32      	ldr	r2, [pc, #200]	; (80076fc <HAL_DMA_IRQHandler+0xcb8>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d036      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a31      	ldr	r2, [pc, #196]	; (8007700 <HAL_DMA_IRQHandler+0xcbc>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d031      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a2f      	ldr	r2, [pc, #188]	; (8007704 <HAL_DMA_IRQHandler+0xcc0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d02c      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a2e      	ldr	r2, [pc, #184]	; (8007708 <HAL_DMA_IRQHandler+0xcc4>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d027      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a2c      	ldr	r2, [pc, #176]	; (800770c <HAL_DMA_IRQHandler+0xcc8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d022      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a2b      	ldr	r2, [pc, #172]	; (8007710 <HAL_DMA_IRQHandler+0xccc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d01d      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a29      	ldr	r2, [pc, #164]	; (8007714 <HAL_DMA_IRQHandler+0xcd0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d018      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a28      	ldr	r2, [pc, #160]	; (8007718 <HAL_DMA_IRQHandler+0xcd4>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d013      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a26      	ldr	r2, [pc, #152]	; (800771c <HAL_DMA_IRQHandler+0xcd8>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d00e      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a25      	ldr	r2, [pc, #148]	; (8007720 <HAL_DMA_IRQHandler+0xcdc>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d009      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a23      	ldr	r2, [pc, #140]	; (8007724 <HAL_DMA_IRQHandler+0xce0>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d004      	beq.n	80076a4 <HAL_DMA_IRQHandler+0xc60>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a22      	ldr	r2, [pc, #136]	; (8007728 <HAL_DMA_IRQHandler+0xce4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d108      	bne.n	80076b6 <HAL_DMA_IRQHandler+0xc72>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0214 	bic.w	r2, r2, #20
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	e007      	b.n	80076c6 <HAL_DMA_IRQHandler+0xc82>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 020a 	bic.w	r2, r2, #10
 80076c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 80b8 	beq.w	8007850 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076e8:	e0b2      	b.n	8007850 <HAL_DMA_IRQHandler+0xe0c>
 80076ea:	bf00      	nop
 80076ec:	40020010 	.word	0x40020010
 80076f0:	40020028 	.word	0x40020028
 80076f4:	40020040 	.word	0x40020040
 80076f8:	40020058 	.word	0x40020058
 80076fc:	40020070 	.word	0x40020070
 8007700:	40020088 	.word	0x40020088
 8007704:	400200a0 	.word	0x400200a0
 8007708:	400200b8 	.word	0x400200b8
 800770c:	40020410 	.word	0x40020410
 8007710:	40020428 	.word	0x40020428
 8007714:	40020440 	.word	0x40020440
 8007718:	40020458 	.word	0x40020458
 800771c:	40020470 	.word	0x40020470
 8007720:	40020488 	.word	0x40020488
 8007724:	400204a0 	.word	0x400204a0
 8007728:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	2208      	movs	r2, #8
 8007736:	409a      	lsls	r2, r3
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8088 	beq.w	8007852 <HAL_DMA_IRQHandler+0xe0e>
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f003 0308 	and.w	r3, r3, #8
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 8082 	beq.w	8007852 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a41      	ldr	r2, [pc, #260]	; (8007858 <HAL_DMA_IRQHandler+0xe14>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d04a      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a3f      	ldr	r2, [pc, #252]	; (800785c <HAL_DMA_IRQHandler+0xe18>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d045      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a3e      	ldr	r2, [pc, #248]	; (8007860 <HAL_DMA_IRQHandler+0xe1c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d040      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a3c      	ldr	r2, [pc, #240]	; (8007864 <HAL_DMA_IRQHandler+0xe20>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d03b      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a3b      	ldr	r2, [pc, #236]	; (8007868 <HAL_DMA_IRQHandler+0xe24>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d036      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a39      	ldr	r2, [pc, #228]	; (800786c <HAL_DMA_IRQHandler+0xe28>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d031      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a38      	ldr	r2, [pc, #224]	; (8007870 <HAL_DMA_IRQHandler+0xe2c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d02c      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a36      	ldr	r2, [pc, #216]	; (8007874 <HAL_DMA_IRQHandler+0xe30>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d027      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a35      	ldr	r2, [pc, #212]	; (8007878 <HAL_DMA_IRQHandler+0xe34>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d022      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a33      	ldr	r2, [pc, #204]	; (800787c <HAL_DMA_IRQHandler+0xe38>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d01d      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a32      	ldr	r2, [pc, #200]	; (8007880 <HAL_DMA_IRQHandler+0xe3c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d018      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a30      	ldr	r2, [pc, #192]	; (8007884 <HAL_DMA_IRQHandler+0xe40>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d013      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a2f      	ldr	r2, [pc, #188]	; (8007888 <HAL_DMA_IRQHandler+0xe44>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00e      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a2d      	ldr	r2, [pc, #180]	; (800788c <HAL_DMA_IRQHandler+0xe48>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d009      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a2c      	ldr	r2, [pc, #176]	; (8007890 <HAL_DMA_IRQHandler+0xe4c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d004      	beq.n	80077ee <HAL_DMA_IRQHandler+0xdaa>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a2a      	ldr	r2, [pc, #168]	; (8007894 <HAL_DMA_IRQHandler+0xe50>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d108      	bne.n	8007800 <HAL_DMA_IRQHandler+0xdbc>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 021c 	bic.w	r2, r2, #28
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	e007      	b.n	8007810 <HAL_DMA_IRQHandler+0xdcc>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f022 020e 	bic.w	r2, r2, #14
 800780e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007814:	f003 031f 	and.w	r3, r3, #31
 8007818:	2201      	movs	r2, #1
 800781a:	409a      	lsls	r2, r3
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d009      	beq.n	8007852 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	4798      	blx	r3
 8007846:	e004      	b.n	8007852 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007848:	bf00      	nop
 800784a:	e002      	b.n	8007852 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800784c:	bf00      	nop
 800784e:	e000      	b.n	8007852 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007850:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007852:	3728      	adds	r7, #40	; 0x28
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	40020010 	.word	0x40020010
 800785c:	40020028 	.word	0x40020028
 8007860:	40020040 	.word	0x40020040
 8007864:	40020058 	.word	0x40020058
 8007868:	40020070 	.word	0x40020070
 800786c:	40020088 	.word	0x40020088
 8007870:	400200a0 	.word	0x400200a0
 8007874:	400200b8 	.word	0x400200b8
 8007878:	40020410 	.word	0x40020410
 800787c:	40020428 	.word	0x40020428
 8007880:	40020440 	.word	0x40020440
 8007884:	40020458 	.word	0x40020458
 8007888:	40020470 	.word	0x40020470
 800788c:	40020488 	.word	0x40020488
 8007890:	400204a0 	.word	0x400204a0
 8007894:	400204b8 	.word	0x400204b8

08007898 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078a6:	b2db      	uxtb	r3, r3
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a84      	ldr	r2, [pc, #528]	; (8007afc <DMA_SetConfig+0x230>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d072      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a82      	ldr	r2, [pc, #520]	; (8007b00 <DMA_SetConfig+0x234>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d06d      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a81      	ldr	r2, [pc, #516]	; (8007b04 <DMA_SetConfig+0x238>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d068      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a7f      	ldr	r2, [pc, #508]	; (8007b08 <DMA_SetConfig+0x23c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d063      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a7e      	ldr	r2, [pc, #504]	; (8007b0c <DMA_SetConfig+0x240>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d05e      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a7c      	ldr	r2, [pc, #496]	; (8007b10 <DMA_SetConfig+0x244>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d059      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a7b      	ldr	r2, [pc, #492]	; (8007b14 <DMA_SetConfig+0x248>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d054      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a79      	ldr	r2, [pc, #484]	; (8007b18 <DMA_SetConfig+0x24c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d04f      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a78      	ldr	r2, [pc, #480]	; (8007b1c <DMA_SetConfig+0x250>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d04a      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a76      	ldr	r2, [pc, #472]	; (8007b20 <DMA_SetConfig+0x254>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d045      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a75      	ldr	r2, [pc, #468]	; (8007b24 <DMA_SetConfig+0x258>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d040      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a73      	ldr	r2, [pc, #460]	; (8007b28 <DMA_SetConfig+0x25c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d03b      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a72      	ldr	r2, [pc, #456]	; (8007b2c <DMA_SetConfig+0x260>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d036      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a70      	ldr	r2, [pc, #448]	; (8007b30 <DMA_SetConfig+0x264>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d031      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a6f      	ldr	r2, [pc, #444]	; (8007b34 <DMA_SetConfig+0x268>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d02c      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a6d      	ldr	r2, [pc, #436]	; (8007b38 <DMA_SetConfig+0x26c>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d027      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a6c      	ldr	r2, [pc, #432]	; (8007b3c <DMA_SetConfig+0x270>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d022      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a6a      	ldr	r2, [pc, #424]	; (8007b40 <DMA_SetConfig+0x274>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01d      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a69      	ldr	r2, [pc, #420]	; (8007b44 <DMA_SetConfig+0x278>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d018      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a67      	ldr	r2, [pc, #412]	; (8007b48 <DMA_SetConfig+0x27c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d013      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a66      	ldr	r2, [pc, #408]	; (8007b4c <DMA_SetConfig+0x280>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d00e      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a64      	ldr	r2, [pc, #400]	; (8007b50 <DMA_SetConfig+0x284>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d009      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a63      	ldr	r2, [pc, #396]	; (8007b54 <DMA_SetConfig+0x288>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d004      	beq.n	80079d6 <DMA_SetConfig+0x10a>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a61      	ldr	r2, [pc, #388]	; (8007b58 <DMA_SetConfig+0x28c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d101      	bne.n	80079da <DMA_SetConfig+0x10e>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <DMA_SetConfig+0x110>
 80079da:	2300      	movs	r3, #0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00d      	beq.n	80079fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80079e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a3e      	ldr	r2, [pc, #248]	; (8007afc <DMA_SetConfig+0x230>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d04a      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a3d      	ldr	r2, [pc, #244]	; (8007b00 <DMA_SetConfig+0x234>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d045      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a3b      	ldr	r2, [pc, #236]	; (8007b04 <DMA_SetConfig+0x238>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d040      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a3a      	ldr	r2, [pc, #232]	; (8007b08 <DMA_SetConfig+0x23c>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d03b      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a38      	ldr	r2, [pc, #224]	; (8007b0c <DMA_SetConfig+0x240>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d036      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a37      	ldr	r2, [pc, #220]	; (8007b10 <DMA_SetConfig+0x244>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d031      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a35      	ldr	r2, [pc, #212]	; (8007b14 <DMA_SetConfig+0x248>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d02c      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a34      	ldr	r2, [pc, #208]	; (8007b18 <DMA_SetConfig+0x24c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d027      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a32      	ldr	r2, [pc, #200]	; (8007b1c <DMA_SetConfig+0x250>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d022      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a31      	ldr	r2, [pc, #196]	; (8007b20 <DMA_SetConfig+0x254>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d01d      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a2f      	ldr	r2, [pc, #188]	; (8007b24 <DMA_SetConfig+0x258>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d018      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a2e      	ldr	r2, [pc, #184]	; (8007b28 <DMA_SetConfig+0x25c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a2c      	ldr	r2, [pc, #176]	; (8007b2c <DMA_SetConfig+0x260>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00e      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a2b      	ldr	r2, [pc, #172]	; (8007b30 <DMA_SetConfig+0x264>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d009      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a29      	ldr	r2, [pc, #164]	; (8007b34 <DMA_SetConfig+0x268>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d004      	beq.n	8007a9c <DMA_SetConfig+0x1d0>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a28      	ldr	r2, [pc, #160]	; (8007b38 <DMA_SetConfig+0x26c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d101      	bne.n	8007aa0 <DMA_SetConfig+0x1d4>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e000      	b.n	8007aa2 <DMA_SetConfig+0x1d6>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d05a      	beq.n	8007b5c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aaa:	f003 031f 	and.w	r3, r3, #31
 8007aae:	223f      	movs	r2, #63	; 0x3f
 8007ab0:	409a      	lsls	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ac4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	2b40      	cmp	r3, #64	; 0x40
 8007ad4:	d108      	bne.n	8007ae8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007ae6:	e087      	b.n	8007bf8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	60da      	str	r2, [r3, #12]
}
 8007af8:	e07e      	b.n	8007bf8 <DMA_SetConfig+0x32c>
 8007afa:	bf00      	nop
 8007afc:	40020010 	.word	0x40020010
 8007b00:	40020028 	.word	0x40020028
 8007b04:	40020040 	.word	0x40020040
 8007b08:	40020058 	.word	0x40020058
 8007b0c:	40020070 	.word	0x40020070
 8007b10:	40020088 	.word	0x40020088
 8007b14:	400200a0 	.word	0x400200a0
 8007b18:	400200b8 	.word	0x400200b8
 8007b1c:	40020410 	.word	0x40020410
 8007b20:	40020428 	.word	0x40020428
 8007b24:	40020440 	.word	0x40020440
 8007b28:	40020458 	.word	0x40020458
 8007b2c:	40020470 	.word	0x40020470
 8007b30:	40020488 	.word	0x40020488
 8007b34:	400204a0 	.word	0x400204a0
 8007b38:	400204b8 	.word	0x400204b8
 8007b3c:	58025408 	.word	0x58025408
 8007b40:	5802541c 	.word	0x5802541c
 8007b44:	58025430 	.word	0x58025430
 8007b48:	58025444 	.word	0x58025444
 8007b4c:	58025458 	.word	0x58025458
 8007b50:	5802546c 	.word	0x5802546c
 8007b54:	58025480 	.word	0x58025480
 8007b58:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a28      	ldr	r2, [pc, #160]	; (8007c04 <DMA_SetConfig+0x338>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d022      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a27      	ldr	r2, [pc, #156]	; (8007c08 <DMA_SetConfig+0x33c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d01d      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a25      	ldr	r2, [pc, #148]	; (8007c0c <DMA_SetConfig+0x340>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d018      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a24      	ldr	r2, [pc, #144]	; (8007c10 <DMA_SetConfig+0x344>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d013      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a22      	ldr	r2, [pc, #136]	; (8007c14 <DMA_SetConfig+0x348>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d00e      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a21      	ldr	r2, [pc, #132]	; (8007c18 <DMA_SetConfig+0x34c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d009      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1f      	ldr	r2, [pc, #124]	; (8007c1c <DMA_SetConfig+0x350>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d004      	beq.n	8007bac <DMA_SetConfig+0x2e0>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <DMA_SetConfig+0x354>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d101      	bne.n	8007bb0 <DMA_SetConfig+0x2e4>
 8007bac:	2301      	movs	r3, #1
 8007bae:	e000      	b.n	8007bb2 <DMA_SetConfig+0x2e6>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d020      	beq.n	8007bf8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bba:	f003 031f 	and.w	r3, r3, #31
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	409a      	lsls	r2, r3
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	2b40      	cmp	r3, #64	; 0x40
 8007bd4:	d108      	bne.n	8007be8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	60da      	str	r2, [r3, #12]
}
 8007be6:	e007      	b.n	8007bf8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	60da      	str	r2, [r3, #12]
}
 8007bf8:	bf00      	nop
 8007bfa:	371c      	adds	r7, #28
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	58025408 	.word	0x58025408
 8007c08:	5802541c 	.word	0x5802541c
 8007c0c:	58025430 	.word	0x58025430
 8007c10:	58025444 	.word	0x58025444
 8007c14:	58025458 	.word	0x58025458
 8007c18:	5802546c 	.word	0x5802546c
 8007c1c:	58025480 	.word	0x58025480
 8007c20:	58025494 	.word	0x58025494

08007c24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a42      	ldr	r2, [pc, #264]	; (8007d3c <DMA_CalcBaseAndBitshift+0x118>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d04a      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a41      	ldr	r2, [pc, #260]	; (8007d40 <DMA_CalcBaseAndBitshift+0x11c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d045      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a3f      	ldr	r2, [pc, #252]	; (8007d44 <DMA_CalcBaseAndBitshift+0x120>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d040      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a3e      	ldr	r2, [pc, #248]	; (8007d48 <DMA_CalcBaseAndBitshift+0x124>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d03b      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a3c      	ldr	r2, [pc, #240]	; (8007d4c <DMA_CalcBaseAndBitshift+0x128>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d036      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a3b      	ldr	r2, [pc, #236]	; (8007d50 <DMA_CalcBaseAndBitshift+0x12c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d031      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a39      	ldr	r2, [pc, #228]	; (8007d54 <DMA_CalcBaseAndBitshift+0x130>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d02c      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a38      	ldr	r2, [pc, #224]	; (8007d58 <DMA_CalcBaseAndBitshift+0x134>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d027      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a36      	ldr	r2, [pc, #216]	; (8007d5c <DMA_CalcBaseAndBitshift+0x138>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d022      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a35      	ldr	r2, [pc, #212]	; (8007d60 <DMA_CalcBaseAndBitshift+0x13c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d01d      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a33      	ldr	r2, [pc, #204]	; (8007d64 <DMA_CalcBaseAndBitshift+0x140>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d018      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a32      	ldr	r2, [pc, #200]	; (8007d68 <DMA_CalcBaseAndBitshift+0x144>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d013      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a30      	ldr	r2, [pc, #192]	; (8007d6c <DMA_CalcBaseAndBitshift+0x148>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00e      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a2f      	ldr	r2, [pc, #188]	; (8007d70 <DMA_CalcBaseAndBitshift+0x14c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d009      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a2d      	ldr	r2, [pc, #180]	; (8007d74 <DMA_CalcBaseAndBitshift+0x150>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d004      	beq.n	8007ccc <DMA_CalcBaseAndBitshift+0xa8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a2c      	ldr	r2, [pc, #176]	; (8007d78 <DMA_CalcBaseAndBitshift+0x154>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d101      	bne.n	8007cd0 <DMA_CalcBaseAndBitshift+0xac>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <DMA_CalcBaseAndBitshift+0xae>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d024      	beq.n	8007d20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	3b10      	subs	r3, #16
 8007cde:	4a27      	ldr	r2, [pc, #156]	; (8007d7c <DMA_CalcBaseAndBitshift+0x158>)
 8007ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce4:	091b      	lsrs	r3, r3, #4
 8007ce6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f003 0307 	and.w	r3, r3, #7
 8007cee:	4a24      	ldr	r2, [pc, #144]	; (8007d80 <DMA_CalcBaseAndBitshift+0x15c>)
 8007cf0:	5cd3      	ldrb	r3, [r2, r3]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d908      	bls.n	8007d10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	461a      	mov	r2, r3
 8007d04:	4b1f      	ldr	r3, [pc, #124]	; (8007d84 <DMA_CalcBaseAndBitshift+0x160>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	1d1a      	adds	r2, r3, #4
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	659a      	str	r2, [r3, #88]	; 0x58
 8007d0e:	e00d      	b.n	8007d2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	461a      	mov	r2, r3
 8007d16:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <DMA_CalcBaseAndBitshift+0x160>)
 8007d18:	4013      	ands	r3, r2
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8007d1e:	e005      	b.n	8007d2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	40020010 	.word	0x40020010
 8007d40:	40020028 	.word	0x40020028
 8007d44:	40020040 	.word	0x40020040
 8007d48:	40020058 	.word	0x40020058
 8007d4c:	40020070 	.word	0x40020070
 8007d50:	40020088 	.word	0x40020088
 8007d54:	400200a0 	.word	0x400200a0
 8007d58:	400200b8 	.word	0x400200b8
 8007d5c:	40020410 	.word	0x40020410
 8007d60:	40020428 	.word	0x40020428
 8007d64:	40020440 	.word	0x40020440
 8007d68:	40020458 	.word	0x40020458
 8007d6c:	40020470 	.word	0x40020470
 8007d70:	40020488 	.word	0x40020488
 8007d74:	400204a0 	.word	0x400204a0
 8007d78:	400204b8 	.word	0x400204b8
 8007d7c:	aaaaaaab 	.word	0xaaaaaaab
 8007d80:	08014d44 	.word	0x08014d44
 8007d84:	fffffc00 	.word	0xfffffc00

08007d88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d120      	bne.n	8007dde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da0:	2b03      	cmp	r3, #3
 8007da2:	d858      	bhi.n	8007e56 <DMA_CheckFifoParam+0xce>
 8007da4:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <DMA_CheckFifoParam+0x24>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007dbd 	.word	0x08007dbd
 8007db0:	08007dcf 	.word	0x08007dcf
 8007db4:	08007dbd 	.word	0x08007dbd
 8007db8:	08007e57 	.word	0x08007e57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d048      	beq.n	8007e5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007dcc:	e045      	b.n	8007e5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007dd6:	d142      	bne.n	8007e5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ddc:	e03f      	b.n	8007e5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de6:	d123      	bne.n	8007e30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d838      	bhi.n	8007e62 <DMA_CheckFifoParam+0xda>
 8007df0:	a201      	add	r2, pc, #4	; (adr r2, 8007df8 <DMA_CheckFifoParam+0x70>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e09 	.word	0x08007e09
 8007dfc:	08007e0f 	.word	0x08007e0f
 8007e00:	08007e09 	.word	0x08007e09
 8007e04:	08007e21 	.word	0x08007e21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	73fb      	strb	r3, [r7, #15]
        break;
 8007e0c:	e030      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d025      	beq.n	8007e66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e1e:	e022      	b.n	8007e66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e28:	d11f      	bne.n	8007e6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e2e:	e01c      	b.n	8007e6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d902      	bls.n	8007e3e <DMA_CheckFifoParam+0xb6>
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d003      	beq.n	8007e44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007e3c:	e018      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	73fb      	strb	r3, [r7, #15]
        break;
 8007e42:	e015      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00e      	beq.n	8007e6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	73fb      	strb	r3, [r7, #15]
    break;
 8007e54:	e00b      	b.n	8007e6e <DMA_CheckFifoParam+0xe6>
        break;
 8007e56:	bf00      	nop
 8007e58:	e00a      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        break;
 8007e5a:	bf00      	nop
 8007e5c:	e008      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        break;
 8007e5e:	bf00      	nop
 8007e60:	e006      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        break;
 8007e62:	bf00      	nop
 8007e64:	e004      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        break;
 8007e66:	bf00      	nop
 8007e68:	e002      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
        break;
 8007e6a:	bf00      	nop
 8007e6c:	e000      	b.n	8007e70 <DMA_CheckFifoParam+0xe8>
    break;
 8007e6e:	bf00      	nop
    }
  }

  return status;
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop

08007e80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a38      	ldr	r2, [pc, #224]	; (8007f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d022      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a36      	ldr	r2, [pc, #216]	; (8007f78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01d      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a35      	ldr	r2, [pc, #212]	; (8007f7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d018      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a33      	ldr	r2, [pc, #204]	; (8007f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d013      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a32      	ldr	r2, [pc, #200]	; (8007f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00e      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a30      	ldr	r2, [pc, #192]	; (8007f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d009      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a2f      	ldr	r2, [pc, #188]	; (8007f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d004      	beq.n	8007ede <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a2d      	ldr	r2, [pc, #180]	; (8007f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d101      	bne.n	8007ee2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e000      	b.n	8007ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01a      	beq.n	8007f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	3b08      	subs	r3, #8
 8007ef0:	4a28      	ldr	r2, [pc, #160]	; (8007f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	091b      	lsrs	r3, r3, #4
 8007ef8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4b26      	ldr	r3, [pc, #152]	; (8007f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	461a      	mov	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a24      	ldr	r2, [pc, #144]	; (8007f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007f0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f003 031f 	and.w	r3, r3, #31
 8007f14:	2201      	movs	r2, #1
 8007f16:	409a      	lsls	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007f1c:	e024      	b.n	8007f68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	3b10      	subs	r3, #16
 8007f26:	4a1e      	ldr	r2, [pc, #120]	; (8007fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007f28:	fba2 2303 	umull	r2, r3, r2, r3
 8007f2c:	091b      	lsrs	r3, r3, #4
 8007f2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	4a1c      	ldr	r2, [pc, #112]	; (8007fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d806      	bhi.n	8007f46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4a1b      	ldr	r2, [pc, #108]	; (8007fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d902      	bls.n	8007f46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3308      	adds	r3, #8
 8007f44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	4b18      	ldr	r3, [pc, #96]	; (8007fac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	461a      	mov	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007f58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f003 031f 	and.w	r3, r3, #31
 8007f60:	2201      	movs	r2, #1
 8007f62:	409a      	lsls	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f68:	bf00      	nop
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	58025408 	.word	0x58025408
 8007f78:	5802541c 	.word	0x5802541c
 8007f7c:	58025430 	.word	0x58025430
 8007f80:	58025444 	.word	0x58025444
 8007f84:	58025458 	.word	0x58025458
 8007f88:	5802546c 	.word	0x5802546c
 8007f8c:	58025480 	.word	0x58025480
 8007f90:	58025494 	.word	0x58025494
 8007f94:	cccccccd 	.word	0xcccccccd
 8007f98:	16009600 	.word	0x16009600
 8007f9c:	58025880 	.word	0x58025880
 8007fa0:	aaaaaaab 	.word	0xaaaaaaab
 8007fa4:	400204b8 	.word	0x400204b8
 8007fa8:	4002040f 	.word	0x4002040f
 8007fac:	10008200 	.word	0x10008200
 8007fb0:	40020880 	.word	0x40020880

08007fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d04a      	beq.n	8008060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2b08      	cmp	r3, #8
 8007fce:	d847      	bhi.n	8008060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a25      	ldr	r2, [pc, #148]	; (800806c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d022      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a24      	ldr	r2, [pc, #144]	; (8008070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d01d      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a22      	ldr	r2, [pc, #136]	; (8008074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d018      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a21      	ldr	r2, [pc, #132]	; (8008078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d013      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a1f      	ldr	r2, [pc, #124]	; (800807c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00e      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a1e      	ldr	r2, [pc, #120]	; (8008080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d009      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a1c      	ldr	r2, [pc, #112]	; (8008084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a1b      	ldr	r2, [pc, #108]	; (8008088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d101      	bne.n	8008024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008020:	2301      	movs	r3, #1
 8008022:	e000      	b.n	8008026 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008024:	2300      	movs	r3, #0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4b17      	ldr	r3, [pc, #92]	; (800808c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	461a      	mov	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	4a15      	ldr	r2, [pc, #84]	; (8008090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800803c:	671a      	str	r2, [r3, #112]	; 0x70
 800803e:	e009      	b.n	8008054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	4b14      	ldr	r3, [pc, #80]	; (8008094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	461a      	mov	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a11      	ldr	r2, [pc, #68]	; (8008098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008052:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	3b01      	subs	r3, #1
 8008058:	2201      	movs	r2, #1
 800805a:	409a      	lsls	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	58025408 	.word	0x58025408
 8008070:	5802541c 	.word	0x5802541c
 8008074:	58025430 	.word	0x58025430
 8008078:	58025444 	.word	0x58025444
 800807c:	58025458 	.word	0x58025458
 8008080:	5802546c 	.word	0x5802546c
 8008084:	58025480 	.word	0x58025480
 8008088:	58025494 	.word	0x58025494
 800808c:	1600963f 	.word	0x1600963f
 8008090:	58025940 	.word	0x58025940
 8008094:	1000823f 	.word	0x1000823f
 8008098:	40020940 	.word	0x40020940

0800809c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800809c:	b480      	push	{r7}
 800809e:	b089      	sub	sp, #36	; 0x24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80080aa:	4b89      	ldr	r3, [pc, #548]	; (80082d0 <HAL_GPIO_Init+0x234>)
 80080ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080ae:	e194      	b.n	80083da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	2101      	movs	r1, #1
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	fa01 f303 	lsl.w	r3, r1, r3
 80080bc:	4013      	ands	r3, r2
 80080be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 8186 	beq.w	80083d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d00b      	beq.n	80080e8 <HAL_GPIO_Init+0x4c>
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d007      	beq.n	80080e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80080dc:	2b11      	cmp	r3, #17
 80080de:	d003      	beq.n	80080e8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	2b12      	cmp	r3, #18
 80080e6:	d130      	bne.n	800814a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	2203      	movs	r2, #3
 80080f4:	fa02 f303 	lsl.w	r3, r2, r3
 80080f8:	43db      	mvns	r3, r3
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	4013      	ands	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	005b      	lsls	r3, r3, #1
 8008108:	fa02 f303 	lsl.w	r3, r2, r3
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	4313      	orrs	r3, r2
 8008110:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800811e:	2201      	movs	r2, #1
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	43db      	mvns	r3, r3
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	4013      	ands	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	091b      	lsrs	r3, r3, #4
 8008134:	f003 0201 	and.w	r2, r3, #1
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	fa02 f303 	lsl.w	r3, r2, r3
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	4313      	orrs	r3, r2
 8008142:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	2203      	movs	r2, #3
 8008156:	fa02 f303 	lsl.w	r3, r2, r3
 800815a:	43db      	mvns	r3, r3
 800815c:	69ba      	ldr	r2, [r7, #24]
 800815e:	4013      	ands	r3, r2
 8008160:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	4313      	orrs	r3, r2
 8008172:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d003      	beq.n	800818a <HAL_GPIO_Init+0xee>
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2b12      	cmp	r3, #18
 8008188:	d123      	bne.n	80081d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	08da      	lsrs	r2, r3, #3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3208      	adds	r2, #8
 8008192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	220f      	movs	r2, #15
 80081a2:	fa02 f303 	lsl.w	r3, r2, r3
 80081a6:	43db      	mvns	r3, r3
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	4013      	ands	r3, r2
 80081ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	f003 0307 	and.w	r3, r3, #7
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	fa02 f303 	lsl.w	r3, r2, r3
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	08da      	lsrs	r2, r3, #3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3208      	adds	r2, #8
 80081cc:	69b9      	ldr	r1, [r7, #24]
 80081ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	2203      	movs	r2, #3
 80081de:	fa02 f303 	lsl.w	r3, r2, r3
 80081e2:	43db      	mvns	r3, r3
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	4013      	ands	r3, r2
 80081e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f003 0203 	and.w	r2, r3, #3
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	005b      	lsls	r3, r3, #1
 80081f6:	fa02 f303 	lsl.w	r3, r2, r3
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 80e0 	beq.w	80083d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008214:	4b2f      	ldr	r3, [pc, #188]	; (80082d4 <HAL_GPIO_Init+0x238>)
 8008216:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800821a:	4a2e      	ldr	r2, [pc, #184]	; (80082d4 <HAL_GPIO_Init+0x238>)
 800821c:	f043 0302 	orr.w	r3, r3, #2
 8008220:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008224:	4b2b      	ldr	r3, [pc, #172]	; (80082d4 <HAL_GPIO_Init+0x238>)
 8008226:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008232:	4a29      	ldr	r2, [pc, #164]	; (80082d8 <HAL_GPIO_Init+0x23c>)
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	089b      	lsrs	r3, r3, #2
 8008238:	3302      	adds	r3, #2
 800823a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800823e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	f003 0303 	and.w	r3, r3, #3
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	220f      	movs	r2, #15
 800824a:	fa02 f303 	lsl.w	r3, r2, r3
 800824e:	43db      	mvns	r3, r3
 8008250:	69ba      	ldr	r2, [r7, #24]
 8008252:	4013      	ands	r3, r2
 8008254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a20      	ldr	r2, [pc, #128]	; (80082dc <HAL_GPIO_Init+0x240>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d052      	beq.n	8008304 <HAL_GPIO_Init+0x268>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a1f      	ldr	r2, [pc, #124]	; (80082e0 <HAL_GPIO_Init+0x244>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d031      	beq.n	80082ca <HAL_GPIO_Init+0x22e>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a1e      	ldr	r2, [pc, #120]	; (80082e4 <HAL_GPIO_Init+0x248>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d02b      	beq.n	80082c6 <HAL_GPIO_Init+0x22a>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a1d      	ldr	r2, [pc, #116]	; (80082e8 <HAL_GPIO_Init+0x24c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d025      	beq.n	80082c2 <HAL_GPIO_Init+0x226>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a1c      	ldr	r2, [pc, #112]	; (80082ec <HAL_GPIO_Init+0x250>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d01f      	beq.n	80082be <HAL_GPIO_Init+0x222>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a1b      	ldr	r2, [pc, #108]	; (80082f0 <HAL_GPIO_Init+0x254>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d019      	beq.n	80082ba <HAL_GPIO_Init+0x21e>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a1a      	ldr	r2, [pc, #104]	; (80082f4 <HAL_GPIO_Init+0x258>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <HAL_GPIO_Init+0x21a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a19      	ldr	r2, [pc, #100]	; (80082f8 <HAL_GPIO_Init+0x25c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00d      	beq.n	80082b2 <HAL_GPIO_Init+0x216>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a18      	ldr	r2, [pc, #96]	; (80082fc <HAL_GPIO_Init+0x260>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d007      	beq.n	80082ae <HAL_GPIO_Init+0x212>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a17      	ldr	r2, [pc, #92]	; (8008300 <HAL_GPIO_Init+0x264>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d101      	bne.n	80082aa <HAL_GPIO_Init+0x20e>
 80082a6:	2309      	movs	r3, #9
 80082a8:	e02d      	b.n	8008306 <HAL_GPIO_Init+0x26a>
 80082aa:	230a      	movs	r3, #10
 80082ac:	e02b      	b.n	8008306 <HAL_GPIO_Init+0x26a>
 80082ae:	2308      	movs	r3, #8
 80082b0:	e029      	b.n	8008306 <HAL_GPIO_Init+0x26a>
 80082b2:	2307      	movs	r3, #7
 80082b4:	e027      	b.n	8008306 <HAL_GPIO_Init+0x26a>
 80082b6:	2306      	movs	r3, #6
 80082b8:	e025      	b.n	8008306 <HAL_GPIO_Init+0x26a>
 80082ba:	2305      	movs	r3, #5
 80082bc:	e023      	b.n	8008306 <HAL_GPIO_Init+0x26a>
 80082be:	2304      	movs	r3, #4
 80082c0:	e021      	b.n	8008306 <HAL_GPIO_Init+0x26a>
 80082c2:	2303      	movs	r3, #3
 80082c4:	e01f      	b.n	8008306 <HAL_GPIO_Init+0x26a>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e01d      	b.n	8008306 <HAL_GPIO_Init+0x26a>
 80082ca:	2301      	movs	r3, #1
 80082cc:	e01b      	b.n	8008306 <HAL_GPIO_Init+0x26a>
 80082ce:	bf00      	nop
 80082d0:	58000080 	.word	0x58000080
 80082d4:	58024400 	.word	0x58024400
 80082d8:	58000400 	.word	0x58000400
 80082dc:	58020000 	.word	0x58020000
 80082e0:	58020400 	.word	0x58020400
 80082e4:	58020800 	.word	0x58020800
 80082e8:	58020c00 	.word	0x58020c00
 80082ec:	58021000 	.word	0x58021000
 80082f0:	58021400 	.word	0x58021400
 80082f4:	58021800 	.word	0x58021800
 80082f8:	58021c00 	.word	0x58021c00
 80082fc:	58022000 	.word	0x58022000
 8008300:	58022400 	.word	0x58022400
 8008304:	2300      	movs	r3, #0
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	f002 0203 	and.w	r2, r2, #3
 800830c:	0092      	lsls	r2, r2, #2
 800830e:	4093      	lsls	r3, r2
 8008310:	69ba      	ldr	r2, [r7, #24]
 8008312:	4313      	orrs	r3, r2
 8008314:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008316:	4938      	ldr	r1, [pc, #224]	; (80083f8 <HAL_GPIO_Init+0x35c>)
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	089b      	lsrs	r3, r3, #2
 800831c:	3302      	adds	r3, #2
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	43db      	mvns	r3, r3
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	4013      	ands	r3, r2
 8008332:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	69ba      	ldr	r2, [r7, #24]
 800834c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	43db      	mvns	r3, r3
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	4013      	ands	r3, r2
 800835c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d003      	beq.n	8008372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	43db      	mvns	r3, r3
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	4013      	ands	r3, r2
 8008388:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	4313      	orrs	r3, r2
 800839c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800839e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80083a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	43db      	mvns	r3, r3
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	4013      	ands	r3, r2
 80083b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d003      	beq.n	80083cc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80083cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	3301      	adds	r3, #1
 80083d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	fa22 f303 	lsr.w	r3, r2, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f47f ae63 	bne.w	80080b0 <HAL_GPIO_Init+0x14>
  }
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	3724      	adds	r7, #36	; 0x24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	58000400 	.word	0x58000400

080083fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	807b      	strh	r3, [r7, #2]
 8008408:	4613      	mov	r3, r2
 800840a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800840c:	787b      	ldrb	r3, [r7, #1]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008412:	887a      	ldrh	r2, [r7, #2]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008418:	e003      	b.n	8008422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800841a:	887b      	ldrh	r3, [r7, #2]
 800841c:	041a      	lsls	r2, r3, #16
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	619a      	str	r2, [r3, #24]
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800842e:	b480      	push	{r7}
 8008430:	b085      	sub	sp, #20
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	460b      	mov	r3, r1
 8008438:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008440:	887a      	ldrh	r2, [r7, #2]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4013      	ands	r3, r2
 8008446:	041a      	lsls	r2, r3, #16
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	43d9      	mvns	r1, r3
 800844c:	887b      	ldrh	r3, [r7, #2]
 800844e:	400b      	ands	r3, r1
 8008450:	431a      	orrs	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	619a      	str	r2, [r3, #24]
}
 8008456:	bf00      	nop
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
	...

08008464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e07f      	b.n	8008576 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d106      	bne.n	8008490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7fb faf6 	bl	8003a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2224      	movs	r2, #36	; 0x24
 8008494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 0201 	bic.w	r2, r2, #1
 80084a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d107      	bne.n	80084de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084da:	609a      	str	r2, [r3, #8]
 80084dc:	e006      	b.n	80084ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d104      	bne.n	80084fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6859      	ldr	r1, [r3, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <HAL_I2C_Init+0x11c>)
 800850a:	430b      	orrs	r3, r1
 800850c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800851c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691a      	ldr	r2, [r3, #16]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	ea42 0103 	orr.w	r1, r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	021a      	lsls	r2, r3, #8
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	69d9      	ldr	r1, [r3, #28]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a1a      	ldr	r2, [r3, #32]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2220      	movs	r2, #32
 8008562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	02008000 	.word	0x02008000

08008584 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af02      	add	r7, sp, #8
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	4608      	mov	r0, r1
 800858e:	4611      	mov	r1, r2
 8008590:	461a      	mov	r2, r3
 8008592:	4603      	mov	r3, r0
 8008594:	817b      	strh	r3, [r7, #10]
 8008596:	460b      	mov	r3, r1
 8008598:	813b      	strh	r3, [r7, #8]
 800859a:	4613      	mov	r3, r2
 800859c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	f040 80f9 	bne.w	800879e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <HAL_I2C_Mem_Write+0x34>
 80085b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d105      	bne.n	80085c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e0ed      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <HAL_I2C_Mem_Write+0x4e>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e0e6      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085da:	f7fc fdbf 	bl	800515c <HAL_GetTick>
 80085de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	2319      	movs	r3, #25
 80085e6:	2201      	movs	r2, #1
 80085e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f001 fee3 	bl	800a3b8 <I2C_WaitOnFlagUntilTimeout>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e0d1      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2221      	movs	r2, #33	; 0x21
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2240      	movs	r2, #64	; 0x40
 8008608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a3a      	ldr	r2, [r7, #32]
 8008616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800861c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008624:	88f8      	ldrh	r0, [r7, #6]
 8008626:	893a      	ldrh	r2, [r7, #8]
 8008628:	8979      	ldrh	r1, [r7, #10]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	4603      	mov	r3, r0
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 ff23 	bl	8009480 <I2C_RequestMemoryWrite>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e0a9      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008650:	b29b      	uxth	r3, r3
 8008652:	2bff      	cmp	r3, #255	; 0xff
 8008654:	d90e      	bls.n	8008674 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	22ff      	movs	r2, #255	; 0xff
 800865a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008660:	b2da      	uxtb	r2, r3
 8008662:	8979      	ldrh	r1, [r7, #10]
 8008664:	2300      	movs	r3, #0
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f001 ffc5 	bl	800a5fc <I2C_TransferConfig>
 8008672:	e00f      	b.n	8008694 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008682:	b2da      	uxtb	r2, r3
 8008684:	8979      	ldrh	r1, [r7, #10]
 8008686:	2300      	movs	r3, #0
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f001 ffb4 	bl	800a5fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f001 fecd 	bl	800a438 <I2C_WaitOnTXISFlagUntilTimeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e07b      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	781a      	ldrb	r2, [r3, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	3b01      	subs	r3, #1
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d0:	3b01      	subs	r3, #1
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d034      	beq.n	800874c <HAL_I2C_Mem_Write+0x1c8>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d130      	bne.n	800874c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	2200      	movs	r2, #0
 80086f2:	2180      	movs	r1, #128	; 0x80
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f001 fe5f 	bl	800a3b8 <I2C_WaitOnFlagUntilTimeout>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e04d      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008708:	b29b      	uxth	r3, r3
 800870a:	2bff      	cmp	r3, #255	; 0xff
 800870c:	d90e      	bls.n	800872c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	22ff      	movs	r2, #255	; 0xff
 8008712:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008718:	b2da      	uxtb	r2, r3
 800871a:	8979      	ldrh	r1, [r7, #10]
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f001 ff69 	bl	800a5fc <I2C_TransferConfig>
 800872a:	e00f      	b.n	800874c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873a:	b2da      	uxtb	r2, r3
 800873c:	8979      	ldrh	r1, [r7, #10]
 800873e:	2300      	movs	r3, #0
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 ff58 	bl	800a5fc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008750:	b29b      	uxth	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d19e      	bne.n	8008694 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f001 feac 	bl	800a4b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e01a      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2220      	movs	r2, #32
 8008770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6859      	ldr	r1, [r3, #4]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <HAL_I2C_Mem_Write+0x224>)
 800877e:	400b      	ands	r3, r1
 8008780:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2220      	movs	r2, #32
 8008786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	e000      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800879e:	2302      	movs	r3, #2
  }
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	fe00e800 	.word	0xfe00e800

080087ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af02      	add	r7, sp, #8
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	4608      	mov	r0, r1
 80087b6:	4611      	mov	r1, r2
 80087b8:	461a      	mov	r2, r3
 80087ba:	4603      	mov	r3, r0
 80087bc:	817b      	strh	r3, [r7, #10]
 80087be:	460b      	mov	r3, r1
 80087c0:	813b      	strh	r3, [r7, #8]
 80087c2:	4613      	mov	r3, r2
 80087c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	f040 80fd 	bne.w	80089ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <HAL_I2C_Mem_Read+0x34>
 80087da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d105      	bne.n	80087ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e0f1      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_I2C_Mem_Read+0x4e>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e0ea      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008802:	f7fc fcab 	bl	800515c <HAL_GetTick>
 8008806:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	2319      	movs	r3, #25
 800880e:	2201      	movs	r2, #1
 8008810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f001 fdcf 	bl	800a3b8 <I2C_WaitOnFlagUntilTimeout>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e0d5      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2222      	movs	r2, #34	; 0x22
 8008828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2240      	movs	r2, #64	; 0x40
 8008830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a3a      	ldr	r2, [r7, #32]
 800883e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008844:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800884c:	88f8      	ldrh	r0, [r7, #6]
 800884e:	893a      	ldrh	r2, [r7, #8]
 8008850:	8979      	ldrh	r1, [r7, #10]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	4603      	mov	r3, r0
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 fe63 	bl	8009528 <I2C_RequestMemoryRead>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e0ad      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008878:	b29b      	uxth	r3, r3
 800887a:	2bff      	cmp	r3, #255	; 0xff
 800887c:	d90e      	bls.n	800889c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	22ff      	movs	r2, #255	; 0xff
 8008882:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008888:	b2da      	uxtb	r2, r3
 800888a:	8979      	ldrh	r1, [r7, #10]
 800888c:	4b52      	ldr	r3, [pc, #328]	; (80089d8 <HAL_I2C_Mem_Read+0x22c>)
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f001 feb1 	bl	800a5fc <I2C_TransferConfig>
 800889a:	e00f      	b.n	80088bc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	8979      	ldrh	r1, [r7, #10]
 80088ae:	4b4a      	ldr	r3, [pc, #296]	; (80089d8 <HAL_I2C_Mem_Read+0x22c>)
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f001 fea0 	bl	800a5fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	2200      	movs	r2, #0
 80088c4:	2104      	movs	r1, #4
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f001 fd76 	bl	800a3b8 <I2C_WaitOnFlagUntilTimeout>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e07c      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	b2d2      	uxtb	r2, r2
 80088e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f2:	3b01      	subs	r3, #1
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fe:	b29b      	uxth	r3, r3
 8008900:	3b01      	subs	r3, #1
 8008902:	b29a      	uxth	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890c:	b29b      	uxth	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d034      	beq.n	800897c <HAL_I2C_Mem_Read+0x1d0>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008916:	2b00      	cmp	r3, #0
 8008918:	d130      	bne.n	800897c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008920:	2200      	movs	r2, #0
 8008922:	2180      	movs	r1, #128	; 0x80
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f001 fd47 	bl	800a3b8 <I2C_WaitOnFlagUntilTimeout>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e04d      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008938:	b29b      	uxth	r3, r3
 800893a:	2bff      	cmp	r3, #255	; 0xff
 800893c:	d90e      	bls.n	800895c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	22ff      	movs	r2, #255	; 0xff
 8008942:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008948:	b2da      	uxtb	r2, r3
 800894a:	8979      	ldrh	r1, [r7, #10]
 800894c:	2300      	movs	r3, #0
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f001 fe51 	bl	800a5fc <I2C_TransferConfig>
 800895a:	e00f      	b.n	800897c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008960:	b29a      	uxth	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800896a:	b2da      	uxtb	r2, r3
 800896c:	8979      	ldrh	r1, [r7, #10]
 800896e:	2300      	movs	r3, #0
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f001 fe40 	bl	800a5fc <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d19a      	bne.n	80088bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f001 fd94 	bl	800a4b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e01a      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2220      	movs	r2, #32
 80089a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6859      	ldr	r1, [r3, #4]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	4b0b      	ldr	r3, [pc, #44]	; (80089dc <HAL_I2C_Mem_Read+0x230>)
 80089ae:	400b      	ands	r3, r1
 80089b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	e000      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80089ce:	2302      	movs	r3, #2
  }
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3718      	adds	r7, #24
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	80002400 	.word	0x80002400
 80089dc:	fe00e800 	.word	0xfe00e800

080089e0 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	; 0x28
 80089e4:	af02      	add	r7, sp, #8
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	4608      	mov	r0, r1
 80089ea:	4611      	mov	r1, r2
 80089ec:	461a      	mov	r2, r3
 80089ee:	4603      	mov	r3, r0
 80089f0:	817b      	strh	r3, [r7, #10]
 80089f2:	460b      	mov	r3, r1
 80089f4:	813b      	strh	r3, [r7, #8]
 80089f6:	4613      	mov	r3, r2
 80089f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b20      	cmp	r3, #32
 8008a04:	f040 80d5 	bne.w	8008bb2 <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <HAL_I2C_Mem_Read_DMA+0x34>
 8008a0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d105      	bne.n	8008a20 <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e0c9      	b.n	8008bb4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	699b      	ldr	r3, [r3, #24]
 8008a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a2e:	d101      	bne.n	8008a34 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 8008a30:	2302      	movs	r3, #2
 8008a32:	e0bf      	b.n	8008bb4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <HAL_I2C_Mem_Read_DMA+0x62>
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e0b8      	b.n	8008bb4 <HAL_I2C_Mem_Read_DMA+0x1d4>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a4a:	f7fc fb87 	bl	800515c <HAL_GetTick>
 8008a4e:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2222      	movs	r2, #34	; 0x22
 8008a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2240      	movs	r2, #64	; 0x40
 8008a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008a70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4a51      	ldr	r2, [pc, #324]	; (8008bbc <HAL_I2C_Mem_Read_DMA+0x1dc>)
 8008a76:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a51      	ldr	r2, [pc, #324]	; (8008bc0 <HAL_I2C_Mem_Read_DMA+0x1e0>)
 8008a7c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	2bff      	cmp	r3, #255	; 0xff
 8008a86:	d906      	bls.n	8008a96 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	22ff      	movs	r2, #255	; 0xff
 8008a8c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008a8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a92:	61fb      	str	r3, [r7, #28]
 8008a94:	e007      	b.n	8008aa6 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008aa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008aa4:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008aa6:	88f8      	ldrh	r0, [r7, #6]
 8008aa8:	893a      	ldrh	r2, [r7, #8]
 8008aaa:	8979      	ldrh	r1, [r7, #10]
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	2319      	movs	r3, #25
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 fd36 	bl	8009528 <I2C_RequestMemoryRead>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d005      	beq.n	8008ace <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e072      	b.n	8008bb4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d020      	beq.n	8008b18 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ada:	4a3a      	ldr	r2, [pc, #232]	; (8008bc4 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8008adc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae2:	4a39      	ldr	r2, [pc, #228]	; (8008bc8 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8008ae4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aea:	2200      	movs	r2, #0
 8008aec:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af2:	2200      	movs	r2, #0
 8008af4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream or channel depends on Instance */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3324      	adds	r3, #36	; 0x24
 8008b00:	4619      	mov	r1, r3
 8008b02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b08:	f7fc ffd0 	bl	8005aac <HAL_DMA_Start_IT>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d139      	bne.n	8008b8a <HAL_I2C_Mem_Read_DMA+0x1aa>
 8008b16:	e013      	b.n	8008b40 <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e039      	b.n	8008bb4 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	8979      	ldrh	r1, [r7, #10]
 8008b48:	4b20      	ldr	r3, [pc, #128]	; (8008bcc <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f001 fd54 	bl	800a5fc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008b6e:	2110      	movs	r1, #16
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f001 fd71 	bl	800a658 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b84:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	e014      	b.n	8008bb4 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2220      	movs	r2, #32
 8008b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b9e:	f043 0210 	orr.w	r2, r3, #16
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e000      	b.n	8008bb4 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 8008bb2:	2302      	movs	r3, #2
  }
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3720      	adds	r7, #32
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	ffff0000 	.word	0xffff0000
 8008bc0:	08008edb 	.word	0x08008edb
 8008bc4:	0800a077 	.word	0x0800a077
 8008bc8:	0800a10d 	.word	0x0800a10d
 8008bcc:	80002400 	.word	0x80002400

08008bd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d005      	beq.n	8008bfc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	4798      	blx	r3
  }
}
 8008bfc:	bf00      	nop
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
 8008c60:	4613      	mov	r3, r2
 8008c62:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <I2C_Slave_ISR_IT+0x24>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e0ec      	b.n	8008ed2 <I2C_Slave_ISR_IT+0x1fe>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	095b      	lsrs	r3, r3, #5
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d009      	beq.n	8008d20 <I2C_Slave_ISR_IT+0x4c>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	095b      	lsrs	r3, r3, #5
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d003      	beq.n	8008d20 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008d18:	6939      	ldr	r1, [r7, #16]
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f000 fe42 	bl	80099a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	091b      	lsrs	r3, r3, #4
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d04d      	beq.n	8008dc8 <I2C_Slave_ISR_IT+0xf4>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	091b      	lsrs	r3, r3, #4
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d047      	beq.n	8008dc8 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d128      	bne.n	8008d94 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b28      	cmp	r3, #40	; 0x28
 8008d4c:	d108      	bne.n	8008d60 <I2C_Slave_ISR_IT+0x8c>
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d54:	d104      	bne.n	8008d60 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008d56:	6939      	ldr	r1, [r7, #16]
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f001 f81b 	bl	8009d94 <I2C_ITListenCplt>
 8008d5e:	e032      	b.n	8008dc6 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b29      	cmp	r3, #41	; 0x29
 8008d6a:	d10e      	bne.n	8008d8a <I2C_Slave_ISR_IT+0xb6>
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d72:	d00a      	beq.n	8008d8a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2210      	movs	r2, #16
 8008d7a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f001 f956 	bl	800a02e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 fce5 	bl	8009752 <I2C_ITSlaveSeqCplt>
 8008d88:	e01d      	b.n	8008dc6 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2210      	movs	r2, #16
 8008d90:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008d92:	e096      	b.n	8008ec2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	2210      	movs	r2, #16
 8008d9a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da0:	f043 0204 	orr.w	r2, r3, #4
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d004      	beq.n	8008db8 <I2C_Slave_ISR_IT+0xe4>
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008db4:	f040 8085 	bne.w	8008ec2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	68f8      	ldr	r0, [r7, #12]
 8008dc0:	f001 f83e 	bl	8009e40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008dc4:	e07d      	b.n	8008ec2 <I2C_Slave_ISR_IT+0x1ee>
 8008dc6:	e07c      	b.n	8008ec2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	089b      	lsrs	r3, r3, #2
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d030      	beq.n	8008e36 <I2C_Slave_ISR_IT+0x162>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	089b      	lsrs	r3, r3, #2
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d02a      	beq.n	8008e36 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d018      	beq.n	8008e1c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	3b01      	subs	r3, #1
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d14f      	bne.n	8008ec6 <I2C_Slave_ISR_IT+0x1f2>
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e2c:	d04b      	beq.n	8008ec6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 fc8f 	bl	8009752 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008e34:	e047      	b.n	8008ec6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	08db      	lsrs	r3, r3, #3
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	08db      	lsrs	r3, r3, #3
 8008e46:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d004      	beq.n	8008e58 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008e4e:	6939      	ldr	r1, [r7, #16]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 fbbd 	bl	80095d0 <I2C_ITAddrCplt>
 8008e56:	e037      	b.n	8008ec8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	085b      	lsrs	r3, r3, #1
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d031      	beq.n	8008ec8 <I2C_Slave_ISR_IT+0x1f4>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	085b      	lsrs	r3, r3, #1
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d02b      	beq.n	8008ec8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d018      	beq.n	8008eac <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7e:	781a      	ldrb	r2, [r3, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	3b01      	subs	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	851a      	strh	r2, [r3, #40]	; 0x28
 8008eaa:	e00d      	b.n	8008ec8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008eb2:	d002      	beq.n	8008eba <I2C_Slave_ISR_IT+0x1e6>
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d106      	bne.n	8008ec8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 fc49 	bl	8009752 <I2C_ITSlaveSeqCplt>
 8008ec0:	e002      	b.n	8008ec8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008ec2:	bf00      	nop
 8008ec4:	e000      	b.n	8008ec8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008ec6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b088      	sub	sp, #32
 8008ede:	af02      	add	r7, sp, #8
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	60b9      	str	r1, [r7, #8]
 8008ee4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d101      	bne.n	8008ef4 <I2C_Master_ISR_DMA+0x1a>
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	e0e1      	b.n	80090b8 <I2C_Master_ISR_DMA+0x1de>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	091b      	lsrs	r3, r3, #4
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d017      	beq.n	8008f38 <I2C_Master_ISR_DMA+0x5e>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	091b      	lsrs	r3, r3, #4
 8008f0c:	f003 0301 	and.w	r3, r3, #1
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d011      	beq.n	8008f38 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2210      	movs	r2, #16
 8008f1a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f20:	f043 0204 	orr.w	r2, r3, #4
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008f28:	2120      	movs	r1, #32
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f001 fb94 	bl	800a658 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f001 f87c 	bl	800a02e <I2C_Flush_TXDR>
 8008f36:	e0ba      	b.n	80090ae <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	09db      	lsrs	r3, r3, #7
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d072      	beq.n	800902a <I2C_Master_ISR_DMA+0x150>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	099b      	lsrs	r3, r3, #6
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d06c      	beq.n	800902a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f5e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d04e      	beq.n	8009008 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f76:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	2bff      	cmp	r3, #255	; 0xff
 8008f80:	d906      	bls.n	8008f90 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	22ff      	movs	r2, #255	; 0xff
 8008f86:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008f88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f8c:	617b      	str	r3, [r7, #20]
 8008f8e:	e010      	b.n	8008fb2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008fa2:	d003      	beq.n	8008fac <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	617b      	str	r3, [r7, #20]
 8008faa:	e002      	b.n	8008fb2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fb0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	8a79      	ldrh	r1, [r7, #18]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f001 fb1b 	bl	800a5fc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	b29a      	uxth	r2, r3
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b22      	cmp	r3, #34	; 0x22
 8008fe2:	d108      	bne.n	8008ff6 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ff2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008ff4:	e05b      	b.n	80090ae <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009004:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009006:	e052      	b.n	80090ae <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009016:	d003      	beq.n	8009020 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fb5d 	bl	80096d8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800901e:	e046      	b.n	80090ae <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009020:	2140      	movs	r1, #64	; 0x40
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f000 ff0c 	bl	8009e40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009028:	e041      	b.n	80090ae <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	099b      	lsrs	r3, r3, #6
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b00      	cmp	r3, #0
 8009034:	d029      	beq.n	800908a <I2C_Master_ISR_DMA+0x1b0>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	099b      	lsrs	r3, r3, #6
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d023      	beq.n	800908a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009046:	b29b      	uxth	r3, r3
 8009048:	2b00      	cmp	r3, #0
 800904a:	d119      	bne.n	8009080 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800905a:	d027      	beq.n	80090ac <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009064:	d108      	bne.n	8009078 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009074:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009076:	e019      	b.n	80090ac <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 fb2d 	bl	80096d8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800907e:	e015      	b.n	80090ac <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009080:	2140      	movs	r1, #64	; 0x40
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 fedc 	bl	8009e40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009088:	e010      	b.n	80090ac <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	095b      	lsrs	r3, r3, #5
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00b      	beq.n	80090ae <I2C_Master_ISR_DMA+0x1d4>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	095b      	lsrs	r3, r3, #5
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80090a2:	68b9      	ldr	r1, [r7, #8]
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f000 fbb3 	bl	8009810 <I2C_ITMasterCplt>
 80090aa:	e000      	b.n	80090ae <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80090ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3718      	adds	r7, #24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b088      	sub	sp, #32
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80090d2:	2300      	movs	r3, #0
 80090d4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d101      	bne.n	80090e4 <I2C_Slave_ISR_DMA+0x24>
 80090e0:	2302      	movs	r3, #2
 80090e2:	e1c8      	b.n	8009476 <I2C_Slave_ISR_DMA+0x3b6>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2201      	movs	r2, #1
 80090e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	095b      	lsrs	r3, r3, #5
 80090f0:	f003 0301 	and.w	r3, r3, #1
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d009      	beq.n	800910c <I2C_Slave_ISR_DMA+0x4c>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	d003      	beq.n	800910c <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009104:	68b9      	ldr	r1, [r7, #8]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 fc4c 	bl	80099a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	091b      	lsrs	r3, r3, #4
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 8199 	beq.w	800944c <I2C_Slave_ISR_DMA+0x38c>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	091b      	lsrs	r3, r3, #4
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 8192 	beq.w	800944c <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	0b9b      	lsrs	r3, r3, #14
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	d106      	bne.n	8009142 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	0bdb      	lsrs	r3, r3, #15
 8009138:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 817e 	beq.w	800943e <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009146:	2b00      	cmp	r3, #0
 8009148:	d07c      	beq.n	8009244 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	0bdb      	lsrs	r3, r3, #15
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	2b00      	cmp	r3, #0
 8009154:	d076      	beq.n	8009244 <I2C_Slave_ISR_DMA+0x184>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a8d      	ldr	r2, [pc, #564]	; (8009394 <I2C_Slave_ISR_DMA+0x2d4>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d059      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a8b      	ldr	r2, [pc, #556]	; (8009398 <I2C_Slave_ISR_DMA+0x2d8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d053      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a89      	ldr	r2, [pc, #548]	; (800939c <I2C_Slave_ISR_DMA+0x2dc>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d04d      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a87      	ldr	r2, [pc, #540]	; (80093a0 <I2C_Slave_ISR_DMA+0x2e0>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d047      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a85      	ldr	r2, [pc, #532]	; (80093a4 <I2C_Slave_ISR_DMA+0x2e4>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d041      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a83      	ldr	r2, [pc, #524]	; (80093a8 <I2C_Slave_ISR_DMA+0x2e8>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d03b      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a81      	ldr	r2, [pc, #516]	; (80093ac <I2C_Slave_ISR_DMA+0x2ec>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d035      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a7f      	ldr	r2, [pc, #508]	; (80093b0 <I2C_Slave_ISR_DMA+0x2f0>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d02f      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a7d      	ldr	r2, [pc, #500]	; (80093b4 <I2C_Slave_ISR_DMA+0x2f4>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d029      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a7b      	ldr	r2, [pc, #492]	; (80093b8 <I2C_Slave_ISR_DMA+0x2f8>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d023      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a79      	ldr	r2, [pc, #484]	; (80093bc <I2C_Slave_ISR_DMA+0x2fc>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d01d      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a77      	ldr	r2, [pc, #476]	; (80093c0 <I2C_Slave_ISR_DMA+0x300>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d017      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a75      	ldr	r2, [pc, #468]	; (80093c4 <I2C_Slave_ISR_DMA+0x304>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d011      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a73      	ldr	r2, [pc, #460]	; (80093c8 <I2C_Slave_ISR_DMA+0x308>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00b      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a71      	ldr	r2, [pc, #452]	; (80093cc <I2C_Slave_ISR_DMA+0x30c>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d005      	beq.n	8009216 <I2C_Slave_ISR_DMA+0x156>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a6f      	ldr	r2, [pc, #444]	; (80093d0 <I2C_Slave_ISR_DMA+0x310>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d109      	bne.n	800922a <I2C_Slave_ISR_DMA+0x16a>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	bf0c      	ite	eq
 8009222:	2301      	moveq	r3, #1
 8009224:	2300      	movne	r3, #0
 8009226:	b2db      	uxtb	r3, r3
 8009228:	e008      	b.n	800923c <I2C_Slave_ISR_DMA+0x17c>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	bf0c      	ite	eq
 8009236:	2301      	moveq	r3, #1
 8009238:	2300      	movne	r3, #0
 800923a:	b2db      	uxtb	r3, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 8009240:	2301      	movs	r3, #1
 8009242:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009248:	2b00      	cmp	r3, #0
 800924a:	d07c      	beq.n	8009346 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	0b9b      	lsrs	r3, r3, #14
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b00      	cmp	r3, #0
 8009256:	d076      	beq.n	8009346 <I2C_Slave_ISR_DMA+0x286>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a4d      	ldr	r2, [pc, #308]	; (8009394 <I2C_Slave_ISR_DMA+0x2d4>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d059      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a4b      	ldr	r2, [pc, #300]	; (8009398 <I2C_Slave_ISR_DMA+0x2d8>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d053      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a49      	ldr	r2, [pc, #292]	; (800939c <I2C_Slave_ISR_DMA+0x2dc>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d04d      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a47      	ldr	r2, [pc, #284]	; (80093a0 <I2C_Slave_ISR_DMA+0x2e0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d047      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a45      	ldr	r2, [pc, #276]	; (80093a4 <I2C_Slave_ISR_DMA+0x2e4>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d041      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a43      	ldr	r2, [pc, #268]	; (80093a8 <I2C_Slave_ISR_DMA+0x2e8>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d03b      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a41      	ldr	r2, [pc, #260]	; (80093ac <I2C_Slave_ISR_DMA+0x2ec>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d035      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a3f      	ldr	r2, [pc, #252]	; (80093b0 <I2C_Slave_ISR_DMA+0x2f0>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d02f      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a3d      	ldr	r2, [pc, #244]	; (80093b4 <I2C_Slave_ISR_DMA+0x2f4>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d029      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a3b      	ldr	r2, [pc, #236]	; (80093b8 <I2C_Slave_ISR_DMA+0x2f8>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d023      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a39      	ldr	r2, [pc, #228]	; (80093bc <I2C_Slave_ISR_DMA+0x2fc>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d01d      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a37      	ldr	r2, [pc, #220]	; (80093c0 <I2C_Slave_ISR_DMA+0x300>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d017      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a35      	ldr	r2, [pc, #212]	; (80093c4 <I2C_Slave_ISR_DMA+0x304>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d011      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a33      	ldr	r2, [pc, #204]	; (80093c8 <I2C_Slave_ISR_DMA+0x308>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d00b      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a31      	ldr	r2, [pc, #196]	; (80093cc <I2C_Slave_ISR_DMA+0x30c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d005      	beq.n	8009318 <I2C_Slave_ISR_DMA+0x258>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a2f      	ldr	r2, [pc, #188]	; (80093d0 <I2C_Slave_ISR_DMA+0x310>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d109      	bne.n	800932c <I2C_Slave_ISR_DMA+0x26c>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	bf0c      	ite	eq
 8009324:	2301      	moveq	r3, #1
 8009326:	2300      	movne	r3, #0
 8009328:	b2db      	uxtb	r3, r3
 800932a:	e008      	b.n	800933e <I2C_Slave_ISR_DMA+0x27e>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	bf0c      	ite	eq
 8009338:	2301      	moveq	r3, #1
 800933a:	2300      	movne	r3, #0
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 8009342:	2301      	movs	r3, #1
 8009344:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d148      	bne.n	80093de <I2C_Slave_ISR_DMA+0x31e>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b28      	cmp	r3, #40	; 0x28
 8009356:	d108      	bne.n	800936a <I2C_Slave_ISR_DMA+0x2aa>
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800935e:	d104      	bne.n	800936a <I2C_Slave_ISR_DMA+0x2aa>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009360:	68b9      	ldr	r1, [r7, #8]
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 fd16 	bl	8009d94 <I2C_ITListenCplt>
 8009368:	e068      	b.n	800943c <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b29      	cmp	r3, #41	; 0x29
 8009374:	d12e      	bne.n	80093d4 <I2C_Slave_ISR_DMA+0x314>
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800937c:	d02a      	beq.n	80093d4 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2210      	movs	r2, #16
 8009384:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f000 fe51 	bl	800a02e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f000 f9e0 	bl	8009752 <I2C_ITSlaveSeqCplt>
 8009392:	e053      	b.n	800943c <I2C_Slave_ISR_DMA+0x37c>
 8009394:	40020010 	.word	0x40020010
 8009398:	40020028 	.word	0x40020028
 800939c:	40020040 	.word	0x40020040
 80093a0:	40020058 	.word	0x40020058
 80093a4:	40020070 	.word	0x40020070
 80093a8:	40020088 	.word	0x40020088
 80093ac:	400200a0 	.word	0x400200a0
 80093b0:	400200b8 	.word	0x400200b8
 80093b4:	40020410 	.word	0x40020410
 80093b8:	40020428 	.word	0x40020428
 80093bc:	40020440 	.word	0x40020440
 80093c0:	40020458 	.word	0x40020458
 80093c4:	40020470 	.word	0x40020470
 80093c8:	40020488 	.word	0x40020488
 80093cc:	400204a0 	.word	0x400204a0
 80093d0:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2210      	movs	r2, #16
 80093da:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80093dc:	e034      	b.n	8009448 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2210      	movs	r2, #16
 80093e4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ea:	f043 0204 	orr.w	r2, r3, #4
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093f8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <I2C_Slave_ISR_DMA+0x348>
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009406:	d11f      	bne.n	8009448 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	2b21      	cmp	r3, #33	; 0x21
 800940c:	d002      	beq.n	8009414 <I2C_Slave_ISR_DMA+0x354>
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	2b29      	cmp	r3, #41	; 0x29
 8009412:	d103      	bne.n	800941c <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2221      	movs	r2, #33	; 0x21
 8009418:	631a      	str	r2, [r3, #48]	; 0x30
 800941a:	e008      	b.n	800942e <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	2b22      	cmp	r3, #34	; 0x22
 8009420:	d002      	beq.n	8009428 <I2C_Slave_ISR_DMA+0x368>
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	2b2a      	cmp	r3, #42	; 0x2a
 8009426:	d102      	bne.n	800942e <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2222      	movs	r2, #34	; 0x22
 800942c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009432:	4619      	mov	r1, r3
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 fd03 	bl	8009e40 <I2C_ITError>
      if (treatdmanack == 1U)
 800943a:	e005      	b.n	8009448 <I2C_Slave_ISR_DMA+0x388>
 800943c:	e004      	b.n	8009448 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2210      	movs	r2, #16
 8009444:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009446:	e011      	b.n	800946c <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 8009448:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800944a:	e00f      	b.n	800946c <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	08db      	lsrs	r3, r3, #3
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b00      	cmp	r3, #0
 8009456:	d009      	beq.n	800946c <I2C_Slave_ISR_DMA+0x3ac>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	08db      	lsrs	r3, r3, #3
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d003      	beq.n	800946c <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009464:	68b9      	ldr	r1, [r7, #8]
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 f8b2 	bl	80095d0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop

08009480 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af02      	add	r7, sp, #8
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	4608      	mov	r0, r1
 800948a:	4611      	mov	r1, r2
 800948c:	461a      	mov	r2, r3
 800948e:	4603      	mov	r3, r0
 8009490:	817b      	strh	r3, [r7, #10]
 8009492:	460b      	mov	r3, r1
 8009494:	813b      	strh	r3, [r7, #8]
 8009496:	4613      	mov	r3, r2
 8009498:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800949a:	88fb      	ldrh	r3, [r7, #6]
 800949c:	b2da      	uxtb	r2, r3
 800949e:	8979      	ldrh	r1, [r7, #10]
 80094a0:	4b20      	ldr	r3, [pc, #128]	; (8009524 <I2C_RequestMemoryWrite+0xa4>)
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f001 f8a7 	bl	800a5fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094ae:	69fa      	ldr	r2, [r7, #28]
 80094b0:	69b9      	ldr	r1, [r7, #24]
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f000 ffc0 	bl	800a438 <I2C_WaitOnTXISFlagUntilTimeout>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e02c      	b.n	800951c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094c2:	88fb      	ldrh	r3, [r7, #6]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d105      	bne.n	80094d4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094c8:	893b      	ldrh	r3, [r7, #8]
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	629a      	str	r2, [r3, #40]	; 0x28
 80094d2:	e015      	b.n	8009500 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80094d4:	893b      	ldrh	r3, [r7, #8]
 80094d6:	0a1b      	lsrs	r3, r3, #8
 80094d8:	b29b      	uxth	r3, r3
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	69b9      	ldr	r1, [r7, #24]
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 ffa6 	bl	800a438 <I2C_WaitOnTXISFlagUntilTimeout>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	e012      	b.n	800951c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094f6:	893b      	ldrh	r3, [r7, #8]
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	2200      	movs	r2, #0
 8009508:	2180      	movs	r1, #128	; 0x80
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 ff54 	bl	800a3b8 <I2C_WaitOnFlagUntilTimeout>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e000      	b.n	800951c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	80002000 	.word	0x80002000

08009528 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af02      	add	r7, sp, #8
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	4608      	mov	r0, r1
 8009532:	4611      	mov	r1, r2
 8009534:	461a      	mov	r2, r3
 8009536:	4603      	mov	r3, r0
 8009538:	817b      	strh	r3, [r7, #10]
 800953a:	460b      	mov	r3, r1
 800953c:	813b      	strh	r3, [r7, #8]
 800953e:	4613      	mov	r3, r2
 8009540:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009542:	88fb      	ldrh	r3, [r7, #6]
 8009544:	b2da      	uxtb	r2, r3
 8009546:	8979      	ldrh	r1, [r7, #10]
 8009548:	4b20      	ldr	r3, [pc, #128]	; (80095cc <I2C_RequestMemoryRead+0xa4>)
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	2300      	movs	r3, #0
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f001 f854 	bl	800a5fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009554:	69fa      	ldr	r2, [r7, #28]
 8009556:	69b9      	ldr	r1, [r7, #24]
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 ff6d 	bl	800a438 <I2C_WaitOnTXISFlagUntilTimeout>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e02c      	b.n	80095c2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009568:	88fb      	ldrh	r3, [r7, #6]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d105      	bne.n	800957a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800956e:	893b      	ldrh	r3, [r7, #8]
 8009570:	b2da      	uxtb	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	629a      	str	r2, [r3, #40]	; 0x28
 8009578:	e015      	b.n	80095a6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800957a:	893b      	ldrh	r3, [r7, #8]
 800957c:	0a1b      	lsrs	r3, r3, #8
 800957e:	b29b      	uxth	r3, r3
 8009580:	b2da      	uxtb	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009588:	69fa      	ldr	r2, [r7, #28]
 800958a:	69b9      	ldr	r1, [r7, #24]
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 ff53 	bl	800a438 <I2C_WaitOnTXISFlagUntilTimeout>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e012      	b.n	80095c2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800959c:	893b      	ldrh	r3, [r7, #8]
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2200      	movs	r2, #0
 80095ae:	2140      	movs	r1, #64	; 0x40
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 ff01 	bl	800a3b8 <I2C_WaitOnFlagUntilTimeout>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e000      	b.n	80095c2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	80002000 	.word	0x80002000

080095d0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80095e6:	2b28      	cmp	r3, #40	; 0x28
 80095e8:	d16a      	bne.n	80096c0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	0c1b      	lsrs	r3, r3, #16
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	0c1b      	lsrs	r3, r3, #16
 8009602:	b29b      	uxth	r3, r3
 8009604:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009608:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	b29b      	uxth	r3, r3
 8009612:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009616:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	b29b      	uxth	r3, r3
 8009620:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8009624:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	2b02      	cmp	r3, #2
 800962c:	d138      	bne.n	80096a0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800962e:	897b      	ldrh	r3, [r7, #10]
 8009630:	09db      	lsrs	r3, r3, #7
 8009632:	b29a      	uxth	r2, r3
 8009634:	89bb      	ldrh	r3, [r7, #12]
 8009636:	4053      	eors	r3, r2
 8009638:	b29b      	uxth	r3, r3
 800963a:	f003 0306 	and.w	r3, r3, #6
 800963e:	2b00      	cmp	r3, #0
 8009640:	d11c      	bne.n	800967c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8009642:	897b      	ldrh	r3, [r7, #10]
 8009644:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009654:	2b02      	cmp	r3, #2
 8009656:	d13b      	bne.n	80096d0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2208      	movs	r2, #8
 8009664:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800966e:	89ba      	ldrh	r2, [r7, #12]
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff faed 	bl	8008c54 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800967a:	e029      	b.n	80096d0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800967c:	893b      	ldrh	r3, [r7, #8]
 800967e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009680:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f001 f84b 	bl	800a720 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009692:	89ba      	ldrh	r2, [r7, #12]
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7ff fadb 	bl	8008c54 <HAL_I2C_AddrCallback>
}
 800969e:	e017      	b.n	80096d0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80096a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f001 f83b 	bl	800a720 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80096b2:	89ba      	ldrh	r2, [r7, #12]
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7ff facb 	bl	8008c54 <HAL_I2C_AddrCallback>
}
 80096be:	e007      	b.n	80096d0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2208      	movs	r2, #8
 80096c6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80096d0:	bf00      	nop
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b21      	cmp	r3, #33	; 0x21
 80096f2:	d115      	bne.n	8009720 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2220      	movs	r2, #32
 80096f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2211      	movs	r2, #17
 8009700:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009708:	2101      	movs	r1, #1
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f001 f808 	bl	800a720 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff fa73 	bl	8008c04 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800971e:	e014      	b.n	800974a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2220      	movs	r2, #32
 8009724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2212      	movs	r2, #18
 800972c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009734:	2102      	movs	r1, #2
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fff2 	bl	800a720 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7ff fa67 	bl	8008c18 <HAL_I2C_MasterRxCpltCallback>
}
 800974a:	bf00      	nop
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b084      	sub	sp, #16
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	0b9b      	lsrs	r3, r3, #14
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b00      	cmp	r3, #0
 8009774:	d008      	beq.n	8009788 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009784:	601a      	str	r2, [r3, #0]
 8009786:	e00d      	b.n	80097a4 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	0bdb      	lsrs	r3, r3, #15
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	d007      	beq.n	80097a4 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80097a2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b29      	cmp	r3, #41	; 0x29
 80097ae:	d112      	bne.n	80097d6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2228      	movs	r2, #40	; 0x28
 80097b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2221      	movs	r2, #33	; 0x21
 80097bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80097be:	2101      	movs	r1, #1
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 ffad 	bl	800a720 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff fa2c 	bl	8008c2c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80097d4:	e017      	b.n	8009806 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b2a      	cmp	r3, #42	; 0x2a
 80097e0:	d111      	bne.n	8009806 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2228      	movs	r2, #40	; 0x28
 80097e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2222      	movs	r2, #34	; 0x22
 80097ee:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80097f0:	2102      	movs	r1, #2
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 ff94 	bl	800a720 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff fa1d 	bl	8008c40 <HAL_I2C_SlaveRxCpltCallback>
}
 8009806:	bf00      	nop
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2220      	movs	r2, #32
 8009824:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b21      	cmp	r3, #33	; 0x21
 8009830:	d107      	bne.n	8009842 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009832:	2101      	movs	r1, #1
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 ff73 	bl	800a720 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2211      	movs	r2, #17
 800983e:	631a      	str	r2, [r3, #48]	; 0x30
 8009840:	e00c      	b.n	800985c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b22      	cmp	r3, #34	; 0x22
 800984c:	d106      	bne.n	800985c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800984e:	2102      	movs	r1, #2
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 ff65 	bl	800a720 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2212      	movs	r2, #18
 800985a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6859      	ldr	r1, [r3, #4]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	4b4d      	ldr	r3, [pc, #308]	; (800999c <I2C_ITMasterCplt+0x18c>)
 8009868:	400b      	ands	r3, r1
 800986a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a4a      	ldr	r2, [pc, #296]	; (80099a0 <I2C_ITMasterCplt+0x190>)
 8009876:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	091b      	lsrs	r3, r3, #4
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	2b00      	cmp	r3, #0
 8009882:	d009      	beq.n	8009898 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2210      	movs	r2, #16
 800988a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009890:	f043 0204 	orr.w	r2, r3, #4
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b60      	cmp	r3, #96	; 0x60
 80098a2:	d10b      	bne.n	80098bc <I2C_ITMasterCplt+0xac>
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	089b      	lsrs	r3, r3, #2
 80098a8:	f003 0301 	and.w	r3, r3, #1
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d005      	beq.n	80098bc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80098ba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 fbb6 	bl	800a02e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098c6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b60      	cmp	r3, #96	; 0x60
 80098d2:	d002      	beq.n	80098da <I2C_ITMasterCplt+0xca>
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d006      	beq.n	80098e8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 faad 	bl	8009e40 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80098e6:	e054      	b.n	8009992 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	2b21      	cmp	r3, #33	; 0x21
 80098f2:	d124      	bne.n	800993e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2220      	movs	r2, #32
 80098f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009908:	b2db      	uxtb	r3, r3
 800990a:	2b40      	cmp	r3, #64	; 0x40
 800990c:	d10b      	bne.n	8009926 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f7ff f9b0 	bl	8008c84 <HAL_I2C_MemTxCpltCallback>
}
 8009924:	e035      	b.n	8009992 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff f964 	bl	8008c04 <HAL_I2C_MasterTxCpltCallback>
}
 800993c:	e029      	b.n	8009992 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009944:	b2db      	uxtb	r3, r3
 8009946:	2b22      	cmp	r3, #34	; 0x22
 8009948:	d123      	bne.n	8009992 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2220      	movs	r2, #32
 800994e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b40      	cmp	r3, #64	; 0x40
 8009962:	d10b      	bne.n	800997c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7ff f98f 	bl	8008c98 <HAL_I2C_MemRxCpltCallback>
}
 800997a:	e00a      	b.n	8009992 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f7ff f943 	bl	8008c18 <HAL_I2C_MasterRxCpltCallback>
}
 8009992:	bf00      	nop
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	fe00e800 	.word	0xfe00e800
 80099a0:	ffff0000 	.word	0xffff0000

080099a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099c0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2220      	movs	r2, #32
 80099c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	2b21      	cmp	r3, #33	; 0x21
 80099ce:	d002      	beq.n	80099d6 <I2C_ITSlaveCplt+0x32>
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	2b29      	cmp	r3, #41	; 0x29
 80099d4:	d108      	bne.n	80099e8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80099d6:	f248 0101 	movw	r1, #32769	; 0x8001
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fea0 	bl	800a720 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2221      	movs	r2, #33	; 0x21
 80099e4:	631a      	str	r2, [r3, #48]	; 0x30
 80099e6:	e00d      	b.n	8009a04 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	2b22      	cmp	r3, #34	; 0x22
 80099ec:	d002      	beq.n	80099f4 <I2C_ITSlaveCplt+0x50>
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	2b2a      	cmp	r3, #42	; 0x2a
 80099f2:	d107      	bne.n	8009a04 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80099f4:	f248 0102 	movw	r1, #32770	; 0x8002
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fe91 	bl	800a720 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2222      	movs	r2, #34	; 0x22
 8009a02:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a12:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6859      	ldr	r1, [r3, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	4b80      	ldr	r3, [pc, #512]	; (8009c20 <I2C_ITSlaveCplt+0x27c>)
 8009a20:	400b      	ands	r3, r1
 8009a22:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 fb02 	bl	800a02e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	0b9b      	lsrs	r3, r3, #14
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d07a      	beq.n	8009b2c <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 8111 	beq.w	8009c72 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a73      	ldr	r2, [pc, #460]	; (8009c24 <I2C_ITSlaveCplt+0x280>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d059      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a71      	ldr	r2, [pc, #452]	; (8009c28 <I2C_ITSlaveCplt+0x284>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d053      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a6f      	ldr	r2, [pc, #444]	; (8009c2c <I2C_ITSlaveCplt+0x288>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d04d      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a6d      	ldr	r2, [pc, #436]	; (8009c30 <I2C_ITSlaveCplt+0x28c>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d047      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a6b      	ldr	r2, [pc, #428]	; (8009c34 <I2C_ITSlaveCplt+0x290>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d041      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a69      	ldr	r2, [pc, #420]	; (8009c38 <I2C_ITSlaveCplt+0x294>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d03b      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a67      	ldr	r2, [pc, #412]	; (8009c3c <I2C_ITSlaveCplt+0x298>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d035      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a65      	ldr	r2, [pc, #404]	; (8009c40 <I2C_ITSlaveCplt+0x29c>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d02f      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a63      	ldr	r2, [pc, #396]	; (8009c44 <I2C_ITSlaveCplt+0x2a0>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d029      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a61      	ldr	r2, [pc, #388]	; (8009c48 <I2C_ITSlaveCplt+0x2a4>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d023      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a5f      	ldr	r2, [pc, #380]	; (8009c4c <I2C_ITSlaveCplt+0x2a8>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d01d      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a5d      	ldr	r2, [pc, #372]	; (8009c50 <I2C_ITSlaveCplt+0x2ac>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d017      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a5b      	ldr	r2, [pc, #364]	; (8009c54 <I2C_ITSlaveCplt+0x2b0>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d011      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a59      	ldr	r2, [pc, #356]	; (8009c58 <I2C_ITSlaveCplt+0x2b4>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d00b      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a57      	ldr	r2, [pc, #348]	; (8009c5c <I2C_ITSlaveCplt+0x2b8>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d005      	beq.n	8009b10 <I2C_ITSlaveCplt+0x16c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a55      	ldr	r2, [pc, #340]	; (8009c60 <I2C_ITSlaveCplt+0x2bc>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d105      	bne.n	8009b1c <I2C_ITSlaveCplt+0x178>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	e004      	b.n	8009b26 <I2C_ITSlaveCplt+0x182>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	8553      	strh	r3, [r2, #42]	; 0x2a
 8009b2a:	e0a2      	b.n	8009c72 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	0bdb      	lsrs	r3, r3, #15
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 809c 	beq.w	8009c72 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b48:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 808f 	beq.w	8009c72 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a32      	ldr	r2, [pc, #200]	; (8009c24 <I2C_ITSlaveCplt+0x280>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d059      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a30      	ldr	r2, [pc, #192]	; (8009c28 <I2C_ITSlaveCplt+0x284>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d053      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a2e      	ldr	r2, [pc, #184]	; (8009c2c <I2C_ITSlaveCplt+0x288>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d04d      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a2c      	ldr	r2, [pc, #176]	; (8009c30 <I2C_ITSlaveCplt+0x28c>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d047      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a2a      	ldr	r2, [pc, #168]	; (8009c34 <I2C_ITSlaveCplt+0x290>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d041      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a28      	ldr	r2, [pc, #160]	; (8009c38 <I2C_ITSlaveCplt+0x294>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d03b      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a26      	ldr	r2, [pc, #152]	; (8009c3c <I2C_ITSlaveCplt+0x298>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d035      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a24      	ldr	r2, [pc, #144]	; (8009c40 <I2C_ITSlaveCplt+0x29c>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d02f      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a22      	ldr	r2, [pc, #136]	; (8009c44 <I2C_ITSlaveCplt+0x2a0>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d029      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a20      	ldr	r2, [pc, #128]	; (8009c48 <I2C_ITSlaveCplt+0x2a4>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d023      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a1e      	ldr	r2, [pc, #120]	; (8009c4c <I2C_ITSlaveCplt+0x2a8>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d01d      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a1c      	ldr	r2, [pc, #112]	; (8009c50 <I2C_ITSlaveCplt+0x2ac>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d017      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a1a      	ldr	r2, [pc, #104]	; (8009c54 <I2C_ITSlaveCplt+0x2b0>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d011      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a18      	ldr	r2, [pc, #96]	; (8009c58 <I2C_ITSlaveCplt+0x2b4>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d00b      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a16      	ldr	r2, [pc, #88]	; (8009c5c <I2C_ITSlaveCplt+0x2b8>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d005      	beq.n	8009c14 <I2C_ITSlaveCplt+0x270>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a14      	ldr	r2, [pc, #80]	; (8009c60 <I2C_ITSlaveCplt+0x2bc>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d127      	bne.n	8009c64 <I2C_ITSlaveCplt+0x2c0>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	e026      	b.n	8009c6e <I2C_ITSlaveCplt+0x2ca>
 8009c20:	fe00e800 	.word	0xfe00e800
 8009c24:	40020010 	.word	0x40020010
 8009c28:	40020028 	.word	0x40020028
 8009c2c:	40020040 	.word	0x40020040
 8009c30:	40020058 	.word	0x40020058
 8009c34:	40020070 	.word	0x40020070
 8009c38:	40020088 	.word	0x40020088
 8009c3c:	400200a0 	.word	0x400200a0
 8009c40:	400200b8 	.word	0x400200b8
 8009c44:	40020410 	.word	0x40020410
 8009c48:	40020428 	.word	0x40020428
 8009c4c:	40020440 	.word	0x40020440
 8009c50:	40020458 	.word	0x40020458
 8009c54:	40020470 	.word	0x40020470
 8009c58:	40020488 	.word	0x40020488
 8009c5c:	400204a0 	.word	0x400204a0
 8009c60:	400204b8 	.word	0x400204b8
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	089b      	lsrs	r3, r3, #2
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d020      	beq.n	8009cc0 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f023 0304 	bic.w	r3, r3, #4
 8009c84:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	b2d2      	uxtb	r2, r2
 8009c92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00c      	beq.n	8009cc0 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009caa:	3b01      	subs	r3, #1
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d005      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cce:	f043 0204 	orr.w	r2, r3, #4
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d010      	beq.n	8009d0e <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f8a4 	bl	8009e40 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b28      	cmp	r3, #40	; 0x28
 8009d02:	d141      	bne.n	8009d88 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009d04:	6979      	ldr	r1, [r7, #20]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f844 	bl	8009d94 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009d0c:	e03c      	b.n	8009d88 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009d16:	d014      	beq.n	8009d42 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7ff fd1a 	bl	8009752 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a1b      	ldr	r2, [pc, #108]	; (8009d90 <I2C_ITSlaveCplt+0x3ec>)
 8009d22:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2220      	movs	r2, #32
 8009d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7fe ff98 	bl	8008c70 <HAL_I2C_ListenCpltCallback>
}
 8009d40:	e022      	b.n	8009d88 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b22      	cmp	r3, #34	; 0x22
 8009d4c:	d10e      	bne.n	8009d6c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7fe ff6b 	bl	8008c40 <HAL_I2C_SlaveRxCpltCallback>
}
 8009d6a:	e00d      	b.n	8009d88 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2220      	movs	r2, #32
 8009d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7fe ff52 	bl	8008c2c <HAL_I2C_SlaveTxCpltCallback>
}
 8009d88:	bf00      	nop
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	ffff0000 	.word	0xffff0000

08009d94 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a26      	ldr	r2, [pc, #152]	; (8009e3c <I2C_ITListenCplt+0xa8>)
 8009da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2220      	movs	r2, #32
 8009dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	089b      	lsrs	r3, r3, #2
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d022      	beq.n	8009e12 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	b2d2      	uxtb	r2, r2
 8009dd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	1c5a      	adds	r2, r3, #1
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d012      	beq.n	8009e12 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009df0:	3b01      	subs	r3, #1
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e0a:	f043 0204 	orr.w	r2, r3, #4
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009e12:	f248 0103 	movw	r1, #32771	; 0x8003
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fc82 	bl	800a720 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2210      	movs	r2, #16
 8009e22:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7fe ff1f 	bl	8008c70 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	ffff0000 	.word	0xffff0000

08009e40 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a5d      	ldr	r2, [pc, #372]	; (8009fd4 <I2C_ITError+0x194>)
 8009e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	431a      	orrs	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
 8009e74:	2b28      	cmp	r3, #40	; 0x28
 8009e76:	d005      	beq.n	8009e84 <I2C_ITError+0x44>
 8009e78:	7bfb      	ldrb	r3, [r7, #15]
 8009e7a:	2b29      	cmp	r3, #41	; 0x29
 8009e7c:	d002      	beq.n	8009e84 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009e7e:	7bfb      	ldrb	r3, [r7, #15]
 8009e80:	2b2a      	cmp	r3, #42	; 0x2a
 8009e82:	d10b      	bne.n	8009e9c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009e84:	2103      	movs	r1, #3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fc4a 	bl	800a720 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2228      	movs	r2, #40	; 0x28
 8009e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a50      	ldr	r2, [pc, #320]	; (8009fd8 <I2C_ITError+0x198>)
 8009e98:	635a      	str	r2, [r3, #52]	; 0x34
 8009e9a:	e011      	b.n	8009ec0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009e9c:	f248 0103 	movw	r1, #32771	; 0x8003
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fc3d 	bl	800a720 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b60      	cmp	r3, #96	; 0x60
 8009eb0:	d003      	beq.n	8009eba <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d039      	beq.n	8009f42 <I2C_ITError+0x102>
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2b11      	cmp	r3, #17
 8009ed2:	d002      	beq.n	8009eda <I2C_ITError+0x9a>
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	2b21      	cmp	r3, #33	; 0x21
 8009ed8:	d133      	bne.n	8009f42 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ee8:	d107      	bne.n	8009efa <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ef8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fd fcca 	bl	8007898 <HAL_DMA_GetState>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d017      	beq.n	8009f3a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	4a33      	ldr	r2, [pc, #204]	; (8009fdc <I2C_ITError+0x19c>)
 8009f10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fc fb4c 	bl	80065bc <HAL_DMA_Abort_IT>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d04d      	beq.n	8009fc6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f34:	4610      	mov	r0, r2
 8009f36:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f38:	e045      	b.n	8009fc6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f850 	bl	8009fe0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009f40:	e041      	b.n	8009fc6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d039      	beq.n	8009fbe <I2C_ITError+0x17e>
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b12      	cmp	r3, #18
 8009f4e:	d002      	beq.n	8009f56 <I2C_ITError+0x116>
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2b22      	cmp	r3, #34	; 0x22
 8009f54:	d133      	bne.n	8009fbe <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f64:	d107      	bne.n	8009f76 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f74:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fd fc8c 	bl	8007898 <HAL_DMA_GetState>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d017      	beq.n	8009fb6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8a:	4a14      	ldr	r2, [pc, #80]	; (8009fdc <I2C_ITError+0x19c>)
 8009f8c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7fc fb0e 	bl	80065bc <HAL_DMA_Abort_IT>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d011      	beq.n	8009fca <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fb4:	e009      	b.n	8009fca <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f812 	bl	8009fe0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fbc:	e005      	b.n	8009fca <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f80e 	bl	8009fe0 <I2C_TreatErrorCallback>
  }
}
 8009fc4:	e002      	b.n	8009fcc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009fc6:	bf00      	nop
 8009fc8:	e000      	b.n	8009fcc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009fca:	bf00      	nop
}
 8009fcc:	bf00      	nop
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	ffff0000 	.word	0xffff0000
 8009fd8:	08008cd5 	.word	0x08008cd5
 8009fdc:	0800a37d 	.word	0x0800a37d

08009fe0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b60      	cmp	r3, #96	; 0x60
 8009ff2:	d10e      	bne.n	800a012 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7fe fe58 	bl	8008cc0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a010:	e009      	b.n	800a026 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f7fe fe43 	bl	8008cac <HAL_I2C_ErrorCallback>
}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a02e:	b480      	push	{r7}
 800a030:	b083      	sub	sp, #12
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	f003 0302 	and.w	r3, r3, #2
 800a040:	2b02      	cmp	r3, #2
 800a042:	d103      	bne.n	800a04c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2200      	movs	r2, #0
 800a04a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b01      	cmp	r3, #1
 800a058:	d007      	beq.n	800a06a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	699a      	ldr	r2, [r3, #24]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f042 0201 	orr.w	r2, r2, #1
 800a068:	619a      	str	r2, [r3, #24]
  }
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a082:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a092:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a098:	b29b      	uxth	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d104      	bne.n	800a0a8 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a09e:	2120      	movs	r1, #32
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 fad9 	bl	800a658 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a0a6:	e02d      	b.n	800a104 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	68fa      	ldr	r2, [r7, #12]
 800a0ae:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a0b0:	441a      	add	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	2bff      	cmp	r3, #255	; 0xff
 800a0be:	d903      	bls.n	800a0c8 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	22ff      	movs	r2, #255	; 0xff
 800a0c4:	851a      	strh	r2, [r3, #40]	; 0x28
 800a0c6:	e004      	b.n	800a0d2 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	3324      	adds	r3, #36	; 0x24
 800a0dc:	4619      	mov	r1, r3
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e8:	f7fb fce0 	bl	8005aac <HAL_DMA_Start_IT>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d004      	beq.n	800a0fc <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a0f2:	2110      	movs	r1, #16
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7ff fea3 	bl	8009e40 <I2C_ITError>
}
 800a0fa:	e003      	b.n	800a104 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a0fc:	2140      	movs	r1, #64	; 0x40
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 faaa 	bl	800a658 <I2C_Enable_IRQ>
}
 800a104:	bf00      	nop
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800a114:	2300      	movs	r3, #0
 800a116:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	2b00      	cmp	r3, #0
 800a124:	d076      	beq.n	800a214 <I2C_DMAError+0x108>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a83      	ldr	r2, [pc, #524]	; (800a33c <I2C_DMAError+0x230>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d059      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a81      	ldr	r2, [pc, #516]	; (800a340 <I2C_DMAError+0x234>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d053      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a7f      	ldr	r2, [pc, #508]	; (800a344 <I2C_DMAError+0x238>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d04d      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a7d      	ldr	r2, [pc, #500]	; (800a348 <I2C_DMAError+0x23c>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d047      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a7b      	ldr	r2, [pc, #492]	; (800a34c <I2C_DMAError+0x240>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d041      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a79      	ldr	r2, [pc, #484]	; (800a350 <I2C_DMAError+0x244>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d03b      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a77      	ldr	r2, [pc, #476]	; (800a354 <I2C_DMAError+0x248>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d035      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a75      	ldr	r2, [pc, #468]	; (800a358 <I2C_DMAError+0x24c>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d02f      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a73      	ldr	r2, [pc, #460]	; (800a35c <I2C_DMAError+0x250>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d029      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a71      	ldr	r2, [pc, #452]	; (800a360 <I2C_DMAError+0x254>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d023      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a6f      	ldr	r2, [pc, #444]	; (800a364 <I2C_DMAError+0x258>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d01d      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a6d      	ldr	r2, [pc, #436]	; (800a368 <I2C_DMAError+0x25c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d017      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a6b      	ldr	r2, [pc, #428]	; (800a36c <I2C_DMAError+0x260>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d011      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a69      	ldr	r2, [pc, #420]	; (800a370 <I2C_DMAError+0x264>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d00b      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a67      	ldr	r2, [pc, #412]	; (800a374 <I2C_DMAError+0x268>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d005      	beq.n	800a1e6 <I2C_DMAError+0xda>
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a65      	ldr	r2, [pc, #404]	; (800a378 <I2C_DMAError+0x26c>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d109      	bne.n	800a1fa <I2C_DMAError+0xee>
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	bf0c      	ite	eq
 800a1f2:	2301      	moveq	r3, #1
 800a1f4:	2300      	movne	r3, #0
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	e008      	b.n	800a20c <I2C_DMAError+0x100>
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	bf0c      	ite	eq
 800a206:	2301      	moveq	r3, #1
 800a208:	2300      	movne	r3, #0
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d001      	beq.n	800a214 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800a210:	2301      	movs	r3, #1
 800a212:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d076      	beq.n	800a30a <I2C_DMAError+0x1fe>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a46      	ldr	r2, [pc, #280]	; (800a33c <I2C_DMAError+0x230>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d059      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a44      	ldr	r2, [pc, #272]	; (800a340 <I2C_DMAError+0x234>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d053      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a42      	ldr	r2, [pc, #264]	; (800a344 <I2C_DMAError+0x238>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d04d      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a40      	ldr	r2, [pc, #256]	; (800a348 <I2C_DMAError+0x23c>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d047      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a3e      	ldr	r2, [pc, #248]	; (800a34c <I2C_DMAError+0x240>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d041      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a3c      	ldr	r2, [pc, #240]	; (800a350 <I2C_DMAError+0x244>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d03b      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a3a      	ldr	r2, [pc, #232]	; (800a354 <I2C_DMAError+0x248>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d035      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a38      	ldr	r2, [pc, #224]	; (800a358 <I2C_DMAError+0x24c>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d02f      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a36      	ldr	r2, [pc, #216]	; (800a35c <I2C_DMAError+0x250>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d029      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a34      	ldr	r2, [pc, #208]	; (800a360 <I2C_DMAError+0x254>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d023      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a32      	ldr	r2, [pc, #200]	; (800a364 <I2C_DMAError+0x258>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d01d      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a30      	ldr	r2, [pc, #192]	; (800a368 <I2C_DMAError+0x25c>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d017      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a2e      	ldr	r2, [pc, #184]	; (800a36c <I2C_DMAError+0x260>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d011      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a2c      	ldr	r2, [pc, #176]	; (800a370 <I2C_DMAError+0x264>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d00b      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a2a      	ldr	r2, [pc, #168]	; (800a374 <I2C_DMAError+0x268>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d005      	beq.n	800a2dc <I2C_DMAError+0x1d0>
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a28      	ldr	r2, [pc, #160]	; (800a378 <I2C_DMAError+0x26c>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d109      	bne.n	800a2f0 <I2C_DMAError+0x1e4>
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	bf0c      	ite	eq
 800a2e8:	2301      	moveq	r3, #1
 800a2ea:	2300      	movne	r3, #0
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	e008      	b.n	800a302 <I2C_DMAError+0x1f6>
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	bf0c      	ite	eq
 800a2fc:	2301      	moveq	r3, #1
 800a2fe:	2300      	movne	r3, #0
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d001      	beq.n	800a30a <I2C_DMAError+0x1fe>
    {
      treatdmaerror = 1U;
 800a306:	2301      	movs	r3, #1
 800a308:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7fd fad2 	bl	80078b4 <HAL_DMA_GetError>
 800a310:	4603      	mov	r3, r0
 800a312:	2b02      	cmp	r3, #2
 800a314:	d00e      	beq.n	800a334 <I2C_DMAError+0x228>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00b      	beq.n	800a334 <I2C_DMAError+0x228>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	685a      	ldr	r2, [r3, #4]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a32a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a32c:	2110      	movs	r1, #16
 800a32e:	68b8      	ldr	r0, [r7, #8]
 800a330:	f7ff fd86 	bl	8009e40 <I2C_ITError>
  }
}
 800a334:	bf00      	nop
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	40020010 	.word	0x40020010
 800a340:	40020028 	.word	0x40020028
 800a344:	40020040 	.word	0x40020040
 800a348:	40020058 	.word	0x40020058
 800a34c:	40020070 	.word	0x40020070
 800a350:	40020088 	.word	0x40020088
 800a354:	400200a0 	.word	0x400200a0
 800a358:	400200b8 	.word	0x400200b8
 800a35c:	40020410 	.word	0x40020410
 800a360:	40020428 	.word	0x40020428
 800a364:	40020440 	.word	0x40020440
 800a368:	40020458 	.word	0x40020458
 800a36c:	40020470 	.word	0x40020470
 800a370:	40020488 	.word	0x40020488
 800a374:	400204a0 	.word	0x400204a0
 800a378:	400204b8 	.word	0x400204b8

0800a37c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a388:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a396:	2200      	movs	r2, #0
 800a398:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7ff fe18 	bl	8009fe0 <I2C_TreatErrorCallback>
}
 800a3b0:	bf00      	nop
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3c8:	e022      	b.n	800a410 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d0:	d01e      	beq.n	800a410 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3d2:	f7fa fec3 	bl	800515c <HAL_GetTick>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d302      	bcc.n	800a3e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d113      	bne.n	800a410 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3ec:	f043 0220 	orr.w	r2, r3, #32
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e00f      	b.n	800a430 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	699a      	ldr	r2, [r3, #24]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	4013      	ands	r3, r2
 800a41a:	68ba      	ldr	r2, [r7, #8]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	bf0c      	ite	eq
 800a420:	2301      	moveq	r3, #1
 800a422:	2300      	movne	r3, #0
 800a424:	b2db      	uxtb	r3, r3
 800a426:	461a      	mov	r2, r3
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d0cd      	beq.n	800a3ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a444:	e02c      	b.n	800a4a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	68b9      	ldr	r1, [r7, #8]
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 f870 	bl	800a530 <I2C_IsAcknowledgeFailed>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d001      	beq.n	800a45a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e02a      	b.n	800a4b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a460:	d01e      	beq.n	800a4a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a462:	f7fa fe7b 	bl	800515c <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d302      	bcc.n	800a478 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d113      	bne.n	800a4a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a47c:	f043 0220 	orr.w	r2, r3, #32
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2220      	movs	r2, #32
 800a488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e007      	b.n	800a4b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d1cb      	bne.n	800a446 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4c4:	e028      	b.n	800a518 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 f830 	bl	800a530 <I2C_IsAcknowledgeFailed>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e026      	b.n	800a528 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4da:	f7fa fe3f 	bl	800515c <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d302      	bcc.n	800a4f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d113      	bne.n	800a518 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f4:	f043 0220 	orr.w	r2, r3, #32
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2220      	movs	r2, #32
 800a500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e007      	b.n	800a528 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	f003 0320 	and.w	r3, r3, #32
 800a522:	2b20      	cmp	r3, #32
 800a524:	d1cf      	bne.n	800a4c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	f003 0310 	and.w	r3, r3, #16
 800a546:	2b10      	cmp	r3, #16
 800a548:	d151      	bne.n	800a5ee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a54a:	e022      	b.n	800a592 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a552:	d01e      	beq.n	800a592 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a554:	f7fa fe02 	bl	800515c <HAL_GetTick>
 800a558:	4602      	mov	r2, r0
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	429a      	cmp	r2, r3
 800a562:	d302      	bcc.n	800a56a <I2C_IsAcknowledgeFailed+0x3a>
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d113      	bne.n	800a592 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a56e:	f043 0220 	orr.w	r2, r3, #32
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2220      	movs	r2, #32
 800a57a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e02e      	b.n	800a5f0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	f003 0320 	and.w	r3, r3, #32
 800a59c:	2b20      	cmp	r3, #32
 800a59e:	d1d5      	bne.n	800a54c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2210      	movs	r2, #16
 800a5a6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7ff fd3c 	bl	800a02e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6859      	ldr	r1, [r3, #4]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	4b0d      	ldr	r3, [pc, #52]	; (800a5f8 <I2C_IsAcknowledgeFailed+0xc8>)
 800a5c2:	400b      	ands	r3, r1
 800a5c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ca:	f043 0204 	orr.w	r2, r3, #4
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e000      	b.n	800a5f0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	fe00e800 	.word	0xfe00e800

0800a5fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b085      	sub	sp, #20
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	607b      	str	r3, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	817b      	strh	r3, [r7, #10]
 800a60a:	4613      	mov	r3, r2
 800a60c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	0d5b      	lsrs	r3, r3, #21
 800a618:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a61c:	4b0d      	ldr	r3, [pc, #52]	; (800a654 <I2C_TransferConfig+0x58>)
 800a61e:	430b      	orrs	r3, r1
 800a620:	43db      	mvns	r3, r3
 800a622:	ea02 0103 	and.w	r1, r2, r3
 800a626:	897b      	ldrh	r3, [r7, #10]
 800a628:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a62c:	7a7b      	ldrb	r3, [r7, #9]
 800a62e:	041b      	lsls	r3, r3, #16
 800a630:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a634:	431a      	orrs	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	431a      	orrs	r2, r3
 800a63a:	69bb      	ldr	r3, [r7, #24]
 800a63c:	431a      	orrs	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800a646:	bf00      	nop
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	03ff63ff 	.word	0x03ff63ff

0800a658 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	460b      	mov	r3, r1
 800a662:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a66c:	4a2a      	ldr	r2, [pc, #168]	; (800a718 <I2C_Enable_IRQ+0xc0>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d004      	beq.n	800a67c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800a676:	4a29      	ldr	r2, [pc, #164]	; (800a71c <I2C_Enable_IRQ+0xc4>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d11d      	bne.n	800a6b8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a67c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a680:	2b00      	cmp	r3, #0
 800a682:	da03      	bge.n	800a68c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a68a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a68c:	887b      	ldrh	r3, [r7, #2]
 800a68e:	2b10      	cmp	r3, #16
 800a690:	d103      	bne.n	800a69a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a698:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a69a:	887b      	ldrh	r3, [r7, #2]
 800a69c:	2b20      	cmp	r3, #32
 800a69e:	d103      	bne.n	800a6a8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a6a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a6a8:	887b      	ldrh	r3, [r7, #2]
 800a6aa:	2b40      	cmp	r3, #64	; 0x40
 800a6ac:	d125      	bne.n	800a6fa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6b4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a6b6:	e020      	b.n	800a6fa <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a6b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	da03      	bge.n	800a6c8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a6c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a6c8:	887b      	ldrh	r3, [r7, #2]
 800a6ca:	f003 0301 	and.w	r3, r3, #1
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d003      	beq.n	800a6da <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800a6d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a6da:	887b      	ldrh	r3, [r7, #2]
 800a6dc:	f003 0302 	and.w	r3, r3, #2
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d003      	beq.n	800a6ec <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800a6ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a6ec:	887b      	ldrh	r3, [r7, #2]
 800a6ee:	2b20      	cmp	r3, #32
 800a6f0:	d103      	bne.n	800a6fa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f043 0320 	orr.w	r3, r3, #32
 800a6f8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6819      	ldr	r1, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	430a      	orrs	r2, r1
 800a708:	601a      	str	r2, [r3, #0]
}
 800a70a:	bf00      	nop
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	08008edb 	.word	0x08008edb
 800a71c:	080090c1 	.word	0x080090c1

0800a720 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800a720:	b480      	push	{r7}
 800a722:	b085      	sub	sp, #20
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800a730:	887b      	ldrh	r3, [r7, #2]
 800a732:	f003 0301 	and.w	r3, r3, #1
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00f      	beq.n	800a75a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800a740:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a74e:	2b28      	cmp	r3, #40	; 0x28
 800a750:	d003      	beq.n	800a75a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a758:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800a75a:	887b      	ldrh	r3, [r7, #2]
 800a75c:	f003 0302 	and.w	r3, r3, #2
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00f      	beq.n	800a784 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800a76a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a772:	b2db      	uxtb	r3, r3
 800a774:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a778:	2b28      	cmp	r3, #40	; 0x28
 800a77a:	d003      	beq.n	800a784 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800a782:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800a784:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	da03      	bge.n	800a794 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800a792:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800a794:	887b      	ldrh	r3, [r7, #2]
 800a796:	2b10      	cmp	r3, #16
 800a798:	d103      	bne.n	800a7a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800a7a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800a7a2:	887b      	ldrh	r3, [r7, #2]
 800a7a4:	2b20      	cmp	r3, #32
 800a7a6:	d103      	bne.n	800a7b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f043 0320 	orr.w	r3, r3, #32
 800a7ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800a7b0:	887b      	ldrh	r3, [r7, #2]
 800a7b2:	2b40      	cmp	r3, #64	; 0x40
 800a7b4:	d103      	bne.n	800a7be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	6819      	ldr	r1, [r3, #0]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	43da      	mvns	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	400a      	ands	r2, r1
 800a7ce:	601a      	str	r2, [r3, #0]
}
 800a7d0:	bf00      	nop
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b20      	cmp	r3, #32
 800a7f0:	d138      	bne.n	800a864 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d101      	bne.n	800a800 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	e032      	b.n	800a866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2224      	movs	r2, #36	; 0x24
 800a80c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f022 0201 	bic.w	r2, r2, #1
 800a81e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a82e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6819      	ldr	r1, [r3, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	430a      	orrs	r2, r1
 800a83e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f042 0201 	orr.w	r2, r2, #1
 800a84e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2220      	movs	r2, #32
 800a854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a860:	2300      	movs	r3, #0
 800a862:	e000      	b.n	800a866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a864:	2302      	movs	r3, #2
  }
}
 800a866:	4618      	mov	r0, r3
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a872:	b480      	push	{r7}
 800a874:	b085      	sub	sp, #20
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b20      	cmp	r3, #32
 800a886:	d139      	bne.n	800a8fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d101      	bne.n	800a896 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a892:	2302      	movs	r3, #2
 800a894:	e033      	b.n	800a8fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2224      	movs	r2, #36	; 0x24
 800a8a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 0201 	bic.w	r2, r2, #1
 800a8b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a8c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	021b      	lsls	r3, r3, #8
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f042 0201 	orr.w	r2, r2, #1
 800a8e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e000      	b.n	800a8fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a8fc:	2302      	movs	r3, #2
  }
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
	...

0800a90c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a914:	4b19      	ldr	r3, [pc, #100]	; (800a97c <HAL_PWREx_ConfigSupply+0x70>)
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	f003 0304 	and.w	r3, r3, #4
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	d00a      	beq.n	800a936 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a920:	4b16      	ldr	r3, [pc, #88]	; (800a97c <HAL_PWREx_ConfigSupply+0x70>)
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	f003 0307 	and.w	r3, r3, #7
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d001      	beq.n	800a932 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	e01f      	b.n	800a972 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	e01d      	b.n	800a972 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a936:	4b11      	ldr	r3, [pc, #68]	; (800a97c <HAL_PWREx_ConfigSupply+0x70>)
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	f023 0207 	bic.w	r2, r3, #7
 800a93e:	490f      	ldr	r1, [pc, #60]	; (800a97c <HAL_PWREx_ConfigSupply+0x70>)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4313      	orrs	r3, r2
 800a944:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a946:	f7fa fc09 	bl	800515c <HAL_GetTick>
 800a94a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a94c:	e009      	b.n	800a962 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a94e:	f7fa fc05 	bl	800515c <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a95c:	d901      	bls.n	800a962 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e007      	b.n	800a972 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a962:	4b06      	ldr	r3, [pc, #24]	; (800a97c <HAL_PWREx_ConfigSupply+0x70>)
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a96a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a96e:	d1ee      	bne.n	800a94e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	58024800 	.word	0x58024800

0800a980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b08c      	sub	sp, #48	; 0x30
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e3ff      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 8087 	beq.w	800aaae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9a0:	4b99      	ldr	r3, [pc, #612]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a9aa:	4b97      	ldr	r3, [pc, #604]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800a9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b2:	2b10      	cmp	r3, #16
 800a9b4:	d007      	beq.n	800a9c6 <HAL_RCC_OscConfig+0x46>
 800a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b8:	2b18      	cmp	r3, #24
 800a9ba:	d110      	bne.n	800a9de <HAL_RCC_OscConfig+0x5e>
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	f003 0303 	and.w	r3, r3, #3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d10b      	bne.n	800a9de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9c6:	4b90      	ldr	r3, [pc, #576]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d06c      	beq.n	800aaac <HAL_RCC_OscConfig+0x12c>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d168      	bne.n	800aaac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e3d9      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9e6:	d106      	bne.n	800a9f6 <HAL_RCC_OscConfig+0x76>
 800a9e8:	4b87      	ldr	r3, [pc, #540]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a86      	ldr	r2, [pc, #536]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800a9ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9f2:	6013      	str	r3, [r2, #0]
 800a9f4:	e02e      	b.n	800aa54 <HAL_RCC_OscConfig+0xd4>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10c      	bne.n	800aa18 <HAL_RCC_OscConfig+0x98>
 800a9fe:	4b82      	ldr	r3, [pc, #520]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a81      	ldr	r2, [pc, #516]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa08:	6013      	str	r3, [r2, #0]
 800aa0a:	4b7f      	ldr	r3, [pc, #508]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a7e      	ldr	r2, [pc, #504]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	e01d      	b.n	800aa54 <HAL_RCC_OscConfig+0xd4>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa20:	d10c      	bne.n	800aa3c <HAL_RCC_OscConfig+0xbc>
 800aa22:	4b79      	ldr	r3, [pc, #484]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a78      	ldr	r2, [pc, #480]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	4b76      	ldr	r3, [pc, #472]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a75      	ldr	r2, [pc, #468]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa38:	6013      	str	r3, [r2, #0]
 800aa3a:	e00b      	b.n	800aa54 <HAL_RCC_OscConfig+0xd4>
 800aa3c:	4b72      	ldr	r3, [pc, #456]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a71      	ldr	r2, [pc, #452]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	4b6f      	ldr	r3, [pc, #444]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a6e      	ldr	r2, [pc, #440]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d013      	beq.n	800aa84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa5c:	f7fa fb7e 	bl	800515c <HAL_GetTick>
 800aa60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa62:	e008      	b.n	800aa76 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aa64:	f7fa fb7a 	bl	800515c <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	2b64      	cmp	r3, #100	; 0x64
 800aa70:	d901      	bls.n	800aa76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e38d      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa76:	4b64      	ldr	r3, [pc, #400]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0f0      	beq.n	800aa64 <HAL_RCC_OscConfig+0xe4>
 800aa82:	e014      	b.n	800aaae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa84:	f7fa fb6a 	bl	800515c <HAL_GetTick>
 800aa88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa8a:	e008      	b.n	800aa9e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aa8c:	f7fa fb66 	bl	800515c <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	2b64      	cmp	r3, #100	; 0x64
 800aa98:	d901      	bls.n	800aa9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e379      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa9e:	4b5a      	ldr	r3, [pc, #360]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1f0      	bne.n	800aa8c <HAL_RCC_OscConfig+0x10c>
 800aaaa:	e000      	b.n	800aaae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 0302 	and.w	r3, r3, #2
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 80ae 	beq.w	800ac18 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aabc:	4b52      	ldr	r3, [pc, #328]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aac4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aac6:	4b50      	ldr	r3, [pc, #320]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d007      	beq.n	800aae2 <HAL_RCC_OscConfig+0x162>
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	2b18      	cmp	r3, #24
 800aad6:	d13a      	bne.n	800ab4e <HAL_RCC_OscConfig+0x1ce>
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	f003 0303 	and.w	r3, r3, #3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d135      	bne.n	800ab4e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aae2:	4b49      	ldr	r3, [pc, #292]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 0304 	and.w	r3, r3, #4
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d005      	beq.n	800aafa <HAL_RCC_OscConfig+0x17a>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d101      	bne.n	800aafa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e34b      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aafa:	f7fa fb5f 	bl	80051bc <HAL_GetREVID>
 800aafe:	4603      	mov	r3, r0
 800ab00:	f241 0203 	movw	r2, #4099	; 0x1003
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d817      	bhi.n	800ab38 <HAL_RCC_OscConfig+0x1b8>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	2b40      	cmp	r3, #64	; 0x40
 800ab0e:	d108      	bne.n	800ab22 <HAL_RCC_OscConfig+0x1a2>
 800ab10:	4b3d      	ldr	r3, [pc, #244]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ab18:	4a3b      	ldr	r2, [pc, #236]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800ab1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab1e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab20:	e07a      	b.n	800ac18 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab22:	4b39      	ldr	r3, [pc, #228]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	031b      	lsls	r3, r3, #12
 800ab30:	4935      	ldr	r1, [pc, #212]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800ab32:	4313      	orrs	r3, r2
 800ab34:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab36:	e06f      	b.n	800ac18 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab38:	4b33      	ldr	r3, [pc, #204]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	061b      	lsls	r3, r3, #24
 800ab46:	4930      	ldr	r1, [pc, #192]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab4c:	e064      	b.n	800ac18 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d045      	beq.n	800abe2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ab56:	4b2c      	ldr	r3, [pc, #176]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f023 0219 	bic.w	r2, r3, #25
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	4929      	ldr	r1, [pc, #164]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800ab64:	4313      	orrs	r3, r2
 800ab66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab68:	f7fa faf8 	bl	800515c <HAL_GetTick>
 800ab6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab6e:	e008      	b.n	800ab82 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab70:	f7fa faf4 	bl	800515c <HAL_GetTick>
 800ab74:	4602      	mov	r2, r0
 800ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d901      	bls.n	800ab82 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e307      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab82:	4b21      	ldr	r3, [pc, #132]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0304 	and.w	r3, r3, #4
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d0f0      	beq.n	800ab70 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab8e:	f7fa fb15 	bl	80051bc <HAL_GetREVID>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f241 0203 	movw	r2, #4099	; 0x1003
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d817      	bhi.n	800abcc <HAL_RCC_OscConfig+0x24c>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	2b40      	cmp	r3, #64	; 0x40
 800aba2:	d108      	bne.n	800abb6 <HAL_RCC_OscConfig+0x236>
 800aba4:	4b18      	ldr	r3, [pc, #96]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800abac:	4a16      	ldr	r2, [pc, #88]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800abae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abb2:	6053      	str	r3, [r2, #4]
 800abb4:	e030      	b.n	800ac18 <HAL_RCC_OscConfig+0x298>
 800abb6:	4b14      	ldr	r3, [pc, #80]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	031b      	lsls	r3, r3, #12
 800abc4:	4910      	ldr	r1, [pc, #64]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	604b      	str	r3, [r1, #4]
 800abca:	e025      	b.n	800ac18 <HAL_RCC_OscConfig+0x298>
 800abcc:	4b0e      	ldr	r3, [pc, #56]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	061b      	lsls	r3, r3, #24
 800abda:	490b      	ldr	r1, [pc, #44]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800abdc:	4313      	orrs	r3, r2
 800abde:	604b      	str	r3, [r1, #4]
 800abe0:	e01a      	b.n	800ac18 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800abe2:	4b09      	ldr	r3, [pc, #36]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a08      	ldr	r2, [pc, #32]	; (800ac08 <HAL_RCC_OscConfig+0x288>)
 800abe8:	f023 0301 	bic.w	r3, r3, #1
 800abec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abee:	f7fa fab5 	bl	800515c <HAL_GetTick>
 800abf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800abf4:	e00a      	b.n	800ac0c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abf6:	f7fa fab1 	bl	800515c <HAL_GetTick>
 800abfa:	4602      	mov	r2, r0
 800abfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d903      	bls.n	800ac0c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e2c4      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
 800ac08:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac0c:	4ba4      	ldr	r3, [pc, #656]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f003 0304 	and.w	r3, r3, #4
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1ee      	bne.n	800abf6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f003 0310 	and.w	r3, r3, #16
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f000 80a9 	beq.w	800ad78 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac26:	4b9e      	ldr	r3, [pc, #632]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac30:	4b9b      	ldr	r3, [pc, #620]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ac32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac34:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	2b08      	cmp	r3, #8
 800ac3a:	d007      	beq.n	800ac4c <HAL_RCC_OscConfig+0x2cc>
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	2b18      	cmp	r3, #24
 800ac40:	d13a      	bne.n	800acb8 <HAL_RCC_OscConfig+0x338>
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	f003 0303 	and.w	r3, r3, #3
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d135      	bne.n	800acb8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac4c:	4b94      	ldr	r3, [pc, #592]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d005      	beq.n	800ac64 <HAL_RCC_OscConfig+0x2e4>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	69db      	ldr	r3, [r3, #28]
 800ac5c:	2b80      	cmp	r3, #128	; 0x80
 800ac5e:	d001      	beq.n	800ac64 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800ac60:	2301      	movs	r3, #1
 800ac62:	e296      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac64:	f7fa faaa 	bl	80051bc <HAL_GetREVID>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f241 0203 	movw	r2, #4099	; 0x1003
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d817      	bhi.n	800aca2 <HAL_RCC_OscConfig+0x322>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	2b20      	cmp	r3, #32
 800ac78:	d108      	bne.n	800ac8c <HAL_RCC_OscConfig+0x30c>
 800ac7a:	4b89      	ldr	r3, [pc, #548]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ac82:	4a87      	ldr	r2, [pc, #540]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ac84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac88:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ac8a:	e075      	b.n	800ad78 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac8c:	4b84      	ldr	r3, [pc, #528]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	069b      	lsls	r3, r3, #26
 800ac9a:	4981      	ldr	r1, [pc, #516]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aca0:	e06a      	b.n	800ad78 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aca2:	4b7f      	ldr	r3, [pc, #508]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	061b      	lsls	r3, r3, #24
 800acb0:	497b      	ldr	r1, [pc, #492]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800acb2:	4313      	orrs	r3, r2
 800acb4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800acb6:	e05f      	b.n	800ad78 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d042      	beq.n	800ad46 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800acc0:	4b77      	ldr	r3, [pc, #476]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a76      	ldr	r2, [pc, #472]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800acc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800accc:	f7fa fa46 	bl	800515c <HAL_GetTick>
 800acd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800acd2:	e008      	b.n	800ace6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800acd4:	f7fa fa42 	bl	800515c <HAL_GetTick>
 800acd8:	4602      	mov	r2, r0
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d901      	bls.n	800ace6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800ace2:	2303      	movs	r3, #3
 800ace4:	e255      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ace6:	4b6e      	ldr	r3, [pc, #440]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d0f0      	beq.n	800acd4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acf2:	f7fa fa63 	bl	80051bc <HAL_GetREVID>
 800acf6:	4603      	mov	r3, r0
 800acf8:	f241 0203 	movw	r2, #4099	; 0x1003
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d817      	bhi.n	800ad30 <HAL_RCC_OscConfig+0x3b0>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a1b      	ldr	r3, [r3, #32]
 800ad04:	2b20      	cmp	r3, #32
 800ad06:	d108      	bne.n	800ad1a <HAL_RCC_OscConfig+0x39a>
 800ad08:	4b65      	ldr	r3, [pc, #404]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ad10:	4a63      	ldr	r2, [pc, #396]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ad12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad16:	6053      	str	r3, [r2, #4]
 800ad18:	e02e      	b.n	800ad78 <HAL_RCC_OscConfig+0x3f8>
 800ad1a:	4b61      	ldr	r3, [pc, #388]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	069b      	lsls	r3, r3, #26
 800ad28:	495d      	ldr	r1, [pc, #372]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	604b      	str	r3, [r1, #4]
 800ad2e:	e023      	b.n	800ad78 <HAL_RCC_OscConfig+0x3f8>
 800ad30:	4b5b      	ldr	r3, [pc, #364]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	061b      	lsls	r3, r3, #24
 800ad3e:	4958      	ldr	r1, [pc, #352]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ad40:	4313      	orrs	r3, r2
 800ad42:	60cb      	str	r3, [r1, #12]
 800ad44:	e018      	b.n	800ad78 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ad46:	4b56      	ldr	r3, [pc, #344]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a55      	ldr	r2, [pc, #340]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ad4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad52:	f7fa fa03 	bl	800515c <HAL_GetTick>
 800ad56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad58:	e008      	b.n	800ad6c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ad5a:	f7fa f9ff 	bl	800515c <HAL_GetTick>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	2b02      	cmp	r3, #2
 800ad66:	d901      	bls.n	800ad6c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	e212      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad6c:	4b4c      	ldr	r3, [pc, #304]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1f0      	bne.n	800ad5a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0308 	and.w	r3, r3, #8
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d036      	beq.n	800adf2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	695b      	ldr	r3, [r3, #20]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d019      	beq.n	800adc0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad8c:	4b44      	ldr	r3, [pc, #272]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ad8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad90:	4a43      	ldr	r2, [pc, #268]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ad92:	f043 0301 	orr.w	r3, r3, #1
 800ad96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad98:	f7fa f9e0 	bl	800515c <HAL_GetTick>
 800ad9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ad9e:	e008      	b.n	800adb2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ada0:	f7fa f9dc 	bl	800515c <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d901      	bls.n	800adb2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800adae:	2303      	movs	r3, #3
 800adb0:	e1ef      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800adb2:	4b3b      	ldr	r3, [pc, #236]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800adb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adb6:	f003 0302 	and.w	r3, r3, #2
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0f0      	beq.n	800ada0 <HAL_RCC_OscConfig+0x420>
 800adbe:	e018      	b.n	800adf2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800adc0:	4b37      	ldr	r3, [pc, #220]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800adc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adc4:	4a36      	ldr	r2, [pc, #216]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800adc6:	f023 0301 	bic.w	r3, r3, #1
 800adca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adcc:	f7fa f9c6 	bl	800515c <HAL_GetTick>
 800add0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800add2:	e008      	b.n	800ade6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800add4:	f7fa f9c2 	bl	800515c <HAL_GetTick>
 800add8:	4602      	mov	r2, r0
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d901      	bls.n	800ade6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e1d5      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ade6:	4b2e      	ldr	r3, [pc, #184]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ade8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1f0      	bne.n	800add4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 0320 	and.w	r3, r3, #32
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d036      	beq.n	800ae6c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	699b      	ldr	r3, [r3, #24]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d019      	beq.n	800ae3a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ae06:	4b26      	ldr	r3, [pc, #152]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a25      	ldr	r2, [pc, #148]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ae0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae12:	f7fa f9a3 	bl	800515c <HAL_GetTick>
 800ae16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae18:	e008      	b.n	800ae2c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ae1a:	f7fa f99f 	bl	800515c <HAL_GetTick>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d901      	bls.n	800ae2c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	e1b2      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae2c:	4b1c      	ldr	r3, [pc, #112]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d0f0      	beq.n	800ae1a <HAL_RCC_OscConfig+0x49a>
 800ae38:	e018      	b.n	800ae6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ae3a:	4b19      	ldr	r3, [pc, #100]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4a18      	ldr	r2, [pc, #96]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ae40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae46:	f7fa f989 	bl	800515c <HAL_GetTick>
 800ae4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae4c:	e008      	b.n	800ae60 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ae4e:	f7fa f985 	bl	800515c <HAL_GetTick>
 800ae52:	4602      	mov	r2, r0
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d901      	bls.n	800ae60 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e198      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae60:	4b0f      	ldr	r3, [pc, #60]	; (800aea0 <HAL_RCC_OscConfig+0x520>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1f0      	bne.n	800ae4e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f000 8085 	beq.w	800af84 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ae7a:	4b0a      	ldr	r3, [pc, #40]	; (800aea4 <HAL_RCC_OscConfig+0x524>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a09      	ldr	r2, [pc, #36]	; (800aea4 <HAL_RCC_OscConfig+0x524>)
 800ae80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae86:	f7fa f969 	bl	800515c <HAL_GetTick>
 800ae8a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae8c:	e00c      	b.n	800aea8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ae8e:	f7fa f965 	bl	800515c <HAL_GetTick>
 800ae92:	4602      	mov	r2, r0
 800ae94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	2b64      	cmp	r3, #100	; 0x64
 800ae9a:	d905      	bls.n	800aea8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800ae9c:	2303      	movs	r3, #3
 800ae9e:	e178      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
 800aea0:	58024400 	.word	0x58024400
 800aea4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aea8:	4b96      	ldr	r3, [pc, #600]	; (800b104 <HAL_RCC_OscConfig+0x784>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d0ec      	beq.n	800ae8e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d106      	bne.n	800aeca <HAL_RCC_OscConfig+0x54a>
 800aebc:	4b92      	ldr	r3, [pc, #584]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800aebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec0:	4a91      	ldr	r2, [pc, #580]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800aec2:	f043 0301 	orr.w	r3, r3, #1
 800aec6:	6713      	str	r3, [r2, #112]	; 0x70
 800aec8:	e02d      	b.n	800af26 <HAL_RCC_OscConfig+0x5a6>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d10c      	bne.n	800aeec <HAL_RCC_OscConfig+0x56c>
 800aed2:	4b8d      	ldr	r3, [pc, #564]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800aed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aed6:	4a8c      	ldr	r2, [pc, #560]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800aed8:	f023 0301 	bic.w	r3, r3, #1
 800aedc:	6713      	str	r3, [r2, #112]	; 0x70
 800aede:	4b8a      	ldr	r3, [pc, #552]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800aee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee2:	4a89      	ldr	r2, [pc, #548]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800aee4:	f023 0304 	bic.w	r3, r3, #4
 800aee8:	6713      	str	r3, [r2, #112]	; 0x70
 800aeea:	e01c      	b.n	800af26 <HAL_RCC_OscConfig+0x5a6>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	2b05      	cmp	r3, #5
 800aef2:	d10c      	bne.n	800af0e <HAL_RCC_OscConfig+0x58e>
 800aef4:	4b84      	ldr	r3, [pc, #528]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800aef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef8:	4a83      	ldr	r2, [pc, #524]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800aefa:	f043 0304 	orr.w	r3, r3, #4
 800aefe:	6713      	str	r3, [r2, #112]	; 0x70
 800af00:	4b81      	ldr	r3, [pc, #516]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800af02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af04:	4a80      	ldr	r2, [pc, #512]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800af06:	f043 0301 	orr.w	r3, r3, #1
 800af0a:	6713      	str	r3, [r2, #112]	; 0x70
 800af0c:	e00b      	b.n	800af26 <HAL_RCC_OscConfig+0x5a6>
 800af0e:	4b7e      	ldr	r3, [pc, #504]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800af10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af12:	4a7d      	ldr	r2, [pc, #500]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800af14:	f023 0301 	bic.w	r3, r3, #1
 800af18:	6713      	str	r3, [r2, #112]	; 0x70
 800af1a:	4b7b      	ldr	r3, [pc, #492]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800af1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af1e:	4a7a      	ldr	r2, [pc, #488]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800af20:	f023 0304 	bic.w	r3, r3, #4
 800af24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d015      	beq.n	800af5a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af2e:	f7fa f915 	bl	800515c <HAL_GetTick>
 800af32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af34:	e00a      	b.n	800af4c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af36:	f7fa f911 	bl	800515c <HAL_GetTick>
 800af3a:	4602      	mov	r2, r0
 800af3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	f241 3288 	movw	r2, #5000	; 0x1388
 800af44:	4293      	cmp	r3, r2
 800af46:	d901      	bls.n	800af4c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800af48:	2303      	movs	r3, #3
 800af4a:	e122      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af4c:	4b6e      	ldr	r3, [pc, #440]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800af4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af50:	f003 0302 	and.w	r3, r3, #2
 800af54:	2b00      	cmp	r3, #0
 800af56:	d0ee      	beq.n	800af36 <HAL_RCC_OscConfig+0x5b6>
 800af58:	e014      	b.n	800af84 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af5a:	f7fa f8ff 	bl	800515c <HAL_GetTick>
 800af5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af60:	e00a      	b.n	800af78 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af62:	f7fa f8fb 	bl	800515c <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af70:	4293      	cmp	r3, r2
 800af72:	d901      	bls.n	800af78 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800af74:	2303      	movs	r3, #3
 800af76:	e10c      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af78:	4b63      	ldr	r3, [pc, #396]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800af7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7c:	f003 0302 	and.w	r3, r3, #2
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1ee      	bne.n	800af62 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f000 8101 	beq.w	800b190 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800af8e:	4b5e      	ldr	r3, [pc, #376]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af96:	2b18      	cmp	r3, #24
 800af98:	f000 80bc 	beq.w	800b114 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	f040 8095 	bne.w	800b0d0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afa6:	4b58      	ldr	r3, [pc, #352]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a57      	ldr	r2, [pc, #348]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800afac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb2:	f7fa f8d3 	bl	800515c <HAL_GetTick>
 800afb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afb8:	e008      	b.n	800afcc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afba:	f7fa f8cf 	bl	800515c <HAL_GetTick>
 800afbe:	4602      	mov	r2, r0
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d901      	bls.n	800afcc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	e0e2      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afcc:	4b4e      	ldr	r3, [pc, #312]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1f0      	bne.n	800afba <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800afd8:	4b4b      	ldr	r3, [pc, #300]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800afda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800afdc:	4b4b      	ldr	r3, [pc, #300]	; (800b10c <HAL_RCC_OscConfig+0x78c>)
 800afde:	4013      	ands	r3, r2
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800afe8:	0112      	lsls	r2, r2, #4
 800afea:	430a      	orrs	r2, r1
 800afec:	4946      	ldr	r1, [pc, #280]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	628b      	str	r3, [r1, #40]	; 0x28
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff6:	3b01      	subs	r3, #1
 800aff8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b000:	3b01      	subs	r3, #1
 800b002:	025b      	lsls	r3, r3, #9
 800b004:	b29b      	uxth	r3, r3
 800b006:	431a      	orrs	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00c:	3b01      	subs	r3, #1
 800b00e:	041b      	lsls	r3, r3, #16
 800b010:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b014:	431a      	orrs	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b01a:	3b01      	subs	r3, #1
 800b01c:	061b      	lsls	r3, r3, #24
 800b01e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b022:	4939      	ldr	r1, [pc, #228]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b024:	4313      	orrs	r3, r2
 800b026:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b028:	4b37      	ldr	r3, [pc, #220]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b02c:	4a36      	ldr	r2, [pc, #216]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b02e:	f023 0301 	bic.w	r3, r3, #1
 800b032:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b034:	4b34      	ldr	r3, [pc, #208]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b038:	4b35      	ldr	r3, [pc, #212]	; (800b110 <HAL_RCC_OscConfig+0x790>)
 800b03a:	4013      	ands	r3, r2
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b040:	00d2      	lsls	r2, r2, #3
 800b042:	4931      	ldr	r1, [pc, #196]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b044:	4313      	orrs	r3, r2
 800b046:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b048:	4b2f      	ldr	r3, [pc, #188]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04c:	f023 020c 	bic.w	r2, r3, #12
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b054:	492c      	ldr	r1, [pc, #176]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b056:	4313      	orrs	r3, r2
 800b058:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b05a:	4b2b      	ldr	r3, [pc, #172]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05e:	f023 0202 	bic.w	r2, r3, #2
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b066:	4928      	ldr	r1, [pc, #160]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b068:	4313      	orrs	r3, r2
 800b06a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b06c:	4b26      	ldr	r3, [pc, #152]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	4a25      	ldr	r2, [pc, #148]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b078:	4b23      	ldr	r3, [pc, #140]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07c:	4a22      	ldr	r2, [pc, #136]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b07e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b084:	4b20      	ldr	r3, [pc, #128]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b088:	4a1f      	ldr	r2, [pc, #124]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b08a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b08e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b090:	4b1d      	ldr	r3, [pc, #116]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	4a1c      	ldr	r2, [pc, #112]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b096:	f043 0301 	orr.w	r3, r3, #1
 800b09a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b09c:	4b1a      	ldr	r3, [pc, #104]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a19      	ldr	r2, [pc, #100]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b0a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0a8:	f7fa f858 	bl	800515c <HAL_GetTick>
 800b0ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0ae:	e008      	b.n	800b0c2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0b0:	f7fa f854 	bl	800515c <HAL_GetTick>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d901      	bls.n	800b0c2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e067      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0c2:	4b11      	ldr	r3, [pc, #68]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0f0      	beq.n	800b0b0 <HAL_RCC_OscConfig+0x730>
 800b0ce:	e05f      	b.n	800b190 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0d0:	4b0d      	ldr	r3, [pc, #52]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a0c      	ldr	r2, [pc, #48]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b0d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0dc:	f7fa f83e 	bl	800515c <HAL_GetTick>
 800b0e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0e2:	e008      	b.n	800b0f6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0e4:	f7fa f83a 	bl	800515c <HAL_GetTick>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	1ad3      	subs	r3, r2, r3
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d901      	bls.n	800b0f6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800b0f2:	2303      	movs	r3, #3
 800b0f4:	e04d      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b0f6:	4b04      	ldr	r3, [pc, #16]	; (800b108 <HAL_RCC_OscConfig+0x788>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1f0      	bne.n	800b0e4 <HAL_RCC_OscConfig+0x764>
 800b102:	e045      	b.n	800b190 <HAL_RCC_OscConfig+0x810>
 800b104:	58024800 	.word	0x58024800
 800b108:	58024400 	.word	0x58024400
 800b10c:	fffffc0c 	.word	0xfffffc0c
 800b110:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b114:	4b21      	ldr	r3, [pc, #132]	; (800b19c <HAL_RCC_OscConfig+0x81c>)
 800b116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b118:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b11a:	4b20      	ldr	r3, [pc, #128]	; (800b19c <HAL_RCC_OscConfig+0x81c>)
 800b11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	2b01      	cmp	r3, #1
 800b126:	d031      	beq.n	800b18c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	f003 0203 	and.w	r2, r3, #3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b132:	429a      	cmp	r2, r3
 800b134:	d12a      	bne.n	800b18c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	091b      	lsrs	r3, r3, #4
 800b13a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b142:	429a      	cmp	r2, r3
 800b144:	d122      	bne.n	800b18c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b150:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b152:	429a      	cmp	r2, r3
 800b154:	d11a      	bne.n	800b18c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	0a5b      	lsrs	r3, r3, #9
 800b15a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b162:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b164:	429a      	cmp	r2, r3
 800b166:	d111      	bne.n	800b18c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	0c1b      	lsrs	r3, r3, #16
 800b16c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b174:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b176:	429a      	cmp	r2, r3
 800b178:	d108      	bne.n	800b18c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	0e1b      	lsrs	r3, r3, #24
 800b17e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b186:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b188:	429a      	cmp	r2, r3
 800b18a:	d001      	beq.n	800b190 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e000      	b.n	800b192 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3730      	adds	r7, #48	; 0x30
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	58024400 	.word	0x58024400

0800b1a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e19c      	b.n	800b4ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b1b4:	4b8a      	ldr	r3, [pc, #552]	; (800b3e0 <HAL_RCC_ClockConfig+0x240>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f003 030f 	and.w	r3, r3, #15
 800b1bc:	683a      	ldr	r2, [r7, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d910      	bls.n	800b1e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1c2:	4b87      	ldr	r3, [pc, #540]	; (800b3e0 <HAL_RCC_ClockConfig+0x240>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f023 020f 	bic.w	r2, r3, #15
 800b1ca:	4985      	ldr	r1, [pc, #532]	; (800b3e0 <HAL_RCC_ClockConfig+0x240>)
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1d2:	4b83      	ldr	r3, [pc, #524]	; (800b3e0 <HAL_RCC_ClockConfig+0x240>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f003 030f 	and.w	r3, r3, #15
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d001      	beq.n	800b1e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e184      	b.n	800b4ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 0304 	and.w	r3, r3, #4
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d010      	beq.n	800b212 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	691a      	ldr	r2, [r3, #16]
 800b1f4:	4b7b      	ldr	r3, [pc, #492]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d908      	bls.n	800b212 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b200:	4b78      	ldr	r3, [pc, #480]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	691b      	ldr	r3, [r3, #16]
 800b20c:	4975      	ldr	r1, [pc, #468]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f003 0308 	and.w	r3, r3, #8
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d010      	beq.n	800b240 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	695a      	ldr	r2, [r3, #20]
 800b222:	4b70      	ldr	r3, [pc, #448]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b224:	69db      	ldr	r3, [r3, #28]
 800b226:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d908      	bls.n	800b240 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b22e:	4b6d      	ldr	r3, [pc, #436]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	496a      	ldr	r1, [pc, #424]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b23c:	4313      	orrs	r3, r2
 800b23e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0310 	and.w	r3, r3, #16
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d010      	beq.n	800b26e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	699a      	ldr	r2, [r3, #24]
 800b250:	4b64      	ldr	r3, [pc, #400]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b252:	69db      	ldr	r3, [r3, #28]
 800b254:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b258:	429a      	cmp	r2, r3
 800b25a:	d908      	bls.n	800b26e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b25c:	4b61      	ldr	r3, [pc, #388]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b25e:	69db      	ldr	r3, [r3, #28]
 800b260:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	699b      	ldr	r3, [r3, #24]
 800b268:	495e      	ldr	r1, [pc, #376]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b26a:	4313      	orrs	r3, r2
 800b26c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 0320 	and.w	r3, r3, #32
 800b276:	2b00      	cmp	r3, #0
 800b278:	d010      	beq.n	800b29c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	69da      	ldr	r2, [r3, #28]
 800b27e:	4b59      	ldr	r3, [pc, #356]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b286:	429a      	cmp	r2, r3
 800b288:	d908      	bls.n	800b29c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b28a:	4b56      	ldr	r3, [pc, #344]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b28c:	6a1b      	ldr	r3, [r3, #32]
 800b28e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	4953      	ldr	r1, [pc, #332]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b298:	4313      	orrs	r3, r2
 800b29a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 0302 	and.w	r3, r3, #2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d010      	beq.n	800b2ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	68da      	ldr	r2, [r3, #12]
 800b2ac:	4b4d      	ldr	r3, [pc, #308]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	f003 030f 	and.w	r3, r3, #15
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d908      	bls.n	800b2ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2b8:	4b4a      	ldr	r3, [pc, #296]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	f023 020f 	bic.w	r2, r3, #15
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	4947      	ldr	r1, [pc, #284]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0301 	and.w	r3, r3, #1
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d055      	beq.n	800b382 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b2d6:	4b43      	ldr	r3, [pc, #268]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	4940      	ldr	r1, [pc, #256]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d107      	bne.n	800b300 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b2f0:	4b3c      	ldr	r3, [pc, #240]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d121      	bne.n	800b340 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e0f6      	b.n	800b4ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	2b03      	cmp	r3, #3
 800b306:	d107      	bne.n	800b318 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b308:	4b36      	ldr	r3, [pc, #216]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d115      	bne.n	800b340 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e0ea      	b.n	800b4ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d107      	bne.n	800b330 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b320:	4b30      	ldr	r3, [pc, #192]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d109      	bne.n	800b340 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b32c:	2301      	movs	r3, #1
 800b32e:	e0de      	b.n	800b4ee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b330:	4b2c      	ldr	r3, [pc, #176]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f003 0304 	and.w	r3, r3, #4
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e0d6      	b.n	800b4ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b340:	4b28      	ldr	r3, [pc, #160]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	f023 0207 	bic.w	r2, r3, #7
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	4925      	ldr	r1, [pc, #148]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b34e:	4313      	orrs	r3, r2
 800b350:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b352:	f7f9 ff03 	bl	800515c <HAL_GetTick>
 800b356:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b358:	e00a      	b.n	800b370 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b35a:	f7f9 feff 	bl	800515c <HAL_GetTick>
 800b35e:	4602      	mov	r2, r0
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	f241 3288 	movw	r2, #5000	; 0x1388
 800b368:	4293      	cmp	r3, r2
 800b36a:	d901      	bls.n	800b370 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b36c:	2303      	movs	r3, #3
 800b36e:	e0be      	b.n	800b4ee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b370:	4b1c      	ldr	r3, [pc, #112]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	00db      	lsls	r3, r3, #3
 800b37e:	429a      	cmp	r2, r3
 800b380:	d1eb      	bne.n	800b35a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f003 0302 	and.w	r3, r3, #2
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d010      	beq.n	800b3b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	68da      	ldr	r2, [r3, #12]
 800b392:	4b14      	ldr	r3, [pc, #80]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	f003 030f 	and.w	r3, r3, #15
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d208      	bcs.n	800b3b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b39e:	4b11      	ldr	r3, [pc, #68]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	f023 020f 	bic.w	r2, r3, #15
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	490e      	ldr	r1, [pc, #56]	; (800b3e4 <HAL_RCC_ClockConfig+0x244>)
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b3b0:	4b0b      	ldr	r3, [pc, #44]	; (800b3e0 <HAL_RCC_ClockConfig+0x240>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f003 030f 	and.w	r3, r3, #15
 800b3b8:	683a      	ldr	r2, [r7, #0]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d214      	bcs.n	800b3e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3be:	4b08      	ldr	r3, [pc, #32]	; (800b3e0 <HAL_RCC_ClockConfig+0x240>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f023 020f 	bic.w	r2, r3, #15
 800b3c6:	4906      	ldr	r1, [pc, #24]	; (800b3e0 <HAL_RCC_ClockConfig+0x240>)
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3ce:	4b04      	ldr	r3, [pc, #16]	; (800b3e0 <HAL_RCC_ClockConfig+0x240>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f003 030f 	and.w	r3, r3, #15
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d005      	beq.n	800b3e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e086      	b.n	800b4ee <HAL_RCC_ClockConfig+0x34e>
 800b3e0:	52002000 	.word	0x52002000
 800b3e4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f003 0304 	and.w	r3, r3, #4
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d010      	beq.n	800b416 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691a      	ldr	r2, [r3, #16]
 800b3f8:	4b3f      	ldr	r3, [pc, #252]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b400:	429a      	cmp	r2, r3
 800b402:	d208      	bcs.n	800b416 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b404:	4b3c      	ldr	r3, [pc, #240]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	691b      	ldr	r3, [r3, #16]
 800b410:	4939      	ldr	r1, [pc, #228]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b412:	4313      	orrs	r3, r2
 800b414:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 0308 	and.w	r3, r3, #8
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d010      	beq.n	800b444 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	695a      	ldr	r2, [r3, #20]
 800b426:	4b34      	ldr	r3, [pc, #208]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b42e:	429a      	cmp	r2, r3
 800b430:	d208      	bcs.n	800b444 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b432:	4b31      	ldr	r3, [pc, #196]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b434:	69db      	ldr	r3, [r3, #28]
 800b436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	695b      	ldr	r3, [r3, #20]
 800b43e:	492e      	ldr	r1, [pc, #184]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b440:	4313      	orrs	r3, r2
 800b442:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0310 	and.w	r3, r3, #16
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d010      	beq.n	800b472 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	699a      	ldr	r2, [r3, #24]
 800b454:	4b28      	ldr	r3, [pc, #160]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d208      	bcs.n	800b472 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b460:	4b25      	ldr	r3, [pc, #148]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	699b      	ldr	r3, [r3, #24]
 800b46c:	4922      	ldr	r1, [pc, #136]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 0320 	and.w	r3, r3, #32
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d010      	beq.n	800b4a0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	69da      	ldr	r2, [r3, #28]
 800b482:	4b1d      	ldr	r3, [pc, #116]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d208      	bcs.n	800b4a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b48e:	4b1a      	ldr	r3, [pc, #104]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	4917      	ldr	r1, [pc, #92]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b49c:	4313      	orrs	r3, r2
 800b49e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b4a0:	f000 f834 	bl	800b50c <HAL_RCC_GetSysClockFreq>
 800b4a4:	4602      	mov	r2, r0
 800b4a6:	4b14      	ldr	r3, [pc, #80]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b4a8:	699b      	ldr	r3, [r3, #24]
 800b4aa:	0a1b      	lsrs	r3, r3, #8
 800b4ac:	f003 030f 	and.w	r3, r3, #15
 800b4b0:	4912      	ldr	r1, [pc, #72]	; (800b4fc <HAL_RCC_ClockConfig+0x35c>)
 800b4b2:	5ccb      	ldrb	r3, [r1, r3]
 800b4b4:	f003 031f 	and.w	r3, r3, #31
 800b4b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b4be:	4b0e      	ldr	r3, [pc, #56]	; (800b4f8 <HAL_RCC_ClockConfig+0x358>)
 800b4c0:	699b      	ldr	r3, [r3, #24]
 800b4c2:	f003 030f 	and.w	r3, r3, #15
 800b4c6:	4a0d      	ldr	r2, [pc, #52]	; (800b4fc <HAL_RCC_ClockConfig+0x35c>)
 800b4c8:	5cd3      	ldrb	r3, [r2, r3]
 800b4ca:	f003 031f 	and.w	r3, r3, #31
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d4:	4a0a      	ldr	r2, [pc, #40]	; (800b500 <HAL_RCC_ClockConfig+0x360>)
 800b4d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b4d8:	4a0a      	ldr	r2, [pc, #40]	; (800b504 <HAL_RCC_ClockConfig+0x364>)
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b4de:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <HAL_RCC_ClockConfig+0x368>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7f9 fdf0 	bl	80050c8 <HAL_InitTick>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	58024400 	.word	0x58024400
 800b4fc:	08014d34 	.word	0x08014d34
 800b500:	24000018 	.word	0x24000018
 800b504:	24000014 	.word	0x24000014
 800b508:	2400001c 	.word	0x2400001c

0800b50c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b089      	sub	sp, #36	; 0x24
 800b510:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b512:	4bb3      	ldr	r3, [pc, #716]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b51a:	2b18      	cmp	r3, #24
 800b51c:	f200 8155 	bhi.w	800b7ca <HAL_RCC_GetSysClockFreq+0x2be>
 800b520:	a201      	add	r2, pc, #4	; (adr r2, 800b528 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b526:	bf00      	nop
 800b528:	0800b58d 	.word	0x0800b58d
 800b52c:	0800b7cb 	.word	0x0800b7cb
 800b530:	0800b7cb 	.word	0x0800b7cb
 800b534:	0800b7cb 	.word	0x0800b7cb
 800b538:	0800b7cb 	.word	0x0800b7cb
 800b53c:	0800b7cb 	.word	0x0800b7cb
 800b540:	0800b7cb 	.word	0x0800b7cb
 800b544:	0800b7cb 	.word	0x0800b7cb
 800b548:	0800b5b3 	.word	0x0800b5b3
 800b54c:	0800b7cb 	.word	0x0800b7cb
 800b550:	0800b7cb 	.word	0x0800b7cb
 800b554:	0800b7cb 	.word	0x0800b7cb
 800b558:	0800b7cb 	.word	0x0800b7cb
 800b55c:	0800b7cb 	.word	0x0800b7cb
 800b560:	0800b7cb 	.word	0x0800b7cb
 800b564:	0800b7cb 	.word	0x0800b7cb
 800b568:	0800b5b9 	.word	0x0800b5b9
 800b56c:	0800b7cb 	.word	0x0800b7cb
 800b570:	0800b7cb 	.word	0x0800b7cb
 800b574:	0800b7cb 	.word	0x0800b7cb
 800b578:	0800b7cb 	.word	0x0800b7cb
 800b57c:	0800b7cb 	.word	0x0800b7cb
 800b580:	0800b7cb 	.word	0x0800b7cb
 800b584:	0800b7cb 	.word	0x0800b7cb
 800b588:	0800b5bf 	.word	0x0800b5bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b58c:	4b94      	ldr	r3, [pc, #592]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 0320 	and.w	r3, r3, #32
 800b594:	2b00      	cmp	r3, #0
 800b596:	d009      	beq.n	800b5ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b598:	4b91      	ldr	r3, [pc, #580]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	08db      	lsrs	r3, r3, #3
 800b59e:	f003 0303 	and.w	r3, r3, #3
 800b5a2:	4a90      	ldr	r2, [pc, #576]	; (800b7e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b5aa:	e111      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b5ac:	4b8d      	ldr	r3, [pc, #564]	; (800b7e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b5ae:	61bb      	str	r3, [r7, #24]
    break;
 800b5b0:	e10e      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800b5b2:	4b8d      	ldr	r3, [pc, #564]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b5b4:	61bb      	str	r3, [r7, #24]
    break;
 800b5b6:	e10b      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800b5b8:	4b8c      	ldr	r3, [pc, #560]	; (800b7ec <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b5ba:	61bb      	str	r3, [r7, #24]
    break;
 800b5bc:	e108      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5be:	4b88      	ldr	r3, [pc, #544]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c2:	f003 0303 	and.w	r3, r3, #3
 800b5c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800b5c8:	4b85      	ldr	r3, [pc, #532]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5cc:	091b      	lsrs	r3, r3, #4
 800b5ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b5d4:	4b82      	ldr	r3, [pc, #520]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d8:	f003 0301 	and.w	r3, r3, #1
 800b5dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b5de:	4b80      	ldr	r3, [pc, #512]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e2:	08db      	lsrs	r3, r3, #3
 800b5e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	fb02 f303 	mul.w	r3, r2, r3
 800b5ee:	ee07 3a90 	vmov	s15, r3
 800b5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f000 80e1 	beq.w	800b7c4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	2b02      	cmp	r3, #2
 800b606:	f000 8083 	beq.w	800b710 <HAL_RCC_GetSysClockFreq+0x204>
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	f200 80a1 	bhi.w	800b754 <HAL_RCC_GetSysClockFreq+0x248>
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d003      	beq.n	800b620 <HAL_RCC_GetSysClockFreq+0x114>
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d056      	beq.n	800b6cc <HAL_RCC_GetSysClockFreq+0x1c0>
 800b61e:	e099      	b.n	800b754 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b620:	4b6f      	ldr	r3, [pc, #444]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0320 	and.w	r3, r3, #32
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d02d      	beq.n	800b688 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b62c:	4b6c      	ldr	r3, [pc, #432]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	08db      	lsrs	r3, r3, #3
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	4a6b      	ldr	r2, [pc, #428]	; (800b7e4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b638:	fa22 f303 	lsr.w	r3, r2, r3
 800b63c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	ee07 3a90 	vmov	s15, r3
 800b644:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	ee07 3a90 	vmov	s15, r3
 800b64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b656:	4b62      	ldr	r3, [pc, #392]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b65a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b65e:	ee07 3a90 	vmov	s15, r3
 800b662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b666:	ed97 6a02 	vldr	s12, [r7, #8]
 800b66a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b7f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b66e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b67a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b67e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b682:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800b686:	e087      	b.n	800b798 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	ee07 3a90 	vmov	s15, r3
 800b68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b692:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b7f4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b69a:	4b51      	ldr	r3, [pc, #324]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6a2:	ee07 3a90 	vmov	s15, r3
 800b6a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6ae:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b7f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6ca:	e065      	b.n	800b798 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	ee07 3a90 	vmov	s15, r3
 800b6d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b7f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6de:	4b40      	ldr	r3, [pc, #256]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6e6:	ee07 3a90 	vmov	s15, r3
 800b6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6f2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b7f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b70a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b70e:	e043      	b.n	800b798 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b71a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b7fc <HAL_RCC_GetSysClockFreq+0x2f0>
 800b71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b722:	4b2f      	ldr	r3, [pc, #188]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b72a:	ee07 3a90 	vmov	s15, r3
 800b72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b732:	ed97 6a02 	vldr	s12, [r7, #8]
 800b736:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b7f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b74e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b752:	e021      	b.n	800b798 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	ee07 3a90 	vmov	s15, r3
 800b75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b7f8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b766:	4b1e      	ldr	r3, [pc, #120]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b76e:	ee07 3a90 	vmov	s15, r3
 800b772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b776:	ed97 6a02 	vldr	s12, [r7, #8]
 800b77a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b7f0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b786:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b796:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b798:	4b11      	ldr	r3, [pc, #68]	; (800b7e0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79c:	0a5b      	lsrs	r3, r3, #9
 800b79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	ee07 3a90 	vmov	s15, r3
 800b7ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b7b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7bc:	ee17 3a90 	vmov	r3, s15
 800b7c0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b7c2:	e005      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	61bb      	str	r3, [r7, #24]
    break;
 800b7c8:	e002      	b.n	800b7d0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b7ca:	4b07      	ldr	r3, [pc, #28]	; (800b7e8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b7cc:	61bb      	str	r3, [r7, #24]
    break;
 800b7ce:	bf00      	nop
  }

  return sysclockfreq;
 800b7d0:	69bb      	ldr	r3, [r7, #24]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3724      	adds	r7, #36	; 0x24
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	58024400 	.word	0x58024400
 800b7e4:	03d09000 	.word	0x03d09000
 800b7e8:	003d0900 	.word	0x003d0900
 800b7ec:	017d7840 	.word	0x017d7840
 800b7f0:	46000000 	.word	0x46000000
 800b7f4:	4c742400 	.word	0x4c742400
 800b7f8:	4a742400 	.word	0x4a742400
 800b7fc:	4bbebc20 	.word	0x4bbebc20

0800b800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b806:	f7ff fe81 	bl	800b50c <HAL_RCC_GetSysClockFreq>
 800b80a:	4602      	mov	r2, r0
 800b80c:	4b10      	ldr	r3, [pc, #64]	; (800b850 <HAL_RCC_GetHCLKFreq+0x50>)
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	0a1b      	lsrs	r3, r3, #8
 800b812:	f003 030f 	and.w	r3, r3, #15
 800b816:	490f      	ldr	r1, [pc, #60]	; (800b854 <HAL_RCC_GetHCLKFreq+0x54>)
 800b818:	5ccb      	ldrb	r3, [r1, r3]
 800b81a:	f003 031f 	and.w	r3, r3, #31
 800b81e:	fa22 f303 	lsr.w	r3, r2, r3
 800b822:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b824:	4b0a      	ldr	r3, [pc, #40]	; (800b850 <HAL_RCC_GetHCLKFreq+0x50>)
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	f003 030f 	and.w	r3, r3, #15
 800b82c:	4a09      	ldr	r2, [pc, #36]	; (800b854 <HAL_RCC_GetHCLKFreq+0x54>)
 800b82e:	5cd3      	ldrb	r3, [r2, r3]
 800b830:	f003 031f 	and.w	r3, r3, #31
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	fa22 f303 	lsr.w	r3, r2, r3
 800b83a:	4a07      	ldr	r2, [pc, #28]	; (800b858 <HAL_RCC_GetHCLKFreq+0x58>)
 800b83c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b83e:	4a07      	ldr	r2, [pc, #28]	; (800b85c <HAL_RCC_GetHCLKFreq+0x5c>)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b844:	4b04      	ldr	r3, [pc, #16]	; (800b858 <HAL_RCC_GetHCLKFreq+0x58>)
 800b846:	681b      	ldr	r3, [r3, #0]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	58024400 	.word	0x58024400
 800b854:	08014d34 	.word	0x08014d34
 800b858:	24000018 	.word	0x24000018
 800b85c:	24000014 	.word	0x24000014

0800b860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b864:	f7ff ffcc 	bl	800b800 <HAL_RCC_GetHCLKFreq>
 800b868:	4602      	mov	r2, r0
 800b86a:	4b06      	ldr	r3, [pc, #24]	; (800b884 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	091b      	lsrs	r3, r3, #4
 800b870:	f003 0307 	and.w	r3, r3, #7
 800b874:	4904      	ldr	r1, [pc, #16]	; (800b888 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b876:	5ccb      	ldrb	r3, [r1, r3]
 800b878:	f003 031f 	and.w	r3, r3, #31
 800b87c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b880:	4618      	mov	r0, r3
 800b882:	bd80      	pop	{r7, pc}
 800b884:	58024400 	.word	0x58024400
 800b888:	08014d34 	.word	0x08014d34

0800b88c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b890:	f7ff ffb6 	bl	800b800 <HAL_RCC_GetHCLKFreq>
 800b894:	4602      	mov	r2, r0
 800b896:	4b06      	ldr	r3, [pc, #24]	; (800b8b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	0a1b      	lsrs	r3, r3, #8
 800b89c:	f003 0307 	and.w	r3, r3, #7
 800b8a0:	4904      	ldr	r1, [pc, #16]	; (800b8b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b8a2:	5ccb      	ldrb	r3, [r1, r3]
 800b8a4:	f003 031f 	and.w	r3, r3, #31
 800b8a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	58024400 	.word	0x58024400
 800b8b4:	08014d34 	.word	0x08014d34

0800b8b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d03f      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8dc:	d02a      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b8de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8e2:	d824      	bhi.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b8e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8e8:	d018      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b8ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8ee:	d81e      	bhi.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d003      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b8f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8f8:	d007      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b8fa:	e018      	b.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8fc:	4bab      	ldr	r3, [pc, #684]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b900:	4aaa      	ldr	r2, [pc, #680]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b908:	e015      	b.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	3304      	adds	r3, #4
 800b90e:	2102      	movs	r1, #2
 800b910:	4618      	mov	r0, r3
 800b912:	f001 f9cf 	bl	800ccb4 <RCCEx_PLL2_Config>
 800b916:	4603      	mov	r3, r0
 800b918:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b91a:	e00c      	b.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	3324      	adds	r3, #36	; 0x24
 800b920:	2102      	movs	r1, #2
 800b922:	4618      	mov	r0, r3
 800b924:	f001 fa78 	bl	800ce18 <RCCEx_PLL3_Config>
 800b928:	4603      	mov	r3, r0
 800b92a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b92c:	e003      	b.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	75fb      	strb	r3, [r7, #23]
      break;
 800b932:	e000      	b.n	800b936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b934:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b936:	7dfb      	ldrb	r3, [r7, #23]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d109      	bne.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b93c:	4b9b      	ldr	r3, [pc, #620]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b940:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b948:	4998      	ldr	r1, [pc, #608]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b94a:	4313      	orrs	r3, r2
 800b94c:	650b      	str	r3, [r1, #80]	; 0x50
 800b94e:	e001      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b950:	7dfb      	ldrb	r3, [r7, #23]
 800b952:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d03d      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b964:	2b04      	cmp	r3, #4
 800b966:	d826      	bhi.n	800b9b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b968:	a201      	add	r2, pc, #4	; (adr r2, 800b970 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96e:	bf00      	nop
 800b970:	0800b985 	.word	0x0800b985
 800b974:	0800b993 	.word	0x0800b993
 800b978:	0800b9a5 	.word	0x0800b9a5
 800b97c:	0800b9bd 	.word	0x0800b9bd
 800b980:	0800b9bd 	.word	0x0800b9bd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b984:	4b89      	ldr	r3, [pc, #548]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	4a88      	ldr	r2, [pc, #544]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b98a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b98e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b990:	e015      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	3304      	adds	r3, #4
 800b996:	2100      	movs	r1, #0
 800b998:	4618      	mov	r0, r3
 800b99a:	f001 f98b 	bl	800ccb4 <RCCEx_PLL2_Config>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b9a2:	e00c      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	3324      	adds	r3, #36	; 0x24
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f001 fa34 	bl	800ce18 <RCCEx_PLL3_Config>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b9b4:	e003      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	75fb      	strb	r3, [r7, #23]
      break;
 800b9ba:	e000      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b9bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d109      	bne.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b9c4:	4b79      	ldr	r3, [pc, #484]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9c8:	f023 0207 	bic.w	r2, r3, #7
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d0:	4976      	ldr	r1, [pc, #472]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	650b      	str	r3, [r1, #80]	; 0x50
 800b9d6:	e001      	b.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
 800b9da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d042      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9f0:	d02b      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b9f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9f6:	d825      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b9f8:	2bc0      	cmp	r3, #192	; 0xc0
 800b9fa:	d028      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b9fc:	2bc0      	cmp	r3, #192	; 0xc0
 800b9fe:	d821      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ba00:	2b80      	cmp	r3, #128	; 0x80
 800ba02:	d016      	beq.n	800ba32 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800ba04:	2b80      	cmp	r3, #128	; 0x80
 800ba06:	d81d      	bhi.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d002      	beq.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800ba0c:	2b40      	cmp	r3, #64	; 0x40
 800ba0e:	d007      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800ba10:	e018      	b.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba12:	4b66      	ldr	r3, [pc, #408]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba16:	4a65      	ldr	r2, [pc, #404]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ba1e:	e017      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	3304      	adds	r3, #4
 800ba24:	2100      	movs	r1, #0
 800ba26:	4618      	mov	r0, r3
 800ba28:	f001 f944 	bl	800ccb4 <RCCEx_PLL2_Config>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ba30:	e00e      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	3324      	adds	r3, #36	; 0x24
 800ba36:	2100      	movs	r1, #0
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f001 f9ed 	bl	800ce18 <RCCEx_PLL3_Config>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ba42:	e005      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	75fb      	strb	r3, [r7, #23]
      break;
 800ba48:	e002      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ba4a:	bf00      	nop
 800ba4c:	e000      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ba4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d109      	bne.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ba56:	4b55      	ldr	r3, [pc, #340]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba5a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba62:	4952      	ldr	r1, [pc, #328]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba64:	4313      	orrs	r3, r2
 800ba66:	650b      	str	r3, [r1, #80]	; 0x50
 800ba68:	e001      	b.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba6a:	7dfb      	ldrb	r3, [r7, #23]
 800ba6c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d049      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba84:	d030      	beq.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ba86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ba8a:	d82a      	bhi.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ba8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba90:	d02c      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ba92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ba96:	d824      	bhi.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ba98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba9c:	d018      	beq.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ba9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800baa2:	d81e      	bhi.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d003      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800baa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800baac:	d007      	beq.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800baae:	e018      	b.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bab0:	4b3e      	ldr	r3, [pc, #248]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab4:	4a3d      	ldr	r2, [pc, #244]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800baba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800babc:	e017      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	3304      	adds	r3, #4
 800bac2:	2100      	movs	r1, #0
 800bac4:	4618      	mov	r0, r3
 800bac6:	f001 f8f5 	bl	800ccb4 <RCCEx_PLL2_Config>
 800baca:	4603      	mov	r3, r0
 800bacc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bace:	e00e      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3324      	adds	r3, #36	; 0x24
 800bad4:	2100      	movs	r1, #0
 800bad6:	4618      	mov	r0, r3
 800bad8:	f001 f99e 	bl	800ce18 <RCCEx_PLL3_Config>
 800badc:	4603      	mov	r3, r0
 800bade:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bae0:	e005      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	75fb      	strb	r3, [r7, #23]
      break;
 800bae6:	e002      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bae8:	bf00      	nop
 800baea:	e000      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800baec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800baee:	7dfb      	ldrb	r3, [r7, #23]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d10a      	bne.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800baf4:	4b2d      	ldr	r3, [pc, #180]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800baf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baf8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bb02:	492a      	ldr	r1, [pc, #168]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb04:	4313      	orrs	r3, r2
 800bb06:	658b      	str	r3, [r1, #88]	; 0x58
 800bb08:	e001      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
 800bb0c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d04c      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bb20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb24:	d030      	beq.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800bb26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bb2a:	d82a      	bhi.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bb2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bb30:	d02c      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800bb32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bb36:	d824      	bhi.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bb38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb3c:	d018      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bb3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb42:	d81e      	bhi.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d003      	beq.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bb48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bb4c:	d007      	beq.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bb4e:	e018      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb50:	4b16      	ldr	r3, [pc, #88]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb54:	4a15      	ldr	r2, [pc, #84]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb5c:	e017      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	3304      	adds	r3, #4
 800bb62:	2100      	movs	r1, #0
 800bb64:	4618      	mov	r0, r3
 800bb66:	f001 f8a5 	bl	800ccb4 <RCCEx_PLL2_Config>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bb6e:	e00e      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	3324      	adds	r3, #36	; 0x24
 800bb74:	2100      	movs	r1, #0
 800bb76:	4618      	mov	r0, r3
 800bb78:	f001 f94e 	bl	800ce18 <RCCEx_PLL3_Config>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bb80:	e005      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	75fb      	strb	r3, [r7, #23]
      break;
 800bb86:	e002      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800bb88:	bf00      	nop
 800bb8a:	e000      	b.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800bb8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb8e:	7dfb      	ldrb	r3, [r7, #23]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10d      	bne.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bb94:	4b05      	ldr	r3, [pc, #20]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb98:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bba2:	4902      	ldr	r1, [pc, #8]	; (800bbac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bba4:	4313      	orrs	r3, r2
 800bba6:	658b      	str	r3, [r1, #88]	; 0x58
 800bba8:	e004      	b.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800bbaa:	bf00      	nop
 800bbac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb0:	7dfb      	ldrb	r3, [r7, #23]
 800bbb2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d032      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbc4:	2b30      	cmp	r3, #48	; 0x30
 800bbc6:	d01c      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800bbc8:	2b30      	cmp	r3, #48	; 0x30
 800bbca:	d817      	bhi.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800bbcc:	2b20      	cmp	r3, #32
 800bbce:	d00c      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0x332>
 800bbd0:	2b20      	cmp	r3, #32
 800bbd2:	d813      	bhi.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x344>
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d016      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800bbd8:	2b10      	cmp	r3, #16
 800bbda:	d10f      	bne.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbdc:	4baf      	ldr	r3, [pc, #700]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe0:	4aae      	ldr	r2, [pc, #696]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bbe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbe6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bbe8:	e00e      	b.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	3304      	adds	r3, #4
 800bbee:	2102      	movs	r1, #2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f001 f85f 	bl	800ccb4 <RCCEx_PLL2_Config>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800bbfa:	e005      	b.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	75fb      	strb	r3, [r7, #23]
      break;
 800bc00:	e002      	b.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800bc02:	bf00      	nop
 800bc04:	e000      	b.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800bc06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d109      	bne.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bc0e:	4ba3      	ldr	r3, [pc, #652]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc12:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc1a:	49a0      	ldr	r1, [pc, #640]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bc20:	e001      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc22:	7dfb      	ldrb	r3, [r7, #23]
 800bc24:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d047      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc3a:	d030      	beq.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800bc3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc40:	d82a      	bhi.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bc42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc46:	d02c      	beq.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800bc48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc4c:	d824      	bhi.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bc4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc52:	d018      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800bc54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc58:	d81e      	bhi.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800bc5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc62:	d007      	beq.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800bc64:	e018      	b.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc66:	4b8d      	ldr	r3, [pc, #564]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6a:	4a8c      	ldr	r2, [pc, #560]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bc6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bc72:	e017      	b.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	3304      	adds	r3, #4
 800bc78:	2100      	movs	r1, #0
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f001 f81a 	bl	800ccb4 <RCCEx_PLL2_Config>
 800bc80:	4603      	mov	r3, r0
 800bc82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bc84:	e00e      	b.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	3324      	adds	r3, #36	; 0x24
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f001 f8c3 	bl	800ce18 <RCCEx_PLL3_Config>
 800bc92:	4603      	mov	r3, r0
 800bc94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800bc96:	e005      	b.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	75fb      	strb	r3, [r7, #23]
      break;
 800bc9c:	e002      	b.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800bc9e:	bf00      	nop
 800bca0:	e000      	b.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800bca2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bca4:	7dfb      	ldrb	r3, [r7, #23]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d109      	bne.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bcaa:	4b7c      	ldr	r3, [pc, #496]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bcac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bcb6:	4979      	ldr	r1, [pc, #484]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	650b      	str	r3, [r1, #80]	; 0x50
 800bcbc:	e001      	b.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
 800bcc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d049      	beq.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcd6:	d02e      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800bcd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bcdc:	d828      	bhi.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bcde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bce2:	d02a      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x482>
 800bce4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bce8:	d822      	bhi.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bcea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bcee:	d026      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x486>
 800bcf0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bcf4:	d81c      	bhi.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bcf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcfa:	d010      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800bcfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd00:	d816      	bhi.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d01d      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800bd06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd0a:	d111      	bne.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	3304      	adds	r3, #4
 800bd10:	2101      	movs	r1, #1
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 ffce 	bl	800ccb4 <RCCEx_PLL2_Config>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bd1c:	e012      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	3324      	adds	r3, #36	; 0x24
 800bd22:	2101      	movs	r1, #1
 800bd24:	4618      	mov	r0, r3
 800bd26:	f001 f877 	bl	800ce18 <RCCEx_PLL3_Config>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800bd2e:	e009      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	75fb      	strb	r3, [r7, #23]
      break;
 800bd34:	e006      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bd36:	bf00      	nop
 800bd38:	e004      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bd3a:	bf00      	nop
 800bd3c:	e002      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bd3e:	bf00      	nop
 800bd40:	e000      	b.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800bd42:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd44:	7dfb      	ldrb	r3, [r7, #23]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d109      	bne.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bd4a:	4b54      	ldr	r3, [pc, #336]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd4e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd56:	4951      	ldr	r1, [pc, #324]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	650b      	str	r3, [r1, #80]	; 0x50
 800bd5c:	e001      	b.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd5e:	7dfb      	ldrb	r3, [r7, #23]
 800bd60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d04b      	beq.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bd74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd78:	d02e      	beq.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800bd7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bd7e:	d828      	bhi.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bd80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd84:	d02a      	beq.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x524>
 800bd86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd8a:	d822      	bhi.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bd8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd90:	d026      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800bd92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bd96:	d81c      	bhi.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bd98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd9c:	d010      	beq.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800bd9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bda2:	d816      	bhi.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d01d      	beq.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800bda8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdac:	d111      	bne.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	3304      	adds	r3, #4
 800bdb2:	2101      	movs	r1, #1
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 ff7d 	bl	800ccb4 <RCCEx_PLL2_Config>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bdbe:	e012      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	3324      	adds	r3, #36	; 0x24
 800bdc4:	2101      	movs	r1, #1
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f001 f826 	bl	800ce18 <RCCEx_PLL3_Config>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800bdd0:	e009      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	75fb      	strb	r3, [r7, #23]
      break;
 800bdd6:	e006      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bdd8:	bf00      	nop
 800bdda:	e004      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bddc:	bf00      	nop
 800bdde:	e002      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bde0:	bf00      	nop
 800bde2:	e000      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800bde4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bde6:	7dfb      	ldrb	r3, [r7, #23]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10a      	bne.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bdec:	4b2b      	ldr	r3, [pc, #172]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bdee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdf0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bdfa:	4928      	ldr	r1, [pc, #160]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	658b      	str	r3, [r1, #88]	; 0x58
 800be00:	e001      	b.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be02:	7dfb      	ldrb	r3, [r7, #23]
 800be04:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d02f      	beq.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be1a:	d00e      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800be1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be20:	d814      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x594>
 800be22:	2b00      	cmp	r3, #0
 800be24:	d015      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800be26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be2a:	d10f      	bne.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be2c:	4b1b      	ldr	r3, [pc, #108]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800be2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be30:	4a1a      	ldr	r2, [pc, #104]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800be32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800be38:	e00c      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	3304      	adds	r3, #4
 800be3e:	2101      	movs	r1, #1
 800be40:	4618      	mov	r0, r3
 800be42:	f000 ff37 	bl	800ccb4 <RCCEx_PLL2_Config>
 800be46:	4603      	mov	r3, r0
 800be48:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800be4a:	e003      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	75fb      	strb	r3, [r7, #23]
      break;
 800be50:	e000      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800be52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d109      	bne.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800be5a:	4b10      	ldr	r3, [pc, #64]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800be5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be66:	490d      	ldr	r1, [pc, #52]	; (800be9c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800be68:	4313      	orrs	r3, r2
 800be6a:	650b      	str	r3, [r1, #80]	; 0x50
 800be6c:	e001      	b.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be6e:	7dfb      	ldrb	r3, [r7, #23]
 800be70:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d033      	beq.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be82:	2b03      	cmp	r3, #3
 800be84:	d81c      	bhi.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800be86:	a201      	add	r2, pc, #4	; (adr r2, 800be8c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800be88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8c:	0800bec7 	.word	0x0800bec7
 800be90:	0800bea1 	.word	0x0800bea1
 800be94:	0800beaf 	.word	0x0800beaf
 800be98:	0800bec7 	.word	0x0800bec7
 800be9c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bea0:	4bb8      	ldr	r3, [pc, #736]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea4:	4ab7      	ldr	r2, [pc, #732]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800beaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800beac:	e00c      	b.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	3304      	adds	r3, #4
 800beb2:	2102      	movs	r1, #2
 800beb4:	4618      	mov	r0, r3
 800beb6:	f000 fefd 	bl	800ccb4 <RCCEx_PLL2_Config>
 800beba:	4603      	mov	r3, r0
 800bebc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800bebe:	e003      	b.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	75fb      	strb	r3, [r7, #23]
      break;
 800bec4:	e000      	b.n	800bec8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800bec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bec8:	7dfb      	ldrb	r3, [r7, #23]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d109      	bne.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bece:	4bad      	ldr	r3, [pc, #692]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bed2:	f023 0203 	bic.w	r2, r3, #3
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beda:	49aa      	ldr	r1, [pc, #680]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bedc:	4313      	orrs	r3, r2
 800bede:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bee0:	e001      	b.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bee2:	7dfb      	ldrb	r3, [r7, #23]
 800bee4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 8086 	beq.w	800c000 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bef4:	4ba4      	ldr	r3, [pc, #656]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	4aa3      	ldr	r2, [pc, #652]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800befa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800befe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf00:	f7f9 f92c 	bl	800515c <HAL_GetTick>
 800bf04:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf06:	e009      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf08:	f7f9 f928 	bl	800515c <HAL_GetTick>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	1ad3      	subs	r3, r2, r3
 800bf12:	2b64      	cmp	r3, #100	; 0x64
 800bf14:	d902      	bls.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800bf16:	2303      	movs	r3, #3
 800bf18:	75fb      	strb	r3, [r7, #23]
        break;
 800bf1a:	e005      	b.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf1c:	4b9a      	ldr	r3, [pc, #616]	; (800c188 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d0ef      	beq.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800bf28:	7dfb      	ldrb	r3, [r7, #23]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d166      	bne.n	800bffc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bf2e:	4b95      	ldr	r3, [pc, #596]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf38:	4053      	eors	r3, r2
 800bf3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d013      	beq.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf42:	4b90      	ldr	r3, [pc, #576]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf4a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf4c:	4b8d      	ldr	r3, [pc, #564]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf50:	4a8c      	ldr	r2, [pc, #560]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf56:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf58:	4b8a      	ldr	r3, [pc, #552]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf5c:	4a89      	ldr	r2, [pc, #548]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf62:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bf64:	4a87      	ldr	r2, [pc, #540]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bf70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf74:	d115      	bne.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf76:	f7f9 f8f1 	bl	800515c <HAL_GetTick>
 800bf7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf7c:	e00b      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bf7e:	f7f9 f8ed 	bl	800515c <HAL_GetTick>
 800bf82:	4602      	mov	r2, r0
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d902      	bls.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800bf90:	2303      	movs	r3, #3
 800bf92:	75fb      	strb	r3, [r7, #23]
            break;
 800bf94:	e005      	b.n	800bfa2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bf96:	4b7b      	ldr	r3, [pc, #492]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bf98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf9a:	f003 0302 	and.w	r3, r3, #2
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d0ed      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800bfa2:	7dfb      	ldrb	r3, [r7, #23]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d126      	bne.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfb6:	d10d      	bne.n	800bfd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800bfb8:	4b72      	ldr	r3, [pc, #456]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfc6:	0919      	lsrs	r1, r3, #4
 800bfc8:	4b70      	ldr	r3, [pc, #448]	; (800c18c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800bfca:	400b      	ands	r3, r1
 800bfcc:	496d      	ldr	r1, [pc, #436]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	610b      	str	r3, [r1, #16]
 800bfd2:	e005      	b.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800bfd4:	4b6b      	ldr	r3, [pc, #428]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	4a6a      	ldr	r2, [pc, #424]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bfde:	6113      	str	r3, [r2, #16]
 800bfe0:	4b68      	ldr	r3, [pc, #416]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bfe2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bfea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bfee:	4965      	ldr	r1, [pc, #404]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800bff0:	4313      	orrs	r3, r2
 800bff2:	670b      	str	r3, [r1, #112]	; 0x70
 800bff4:	e004      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bff6:	7dfb      	ldrb	r3, [r7, #23]
 800bff8:	75bb      	strb	r3, [r7, #22]
 800bffa:	e001      	b.n	800c000 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bffc:	7dfb      	ldrb	r3, [r7, #23]
 800bffe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f003 0301 	and.w	r3, r3, #1
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d07e      	beq.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c010:	2b28      	cmp	r3, #40	; 0x28
 800c012:	d867      	bhi.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c014:	a201      	add	r2, pc, #4	; (adr r2, 800c01c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01a:	bf00      	nop
 800c01c:	0800c0eb 	.word	0x0800c0eb
 800c020:	0800c0e5 	.word	0x0800c0e5
 800c024:	0800c0e5 	.word	0x0800c0e5
 800c028:	0800c0e5 	.word	0x0800c0e5
 800c02c:	0800c0e5 	.word	0x0800c0e5
 800c030:	0800c0e5 	.word	0x0800c0e5
 800c034:	0800c0e5 	.word	0x0800c0e5
 800c038:	0800c0e5 	.word	0x0800c0e5
 800c03c:	0800c0c1 	.word	0x0800c0c1
 800c040:	0800c0e5 	.word	0x0800c0e5
 800c044:	0800c0e5 	.word	0x0800c0e5
 800c048:	0800c0e5 	.word	0x0800c0e5
 800c04c:	0800c0e5 	.word	0x0800c0e5
 800c050:	0800c0e5 	.word	0x0800c0e5
 800c054:	0800c0e5 	.word	0x0800c0e5
 800c058:	0800c0e5 	.word	0x0800c0e5
 800c05c:	0800c0d3 	.word	0x0800c0d3
 800c060:	0800c0e5 	.word	0x0800c0e5
 800c064:	0800c0e5 	.word	0x0800c0e5
 800c068:	0800c0e5 	.word	0x0800c0e5
 800c06c:	0800c0e5 	.word	0x0800c0e5
 800c070:	0800c0e5 	.word	0x0800c0e5
 800c074:	0800c0e5 	.word	0x0800c0e5
 800c078:	0800c0e5 	.word	0x0800c0e5
 800c07c:	0800c0eb 	.word	0x0800c0eb
 800c080:	0800c0e5 	.word	0x0800c0e5
 800c084:	0800c0e5 	.word	0x0800c0e5
 800c088:	0800c0e5 	.word	0x0800c0e5
 800c08c:	0800c0e5 	.word	0x0800c0e5
 800c090:	0800c0e5 	.word	0x0800c0e5
 800c094:	0800c0e5 	.word	0x0800c0e5
 800c098:	0800c0e5 	.word	0x0800c0e5
 800c09c:	0800c0eb 	.word	0x0800c0eb
 800c0a0:	0800c0e5 	.word	0x0800c0e5
 800c0a4:	0800c0e5 	.word	0x0800c0e5
 800c0a8:	0800c0e5 	.word	0x0800c0e5
 800c0ac:	0800c0e5 	.word	0x0800c0e5
 800c0b0:	0800c0e5 	.word	0x0800c0e5
 800c0b4:	0800c0e5 	.word	0x0800c0e5
 800c0b8:	0800c0e5 	.word	0x0800c0e5
 800c0bc:	0800c0eb 	.word	0x0800c0eb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	2101      	movs	r1, #1
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 fdf4 	bl	800ccb4 <RCCEx_PLL2_Config>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c0d0:	e00c      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	3324      	adds	r3, #36	; 0x24
 800c0d6:	2101      	movs	r1, #1
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 fe9d 	bl	800ce18 <RCCEx_PLL3_Config>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c0e2:	e003      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	75fb      	strb	r3, [r7, #23]
      break;
 800c0e8:	e000      	b.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800c0ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c0ec:	7dfb      	ldrb	r3, [r7, #23]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d109      	bne.n	800c106 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c0f2:	4b24      	ldr	r3, [pc, #144]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0fe:	4921      	ldr	r1, [pc, #132]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c100:	4313      	orrs	r3, r2
 800c102:	654b      	str	r3, [r1, #84]	; 0x54
 800c104:	e001      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c106:	7dfb      	ldrb	r3, [r7, #23]
 800c108:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f003 0302 	and.w	r3, r3, #2
 800c112:	2b00      	cmp	r3, #0
 800c114:	d03e      	beq.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c11a:	2b05      	cmp	r3, #5
 800c11c:	d820      	bhi.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800c11e:	a201      	add	r2, pc, #4	; (adr r2, 800c124 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800c120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c124:	0800c167 	.word	0x0800c167
 800c128:	0800c13d 	.word	0x0800c13d
 800c12c:	0800c14f 	.word	0x0800c14f
 800c130:	0800c167 	.word	0x0800c167
 800c134:	0800c167 	.word	0x0800c167
 800c138:	0800c167 	.word	0x0800c167
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	3304      	adds	r3, #4
 800c140:	2101      	movs	r1, #1
 800c142:	4618      	mov	r0, r3
 800c144:	f000 fdb6 	bl	800ccb4 <RCCEx_PLL2_Config>
 800c148:	4603      	mov	r3, r0
 800c14a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c14c:	e00c      	b.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	3324      	adds	r3, #36	; 0x24
 800c152:	2101      	movs	r1, #1
 800c154:	4618      	mov	r0, r3
 800c156:	f000 fe5f 	bl	800ce18 <RCCEx_PLL3_Config>
 800c15a:	4603      	mov	r3, r0
 800c15c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c15e:	e003      	b.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	75fb      	strb	r3, [r7, #23]
      break;
 800c164:	e000      	b.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800c166:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c168:	7dfb      	ldrb	r3, [r7, #23]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d110      	bne.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c16e:	4b05      	ldr	r3, [pc, #20]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c172:	f023 0207 	bic.w	r2, r3, #7
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c17a:	4902      	ldr	r1, [pc, #8]	; (800c184 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800c17c:	4313      	orrs	r3, r2
 800c17e:	654b      	str	r3, [r1, #84]	; 0x54
 800c180:	e008      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800c182:	bf00      	nop
 800c184:	58024400 	.word	0x58024400
 800c188:	58024800 	.word	0x58024800
 800c18c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f003 0304 	and.w	r3, r3, #4
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d039      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1a6:	2b05      	cmp	r3, #5
 800c1a8:	d820      	bhi.n	800c1ec <HAL_RCCEx_PeriphCLKConfig+0x934>
 800c1aa:	a201      	add	r2, pc, #4	; (adr r2, 800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800c1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b0:	0800c1f3 	.word	0x0800c1f3
 800c1b4:	0800c1c9 	.word	0x0800c1c9
 800c1b8:	0800c1db 	.word	0x0800c1db
 800c1bc:	0800c1f3 	.word	0x0800c1f3
 800c1c0:	0800c1f3 	.word	0x0800c1f3
 800c1c4:	0800c1f3 	.word	0x0800c1f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	2101      	movs	r1, #1
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 fd70 	bl	800ccb4 <RCCEx_PLL2_Config>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c1d8:	e00c      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	3324      	adds	r3, #36	; 0x24
 800c1de:	2101      	movs	r1, #1
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f000 fe19 	bl	800ce18 <RCCEx_PLL3_Config>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c1ea:	e003      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800c1f0:	e000      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800c1f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1f4:	7dfb      	ldrb	r3, [r7, #23]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10a      	bne.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c1fa:	4bb7      	ldr	r3, [pc, #732]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c1fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1fe:	f023 0207 	bic.w	r2, r3, #7
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c208:	49b3      	ldr	r1, [pc, #716]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	658b      	str	r3, [r1, #88]	; 0x58
 800c20e:	e001      	b.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c210:	7dfb      	ldrb	r3, [r7, #23]
 800c212:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f003 0320 	and.w	r3, r3, #32
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d04b      	beq.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c22a:	d02e      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800c22c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c230:	d828      	bhi.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c236:	d02a      	beq.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c23c:	d822      	bhi.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c23e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c242:	d026      	beq.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c248:	d81c      	bhi.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c24a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c24e:	d010      	beq.n	800c272 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800c250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c254:	d816      	bhi.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800c256:	2b00      	cmp	r3, #0
 800c258:	d01d      	beq.n	800c296 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c25a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c25e:	d111      	bne.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3304      	adds	r3, #4
 800c264:	2100      	movs	r1, #0
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fd24 	bl	800ccb4 <RCCEx_PLL2_Config>
 800c26c:	4603      	mov	r3, r0
 800c26e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c270:	e012      	b.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	3324      	adds	r3, #36	; 0x24
 800c276:	2102      	movs	r1, #2
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 fdcd 	bl	800ce18 <RCCEx_PLL3_Config>
 800c27e:	4603      	mov	r3, r0
 800c280:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c282:	e009      	b.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	75fb      	strb	r3, [r7, #23]
      break;
 800c288:	e006      	b.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c28a:	bf00      	nop
 800c28c:	e004      	b.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c28e:	bf00      	nop
 800c290:	e002      	b.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c292:	bf00      	nop
 800c294:	e000      	b.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800c296:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c298:	7dfb      	ldrb	r3, [r7, #23]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d10a      	bne.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c29e:	4b8e      	ldr	r3, [pc, #568]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c2a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2ac:	498a      	ldr	r1, [pc, #552]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	654b      	str	r3, [r1, #84]	; 0x54
 800c2b2:	e001      	b.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2b4:	7dfb      	ldrb	r3, [r7, #23]
 800c2b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d04b      	beq.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c2ce:	d02e      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800c2d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c2d4:	d828      	bhi.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c2d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2da:	d02a      	beq.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c2dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2e0:	d822      	bhi.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c2e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2e6:	d026      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c2e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2ec:	d81c      	bhi.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c2ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2f2:	d010      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800c2f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2f8:	d816      	bhi.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d01d      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c2fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c302:	d111      	bne.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	3304      	adds	r3, #4
 800c308:	2100      	movs	r1, #0
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 fcd2 	bl	800ccb4 <RCCEx_PLL2_Config>
 800c310:	4603      	mov	r3, r0
 800c312:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c314:	e012      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	3324      	adds	r3, #36	; 0x24
 800c31a:	2102      	movs	r1, #2
 800c31c:	4618      	mov	r0, r3
 800c31e:	f000 fd7b 	bl	800ce18 <RCCEx_PLL3_Config>
 800c322:	4603      	mov	r3, r0
 800c324:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c326:	e009      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	75fb      	strb	r3, [r7, #23]
      break;
 800c32c:	e006      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c32e:	bf00      	nop
 800c330:	e004      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c332:	bf00      	nop
 800c334:	e002      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c336:	bf00      	nop
 800c338:	e000      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800c33a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10a      	bne.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c342:	4b65      	ldr	r3, [pc, #404]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c346:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c350:	4961      	ldr	r1, [pc, #388]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c352:	4313      	orrs	r3, r2
 800c354:	658b      	str	r3, [r1, #88]	; 0x58
 800c356:	e001      	b.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c358:	7dfb      	ldrb	r3, [r7, #23]
 800c35a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c364:	2b00      	cmp	r3, #0
 800c366:	d04b      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c36e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c372:	d02e      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800c374:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c378:	d828      	bhi.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c37a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c37e:	d02a      	beq.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800c380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c384:	d822      	bhi.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c386:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c38a:	d026      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c38c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c390:	d81c      	bhi.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c396:	d010      	beq.n	800c3ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800c398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c39c:	d816      	bhi.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d01d      	beq.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c3a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3a6:	d111      	bne.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3304      	adds	r3, #4
 800c3ac:	2100      	movs	r1, #0
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 fc80 	bl	800ccb4 <RCCEx_PLL2_Config>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c3b8:	e012      	b.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	3324      	adds	r3, #36	; 0x24
 800c3be:	2102      	movs	r1, #2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 fd29 	bl	800ce18 <RCCEx_PLL3_Config>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c3ca:	e009      	b.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	75fb      	strb	r3, [r7, #23]
      break;
 800c3d0:	e006      	b.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c3d2:	bf00      	nop
 800c3d4:	e004      	b.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c3d6:	bf00      	nop
 800c3d8:	e002      	b.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c3da:	bf00      	nop
 800c3dc:	e000      	b.n	800c3e0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800c3de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10a      	bne.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c3e6:	4b3c      	ldr	r3, [pc, #240]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c3f4:	4938      	ldr	r1, [pc, #224]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	658b      	str	r3, [r1, #88]	; 0x58
 800c3fa:	e001      	b.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3fc:	7dfb      	ldrb	r3, [r7, #23]
 800c3fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 0308 	and.w	r3, r3, #8
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d01a      	beq.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c416:	d10a      	bne.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	3324      	adds	r3, #36	; 0x24
 800c41c:	2102      	movs	r1, #2
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 fcfa 	bl	800ce18 <RCCEx_PLL3_Config>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c42e:	4b2a      	ldr	r3, [pc, #168]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c432:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c43c:	4926      	ldr	r1, [pc, #152]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c43e:	4313      	orrs	r3, r2
 800c440:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 0310 	and.w	r3, r3, #16
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d01a      	beq.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c458:	d10a      	bne.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	3324      	adds	r3, #36	; 0x24
 800c45e:	2102      	movs	r1, #2
 800c460:	4618      	mov	r0, r3
 800c462:	f000 fcd9 	bl	800ce18 <RCCEx_PLL3_Config>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c470:	4b19      	ldr	r3, [pc, #100]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c47e:	4916      	ldr	r1, [pc, #88]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800c480:	4313      	orrs	r3, r2
 800c482:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d036      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c49a:	d01f      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800c49c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a0:	d817      	bhi.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d003      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800c4a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4aa:	d009      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800c4ac:	e011      	b.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f000 fbfd 	bl	800ccb4 <RCCEx_PLL2_Config>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c4be:	e00e      	b.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	3324      	adds	r3, #36	; 0x24
 800c4c4:	2102      	movs	r1, #2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 fca6 	bl	800ce18 <RCCEx_PLL3_Config>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c4d0:	e005      	b.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	75fb      	strb	r3, [r7, #23]
      break;
 800c4d6:	e002      	b.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800c4d8:	58024400 	.word	0x58024400
      break;
 800c4dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10a      	bne.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c4e4:	4b93      	ldr	r3, [pc, #588]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c4e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4f2:	4990      	ldr	r1, [pc, #576]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	658b      	str	r3, [r1, #88]	; 0x58
 800c4f8:	e001      	b.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4fa:	7dfb      	ldrb	r3, [r7, #23]
 800c4fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c506:	2b00      	cmp	r3, #0
 800c508:	d033      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c510:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c514:	d01c      	beq.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800c516:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c51a:	d816      	bhi.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800c51c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c520:	d003      	beq.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800c522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c526:	d007      	beq.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800c528:	e00f      	b.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c52a:	4b82      	ldr	r3, [pc, #520]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52e:	4a81      	ldr	r2, [pc, #516]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c534:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c536:	e00c      	b.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3324      	adds	r3, #36	; 0x24
 800c53c:	2101      	movs	r1, #1
 800c53e:	4618      	mov	r0, r3
 800c540:	f000 fc6a 	bl	800ce18 <RCCEx_PLL3_Config>
 800c544:	4603      	mov	r3, r0
 800c546:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c548:	e003      	b.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	75fb      	strb	r3, [r7, #23]
      break;
 800c54e:	e000      	b.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800c550:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c552:	7dfb      	ldrb	r3, [r7, #23]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10a      	bne.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c558:	4b76      	ldr	r3, [pc, #472]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c55a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c55c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c566:	4973      	ldr	r1, [pc, #460]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c568:	4313      	orrs	r3, r2
 800c56a:	654b      	str	r3, [r1, #84]	; 0x54
 800c56c:	e001      	b.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d029      	beq.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c582:	2b00      	cmp	r3, #0
 800c584:	d003      	beq.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800c586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c58a:	d007      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800c58c:	e00f      	b.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c58e:	4b69      	ldr	r3, [pc, #420]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c592:	4a68      	ldr	r2, [pc, #416]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c59a:	e00b      	b.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	3304      	adds	r3, #4
 800c5a0:	2102      	movs	r1, #2
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 fb86 	bl	800ccb4 <RCCEx_PLL2_Config>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c5ac:	e002      	b.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	75fb      	strb	r3, [r7, #23]
      break;
 800c5b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d109      	bne.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c5ba:	4b5e      	ldr	r3, [pc, #376]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5c6:	495b      	ldr	r1, [pc, #364]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c5cc:	e001      	b.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5ce:	7dfb      	ldrb	r3, [r7, #23]
 800c5d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00a      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	3324      	adds	r3, #36	; 0x24
 800c5e2:	2102      	movs	r1, #2
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 fc17 	bl	800ce18 <RCCEx_PLL3_Config>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d001      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d030      	beq.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c608:	d017      	beq.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800c60a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c60e:	d811      	bhi.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c614:	d013      	beq.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800c616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c61a:	d80b      	bhi.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d010      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800c620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c624:	d106      	bne.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c626:	4b43      	ldr	r3, [pc, #268]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62a:	4a42      	ldr	r2, [pc, #264]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c62c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800c632:	e007      	b.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c634:	2301      	movs	r3, #1
 800c636:	75fb      	strb	r3, [r7, #23]
      break;
 800c638:	e004      	b.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c63a:	bf00      	nop
 800c63c:	e002      	b.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c63e:	bf00      	nop
 800c640:	e000      	b.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800c642:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c644:	7dfb      	ldrb	r3, [r7, #23]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d109      	bne.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c64a:	4b3a      	ldr	r3, [pc, #232]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c64c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c64e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c656:	4937      	ldr	r1, [pc, #220]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c658:	4313      	orrs	r3, r2
 800c65a:	654b      	str	r3, [r1, #84]	; 0x54
 800c65c:	e001      	b.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c65e:	7dfb      	ldrb	r3, [r7, #23]
 800c660:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d008      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c66e:	4b31      	ldr	r3, [pc, #196]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c672:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c67a:	492e      	ldr	r1, [pc, #184]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c67c:	4313      	orrs	r3, r2
 800c67e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d009      	beq.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c68c:	4b29      	ldr	r3, [pc, #164]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c69a:	4926      	ldr	r1, [pc, #152]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c69c:	4313      	orrs	r3, r2
 800c69e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d008      	beq.n	800c6be <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c6ac:	4b21      	ldr	r3, [pc, #132]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6b8:	491e      	ldr	r1, [pc, #120]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00d      	beq.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c6ca:	4b1a      	ldr	r3, [pc, #104]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	4a19      	ldr	r2, [pc, #100]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c6d4:	6113      	str	r3, [r2, #16]
 800c6d6:	4b17      	ldr	r3, [pc, #92]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6d8:	691a      	ldr	r2, [r3, #16]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c6e0:	4914      	ldr	r1, [pc, #80]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	da08      	bge.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c6ee:	4b11      	ldr	r3, [pc, #68]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6fa:	490e      	ldr	r1, [pc, #56]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d009      	beq.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c70c:	4b09      	ldr	r3, [pc, #36]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c70e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c710:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c71a:	4906      	ldr	r1, [pc, #24]	; (800c734 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800c71c:	4313      	orrs	r3, r2
 800c71e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c720:	7dbb      	ldrb	r3, [r7, #22]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d101      	bne.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800c726:	2300      	movs	r3, #0
 800c728:	e000      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800c72a:	2301      	movs	r3, #1
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3718      	adds	r7, #24
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	58024400 	.word	0x58024400

0800c738 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c73c:	f7ff f860 	bl	800b800 <HAL_RCC_GetHCLKFreq>
 800c740:	4602      	mov	r2, r0
 800c742:	4b06      	ldr	r3, [pc, #24]	; (800c75c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	091b      	lsrs	r3, r3, #4
 800c748:	f003 0307 	and.w	r3, r3, #7
 800c74c:	4904      	ldr	r1, [pc, #16]	; (800c760 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c74e:	5ccb      	ldrb	r3, [r1, r3]
 800c750:	f003 031f 	and.w	r3, r3, #31
 800c754:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c758:	4618      	mov	r0, r3
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	58024400 	.word	0x58024400
 800c760:	08014d34 	.word	0x08014d34

0800c764 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c764:	b480      	push	{r7}
 800c766:	b089      	sub	sp, #36	; 0x24
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c76c:	4ba1      	ldr	r3, [pc, #644]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c770:	f003 0303 	and.w	r3, r3, #3
 800c774:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c776:	4b9f      	ldr	r3, [pc, #636]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c77a:	0b1b      	lsrs	r3, r3, #12
 800c77c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c780:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c782:	4b9c      	ldr	r3, [pc, #624]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c786:	091b      	lsrs	r3, r3, #4
 800c788:	f003 0301 	and.w	r3, r3, #1
 800c78c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c78e:	4b99      	ldr	r3, [pc, #612]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c792:	08db      	lsrs	r3, r3, #3
 800c794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c798:	693a      	ldr	r2, [r7, #16]
 800c79a:	fb02 f303 	mul.w	r3, r2, r3
 800c79e:	ee07 3a90 	vmov	s15, r3
 800c7a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f000 8111 	beq.w	800c9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	f000 8083 	beq.w	800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	f200 80a1 	bhi.w	800c904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d003      	beq.n	800c7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d056      	beq.n	800c87c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c7ce:	e099      	b.n	800c904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7d0:	4b88      	ldr	r3, [pc, #544]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 0320 	and.w	r3, r3, #32
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d02d      	beq.n	800c838 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c7dc:	4b85      	ldr	r3, [pc, #532]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	08db      	lsrs	r3, r3, #3
 800c7e2:	f003 0303 	and.w	r3, r3, #3
 800c7e6:	4a84      	ldr	r2, [pc, #528]	; (800c9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c7e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c7ec:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	ee07 3a90 	vmov	s15, r3
 800c7f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	ee07 3a90 	vmov	s15, r3
 800c7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c806:	4b7b      	ldr	r3, [pc, #492]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c80e:	ee07 3a90 	vmov	s15, r3
 800c812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c816:	ed97 6a03 	vldr	s12, [r7, #12]
 800c81a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c832:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c836:	e087      	b.n	800c948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	ee07 3a90 	vmov	s15, r3
 800c83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c842:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c84a:	4b6a      	ldr	r3, [pc, #424]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c852:	ee07 3a90 	vmov	s15, r3
 800c856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c85a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c85e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c86a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c87a:	e065      	b.n	800c948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	ee07 3a90 	vmov	s15, r3
 800c882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c886:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c88e:	4b59      	ldr	r3, [pc, #356]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c896:	ee07 3a90 	vmov	s15, r3
 800c89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c89e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8be:	e043      	b.n	800c948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	ee07 3a90 	vmov	s15, r3
 800c8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c8ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8d2:	4b48      	ldr	r3, [pc, #288]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8da:	ee07 3a90 	vmov	s15, r3
 800c8de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c902:	e021      	b.n	800c948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	ee07 3a90 	vmov	s15, r3
 800c90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c916:	4b37      	ldr	r3, [pc, #220]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c91e:	ee07 3a90 	vmov	s15, r3
 800c922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c926:	ed97 6a03 	vldr	s12, [r7, #12]
 800c92a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c92e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c942:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c946:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c948:	4b2a      	ldr	r3, [pc, #168]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94c:	0a5b      	lsrs	r3, r3, #9
 800c94e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c952:	ee07 3a90 	vmov	s15, r3
 800c956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c95a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c95e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c962:	edd7 6a07 	vldr	s13, [r7, #28]
 800c966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c96a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c96e:	ee17 2a90 	vmov	r2, s15
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c976:	4b1f      	ldr	r3, [pc, #124]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97a:	0c1b      	lsrs	r3, r3, #16
 800c97c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c980:	ee07 3a90 	vmov	s15, r3
 800c984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c98c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c990:	edd7 6a07 	vldr	s13, [r7, #28]
 800c994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c99c:	ee17 2a90 	vmov	r2, s15
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c9a4:	4b13      	ldr	r3, [pc, #76]	; (800c9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a8:	0e1b      	lsrs	r3, r3, #24
 800c9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ae:	ee07 3a90 	vmov	s15, r3
 800c9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9ca:	ee17 2a90 	vmov	r2, s15
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c9d2:	e008      	b.n	800c9e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	609a      	str	r2, [r3, #8]
}
 800c9e6:	bf00      	nop
 800c9e8:	3724      	adds	r7, #36	; 0x24
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	58024400 	.word	0x58024400
 800c9f8:	03d09000 	.word	0x03d09000
 800c9fc:	46000000 	.word	0x46000000
 800ca00:	4c742400 	.word	0x4c742400
 800ca04:	4a742400 	.word	0x4a742400
 800ca08:	4bbebc20 	.word	0x4bbebc20

0800ca0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b089      	sub	sp, #36	; 0x24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca14:	4ba1      	ldr	r3, [pc, #644]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca18:	f003 0303 	and.w	r3, r3, #3
 800ca1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ca1e:	4b9f      	ldr	r3, [pc, #636]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca22:	0d1b      	lsrs	r3, r3, #20
 800ca24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ca2a:	4b9c      	ldr	r3, [pc, #624]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2e:	0a1b      	lsrs	r3, r3, #8
 800ca30:	f003 0301 	and.w	r3, r3, #1
 800ca34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ca36:	4b99      	ldr	r3, [pc, #612]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca3a:	08db      	lsrs	r3, r3, #3
 800ca3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca40:	693a      	ldr	r2, [r7, #16]
 800ca42:	fb02 f303 	mul.w	r3, r2, r3
 800ca46:	ee07 3a90 	vmov	s15, r3
 800ca4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f000 8111 	beq.w	800cc7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	2b02      	cmp	r3, #2
 800ca5e:	f000 8083 	beq.w	800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	2b02      	cmp	r3, #2
 800ca66:	f200 80a1 	bhi.w	800cbac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d003      	beq.n	800ca78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d056      	beq.n	800cb24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ca76:	e099      	b.n	800cbac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca78:	4b88      	ldr	r3, [pc, #544]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f003 0320 	and.w	r3, r3, #32
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d02d      	beq.n	800cae0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ca84:	4b85      	ldr	r3, [pc, #532]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	08db      	lsrs	r3, r3, #3
 800ca8a:	f003 0303 	and.w	r3, r3, #3
 800ca8e:	4a84      	ldr	r2, [pc, #528]	; (800cca0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ca90:	fa22 f303 	lsr.w	r3, r2, r3
 800ca94:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	ee07 3a90 	vmov	s15, r3
 800ca9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	ee07 3a90 	vmov	s15, r3
 800caa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caae:	4b7b      	ldr	r3, [pc, #492]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab6:	ee07 3a90 	vmov	s15, r3
 800caba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cabe:	ed97 6a03 	vldr	s12, [r7, #12]
 800cac2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cada:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cade:	e087      	b.n	800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	ee07 3a90 	vmov	s15, r3
 800cae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cca8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800caee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caf2:	4b6a      	ldr	r3, [pc, #424]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cafa:	ee07 3a90 	vmov	s15, r3
 800cafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb02:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb06:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb22:	e065      	b.n	800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	ee07 3a90 	vmov	s15, r3
 800cb2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ccac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cb32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb36:	4b59      	ldr	r3, [pc, #356]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb3e:	ee07 3a90 	vmov	s15, r3
 800cb42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb46:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb66:	e043      	b.n	800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	ee07 3a90 	vmov	s15, r3
 800cb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ccb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cb76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb7a:	4b48      	ldr	r3, [pc, #288]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb82:	ee07 3a90 	vmov	s15, r3
 800cb86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cba6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cbaa:	e021      	b.n	800cbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	ee07 3a90 	vmov	s15, r3
 800cbb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ccac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cbba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbbe:	4b37      	ldr	r3, [pc, #220]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc6:	ee07 3a90 	vmov	s15, r3
 800cbca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbce:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cbee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800cbf0:	4b2a      	ldr	r3, [pc, #168]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf4:	0a5b      	lsrs	r3, r3, #9
 800cbf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbfa:	ee07 3a90 	vmov	s15, r3
 800cbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc16:	ee17 2a90 	vmov	r2, s15
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800cc1e:	4b1f      	ldr	r3, [pc, #124]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc22:	0c1b      	lsrs	r3, r3, #16
 800cc24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc28:	ee07 3a90 	vmov	s15, r3
 800cc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc38:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc44:	ee17 2a90 	vmov	r2, s15
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800cc4c:	4b13      	ldr	r3, [pc, #76]	; (800cc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc50:	0e1b      	lsrs	r3, r3, #24
 800cc52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc56:	ee07 3a90 	vmov	s15, r3
 800cc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc66:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc72:	ee17 2a90 	vmov	r2, s15
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cc7a:	e008      	b.n	800cc8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	609a      	str	r2, [r3, #8]
}
 800cc8e:	bf00      	nop
 800cc90:	3724      	adds	r7, #36	; 0x24
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	58024400 	.word	0x58024400
 800cca0:	03d09000 	.word	0x03d09000
 800cca4:	46000000 	.word	0x46000000
 800cca8:	4c742400 	.word	0x4c742400
 800ccac:	4a742400 	.word	0x4a742400
 800ccb0:	4bbebc20 	.word	0x4bbebc20

0800ccb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ccc2:	4b53      	ldr	r3, [pc, #332]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800ccc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc6:	f003 0303 	and.w	r3, r3, #3
 800ccca:	2b03      	cmp	r3, #3
 800cccc:	d101      	bne.n	800ccd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e099      	b.n	800ce06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ccd2:	4b4f      	ldr	r3, [pc, #316]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4a4e      	ldr	r2, [pc, #312]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800ccd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ccdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccde:	f7f8 fa3d 	bl	800515c <HAL_GetTick>
 800cce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cce4:	e008      	b.n	800ccf8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cce6:	f7f8 fa39 	bl	800515c <HAL_GetTick>
 800ccea:	4602      	mov	r2, r0
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	1ad3      	subs	r3, r2, r3
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	d901      	bls.n	800ccf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ccf4:	2303      	movs	r3, #3
 800ccf6:	e086      	b.n	800ce06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ccf8:	4b45      	ldr	r3, [pc, #276]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d1f0      	bne.n	800cce6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd04:	4b42      	ldr	r3, [pc, #264]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	031b      	lsls	r3, r3, #12
 800cd12:	493f      	ldr	r1, [pc, #252]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd14:	4313      	orrs	r3, r2
 800cd16:	628b      	str	r3, [r1, #40]	; 0x28
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	3b01      	subs	r3, #1
 800cd28:	025b      	lsls	r3, r3, #9
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	431a      	orrs	r2, r3
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	3b01      	subs	r3, #1
 800cd34:	041b      	lsls	r3, r3, #16
 800cd36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd3a:	431a      	orrs	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	691b      	ldr	r3, [r3, #16]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	061b      	lsls	r3, r3, #24
 800cd44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd48:	4931      	ldr	r1, [pc, #196]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cd4e:	4b30      	ldr	r3, [pc, #192]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	695b      	ldr	r3, [r3, #20]
 800cd5a:	492d      	ldr	r1, [pc, #180]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd60:	4b2b      	ldr	r3, [pc, #172]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd64:	f023 0220 	bic.w	r2, r3, #32
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	4928      	ldr	r1, [pc, #160]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cd72:	4b27      	ldr	r3, [pc, #156]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd76:	4a26      	ldr	r2, [pc, #152]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd78:	f023 0310 	bic.w	r3, r3, #16
 800cd7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd7e:	4b24      	ldr	r3, [pc, #144]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd82:	4b24      	ldr	r3, [pc, #144]	; (800ce14 <RCCEx_PLL2_Config+0x160>)
 800cd84:	4013      	ands	r3, r2
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	69d2      	ldr	r2, [r2, #28]
 800cd8a:	00d2      	lsls	r2, r2, #3
 800cd8c:	4920      	ldr	r1, [pc, #128]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd8e:	4313      	orrs	r3, r2
 800cd90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cd92:	4b1f      	ldr	r3, [pc, #124]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd96:	4a1e      	ldr	r2, [pc, #120]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cd98:	f043 0310 	orr.w	r3, r3, #16
 800cd9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d106      	bne.n	800cdb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cda4:	4b1a      	ldr	r3, [pc, #104]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda8:	4a19      	ldr	r2, [pc, #100]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cdaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cdae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cdb0:	e00f      	b.n	800cdd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d106      	bne.n	800cdc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cdb8:	4b15      	ldr	r3, [pc, #84]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cdba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdbc:	4a14      	ldr	r2, [pc, #80]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cdbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cdc4:	e005      	b.n	800cdd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cdc6:	4b12      	ldr	r3, [pc, #72]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdca:	4a11      	ldr	r2, [pc, #68]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cdcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cdd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cdd2:	4b0f      	ldr	r3, [pc, #60]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a0e      	ldr	r2, [pc, #56]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cdd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdde:	f7f8 f9bd 	bl	800515c <HAL_GetTick>
 800cde2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cde4:	e008      	b.n	800cdf8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cde6:	f7f8 f9b9 	bl	800515c <HAL_GetTick>
 800cdea:	4602      	mov	r2, r0
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d901      	bls.n	800cdf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	e006      	b.n	800ce06 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cdf8:	4b05      	ldr	r3, [pc, #20]	; (800ce10 <RCCEx_PLL2_Config+0x15c>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d0f0      	beq.n	800cde6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	58024400 	.word	0x58024400
 800ce14:	ffff0007 	.word	0xffff0007

0800ce18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce26:	4b53      	ldr	r3, [pc, #332]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800ce28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2a:	f003 0303 	and.w	r3, r3, #3
 800ce2e:	2b03      	cmp	r3, #3
 800ce30:	d101      	bne.n	800ce36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ce32:	2301      	movs	r3, #1
 800ce34:	e099      	b.n	800cf6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ce36:	4b4f      	ldr	r3, [pc, #316]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a4e      	ldr	r2, [pc, #312]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800ce3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce42:	f7f8 f98b 	bl	800515c <HAL_GetTick>
 800ce46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce48:	e008      	b.n	800ce5c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ce4a:	f7f8 f987 	bl	800515c <HAL_GetTick>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d901      	bls.n	800ce5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e086      	b.n	800cf6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce5c:	4b45      	ldr	r3, [pc, #276]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1f0      	bne.n	800ce4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce68:	4b42      	ldr	r3, [pc, #264]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800ce6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	051b      	lsls	r3, r3, #20
 800ce76:	493f      	ldr	r1, [pc, #252]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	628b      	str	r3, [r1, #40]	; 0x28
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	3b01      	subs	r3, #1
 800ce82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	3b01      	subs	r3, #1
 800ce8c:	025b      	lsls	r3, r3, #9
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	431a      	orrs	r2, r3
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	3b01      	subs	r3, #1
 800ce98:	041b      	lsls	r3, r3, #16
 800ce9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce9e:	431a      	orrs	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	3b01      	subs	r3, #1
 800cea6:	061b      	lsls	r3, r3, #24
 800cea8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ceac:	4931      	ldr	r1, [pc, #196]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ceb2:	4b30      	ldr	r3, [pc, #192]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800ceb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	695b      	ldr	r3, [r3, #20]
 800cebe:	492d      	ldr	r1, [pc, #180]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cec0:	4313      	orrs	r3, r2
 800cec2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cec4:	4b2b      	ldr	r3, [pc, #172]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	699b      	ldr	r3, [r3, #24]
 800ced0:	4928      	ldr	r1, [pc, #160]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800ced2:	4313      	orrs	r3, r2
 800ced4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ced6:	4b27      	ldr	r3, [pc, #156]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800ced8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceda:	4a26      	ldr	r2, [pc, #152]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cedc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cee2:	4b24      	ldr	r3, [pc, #144]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cee6:	4b24      	ldr	r3, [pc, #144]	; (800cf78 <RCCEx_PLL3_Config+0x160>)
 800cee8:	4013      	ands	r3, r2
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	69d2      	ldr	r2, [r2, #28]
 800ceee:	00d2      	lsls	r2, r2, #3
 800cef0:	4920      	ldr	r1, [pc, #128]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cef2:	4313      	orrs	r3, r2
 800cef4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cef6:	4b1f      	ldr	r3, [pc, #124]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefa:	4a1e      	ldr	r2, [pc, #120]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cefc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d106      	bne.n	800cf16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cf08:	4b1a      	ldr	r3, [pc, #104]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0c:	4a19      	ldr	r2, [pc, #100]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cf0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf14:	e00f      	b.n	800cf36 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d106      	bne.n	800cf2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cf1c:	4b15      	ldr	r3, [pc, #84]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf20:	4a14      	ldr	r2, [pc, #80]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cf22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cf26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf28:	e005      	b.n	800cf36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cf2a:	4b12      	ldr	r3, [pc, #72]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2e:	4a11      	ldr	r2, [pc, #68]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cf30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cf36:	4b0f      	ldr	r3, [pc, #60]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a0e      	ldr	r2, [pc, #56]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cf3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf42:	f7f8 f90b 	bl	800515c <HAL_GetTick>
 800cf46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf48:	e008      	b.n	800cf5c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cf4a:	f7f8 f907 	bl	800515c <HAL_GetTick>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	d901      	bls.n	800cf5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	e006      	b.n	800cf6a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf5c:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <RCCEx_PLL3_Config+0x15c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d0f0      	beq.n	800cf4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	58024400 	.word	0x58024400
 800cf78:	ffff0007 	.word	0xffff0007

0800cf7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800cf84:	2300      	movs	r3, #0
 800cf86:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d101      	bne.n	800cf92 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e0eb      	b.n	800d16a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a75      	ldr	r2, [pc, #468]	; (800d174 <HAL_SPI_Init+0x1f8>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d00f      	beq.n	800cfc2 <HAL_SPI_Init+0x46>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a74      	ldr	r2, [pc, #464]	; (800d178 <HAL_SPI_Init+0x1fc>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d00a      	beq.n	800cfc2 <HAL_SPI_Init+0x46>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a72      	ldr	r2, [pc, #456]	; (800d17c <HAL_SPI_Init+0x200>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d005      	beq.n	800cfc2 <HAL_SPI_Init+0x46>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	2b0f      	cmp	r3, #15
 800cfbc:	d901      	bls.n	800cfc2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e0d3      	b.n	800d16a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f001 f87a 	bl	800e0bc <SPI_GetPacketSize>
 800cfc8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a69      	ldr	r2, [pc, #420]	; (800d174 <HAL_SPI_Init+0x1f8>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d00c      	beq.n	800cfee <HAL_SPI_Init+0x72>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a67      	ldr	r2, [pc, #412]	; (800d178 <HAL_SPI_Init+0x1fc>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d007      	beq.n	800cfee <HAL_SPI_Init+0x72>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	4a66      	ldr	r2, [pc, #408]	; (800d17c <HAL_SPI_Init+0x200>)
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	d002      	beq.n	800cfee <HAL_SPI_Init+0x72>
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	2b08      	cmp	r3, #8
 800cfec:	d811      	bhi.n	800d012 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800cff2:	4a60      	ldr	r2, [pc, #384]	; (800d174 <HAL_SPI_Init+0x1f8>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d009      	beq.n	800d00c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a5e      	ldr	r2, [pc, #376]	; (800d178 <HAL_SPI_Init+0x1fc>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d004      	beq.n	800d00c <HAL_SPI_Init+0x90>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4a5d      	ldr	r2, [pc, #372]	; (800d17c <HAL_SPI_Init+0x200>)
 800d008:	4293      	cmp	r3, r2
 800d00a:	d104      	bne.n	800d016 <HAL_SPI_Init+0x9a>
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	2b10      	cmp	r3, #16
 800d010:	d901      	bls.n	800d016 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800d012:	2301      	movs	r3, #1
 800d014:	e0a9      	b.n	800d16a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d106      	bne.n	800d030 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7f6 fdc4 	bl	8003bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2202      	movs	r2, #2
 800d034:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f022 0201 	bic.w	r2, r2, #1
 800d046:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	699b      	ldr	r3, [r3, #24]
 800d04c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d050:	d119      	bne.n	800d086 <HAL_SPI_Init+0x10a>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d05a:	d103      	bne.n	800d064 <HAL_SPI_Init+0xe8>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d060:	2b00      	cmp	r3, #0
 800d062:	d008      	beq.n	800d076 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10c      	bne.n	800d086 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d074:	d107      	bne.n	800d086 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d084:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	69da      	ldr	r2, [r3, #28]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08e:	431a      	orrs	r2, r3
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	431a      	orrs	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d098:	ea42 0103 	orr.w	r1, r2, r3
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	68da      	ldr	r2, [r3, #12]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	430a      	orrs	r2, r1
 800d0a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b0:	431a      	orrs	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b6:	431a      	orrs	r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	699b      	ldr	r3, [r3, #24]
 800d0bc:	431a      	orrs	r2, r3
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	691b      	ldr	r3, [r3, #16]
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	695b      	ldr	r3, [r3, #20]
 800d0c8:	431a      	orrs	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	431a      	orrs	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	431a      	orrs	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0da:	431a      	orrs	r2, r3
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	689b      	ldr	r3, [r3, #8]
 800d0e0:	431a      	orrs	r2, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0e6:	ea42 0103 	orr.w	r1, r2, r3
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	430a      	orrs	r2, r1
 800d0f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d113      	bne.n	800d126 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d110:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	689b      	ldr	r3, [r3, #8]
 800d118:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d124:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f022 0201 	bic.w	r2, r2, #1
 800d134:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d00a      	beq.n	800d158 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	430a      	orrs	r2, r1
 800d156:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	40013000 	.word	0x40013000
 800d178:	40003800 	.word	0x40003800
 800d17c:	40003c00 	.word	0x40003c00

0800d180 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b08a      	sub	sp, #40	; 0x28
 800d184:	af02      	add	r7, sp, #8
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	603b      	str	r3, [r7, #0]
 800d18c:	4613      	mov	r3, r2
 800d18e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3320      	adds	r3, #32
 800d196:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d198:	2300      	movs	r3, #0
 800d19a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d101      	bne.n	800d1aa <HAL_SPI_Transmit+0x2a>
 800d1a6:	2302      	movs	r3, #2
 800d1a8:	e1d7      	b.n	800d55a <HAL_SPI_Transmit+0x3da>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d1b2:	f7f7 ffd3 	bl	800515c <HAL_GetTick>
 800d1b6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d007      	beq.n	800d1d4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d1d0:	7efb      	ldrb	r3, [r7, #27]
 800d1d2:	e1c2      	b.n	800d55a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d002      	beq.n	800d1e0 <HAL_SPI_Transmit+0x60>
 800d1da:	88fb      	ldrh	r3, [r7, #6]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d107      	bne.n	800d1f0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d1ec:	7efb      	ldrb	r3, [r7, #27]
 800d1ee:	e1b4      	b.n	800d55a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2203      	movs	r2, #3
 800d1f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	68ba      	ldr	r2, [r7, #8]
 800d204:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	88fa      	ldrh	r2, [r7, #6]
 800d20a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	88fa      	ldrh	r2, [r7, #6]
 800d212:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2200      	movs	r2, #0
 800d21a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2200      	movs	r2, #0
 800d230:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2200      	movs	r2, #0
 800d236:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d240:	d107      	bne.n	800d252 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d250:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	685a      	ldr	r2, [r3, #4]
 800d258:	4b96      	ldr	r3, [pc, #600]	; (800d4b4 <HAL_SPI_Transmit+0x334>)
 800d25a:	4013      	ands	r3, r2
 800d25c:	88f9      	ldrh	r1, [r7, #6]
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	6812      	ldr	r2, [r2, #0]
 800d262:	430b      	orrs	r3, r1
 800d264:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f042 0201 	orr.w	r2, r2, #1
 800d274:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d27e:	d107      	bne.n	800d290 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d28e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	2b0f      	cmp	r3, #15
 800d296:	d947      	bls.n	800d328 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d298:	e03f      	b.n	800d31a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	695b      	ldr	r3, [r3, #20]
 800d2a0:	f003 0302 	and.w	r3, r3, #2
 800d2a4:	2b02      	cmp	r3, #2
 800d2a6:	d114      	bne.n	800d2d2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	6812      	ldr	r2, [r2, #0]
 800d2b2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2b8:	1d1a      	adds	r2, r3, #4
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d2c4:	b29b      	uxth	r3, r3
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d2d0:	e023      	b.n	800d31a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d2d2:	f7f7 ff43 	bl	800515c <HAL_GetTick>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	683a      	ldr	r2, [r7, #0]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d803      	bhi.n	800d2ea <HAL_SPI_Transmit+0x16a>
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e8:	d102      	bne.n	800d2f0 <HAL_SPI_Transmit+0x170>
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d114      	bne.n	800d31a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f000 fe15 	bl	800df20 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d304:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2201      	movs	r2, #1
 800d312:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d316:	2301      	movs	r3, #1
 800d318:	e11f      	b.n	800d55a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d320:	b29b      	uxth	r3, r3
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1b9      	bne.n	800d29a <HAL_SPI_Transmit+0x11a>
 800d326:	e0f2      	b.n	800d50e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	2b07      	cmp	r3, #7
 800d32e:	f240 80e7 	bls.w	800d500 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d332:	e05d      	b.n	800d3f0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	f003 0302 	and.w	r3, r3, #2
 800d33e:	2b02      	cmp	r3, #2
 800d340:	d132      	bne.n	800d3a8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d348:	b29b      	uxth	r3, r3
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d918      	bls.n	800d380 <HAL_SPI_Transmit+0x200>
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d352:	2b00      	cmp	r3, #0
 800d354:	d014      	beq.n	800d380 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	6812      	ldr	r2, [r2, #0]
 800d360:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d366:	1d1a      	adds	r2, r3, #4
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d372:	b29b      	uxth	r3, r3
 800d374:	3b02      	subs	r3, #2
 800d376:	b29a      	uxth	r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d37e:	e037      	b.n	800d3f0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d384:	881a      	ldrh	r2, [r3, #0]
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d38e:	1c9a      	adds	r2, r3, #2
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	3b01      	subs	r3, #1
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d3a6:	e023      	b.n	800d3f0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d3a8:	f7f7 fed8 	bl	800515c <HAL_GetTick>
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	1ad3      	subs	r3, r2, r3
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d803      	bhi.n	800d3c0 <HAL_SPI_Transmit+0x240>
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3be:	d102      	bne.n	800d3c6 <HAL_SPI_Transmit+0x246>
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d114      	bne.n	800d3f0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f000 fdaa 	bl	800df20 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d3da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e0b4      	b.n	800d55a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d19b      	bne.n	800d334 <HAL_SPI_Transmit+0x1b4>
 800d3fc:	e087      	b.n	800d50e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	695b      	ldr	r3, [r3, #20]
 800d404:	f003 0302 	and.w	r3, r3, #2
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d155      	bne.n	800d4b8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d412:	b29b      	uxth	r3, r3
 800d414:	2b03      	cmp	r3, #3
 800d416:	d918      	bls.n	800d44a <HAL_SPI_Transmit+0x2ca>
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d41c:	2b40      	cmp	r3, #64	; 0x40
 800d41e:	d914      	bls.n	800d44a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	6812      	ldr	r2, [r2, #0]
 800d42a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d430:	1d1a      	adds	r2, r3, #4
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	3b04      	subs	r3, #4
 800d440:	b29a      	uxth	r2, r3
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d448:	e05a      	b.n	800d500 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d450:	b29b      	uxth	r3, r3
 800d452:	2b01      	cmp	r3, #1
 800d454:	d917      	bls.n	800d486 <HAL_SPI_Transmit+0x306>
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d013      	beq.n	800d486 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d462:	881a      	ldrh	r2, [r3, #0]
 800d464:	69fb      	ldr	r3, [r7, #28]
 800d466:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d46c:	1c9a      	adds	r2, r3, #2
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d478:	b29b      	uxth	r3, r3
 800d47a:	3b02      	subs	r3, #2
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d484:	e03c      	b.n	800d500 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	3320      	adds	r3, #32
 800d490:	7812      	ldrb	r2, [r2, #0]
 800d492:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d498:	1c5a      	adds	r2, r3, #1
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d4b0:	e026      	b.n	800d500 <HAL_SPI_Transmit+0x380>
 800d4b2:	bf00      	nop
 800d4b4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4b8:	f7f7 fe50 	bl	800515c <HAL_GetTick>
 800d4bc:	4602      	mov	r2, r0
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	683a      	ldr	r2, [r7, #0]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d803      	bhi.n	800d4d0 <HAL_SPI_Transmit+0x350>
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ce:	d102      	bne.n	800d4d6 <HAL_SPI_Transmit+0x356>
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d114      	bne.n	800d500 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	f000 fd22 	bl	800df20 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e02c      	b.n	800d55a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d506:	b29b      	uxth	r3, r3
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f47f af78 	bne.w	800d3fe <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	9300      	str	r3, [sp, #0]
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	2200      	movs	r2, #0
 800d516:	2108      	movs	r1, #8
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 fda1 	bl	800e060 <SPI_WaitOnFlagUntilTimeout>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d007      	beq.n	800d534 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d52a:	f043 0220 	orr.w	r2, r3, #32
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f000 fcf3 	bl	800df20 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2201      	movs	r2, #1
 800d546:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d550:	2b00      	cmp	r3, #0
 800d552:	d001      	beq.n	800d558 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	e000      	b.n	800d55a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d558:	7efb      	ldrb	r3, [r7, #27]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3720      	adds	r7, #32
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop

0800d564 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08a      	sub	sp, #40	; 0x28
 800d568:	af02      	add	r7, sp, #8
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	603b      	str	r3, [r7, #0]
 800d570:	4613      	mov	r3, r2
 800d572:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3330      	adds	r3, #48	; 0x30
 800d57e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d588:	d112      	bne.n	800d5b0 <HAL_SPI_Receive+0x4c>
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d10e      	bne.n	800d5b0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2204      	movs	r2, #4
 800d596:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d59a:	88fa      	ldrh	r2, [r7, #6]
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	68b9      	ldr	r1, [r7, #8]
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f000 f9ce 	bl	800d948 <HAL_SPI_TransmitReceive>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	e1c7      	b.n	800d940 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d101      	bne.n	800d5be <HAL_SPI_Receive+0x5a>
 800d5ba:	2302      	movs	r3, #2
 800d5bc:	e1c0      	b.n	800d940 <HAL_SPI_Receive+0x3dc>
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d5c6:	f7f7 fdc9 	bl	800515c <HAL_GetTick>
 800d5ca:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d007      	beq.n	800d5e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800d5d8:	2302      	movs	r3, #2
 800d5da:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d5e4:	7ffb      	ldrb	r3, [r7, #31]
 800d5e6:	e1ab      	b.n	800d940 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d002      	beq.n	800d5f4 <HAL_SPI_Receive+0x90>
 800d5ee:	88fb      	ldrh	r3, [r7, #6]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d107      	bne.n	800d604 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d600:	7ffb      	ldrb	r3, [r7, #31]
 800d602:	e19d      	b.n	800d940 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2204      	movs	r2, #4
 800d608:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2200      	movs	r2, #0
 800d610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	88fa      	ldrh	r2, [r7, #6]
 800d61e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	88fa      	ldrh	r2, [r7, #6]
 800d626:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2200      	movs	r2, #0
 800d62e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2200      	movs	r2, #0
 800d634:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2200      	movs	r2, #0
 800d63c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2200      	movs	r2, #0
 800d644:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2200      	movs	r2, #0
 800d64a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d654:	d107      	bne.n	800d666 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	681a      	ldr	r2, [r3, #0]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d664:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	4b94      	ldr	r3, [pc, #592]	; (800d8c0 <HAL_SPI_Receive+0x35c>)
 800d66e:	4013      	ands	r3, r2
 800d670:	88f9      	ldrh	r1, [r7, #6]
 800d672:	68fa      	ldr	r2, [r7, #12]
 800d674:	6812      	ldr	r2, [r2, #0]
 800d676:	430b      	orrs	r3, r1
 800d678:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f042 0201 	orr.w	r2, r2, #1
 800d688:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d692:	d107      	bne.n	800d6a4 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	2b0f      	cmp	r3, #15
 800d6aa:	d948      	bls.n	800d73e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d6ac:	e040      	b.n	800d730 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	695a      	ldr	r2, [r3, #20]
 800d6b4:	f248 0308 	movw	r3, #32776	; 0x8008
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d014      	beq.n	800d6e8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d6c8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ce:	1d1a      	adds	r2, r3, #4
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d6e6:	e023      	b.n	800d730 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d6e8:	f7f7 fd38 	bl	800515c <HAL_GetTick>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	683a      	ldr	r2, [r7, #0]
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	d803      	bhi.n	800d700 <HAL_SPI_Receive+0x19c>
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6fe:	d102      	bne.n	800d706 <HAL_SPI_Receive+0x1a2>
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d114      	bne.n	800d730 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f000 fc0a 	bl	800df20 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	2200      	movs	r2, #0
 800d710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d71a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d72c:	2301      	movs	r3, #1
 800d72e:	e107      	b.n	800d940 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d736:	b29b      	uxth	r3, r3
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1b8      	bne.n	800d6ae <HAL_SPI_Receive+0x14a>
 800d73c:	e0ed      	b.n	800d91a <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	2b07      	cmp	r3, #7
 800d744:	f240 80e2 	bls.w	800d90c <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d748:	e05b      	b.n	800d802 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	695b      	ldr	r3, [r3, #20]
 800d750:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d754:	2b00      	cmp	r3, #0
 800d756:	d030      	beq.n	800d7ba <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	695b      	ldr	r3, [r3, #20]
 800d75e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d762:	2b00      	cmp	r3, #0
 800d764:	d014      	beq.n	800d790 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d76e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d770:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d776:	1d1a      	adds	r2, r3, #4
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d782:	b29b      	uxth	r3, r3
 800d784:	3b02      	subs	r3, #2
 800d786:	b29a      	uxth	r2, r3
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d78e:	e038      	b.n	800d802 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d794:	69ba      	ldr	r2, [r7, #24]
 800d796:	8812      	ldrh	r2, [r2, #0]
 800d798:	b292      	uxth	r2, r2
 800d79a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7a0:	1c9a      	adds	r2, r3, #2
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d7b8:	e023      	b.n	800d802 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7ba:	f7f7 fccf 	bl	800515c <HAL_GetTick>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	1ad3      	subs	r3, r2, r3
 800d7c4:	683a      	ldr	r2, [r7, #0]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d803      	bhi.n	800d7d2 <HAL_SPI_Receive+0x26e>
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d0:	d102      	bne.n	800d7d8 <HAL_SPI_Receive+0x274>
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d114      	bne.n	800d802 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f000 fba1 	bl	800df20 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d7fe:	2301      	movs	r3, #1
 800d800:	e09e      	b.n	800d940 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d808:	b29b      	uxth	r3, r3
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d19d      	bne.n	800d74a <HAL_SPI_Receive+0x1e6>
 800d80e:	e084      	b.n	800d91a <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	695b      	ldr	r3, [r3, #20]
 800d816:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d052      	beq.n	800d8c4 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	695b      	ldr	r3, [r3, #20]
 800d824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d014      	beq.n	800d856 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d834:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d836:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d83c:	1d1a      	adds	r2, r3, #4
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d848:	b29b      	uxth	r3, r3
 800d84a:	3b04      	subs	r3, #4
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d854:	e05a      	b.n	800d90c <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	695b      	ldr	r3, [r3, #20]
 800d85c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800d860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d864:	d914      	bls.n	800d890 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d86a:	69ba      	ldr	r2, [r7, #24]
 800d86c:	8812      	ldrh	r2, [r2, #0]
 800d86e:	b292      	uxth	r2, r2
 800d870:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d876:	1c9a      	adds	r2, r3, #2
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d882:	b29b      	uxth	r3, r3
 800d884:	3b02      	subs	r3, #2
 800d886:	b29a      	uxth	r2, r3
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d88e:	e03d      	b.n	800d90c <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d89c:	7812      	ldrb	r2, [r2, #0]
 800d89e:	b2d2      	uxtb	r2, r2
 800d8a0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8a6:	1c5a      	adds	r2, r3, #1
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d8be:	e025      	b.n	800d90c <HAL_SPI_Receive+0x3a8>
 800d8c0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d8c4:	f7f7 fc4a 	bl	800515c <HAL_GetTick>
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	1ad3      	subs	r3, r2, r3
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d803      	bhi.n	800d8dc <HAL_SPI_Receive+0x378>
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8da:	d102      	bne.n	800d8e2 <HAL_SPI_Receive+0x37e>
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d114      	bne.n	800d90c <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f000 fb1c 	bl	800df20 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2201      	movs	r2, #1
 800d904:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800d908:	2301      	movs	r3, #1
 800d90a:	e019      	b.n	800d940 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d912:	b29b      	uxth	r3, r3
 800d914:	2b00      	cmp	r3, #0
 800d916:	f47f af7b 	bne.w	800d810 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f000 fb00 	bl	800df20 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2200      	movs	r2, #0
 800d924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2201      	movs	r2, #1
 800d92c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800d93a:	2301      	movs	r3, #1
 800d93c:	e000      	b.n	800d940 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800d93e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3720      	adds	r7, #32
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b08e      	sub	sp, #56	; 0x38
 800d94c:	af02      	add	r7, sp, #8
 800d94e:	60f8      	str	r0, [r7, #12]
 800d950:	60b9      	str	r1, [r7, #8]
 800d952:	607a      	str	r2, [r7, #4]
 800d954:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	3320      	adds	r3, #32
 800d962:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	3330      	adds	r3, #48	; 0x30
 800d96a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d972:	2b01      	cmp	r3, #1
 800d974:	d101      	bne.n	800d97a <HAL_SPI_TransmitReceive+0x32>
 800d976:	2302      	movs	r3, #2
 800d978:	e2ce      	b.n	800df18 <HAL_SPI_TransmitReceive+0x5d0>
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d982:	f7f7 fbeb 	bl	800515c <HAL_GetTick>
 800d986:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d988:	887b      	ldrh	r3, [r7, #2]
 800d98a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d98c:	887b      	ldrh	r3, [r7, #2]
 800d98e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d996:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d99e:	7efb      	ldrb	r3, [r7, #27]
 800d9a0:	2b01      	cmp	r3, #1
 800d9a2:	d014      	beq.n	800d9ce <HAL_SPI_TransmitReceive+0x86>
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9aa:	d106      	bne.n	800d9ba <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	689b      	ldr	r3, [r3, #8]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d102      	bne.n	800d9ba <HAL_SPI_TransmitReceive+0x72>
 800d9b4:	7efb      	ldrb	r3, [r7, #27]
 800d9b6:	2b04      	cmp	r3, #4
 800d9b8:	d009      	beq.n	800d9ce <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800d9ba:	2302      	movs	r3, #2
 800d9bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d9c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9cc:	e2a4      	b.n	800df18 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d005      	beq.n	800d9e0 <HAL_SPI_TransmitReceive+0x98>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d002      	beq.n	800d9e0 <HAL_SPI_TransmitReceive+0x98>
 800d9da:	887b      	ldrh	r3, [r7, #2]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d109      	bne.n	800d9f4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d9ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9f2:	e291      	b.n	800df18 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	2b04      	cmp	r3, #4
 800d9fe:	d003      	beq.n	800da08 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2205      	movs	r2, #5
 800da04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	887a      	ldrh	r2, [r7, #2]
 800da1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	887a      	ldrh	r2, [r7, #2]
 800da22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	68ba      	ldr	r2, [r7, #8]
 800da2a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	887a      	ldrh	r2, [r7, #2]
 800da30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	887a      	ldrh	r2, [r7, #2]
 800da38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2200      	movs	r2, #0
 800da40:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2200      	movs	r2, #0
 800da46:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	4b9f      	ldr	r3, [pc, #636]	; (800dccc <HAL_SPI_TransmitReceive+0x384>)
 800da50:	4013      	ands	r3, r2
 800da52:	8879      	ldrh	r1, [r7, #2]
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	6812      	ldr	r2, [r2, #0]
 800da58:	430b      	orrs	r3, r1
 800da5a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	681a      	ldr	r2, [r3, #0]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f042 0201 	orr.w	r2, r2, #1
 800da6a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da74:	d107      	bne.n	800da86 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	2b0f      	cmp	r3, #15
 800da8c:	d970      	bls.n	800db70 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800da8e:	e068      	b.n	800db62 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	f003 0302 	and.w	r3, r3, #2
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d11a      	bne.n	800dad4 <HAL_SPI_TransmitReceive+0x18c>
 800da9e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d017      	beq.n	800dad4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	6812      	ldr	r2, [r2, #0]
 800daae:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dab4:	1d1a      	adds	r2, r3, #4
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	3b01      	subs	r3, #1
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dad2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	695a      	ldr	r2, [r3, #20]
 800dada:	f248 0308 	movw	r3, #32776	; 0x8008
 800dade:	4013      	ands	r3, r2
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d01a      	beq.n	800db1a <HAL_SPI_TransmitReceive+0x1d2>
 800dae4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d017      	beq.n	800db1a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daf2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800daf4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dafa:	1d1a      	adds	r2, r3, #4
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db06:	b29b      	uxth	r3, r3
 800db08:	3b01      	subs	r3, #1
 800db0a:	b29a      	uxth	r2, r3
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800db18:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db1a:	f7f7 fb1f 	bl	800515c <HAL_GetTick>
 800db1e:	4602      	mov	r2, r0
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db26:	429a      	cmp	r2, r3
 800db28:	d803      	bhi.n	800db32 <HAL_SPI_TransmitReceive+0x1ea>
 800db2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db30:	d102      	bne.n	800db38 <HAL_SPI_TransmitReceive+0x1f0>
 800db32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db34:	2b00      	cmp	r3, #0
 800db36:	d114      	bne.n	800db62 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f000 f9f1 	bl	800df20 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2201      	movs	r2, #1
 800db5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800db5e:	2301      	movs	r3, #1
 800db60:	e1da      	b.n	800df18 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800db62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db64:	2b00      	cmp	r3, #0
 800db66:	d193      	bne.n	800da90 <HAL_SPI_TransmitReceive+0x148>
 800db68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d190      	bne.n	800da90 <HAL_SPI_TransmitReceive+0x148>
 800db6e:	e1ac      	b.n	800deca <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	2b07      	cmp	r3, #7
 800db76:	f240 81a0 	bls.w	800deba <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800db7a:	e0a9      	b.n	800dcd0 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	695b      	ldr	r3, [r3, #20]
 800db82:	f003 0302 	and.w	r3, r3, #2
 800db86:	2b02      	cmp	r3, #2
 800db88:	d139      	bne.n	800dbfe <HAL_SPI_TransmitReceive+0x2b6>
 800db8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d036      	beq.n	800dbfe <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800db90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db92:	2b01      	cmp	r3, #1
 800db94:	d91c      	bls.n	800dbd0 <HAL_SPI_TransmitReceive+0x288>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d018      	beq.n	800dbd0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	6812      	ldr	r2, [r2, #0]
 800dba8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbae:	1d1a      	adds	r2, r3, #4
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	3b02      	subs	r3, #2
 800dbbe:	b29a      	uxth	r2, r3
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dbce:	e016      	b.n	800dbfe <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbd4:	881a      	ldrh	r2, [r3, #0]
 800dbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbde:	1c9a      	adds	r2, r3, #2
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	3b01      	subs	r3, #1
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	695b      	ldr	r3, [r3, #20]
 800dc04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d03a      	beq.n	800dc82 <HAL_SPI_TransmitReceive+0x33a>
 800dc0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d037      	beq.n	800dc82 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	695b      	ldr	r3, [r3, #20]
 800dc18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d018      	beq.n	800dc52 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc28:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dc2a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc30:	1d1a      	adds	r2, r3, #4
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	3b02      	subs	r3, #2
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800dc50:	e017      	b.n	800dc82 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc56:	6a3a      	ldr	r2, [r7, #32]
 800dc58:	8812      	ldrh	r2, [r2, #0]
 800dc5a:	b292      	uxth	r2, r2
 800dc5c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc62:	1c9a      	adds	r2, r3, #2
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	3b01      	subs	r3, #1
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc80:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc82:	f7f7 fa6b 	bl	800515c <HAL_GetTick>
 800dc86:	4602      	mov	r2, r0
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	1ad3      	subs	r3, r2, r3
 800dc8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d803      	bhi.n	800dc9a <HAL_SPI_TransmitReceive+0x352>
 800dc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc98:	d102      	bne.n	800dca0 <HAL_SPI_TransmitReceive+0x358>
 800dc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d117      	bne.n	800dcd0 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f000 f93d 	bl	800df20 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e126      	b.n	800df18 <HAL_SPI_TransmitReceive+0x5d0>
 800dcca:	bf00      	nop
 800dccc:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800dcd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f47f af52 	bne.w	800db7c <HAL_SPI_TransmitReceive+0x234>
 800dcd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	f47f af4e 	bne.w	800db7c <HAL_SPI_TransmitReceive+0x234>
 800dce0:	e0f3      	b.n	800deca <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	695b      	ldr	r3, [r3, #20]
 800dce8:	f003 0302 	and.w	r3, r3, #2
 800dcec:	2b02      	cmp	r3, #2
 800dcee:	d15a      	bne.n	800dda6 <HAL_SPI_TransmitReceive+0x45e>
 800dcf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d057      	beq.n	800dda6 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dcf6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dcf8:	2b03      	cmp	r3, #3
 800dcfa:	d91c      	bls.n	800dd36 <HAL_SPI_TransmitReceive+0x3ee>
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd00:	2b40      	cmp	r3, #64	; 0x40
 800dd02:	d918      	bls.n	800dd36 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6812      	ldr	r2, [r2, #0]
 800dd0e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd14:	1d1a      	adds	r2, r3, #4
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	3b04      	subs	r3, #4
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd32:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dd34:	e037      	b.n	800dda6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dd36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d91b      	bls.n	800dd74 <HAL_SPI_TransmitReceive+0x42c>
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d017      	beq.n	800dd74 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd48:	881a      	ldrh	r2, [r3, #0]
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd52:	1c9a      	adds	r2, r3, #2
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	3b02      	subs	r3, #2
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd70:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800dd72:	e018      	b.n	800dda6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	3320      	adds	r3, #32
 800dd7e:	7812      	ldrb	r2, [r2, #0]
 800dd80:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd86:	1c5a      	adds	r2, r3, #1
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	3b01      	subs	r3, #1
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dda4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	695b      	ldr	r3, [r3, #20]
 800ddac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d05e      	beq.n	800de72 <HAL_SPI_TransmitReceive+0x52a>
 800ddb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d05b      	beq.n	800de72 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	695b      	ldr	r3, [r3, #20]
 800ddc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d018      	beq.n	800ddfa <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ddd2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddd8:	1d1a      	adds	r2, r3, #4
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	3b04      	subs	r3, #4
 800dde8:	b29a      	uxth	r2, r3
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddf6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ddf8:	e03b      	b.n	800de72 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	695b      	ldr	r3, [r3, #20]
 800de00:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800de04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de08:	d918      	bls.n	800de3c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de0e:	6a3a      	ldr	r2, [r7, #32]
 800de10:	8812      	ldrh	r2, [r2, #0]
 800de12:	b292      	uxth	r2, r2
 800de14:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de1a:	1c9a      	adds	r2, r3, #2
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de26:	b29b      	uxth	r3, r3
 800de28:	3b02      	subs	r3, #2
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de38:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800de3a:	e01a      	b.n	800de72 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de48:	7812      	ldrb	r2, [r2, #0]
 800de4a:	b2d2      	uxtb	r2, r2
 800de4c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de5e:	b29b      	uxth	r3, r3
 800de60:	3b01      	subs	r3, #1
 800de62:	b29a      	uxth	r2, r3
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de70:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de72:	f7f7 f973 	bl	800515c <HAL_GetTick>
 800de76:	4602      	mov	r2, r0
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de7e:	429a      	cmp	r2, r3
 800de80:	d803      	bhi.n	800de8a <HAL_SPI_TransmitReceive+0x542>
 800de82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de88:	d102      	bne.n	800de90 <HAL_SPI_TransmitReceive+0x548>
 800de8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d114      	bne.n	800deba <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f000 f845 	bl	800df20 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2200      	movs	r2, #0
 800de9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dea4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2201      	movs	r2, #1
 800deb2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800deb6:	2301      	movs	r3, #1
 800deb8:	e02e      	b.n	800df18 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800deba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800debc:	2b00      	cmp	r3, #0
 800debe:	f47f af10 	bne.w	800dce2 <HAL_SPI_TransmitReceive+0x39a>
 800dec2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	f47f af0c 	bne.w	800dce2 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800deca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800decc:	9300      	str	r3, [sp, #0]
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	2200      	movs	r2, #0
 800ded2:	2108      	movs	r1, #8
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f000 f8c3 	bl	800e060 <SPI_WaitOnFlagUntilTimeout>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d007      	beq.n	800def0 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dee6:	f043 0220 	orr.w	r2, r3, #32
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f000 f815 	bl	800df20 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2200      	movs	r2, #0
 800defa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2201      	movs	r2, #1
 800df02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d001      	beq.n	800df14 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800df10:	2301      	movs	r3, #1
 800df12:	e001      	b.n	800df18 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800df14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3730      	adds	r7, #48	; 0x30
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800df20:	b480      	push	{r7}
 800df22:	b085      	sub	sp, #20
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	699a      	ldr	r2, [r3, #24]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f042 0208 	orr.w	r2, r2, #8
 800df3e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	699a      	ldr	r2, [r3, #24]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f042 0210 	orr.w	r2, r2, #16
 800df4e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f022 0201 	bic.w	r2, r2, #1
 800df5e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6919      	ldr	r1, [r3, #16]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	4b3c      	ldr	r3, [pc, #240]	; (800e05c <SPI_CloseTransfer+0x13c>)
 800df6c:	400b      	ands	r3, r1
 800df6e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	689a      	ldr	r2, [r3, #8]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800df7e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df86:	b2db      	uxtb	r3, r3
 800df88:	2b04      	cmp	r3, #4
 800df8a:	d014      	beq.n	800dfb6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f003 0320 	and.w	r3, r3, #32
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00f      	beq.n	800dfb6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	699a      	ldr	r2, [r3, #24]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f042 0220 	orr.w	r2, r2, #32
 800dfb4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dfbc:	b2db      	uxtb	r3, r3
 800dfbe:	2b03      	cmp	r3, #3
 800dfc0:	d014      	beq.n	800dfec <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d00f      	beq.n	800dfec <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfd2:	f043 0204 	orr.w	r2, r3, #4
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	699a      	ldr	r2, [r3, #24]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dfea:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00f      	beq.n	800e016 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dffc:	f043 0201 	orr.w	r2, r3, #1
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	699a      	ldr	r2, [r3, #24]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e014:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d00f      	beq.n	800e040 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e026:	f043 0208 	orr.w	r2, r3, #8
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	699a      	ldr	r2, [r3, #24]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e03e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2200      	movs	r2, #0
 800e044:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e050:	bf00      	nop
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	fffffc90 	.word	0xfffffc90

0800e060 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	603b      	str	r3, [r7, #0]
 800e06c:	4613      	mov	r3, r2
 800e06e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e070:	e010      	b.n	800e094 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e072:	f7f7 f873 	bl	800515c <HAL_GetTick>
 800e076:	4602      	mov	r2, r0
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	1ad3      	subs	r3, r2, r3
 800e07c:	69ba      	ldr	r2, [r7, #24]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d803      	bhi.n	800e08a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e088:	d102      	bne.n	800e090 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d101      	bne.n	800e094 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e090:	2303      	movs	r3, #3
 800e092:	e00f      	b.n	800e0b4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	695a      	ldr	r2, [r3, #20]
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	4013      	ands	r3, r2
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	bf0c      	ite	eq
 800e0a4:	2301      	moveq	r3, #1
 800e0a6:	2300      	movne	r3, #0
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	79fb      	ldrb	r3, [r7, #7]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d0df      	beq.n	800e072 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e0b2:	2300      	movs	r3, #0
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3710      	adds	r7, #16
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0c8:	095b      	lsrs	r3, r3, #5
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	3307      	adds	r3, #7
 800e0da:	08db      	lsrs	r3, r3, #3
 800e0dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	fb02 f303 	mul.w	r3, r2, r3
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr

0800e0f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b082      	sub	sp, #8
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d101      	bne.n	800e104 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e100:	2301      	movs	r3, #1
 800e102:	e049      	b.n	800e198 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d106      	bne.n	800e11e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f7f5 fdb3 	bl	8003c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2202      	movs	r2, #2
 800e122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	3304      	adds	r3, #4
 800e12e:	4619      	mov	r1, r3
 800e130:	4610      	mov	r0, r2
 800e132:	f000 fda1 	bl	800ec78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2201      	movs	r2, #1
 800e13a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2201      	movs	r2, #1
 800e142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	2201      	movs	r2, #1
 800e14a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2201      	movs	r2, #1
 800e152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2201      	movs	r2, #1
 800e162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2201      	movs	r2, #1
 800e16a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2201      	movs	r2, #1
 800e172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2201      	movs	r2, #1
 800e182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2201      	movs	r2, #1
 800e18a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2201      	movs	r2, #1
 800e192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e196:	2300      	movs	r3, #0
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d001      	beq.n	800e1b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e04f      	b.n	800e258 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2202      	movs	r2, #2
 800e1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68da      	ldr	r2, [r3, #12]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f042 0201 	orr.w	r2, r2, #1
 800e1ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4a23      	ldr	r2, [pc, #140]	; (800e264 <HAL_TIM_Base_Start_IT+0xc4>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d01d      	beq.n	800e216 <HAL_TIM_Base_Start_IT+0x76>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1e2:	d018      	beq.n	800e216 <HAL_TIM_Base_Start_IT+0x76>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a1f      	ldr	r2, [pc, #124]	; (800e268 <HAL_TIM_Base_Start_IT+0xc8>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d013      	beq.n	800e216 <HAL_TIM_Base_Start_IT+0x76>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4a1e      	ldr	r2, [pc, #120]	; (800e26c <HAL_TIM_Base_Start_IT+0xcc>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d00e      	beq.n	800e216 <HAL_TIM_Base_Start_IT+0x76>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a1c      	ldr	r2, [pc, #112]	; (800e270 <HAL_TIM_Base_Start_IT+0xd0>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d009      	beq.n	800e216 <HAL_TIM_Base_Start_IT+0x76>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4a1b      	ldr	r2, [pc, #108]	; (800e274 <HAL_TIM_Base_Start_IT+0xd4>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d004      	beq.n	800e216 <HAL_TIM_Base_Start_IT+0x76>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a19      	ldr	r2, [pc, #100]	; (800e278 <HAL_TIM_Base_Start_IT+0xd8>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d115      	bne.n	800e242 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	689a      	ldr	r2, [r3, #8]
 800e21c:	4b17      	ldr	r3, [pc, #92]	; (800e27c <HAL_TIM_Base_Start_IT+0xdc>)
 800e21e:	4013      	ands	r3, r2
 800e220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2b06      	cmp	r3, #6
 800e226:	d015      	beq.n	800e254 <HAL_TIM_Base_Start_IT+0xb4>
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e22e:	d011      	beq.n	800e254 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f042 0201 	orr.w	r2, r2, #1
 800e23e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e240:	e008      	b.n	800e254 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f042 0201 	orr.w	r2, r2, #1
 800e250:	601a      	str	r2, [r3, #0]
 800e252:	e000      	b.n	800e256 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e254:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e256:	2300      	movs	r3, #0
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3714      	adds	r7, #20
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr
 800e264:	40010000 	.word	0x40010000
 800e268:	40000400 	.word	0x40000400
 800e26c:	40000800 	.word	0x40000800
 800e270:	40000c00 	.word	0x40000c00
 800e274:	40010400 	.word	0x40010400
 800e278:	40001800 	.word	0x40001800
 800e27c:	00010007 	.word	0x00010007

0800e280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d101      	bne.n	800e292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e28e:	2301      	movs	r3, #1
 800e290:	e049      	b.n	800e326 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e298:	b2db      	uxtb	r3, r3
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d106      	bne.n	800e2ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 f841 	bl	800e32e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2202      	movs	r2, #2
 800e2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	3304      	adds	r3, #4
 800e2bc:	4619      	mov	r1, r3
 800e2be:	4610      	mov	r0, r2
 800e2c0:	f000 fcda 	bl	800ec78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2201      	movs	r2, #1
 800e2e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2201      	movs	r2, #1
 800e2f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2201      	movs	r2, #1
 800e300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2201      	movs	r2, #1
 800e308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2201      	movs	r2, #1
 800e310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2201      	movs	r2, #1
 800e318:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2201      	movs	r2, #1
 800e320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e32e:	b480      	push	{r7}
 800e330:	b083      	sub	sp, #12
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e336:	bf00      	nop
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
	...

0800e344 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d109      	bne.n	800e368 <HAL_TIM_PWM_Start_IT+0x24>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	bf14      	ite	ne
 800e360:	2301      	movne	r3, #1
 800e362:	2300      	moveq	r3, #0
 800e364:	b2db      	uxtb	r3, r3
 800e366:	e03c      	b.n	800e3e2 <HAL_TIM_PWM_Start_IT+0x9e>
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	2b04      	cmp	r3, #4
 800e36c:	d109      	bne.n	800e382 <HAL_TIM_PWM_Start_IT+0x3e>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b01      	cmp	r3, #1
 800e378:	bf14      	ite	ne
 800e37a:	2301      	movne	r3, #1
 800e37c:	2300      	moveq	r3, #0
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	e02f      	b.n	800e3e2 <HAL_TIM_PWM_Start_IT+0x9e>
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	2b08      	cmp	r3, #8
 800e386:	d109      	bne.n	800e39c <HAL_TIM_PWM_Start_IT+0x58>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	2b01      	cmp	r3, #1
 800e392:	bf14      	ite	ne
 800e394:	2301      	movne	r3, #1
 800e396:	2300      	moveq	r3, #0
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	e022      	b.n	800e3e2 <HAL_TIM_PWM_Start_IT+0x9e>
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	2b0c      	cmp	r3, #12
 800e3a0:	d109      	bne.n	800e3b6 <HAL_TIM_PWM_Start_IT+0x72>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	bf14      	ite	ne
 800e3ae:	2301      	movne	r3, #1
 800e3b0:	2300      	moveq	r3, #0
 800e3b2:	b2db      	uxtb	r3, r3
 800e3b4:	e015      	b.n	800e3e2 <HAL_TIM_PWM_Start_IT+0x9e>
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	2b10      	cmp	r3, #16
 800e3ba:	d109      	bne.n	800e3d0 <HAL_TIM_PWM_Start_IT+0x8c>
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	bf14      	ite	ne
 800e3c8:	2301      	movne	r3, #1
 800e3ca:	2300      	moveq	r3, #0
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	e008      	b.n	800e3e2 <HAL_TIM_PWM_Start_IT+0x9e>
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	bf14      	ite	ne
 800e3dc:	2301      	movne	r3, #1
 800e3de:	2300      	moveq	r3, #0
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d001      	beq.n	800e3ea <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e0e2      	b.n	800e5b0 <HAL_TIM_PWM_Start_IT+0x26c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d104      	bne.n	800e3fa <HAL_TIM_PWM_Start_IT+0xb6>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2202      	movs	r2, #2
 800e3f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e3f8:	e023      	b.n	800e442 <HAL_TIM_PWM_Start_IT+0xfe>
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2b04      	cmp	r3, #4
 800e3fe:	d104      	bne.n	800e40a <HAL_TIM_PWM_Start_IT+0xc6>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2202      	movs	r2, #2
 800e404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e408:	e01b      	b.n	800e442 <HAL_TIM_PWM_Start_IT+0xfe>
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b08      	cmp	r3, #8
 800e40e:	d104      	bne.n	800e41a <HAL_TIM_PWM_Start_IT+0xd6>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2202      	movs	r2, #2
 800e414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e418:	e013      	b.n	800e442 <HAL_TIM_PWM_Start_IT+0xfe>
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b0c      	cmp	r3, #12
 800e41e:	d104      	bne.n	800e42a <HAL_TIM_PWM_Start_IT+0xe6>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2202      	movs	r2, #2
 800e424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e428:	e00b      	b.n	800e442 <HAL_TIM_PWM_Start_IT+0xfe>
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	2b10      	cmp	r3, #16
 800e42e:	d104      	bne.n	800e43a <HAL_TIM_PWM_Start_IT+0xf6>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2202      	movs	r2, #2
 800e434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e438:	e003      	b.n	800e442 <HAL_TIM_PWM_Start_IT+0xfe>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2202      	movs	r2, #2
 800e43e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2b0c      	cmp	r3, #12
 800e446:	d841      	bhi.n	800e4cc <HAL_TIM_PWM_Start_IT+0x188>
 800e448:	a201      	add	r2, pc, #4	; (adr r2, 800e450 <HAL_TIM_PWM_Start_IT+0x10c>)
 800e44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e44e:	bf00      	nop
 800e450:	0800e485 	.word	0x0800e485
 800e454:	0800e4cd 	.word	0x0800e4cd
 800e458:	0800e4cd 	.word	0x0800e4cd
 800e45c:	0800e4cd 	.word	0x0800e4cd
 800e460:	0800e497 	.word	0x0800e497
 800e464:	0800e4cd 	.word	0x0800e4cd
 800e468:	0800e4cd 	.word	0x0800e4cd
 800e46c:	0800e4cd 	.word	0x0800e4cd
 800e470:	0800e4a9 	.word	0x0800e4a9
 800e474:	0800e4cd 	.word	0x0800e4cd
 800e478:	0800e4cd 	.word	0x0800e4cd
 800e47c:	0800e4cd 	.word	0x0800e4cd
 800e480:	0800e4bb 	.word	0x0800e4bb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	68da      	ldr	r2, [r3, #12]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	f042 0202 	orr.w	r2, r2, #2
 800e492:	60da      	str	r2, [r3, #12]
      break;
 800e494:	e01b      	b.n	800e4ce <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	68da      	ldr	r2, [r3, #12]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f042 0204 	orr.w	r2, r2, #4
 800e4a4:	60da      	str	r2, [r3, #12]
      break;
 800e4a6:	e012      	b.n	800e4ce <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	68da      	ldr	r2, [r3, #12]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f042 0208 	orr.w	r2, r2, #8
 800e4b6:	60da      	str	r2, [r3, #12]
      break;
 800e4b8:	e009      	b.n	800e4ce <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	68da      	ldr	r2, [r3, #12]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f042 0210 	orr.w	r2, r2, #16
 800e4c8:	60da      	str	r2, [r3, #12]
      break;
 800e4ca:	e000      	b.n	800e4ce <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 800e4cc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	6839      	ldr	r1, [r7, #0]
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f000 ffd4 	bl	800f484 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a35      	ldr	r2, [pc, #212]	; (800e5b8 <HAL_TIM_PWM_Start_IT+0x274>)
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d013      	beq.n	800e50e <HAL_TIM_PWM_Start_IT+0x1ca>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a34      	ldr	r2, [pc, #208]	; (800e5bc <HAL_TIM_PWM_Start_IT+0x278>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d00e      	beq.n	800e50e <HAL_TIM_PWM_Start_IT+0x1ca>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a32      	ldr	r2, [pc, #200]	; (800e5c0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d009      	beq.n	800e50e <HAL_TIM_PWM_Start_IT+0x1ca>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	4a31      	ldr	r2, [pc, #196]	; (800e5c4 <HAL_TIM_PWM_Start_IT+0x280>)
 800e500:	4293      	cmp	r3, r2
 800e502:	d004      	beq.n	800e50e <HAL_TIM_PWM_Start_IT+0x1ca>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	4a2f      	ldr	r2, [pc, #188]	; (800e5c8 <HAL_TIM_PWM_Start_IT+0x284>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d101      	bne.n	800e512 <HAL_TIM_PWM_Start_IT+0x1ce>
 800e50e:	2301      	movs	r3, #1
 800e510:	e000      	b.n	800e514 <HAL_TIM_PWM_Start_IT+0x1d0>
 800e512:	2300      	movs	r3, #0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d007      	beq.n	800e528 <HAL_TIM_PWM_Start_IT+0x1e4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e526:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a22      	ldr	r2, [pc, #136]	; (800e5b8 <HAL_TIM_PWM_Start_IT+0x274>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d01d      	beq.n	800e56e <HAL_TIM_PWM_Start_IT+0x22a>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e53a:	d018      	beq.n	800e56e <HAL_TIM_PWM_Start_IT+0x22a>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a22      	ldr	r2, [pc, #136]	; (800e5cc <HAL_TIM_PWM_Start_IT+0x288>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d013      	beq.n	800e56e <HAL_TIM_PWM_Start_IT+0x22a>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	4a21      	ldr	r2, [pc, #132]	; (800e5d0 <HAL_TIM_PWM_Start_IT+0x28c>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d00e      	beq.n	800e56e <HAL_TIM_PWM_Start_IT+0x22a>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4a1f      	ldr	r2, [pc, #124]	; (800e5d4 <HAL_TIM_PWM_Start_IT+0x290>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d009      	beq.n	800e56e <HAL_TIM_PWM_Start_IT+0x22a>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4a17      	ldr	r2, [pc, #92]	; (800e5bc <HAL_TIM_PWM_Start_IT+0x278>)
 800e560:	4293      	cmp	r3, r2
 800e562:	d004      	beq.n	800e56e <HAL_TIM_PWM_Start_IT+0x22a>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a1b      	ldr	r2, [pc, #108]	; (800e5d8 <HAL_TIM_PWM_Start_IT+0x294>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d115      	bne.n	800e59a <HAL_TIM_PWM_Start_IT+0x256>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	689a      	ldr	r2, [r3, #8]
 800e574:	4b19      	ldr	r3, [pc, #100]	; (800e5dc <HAL_TIM_PWM_Start_IT+0x298>)
 800e576:	4013      	ands	r3, r2
 800e578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2b06      	cmp	r3, #6
 800e57e:	d015      	beq.n	800e5ac <HAL_TIM_PWM_Start_IT+0x268>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e586:	d011      	beq.n	800e5ac <HAL_TIM_PWM_Start_IT+0x268>
    {
      __HAL_TIM_ENABLE(htim);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f042 0201 	orr.w	r2, r2, #1
 800e596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e598:	e008      	b.n	800e5ac <HAL_TIM_PWM_Start_IT+0x268>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	681a      	ldr	r2, [r3, #0]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	f042 0201 	orr.w	r2, r2, #1
 800e5a8:	601a      	str	r2, [r3, #0]
 800e5aa:	e000      	b.n	800e5ae <HAL_TIM_PWM_Start_IT+0x26a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e5ae:	2300      	movs	r3, #0
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	40010000 	.word	0x40010000
 800e5bc:	40010400 	.word	0x40010400
 800e5c0:	40014000 	.word	0x40014000
 800e5c4:	40014400 	.word	0x40014400
 800e5c8:	40014800 	.word	0x40014800
 800e5cc:	40000400 	.word	0x40000400
 800e5d0:	40000800 	.word	0x40000800
 800e5d4:	40000c00 	.word	0x40000c00
 800e5d8:	40001800 	.word	0x40001800
 800e5dc:	00010007 	.word	0x00010007

0800e5e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	691b      	ldr	r3, [r3, #16]
 800e5ee:	f003 0302 	and.w	r3, r3, #2
 800e5f2:	2b02      	cmp	r3, #2
 800e5f4:	d122      	bne.n	800e63c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	f003 0302 	and.w	r3, r3, #2
 800e600:	2b02      	cmp	r3, #2
 800e602:	d11b      	bne.n	800e63c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f06f 0202 	mvn.w	r2, #2
 800e60c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	699b      	ldr	r3, [r3, #24]
 800e61a:	f003 0303 	and.w	r3, r3, #3
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d003      	beq.n	800e62a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f000 fb0a 	bl	800ec3c <HAL_TIM_IC_CaptureCallback>
 800e628:	e005      	b.n	800e636 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 fafc 	bl	800ec28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 fb0d 	bl	800ec50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2200      	movs	r2, #0
 800e63a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	f003 0304 	and.w	r3, r3, #4
 800e646:	2b04      	cmp	r3, #4
 800e648:	d122      	bne.n	800e690 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	f003 0304 	and.w	r3, r3, #4
 800e654:	2b04      	cmp	r3, #4
 800e656:	d11b      	bne.n	800e690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f06f 0204 	mvn.w	r2, #4
 800e660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2202      	movs	r2, #2
 800e666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	699b      	ldr	r3, [r3, #24]
 800e66e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e672:	2b00      	cmp	r3, #0
 800e674:	d003      	beq.n	800e67e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 fae0 	bl	800ec3c <HAL_TIM_IC_CaptureCallback>
 800e67c:	e005      	b.n	800e68a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 fad2 	bl	800ec28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e684:	6878      	ldr	r0, [r7, #4]
 800e686:	f000 fae3 	bl	800ec50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	691b      	ldr	r3, [r3, #16]
 800e696:	f003 0308 	and.w	r3, r3, #8
 800e69a:	2b08      	cmp	r3, #8
 800e69c:	d122      	bne.n	800e6e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	f003 0308 	and.w	r3, r3, #8
 800e6a8:	2b08      	cmp	r3, #8
 800e6aa:	d11b      	bne.n	800e6e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f06f 0208 	mvn.w	r2, #8
 800e6b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2204      	movs	r2, #4
 800e6ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	69db      	ldr	r3, [r3, #28]
 800e6c2:	f003 0303 	and.w	r3, r3, #3
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d003      	beq.n	800e6d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 fab6 	bl	800ec3c <HAL_TIM_IC_CaptureCallback>
 800e6d0:	e005      	b.n	800e6de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 faa8 	bl	800ec28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 fab9 	bl	800ec50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	691b      	ldr	r3, [r3, #16]
 800e6ea:	f003 0310 	and.w	r3, r3, #16
 800e6ee:	2b10      	cmp	r3, #16
 800e6f0:	d122      	bne.n	800e738 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	f003 0310 	and.w	r3, r3, #16
 800e6fc:	2b10      	cmp	r3, #16
 800e6fe:	d11b      	bne.n	800e738 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	f06f 0210 	mvn.w	r2, #16
 800e708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2208      	movs	r2, #8
 800e70e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	69db      	ldr	r3, [r3, #28]
 800e716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d003      	beq.n	800e726 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 fa8c 	bl	800ec3c <HAL_TIM_IC_CaptureCallback>
 800e724:	e005      	b.n	800e732 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 fa7e 	bl	800ec28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 fa8f 	bl	800ec50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2200      	movs	r2, #0
 800e736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	691b      	ldr	r3, [r3, #16]
 800e73e:	f003 0301 	and.w	r3, r3, #1
 800e742:	2b01      	cmp	r3, #1
 800e744:	d10e      	bne.n	800e764 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	68db      	ldr	r3, [r3, #12]
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	2b01      	cmp	r3, #1
 800e752:	d107      	bne.n	800e764 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f06f 0201 	mvn.w	r2, #1
 800e75c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7f5 fd60 	bl	8004224 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e76e:	2b80      	cmp	r3, #128	; 0x80
 800e770:	d10e      	bne.n	800e790 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e77c:	2b80      	cmp	r3, #128	; 0x80
 800e77e:	d107      	bne.n	800e790 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 ff32 	bl	800f5f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	691b      	ldr	r3, [r3, #16]
 800e796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e79a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e79e:	d10e      	bne.n	800e7be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7aa:	2b80      	cmp	r3, #128	; 0x80
 800e7ac:	d107      	bne.n	800e7be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f000 ff25 	bl	800f608 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	691b      	ldr	r3, [r3, #16]
 800e7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7c8:	2b40      	cmp	r3, #64	; 0x40
 800e7ca:	d10e      	bne.n	800e7ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	68db      	ldr	r3, [r3, #12]
 800e7d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7d6:	2b40      	cmp	r3, #64	; 0x40
 800e7d8:	d107      	bne.n	800e7ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e7e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 fa3d 	bl	800ec64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	691b      	ldr	r3, [r3, #16]
 800e7f0:	f003 0320 	and.w	r3, r3, #32
 800e7f4:	2b20      	cmp	r3, #32
 800e7f6:	d10e      	bne.n	800e816 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	f003 0320 	and.w	r3, r3, #32
 800e802:	2b20      	cmp	r3, #32
 800e804:	d107      	bne.n	800e816 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f06f 0220 	mvn.w	r2, #32
 800e80e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 fee5 	bl	800f5e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e816:	bf00      	nop
 800e818:	3708      	adds	r7, #8
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
	...

0800e820 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e832:	2b01      	cmp	r3, #1
 800e834:	d101      	bne.n	800e83a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e836:	2302      	movs	r3, #2
 800e838:	e0fd      	b.n	800ea36 <HAL_TIM_PWM_ConfigChannel+0x216>
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2201      	movs	r2, #1
 800e83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2b14      	cmp	r3, #20
 800e846:	f200 80f0 	bhi.w	800ea2a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e84a:	a201      	add	r2, pc, #4	; (adr r2, 800e850 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e850:	0800e8a5 	.word	0x0800e8a5
 800e854:	0800ea2b 	.word	0x0800ea2b
 800e858:	0800ea2b 	.word	0x0800ea2b
 800e85c:	0800ea2b 	.word	0x0800ea2b
 800e860:	0800e8e5 	.word	0x0800e8e5
 800e864:	0800ea2b 	.word	0x0800ea2b
 800e868:	0800ea2b 	.word	0x0800ea2b
 800e86c:	0800ea2b 	.word	0x0800ea2b
 800e870:	0800e927 	.word	0x0800e927
 800e874:	0800ea2b 	.word	0x0800ea2b
 800e878:	0800ea2b 	.word	0x0800ea2b
 800e87c:	0800ea2b 	.word	0x0800ea2b
 800e880:	0800e967 	.word	0x0800e967
 800e884:	0800ea2b 	.word	0x0800ea2b
 800e888:	0800ea2b 	.word	0x0800ea2b
 800e88c:	0800ea2b 	.word	0x0800ea2b
 800e890:	0800e9a9 	.word	0x0800e9a9
 800e894:	0800ea2b 	.word	0x0800ea2b
 800e898:	0800ea2b 	.word	0x0800ea2b
 800e89c:	0800ea2b 	.word	0x0800ea2b
 800e8a0:	0800e9e9 	.word	0x0800e9e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	68b9      	ldr	r1, [r7, #8]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f000 fa7e 	bl	800edac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	699a      	ldr	r2, [r3, #24]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f042 0208 	orr.w	r2, r2, #8
 800e8be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	699a      	ldr	r2, [r3, #24]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f022 0204 	bic.w	r2, r2, #4
 800e8ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	6999      	ldr	r1, [r3, #24]
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	691a      	ldr	r2, [r3, #16]
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	430a      	orrs	r2, r1
 800e8e0:	619a      	str	r2, [r3, #24]
      break;
 800e8e2:	e0a3      	b.n	800ea2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	68b9      	ldr	r1, [r7, #8]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f000 faee 	bl	800eecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	699a      	ldr	r2, [r3, #24]
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e8fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	699a      	ldr	r2, [r3, #24]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e90e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	6999      	ldr	r1, [r3, #24]
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	691b      	ldr	r3, [r3, #16]
 800e91a:	021a      	lsls	r2, r3, #8
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	430a      	orrs	r2, r1
 800e922:	619a      	str	r2, [r3, #24]
      break;
 800e924:	e082      	b.n	800ea2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	68b9      	ldr	r1, [r7, #8]
 800e92c:	4618      	mov	r0, r3
 800e92e:	f000 fb57 	bl	800efe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	69da      	ldr	r2, [r3, #28]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f042 0208 	orr.w	r2, r2, #8
 800e940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	69da      	ldr	r2, [r3, #28]
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f022 0204 	bic.w	r2, r2, #4
 800e950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	69d9      	ldr	r1, [r3, #28]
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	691a      	ldr	r2, [r3, #16]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	430a      	orrs	r2, r1
 800e962:	61da      	str	r2, [r3, #28]
      break;
 800e964:	e062      	b.n	800ea2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	68b9      	ldr	r1, [r7, #8]
 800e96c:	4618      	mov	r0, r3
 800e96e:	f000 fbbd 	bl	800f0ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	69da      	ldr	r2, [r3, #28]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	69da      	ldr	r2, [r3, #28]
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	69d9      	ldr	r1, [r3, #28]
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	691b      	ldr	r3, [r3, #16]
 800e99c:	021a      	lsls	r2, r3, #8
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	430a      	orrs	r2, r1
 800e9a4:	61da      	str	r2, [r3, #28]
      break;
 800e9a6:	e041      	b.n	800ea2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	68b9      	ldr	r1, [r7, #8]
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f000 fc04 	bl	800f1bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f042 0208 	orr.w	r2, r2, #8
 800e9c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f022 0204 	bic.w	r2, r2, #4
 800e9d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	691a      	ldr	r2, [r3, #16]
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	430a      	orrs	r2, r1
 800e9e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e9e6:	e021      	b.n	800ea2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	68b9      	ldr	r1, [r7, #8]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f000 fc46 	bl	800f280 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	691b      	ldr	r3, [r3, #16]
 800ea1e:	021a      	lsls	r2, r3, #8
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	430a      	orrs	r2, r1
 800ea26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ea28:	e000      	b.n	800ea2c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ea2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3710      	adds	r7, #16
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop

0800ea40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b084      	sub	sp, #16
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d101      	bne.n	800ea58 <HAL_TIM_ConfigClockSource+0x18>
 800ea54:	2302      	movs	r3, #2
 800ea56:	e0db      	b.n	800ec10 <HAL_TIM_ConfigClockSource+0x1d0>
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2202      	movs	r2, #2
 800ea64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	689b      	ldr	r3, [r3, #8]
 800ea6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea70:	68fa      	ldr	r2, [r7, #12]
 800ea72:	4b69      	ldr	r3, [pc, #420]	; (800ec18 <HAL_TIM_ConfigClockSource+0x1d8>)
 800ea74:	4013      	ands	r3, r2
 800ea76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	4a63      	ldr	r2, [pc, #396]	; (800ec1c <HAL_TIM_ConfigClockSource+0x1dc>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	f000 80a9 	beq.w	800ebe6 <HAL_TIM_ConfigClockSource+0x1a6>
 800ea94:	4a61      	ldr	r2, [pc, #388]	; (800ec1c <HAL_TIM_ConfigClockSource+0x1dc>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	f200 80ae 	bhi.w	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800ea9c:	4a60      	ldr	r2, [pc, #384]	; (800ec20 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	f000 80a1 	beq.w	800ebe6 <HAL_TIM_ConfigClockSource+0x1a6>
 800eaa4:	4a5e      	ldr	r2, [pc, #376]	; (800ec20 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	f200 80a6 	bhi.w	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eaac:	4a5d      	ldr	r2, [pc, #372]	; (800ec24 <HAL_TIM_ConfigClockSource+0x1e4>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	f000 8099 	beq.w	800ebe6 <HAL_TIM_ConfigClockSource+0x1a6>
 800eab4:	4a5b      	ldr	r2, [pc, #364]	; (800ec24 <HAL_TIM_ConfigClockSource+0x1e4>)
 800eab6:	4293      	cmp	r3, r2
 800eab8:	f200 809e 	bhi.w	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eabc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eac0:	f000 8091 	beq.w	800ebe6 <HAL_TIM_ConfigClockSource+0x1a6>
 800eac4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eac8:	f200 8096 	bhi.w	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eacc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ead0:	f000 8089 	beq.w	800ebe6 <HAL_TIM_ConfigClockSource+0x1a6>
 800ead4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ead8:	f200 808e 	bhi.w	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eadc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eae0:	d03e      	beq.n	800eb60 <HAL_TIM_ConfigClockSource+0x120>
 800eae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eae6:	f200 8087 	bhi.w	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eaea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eaee:	f000 8085 	beq.w	800ebfc <HAL_TIM_ConfigClockSource+0x1bc>
 800eaf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eaf6:	d87f      	bhi.n	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eaf8:	2b70      	cmp	r3, #112	; 0x70
 800eafa:	d01a      	beq.n	800eb32 <HAL_TIM_ConfigClockSource+0xf2>
 800eafc:	2b70      	cmp	r3, #112	; 0x70
 800eafe:	d87b      	bhi.n	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb00:	2b60      	cmp	r3, #96	; 0x60
 800eb02:	d050      	beq.n	800eba6 <HAL_TIM_ConfigClockSource+0x166>
 800eb04:	2b60      	cmp	r3, #96	; 0x60
 800eb06:	d877      	bhi.n	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb08:	2b50      	cmp	r3, #80	; 0x50
 800eb0a:	d03c      	beq.n	800eb86 <HAL_TIM_ConfigClockSource+0x146>
 800eb0c:	2b50      	cmp	r3, #80	; 0x50
 800eb0e:	d873      	bhi.n	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb10:	2b40      	cmp	r3, #64	; 0x40
 800eb12:	d058      	beq.n	800ebc6 <HAL_TIM_ConfigClockSource+0x186>
 800eb14:	2b40      	cmp	r3, #64	; 0x40
 800eb16:	d86f      	bhi.n	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb18:	2b30      	cmp	r3, #48	; 0x30
 800eb1a:	d064      	beq.n	800ebe6 <HAL_TIM_ConfigClockSource+0x1a6>
 800eb1c:	2b30      	cmp	r3, #48	; 0x30
 800eb1e:	d86b      	bhi.n	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb20:	2b20      	cmp	r3, #32
 800eb22:	d060      	beq.n	800ebe6 <HAL_TIM_ConfigClockSource+0x1a6>
 800eb24:	2b20      	cmp	r3, #32
 800eb26:	d867      	bhi.n	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d05c      	beq.n	800ebe6 <HAL_TIM_ConfigClockSource+0x1a6>
 800eb2c:	2b10      	cmp	r3, #16
 800eb2e:	d05a      	beq.n	800ebe6 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800eb30:	e062      	b.n	800ebf8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6818      	ldr	r0, [r3, #0]
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	6899      	ldr	r1, [r3, #8]
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	685a      	ldr	r2, [r3, #4]
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	f000 fc7f 	bl	800f444 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	689b      	ldr	r3, [r3, #8]
 800eb4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eb54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	609a      	str	r2, [r3, #8]
      break;
 800eb5e:	e04e      	b.n	800ebfe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6818      	ldr	r0, [r3, #0]
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	6899      	ldr	r1, [r3, #8]
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	f000 fc68 	bl	800f444 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	689a      	ldr	r2, [r3, #8]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eb82:	609a      	str	r2, [r3, #8]
      break;
 800eb84:	e03b      	b.n	800ebfe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6818      	ldr	r0, [r3, #0]
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	6859      	ldr	r1, [r3, #4]
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	461a      	mov	r2, r3
 800eb94:	f000 fbd8 	bl	800f348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2150      	movs	r1, #80	; 0x50
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f000 fc32 	bl	800f408 <TIM_ITRx_SetConfig>
      break;
 800eba4:	e02b      	b.n	800ebfe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6818      	ldr	r0, [r3, #0]
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	6859      	ldr	r1, [r3, #4]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	461a      	mov	r2, r3
 800ebb4:	f000 fbf7 	bl	800f3a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2160      	movs	r1, #96	; 0x60
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f000 fc22 	bl	800f408 <TIM_ITRx_SetConfig>
      break;
 800ebc4:	e01b      	b.n	800ebfe <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6818      	ldr	r0, [r3, #0]
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	6859      	ldr	r1, [r3, #4]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	461a      	mov	r2, r3
 800ebd4:	f000 fbb8 	bl	800f348 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2140      	movs	r1, #64	; 0x40
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f000 fc12 	bl	800f408 <TIM_ITRx_SetConfig>
      break;
 800ebe4:	e00b      	b.n	800ebfe <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	4619      	mov	r1, r3
 800ebf0:	4610      	mov	r0, r2
 800ebf2:	f000 fc09 	bl	800f408 <TIM_ITRx_SetConfig>
        break;
 800ebf6:	e002      	b.n	800ebfe <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ebf8:	bf00      	nop
 800ebfa:	e000      	b.n	800ebfe <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800ebfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2201      	movs	r2, #1
 800ec02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec0e:	2300      	movs	r3, #0
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3710      	adds	r7, #16
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	ffceff88 	.word	0xffceff88
 800ec1c:	00100040 	.word	0x00100040
 800ec20:	00100030 	.word	0x00100030
 800ec24:	00100020 	.word	0x00100020

0800ec28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b083      	sub	sp, #12
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ec30:	bf00      	nop
 800ec32:	370c      	adds	r7, #12
 800ec34:	46bd      	mov	sp, r7
 800ec36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3a:	4770      	bx	lr

0800ec3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ec44:	bf00      	nop
 800ec46:	370c      	adds	r7, #12
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4e:	4770      	bx	lr

0800ec50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec50:	b480      	push	{r7}
 800ec52:	b083      	sub	sp, #12
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ec58:	bf00      	nop
 800ec5a:	370c      	adds	r7, #12
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ec6c:	bf00      	nop
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4a40      	ldr	r2, [pc, #256]	; (800ed8c <TIM_Base_SetConfig+0x114>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d013      	beq.n	800ecb8 <TIM_Base_SetConfig+0x40>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec96:	d00f      	beq.n	800ecb8 <TIM_Base_SetConfig+0x40>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	4a3d      	ldr	r2, [pc, #244]	; (800ed90 <TIM_Base_SetConfig+0x118>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d00b      	beq.n	800ecb8 <TIM_Base_SetConfig+0x40>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	4a3c      	ldr	r2, [pc, #240]	; (800ed94 <TIM_Base_SetConfig+0x11c>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d007      	beq.n	800ecb8 <TIM_Base_SetConfig+0x40>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	4a3b      	ldr	r2, [pc, #236]	; (800ed98 <TIM_Base_SetConfig+0x120>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d003      	beq.n	800ecb8 <TIM_Base_SetConfig+0x40>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	4a3a      	ldr	r2, [pc, #232]	; (800ed9c <TIM_Base_SetConfig+0x124>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d108      	bne.n	800ecca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	685b      	ldr	r3, [r3, #4]
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	4a2f      	ldr	r2, [pc, #188]	; (800ed8c <TIM_Base_SetConfig+0x114>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d01f      	beq.n	800ed12 <TIM_Base_SetConfig+0x9a>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecd8:	d01b      	beq.n	800ed12 <TIM_Base_SetConfig+0x9a>
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4a2c      	ldr	r2, [pc, #176]	; (800ed90 <TIM_Base_SetConfig+0x118>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d017      	beq.n	800ed12 <TIM_Base_SetConfig+0x9a>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	4a2b      	ldr	r2, [pc, #172]	; (800ed94 <TIM_Base_SetConfig+0x11c>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	d013      	beq.n	800ed12 <TIM_Base_SetConfig+0x9a>
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	4a2a      	ldr	r2, [pc, #168]	; (800ed98 <TIM_Base_SetConfig+0x120>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d00f      	beq.n	800ed12 <TIM_Base_SetConfig+0x9a>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	4a29      	ldr	r2, [pc, #164]	; (800ed9c <TIM_Base_SetConfig+0x124>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d00b      	beq.n	800ed12 <TIM_Base_SetConfig+0x9a>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	4a28      	ldr	r2, [pc, #160]	; (800eda0 <TIM_Base_SetConfig+0x128>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d007      	beq.n	800ed12 <TIM_Base_SetConfig+0x9a>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	4a27      	ldr	r2, [pc, #156]	; (800eda4 <TIM_Base_SetConfig+0x12c>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d003      	beq.n	800ed12 <TIM_Base_SetConfig+0x9a>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	4a26      	ldr	r2, [pc, #152]	; (800eda8 <TIM_Base_SetConfig+0x130>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d108      	bne.n	800ed24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	68fa      	ldr	r2, [r7, #12]
 800ed20:	4313      	orrs	r3, r2
 800ed22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	695b      	ldr	r3, [r3, #20]
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	689a      	ldr	r2, [r3, #8]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4a10      	ldr	r2, [pc, #64]	; (800ed8c <TIM_Base_SetConfig+0x114>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d00f      	beq.n	800ed70 <TIM_Base_SetConfig+0xf8>
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4a12      	ldr	r2, [pc, #72]	; (800ed9c <TIM_Base_SetConfig+0x124>)
 800ed54:	4293      	cmp	r3, r2
 800ed56:	d00b      	beq.n	800ed70 <TIM_Base_SetConfig+0xf8>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	4a11      	ldr	r2, [pc, #68]	; (800eda0 <TIM_Base_SetConfig+0x128>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d007      	beq.n	800ed70 <TIM_Base_SetConfig+0xf8>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4a10      	ldr	r2, [pc, #64]	; (800eda4 <TIM_Base_SetConfig+0x12c>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d003      	beq.n	800ed70 <TIM_Base_SetConfig+0xf8>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4a0f      	ldr	r2, [pc, #60]	; (800eda8 <TIM_Base_SetConfig+0x130>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d103      	bne.n	800ed78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	691a      	ldr	r2, [r3, #16]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	615a      	str	r2, [r3, #20]
}
 800ed7e:	bf00      	nop
 800ed80:	3714      	adds	r7, #20
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr
 800ed8a:	bf00      	nop
 800ed8c:	40010000 	.word	0x40010000
 800ed90:	40000400 	.word	0x40000400
 800ed94:	40000800 	.word	0x40000800
 800ed98:	40000c00 	.word	0x40000c00
 800ed9c:	40010400 	.word	0x40010400
 800eda0:	40014000 	.word	0x40014000
 800eda4:	40014400 	.word	0x40014400
 800eda8:	40014800 	.word	0x40014800

0800edac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800edac:	b480      	push	{r7}
 800edae:	b087      	sub	sp, #28
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6a1b      	ldr	r3, [r3, #32]
 800edba:	f023 0201 	bic.w	r2, r3, #1
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6a1b      	ldr	r3, [r3, #32]
 800edc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	699b      	ldr	r3, [r3, #24]
 800edd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	4b37      	ldr	r3, [pc, #220]	; (800eeb4 <TIM_OC1_SetConfig+0x108>)
 800edd8:	4013      	ands	r3, r2
 800edda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f023 0303 	bic.w	r3, r3, #3
 800ede2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	68fa      	ldr	r2, [r7, #12]
 800edea:	4313      	orrs	r3, r2
 800edec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	f023 0302 	bic.w	r3, r3, #2
 800edf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	689b      	ldr	r3, [r3, #8]
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	4313      	orrs	r3, r2
 800edfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4a2d      	ldr	r2, [pc, #180]	; (800eeb8 <TIM_OC1_SetConfig+0x10c>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d00f      	beq.n	800ee28 <TIM_OC1_SetConfig+0x7c>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	4a2c      	ldr	r2, [pc, #176]	; (800eebc <TIM_OC1_SetConfig+0x110>)
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	d00b      	beq.n	800ee28 <TIM_OC1_SetConfig+0x7c>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	4a2b      	ldr	r2, [pc, #172]	; (800eec0 <TIM_OC1_SetConfig+0x114>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d007      	beq.n	800ee28 <TIM_OC1_SetConfig+0x7c>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	4a2a      	ldr	r2, [pc, #168]	; (800eec4 <TIM_OC1_SetConfig+0x118>)
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d003      	beq.n	800ee28 <TIM_OC1_SetConfig+0x7c>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	4a29      	ldr	r2, [pc, #164]	; (800eec8 <TIM_OC1_SetConfig+0x11c>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d10c      	bne.n	800ee42 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	f023 0308 	bic.w	r3, r3, #8
 800ee2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	68db      	ldr	r3, [r3, #12]
 800ee34:	697a      	ldr	r2, [r7, #20]
 800ee36:	4313      	orrs	r3, r2
 800ee38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	f023 0304 	bic.w	r3, r3, #4
 800ee40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	4a1c      	ldr	r2, [pc, #112]	; (800eeb8 <TIM_OC1_SetConfig+0x10c>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d00f      	beq.n	800ee6a <TIM_OC1_SetConfig+0xbe>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4a1b      	ldr	r2, [pc, #108]	; (800eebc <TIM_OC1_SetConfig+0x110>)
 800ee4e:	4293      	cmp	r3, r2
 800ee50:	d00b      	beq.n	800ee6a <TIM_OC1_SetConfig+0xbe>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	4a1a      	ldr	r2, [pc, #104]	; (800eec0 <TIM_OC1_SetConfig+0x114>)
 800ee56:	4293      	cmp	r3, r2
 800ee58:	d007      	beq.n	800ee6a <TIM_OC1_SetConfig+0xbe>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4a19      	ldr	r2, [pc, #100]	; (800eec4 <TIM_OC1_SetConfig+0x118>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d003      	beq.n	800ee6a <TIM_OC1_SetConfig+0xbe>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4a18      	ldr	r2, [pc, #96]	; (800eec8 <TIM_OC1_SetConfig+0x11c>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d111      	bne.n	800ee8e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ee78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	695b      	ldr	r3, [r3, #20]
 800ee7e:	693a      	ldr	r2, [r7, #16]
 800ee80:	4313      	orrs	r3, r2
 800ee82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	693a      	ldr	r2, [r7, #16]
 800ee8a:	4313      	orrs	r3, r2
 800ee8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	693a      	ldr	r2, [r7, #16]
 800ee92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68fa      	ldr	r2, [r7, #12]
 800ee98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	685a      	ldr	r2, [r3, #4]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	697a      	ldr	r2, [r7, #20]
 800eea6:	621a      	str	r2, [r3, #32]
}
 800eea8:	bf00      	nop
 800eeaa:	371c      	adds	r7, #28
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr
 800eeb4:	fffeff8f 	.word	0xfffeff8f
 800eeb8:	40010000 	.word	0x40010000
 800eebc:	40010400 	.word	0x40010400
 800eec0:	40014000 	.word	0x40014000
 800eec4:	40014400 	.word	0x40014400
 800eec8:	40014800 	.word	0x40014800

0800eecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eecc:	b480      	push	{r7}
 800eece:	b087      	sub	sp, #28
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6a1b      	ldr	r3, [r3, #32]
 800eeda:	f023 0210 	bic.w	r2, r3, #16
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	6a1b      	ldr	r3, [r3, #32]
 800eee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	685b      	ldr	r3, [r3, #4]
 800eeec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	699b      	ldr	r3, [r3, #24]
 800eef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	4b34      	ldr	r3, [pc, #208]	; (800efc8 <TIM_OC2_SetConfig+0xfc>)
 800eef8:	4013      	ands	r3, r2
 800eefa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	021b      	lsls	r3, r3, #8
 800ef0a:	68fa      	ldr	r2, [r7, #12]
 800ef0c:	4313      	orrs	r3, r2
 800ef0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	f023 0320 	bic.w	r3, r3, #32
 800ef16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	011b      	lsls	r3, r3, #4
 800ef1e:	697a      	ldr	r2, [r7, #20]
 800ef20:	4313      	orrs	r3, r2
 800ef22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	4a29      	ldr	r2, [pc, #164]	; (800efcc <TIM_OC2_SetConfig+0x100>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d003      	beq.n	800ef34 <TIM_OC2_SetConfig+0x68>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	4a28      	ldr	r2, [pc, #160]	; (800efd0 <TIM_OC2_SetConfig+0x104>)
 800ef30:	4293      	cmp	r3, r2
 800ef32:	d10d      	bne.n	800ef50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	011b      	lsls	r3, r3, #4
 800ef42:	697a      	ldr	r2, [r7, #20]
 800ef44:	4313      	orrs	r3, r2
 800ef46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ef48:	697b      	ldr	r3, [r7, #20]
 800ef4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	4a1e      	ldr	r2, [pc, #120]	; (800efcc <TIM_OC2_SetConfig+0x100>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d00f      	beq.n	800ef78 <TIM_OC2_SetConfig+0xac>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a1d      	ldr	r2, [pc, #116]	; (800efd0 <TIM_OC2_SetConfig+0x104>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d00b      	beq.n	800ef78 <TIM_OC2_SetConfig+0xac>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	4a1c      	ldr	r2, [pc, #112]	; (800efd4 <TIM_OC2_SetConfig+0x108>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d007      	beq.n	800ef78 <TIM_OC2_SetConfig+0xac>
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a1b      	ldr	r2, [pc, #108]	; (800efd8 <TIM_OC2_SetConfig+0x10c>)
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d003      	beq.n	800ef78 <TIM_OC2_SetConfig+0xac>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4a1a      	ldr	r2, [pc, #104]	; (800efdc <TIM_OC2_SetConfig+0x110>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d113      	bne.n	800efa0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ef7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ef86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	695b      	ldr	r3, [r3, #20]
 800ef8c:	009b      	lsls	r3, r3, #2
 800ef8e:	693a      	ldr	r2, [r7, #16]
 800ef90:	4313      	orrs	r3, r2
 800ef92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	699b      	ldr	r3, [r3, #24]
 800ef98:	009b      	lsls	r3, r3, #2
 800ef9a:	693a      	ldr	r2, [r7, #16]
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	693a      	ldr	r2, [r7, #16]
 800efa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	68fa      	ldr	r2, [r7, #12]
 800efaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	685a      	ldr	r2, [r3, #4]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	697a      	ldr	r2, [r7, #20]
 800efb8:	621a      	str	r2, [r3, #32]
}
 800efba:	bf00      	nop
 800efbc:	371c      	adds	r7, #28
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	feff8fff 	.word	0xfeff8fff
 800efcc:	40010000 	.word	0x40010000
 800efd0:	40010400 	.word	0x40010400
 800efd4:	40014000 	.word	0x40014000
 800efd8:	40014400 	.word	0x40014400
 800efdc:	40014800 	.word	0x40014800

0800efe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b087      	sub	sp, #28
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6a1b      	ldr	r3, [r3, #32]
 800efee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6a1b      	ldr	r3, [r3, #32]
 800effa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	69db      	ldr	r3, [r3, #28]
 800f006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f00e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f023 0303 	bic.w	r3, r3, #3
 800f016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	4313      	orrs	r3, r2
 800f020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	021b      	lsls	r3, r3, #8
 800f030:	697a      	ldr	r2, [r7, #20]
 800f032:	4313      	orrs	r3, r2
 800f034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	4a27      	ldr	r2, [pc, #156]	; (800f0d8 <TIM_OC3_SetConfig+0xf8>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d003      	beq.n	800f046 <TIM_OC3_SetConfig+0x66>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4a26      	ldr	r2, [pc, #152]	; (800f0dc <TIM_OC3_SetConfig+0xfc>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d10d      	bne.n	800f062 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f04c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	021b      	lsls	r3, r3, #8
 800f054:	697a      	ldr	r2, [r7, #20]
 800f056:	4313      	orrs	r3, r2
 800f058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	4a1c      	ldr	r2, [pc, #112]	; (800f0d8 <TIM_OC3_SetConfig+0xf8>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d00f      	beq.n	800f08a <TIM_OC3_SetConfig+0xaa>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4a1b      	ldr	r2, [pc, #108]	; (800f0dc <TIM_OC3_SetConfig+0xfc>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d00b      	beq.n	800f08a <TIM_OC3_SetConfig+0xaa>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4a1a      	ldr	r2, [pc, #104]	; (800f0e0 <TIM_OC3_SetConfig+0x100>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d007      	beq.n	800f08a <TIM_OC3_SetConfig+0xaa>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4a19      	ldr	r2, [pc, #100]	; (800f0e4 <TIM_OC3_SetConfig+0x104>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d003      	beq.n	800f08a <TIM_OC3_SetConfig+0xaa>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4a18      	ldr	r2, [pc, #96]	; (800f0e8 <TIM_OC3_SetConfig+0x108>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d113      	bne.n	800f0b2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	695b      	ldr	r3, [r3, #20]
 800f09e:	011b      	lsls	r3, r3, #4
 800f0a0:	693a      	ldr	r2, [r7, #16]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	699b      	ldr	r3, [r3, #24]
 800f0aa:	011b      	lsls	r3, r3, #4
 800f0ac:	693a      	ldr	r2, [r7, #16]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	693a      	ldr	r2, [r7, #16]
 800f0b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	68fa      	ldr	r2, [r7, #12]
 800f0bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	685a      	ldr	r2, [r3, #4]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	697a      	ldr	r2, [r7, #20]
 800f0ca:	621a      	str	r2, [r3, #32]
}
 800f0cc:	bf00      	nop
 800f0ce:	371c      	adds	r7, #28
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	40010000 	.word	0x40010000
 800f0dc:	40010400 	.word	0x40010400
 800f0e0:	40014000 	.word	0x40014000
 800f0e4:	40014400 	.word	0x40014400
 800f0e8:	40014800 	.word	0x40014800

0800f0ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b087      	sub	sp, #28
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a1b      	ldr	r3, [r3, #32]
 800f0fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6a1b      	ldr	r3, [r3, #32]
 800f106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	69db      	ldr	r3, [r3, #28]
 800f112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f11a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	021b      	lsls	r3, r3, #8
 800f12a:	68fa      	ldr	r2, [r7, #12]
 800f12c:	4313      	orrs	r3, r2
 800f12e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f130:	693b      	ldr	r3, [r7, #16]
 800f132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	689b      	ldr	r3, [r3, #8]
 800f13c:	031b      	lsls	r3, r3, #12
 800f13e:	693a      	ldr	r2, [r7, #16]
 800f140:	4313      	orrs	r3, r2
 800f142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4a18      	ldr	r2, [pc, #96]	; (800f1a8 <TIM_OC4_SetConfig+0xbc>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d00f      	beq.n	800f16c <TIM_OC4_SetConfig+0x80>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a17      	ldr	r2, [pc, #92]	; (800f1ac <TIM_OC4_SetConfig+0xc0>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d00b      	beq.n	800f16c <TIM_OC4_SetConfig+0x80>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a16      	ldr	r2, [pc, #88]	; (800f1b0 <TIM_OC4_SetConfig+0xc4>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d007      	beq.n	800f16c <TIM_OC4_SetConfig+0x80>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4a15      	ldr	r2, [pc, #84]	; (800f1b4 <TIM_OC4_SetConfig+0xc8>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d003      	beq.n	800f16c <TIM_OC4_SetConfig+0x80>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	4a14      	ldr	r2, [pc, #80]	; (800f1b8 <TIM_OC4_SetConfig+0xcc>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d109      	bne.n	800f180 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	695b      	ldr	r3, [r3, #20]
 800f178:	019b      	lsls	r3, r3, #6
 800f17a:	697a      	ldr	r2, [r7, #20]
 800f17c:	4313      	orrs	r3, r2
 800f17e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	697a      	ldr	r2, [r7, #20]
 800f184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	685a      	ldr	r2, [r3, #4]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	693a      	ldr	r2, [r7, #16]
 800f198:	621a      	str	r2, [r3, #32]
}
 800f19a:	bf00      	nop
 800f19c:	371c      	adds	r7, #28
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr
 800f1a6:	bf00      	nop
 800f1a8:	40010000 	.word	0x40010000
 800f1ac:	40010400 	.word	0x40010400
 800f1b0:	40014000 	.word	0x40014000
 800f1b4:	40014400 	.word	0x40014400
 800f1b8:	40014800 	.word	0x40014800

0800f1bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b087      	sub	sp, #28
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
 800f1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6a1b      	ldr	r3, [r3, #32]
 800f1ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6a1b      	ldr	r3, [r3, #32]
 800f1d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	68fa      	ldr	r2, [r7, #12]
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f1fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	689b      	ldr	r3, [r3, #8]
 800f202:	041b      	lsls	r3, r3, #16
 800f204:	693a      	ldr	r2, [r7, #16]
 800f206:	4313      	orrs	r3, r2
 800f208:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4a17      	ldr	r2, [pc, #92]	; (800f26c <TIM_OC5_SetConfig+0xb0>)
 800f20e:	4293      	cmp	r3, r2
 800f210:	d00f      	beq.n	800f232 <TIM_OC5_SetConfig+0x76>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4a16      	ldr	r2, [pc, #88]	; (800f270 <TIM_OC5_SetConfig+0xb4>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d00b      	beq.n	800f232 <TIM_OC5_SetConfig+0x76>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	4a15      	ldr	r2, [pc, #84]	; (800f274 <TIM_OC5_SetConfig+0xb8>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d007      	beq.n	800f232 <TIM_OC5_SetConfig+0x76>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4a14      	ldr	r2, [pc, #80]	; (800f278 <TIM_OC5_SetConfig+0xbc>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d003      	beq.n	800f232 <TIM_OC5_SetConfig+0x76>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4a13      	ldr	r2, [pc, #76]	; (800f27c <TIM_OC5_SetConfig+0xc0>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d109      	bne.n	800f246 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f238:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	695b      	ldr	r3, [r3, #20]
 800f23e:	021b      	lsls	r3, r3, #8
 800f240:	697a      	ldr	r2, [r7, #20]
 800f242:	4313      	orrs	r3, r2
 800f244:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	697a      	ldr	r2, [r7, #20]
 800f24a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	685a      	ldr	r2, [r3, #4]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	693a      	ldr	r2, [r7, #16]
 800f25e:	621a      	str	r2, [r3, #32]
}
 800f260:	bf00      	nop
 800f262:	371c      	adds	r7, #28
 800f264:	46bd      	mov	sp, r7
 800f266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26a:	4770      	bx	lr
 800f26c:	40010000 	.word	0x40010000
 800f270:	40010400 	.word	0x40010400
 800f274:	40014000 	.word	0x40014000
 800f278:	40014400 	.word	0x40014400
 800f27c:	40014800 	.word	0x40014800

0800f280 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f280:	b480      	push	{r7}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6a1b      	ldr	r3, [r3, #32]
 800f28e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a1b      	ldr	r3, [r3, #32]
 800f29a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	021b      	lsls	r3, r3, #8
 800f2b6:	68fa      	ldr	r2, [r7, #12]
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f2c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	051b      	lsls	r3, r3, #20
 800f2ca:	693a      	ldr	r2, [r7, #16]
 800f2cc:	4313      	orrs	r3, r2
 800f2ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4a18      	ldr	r2, [pc, #96]	; (800f334 <TIM_OC6_SetConfig+0xb4>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d00f      	beq.n	800f2f8 <TIM_OC6_SetConfig+0x78>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	4a17      	ldr	r2, [pc, #92]	; (800f338 <TIM_OC6_SetConfig+0xb8>)
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d00b      	beq.n	800f2f8 <TIM_OC6_SetConfig+0x78>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4a16      	ldr	r2, [pc, #88]	; (800f33c <TIM_OC6_SetConfig+0xbc>)
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d007      	beq.n	800f2f8 <TIM_OC6_SetConfig+0x78>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	4a15      	ldr	r2, [pc, #84]	; (800f340 <TIM_OC6_SetConfig+0xc0>)
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d003      	beq.n	800f2f8 <TIM_OC6_SetConfig+0x78>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	4a14      	ldr	r2, [pc, #80]	; (800f344 <TIM_OC6_SetConfig+0xc4>)
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	d109      	bne.n	800f30c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f2fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	695b      	ldr	r3, [r3, #20]
 800f304:	029b      	lsls	r3, r3, #10
 800f306:	697a      	ldr	r2, [r7, #20]
 800f308:	4313      	orrs	r3, r2
 800f30a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	697a      	ldr	r2, [r7, #20]
 800f310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	68fa      	ldr	r2, [r7, #12]
 800f316:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	685a      	ldr	r2, [r3, #4]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	693a      	ldr	r2, [r7, #16]
 800f324:	621a      	str	r2, [r3, #32]
}
 800f326:	bf00      	nop
 800f328:	371c      	adds	r7, #28
 800f32a:	46bd      	mov	sp, r7
 800f32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	40010000 	.word	0x40010000
 800f338:	40010400 	.word	0x40010400
 800f33c:	40014000 	.word	0x40014000
 800f340:	40014400 	.word	0x40014400
 800f344:	40014800 	.word	0x40014800

0800f348 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f348:	b480      	push	{r7}
 800f34a:	b087      	sub	sp, #28
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	6a1b      	ldr	r3, [r3, #32]
 800f358:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6a1b      	ldr	r3, [r3, #32]
 800f35e:	f023 0201 	bic.w	r2, r3, #1
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	699b      	ldr	r3, [r3, #24]
 800f36a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	011b      	lsls	r3, r3, #4
 800f378:	693a      	ldr	r2, [r7, #16]
 800f37a:	4313      	orrs	r3, r2
 800f37c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	f023 030a 	bic.w	r3, r3, #10
 800f384:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	4313      	orrs	r3, r2
 800f38c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	693a      	ldr	r2, [r7, #16]
 800f392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	697a      	ldr	r2, [r7, #20]
 800f398:	621a      	str	r2, [r3, #32]
}
 800f39a:	bf00      	nop
 800f39c:	371c      	adds	r7, #28
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr

0800f3a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f3a6:	b480      	push	{r7}
 800f3a8:	b087      	sub	sp, #28
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	60f8      	str	r0, [r7, #12]
 800f3ae:	60b9      	str	r1, [r7, #8]
 800f3b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6a1b      	ldr	r3, [r3, #32]
 800f3b6:	f023 0210 	bic.w	r2, r3, #16
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	699b      	ldr	r3, [r3, #24]
 800f3c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	6a1b      	ldr	r3, [r3, #32]
 800f3c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f3d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	031b      	lsls	r3, r3, #12
 800f3d6:	697a      	ldr	r2, [r7, #20]
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f3e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	011b      	lsls	r3, r3, #4
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	697a      	ldr	r2, [r7, #20]
 800f3f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	693a      	ldr	r2, [r7, #16]
 800f3f8:	621a      	str	r2, [r3, #32]
}
 800f3fa:	bf00      	nop
 800f3fc:	371c      	adds	r7, #28
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
	...

0800f408 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f408:	b480      	push	{r7}
 800f40a:	b085      	sub	sp, #20
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	689b      	ldr	r3, [r3, #8]
 800f416:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f418:	68fa      	ldr	r2, [r7, #12]
 800f41a:	4b09      	ldr	r3, [pc, #36]	; (800f440 <TIM_ITRx_SetConfig+0x38>)
 800f41c:	4013      	ands	r3, r2
 800f41e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f420:	683a      	ldr	r2, [r7, #0]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	4313      	orrs	r3, r2
 800f426:	f043 0307 	orr.w	r3, r3, #7
 800f42a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	68fa      	ldr	r2, [r7, #12]
 800f430:	609a      	str	r2, [r3, #8]
}
 800f432:	bf00      	nop
 800f434:	3714      	adds	r7, #20
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr
 800f43e:	bf00      	nop
 800f440:	ffcfff8f 	.word	0xffcfff8f

0800f444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f444:	b480      	push	{r7}
 800f446:	b087      	sub	sp, #28
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	607a      	str	r2, [r7, #4]
 800f450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	689b      	ldr	r3, [r3, #8]
 800f456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f45e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	021a      	lsls	r2, r3, #8
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	431a      	orrs	r2, r3
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	4313      	orrs	r3, r2
 800f46c:	697a      	ldr	r2, [r7, #20]
 800f46e:	4313      	orrs	r3, r2
 800f470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	697a      	ldr	r2, [r7, #20]
 800f476:	609a      	str	r2, [r3, #8]
}
 800f478:	bf00      	nop
 800f47a:	371c      	adds	r7, #28
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f484:	b480      	push	{r7}
 800f486:	b087      	sub	sp, #28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	f003 031f 	and.w	r3, r3, #31
 800f496:	2201      	movs	r2, #1
 800f498:	fa02 f303 	lsl.w	r3, r2, r3
 800f49c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	6a1a      	ldr	r2, [r3, #32]
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	43db      	mvns	r3, r3
 800f4a6:	401a      	ands	r2, r3
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	6a1a      	ldr	r2, [r3, #32]
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	f003 031f 	and.w	r3, r3, #31
 800f4b6:	6879      	ldr	r1, [r7, #4]
 800f4b8:	fa01 f303 	lsl.w	r3, r1, r3
 800f4bc:	431a      	orrs	r2, r3
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	621a      	str	r2, [r3, #32]
}
 800f4c2:	bf00      	nop
 800f4c4:	371c      	adds	r7, #28
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr
	...

0800f4d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d101      	bne.n	800f4e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f4e4:	2302      	movs	r3, #2
 800f4e6:	e068      	b.n	800f5ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2202      	movs	r2, #2
 800f4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	689b      	ldr	r3, [r3, #8]
 800f506:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	4a2e      	ldr	r2, [pc, #184]	; (800f5c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	d004      	beq.n	800f51c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	4a2d      	ldr	r2, [pc, #180]	; (800f5cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d108      	bne.n	800f52e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f522:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	4313      	orrs	r3, r2
 800f52c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f534:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	68fa      	ldr	r2, [r7, #12]
 800f53c:	4313      	orrs	r3, r2
 800f53e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	4a1e      	ldr	r2, [pc, #120]	; (800f5c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800f54e:	4293      	cmp	r3, r2
 800f550:	d01d      	beq.n	800f58e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f55a:	d018      	beq.n	800f58e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4a1b      	ldr	r2, [pc, #108]	; (800f5d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d013      	beq.n	800f58e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	4a1a      	ldr	r2, [pc, #104]	; (800f5d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f56c:	4293      	cmp	r3, r2
 800f56e:	d00e      	beq.n	800f58e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a18      	ldr	r2, [pc, #96]	; (800f5d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d009      	beq.n	800f58e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	4a13      	ldr	r2, [pc, #76]	; (800f5cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d004      	beq.n	800f58e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	4a14      	ldr	r2, [pc, #80]	; (800f5dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d10c      	bne.n	800f5a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	689b      	ldr	r3, [r3, #8]
 800f59a:	68ba      	ldr	r2, [r7, #8]
 800f59c:	4313      	orrs	r3, r2
 800f59e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	68ba      	ldr	r2, [r7, #8]
 800f5a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5b8:	2300      	movs	r3, #0
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3714      	adds	r7, #20
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop
 800f5c8:	40010000 	.word	0x40010000
 800f5cc:	40010400 	.word	0x40010400
 800f5d0:	40000400 	.word	0x40000400
 800f5d4:	40000800 	.word	0x40000800
 800f5d8:	40000c00 	.word	0x40000c00
 800f5dc:	40001800 	.word	0x40001800

0800f5e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f5e8:	bf00      	nop
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f5fc:	bf00      	nop
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f610:	bf00      	nop
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d101      	bne.n	800f62e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f62a:	2301      	movs	r3, #1
 800f62c:	e042      	b.n	800f6b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f634:	2b00      	cmp	r3, #0
 800f636:	d106      	bne.n	800f646 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2200      	movs	r2, #0
 800f63c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f7f4 fbbb 	bl	8003dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2224      	movs	r2, #36	; 0x24
 800f64a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	f022 0201 	bic.w	r2, r2, #1
 800f65c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 fc26 	bl	800feb0 <UART_SetConfig>
 800f664:	4603      	mov	r3, r0
 800f666:	2b01      	cmp	r3, #1
 800f668:	d101      	bne.n	800f66e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f66a:	2301      	movs	r3, #1
 800f66c:	e022      	b.n	800f6b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f672:	2b00      	cmp	r3, #0
 800f674:	d002      	beq.n	800f67c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f001 f97a 	bl	8010970 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	685a      	ldr	r2, [r3, #4]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f68a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	689a      	ldr	r2, [r3, #8]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f69a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f042 0201 	orr.w	r2, r2, #1
 800f6aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f001 fa01 	bl	8010ab4 <UART_CheckIdleState>
 800f6b2:	4603      	mov	r3, r0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	60f8      	str	r0, [r7, #12]
 800f6c4:	60b9      	str	r1, [r7, #8]
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f6d0:	2b20      	cmp	r3, #32
 800f6d2:	d131      	bne.n	800f738 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d002      	beq.n	800f6e0 <HAL_UART_Receive_IT+0x24>
 800f6da:	88fb      	ldrh	r3, [r7, #6]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d101      	bne.n	800f6e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f6e0:	2301      	movs	r3, #1
 800f6e2:	e02a      	b.n	800f73a <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d101      	bne.n	800f6f2 <HAL_UART_Receive_IT+0x36>
 800f6ee:	2302      	movs	r3, #2
 800f6f0:	e023      	b.n	800f73a <HAL_UART_Receive_IT+0x7e>
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4a0f      	ldr	r2, [pc, #60]	; (800f744 <HAL_UART_Receive_IT+0x88>)
 800f706:	4293      	cmp	r3, r2
 800f708:	d00e      	beq.n	800f728 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f714:	2b00      	cmp	r3, #0
 800f716:	d007      	beq.n	800f728 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	681a      	ldr	r2, [r3, #0]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f726:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f728:	88fb      	ldrh	r3, [r7, #6]
 800f72a:	461a      	mov	r2, r3
 800f72c:	68b9      	ldr	r1, [r7, #8]
 800f72e:	68f8      	ldr	r0, [r7, #12]
 800f730:	f001 fa8c 	bl	8010c4c <UART_Start_Receive_IT>
 800f734:	4603      	mov	r3, r0
 800f736:	e000      	b.n	800f73a <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800f738:	2302      	movs	r3, #2
  }
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}
 800f742:	bf00      	nop
 800f744:	58000c00 	.word	0x58000c00

0800f748 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	4613      	mov	r3, r2
 800f754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f75c:	2b20      	cmp	r3, #32
 800f75e:	d168      	bne.n	800f832 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800f760:	68bb      	ldr	r3, [r7, #8]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d002      	beq.n	800f76c <HAL_UART_Transmit_DMA+0x24>
 800f766:	88fb      	ldrh	r3, [r7, #6]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d101      	bne.n	800f770 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f76c:	2301      	movs	r3, #1
 800f76e:	e061      	b.n	800f834 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f776:	2b01      	cmp	r3, #1
 800f778:	d101      	bne.n	800f77e <HAL_UART_Transmit_DMA+0x36>
 800f77a:	2302      	movs	r3, #2
 800f77c:	e05a      	b.n	800f834 <HAL_UART_Transmit_DMA+0xec>
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2201      	movs	r2, #1
 800f782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	88fa      	ldrh	r2, [r7, #6]
 800f790:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	88fa      	ldrh	r2, [r7, #6]
 800f798:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2221      	movs	r2, #33	; 0x21
 800f7a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d02c      	beq.n	800f80e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7b8:	4a20      	ldr	r2, [pc, #128]	; (800f83c <HAL_UART_Transmit_DMA+0xf4>)
 800f7ba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7c0:	4a1f      	ldr	r2, [pc, #124]	; (800f840 <HAL_UART_Transmit_DMA+0xf8>)
 800f7c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7c8:	4a1e      	ldr	r2, [pc, #120]	; (800f844 <HAL_UART_Transmit_DMA+0xfc>)
 800f7ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7dc:	4619      	mov	r1, r3
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	3328      	adds	r3, #40	; 0x28
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	88fb      	ldrh	r3, [r7, #6]
 800f7e8:	f7f6 f960 	bl	8005aac <HAL_DMA_Start_IT>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00d      	beq.n	800f80e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	2210      	movs	r2, #16
 800f7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2220      	movs	r2, #32
 800f806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800f80a:	2301      	movs	r3, #1
 800f80c:	e012      	b.n	800f834 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	2240      	movs	r2, #64	; 0x40
 800f814:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2200      	movs	r2, #0
 800f81a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	689a      	ldr	r2, [r3, #8]
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f82c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800f82e:	2300      	movs	r3, #0
 800f830:	e000      	b.n	800f834 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800f832:	2302      	movs	r3, #2
  }
}
 800f834:	4618      	mov	r0, r3
 800f836:	3710      	adds	r7, #16
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}
 800f83c:	08010f45 	.word	0x08010f45
 800f840:	08010f95 	.word	0x08010f95
 800f844:	0801107f 	.word	0x0801107f

0800f848 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	60f8      	str	r0, [r7, #12]
 800f850:	60b9      	str	r1, [r7, #8]
 800f852:	4613      	mov	r3, r2
 800f854:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f85c:	2b20      	cmp	r3, #32
 800f85e:	d131      	bne.n	800f8c4 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d002      	beq.n	800f86c <HAL_UART_Receive_DMA+0x24>
 800f866:	88fb      	ldrh	r3, [r7, #6]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d101      	bne.n	800f870 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f86c:	2301      	movs	r3, #1
 800f86e:	e02a      	b.n	800f8c6 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f876:	2b01      	cmp	r3, #1
 800f878:	d101      	bne.n	800f87e <HAL_UART_Receive_DMA+0x36>
 800f87a:	2302      	movs	r3, #2
 800f87c:	e023      	b.n	800f8c6 <HAL_UART_Receive_DMA+0x7e>
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2201      	movs	r2, #1
 800f882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	2200      	movs	r2, #0
 800f88a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	4a0f      	ldr	r2, [pc, #60]	; (800f8d0 <HAL_UART_Receive_DMA+0x88>)
 800f892:	4293      	cmp	r3, r2
 800f894:	d00e      	beq.n	800f8b4 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	685b      	ldr	r3, [r3, #4]
 800f89c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d007      	beq.n	800f8b4 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f8b2:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f8b4:	88fb      	ldrh	r3, [r7, #6]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	68b9      	ldr	r1, [r7, #8]
 800f8ba:	68f8      	ldr	r0, [r7, #12]
 800f8bc:	f001 fa84 	bl	8010dc8 <UART_Start_Receive_DMA>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	e000      	b.n	800f8c6 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800f8c4:	2302      	movs	r3, #2
  }
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	58000c00 	.word	0x58000c00

0800f8d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b088      	sub	sp, #32
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	69db      	ldr	r3, [r3, #28]
 800f8e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f8f4:	69fa      	ldr	r2, [r7, #28]
 800f8f6:	f640 030f 	movw	r3, #2063	; 0x80f
 800f8fa:	4013      	ands	r3, r2
 800f8fc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d118      	bne.n	800f936 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	f003 0320 	and.w	r3, r3, #32
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d013      	beq.n	800f936 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f90e:	69bb      	ldr	r3, [r7, #24]
 800f910:	f003 0320 	and.w	r3, r3, #32
 800f914:	2b00      	cmp	r3, #0
 800f916:	d104      	bne.n	800f922 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f918:	697b      	ldr	r3, [r7, #20]
 800f91a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d009      	beq.n	800f936 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f926:	2b00      	cmp	r3, #0
 800f928:	f000 8282 	beq.w	800fe30 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	4798      	blx	r3
      }
      return;
 800f934:	e27c      	b.n	800fe30 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f000 80ef 	beq.w	800fb1c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f93e:	697a      	ldr	r2, [r7, #20]
 800f940:	4b73      	ldr	r3, [pc, #460]	; (800fb10 <HAL_UART_IRQHandler+0x23c>)
 800f942:	4013      	ands	r3, r2
 800f944:	2b00      	cmp	r3, #0
 800f946:	d105      	bne.n	800f954 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f948:	69ba      	ldr	r2, [r7, #24]
 800f94a:	4b72      	ldr	r3, [pc, #456]	; (800fb14 <HAL_UART_IRQHandler+0x240>)
 800f94c:	4013      	ands	r3, r2
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f000 80e4 	beq.w	800fb1c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f954:	69fb      	ldr	r3, [r7, #28]
 800f956:	f003 0301 	and.w	r3, r3, #1
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d010      	beq.n	800f980 <HAL_UART_IRQHandler+0xac>
 800f95e:	69bb      	ldr	r3, [r7, #24]
 800f960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f964:	2b00      	cmp	r3, #0
 800f966:	d00b      	beq.n	800f980 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2201      	movs	r2, #1
 800f96e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f976:	f043 0201 	orr.w	r2, r3, #1
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	f003 0302 	and.w	r3, r3, #2
 800f986:	2b00      	cmp	r3, #0
 800f988:	d010      	beq.n	800f9ac <HAL_UART_IRQHandler+0xd8>
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	f003 0301 	and.w	r3, r3, #1
 800f990:	2b00      	cmp	r3, #0
 800f992:	d00b      	beq.n	800f9ac <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2202      	movs	r2, #2
 800f99a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9a2:	f043 0204 	orr.w	r2, r3, #4
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	f003 0304 	and.w	r3, r3, #4
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d010      	beq.n	800f9d8 <HAL_UART_IRQHandler+0x104>
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	f003 0301 	and.w	r3, r3, #1
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00b      	beq.n	800f9d8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2204      	movs	r2, #4
 800f9c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f9ce:	f043 0202 	orr.w	r2, r3, #2
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	f003 0308 	and.w	r3, r3, #8
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d015      	beq.n	800fa0e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	f003 0320 	and.w	r3, r3, #32
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d104      	bne.n	800f9f6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f9ec:	697a      	ldr	r2, [r7, #20]
 800f9ee:	4b48      	ldr	r3, [pc, #288]	; (800fb10 <HAL_UART_IRQHandler+0x23c>)
 800f9f0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d00b      	beq.n	800fa0e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2208      	movs	r2, #8
 800f9fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa04:	f043 0208 	orr.w	r2, r3, #8
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d011      	beq.n	800fa3c <HAL_UART_IRQHandler+0x168>
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d00c      	beq.n	800fa3c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fa2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa32:	f043 0220 	orr.w	r2, r3, #32
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	f000 81f6 	beq.w	800fe34 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	f003 0320 	and.w	r3, r3, #32
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d011      	beq.n	800fa76 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fa52:	69bb      	ldr	r3, [r7, #24]
 800fa54:	f003 0320 	and.w	r3, r3, #32
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d104      	bne.n	800fa66 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d007      	beq.n	800fa76 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d003      	beq.n	800fa76 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa7c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa88:	2b40      	cmp	r3, #64	; 0x40
 800fa8a:	d004      	beq.n	800fa96 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d031      	beq.n	800fafa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f001 fa22 	bl	8010ee0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800faa6:	2b40      	cmp	r3, #64	; 0x40
 800faa8:	d123      	bne.n	800faf2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	689a      	ldr	r2, [r3, #8]
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fab8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d013      	beq.n	800faea <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fac6:	4a14      	ldr	r2, [pc, #80]	; (800fb18 <HAL_UART_IRQHandler+0x244>)
 800fac8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800face:	4618      	mov	r0, r3
 800fad0:	f7f6 fd74 	bl	80065bc <HAL_DMA_Abort_IT>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d017      	beq.n	800fb0a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fae0:	687a      	ldr	r2, [r7, #4]
 800fae2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800fae4:	4610      	mov	r0, r2
 800fae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fae8:	e00f      	b.n	800fb0a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f000 f9ca 	bl	800fe84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faf0:	e00b      	b.n	800fb0a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f000 f9c6 	bl	800fe84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faf8:	e007      	b.n	800fb0a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f000 f9c2 	bl	800fe84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800fb08:	e194      	b.n	800fe34 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb0a:	bf00      	nop
    return;
 800fb0c:	e192      	b.n	800fe34 <HAL_UART_IRQHandler+0x560>
 800fb0e:	bf00      	nop
 800fb10:	10000001 	.word	0x10000001
 800fb14:	04000120 	.word	0x04000120
 800fb18:	080110ff 	.word	0x080110ff

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	f040 810f 	bne.w	800fd44 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fb26:	69fb      	ldr	r3, [r7, #28]
 800fb28:	f003 0310 	and.w	r3, r3, #16
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	f000 8109 	beq.w	800fd44 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	f003 0310 	and.w	r3, r3, #16
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	f000 8103 	beq.w	800fd44 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2210      	movs	r2, #16
 800fb44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	689b      	ldr	r3, [r3, #8]
 800fb4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb50:	2b40      	cmp	r3, #64	; 0x40
 800fb52:	f040 80bb 	bne.w	800fccc <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4a96      	ldr	r2, [pc, #600]	; (800fdb8 <HAL_UART_IRQHandler+0x4e4>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d059      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4a94      	ldr	r2, [pc, #592]	; (800fdbc <HAL_UART_IRQHandler+0x4e8>)
 800fb6a:	4293      	cmp	r3, r2
 800fb6c:	d053      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4a92      	ldr	r2, [pc, #584]	; (800fdc0 <HAL_UART_IRQHandler+0x4ec>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d04d      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a90      	ldr	r2, [pc, #576]	; (800fdc4 <HAL_UART_IRQHandler+0x4f0>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d047      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4a8e      	ldr	r2, [pc, #568]	; (800fdc8 <HAL_UART_IRQHandler+0x4f4>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	d041      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	4a8c      	ldr	r2, [pc, #560]	; (800fdcc <HAL_UART_IRQHandler+0x4f8>)
 800fb9a:	4293      	cmp	r3, r2
 800fb9c:	d03b      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4a8a      	ldr	r2, [pc, #552]	; (800fdd0 <HAL_UART_IRQHandler+0x4fc>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d035      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	4a88      	ldr	r2, [pc, #544]	; (800fdd4 <HAL_UART_IRQHandler+0x500>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d02f      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	4a86      	ldr	r2, [pc, #536]	; (800fdd8 <HAL_UART_IRQHandler+0x504>)
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d029      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4a84      	ldr	r2, [pc, #528]	; (800fddc <HAL_UART_IRQHandler+0x508>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d023      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4a82      	ldr	r2, [pc, #520]	; (800fde0 <HAL_UART_IRQHandler+0x50c>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d01d      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a80      	ldr	r2, [pc, #512]	; (800fde4 <HAL_UART_IRQHandler+0x510>)
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	d017      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4a7e      	ldr	r2, [pc, #504]	; (800fde8 <HAL_UART_IRQHandler+0x514>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d011      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4a7c      	ldr	r2, [pc, #496]	; (800fdec <HAL_UART_IRQHandler+0x518>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d00b      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4a7a      	ldr	r2, [pc, #488]	; (800fdf0 <HAL_UART_IRQHandler+0x51c>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d005      	beq.n	800fc16 <HAL_UART_IRQHandler+0x342>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4a78      	ldr	r2, [pc, #480]	; (800fdf4 <HAL_UART_IRQHandler+0x520>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d105      	bne.n	800fc22 <HAL_UART_IRQHandler+0x34e>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	e004      	b.n	800fc2c <HAL_UART_IRQHandler+0x358>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800fc2e:	893b      	ldrh	r3, [r7, #8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	f000 8101 	beq.w	800fe38 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc3c:	893a      	ldrh	r2, [r7, #8]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	f080 80fa 	bcs.w	800fe38 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	893a      	ldrh	r2, [r7, #8]
 800fc48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc50:	69db      	ldr	r3, [r3, #28]
 800fc52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc56:	d02b      	beq.n	800fcb0 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	681a      	ldr	r2, [r3, #0]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fc66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	689a      	ldr	r2, [r3, #8]
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f022 0201 	bic.w	r2, r2, #1
 800fc76:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	689a      	ldr	r2, [r3, #8]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc86:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2220      	movs	r2, #32
 800fc8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2200      	movs	r2, #0
 800fc94:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	681a      	ldr	r2, [r3, #0]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f022 0210 	bic.w	r2, r2, #16
 800fca4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7f6 f968 	bl	8005f80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	1ad3      	subs	r3, r2, r3
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f000 f8e7 	bl	800fe98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fcca:	e0b5      	b.n	800fe38 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcd8:	b29b      	uxth	r3, r3
 800fcda:	1ad3      	subs	r3, r2, r3
 800fcdc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f000 80a8 	beq.w	800fe3c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800fcec:	897b      	ldrh	r3, [r7, #10]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	f000 80a4 	beq.w	800fe3c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800fd02:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	6899      	ldr	r1, [r3, #8]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	4b3a      	ldr	r3, [pc, #232]	; (800fdf8 <HAL_UART_IRQHandler+0x524>)
 800fd10:	400b      	ands	r3, r1
 800fd12:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2220      	movs	r2, #32
 800fd18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2200      	movs	r2, #0
 800fd26:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f022 0210 	bic.w	r2, r2, #16
 800fd36:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fd38:	897b      	ldrh	r3, [r7, #10]
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f000 f8ab 	bl	800fe98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd42:	e07b      	b.n	800fe3c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00d      	beq.n	800fd6a <HAL_UART_IRQHandler+0x496>
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d008      	beq.n	800fd6a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fd60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f001 fcd8 	bl	8011718 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd68:	e06b      	b.n	800fe42 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fd6a:	69fb      	ldr	r3, [r7, #28]
 800fd6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d012      	beq.n	800fd9a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fd74:	69bb      	ldr	r3, [r7, #24]
 800fd76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d104      	bne.n	800fd88 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d008      	beq.n	800fd9a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d057      	beq.n	800fe40 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	4798      	blx	r3
    }
    return;
 800fd98:	e052      	b.n	800fe40 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d02b      	beq.n	800fdfc <HAL_UART_IRQHandler+0x528>
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d026      	beq.n	800fdfc <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f001 f9bb 	bl	801112a <UART_EndTransmit_IT>
    return;
 800fdb4:	e045      	b.n	800fe42 <HAL_UART_IRQHandler+0x56e>
 800fdb6:	bf00      	nop
 800fdb8:	40020010 	.word	0x40020010
 800fdbc:	40020028 	.word	0x40020028
 800fdc0:	40020040 	.word	0x40020040
 800fdc4:	40020058 	.word	0x40020058
 800fdc8:	40020070 	.word	0x40020070
 800fdcc:	40020088 	.word	0x40020088
 800fdd0:	400200a0 	.word	0x400200a0
 800fdd4:	400200b8 	.word	0x400200b8
 800fdd8:	40020410 	.word	0x40020410
 800fddc:	40020428 	.word	0x40020428
 800fde0:	40020440 	.word	0x40020440
 800fde4:	40020458 	.word	0x40020458
 800fde8:	40020470 	.word	0x40020470
 800fdec:	40020488 	.word	0x40020488
 800fdf0:	400204a0 	.word	0x400204a0
 800fdf4:	400204b8 	.word	0x400204b8
 800fdf8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d008      	beq.n	800fe18 <HAL_UART_IRQHandler+0x544>
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d003      	beq.n	800fe18 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f001 fc95 	bl	8011740 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe16:	e014      	b.n	800fe42 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d00f      	beq.n	800fe42 <HAL_UART_IRQHandler+0x56e>
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	da0c      	bge.n	800fe42 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fe28:	6878      	ldr	r0, [r7, #4]
 800fe2a:	f001 fc7f 	bl	801172c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe2e:	e008      	b.n	800fe42 <HAL_UART_IRQHandler+0x56e>
      return;
 800fe30:	bf00      	nop
 800fe32:	e006      	b.n	800fe42 <HAL_UART_IRQHandler+0x56e>
    return;
 800fe34:	bf00      	nop
 800fe36:	e004      	b.n	800fe42 <HAL_UART_IRQHandler+0x56e>
      return;
 800fe38:	bf00      	nop
 800fe3a:	e002      	b.n	800fe42 <HAL_UART_IRQHandler+0x56e>
      return;
 800fe3c:	bf00      	nop
 800fe3e:	e000      	b.n	800fe42 <HAL_UART_IRQHandler+0x56e>
    return;
 800fe40:	bf00      	nop
  }
}
 800fe42:	3720      	adds	r7, #32
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fe50:	bf00      	nop
 800fe52:	370c      	adds	r7, #12
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr

0800fe5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fe64:	bf00      	nop
 800fe66:	370c      	adds	r7, #12
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr

0800fe70 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fe78:	bf00      	nop
 800fe7a:	370c      	adds	r7, #12
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr

0800fe84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b083      	sub	sp, #12
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fe8c:	bf00      	nop
 800fe8e:	370c      	adds	r7, #12
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	460b      	mov	r3, r1
 800fea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fea4:	bf00      	nop
 800fea6:	370c      	adds	r7, #12
 800fea8:	46bd      	mov	sp, r7
 800feaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feae:	4770      	bx	lr

0800feb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800feb0:	b5b0      	push	{r4, r5, r7, lr}
 800feb2:	b08e      	sub	sp, #56	; 0x38
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800feb8:	2300      	movs	r3, #0
 800feba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	689a      	ldr	r2, [r3, #8]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	691b      	ldr	r3, [r3, #16]
 800fec6:	431a      	orrs	r2, r3
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	695b      	ldr	r3, [r3, #20]
 800fecc:	431a      	orrs	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	69db      	ldr	r3, [r3, #28]
 800fed2:	4313      	orrs	r3, r2
 800fed4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	4bbf      	ldr	r3, [pc, #764]	; (80101dc <UART_SetConfig+0x32c>)
 800fede:	4013      	ands	r3, r2
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	6812      	ldr	r2, [r2, #0]
 800fee4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fee6:	430b      	orrs	r3, r1
 800fee8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	68da      	ldr	r2, [r3, #12]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	430a      	orrs	r2, r1
 800fefe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	699b      	ldr	r3, [r3, #24]
 800ff04:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4ab5      	ldr	r2, [pc, #724]	; (80101e0 <UART_SetConfig+0x330>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d004      	beq.n	800ff1a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6a1b      	ldr	r3, [r3, #32]
 800ff14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff16:	4313      	orrs	r3, r2
 800ff18:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	689a      	ldr	r2, [r3, #8]
 800ff20:	4bb0      	ldr	r3, [pc, #704]	; (80101e4 <UART_SetConfig+0x334>)
 800ff22:	4013      	ands	r3, r2
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	6812      	ldr	r2, [r2, #0]
 800ff28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ff2a:	430b      	orrs	r3, r1
 800ff2c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff34:	f023 010f 	bic.w	r1, r3, #15
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	430a      	orrs	r2, r1
 800ff42:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4aa7      	ldr	r2, [pc, #668]	; (80101e8 <UART_SetConfig+0x338>)
 800ff4a:	4293      	cmp	r3, r2
 800ff4c:	d176      	bne.n	801003c <UART_SetConfig+0x18c>
 800ff4e:	4ba7      	ldr	r3, [pc, #668]	; (80101ec <UART_SetConfig+0x33c>)
 800ff50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ff56:	2b28      	cmp	r3, #40	; 0x28
 800ff58:	d86c      	bhi.n	8010034 <UART_SetConfig+0x184>
 800ff5a:	a201      	add	r2, pc, #4	; (adr r2, 800ff60 <UART_SetConfig+0xb0>)
 800ff5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff60:	08010005 	.word	0x08010005
 800ff64:	08010035 	.word	0x08010035
 800ff68:	08010035 	.word	0x08010035
 800ff6c:	08010035 	.word	0x08010035
 800ff70:	08010035 	.word	0x08010035
 800ff74:	08010035 	.word	0x08010035
 800ff78:	08010035 	.word	0x08010035
 800ff7c:	08010035 	.word	0x08010035
 800ff80:	0801000d 	.word	0x0801000d
 800ff84:	08010035 	.word	0x08010035
 800ff88:	08010035 	.word	0x08010035
 800ff8c:	08010035 	.word	0x08010035
 800ff90:	08010035 	.word	0x08010035
 800ff94:	08010035 	.word	0x08010035
 800ff98:	08010035 	.word	0x08010035
 800ff9c:	08010035 	.word	0x08010035
 800ffa0:	08010015 	.word	0x08010015
 800ffa4:	08010035 	.word	0x08010035
 800ffa8:	08010035 	.word	0x08010035
 800ffac:	08010035 	.word	0x08010035
 800ffb0:	08010035 	.word	0x08010035
 800ffb4:	08010035 	.word	0x08010035
 800ffb8:	08010035 	.word	0x08010035
 800ffbc:	08010035 	.word	0x08010035
 800ffc0:	0801001d 	.word	0x0801001d
 800ffc4:	08010035 	.word	0x08010035
 800ffc8:	08010035 	.word	0x08010035
 800ffcc:	08010035 	.word	0x08010035
 800ffd0:	08010035 	.word	0x08010035
 800ffd4:	08010035 	.word	0x08010035
 800ffd8:	08010035 	.word	0x08010035
 800ffdc:	08010035 	.word	0x08010035
 800ffe0:	08010025 	.word	0x08010025
 800ffe4:	08010035 	.word	0x08010035
 800ffe8:	08010035 	.word	0x08010035
 800ffec:	08010035 	.word	0x08010035
 800fff0:	08010035 	.word	0x08010035
 800fff4:	08010035 	.word	0x08010035
 800fff8:	08010035 	.word	0x08010035
 800fffc:	08010035 	.word	0x08010035
 8010000:	0801002d 	.word	0x0801002d
 8010004:	2301      	movs	r3, #1
 8010006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801000a:	e222      	b.n	8010452 <UART_SetConfig+0x5a2>
 801000c:	2304      	movs	r3, #4
 801000e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010012:	e21e      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010014:	2308      	movs	r3, #8
 8010016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801001a:	e21a      	b.n	8010452 <UART_SetConfig+0x5a2>
 801001c:	2310      	movs	r3, #16
 801001e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010022:	e216      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010024:	2320      	movs	r3, #32
 8010026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801002a:	e212      	b.n	8010452 <UART_SetConfig+0x5a2>
 801002c:	2340      	movs	r3, #64	; 0x40
 801002e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010032:	e20e      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010034:	2380      	movs	r3, #128	; 0x80
 8010036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801003a:	e20a      	b.n	8010452 <UART_SetConfig+0x5a2>
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	4a6b      	ldr	r2, [pc, #428]	; (80101f0 <UART_SetConfig+0x340>)
 8010042:	4293      	cmp	r3, r2
 8010044:	d130      	bne.n	80100a8 <UART_SetConfig+0x1f8>
 8010046:	4b69      	ldr	r3, [pc, #420]	; (80101ec <UART_SetConfig+0x33c>)
 8010048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801004a:	f003 0307 	and.w	r3, r3, #7
 801004e:	2b05      	cmp	r3, #5
 8010050:	d826      	bhi.n	80100a0 <UART_SetConfig+0x1f0>
 8010052:	a201      	add	r2, pc, #4	; (adr r2, 8010058 <UART_SetConfig+0x1a8>)
 8010054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010058:	08010071 	.word	0x08010071
 801005c:	08010079 	.word	0x08010079
 8010060:	08010081 	.word	0x08010081
 8010064:	08010089 	.word	0x08010089
 8010068:	08010091 	.word	0x08010091
 801006c:	08010099 	.word	0x08010099
 8010070:	2300      	movs	r3, #0
 8010072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010076:	e1ec      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010078:	2304      	movs	r3, #4
 801007a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801007e:	e1e8      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010080:	2308      	movs	r3, #8
 8010082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010086:	e1e4      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010088:	2310      	movs	r3, #16
 801008a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801008e:	e1e0      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010090:	2320      	movs	r3, #32
 8010092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010096:	e1dc      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010098:	2340      	movs	r3, #64	; 0x40
 801009a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801009e:	e1d8      	b.n	8010452 <UART_SetConfig+0x5a2>
 80100a0:	2380      	movs	r3, #128	; 0x80
 80100a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100a6:	e1d4      	b.n	8010452 <UART_SetConfig+0x5a2>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4a51      	ldr	r2, [pc, #324]	; (80101f4 <UART_SetConfig+0x344>)
 80100ae:	4293      	cmp	r3, r2
 80100b0:	d130      	bne.n	8010114 <UART_SetConfig+0x264>
 80100b2:	4b4e      	ldr	r3, [pc, #312]	; (80101ec <UART_SetConfig+0x33c>)
 80100b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100b6:	f003 0307 	and.w	r3, r3, #7
 80100ba:	2b05      	cmp	r3, #5
 80100bc:	d826      	bhi.n	801010c <UART_SetConfig+0x25c>
 80100be:	a201      	add	r2, pc, #4	; (adr r2, 80100c4 <UART_SetConfig+0x214>)
 80100c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100c4:	080100dd 	.word	0x080100dd
 80100c8:	080100e5 	.word	0x080100e5
 80100cc:	080100ed 	.word	0x080100ed
 80100d0:	080100f5 	.word	0x080100f5
 80100d4:	080100fd 	.word	0x080100fd
 80100d8:	08010105 	.word	0x08010105
 80100dc:	2300      	movs	r3, #0
 80100de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100e2:	e1b6      	b.n	8010452 <UART_SetConfig+0x5a2>
 80100e4:	2304      	movs	r3, #4
 80100e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ea:	e1b2      	b.n	8010452 <UART_SetConfig+0x5a2>
 80100ec:	2308      	movs	r3, #8
 80100ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100f2:	e1ae      	b.n	8010452 <UART_SetConfig+0x5a2>
 80100f4:	2310      	movs	r3, #16
 80100f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100fa:	e1aa      	b.n	8010452 <UART_SetConfig+0x5a2>
 80100fc:	2320      	movs	r3, #32
 80100fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010102:	e1a6      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010104:	2340      	movs	r3, #64	; 0x40
 8010106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801010a:	e1a2      	b.n	8010452 <UART_SetConfig+0x5a2>
 801010c:	2380      	movs	r3, #128	; 0x80
 801010e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010112:	e19e      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	4a37      	ldr	r2, [pc, #220]	; (80101f8 <UART_SetConfig+0x348>)
 801011a:	4293      	cmp	r3, r2
 801011c:	d130      	bne.n	8010180 <UART_SetConfig+0x2d0>
 801011e:	4b33      	ldr	r3, [pc, #204]	; (80101ec <UART_SetConfig+0x33c>)
 8010120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010122:	f003 0307 	and.w	r3, r3, #7
 8010126:	2b05      	cmp	r3, #5
 8010128:	d826      	bhi.n	8010178 <UART_SetConfig+0x2c8>
 801012a:	a201      	add	r2, pc, #4	; (adr r2, 8010130 <UART_SetConfig+0x280>)
 801012c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010130:	08010149 	.word	0x08010149
 8010134:	08010151 	.word	0x08010151
 8010138:	08010159 	.word	0x08010159
 801013c:	08010161 	.word	0x08010161
 8010140:	08010169 	.word	0x08010169
 8010144:	08010171 	.word	0x08010171
 8010148:	2300      	movs	r3, #0
 801014a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801014e:	e180      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010150:	2304      	movs	r3, #4
 8010152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010156:	e17c      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010158:	2308      	movs	r3, #8
 801015a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801015e:	e178      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010160:	2310      	movs	r3, #16
 8010162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010166:	e174      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010168:	2320      	movs	r3, #32
 801016a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801016e:	e170      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010170:	2340      	movs	r3, #64	; 0x40
 8010172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010176:	e16c      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010178:	2380      	movs	r3, #128	; 0x80
 801017a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801017e:	e168      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4a1d      	ldr	r2, [pc, #116]	; (80101fc <UART_SetConfig+0x34c>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d142      	bne.n	8010210 <UART_SetConfig+0x360>
 801018a:	4b18      	ldr	r3, [pc, #96]	; (80101ec <UART_SetConfig+0x33c>)
 801018c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801018e:	f003 0307 	and.w	r3, r3, #7
 8010192:	2b05      	cmp	r3, #5
 8010194:	d838      	bhi.n	8010208 <UART_SetConfig+0x358>
 8010196:	a201      	add	r2, pc, #4	; (adr r2, 801019c <UART_SetConfig+0x2ec>)
 8010198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019c:	080101b5 	.word	0x080101b5
 80101a0:	080101bd 	.word	0x080101bd
 80101a4:	080101c5 	.word	0x080101c5
 80101a8:	080101cd 	.word	0x080101cd
 80101ac:	080101d5 	.word	0x080101d5
 80101b0:	08010201 	.word	0x08010201
 80101b4:	2300      	movs	r3, #0
 80101b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ba:	e14a      	b.n	8010452 <UART_SetConfig+0x5a2>
 80101bc:	2304      	movs	r3, #4
 80101be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101c2:	e146      	b.n	8010452 <UART_SetConfig+0x5a2>
 80101c4:	2308      	movs	r3, #8
 80101c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ca:	e142      	b.n	8010452 <UART_SetConfig+0x5a2>
 80101cc:	2310      	movs	r3, #16
 80101ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101d2:	e13e      	b.n	8010452 <UART_SetConfig+0x5a2>
 80101d4:	2320      	movs	r3, #32
 80101d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101da:	e13a      	b.n	8010452 <UART_SetConfig+0x5a2>
 80101dc:	cfff69f3 	.word	0xcfff69f3
 80101e0:	58000c00 	.word	0x58000c00
 80101e4:	11fff4ff 	.word	0x11fff4ff
 80101e8:	40011000 	.word	0x40011000
 80101ec:	58024400 	.word	0x58024400
 80101f0:	40004400 	.word	0x40004400
 80101f4:	40004800 	.word	0x40004800
 80101f8:	40004c00 	.word	0x40004c00
 80101fc:	40005000 	.word	0x40005000
 8010200:	2340      	movs	r3, #64	; 0x40
 8010202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010206:	e124      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010208:	2380      	movs	r3, #128	; 0x80
 801020a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801020e:	e120      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	4acc      	ldr	r2, [pc, #816]	; (8010548 <UART_SetConfig+0x698>)
 8010216:	4293      	cmp	r3, r2
 8010218:	d176      	bne.n	8010308 <UART_SetConfig+0x458>
 801021a:	4bcc      	ldr	r3, [pc, #816]	; (801054c <UART_SetConfig+0x69c>)
 801021c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801021e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010222:	2b28      	cmp	r3, #40	; 0x28
 8010224:	d86c      	bhi.n	8010300 <UART_SetConfig+0x450>
 8010226:	a201      	add	r2, pc, #4	; (adr r2, 801022c <UART_SetConfig+0x37c>)
 8010228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801022c:	080102d1 	.word	0x080102d1
 8010230:	08010301 	.word	0x08010301
 8010234:	08010301 	.word	0x08010301
 8010238:	08010301 	.word	0x08010301
 801023c:	08010301 	.word	0x08010301
 8010240:	08010301 	.word	0x08010301
 8010244:	08010301 	.word	0x08010301
 8010248:	08010301 	.word	0x08010301
 801024c:	080102d9 	.word	0x080102d9
 8010250:	08010301 	.word	0x08010301
 8010254:	08010301 	.word	0x08010301
 8010258:	08010301 	.word	0x08010301
 801025c:	08010301 	.word	0x08010301
 8010260:	08010301 	.word	0x08010301
 8010264:	08010301 	.word	0x08010301
 8010268:	08010301 	.word	0x08010301
 801026c:	080102e1 	.word	0x080102e1
 8010270:	08010301 	.word	0x08010301
 8010274:	08010301 	.word	0x08010301
 8010278:	08010301 	.word	0x08010301
 801027c:	08010301 	.word	0x08010301
 8010280:	08010301 	.word	0x08010301
 8010284:	08010301 	.word	0x08010301
 8010288:	08010301 	.word	0x08010301
 801028c:	080102e9 	.word	0x080102e9
 8010290:	08010301 	.word	0x08010301
 8010294:	08010301 	.word	0x08010301
 8010298:	08010301 	.word	0x08010301
 801029c:	08010301 	.word	0x08010301
 80102a0:	08010301 	.word	0x08010301
 80102a4:	08010301 	.word	0x08010301
 80102a8:	08010301 	.word	0x08010301
 80102ac:	080102f1 	.word	0x080102f1
 80102b0:	08010301 	.word	0x08010301
 80102b4:	08010301 	.word	0x08010301
 80102b8:	08010301 	.word	0x08010301
 80102bc:	08010301 	.word	0x08010301
 80102c0:	08010301 	.word	0x08010301
 80102c4:	08010301 	.word	0x08010301
 80102c8:	08010301 	.word	0x08010301
 80102cc:	080102f9 	.word	0x080102f9
 80102d0:	2301      	movs	r3, #1
 80102d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102d6:	e0bc      	b.n	8010452 <UART_SetConfig+0x5a2>
 80102d8:	2304      	movs	r3, #4
 80102da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102de:	e0b8      	b.n	8010452 <UART_SetConfig+0x5a2>
 80102e0:	2308      	movs	r3, #8
 80102e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102e6:	e0b4      	b.n	8010452 <UART_SetConfig+0x5a2>
 80102e8:	2310      	movs	r3, #16
 80102ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ee:	e0b0      	b.n	8010452 <UART_SetConfig+0x5a2>
 80102f0:	2320      	movs	r3, #32
 80102f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102f6:	e0ac      	b.n	8010452 <UART_SetConfig+0x5a2>
 80102f8:	2340      	movs	r3, #64	; 0x40
 80102fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102fe:	e0a8      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010300:	2380      	movs	r3, #128	; 0x80
 8010302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010306:	e0a4      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	4a90      	ldr	r2, [pc, #576]	; (8010550 <UART_SetConfig+0x6a0>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d130      	bne.n	8010374 <UART_SetConfig+0x4c4>
 8010312:	4b8e      	ldr	r3, [pc, #568]	; (801054c <UART_SetConfig+0x69c>)
 8010314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010316:	f003 0307 	and.w	r3, r3, #7
 801031a:	2b05      	cmp	r3, #5
 801031c:	d826      	bhi.n	801036c <UART_SetConfig+0x4bc>
 801031e:	a201      	add	r2, pc, #4	; (adr r2, 8010324 <UART_SetConfig+0x474>)
 8010320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010324:	0801033d 	.word	0x0801033d
 8010328:	08010345 	.word	0x08010345
 801032c:	0801034d 	.word	0x0801034d
 8010330:	08010355 	.word	0x08010355
 8010334:	0801035d 	.word	0x0801035d
 8010338:	08010365 	.word	0x08010365
 801033c:	2300      	movs	r3, #0
 801033e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010342:	e086      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010344:	2304      	movs	r3, #4
 8010346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801034a:	e082      	b.n	8010452 <UART_SetConfig+0x5a2>
 801034c:	2308      	movs	r3, #8
 801034e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010352:	e07e      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010354:	2310      	movs	r3, #16
 8010356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801035a:	e07a      	b.n	8010452 <UART_SetConfig+0x5a2>
 801035c:	2320      	movs	r3, #32
 801035e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010362:	e076      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010364:	2340      	movs	r3, #64	; 0x40
 8010366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801036a:	e072      	b.n	8010452 <UART_SetConfig+0x5a2>
 801036c:	2380      	movs	r3, #128	; 0x80
 801036e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010372:	e06e      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4a76      	ldr	r2, [pc, #472]	; (8010554 <UART_SetConfig+0x6a4>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d130      	bne.n	80103e0 <UART_SetConfig+0x530>
 801037e:	4b73      	ldr	r3, [pc, #460]	; (801054c <UART_SetConfig+0x69c>)
 8010380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010382:	f003 0307 	and.w	r3, r3, #7
 8010386:	2b05      	cmp	r3, #5
 8010388:	d826      	bhi.n	80103d8 <UART_SetConfig+0x528>
 801038a:	a201      	add	r2, pc, #4	; (adr r2, 8010390 <UART_SetConfig+0x4e0>)
 801038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010390:	080103a9 	.word	0x080103a9
 8010394:	080103b1 	.word	0x080103b1
 8010398:	080103b9 	.word	0x080103b9
 801039c:	080103c1 	.word	0x080103c1
 80103a0:	080103c9 	.word	0x080103c9
 80103a4:	080103d1 	.word	0x080103d1
 80103a8:	2300      	movs	r3, #0
 80103aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ae:	e050      	b.n	8010452 <UART_SetConfig+0x5a2>
 80103b0:	2304      	movs	r3, #4
 80103b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103b6:	e04c      	b.n	8010452 <UART_SetConfig+0x5a2>
 80103b8:	2308      	movs	r3, #8
 80103ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103be:	e048      	b.n	8010452 <UART_SetConfig+0x5a2>
 80103c0:	2310      	movs	r3, #16
 80103c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103c6:	e044      	b.n	8010452 <UART_SetConfig+0x5a2>
 80103c8:	2320      	movs	r3, #32
 80103ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ce:	e040      	b.n	8010452 <UART_SetConfig+0x5a2>
 80103d0:	2340      	movs	r3, #64	; 0x40
 80103d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103d6:	e03c      	b.n	8010452 <UART_SetConfig+0x5a2>
 80103d8:	2380      	movs	r3, #128	; 0x80
 80103da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103de:	e038      	b.n	8010452 <UART_SetConfig+0x5a2>
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	4a5c      	ldr	r2, [pc, #368]	; (8010558 <UART_SetConfig+0x6a8>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d130      	bne.n	801044c <UART_SetConfig+0x59c>
 80103ea:	4b58      	ldr	r3, [pc, #352]	; (801054c <UART_SetConfig+0x69c>)
 80103ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ee:	f003 0307 	and.w	r3, r3, #7
 80103f2:	2b05      	cmp	r3, #5
 80103f4:	d826      	bhi.n	8010444 <UART_SetConfig+0x594>
 80103f6:	a201      	add	r2, pc, #4	; (adr r2, 80103fc <UART_SetConfig+0x54c>)
 80103f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103fc:	08010415 	.word	0x08010415
 8010400:	0801041d 	.word	0x0801041d
 8010404:	08010425 	.word	0x08010425
 8010408:	0801042d 	.word	0x0801042d
 801040c:	08010435 	.word	0x08010435
 8010410:	0801043d 	.word	0x0801043d
 8010414:	2302      	movs	r3, #2
 8010416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801041a:	e01a      	b.n	8010452 <UART_SetConfig+0x5a2>
 801041c:	2304      	movs	r3, #4
 801041e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010422:	e016      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010424:	2308      	movs	r3, #8
 8010426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801042a:	e012      	b.n	8010452 <UART_SetConfig+0x5a2>
 801042c:	2310      	movs	r3, #16
 801042e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010432:	e00e      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010434:	2320      	movs	r3, #32
 8010436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801043a:	e00a      	b.n	8010452 <UART_SetConfig+0x5a2>
 801043c:	2340      	movs	r3, #64	; 0x40
 801043e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010442:	e006      	b.n	8010452 <UART_SetConfig+0x5a2>
 8010444:	2380      	movs	r3, #128	; 0x80
 8010446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801044a:	e002      	b.n	8010452 <UART_SetConfig+0x5a2>
 801044c:	2380      	movs	r3, #128	; 0x80
 801044e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4a40      	ldr	r2, [pc, #256]	; (8010558 <UART_SetConfig+0x6a8>)
 8010458:	4293      	cmp	r3, r2
 801045a:	f040 80ef 	bne.w	801063c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801045e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010462:	2b20      	cmp	r3, #32
 8010464:	dc46      	bgt.n	80104f4 <UART_SetConfig+0x644>
 8010466:	2b02      	cmp	r3, #2
 8010468:	f2c0 8081 	blt.w	801056e <UART_SetConfig+0x6be>
 801046c:	3b02      	subs	r3, #2
 801046e:	2b1e      	cmp	r3, #30
 8010470:	d87d      	bhi.n	801056e <UART_SetConfig+0x6be>
 8010472:	a201      	add	r2, pc, #4	; (adr r2, 8010478 <UART_SetConfig+0x5c8>)
 8010474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010478:	080104fb 	.word	0x080104fb
 801047c:	0801056f 	.word	0x0801056f
 8010480:	08010503 	.word	0x08010503
 8010484:	0801056f 	.word	0x0801056f
 8010488:	0801056f 	.word	0x0801056f
 801048c:	0801056f 	.word	0x0801056f
 8010490:	08010513 	.word	0x08010513
 8010494:	0801056f 	.word	0x0801056f
 8010498:	0801056f 	.word	0x0801056f
 801049c:	0801056f 	.word	0x0801056f
 80104a0:	0801056f 	.word	0x0801056f
 80104a4:	0801056f 	.word	0x0801056f
 80104a8:	0801056f 	.word	0x0801056f
 80104ac:	0801056f 	.word	0x0801056f
 80104b0:	08010523 	.word	0x08010523
 80104b4:	0801056f 	.word	0x0801056f
 80104b8:	0801056f 	.word	0x0801056f
 80104bc:	0801056f 	.word	0x0801056f
 80104c0:	0801056f 	.word	0x0801056f
 80104c4:	0801056f 	.word	0x0801056f
 80104c8:	0801056f 	.word	0x0801056f
 80104cc:	0801056f 	.word	0x0801056f
 80104d0:	0801056f 	.word	0x0801056f
 80104d4:	0801056f 	.word	0x0801056f
 80104d8:	0801056f 	.word	0x0801056f
 80104dc:	0801056f 	.word	0x0801056f
 80104e0:	0801056f 	.word	0x0801056f
 80104e4:	0801056f 	.word	0x0801056f
 80104e8:	0801056f 	.word	0x0801056f
 80104ec:	0801056f 	.word	0x0801056f
 80104f0:	08010561 	.word	0x08010561
 80104f4:	2b40      	cmp	r3, #64	; 0x40
 80104f6:	d036      	beq.n	8010566 <UART_SetConfig+0x6b6>
 80104f8:	e039      	b.n	801056e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80104fa:	f7fc f91d 	bl	800c738 <HAL_RCCEx_GetD3PCLK1Freq>
 80104fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010500:	e03b      	b.n	801057a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010502:	f107 0314 	add.w	r3, r7, #20
 8010506:	4618      	mov	r0, r3
 8010508:	f7fc f92c 	bl	800c764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010510:	e033      	b.n	801057a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010512:	f107 0308 	add.w	r3, r7, #8
 8010516:	4618      	mov	r0, r3
 8010518:	f7fc fa78 	bl	800ca0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010520:	e02b      	b.n	801057a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010522:	4b0a      	ldr	r3, [pc, #40]	; (801054c <UART_SetConfig+0x69c>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f003 0320 	and.w	r3, r3, #32
 801052a:	2b00      	cmp	r3, #0
 801052c:	d009      	beq.n	8010542 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801052e:	4b07      	ldr	r3, [pc, #28]	; (801054c <UART_SetConfig+0x69c>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	08db      	lsrs	r3, r3, #3
 8010534:	f003 0303 	and.w	r3, r3, #3
 8010538:	4a08      	ldr	r2, [pc, #32]	; (801055c <UART_SetConfig+0x6ac>)
 801053a:	fa22 f303 	lsr.w	r3, r2, r3
 801053e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010540:	e01b      	b.n	801057a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8010542:	4b06      	ldr	r3, [pc, #24]	; (801055c <UART_SetConfig+0x6ac>)
 8010544:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010546:	e018      	b.n	801057a <UART_SetConfig+0x6ca>
 8010548:	40011400 	.word	0x40011400
 801054c:	58024400 	.word	0x58024400
 8010550:	40007800 	.word	0x40007800
 8010554:	40007c00 	.word	0x40007c00
 8010558:	58000c00 	.word	0x58000c00
 801055c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010560:	4bc4      	ldr	r3, [pc, #784]	; (8010874 <UART_SetConfig+0x9c4>)
 8010562:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010564:	e009      	b.n	801057a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801056a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801056c:	e005      	b.n	801057a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 801056e:	2300      	movs	r3, #0
 8010570:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010572:	2301      	movs	r3, #1
 8010574:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010578:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801057a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057c:	2b00      	cmp	r3, #0
 801057e:	f000 81da 	beq.w	8010936 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010586:	4abc      	ldr	r2, [pc, #752]	; (8010878 <UART_SetConfig+0x9c8>)
 8010588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801058c:	461a      	mov	r2, r3
 801058e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010590:	fbb3 f3f2 	udiv	r3, r3, r2
 8010594:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	685a      	ldr	r2, [r3, #4]
 801059a:	4613      	mov	r3, r2
 801059c:	005b      	lsls	r3, r3, #1
 801059e:	4413      	add	r3, r2
 80105a0:	6a3a      	ldr	r2, [r7, #32]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d305      	bcc.n	80105b2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80105ac:	6a3a      	ldr	r2, [r7, #32]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d903      	bls.n	80105ba <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80105b2:	2301      	movs	r3, #1
 80105b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80105b8:	e1bd      	b.n	8010936 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80105ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105bc:	4618      	mov	r0, r3
 80105be:	f04f 0100 	mov.w	r1, #0
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c6:	4aac      	ldr	r2, [pc, #688]	; (8010878 <UART_SetConfig+0x9c8>)
 80105c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	f04f 0300 	mov.w	r3, #0
 80105d2:	f7ef fedd 	bl	8000390 <__aeabi_uldivmod>
 80105d6:	4602      	mov	r2, r0
 80105d8:	460b      	mov	r3, r1
 80105da:	4610      	mov	r0, r2
 80105dc:	4619      	mov	r1, r3
 80105de:	f04f 0200 	mov.w	r2, #0
 80105e2:	f04f 0300 	mov.w	r3, #0
 80105e6:	020b      	lsls	r3, r1, #8
 80105e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80105ec:	0202      	lsls	r2, r0, #8
 80105ee:	6879      	ldr	r1, [r7, #4]
 80105f0:	6849      	ldr	r1, [r1, #4]
 80105f2:	0849      	lsrs	r1, r1, #1
 80105f4:	4608      	mov	r0, r1
 80105f6:	f04f 0100 	mov.w	r1, #0
 80105fa:	1814      	adds	r4, r2, r0
 80105fc:	eb43 0501 	adc.w	r5, r3, r1
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	461a      	mov	r2, r3
 8010606:	f04f 0300 	mov.w	r3, #0
 801060a:	4620      	mov	r0, r4
 801060c:	4629      	mov	r1, r5
 801060e:	f7ef febf 	bl	8000390 <__aeabi_uldivmod>
 8010612:	4602      	mov	r2, r0
 8010614:	460b      	mov	r3, r1
 8010616:	4613      	mov	r3, r2
 8010618:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801061a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010620:	d308      	bcc.n	8010634 <UART_SetConfig+0x784>
 8010622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010628:	d204      	bcs.n	8010634 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010630:	60da      	str	r2, [r3, #12]
 8010632:	e180      	b.n	8010936 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8010634:	2301      	movs	r3, #1
 8010636:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801063a:	e17c      	b.n	8010936 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	69db      	ldr	r3, [r3, #28]
 8010640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010644:	f040 80bf 	bne.w	80107c6 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8010648:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801064c:	2b20      	cmp	r3, #32
 801064e:	dc49      	bgt.n	80106e4 <UART_SetConfig+0x834>
 8010650:	2b00      	cmp	r3, #0
 8010652:	db7c      	blt.n	801074e <UART_SetConfig+0x89e>
 8010654:	2b20      	cmp	r3, #32
 8010656:	d87a      	bhi.n	801074e <UART_SetConfig+0x89e>
 8010658:	a201      	add	r2, pc, #4	; (adr r2, 8010660 <UART_SetConfig+0x7b0>)
 801065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801065e:	bf00      	nop
 8010660:	080106eb 	.word	0x080106eb
 8010664:	080106f3 	.word	0x080106f3
 8010668:	0801074f 	.word	0x0801074f
 801066c:	0801074f 	.word	0x0801074f
 8010670:	080106fb 	.word	0x080106fb
 8010674:	0801074f 	.word	0x0801074f
 8010678:	0801074f 	.word	0x0801074f
 801067c:	0801074f 	.word	0x0801074f
 8010680:	0801070b 	.word	0x0801070b
 8010684:	0801074f 	.word	0x0801074f
 8010688:	0801074f 	.word	0x0801074f
 801068c:	0801074f 	.word	0x0801074f
 8010690:	0801074f 	.word	0x0801074f
 8010694:	0801074f 	.word	0x0801074f
 8010698:	0801074f 	.word	0x0801074f
 801069c:	0801074f 	.word	0x0801074f
 80106a0:	0801071b 	.word	0x0801071b
 80106a4:	0801074f 	.word	0x0801074f
 80106a8:	0801074f 	.word	0x0801074f
 80106ac:	0801074f 	.word	0x0801074f
 80106b0:	0801074f 	.word	0x0801074f
 80106b4:	0801074f 	.word	0x0801074f
 80106b8:	0801074f 	.word	0x0801074f
 80106bc:	0801074f 	.word	0x0801074f
 80106c0:	0801074f 	.word	0x0801074f
 80106c4:	0801074f 	.word	0x0801074f
 80106c8:	0801074f 	.word	0x0801074f
 80106cc:	0801074f 	.word	0x0801074f
 80106d0:	0801074f 	.word	0x0801074f
 80106d4:	0801074f 	.word	0x0801074f
 80106d8:	0801074f 	.word	0x0801074f
 80106dc:	0801074f 	.word	0x0801074f
 80106e0:	08010741 	.word	0x08010741
 80106e4:	2b40      	cmp	r3, #64	; 0x40
 80106e6:	d02e      	beq.n	8010746 <UART_SetConfig+0x896>
 80106e8:	e031      	b.n	801074e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80106ea:	f7fb f8b9 	bl	800b860 <HAL_RCC_GetPCLK1Freq>
 80106ee:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80106f0:	e033      	b.n	801075a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80106f2:	f7fb f8cb 	bl	800b88c <HAL_RCC_GetPCLK2Freq>
 80106f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80106f8:	e02f      	b.n	801075a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106fa:	f107 0314 	add.w	r3, r7, #20
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fc f830 	bl	800c764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010708:	e027      	b.n	801075a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801070a:	f107 0308 	add.w	r3, r7, #8
 801070e:	4618      	mov	r0, r3
 8010710:	f7fc f97c 	bl	800ca0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010718:	e01f      	b.n	801075a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801071a:	4b58      	ldr	r3, [pc, #352]	; (801087c <UART_SetConfig+0x9cc>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f003 0320 	and.w	r3, r3, #32
 8010722:	2b00      	cmp	r3, #0
 8010724:	d009      	beq.n	801073a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010726:	4b55      	ldr	r3, [pc, #340]	; (801087c <UART_SetConfig+0x9cc>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	08db      	lsrs	r3, r3, #3
 801072c:	f003 0303 	and.w	r3, r3, #3
 8010730:	4a53      	ldr	r2, [pc, #332]	; (8010880 <UART_SetConfig+0x9d0>)
 8010732:	fa22 f303 	lsr.w	r3, r2, r3
 8010736:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010738:	e00f      	b.n	801075a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 801073a:	4b51      	ldr	r3, [pc, #324]	; (8010880 <UART_SetConfig+0x9d0>)
 801073c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801073e:	e00c      	b.n	801075a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010740:	4b4c      	ldr	r3, [pc, #304]	; (8010874 <UART_SetConfig+0x9c4>)
 8010742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010744:	e009      	b.n	801075a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801074a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801074c:	e005      	b.n	801075a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 801074e:	2300      	movs	r3, #0
 8010750:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010752:	2301      	movs	r3, #1
 8010754:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010758:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801075a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075c:	2b00      	cmp	r3, #0
 801075e:	f000 80ea 	beq.w	8010936 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010766:	4a44      	ldr	r2, [pc, #272]	; (8010878 <UART_SetConfig+0x9c8>)
 8010768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801076c:	461a      	mov	r2, r3
 801076e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010770:	fbb3 f3f2 	udiv	r3, r3, r2
 8010774:	005a      	lsls	r2, r3, #1
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	685b      	ldr	r3, [r3, #4]
 801077a:	085b      	lsrs	r3, r3, #1
 801077c:	441a      	add	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	fbb2 f3f3 	udiv	r3, r2, r3
 8010786:	b29b      	uxth	r3, r3
 8010788:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801078a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801078c:	2b0f      	cmp	r3, #15
 801078e:	d916      	bls.n	80107be <UART_SetConfig+0x90e>
 8010790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010796:	d212      	bcs.n	80107be <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079a:	b29b      	uxth	r3, r3
 801079c:	f023 030f 	bic.w	r3, r3, #15
 80107a0:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80107a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a4:	085b      	lsrs	r3, r3, #1
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	f003 0307 	and.w	r3, r3, #7
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80107b0:	4313      	orrs	r3, r2
 80107b2:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80107ba:	60da      	str	r2, [r3, #12]
 80107bc:	e0bb      	b.n	8010936 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80107be:	2301      	movs	r3, #1
 80107c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80107c4:	e0b7      	b.n	8010936 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80107c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80107ca:	2b20      	cmp	r3, #32
 80107cc:	dc4a      	bgt.n	8010864 <UART_SetConfig+0x9b4>
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	f2c0 8086 	blt.w	80108e0 <UART_SetConfig+0xa30>
 80107d4:	2b20      	cmp	r3, #32
 80107d6:	f200 8083 	bhi.w	80108e0 <UART_SetConfig+0xa30>
 80107da:	a201      	add	r2, pc, #4	; (adr r2, 80107e0 <UART_SetConfig+0x930>)
 80107dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107e0:	0801086b 	.word	0x0801086b
 80107e4:	08010885 	.word	0x08010885
 80107e8:	080108e1 	.word	0x080108e1
 80107ec:	080108e1 	.word	0x080108e1
 80107f0:	0801088d 	.word	0x0801088d
 80107f4:	080108e1 	.word	0x080108e1
 80107f8:	080108e1 	.word	0x080108e1
 80107fc:	080108e1 	.word	0x080108e1
 8010800:	0801089d 	.word	0x0801089d
 8010804:	080108e1 	.word	0x080108e1
 8010808:	080108e1 	.word	0x080108e1
 801080c:	080108e1 	.word	0x080108e1
 8010810:	080108e1 	.word	0x080108e1
 8010814:	080108e1 	.word	0x080108e1
 8010818:	080108e1 	.word	0x080108e1
 801081c:	080108e1 	.word	0x080108e1
 8010820:	080108ad 	.word	0x080108ad
 8010824:	080108e1 	.word	0x080108e1
 8010828:	080108e1 	.word	0x080108e1
 801082c:	080108e1 	.word	0x080108e1
 8010830:	080108e1 	.word	0x080108e1
 8010834:	080108e1 	.word	0x080108e1
 8010838:	080108e1 	.word	0x080108e1
 801083c:	080108e1 	.word	0x080108e1
 8010840:	080108e1 	.word	0x080108e1
 8010844:	080108e1 	.word	0x080108e1
 8010848:	080108e1 	.word	0x080108e1
 801084c:	080108e1 	.word	0x080108e1
 8010850:	080108e1 	.word	0x080108e1
 8010854:	080108e1 	.word	0x080108e1
 8010858:	080108e1 	.word	0x080108e1
 801085c:	080108e1 	.word	0x080108e1
 8010860:	080108d3 	.word	0x080108d3
 8010864:	2b40      	cmp	r3, #64	; 0x40
 8010866:	d037      	beq.n	80108d8 <UART_SetConfig+0xa28>
 8010868:	e03a      	b.n	80108e0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801086a:	f7fa fff9 	bl	800b860 <HAL_RCC_GetPCLK1Freq>
 801086e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010870:	e03c      	b.n	80108ec <UART_SetConfig+0xa3c>
 8010872:	bf00      	nop
 8010874:	003d0900 	.word	0x003d0900
 8010878:	08014d4c 	.word	0x08014d4c
 801087c:	58024400 	.word	0x58024400
 8010880:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010884:	f7fb f802 	bl	800b88c <HAL_RCC_GetPCLK2Freq>
 8010888:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801088a:	e02f      	b.n	80108ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801088c:	f107 0314 	add.w	r3, r7, #20
 8010890:	4618      	mov	r0, r3
 8010892:	f7fb ff67 	bl	800c764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801089a:	e027      	b.n	80108ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801089c:	f107 0308 	add.w	r3, r7, #8
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fc f8b3 	bl	800ca0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108aa:	e01f      	b.n	80108ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80108ac:	4b2c      	ldr	r3, [pc, #176]	; (8010960 <UART_SetConfig+0xab0>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	f003 0320 	and.w	r3, r3, #32
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d009      	beq.n	80108cc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80108b8:	4b29      	ldr	r3, [pc, #164]	; (8010960 <UART_SetConfig+0xab0>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	08db      	lsrs	r3, r3, #3
 80108be:	f003 0303 	and.w	r3, r3, #3
 80108c2:	4a28      	ldr	r2, [pc, #160]	; (8010964 <UART_SetConfig+0xab4>)
 80108c4:	fa22 f303 	lsr.w	r3, r2, r3
 80108c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80108ca:	e00f      	b.n	80108ec <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80108cc:	4b25      	ldr	r3, [pc, #148]	; (8010964 <UART_SetConfig+0xab4>)
 80108ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108d0:	e00c      	b.n	80108ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108d2:	4b25      	ldr	r3, [pc, #148]	; (8010968 <UART_SetConfig+0xab8>)
 80108d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108d6:	e009      	b.n	80108ec <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108de:	e005      	b.n	80108ec <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80108e0:	2300      	movs	r3, #0
 80108e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80108e4:	2301      	movs	r3, #1
 80108e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80108ea:	bf00      	nop
    }

    if (pclk != 0U)
 80108ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d021      	beq.n	8010936 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f6:	4a1d      	ldr	r2, [pc, #116]	; (801096c <UART_SetConfig+0xabc>)
 80108f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108fc:	461a      	mov	r2, r3
 80108fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010900:	fbb3 f2f2 	udiv	r2, r3, r2
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	685b      	ldr	r3, [r3, #4]
 8010908:	085b      	lsrs	r3, r3, #1
 801090a:	441a      	add	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	fbb2 f3f3 	udiv	r3, r2, r3
 8010914:	b29b      	uxth	r3, r3
 8010916:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801091a:	2b0f      	cmp	r3, #15
 801091c:	d908      	bls.n	8010930 <UART_SetConfig+0xa80>
 801091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010924:	d204      	bcs.n	8010930 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801092c:	60da      	str	r2, [r3, #12]
 801092e:	e002      	b.n	8010936 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8010930:	2301      	movs	r3, #1
 8010932:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2201      	movs	r2, #1
 801093a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2201      	movs	r2, #1
 8010942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2200      	movs	r2, #0
 801094a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010952:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010956:	4618      	mov	r0, r3
 8010958:	3738      	adds	r7, #56	; 0x38
 801095a:	46bd      	mov	sp, r7
 801095c:	bdb0      	pop	{r4, r5, r7, pc}
 801095e:	bf00      	nop
 8010960:	58024400 	.word	0x58024400
 8010964:	03d09000 	.word	0x03d09000
 8010968:	003d0900 	.word	0x003d0900
 801096c:	08014d4c 	.word	0x08014d4c

08010970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010970:	b480      	push	{r7}
 8010972:	b083      	sub	sp, #12
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801097c:	f003 0301 	and.w	r3, r3, #1
 8010980:	2b00      	cmp	r3, #0
 8010982:	d00a      	beq.n	801099a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	430a      	orrs	r2, r1
 8010998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801099e:	f003 0302 	and.w	r3, r3, #2
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d00a      	beq.n	80109bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	430a      	orrs	r2, r1
 80109ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109c0:	f003 0304 	and.w	r3, r3, #4
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00a      	beq.n	80109de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	430a      	orrs	r2, r1
 80109dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e2:	f003 0308 	and.w	r3, r3, #8
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00a      	beq.n	8010a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	430a      	orrs	r2, r1
 80109fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a04:	f003 0310 	and.w	r3, r3, #16
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00a      	beq.n	8010a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	430a      	orrs	r2, r1
 8010a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a26:	f003 0320 	and.w	r3, r3, #32
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00a      	beq.n	8010a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	430a      	orrs	r2, r1
 8010a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d01a      	beq.n	8010a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	430a      	orrs	r2, r1
 8010a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a6e:	d10a      	bne.n	8010a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	430a      	orrs	r2, r1
 8010a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d00a      	beq.n	8010aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	430a      	orrs	r2, r1
 8010aa6:	605a      	str	r2, [r3, #4]
  }
}
 8010aa8:	bf00      	nop
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b086      	sub	sp, #24
 8010ab8:	af02      	add	r7, sp, #8
 8010aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010ac4:	f7f4 fb4a 	bl	800515c <HAL_GetTick>
 8010ac8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f003 0308 	and.w	r3, r3, #8
 8010ad4:	2b08      	cmp	r3, #8
 8010ad6:	d10e      	bne.n	8010af6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010adc:	9300      	str	r3, [sp, #0]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f000 f82f 	bl	8010b4a <UART_WaitOnFlagUntilTimeout>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d001      	beq.n	8010af6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010af2:	2303      	movs	r3, #3
 8010af4:	e025      	b.n	8010b42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f003 0304 	and.w	r3, r3, #4
 8010b00:	2b04      	cmp	r3, #4
 8010b02:	d10e      	bne.n	8010b22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010b08:	9300      	str	r3, [sp, #0]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f000 f819 	bl	8010b4a <UART_WaitOnFlagUntilTimeout>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d001      	beq.n	8010b22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b1e:	2303      	movs	r3, #3
 8010b20:	e00f      	b.n	8010b42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2220      	movs	r2, #32
 8010b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2220      	movs	r2, #32
 8010b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2200      	movs	r2, #0
 8010b36:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010b40:	2300      	movs	r3, #0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3710      	adds	r7, #16
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}

08010b4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b4a:	b580      	push	{r7, lr}
 8010b4c:	b084      	sub	sp, #16
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	60f8      	str	r0, [r7, #12]
 8010b52:	60b9      	str	r1, [r7, #8]
 8010b54:	603b      	str	r3, [r7, #0]
 8010b56:	4613      	mov	r3, r2
 8010b58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b5a:	e062      	b.n	8010c22 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b62:	d05e      	beq.n	8010c22 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b64:	f7f4 fafa 	bl	800515c <HAL_GetTick>
 8010b68:	4602      	mov	r2, r0
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	1ad3      	subs	r3, r2, r3
 8010b6e:	69ba      	ldr	r2, [r7, #24]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d302      	bcc.n	8010b7a <UART_WaitOnFlagUntilTimeout+0x30>
 8010b74:	69bb      	ldr	r3, [r7, #24]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d11d      	bne.n	8010bb6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b88:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	689a      	ldr	r2, [r3, #8]
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f022 0201 	bic.w	r2, r2, #1
 8010b98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2220      	movs	r2, #32
 8010b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2220      	movs	r2, #32
 8010ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2200      	movs	r2, #0
 8010bae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010bb2:	2303      	movs	r3, #3
 8010bb4:	e045      	b.n	8010c42 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f003 0304 	and.w	r3, r3, #4
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d02e      	beq.n	8010c22 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	69db      	ldr	r3, [r3, #28]
 8010bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010bd2:	d126      	bne.n	8010c22 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010bdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010bec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	689a      	ldr	r2, [r3, #8]
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f022 0201 	bic.w	r2, r2, #1
 8010bfc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2220      	movs	r2, #32
 8010c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	2220      	movs	r2, #32
 8010c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2220      	movs	r2, #32
 8010c12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010c1e:	2303      	movs	r3, #3
 8010c20:	e00f      	b.n	8010c42 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	69da      	ldr	r2, [r3, #28]
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	4013      	ands	r3, r2
 8010c2c:	68ba      	ldr	r2, [r7, #8]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	bf0c      	ite	eq
 8010c32:	2301      	moveq	r3, #1
 8010c34:	2300      	movne	r3, #0
 8010c36:	b2db      	uxtb	r3, r3
 8010c38:	461a      	mov	r2, r3
 8010c3a:	79fb      	ldrb	r3, [r7, #7]
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d08d      	beq.n	8010b5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c40:	2300      	movs	r3, #0
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3710      	adds	r7, #16
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
	...

08010c4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b085      	sub	sp, #20
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	60f8      	str	r0, [r7, #12]
 8010c54:	60b9      	str	r1, [r7, #8]
 8010c56:	4613      	mov	r3, r2
 8010c58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	68ba      	ldr	r2, [r7, #8]
 8010c5e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	88fa      	ldrh	r2, [r7, #6]
 8010c64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	88fa      	ldrh	r2, [r7, #6]
 8010c6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	2200      	movs	r2, #0
 8010c74:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	689b      	ldr	r3, [r3, #8]
 8010c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c7e:	d10e      	bne.n	8010c9e <UART_Start_Receive_IT+0x52>
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	691b      	ldr	r3, [r3, #16]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d105      	bne.n	8010c94 <UART_Start_Receive_IT+0x48>
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010c8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010c92:	e02d      	b.n	8010cf0 <UART_Start_Receive_IT+0xa4>
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	22ff      	movs	r2, #255	; 0xff
 8010c98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010c9c:	e028      	b.n	8010cf0 <UART_Start_Receive_IT+0xa4>
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	689b      	ldr	r3, [r3, #8]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d10d      	bne.n	8010cc2 <UART_Start_Receive_IT+0x76>
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	691b      	ldr	r3, [r3, #16]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d104      	bne.n	8010cb8 <UART_Start_Receive_IT+0x6c>
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	22ff      	movs	r2, #255	; 0xff
 8010cb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010cb6:	e01b      	b.n	8010cf0 <UART_Start_Receive_IT+0xa4>
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	227f      	movs	r2, #127	; 0x7f
 8010cbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010cc0:	e016      	b.n	8010cf0 <UART_Start_Receive_IT+0xa4>
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	689b      	ldr	r3, [r3, #8]
 8010cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010cca:	d10d      	bne.n	8010ce8 <UART_Start_Receive_IT+0x9c>
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	691b      	ldr	r3, [r3, #16]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d104      	bne.n	8010cde <UART_Start_Receive_IT+0x92>
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	227f      	movs	r2, #127	; 0x7f
 8010cd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010cdc:	e008      	b.n	8010cf0 <UART_Start_Receive_IT+0xa4>
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	223f      	movs	r2, #63	; 0x3f
 8010ce2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010ce6:	e003      	b.n	8010cf0 <UART_Start_Receive_IT+0xa4>
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	2200      	movs	r2, #0
 8010cec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	2222      	movs	r2, #34	; 0x22
 8010cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	689a      	ldr	r2, [r3, #8]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f042 0201 	orr.w	r2, r2, #1
 8010d0e:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d18:	d12a      	bne.n	8010d70 <UART_Start_Receive_IT+0x124>
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010d20:	88fa      	ldrh	r2, [r7, #6]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d324      	bcc.n	8010d70 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	689b      	ldr	r3, [r3, #8]
 8010d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d2e:	d107      	bne.n	8010d40 <UART_Start_Receive_IT+0xf4>
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	691b      	ldr	r3, [r3, #16]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d103      	bne.n	8010d40 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	4a1f      	ldr	r2, [pc, #124]	; (8010db8 <UART_Start_Receive_IT+0x16c>)
 8010d3c:	671a      	str	r2, [r3, #112]	; 0x70
 8010d3e:	e002      	b.n	8010d46 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	4a1e      	ldr	r2, [pc, #120]	; (8010dbc <UART_Start_Receive_IT+0x170>)
 8010d44:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010d5c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	689a      	ldr	r2, [r3, #8]
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010d6c:	609a      	str	r2, [r3, #8]
 8010d6e:	e01b      	b.n	8010da8 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	689b      	ldr	r3, [r3, #8]
 8010d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d78:	d107      	bne.n	8010d8a <UART_Start_Receive_IT+0x13e>
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	691b      	ldr	r3, [r3, #16]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d103      	bne.n	8010d8a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	4a0e      	ldr	r2, [pc, #56]	; (8010dc0 <UART_Start_Receive_IT+0x174>)
 8010d86:	671a      	str	r2, [r3, #112]	; 0x70
 8010d88:	e002      	b.n	8010d90 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	4a0d      	ldr	r2, [pc, #52]	; (8010dc4 <UART_Start_Receive_IT+0x178>)
 8010d8e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	2200      	movs	r2, #0
 8010d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	681a      	ldr	r2, [r3, #0]
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8010da6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8010da8:	2300      	movs	r3, #0
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3714      	adds	r7, #20
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
 8010db6:	bf00      	nop
 8010db8:	08011515 	.word	0x08011515
 8010dbc:	08011311 	.word	0x08011311
 8010dc0:	08011237 	.word	0x08011237
 8010dc4:	0801115f 	.word	0x0801115f

08010dc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	4613      	mov	r3, r2
 8010dd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	68ba      	ldr	r2, [r7, #8]
 8010dda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	88fa      	ldrh	r2, [r7, #6]
 8010de0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	2200      	movs	r2, #0
 8010de8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	2222      	movs	r2, #34	; 0x22
 8010df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d02c      	beq.n	8010e56 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e00:	4a25      	ldr	r2, [pc, #148]	; (8010e98 <UART_Start_Receive_DMA+0xd0>)
 8010e02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e08:	4a24      	ldr	r2, [pc, #144]	; (8010e9c <UART_Start_Receive_DMA+0xd4>)
 8010e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e10:	4a23      	ldr	r2, [pc, #140]	; (8010ea0 <UART_Start_Receive_DMA+0xd8>)
 8010e12:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e18:	2200      	movs	r2, #0
 8010e1a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	3324      	adds	r3, #36	; 0x24
 8010e26:	4619      	mov	r1, r3
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	88fb      	ldrh	r3, [r7, #6]
 8010e30:	f7f4 fe3c 	bl	8005aac <HAL_DMA_Start_IT>
 8010e34:	4603      	mov	r3, r0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d00d      	beq.n	8010e56 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	2210      	movs	r2, #16
 8010e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2200      	movs	r2, #0
 8010e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2220      	movs	r2, #32
 8010e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 8010e52:	2301      	movs	r3, #1
 8010e54:	e01c      	b.n	8010e90 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010e6c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	689a      	ldr	r2, [r3, #8]
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	f042 0201 	orr.w	r2, r2, #1
 8010e7c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	689a      	ldr	r2, [r3, #8]
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010e8c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8010e8e:	2300      	movs	r3, #0
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	3710      	adds	r7, #16
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}
 8010e98:	08010fb1 	.word	0x08010fb1
 8010e9c:	08011047 	.word	0x08011047
 8010ea0:	0801107f 	.word	0x0801107f

08010ea4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b083      	sub	sp, #12
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010eba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	689a      	ldr	r2, [r3, #8]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010eca:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2220      	movs	r2, #32
 8010ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8010ed4:	bf00      	nop
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr

08010ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b083      	sub	sp, #12
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010ef6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	6899      	ldr	r1, [r3, #8]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681a      	ldr	r2, [r3, #0]
 8010f02:	4b0f      	ldr	r3, [pc, #60]	; (8010f40 <UART_EndRxTransfer+0x60>)
 8010f04:	400b      	ands	r3, r1
 8010f06:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d107      	bne.n	8010f20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	681a      	ldr	r2, [r3, #0]
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	f022 0210 	bic.w	r2, r2, #16
 8010f1e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2220      	movs	r2, #32
 8010f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2200      	movs	r2, #0
 8010f32:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010f34:	bf00      	nop
 8010f36:	370c      	adds	r7, #12
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr
 8010f40:	effffffe 	.word	0xeffffffe

08010f44 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b084      	sub	sp, #16
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f50:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	69db      	ldr	r3, [r3, #28]
 8010f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f5a:	d014      	beq.n	8010f86 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	689a      	ldr	r2, [r3, #8]
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010f72:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	681a      	ldr	r2, [r3, #0]
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f82:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010f84:	e002      	b.n	8010f8c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f7fe ff5e 	bl	800fe48 <HAL_UART_TxCpltCallback>
}
 8010f8c:	bf00      	nop
 8010f8e:	3710      	adds	r7, #16
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}

08010f94 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010fa2:	68f8      	ldr	r0, [r7, #12]
 8010fa4:	f7fe ff5a 	bl	800fe5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010fa8:	bf00      	nop
 8010faa:	3710      	adds	r7, #16
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd80      	pop	{r7, pc}

08010fb0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b084      	sub	sp, #16
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fbc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	69db      	ldr	r3, [r3, #28]
 8010fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fc6:	d02b      	beq.n	8011020 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	681a      	ldr	r2, [r3, #0]
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010fde:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	689a      	ldr	r2, [r3, #8]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	f022 0201 	bic.w	r2, r2, #1
 8010fee:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	689a      	ldr	r2, [r3, #8]
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ffe:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	2220      	movs	r2, #32
 8011004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801100c:	2b01      	cmp	r3, #1
 801100e:	d107      	bne.n	8011020 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	681a      	ldr	r2, [r3, #0]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	f022 0210 	bic.w	r2, r2, #16
 801101e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011024:	2b01      	cmp	r3, #1
 8011026:	d107      	bne.n	8011038 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801102e:	4619      	mov	r1, r3
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	f7fe ff31 	bl	800fe98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011036:	e002      	b.n	801103e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8011038:	68f8      	ldr	r0, [r7, #12]
 801103a:	f7f3 f939 	bl	80042b0 <HAL_UART_RxCpltCallback>
}
 801103e:	bf00      	nop
 8011040:	3710      	adds	r7, #16
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}

08011046 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011046:	b580      	push	{r7, lr}
 8011048:	b084      	sub	sp, #16
 801104a:	af00      	add	r7, sp, #0
 801104c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011052:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011058:	2b01      	cmp	r3, #1
 801105a:	d109      	bne.n	8011070 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011062:	085b      	lsrs	r3, r3, #1
 8011064:	b29b      	uxth	r3, r3
 8011066:	4619      	mov	r1, r3
 8011068:	68f8      	ldr	r0, [r7, #12]
 801106a:	f7fe ff15 	bl	800fe98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801106e:	e002      	b.n	8011076 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8011070:	68f8      	ldr	r0, [r7, #12]
 8011072:	f7fe fefd 	bl	800fe70 <HAL_UART_RxHalfCpltCallback>
}
 8011076:	bf00      	nop
 8011078:	3710      	adds	r7, #16
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}

0801107e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801107e:	b580      	push	{r7, lr}
 8011080:	b086      	sub	sp, #24
 8011082:	af00      	add	r7, sp, #0
 8011084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801108a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011092:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801109a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	689b      	ldr	r3, [r3, #8]
 80110a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110a6:	2b80      	cmp	r3, #128	; 0x80
 80110a8:	d109      	bne.n	80110be <UART_DMAError+0x40>
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	2b21      	cmp	r3, #33	; 0x21
 80110ae:	d106      	bne.n	80110be <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	2200      	movs	r2, #0
 80110b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80110b8:	6978      	ldr	r0, [r7, #20]
 80110ba:	f7ff fef3 	bl	8010ea4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	689b      	ldr	r3, [r3, #8]
 80110c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110c8:	2b40      	cmp	r3, #64	; 0x40
 80110ca:	d109      	bne.n	80110e0 <UART_DMAError+0x62>
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	2b22      	cmp	r3, #34	; 0x22
 80110d0:	d106      	bne.n	80110e0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	2200      	movs	r2, #0
 80110d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80110da:	6978      	ldr	r0, [r7, #20]
 80110dc:	f7ff ff00 	bl	8010ee0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110e6:	f043 0210 	orr.w	r2, r3, #16
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80110f0:	6978      	ldr	r0, [r7, #20]
 80110f2:	f7fe fec7 	bl	800fe84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80110f6:	bf00      	nop
 80110f8:	3718      	adds	r7, #24
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}

080110fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80110fe:	b580      	push	{r7, lr}
 8011100:	b084      	sub	sp, #16
 8011102:	af00      	add	r7, sp, #0
 8011104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801110a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	2200      	movs	r2, #0
 8011110:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2200      	movs	r2, #0
 8011118:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	f7fe feb1 	bl	800fe84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011122:	bf00      	nop
 8011124:	3710      	adds	r7, #16
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}

0801112a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801112a:	b580      	push	{r7, lr}
 801112c:	b082      	sub	sp, #8
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	681a      	ldr	r2, [r3, #0]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011140:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2220      	movs	r2, #32
 8011146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2200      	movs	r2, #0
 801114e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f7fe fe79 	bl	800fe48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011156:	bf00      	nop
 8011158:	3708      	adds	r7, #8
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}

0801115e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801115e:	b580      	push	{r7, lr}
 8011160:	b084      	sub	sp, #16
 8011162:	af00      	add	r7, sp, #0
 8011164:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801116c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011174:	2b22      	cmp	r3, #34	; 0x22
 8011176:	d152      	bne.n	801121e <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801117e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011180:	89bb      	ldrh	r3, [r7, #12]
 8011182:	b2d9      	uxtb	r1, r3
 8011184:	89fb      	ldrh	r3, [r7, #14]
 8011186:	b2da      	uxtb	r2, r3
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801118c:	400a      	ands	r2, r1
 801118e:	b2d2      	uxtb	r2, r2
 8011190:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011196:	1c5a      	adds	r2, r3, #1
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	3b01      	subs	r3, #1
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d139      	bne.n	801122e <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80111c8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	689a      	ldr	r2, [r3, #8]
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	f022 0201 	bic.w	r2, r2, #1
 80111d8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2220      	movs	r2, #32
 80111de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2200      	movs	r2, #0
 80111e6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d10f      	bne.n	8011210 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	681a      	ldr	r2, [r3, #0]
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	f022 0210 	bic.w	r2, r2, #16
 80111fe:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011206:	4619      	mov	r1, r3
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f7fe fe45 	bl	800fe98 <HAL_UARTEx_RxEventCallback>
 801120e:	e002      	b.n	8011216 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8011210:	6878      	ldr	r0, [r7, #4]
 8011212:	f7f3 f84d 	bl	80042b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801121c:	e007      	b.n	801122e <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	699a      	ldr	r2, [r3, #24]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f042 0208 	orr.w	r2, r2, #8
 801122c:	619a      	str	r2, [r3, #24]
}
 801122e:	bf00      	nop
 8011230:	3710      	adds	r7, #16
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}

08011236 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011236:	b580      	push	{r7, lr}
 8011238:	b084      	sub	sp, #16
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011244:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801124c:	2b22      	cmp	r3, #34	; 0x22
 801124e:	d152      	bne.n	80112f6 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011256:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801125c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 801125e:	89ba      	ldrh	r2, [r7, #12]
 8011260:	89fb      	ldrh	r3, [r7, #14]
 8011262:	4013      	ands	r3, r2
 8011264:	b29a      	uxth	r2, r3
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801126e:	1c9a      	adds	r2, r3, #2
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801127a:	b29b      	uxth	r3, r3
 801127c:	3b01      	subs	r3, #1
 801127e:	b29a      	uxth	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801128c:	b29b      	uxth	r3, r3
 801128e:	2b00      	cmp	r3, #0
 8011290:	d139      	bne.n	8011306 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80112a0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	689a      	ldr	r2, [r3, #8]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	f022 0201 	bic.w	r2, r2, #1
 80112b0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2220      	movs	r2, #32
 80112b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2200      	movs	r2, #0
 80112be:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	d10f      	bne.n	80112e8 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	681a      	ldr	r2, [r3, #0]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	f022 0210 	bic.w	r2, r2, #16
 80112d6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80112de:	4619      	mov	r1, r3
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f7fe fdd9 	bl	800fe98 <HAL_UARTEx_RxEventCallback>
 80112e6:	e002      	b.n	80112ee <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7f2 ffe1 	bl	80042b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2200      	movs	r2, #0
 80112f2:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80112f4:	e007      	b.n	8011306 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	699a      	ldr	r2, [r3, #24]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	f042 0208 	orr.w	r2, r2, #8
 8011304:	619a      	str	r2, [r3, #24]
}
 8011306:	bf00      	nop
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
	...

08011310 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b088      	sub	sp, #32
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801131e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	69db      	ldr	r3, [r3, #28]
 8011326:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	689b      	ldr	r3, [r3, #8]
 8011336:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801133e:	2b22      	cmp	r3, #34	; 0x22
 8011340:	f040 80d8 	bne.w	80114f4 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801134a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801134c:	e0a8      	b.n	80114a0 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011354:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011356:	89bb      	ldrh	r3, [r7, #12]
 8011358:	b2d9      	uxtb	r1, r3
 801135a:	8b7b      	ldrh	r3, [r7, #26]
 801135c:	b2da      	uxtb	r2, r3
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011362:	400a      	ands	r2, r1
 8011364:	b2d2      	uxtb	r2, r2
 8011366:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801136c:	1c5a      	adds	r2, r3, #1
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011378:	b29b      	uxth	r3, r3
 801137a:	3b01      	subs	r3, #1
 801137c:	b29a      	uxth	r2, r3
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	69db      	ldr	r3, [r3, #28]
 801138a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	f003 0307 	and.w	r3, r3, #7
 8011392:	2b00      	cmp	r3, #0
 8011394:	d04d      	beq.n	8011432 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011396:	69fb      	ldr	r3, [r7, #28]
 8011398:	f003 0301 	and.w	r3, r3, #1
 801139c:	2b00      	cmp	r3, #0
 801139e:	d010      	beq.n	80113c2 <UART_RxISR_8BIT_FIFOEN+0xb2>
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00b      	beq.n	80113c2 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	2201      	movs	r2, #1
 80113b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113b8:	f043 0201 	orr.w	r2, r3, #1
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	f003 0302 	and.w	r3, r3, #2
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d010      	beq.n	80113ee <UART_RxISR_8BIT_FIFOEN+0xde>
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	f003 0301 	and.w	r3, r3, #1
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d00b      	beq.n	80113ee <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2202      	movs	r2, #2
 80113dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113e4:	f043 0204 	orr.w	r2, r3, #4
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80113ee:	69fb      	ldr	r3, [r7, #28]
 80113f0:	f003 0304 	and.w	r3, r3, #4
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d010      	beq.n	801141a <UART_RxISR_8BIT_FIFOEN+0x10a>
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	f003 0301 	and.w	r3, r3, #1
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d00b      	beq.n	801141a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	2204      	movs	r2, #4
 8011408:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011410:	f043 0202 	orr.w	r2, r3, #2
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011420:	2b00      	cmp	r3, #0
 8011422:	d006      	beq.n	8011432 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f7fe fd2d 	bl	800fe84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	2200      	movs	r2, #0
 801142e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011438:	b29b      	uxth	r3, r3
 801143a:	2b00      	cmp	r3, #0
 801143c:	d130      	bne.n	80114a0 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	681a      	ldr	r2, [r3, #0]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801144c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	6899      	ldr	r1, [r3, #8]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	4b2c      	ldr	r3, [pc, #176]	; (801150c <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 801145a:	400b      	ands	r3, r1
 801145c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2220      	movs	r2, #32
 8011462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	2200      	movs	r2, #0
 801146a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011470:	2b01      	cmp	r3, #1
 8011472:	d10f      	bne.n	8011494 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f022 0210 	bic.w	r2, r2, #16
 8011482:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801148a:	4619      	mov	r1, r3
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f7fe fd03 	bl	800fe98 <HAL_UARTEx_RxEventCallback>
 8011492:	e002      	b.n	801149a <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f7f2 ff0b 	bl	80042b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2200      	movs	r2, #0
 801149e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80114a0:	89fb      	ldrh	r3, [r7, #14]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d005      	beq.n	80114b2 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 80114a6:	69fb      	ldr	r3, [r7, #28]
 80114a8:	f003 0320 	and.w	r3, r3, #32
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	f47f af4e 	bne.w	801134e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80114b8:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80114ba:	897b      	ldrh	r3, [r7, #10]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d021      	beq.n	8011504 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80114c6:	897a      	ldrh	r2, [r7, #10]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d21b      	bcs.n	8011504 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	689a      	ldr	r2, [r3, #8]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80114da:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	4a0c      	ldr	r2, [pc, #48]	; (8011510 <UART_RxISR_8BIT_FIFOEN+0x200>)
 80114e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f042 0220 	orr.w	r2, r2, #32
 80114f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80114f2:	e007      	b.n	8011504 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	699a      	ldr	r2, [r3, #24]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	f042 0208 	orr.w	r2, r2, #8
 8011502:	619a      	str	r2, [r3, #24]
}
 8011504:	bf00      	nop
 8011506:	3720      	adds	r7, #32
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}
 801150c:	effffffe 	.word	0xeffffffe
 8011510:	0801115f 	.word	0x0801115f

08011514 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b08a      	sub	sp, #40	; 0x28
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011522:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	69db      	ldr	r3, [r3, #28]
 801152a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	689b      	ldr	r3, [r3, #8]
 801153a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011542:	2b22      	cmp	r3, #34	; 0x22
 8011544:	f040 80d8 	bne.w	80116f8 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801154e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011550:	e0a8      	b.n	80116a4 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011558:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801155e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8011560:	8aba      	ldrh	r2, [r7, #20]
 8011562:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011564:	4013      	ands	r3, r2
 8011566:	b29a      	uxth	r2, r3
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011570:	1c9a      	adds	r2, r3, #2
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801157c:	b29b      	uxth	r3, r3
 801157e:	3b01      	subs	r3, #1
 8011580:	b29a      	uxth	r2, r3
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	69db      	ldr	r3, [r3, #28]
 801158e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011592:	f003 0307 	and.w	r3, r3, #7
 8011596:	2b00      	cmp	r3, #0
 8011598:	d04d      	beq.n	8011636 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159c:	f003 0301 	and.w	r3, r3, #1
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d010      	beq.n	80115c6 <UART_RxISR_16BIT_FIFOEN+0xb2>
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d00b      	beq.n	80115c6 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2201      	movs	r2, #1
 80115b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115bc:	f043 0201 	orr.w	r2, r3, #1
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80115c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c8:	f003 0302 	and.w	r3, r3, #2
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d010      	beq.n	80115f2 <UART_RxISR_16BIT_FIFOEN+0xde>
 80115d0:	69bb      	ldr	r3, [r7, #24]
 80115d2:	f003 0301 	and.w	r3, r3, #1
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d00b      	beq.n	80115f2 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	2202      	movs	r2, #2
 80115e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80115e8:	f043 0204 	orr.w	r2, r3, #4
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80115f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f4:	f003 0304 	and.w	r3, r3, #4
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d010      	beq.n	801161e <UART_RxISR_16BIT_FIFOEN+0x10a>
 80115fc:	69bb      	ldr	r3, [r7, #24]
 80115fe:	f003 0301 	and.w	r3, r3, #1
 8011602:	2b00      	cmp	r3, #0
 8011604:	d00b      	beq.n	801161e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	2204      	movs	r2, #4
 801160c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011614:	f043 0202 	orr.w	r2, r3, #2
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011624:	2b00      	cmp	r3, #0
 8011626:	d006      	beq.n	8011636 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f7fe fc2b 	bl	800fe84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2200      	movs	r2, #0
 8011632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801163c:	b29b      	uxth	r3, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	d130      	bne.n	80116a4 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011650:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	6899      	ldr	r1, [r3, #8]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	4b2c      	ldr	r3, [pc, #176]	; (8011710 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 801165e:	400b      	ands	r3, r1
 8011660:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2220      	movs	r2, #32
 8011666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011674:	2b01      	cmp	r3, #1
 8011676:	d10f      	bne.n	8011698 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f022 0210 	bic.w	r2, r2, #16
 8011686:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801168e:	4619      	mov	r1, r3
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f7fe fc01 	bl	800fe98 <HAL_UARTEx_RxEventCallback>
 8011696:	e002      	b.n	801169e <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f7f2 fe09 	bl	80042b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2200      	movs	r2, #0
 80116a2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80116a4:	8afb      	ldrh	r3, [r7, #22]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d005      	beq.n	80116b6 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 80116aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ac:	f003 0320 	and.w	r3, r3, #32
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	f47f af4e 	bne.w	8011552 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80116bc:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80116be:	89fb      	ldrh	r3, [r7, #14]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d021      	beq.n	8011708 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80116ca:	89fa      	ldrh	r2, [r7, #14]
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d21b      	bcs.n	8011708 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	689a      	ldr	r2, [r3, #8]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80116de:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	4a0c      	ldr	r2, [pc, #48]	; (8011714 <UART_RxISR_16BIT_FIFOEN+0x200>)
 80116e4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	f042 0220 	orr.w	r2, r2, #32
 80116f4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80116f6:	e007      	b.n	8011708 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	699a      	ldr	r2, [r3, #24]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	f042 0208 	orr.w	r2, r2, #8
 8011706:	619a      	str	r2, [r3, #24]
}
 8011708:	bf00      	nop
 801170a:	3728      	adds	r7, #40	; 0x28
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	effffffe 	.word	0xeffffffe
 8011714:	08011237 	.word	0x08011237

08011718 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011718:	b480      	push	{r7}
 801171a:	b083      	sub	sp, #12
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011720:	bf00      	nop
 8011722:	370c      	adds	r7, #12
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr

0801172c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801172c:	b480      	push	{r7}
 801172e:	b083      	sub	sp, #12
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011734:	bf00      	nop
 8011736:	370c      	adds	r7, #12
 8011738:	46bd      	mov	sp, r7
 801173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173e:	4770      	bx	lr

08011740 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011740:	b480      	push	{r7}
 8011742:	b083      	sub	sp, #12
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011748:	bf00      	nop
 801174a:	370c      	adds	r7, #12
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011754:	b480      	push	{r7}
 8011756:	b085      	sub	sp, #20
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011762:	2b01      	cmp	r3, #1
 8011764:	d101      	bne.n	801176a <HAL_UARTEx_DisableFifoMode+0x16>
 8011766:	2302      	movs	r3, #2
 8011768:	e027      	b.n	80117ba <HAL_UARTEx_DisableFifoMode+0x66>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2201      	movs	r2, #1
 801176e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2224      	movs	r2, #36	; 0x24
 8011776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	681a      	ldr	r2, [r3, #0]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	f022 0201 	bic.w	r2, r2, #1
 8011790:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011798:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2200      	movs	r2, #0
 801179e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	68fa      	ldr	r2, [r7, #12]
 80117a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2220      	movs	r2, #32
 80117ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	2200      	movs	r2, #0
 80117b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80117b8:	2300      	movs	r3, #0
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3714      	adds	r7, #20
 80117be:	46bd      	mov	sp, r7
 80117c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c4:	4770      	bx	lr

080117c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80117c6:	b580      	push	{r7, lr}
 80117c8:	b084      	sub	sp, #16
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
 80117ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d101      	bne.n	80117de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80117da:	2302      	movs	r3, #2
 80117dc:	e02d      	b.n	801183a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2201      	movs	r2, #1
 80117e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2224      	movs	r2, #36	; 0x24
 80117ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f022 0201 	bic.w	r2, r2, #1
 8011804:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	689b      	ldr	r3, [r3, #8]
 801180c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	683a      	ldr	r2, [r7, #0]
 8011816:	430a      	orrs	r2, r1
 8011818:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f000 f850 	bl	80118c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	68fa      	ldr	r2, [r7, #12]
 8011826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2220      	movs	r2, #32
 801182c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2200      	movs	r2, #0
 8011834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011838:	2300      	movs	r3, #0
}
 801183a:	4618      	mov	r0, r3
 801183c:	3710      	adds	r7, #16
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}

08011842 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011842:	b580      	push	{r7, lr}
 8011844:	b084      	sub	sp, #16
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
 801184a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011852:	2b01      	cmp	r3, #1
 8011854:	d101      	bne.n	801185a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011856:	2302      	movs	r3, #2
 8011858:	e02d      	b.n	80118b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2201      	movs	r2, #1
 801185e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2224      	movs	r2, #36	; 0x24
 8011866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	681a      	ldr	r2, [r3, #0]
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f022 0201 	bic.w	r2, r2, #1
 8011880:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	689b      	ldr	r3, [r3, #8]
 8011888:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	683a      	ldr	r2, [r7, #0]
 8011892:	430a      	orrs	r2, r1
 8011894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 f812 	bl	80118c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	68fa      	ldr	r2, [r7, #12]
 80118a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2220      	movs	r2, #32
 80118a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	2200      	movs	r2, #0
 80118b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80118b4:	2300      	movs	r3, #0
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
	...

080118c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80118c0:	b480      	push	{r7}
 80118c2:	b085      	sub	sp, #20
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d108      	bne.n	80118e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2201      	movs	r2, #1
 80118d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2201      	movs	r2, #1
 80118dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80118e0:	e031      	b.n	8011946 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80118e2:	2310      	movs	r3, #16
 80118e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80118e6:	2310      	movs	r3, #16
 80118e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	689b      	ldr	r3, [r3, #8]
 80118f0:	0e5b      	lsrs	r3, r3, #25
 80118f2:	b2db      	uxtb	r3, r3
 80118f4:	f003 0307 	and.w	r3, r3, #7
 80118f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	689b      	ldr	r3, [r3, #8]
 8011900:	0f5b      	lsrs	r3, r3, #29
 8011902:	b2db      	uxtb	r3, r3
 8011904:	f003 0307 	and.w	r3, r3, #7
 8011908:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801190a:	7bbb      	ldrb	r3, [r7, #14]
 801190c:	7b3a      	ldrb	r2, [r7, #12]
 801190e:	4911      	ldr	r1, [pc, #68]	; (8011954 <UARTEx_SetNbDataToProcess+0x94>)
 8011910:	5c8a      	ldrb	r2, [r1, r2]
 8011912:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011916:	7b3a      	ldrb	r2, [r7, #12]
 8011918:	490f      	ldr	r1, [pc, #60]	; (8011958 <UARTEx_SetNbDataToProcess+0x98>)
 801191a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801191c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011920:	b29a      	uxth	r2, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011928:	7bfb      	ldrb	r3, [r7, #15]
 801192a:	7b7a      	ldrb	r2, [r7, #13]
 801192c:	4909      	ldr	r1, [pc, #36]	; (8011954 <UARTEx_SetNbDataToProcess+0x94>)
 801192e:	5c8a      	ldrb	r2, [r1, r2]
 8011930:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011934:	7b7a      	ldrb	r2, [r7, #13]
 8011936:	4908      	ldr	r1, [pc, #32]	; (8011958 <UARTEx_SetNbDataToProcess+0x98>)
 8011938:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801193a:	fb93 f3f2 	sdiv	r3, r3, r2
 801193e:	b29a      	uxth	r2, r3
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011946:	bf00      	nop
 8011948:	3714      	adds	r7, #20
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr
 8011952:	bf00      	nop
 8011954:	08014d64 	.word	0x08014d64
 8011958:	08014d6c 	.word	0x08014d6c

0801195c <__errno>:
 801195c:	4b01      	ldr	r3, [pc, #4]	; (8011964 <__errno+0x8>)
 801195e:	6818      	ldr	r0, [r3, #0]
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	24000024 	.word	0x24000024

08011968 <__libc_init_array>:
 8011968:	b570      	push	{r4, r5, r6, lr}
 801196a:	4d0d      	ldr	r5, [pc, #52]	; (80119a0 <__libc_init_array+0x38>)
 801196c:	4c0d      	ldr	r4, [pc, #52]	; (80119a4 <__libc_init_array+0x3c>)
 801196e:	1b64      	subs	r4, r4, r5
 8011970:	10a4      	asrs	r4, r4, #2
 8011972:	2600      	movs	r6, #0
 8011974:	42a6      	cmp	r6, r4
 8011976:	d109      	bne.n	801198c <__libc_init_array+0x24>
 8011978:	4d0b      	ldr	r5, [pc, #44]	; (80119a8 <__libc_init_array+0x40>)
 801197a:	4c0c      	ldr	r4, [pc, #48]	; (80119ac <__libc_init_array+0x44>)
 801197c:	f003 f992 	bl	8014ca4 <_init>
 8011980:	1b64      	subs	r4, r4, r5
 8011982:	10a4      	asrs	r4, r4, #2
 8011984:	2600      	movs	r6, #0
 8011986:	42a6      	cmp	r6, r4
 8011988:	d105      	bne.n	8011996 <__libc_init_array+0x2e>
 801198a:	bd70      	pop	{r4, r5, r6, pc}
 801198c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011990:	4798      	blx	r3
 8011992:	3601      	adds	r6, #1
 8011994:	e7ee      	b.n	8011974 <__libc_init_array+0xc>
 8011996:	f855 3b04 	ldr.w	r3, [r5], #4
 801199a:	4798      	blx	r3
 801199c:	3601      	adds	r6, #1
 801199e:	e7f2      	b.n	8011986 <__libc_init_array+0x1e>
 80119a0:	08015208 	.word	0x08015208
 80119a4:	08015208 	.word	0x08015208
 80119a8:	08015208 	.word	0x08015208
 80119ac:	0801520c 	.word	0x0801520c

080119b0 <memset>:
 80119b0:	4402      	add	r2, r0
 80119b2:	4603      	mov	r3, r0
 80119b4:	4293      	cmp	r3, r2
 80119b6:	d100      	bne.n	80119ba <memset+0xa>
 80119b8:	4770      	bx	lr
 80119ba:	f803 1b01 	strb.w	r1, [r3], #1
 80119be:	e7f9      	b.n	80119b4 <memset+0x4>

080119c0 <__cvt>:
 80119c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119c2:	ed2d 8b02 	vpush	{d8}
 80119c6:	eeb0 8b40 	vmov.f64	d8, d0
 80119ca:	b085      	sub	sp, #20
 80119cc:	4617      	mov	r7, r2
 80119ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80119d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80119d2:	ee18 2a90 	vmov	r2, s17
 80119d6:	f025 0520 	bic.w	r5, r5, #32
 80119da:	2a00      	cmp	r2, #0
 80119dc:	bfb6      	itet	lt
 80119de:	222d      	movlt	r2, #45	; 0x2d
 80119e0:	2200      	movge	r2, #0
 80119e2:	eeb1 8b40 	vneglt.f64	d8, d0
 80119e6:	2d46      	cmp	r5, #70	; 0x46
 80119e8:	460c      	mov	r4, r1
 80119ea:	701a      	strb	r2, [r3, #0]
 80119ec:	d004      	beq.n	80119f8 <__cvt+0x38>
 80119ee:	2d45      	cmp	r5, #69	; 0x45
 80119f0:	d100      	bne.n	80119f4 <__cvt+0x34>
 80119f2:	3401      	adds	r4, #1
 80119f4:	2102      	movs	r1, #2
 80119f6:	e000      	b.n	80119fa <__cvt+0x3a>
 80119f8:	2103      	movs	r1, #3
 80119fa:	ab03      	add	r3, sp, #12
 80119fc:	9301      	str	r3, [sp, #4]
 80119fe:	ab02      	add	r3, sp, #8
 8011a00:	9300      	str	r3, [sp, #0]
 8011a02:	4622      	mov	r2, r4
 8011a04:	4633      	mov	r3, r6
 8011a06:	eeb0 0b48 	vmov.f64	d0, d8
 8011a0a:	f000 fdf5 	bl	80125f8 <_dtoa_r>
 8011a0e:	2d47      	cmp	r5, #71	; 0x47
 8011a10:	d109      	bne.n	8011a26 <__cvt+0x66>
 8011a12:	07fb      	lsls	r3, r7, #31
 8011a14:	d407      	bmi.n	8011a26 <__cvt+0x66>
 8011a16:	9b03      	ldr	r3, [sp, #12]
 8011a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a1a:	1a1b      	subs	r3, r3, r0
 8011a1c:	6013      	str	r3, [r2, #0]
 8011a1e:	b005      	add	sp, #20
 8011a20:	ecbd 8b02 	vpop	{d8}
 8011a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a26:	2d46      	cmp	r5, #70	; 0x46
 8011a28:	eb00 0204 	add.w	r2, r0, r4
 8011a2c:	d10c      	bne.n	8011a48 <__cvt+0x88>
 8011a2e:	7803      	ldrb	r3, [r0, #0]
 8011a30:	2b30      	cmp	r3, #48	; 0x30
 8011a32:	d107      	bne.n	8011a44 <__cvt+0x84>
 8011a34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a3c:	bf1c      	itt	ne
 8011a3e:	f1c4 0401 	rsbne	r4, r4, #1
 8011a42:	6034      	strne	r4, [r6, #0]
 8011a44:	6833      	ldr	r3, [r6, #0]
 8011a46:	441a      	add	r2, r3
 8011a48:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a50:	bf08      	it	eq
 8011a52:	9203      	streq	r2, [sp, #12]
 8011a54:	2130      	movs	r1, #48	; 0x30
 8011a56:	9b03      	ldr	r3, [sp, #12]
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d2dc      	bcs.n	8011a16 <__cvt+0x56>
 8011a5c:	1c5c      	adds	r4, r3, #1
 8011a5e:	9403      	str	r4, [sp, #12]
 8011a60:	7019      	strb	r1, [r3, #0]
 8011a62:	e7f8      	b.n	8011a56 <__cvt+0x96>

08011a64 <__exponent>:
 8011a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011a66:	4603      	mov	r3, r0
 8011a68:	2900      	cmp	r1, #0
 8011a6a:	bfb8      	it	lt
 8011a6c:	4249      	neglt	r1, r1
 8011a6e:	f803 2b02 	strb.w	r2, [r3], #2
 8011a72:	bfb4      	ite	lt
 8011a74:	222d      	movlt	r2, #45	; 0x2d
 8011a76:	222b      	movge	r2, #43	; 0x2b
 8011a78:	2909      	cmp	r1, #9
 8011a7a:	7042      	strb	r2, [r0, #1]
 8011a7c:	dd2a      	ble.n	8011ad4 <__exponent+0x70>
 8011a7e:	f10d 0407 	add.w	r4, sp, #7
 8011a82:	46a4      	mov	ip, r4
 8011a84:	270a      	movs	r7, #10
 8011a86:	46a6      	mov	lr, r4
 8011a88:	460a      	mov	r2, r1
 8011a8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8011a8e:	fb07 1516 	mls	r5, r7, r6, r1
 8011a92:	3530      	adds	r5, #48	; 0x30
 8011a94:	2a63      	cmp	r2, #99	; 0x63
 8011a96:	f104 34ff 	add.w	r4, r4, #4294967295
 8011a9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011a9e:	4631      	mov	r1, r6
 8011aa0:	dcf1      	bgt.n	8011a86 <__exponent+0x22>
 8011aa2:	3130      	adds	r1, #48	; 0x30
 8011aa4:	f1ae 0502 	sub.w	r5, lr, #2
 8011aa8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011aac:	1c44      	adds	r4, r0, #1
 8011aae:	4629      	mov	r1, r5
 8011ab0:	4561      	cmp	r1, ip
 8011ab2:	d30a      	bcc.n	8011aca <__exponent+0x66>
 8011ab4:	f10d 0209 	add.w	r2, sp, #9
 8011ab8:	eba2 020e 	sub.w	r2, r2, lr
 8011abc:	4565      	cmp	r5, ip
 8011abe:	bf88      	it	hi
 8011ac0:	2200      	movhi	r2, #0
 8011ac2:	4413      	add	r3, r2
 8011ac4:	1a18      	subs	r0, r3, r0
 8011ac6:	b003      	add	sp, #12
 8011ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ace:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011ad2:	e7ed      	b.n	8011ab0 <__exponent+0x4c>
 8011ad4:	2330      	movs	r3, #48	; 0x30
 8011ad6:	3130      	adds	r1, #48	; 0x30
 8011ad8:	7083      	strb	r3, [r0, #2]
 8011ada:	70c1      	strb	r1, [r0, #3]
 8011adc:	1d03      	adds	r3, r0, #4
 8011ade:	e7f1      	b.n	8011ac4 <__exponent+0x60>

08011ae0 <_printf_float>:
 8011ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae4:	b08b      	sub	sp, #44	; 0x2c
 8011ae6:	460c      	mov	r4, r1
 8011ae8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8011aec:	4616      	mov	r6, r2
 8011aee:	461f      	mov	r7, r3
 8011af0:	4605      	mov	r5, r0
 8011af2:	f001 fcbb 	bl	801346c <_localeconv_r>
 8011af6:	f8d0 b000 	ldr.w	fp, [r0]
 8011afa:	4658      	mov	r0, fp
 8011afc:	f7ee fbf0 	bl	80002e0 <strlen>
 8011b00:	2300      	movs	r3, #0
 8011b02:	9308      	str	r3, [sp, #32]
 8011b04:	f8d8 3000 	ldr.w	r3, [r8]
 8011b08:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011b0c:	6822      	ldr	r2, [r4, #0]
 8011b0e:	3307      	adds	r3, #7
 8011b10:	f023 0307 	bic.w	r3, r3, #7
 8011b14:	f103 0108 	add.w	r1, r3, #8
 8011b18:	f8c8 1000 	str.w	r1, [r8]
 8011b1c:	4682      	mov	sl, r0
 8011b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011b22:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8011b26:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8011d88 <_printf_float+0x2a8>
 8011b2a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011b2e:	eeb0 6bc0 	vabs.f64	d6, d0
 8011b32:	eeb4 6b47 	vcmp.f64	d6, d7
 8011b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b3a:	dd24      	ble.n	8011b86 <_printf_float+0xa6>
 8011b3c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b44:	d502      	bpl.n	8011b4c <_printf_float+0x6c>
 8011b46:	232d      	movs	r3, #45	; 0x2d
 8011b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b4c:	4b90      	ldr	r3, [pc, #576]	; (8011d90 <_printf_float+0x2b0>)
 8011b4e:	4891      	ldr	r0, [pc, #580]	; (8011d94 <_printf_float+0x2b4>)
 8011b50:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011b54:	bf94      	ite	ls
 8011b56:	4698      	movls	r8, r3
 8011b58:	4680      	movhi	r8, r0
 8011b5a:	2303      	movs	r3, #3
 8011b5c:	6123      	str	r3, [r4, #16]
 8011b5e:	f022 0204 	bic.w	r2, r2, #4
 8011b62:	2300      	movs	r3, #0
 8011b64:	6022      	str	r2, [r4, #0]
 8011b66:	9304      	str	r3, [sp, #16]
 8011b68:	9700      	str	r7, [sp, #0]
 8011b6a:	4633      	mov	r3, r6
 8011b6c:	aa09      	add	r2, sp, #36	; 0x24
 8011b6e:	4621      	mov	r1, r4
 8011b70:	4628      	mov	r0, r5
 8011b72:	f000 f9d3 	bl	8011f1c <_printf_common>
 8011b76:	3001      	adds	r0, #1
 8011b78:	f040 808a 	bne.w	8011c90 <_printf_float+0x1b0>
 8011b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b80:	b00b      	add	sp, #44	; 0x2c
 8011b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b86:	eeb4 0b40 	vcmp.f64	d0, d0
 8011b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b8e:	d709      	bvc.n	8011ba4 <_printf_float+0xc4>
 8011b90:	ee10 3a90 	vmov	r3, s1
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	bfbc      	itt	lt
 8011b98:	232d      	movlt	r3, #45	; 0x2d
 8011b9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011b9e:	487e      	ldr	r0, [pc, #504]	; (8011d98 <_printf_float+0x2b8>)
 8011ba0:	4b7e      	ldr	r3, [pc, #504]	; (8011d9c <_printf_float+0x2bc>)
 8011ba2:	e7d5      	b.n	8011b50 <_printf_float+0x70>
 8011ba4:	6863      	ldr	r3, [r4, #4]
 8011ba6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011baa:	9104      	str	r1, [sp, #16]
 8011bac:	1c59      	adds	r1, r3, #1
 8011bae:	d13c      	bne.n	8011c2a <_printf_float+0x14a>
 8011bb0:	2306      	movs	r3, #6
 8011bb2:	6063      	str	r3, [r4, #4]
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	9303      	str	r3, [sp, #12]
 8011bb8:	ab08      	add	r3, sp, #32
 8011bba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011bbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011bc2:	ab07      	add	r3, sp, #28
 8011bc4:	6861      	ldr	r1, [r4, #4]
 8011bc6:	9300      	str	r3, [sp, #0]
 8011bc8:	6022      	str	r2, [r4, #0]
 8011bca:	f10d 031b 	add.w	r3, sp, #27
 8011bce:	4628      	mov	r0, r5
 8011bd0:	f7ff fef6 	bl	80119c0 <__cvt>
 8011bd4:	9b04      	ldr	r3, [sp, #16]
 8011bd6:	9907      	ldr	r1, [sp, #28]
 8011bd8:	2b47      	cmp	r3, #71	; 0x47
 8011bda:	4680      	mov	r8, r0
 8011bdc:	d108      	bne.n	8011bf0 <_printf_float+0x110>
 8011bde:	1cc8      	adds	r0, r1, #3
 8011be0:	db02      	blt.n	8011be8 <_printf_float+0x108>
 8011be2:	6863      	ldr	r3, [r4, #4]
 8011be4:	4299      	cmp	r1, r3
 8011be6:	dd41      	ble.n	8011c6c <_printf_float+0x18c>
 8011be8:	f1a9 0902 	sub.w	r9, r9, #2
 8011bec:	fa5f f989 	uxtb.w	r9, r9
 8011bf0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011bf4:	d820      	bhi.n	8011c38 <_printf_float+0x158>
 8011bf6:	3901      	subs	r1, #1
 8011bf8:	464a      	mov	r2, r9
 8011bfa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011bfe:	9107      	str	r1, [sp, #28]
 8011c00:	f7ff ff30 	bl	8011a64 <__exponent>
 8011c04:	9a08      	ldr	r2, [sp, #32]
 8011c06:	9004      	str	r0, [sp, #16]
 8011c08:	1813      	adds	r3, r2, r0
 8011c0a:	2a01      	cmp	r2, #1
 8011c0c:	6123      	str	r3, [r4, #16]
 8011c0e:	dc02      	bgt.n	8011c16 <_printf_float+0x136>
 8011c10:	6822      	ldr	r2, [r4, #0]
 8011c12:	07d2      	lsls	r2, r2, #31
 8011c14:	d501      	bpl.n	8011c1a <_printf_float+0x13a>
 8011c16:	3301      	adds	r3, #1
 8011c18:	6123      	str	r3, [r4, #16]
 8011c1a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d0a2      	beq.n	8011b68 <_printf_float+0x88>
 8011c22:	232d      	movs	r3, #45	; 0x2d
 8011c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c28:	e79e      	b.n	8011b68 <_printf_float+0x88>
 8011c2a:	9904      	ldr	r1, [sp, #16]
 8011c2c:	2947      	cmp	r1, #71	; 0x47
 8011c2e:	d1c1      	bne.n	8011bb4 <_printf_float+0xd4>
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d1bf      	bne.n	8011bb4 <_printf_float+0xd4>
 8011c34:	2301      	movs	r3, #1
 8011c36:	e7bc      	b.n	8011bb2 <_printf_float+0xd2>
 8011c38:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011c3c:	d118      	bne.n	8011c70 <_printf_float+0x190>
 8011c3e:	2900      	cmp	r1, #0
 8011c40:	6863      	ldr	r3, [r4, #4]
 8011c42:	dd0b      	ble.n	8011c5c <_printf_float+0x17c>
 8011c44:	6121      	str	r1, [r4, #16]
 8011c46:	b913      	cbnz	r3, 8011c4e <_printf_float+0x16e>
 8011c48:	6822      	ldr	r2, [r4, #0]
 8011c4a:	07d0      	lsls	r0, r2, #31
 8011c4c:	d502      	bpl.n	8011c54 <_printf_float+0x174>
 8011c4e:	3301      	adds	r3, #1
 8011c50:	440b      	add	r3, r1
 8011c52:	6123      	str	r3, [r4, #16]
 8011c54:	2300      	movs	r3, #0
 8011c56:	65a1      	str	r1, [r4, #88]	; 0x58
 8011c58:	9304      	str	r3, [sp, #16]
 8011c5a:	e7de      	b.n	8011c1a <_printf_float+0x13a>
 8011c5c:	b913      	cbnz	r3, 8011c64 <_printf_float+0x184>
 8011c5e:	6822      	ldr	r2, [r4, #0]
 8011c60:	07d2      	lsls	r2, r2, #31
 8011c62:	d501      	bpl.n	8011c68 <_printf_float+0x188>
 8011c64:	3302      	adds	r3, #2
 8011c66:	e7f4      	b.n	8011c52 <_printf_float+0x172>
 8011c68:	2301      	movs	r3, #1
 8011c6a:	e7f2      	b.n	8011c52 <_printf_float+0x172>
 8011c6c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011c70:	9b08      	ldr	r3, [sp, #32]
 8011c72:	4299      	cmp	r1, r3
 8011c74:	db05      	blt.n	8011c82 <_printf_float+0x1a2>
 8011c76:	6823      	ldr	r3, [r4, #0]
 8011c78:	6121      	str	r1, [r4, #16]
 8011c7a:	07d8      	lsls	r0, r3, #31
 8011c7c:	d5ea      	bpl.n	8011c54 <_printf_float+0x174>
 8011c7e:	1c4b      	adds	r3, r1, #1
 8011c80:	e7e7      	b.n	8011c52 <_printf_float+0x172>
 8011c82:	2900      	cmp	r1, #0
 8011c84:	bfd4      	ite	le
 8011c86:	f1c1 0202 	rsble	r2, r1, #2
 8011c8a:	2201      	movgt	r2, #1
 8011c8c:	4413      	add	r3, r2
 8011c8e:	e7e0      	b.n	8011c52 <_printf_float+0x172>
 8011c90:	6823      	ldr	r3, [r4, #0]
 8011c92:	055a      	lsls	r2, r3, #21
 8011c94:	d407      	bmi.n	8011ca6 <_printf_float+0x1c6>
 8011c96:	6923      	ldr	r3, [r4, #16]
 8011c98:	4642      	mov	r2, r8
 8011c9a:	4631      	mov	r1, r6
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	47b8      	blx	r7
 8011ca0:	3001      	adds	r0, #1
 8011ca2:	d12a      	bne.n	8011cfa <_printf_float+0x21a>
 8011ca4:	e76a      	b.n	8011b7c <_printf_float+0x9c>
 8011ca6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8011caa:	f240 80e2 	bls.w	8011e72 <_printf_float+0x392>
 8011cae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011cb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cba:	d133      	bne.n	8011d24 <_printf_float+0x244>
 8011cbc:	4a38      	ldr	r2, [pc, #224]	; (8011da0 <_printf_float+0x2c0>)
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	4631      	mov	r1, r6
 8011cc2:	4628      	mov	r0, r5
 8011cc4:	47b8      	blx	r7
 8011cc6:	3001      	adds	r0, #1
 8011cc8:	f43f af58 	beq.w	8011b7c <_printf_float+0x9c>
 8011ccc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	db02      	blt.n	8011cda <_printf_float+0x1fa>
 8011cd4:	6823      	ldr	r3, [r4, #0]
 8011cd6:	07d8      	lsls	r0, r3, #31
 8011cd8:	d50f      	bpl.n	8011cfa <_printf_float+0x21a>
 8011cda:	4653      	mov	r3, sl
 8011cdc:	465a      	mov	r2, fp
 8011cde:	4631      	mov	r1, r6
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	47b8      	blx	r7
 8011ce4:	3001      	adds	r0, #1
 8011ce6:	f43f af49 	beq.w	8011b7c <_printf_float+0x9c>
 8011cea:	f04f 0800 	mov.w	r8, #0
 8011cee:	f104 091a 	add.w	r9, r4, #26
 8011cf2:	9b08      	ldr	r3, [sp, #32]
 8011cf4:	3b01      	subs	r3, #1
 8011cf6:	4543      	cmp	r3, r8
 8011cf8:	dc09      	bgt.n	8011d0e <_printf_float+0x22e>
 8011cfa:	6823      	ldr	r3, [r4, #0]
 8011cfc:	079b      	lsls	r3, r3, #30
 8011cfe:	f100 8108 	bmi.w	8011f12 <_printf_float+0x432>
 8011d02:	68e0      	ldr	r0, [r4, #12]
 8011d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d06:	4298      	cmp	r0, r3
 8011d08:	bfb8      	it	lt
 8011d0a:	4618      	movlt	r0, r3
 8011d0c:	e738      	b.n	8011b80 <_printf_float+0xa0>
 8011d0e:	2301      	movs	r3, #1
 8011d10:	464a      	mov	r2, r9
 8011d12:	4631      	mov	r1, r6
 8011d14:	4628      	mov	r0, r5
 8011d16:	47b8      	blx	r7
 8011d18:	3001      	adds	r0, #1
 8011d1a:	f43f af2f 	beq.w	8011b7c <_printf_float+0x9c>
 8011d1e:	f108 0801 	add.w	r8, r8, #1
 8011d22:	e7e6      	b.n	8011cf2 <_printf_float+0x212>
 8011d24:	9b07      	ldr	r3, [sp, #28]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	dc3c      	bgt.n	8011da4 <_printf_float+0x2c4>
 8011d2a:	4a1d      	ldr	r2, [pc, #116]	; (8011da0 <_printf_float+0x2c0>)
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	4631      	mov	r1, r6
 8011d30:	4628      	mov	r0, r5
 8011d32:	47b8      	blx	r7
 8011d34:	3001      	adds	r0, #1
 8011d36:	f43f af21 	beq.w	8011b7c <_printf_float+0x9c>
 8011d3a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011d3e:	4313      	orrs	r3, r2
 8011d40:	d102      	bne.n	8011d48 <_printf_float+0x268>
 8011d42:	6823      	ldr	r3, [r4, #0]
 8011d44:	07d9      	lsls	r1, r3, #31
 8011d46:	d5d8      	bpl.n	8011cfa <_printf_float+0x21a>
 8011d48:	4653      	mov	r3, sl
 8011d4a:	465a      	mov	r2, fp
 8011d4c:	4631      	mov	r1, r6
 8011d4e:	4628      	mov	r0, r5
 8011d50:	47b8      	blx	r7
 8011d52:	3001      	adds	r0, #1
 8011d54:	f43f af12 	beq.w	8011b7c <_printf_float+0x9c>
 8011d58:	f04f 0900 	mov.w	r9, #0
 8011d5c:	f104 0a1a 	add.w	sl, r4, #26
 8011d60:	9b07      	ldr	r3, [sp, #28]
 8011d62:	425b      	negs	r3, r3
 8011d64:	454b      	cmp	r3, r9
 8011d66:	dc01      	bgt.n	8011d6c <_printf_float+0x28c>
 8011d68:	9b08      	ldr	r3, [sp, #32]
 8011d6a:	e795      	b.n	8011c98 <_printf_float+0x1b8>
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	4652      	mov	r2, sl
 8011d70:	4631      	mov	r1, r6
 8011d72:	4628      	mov	r0, r5
 8011d74:	47b8      	blx	r7
 8011d76:	3001      	adds	r0, #1
 8011d78:	f43f af00 	beq.w	8011b7c <_printf_float+0x9c>
 8011d7c:	f109 0901 	add.w	r9, r9, #1
 8011d80:	e7ee      	b.n	8011d60 <_printf_float+0x280>
 8011d82:	bf00      	nop
 8011d84:	f3af 8000 	nop.w
 8011d88:	ffffffff 	.word	0xffffffff
 8011d8c:	7fefffff 	.word	0x7fefffff
 8011d90:	08014d78 	.word	0x08014d78
 8011d94:	08014d7c 	.word	0x08014d7c
 8011d98:	08014d84 	.word	0x08014d84
 8011d9c:	08014d80 	.word	0x08014d80
 8011da0:	08014d88 	.word	0x08014d88
 8011da4:	9a08      	ldr	r2, [sp, #32]
 8011da6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011da8:	429a      	cmp	r2, r3
 8011daa:	bfa8      	it	ge
 8011dac:	461a      	movge	r2, r3
 8011dae:	2a00      	cmp	r2, #0
 8011db0:	4691      	mov	r9, r2
 8011db2:	dc38      	bgt.n	8011e26 <_printf_float+0x346>
 8011db4:	2300      	movs	r3, #0
 8011db6:	9305      	str	r3, [sp, #20]
 8011db8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011dbc:	f104 021a 	add.w	r2, r4, #26
 8011dc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011dc2:	9905      	ldr	r1, [sp, #20]
 8011dc4:	9304      	str	r3, [sp, #16]
 8011dc6:	eba3 0309 	sub.w	r3, r3, r9
 8011dca:	428b      	cmp	r3, r1
 8011dcc:	dc33      	bgt.n	8011e36 <_printf_float+0x356>
 8011dce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	db3c      	blt.n	8011e50 <_printf_float+0x370>
 8011dd6:	6823      	ldr	r3, [r4, #0]
 8011dd8:	07da      	lsls	r2, r3, #31
 8011dda:	d439      	bmi.n	8011e50 <_printf_float+0x370>
 8011ddc:	9a08      	ldr	r2, [sp, #32]
 8011dde:	9b04      	ldr	r3, [sp, #16]
 8011de0:	9907      	ldr	r1, [sp, #28]
 8011de2:	1ad3      	subs	r3, r2, r3
 8011de4:	eba2 0901 	sub.w	r9, r2, r1
 8011de8:	4599      	cmp	r9, r3
 8011dea:	bfa8      	it	ge
 8011dec:	4699      	movge	r9, r3
 8011dee:	f1b9 0f00 	cmp.w	r9, #0
 8011df2:	dc35      	bgt.n	8011e60 <_printf_float+0x380>
 8011df4:	f04f 0800 	mov.w	r8, #0
 8011df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011dfc:	f104 0a1a 	add.w	sl, r4, #26
 8011e00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011e04:	1a9b      	subs	r3, r3, r2
 8011e06:	eba3 0309 	sub.w	r3, r3, r9
 8011e0a:	4543      	cmp	r3, r8
 8011e0c:	f77f af75 	ble.w	8011cfa <_printf_float+0x21a>
 8011e10:	2301      	movs	r3, #1
 8011e12:	4652      	mov	r2, sl
 8011e14:	4631      	mov	r1, r6
 8011e16:	4628      	mov	r0, r5
 8011e18:	47b8      	blx	r7
 8011e1a:	3001      	adds	r0, #1
 8011e1c:	f43f aeae 	beq.w	8011b7c <_printf_float+0x9c>
 8011e20:	f108 0801 	add.w	r8, r8, #1
 8011e24:	e7ec      	b.n	8011e00 <_printf_float+0x320>
 8011e26:	4613      	mov	r3, r2
 8011e28:	4631      	mov	r1, r6
 8011e2a:	4642      	mov	r2, r8
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	47b8      	blx	r7
 8011e30:	3001      	adds	r0, #1
 8011e32:	d1bf      	bne.n	8011db4 <_printf_float+0x2d4>
 8011e34:	e6a2      	b.n	8011b7c <_printf_float+0x9c>
 8011e36:	2301      	movs	r3, #1
 8011e38:	4631      	mov	r1, r6
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	9204      	str	r2, [sp, #16]
 8011e3e:	47b8      	blx	r7
 8011e40:	3001      	adds	r0, #1
 8011e42:	f43f ae9b 	beq.w	8011b7c <_printf_float+0x9c>
 8011e46:	9b05      	ldr	r3, [sp, #20]
 8011e48:	9a04      	ldr	r2, [sp, #16]
 8011e4a:	3301      	adds	r3, #1
 8011e4c:	9305      	str	r3, [sp, #20]
 8011e4e:	e7b7      	b.n	8011dc0 <_printf_float+0x2e0>
 8011e50:	4653      	mov	r3, sl
 8011e52:	465a      	mov	r2, fp
 8011e54:	4631      	mov	r1, r6
 8011e56:	4628      	mov	r0, r5
 8011e58:	47b8      	blx	r7
 8011e5a:	3001      	adds	r0, #1
 8011e5c:	d1be      	bne.n	8011ddc <_printf_float+0x2fc>
 8011e5e:	e68d      	b.n	8011b7c <_printf_float+0x9c>
 8011e60:	9a04      	ldr	r2, [sp, #16]
 8011e62:	464b      	mov	r3, r9
 8011e64:	4442      	add	r2, r8
 8011e66:	4631      	mov	r1, r6
 8011e68:	4628      	mov	r0, r5
 8011e6a:	47b8      	blx	r7
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	d1c1      	bne.n	8011df4 <_printf_float+0x314>
 8011e70:	e684      	b.n	8011b7c <_printf_float+0x9c>
 8011e72:	9a08      	ldr	r2, [sp, #32]
 8011e74:	2a01      	cmp	r2, #1
 8011e76:	dc01      	bgt.n	8011e7c <_printf_float+0x39c>
 8011e78:	07db      	lsls	r3, r3, #31
 8011e7a:	d537      	bpl.n	8011eec <_printf_float+0x40c>
 8011e7c:	2301      	movs	r3, #1
 8011e7e:	4642      	mov	r2, r8
 8011e80:	4631      	mov	r1, r6
 8011e82:	4628      	mov	r0, r5
 8011e84:	47b8      	blx	r7
 8011e86:	3001      	adds	r0, #1
 8011e88:	f43f ae78 	beq.w	8011b7c <_printf_float+0x9c>
 8011e8c:	4653      	mov	r3, sl
 8011e8e:	465a      	mov	r2, fp
 8011e90:	4631      	mov	r1, r6
 8011e92:	4628      	mov	r0, r5
 8011e94:	47b8      	blx	r7
 8011e96:	3001      	adds	r0, #1
 8011e98:	f43f ae70 	beq.w	8011b7c <_printf_float+0x9c>
 8011e9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011ea0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea8:	d01b      	beq.n	8011ee2 <_printf_float+0x402>
 8011eaa:	9b08      	ldr	r3, [sp, #32]
 8011eac:	f108 0201 	add.w	r2, r8, #1
 8011eb0:	3b01      	subs	r3, #1
 8011eb2:	4631      	mov	r1, r6
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	47b8      	blx	r7
 8011eb8:	3001      	adds	r0, #1
 8011eba:	d10e      	bne.n	8011eda <_printf_float+0x3fa>
 8011ebc:	e65e      	b.n	8011b7c <_printf_float+0x9c>
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	464a      	mov	r2, r9
 8011ec2:	4631      	mov	r1, r6
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	47b8      	blx	r7
 8011ec8:	3001      	adds	r0, #1
 8011eca:	f43f ae57 	beq.w	8011b7c <_printf_float+0x9c>
 8011ece:	f108 0801 	add.w	r8, r8, #1
 8011ed2:	9b08      	ldr	r3, [sp, #32]
 8011ed4:	3b01      	subs	r3, #1
 8011ed6:	4543      	cmp	r3, r8
 8011ed8:	dcf1      	bgt.n	8011ebe <_printf_float+0x3de>
 8011eda:	9b04      	ldr	r3, [sp, #16]
 8011edc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011ee0:	e6db      	b.n	8011c9a <_printf_float+0x1ba>
 8011ee2:	f04f 0800 	mov.w	r8, #0
 8011ee6:	f104 091a 	add.w	r9, r4, #26
 8011eea:	e7f2      	b.n	8011ed2 <_printf_float+0x3f2>
 8011eec:	2301      	movs	r3, #1
 8011eee:	4642      	mov	r2, r8
 8011ef0:	e7df      	b.n	8011eb2 <_printf_float+0x3d2>
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	464a      	mov	r2, r9
 8011ef6:	4631      	mov	r1, r6
 8011ef8:	4628      	mov	r0, r5
 8011efa:	47b8      	blx	r7
 8011efc:	3001      	adds	r0, #1
 8011efe:	f43f ae3d 	beq.w	8011b7c <_printf_float+0x9c>
 8011f02:	f108 0801 	add.w	r8, r8, #1
 8011f06:	68e3      	ldr	r3, [r4, #12]
 8011f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f0a:	1a5b      	subs	r3, r3, r1
 8011f0c:	4543      	cmp	r3, r8
 8011f0e:	dcf0      	bgt.n	8011ef2 <_printf_float+0x412>
 8011f10:	e6f7      	b.n	8011d02 <_printf_float+0x222>
 8011f12:	f04f 0800 	mov.w	r8, #0
 8011f16:	f104 0919 	add.w	r9, r4, #25
 8011f1a:	e7f4      	b.n	8011f06 <_printf_float+0x426>

08011f1c <_printf_common>:
 8011f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f20:	4616      	mov	r6, r2
 8011f22:	4699      	mov	r9, r3
 8011f24:	688a      	ldr	r2, [r1, #8]
 8011f26:	690b      	ldr	r3, [r1, #16]
 8011f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	bfb8      	it	lt
 8011f30:	4613      	movlt	r3, r2
 8011f32:	6033      	str	r3, [r6, #0]
 8011f34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011f38:	4607      	mov	r7, r0
 8011f3a:	460c      	mov	r4, r1
 8011f3c:	b10a      	cbz	r2, 8011f42 <_printf_common+0x26>
 8011f3e:	3301      	adds	r3, #1
 8011f40:	6033      	str	r3, [r6, #0]
 8011f42:	6823      	ldr	r3, [r4, #0]
 8011f44:	0699      	lsls	r1, r3, #26
 8011f46:	bf42      	ittt	mi
 8011f48:	6833      	ldrmi	r3, [r6, #0]
 8011f4a:	3302      	addmi	r3, #2
 8011f4c:	6033      	strmi	r3, [r6, #0]
 8011f4e:	6825      	ldr	r5, [r4, #0]
 8011f50:	f015 0506 	ands.w	r5, r5, #6
 8011f54:	d106      	bne.n	8011f64 <_printf_common+0x48>
 8011f56:	f104 0a19 	add.w	sl, r4, #25
 8011f5a:	68e3      	ldr	r3, [r4, #12]
 8011f5c:	6832      	ldr	r2, [r6, #0]
 8011f5e:	1a9b      	subs	r3, r3, r2
 8011f60:	42ab      	cmp	r3, r5
 8011f62:	dc26      	bgt.n	8011fb2 <_printf_common+0x96>
 8011f64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011f68:	1e13      	subs	r3, r2, #0
 8011f6a:	6822      	ldr	r2, [r4, #0]
 8011f6c:	bf18      	it	ne
 8011f6e:	2301      	movne	r3, #1
 8011f70:	0692      	lsls	r2, r2, #26
 8011f72:	d42b      	bmi.n	8011fcc <_printf_common+0xb0>
 8011f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f78:	4649      	mov	r1, r9
 8011f7a:	4638      	mov	r0, r7
 8011f7c:	47c0      	blx	r8
 8011f7e:	3001      	adds	r0, #1
 8011f80:	d01e      	beq.n	8011fc0 <_printf_common+0xa4>
 8011f82:	6823      	ldr	r3, [r4, #0]
 8011f84:	68e5      	ldr	r5, [r4, #12]
 8011f86:	6832      	ldr	r2, [r6, #0]
 8011f88:	f003 0306 	and.w	r3, r3, #6
 8011f8c:	2b04      	cmp	r3, #4
 8011f8e:	bf08      	it	eq
 8011f90:	1aad      	subeq	r5, r5, r2
 8011f92:	68a3      	ldr	r3, [r4, #8]
 8011f94:	6922      	ldr	r2, [r4, #16]
 8011f96:	bf0c      	ite	eq
 8011f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f9c:	2500      	movne	r5, #0
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	bfc4      	itt	gt
 8011fa2:	1a9b      	subgt	r3, r3, r2
 8011fa4:	18ed      	addgt	r5, r5, r3
 8011fa6:	2600      	movs	r6, #0
 8011fa8:	341a      	adds	r4, #26
 8011faa:	42b5      	cmp	r5, r6
 8011fac:	d11a      	bne.n	8011fe4 <_printf_common+0xc8>
 8011fae:	2000      	movs	r0, #0
 8011fb0:	e008      	b.n	8011fc4 <_printf_common+0xa8>
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	4652      	mov	r2, sl
 8011fb6:	4649      	mov	r1, r9
 8011fb8:	4638      	mov	r0, r7
 8011fba:	47c0      	blx	r8
 8011fbc:	3001      	adds	r0, #1
 8011fbe:	d103      	bne.n	8011fc8 <_printf_common+0xac>
 8011fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fc8:	3501      	adds	r5, #1
 8011fca:	e7c6      	b.n	8011f5a <_printf_common+0x3e>
 8011fcc:	18e1      	adds	r1, r4, r3
 8011fce:	1c5a      	adds	r2, r3, #1
 8011fd0:	2030      	movs	r0, #48	; 0x30
 8011fd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011fd6:	4422      	add	r2, r4
 8011fd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011fe0:	3302      	adds	r3, #2
 8011fe2:	e7c7      	b.n	8011f74 <_printf_common+0x58>
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	4622      	mov	r2, r4
 8011fe8:	4649      	mov	r1, r9
 8011fea:	4638      	mov	r0, r7
 8011fec:	47c0      	blx	r8
 8011fee:	3001      	adds	r0, #1
 8011ff0:	d0e6      	beq.n	8011fc0 <_printf_common+0xa4>
 8011ff2:	3601      	adds	r6, #1
 8011ff4:	e7d9      	b.n	8011faa <_printf_common+0x8e>
	...

08011ff8 <_printf_i>:
 8011ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ffc:	460c      	mov	r4, r1
 8011ffe:	4691      	mov	r9, r2
 8012000:	7e27      	ldrb	r7, [r4, #24]
 8012002:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012004:	2f78      	cmp	r7, #120	; 0x78
 8012006:	4680      	mov	r8, r0
 8012008:	469a      	mov	sl, r3
 801200a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801200e:	d807      	bhi.n	8012020 <_printf_i+0x28>
 8012010:	2f62      	cmp	r7, #98	; 0x62
 8012012:	d80a      	bhi.n	801202a <_printf_i+0x32>
 8012014:	2f00      	cmp	r7, #0
 8012016:	f000 80d8 	beq.w	80121ca <_printf_i+0x1d2>
 801201a:	2f58      	cmp	r7, #88	; 0x58
 801201c:	f000 80a3 	beq.w	8012166 <_printf_i+0x16e>
 8012020:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012024:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012028:	e03a      	b.n	80120a0 <_printf_i+0xa8>
 801202a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801202e:	2b15      	cmp	r3, #21
 8012030:	d8f6      	bhi.n	8012020 <_printf_i+0x28>
 8012032:	a001      	add	r0, pc, #4	; (adr r0, 8012038 <_printf_i+0x40>)
 8012034:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012038:	08012091 	.word	0x08012091
 801203c:	080120a5 	.word	0x080120a5
 8012040:	08012021 	.word	0x08012021
 8012044:	08012021 	.word	0x08012021
 8012048:	08012021 	.word	0x08012021
 801204c:	08012021 	.word	0x08012021
 8012050:	080120a5 	.word	0x080120a5
 8012054:	08012021 	.word	0x08012021
 8012058:	08012021 	.word	0x08012021
 801205c:	08012021 	.word	0x08012021
 8012060:	08012021 	.word	0x08012021
 8012064:	080121b1 	.word	0x080121b1
 8012068:	080120d5 	.word	0x080120d5
 801206c:	08012193 	.word	0x08012193
 8012070:	08012021 	.word	0x08012021
 8012074:	08012021 	.word	0x08012021
 8012078:	080121d3 	.word	0x080121d3
 801207c:	08012021 	.word	0x08012021
 8012080:	080120d5 	.word	0x080120d5
 8012084:	08012021 	.word	0x08012021
 8012088:	08012021 	.word	0x08012021
 801208c:	0801219b 	.word	0x0801219b
 8012090:	680b      	ldr	r3, [r1, #0]
 8012092:	1d1a      	adds	r2, r3, #4
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	600a      	str	r2, [r1, #0]
 8012098:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801209c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80120a0:	2301      	movs	r3, #1
 80120a2:	e0a3      	b.n	80121ec <_printf_i+0x1f4>
 80120a4:	6825      	ldr	r5, [r4, #0]
 80120a6:	6808      	ldr	r0, [r1, #0]
 80120a8:	062e      	lsls	r6, r5, #24
 80120aa:	f100 0304 	add.w	r3, r0, #4
 80120ae:	d50a      	bpl.n	80120c6 <_printf_i+0xce>
 80120b0:	6805      	ldr	r5, [r0, #0]
 80120b2:	600b      	str	r3, [r1, #0]
 80120b4:	2d00      	cmp	r5, #0
 80120b6:	da03      	bge.n	80120c0 <_printf_i+0xc8>
 80120b8:	232d      	movs	r3, #45	; 0x2d
 80120ba:	426d      	negs	r5, r5
 80120bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120c0:	485e      	ldr	r0, [pc, #376]	; (801223c <_printf_i+0x244>)
 80120c2:	230a      	movs	r3, #10
 80120c4:	e019      	b.n	80120fa <_printf_i+0x102>
 80120c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80120ca:	6805      	ldr	r5, [r0, #0]
 80120cc:	600b      	str	r3, [r1, #0]
 80120ce:	bf18      	it	ne
 80120d0:	b22d      	sxthne	r5, r5
 80120d2:	e7ef      	b.n	80120b4 <_printf_i+0xbc>
 80120d4:	680b      	ldr	r3, [r1, #0]
 80120d6:	6825      	ldr	r5, [r4, #0]
 80120d8:	1d18      	adds	r0, r3, #4
 80120da:	6008      	str	r0, [r1, #0]
 80120dc:	0628      	lsls	r0, r5, #24
 80120de:	d501      	bpl.n	80120e4 <_printf_i+0xec>
 80120e0:	681d      	ldr	r5, [r3, #0]
 80120e2:	e002      	b.n	80120ea <_printf_i+0xf2>
 80120e4:	0669      	lsls	r1, r5, #25
 80120e6:	d5fb      	bpl.n	80120e0 <_printf_i+0xe8>
 80120e8:	881d      	ldrh	r5, [r3, #0]
 80120ea:	4854      	ldr	r0, [pc, #336]	; (801223c <_printf_i+0x244>)
 80120ec:	2f6f      	cmp	r7, #111	; 0x6f
 80120ee:	bf0c      	ite	eq
 80120f0:	2308      	moveq	r3, #8
 80120f2:	230a      	movne	r3, #10
 80120f4:	2100      	movs	r1, #0
 80120f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80120fa:	6866      	ldr	r6, [r4, #4]
 80120fc:	60a6      	str	r6, [r4, #8]
 80120fe:	2e00      	cmp	r6, #0
 8012100:	bfa2      	ittt	ge
 8012102:	6821      	ldrge	r1, [r4, #0]
 8012104:	f021 0104 	bicge.w	r1, r1, #4
 8012108:	6021      	strge	r1, [r4, #0]
 801210a:	b90d      	cbnz	r5, 8012110 <_printf_i+0x118>
 801210c:	2e00      	cmp	r6, #0
 801210e:	d04d      	beq.n	80121ac <_printf_i+0x1b4>
 8012110:	4616      	mov	r6, r2
 8012112:	fbb5 f1f3 	udiv	r1, r5, r3
 8012116:	fb03 5711 	mls	r7, r3, r1, r5
 801211a:	5dc7      	ldrb	r7, [r0, r7]
 801211c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012120:	462f      	mov	r7, r5
 8012122:	42bb      	cmp	r3, r7
 8012124:	460d      	mov	r5, r1
 8012126:	d9f4      	bls.n	8012112 <_printf_i+0x11a>
 8012128:	2b08      	cmp	r3, #8
 801212a:	d10b      	bne.n	8012144 <_printf_i+0x14c>
 801212c:	6823      	ldr	r3, [r4, #0]
 801212e:	07df      	lsls	r7, r3, #31
 8012130:	d508      	bpl.n	8012144 <_printf_i+0x14c>
 8012132:	6923      	ldr	r3, [r4, #16]
 8012134:	6861      	ldr	r1, [r4, #4]
 8012136:	4299      	cmp	r1, r3
 8012138:	bfde      	ittt	le
 801213a:	2330      	movle	r3, #48	; 0x30
 801213c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012140:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012144:	1b92      	subs	r2, r2, r6
 8012146:	6122      	str	r2, [r4, #16]
 8012148:	f8cd a000 	str.w	sl, [sp]
 801214c:	464b      	mov	r3, r9
 801214e:	aa03      	add	r2, sp, #12
 8012150:	4621      	mov	r1, r4
 8012152:	4640      	mov	r0, r8
 8012154:	f7ff fee2 	bl	8011f1c <_printf_common>
 8012158:	3001      	adds	r0, #1
 801215a:	d14c      	bne.n	80121f6 <_printf_i+0x1fe>
 801215c:	f04f 30ff 	mov.w	r0, #4294967295
 8012160:	b004      	add	sp, #16
 8012162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012166:	4835      	ldr	r0, [pc, #212]	; (801223c <_printf_i+0x244>)
 8012168:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801216c:	6823      	ldr	r3, [r4, #0]
 801216e:	680e      	ldr	r6, [r1, #0]
 8012170:	061f      	lsls	r7, r3, #24
 8012172:	f856 5b04 	ldr.w	r5, [r6], #4
 8012176:	600e      	str	r6, [r1, #0]
 8012178:	d514      	bpl.n	80121a4 <_printf_i+0x1ac>
 801217a:	07d9      	lsls	r1, r3, #31
 801217c:	bf44      	itt	mi
 801217e:	f043 0320 	orrmi.w	r3, r3, #32
 8012182:	6023      	strmi	r3, [r4, #0]
 8012184:	b91d      	cbnz	r5, 801218e <_printf_i+0x196>
 8012186:	6823      	ldr	r3, [r4, #0]
 8012188:	f023 0320 	bic.w	r3, r3, #32
 801218c:	6023      	str	r3, [r4, #0]
 801218e:	2310      	movs	r3, #16
 8012190:	e7b0      	b.n	80120f4 <_printf_i+0xfc>
 8012192:	6823      	ldr	r3, [r4, #0]
 8012194:	f043 0320 	orr.w	r3, r3, #32
 8012198:	6023      	str	r3, [r4, #0]
 801219a:	2378      	movs	r3, #120	; 0x78
 801219c:	4828      	ldr	r0, [pc, #160]	; (8012240 <_printf_i+0x248>)
 801219e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80121a2:	e7e3      	b.n	801216c <_printf_i+0x174>
 80121a4:	065e      	lsls	r6, r3, #25
 80121a6:	bf48      	it	mi
 80121a8:	b2ad      	uxthmi	r5, r5
 80121aa:	e7e6      	b.n	801217a <_printf_i+0x182>
 80121ac:	4616      	mov	r6, r2
 80121ae:	e7bb      	b.n	8012128 <_printf_i+0x130>
 80121b0:	680b      	ldr	r3, [r1, #0]
 80121b2:	6826      	ldr	r6, [r4, #0]
 80121b4:	6960      	ldr	r0, [r4, #20]
 80121b6:	1d1d      	adds	r5, r3, #4
 80121b8:	600d      	str	r5, [r1, #0]
 80121ba:	0635      	lsls	r5, r6, #24
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	d501      	bpl.n	80121c4 <_printf_i+0x1cc>
 80121c0:	6018      	str	r0, [r3, #0]
 80121c2:	e002      	b.n	80121ca <_printf_i+0x1d2>
 80121c4:	0671      	lsls	r1, r6, #25
 80121c6:	d5fb      	bpl.n	80121c0 <_printf_i+0x1c8>
 80121c8:	8018      	strh	r0, [r3, #0]
 80121ca:	2300      	movs	r3, #0
 80121cc:	6123      	str	r3, [r4, #16]
 80121ce:	4616      	mov	r6, r2
 80121d0:	e7ba      	b.n	8012148 <_printf_i+0x150>
 80121d2:	680b      	ldr	r3, [r1, #0]
 80121d4:	1d1a      	adds	r2, r3, #4
 80121d6:	600a      	str	r2, [r1, #0]
 80121d8:	681e      	ldr	r6, [r3, #0]
 80121da:	6862      	ldr	r2, [r4, #4]
 80121dc:	2100      	movs	r1, #0
 80121de:	4630      	mov	r0, r6
 80121e0:	f7ee f886 	bl	80002f0 <memchr>
 80121e4:	b108      	cbz	r0, 80121ea <_printf_i+0x1f2>
 80121e6:	1b80      	subs	r0, r0, r6
 80121e8:	6060      	str	r0, [r4, #4]
 80121ea:	6863      	ldr	r3, [r4, #4]
 80121ec:	6123      	str	r3, [r4, #16]
 80121ee:	2300      	movs	r3, #0
 80121f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80121f4:	e7a8      	b.n	8012148 <_printf_i+0x150>
 80121f6:	6923      	ldr	r3, [r4, #16]
 80121f8:	4632      	mov	r2, r6
 80121fa:	4649      	mov	r1, r9
 80121fc:	4640      	mov	r0, r8
 80121fe:	47d0      	blx	sl
 8012200:	3001      	adds	r0, #1
 8012202:	d0ab      	beq.n	801215c <_printf_i+0x164>
 8012204:	6823      	ldr	r3, [r4, #0]
 8012206:	079b      	lsls	r3, r3, #30
 8012208:	d413      	bmi.n	8012232 <_printf_i+0x23a>
 801220a:	68e0      	ldr	r0, [r4, #12]
 801220c:	9b03      	ldr	r3, [sp, #12]
 801220e:	4298      	cmp	r0, r3
 8012210:	bfb8      	it	lt
 8012212:	4618      	movlt	r0, r3
 8012214:	e7a4      	b.n	8012160 <_printf_i+0x168>
 8012216:	2301      	movs	r3, #1
 8012218:	4632      	mov	r2, r6
 801221a:	4649      	mov	r1, r9
 801221c:	4640      	mov	r0, r8
 801221e:	47d0      	blx	sl
 8012220:	3001      	adds	r0, #1
 8012222:	d09b      	beq.n	801215c <_printf_i+0x164>
 8012224:	3501      	adds	r5, #1
 8012226:	68e3      	ldr	r3, [r4, #12]
 8012228:	9903      	ldr	r1, [sp, #12]
 801222a:	1a5b      	subs	r3, r3, r1
 801222c:	42ab      	cmp	r3, r5
 801222e:	dcf2      	bgt.n	8012216 <_printf_i+0x21e>
 8012230:	e7eb      	b.n	801220a <_printf_i+0x212>
 8012232:	2500      	movs	r5, #0
 8012234:	f104 0619 	add.w	r6, r4, #25
 8012238:	e7f5      	b.n	8012226 <_printf_i+0x22e>
 801223a:	bf00      	nop
 801223c:	08014d8a 	.word	0x08014d8a
 8012240:	08014d9b 	.word	0x08014d9b

08012244 <iprintf>:
 8012244:	b40f      	push	{r0, r1, r2, r3}
 8012246:	4b0a      	ldr	r3, [pc, #40]	; (8012270 <iprintf+0x2c>)
 8012248:	b513      	push	{r0, r1, r4, lr}
 801224a:	681c      	ldr	r4, [r3, #0]
 801224c:	b124      	cbz	r4, 8012258 <iprintf+0x14>
 801224e:	69a3      	ldr	r3, [r4, #24]
 8012250:	b913      	cbnz	r3, 8012258 <iprintf+0x14>
 8012252:	4620      	mov	r0, r4
 8012254:	f001 f86c 	bl	8013330 <__sinit>
 8012258:	ab05      	add	r3, sp, #20
 801225a:	9a04      	ldr	r2, [sp, #16]
 801225c:	68a1      	ldr	r1, [r4, #8]
 801225e:	9301      	str	r3, [sp, #4]
 8012260:	4620      	mov	r0, r4
 8012262:	f001 fde7 	bl	8013e34 <_vfiprintf_r>
 8012266:	b002      	add	sp, #8
 8012268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801226c:	b004      	add	sp, #16
 801226e:	4770      	bx	lr
 8012270:	24000024 	.word	0x24000024

08012274 <_puts_r>:
 8012274:	b570      	push	{r4, r5, r6, lr}
 8012276:	460e      	mov	r6, r1
 8012278:	4605      	mov	r5, r0
 801227a:	b118      	cbz	r0, 8012284 <_puts_r+0x10>
 801227c:	6983      	ldr	r3, [r0, #24]
 801227e:	b90b      	cbnz	r3, 8012284 <_puts_r+0x10>
 8012280:	f001 f856 	bl	8013330 <__sinit>
 8012284:	69ab      	ldr	r3, [r5, #24]
 8012286:	68ac      	ldr	r4, [r5, #8]
 8012288:	b913      	cbnz	r3, 8012290 <_puts_r+0x1c>
 801228a:	4628      	mov	r0, r5
 801228c:	f001 f850 	bl	8013330 <__sinit>
 8012290:	4b2c      	ldr	r3, [pc, #176]	; (8012344 <_puts_r+0xd0>)
 8012292:	429c      	cmp	r4, r3
 8012294:	d120      	bne.n	80122d8 <_puts_r+0x64>
 8012296:	686c      	ldr	r4, [r5, #4]
 8012298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801229a:	07db      	lsls	r3, r3, #31
 801229c:	d405      	bmi.n	80122aa <_puts_r+0x36>
 801229e:	89a3      	ldrh	r3, [r4, #12]
 80122a0:	0598      	lsls	r0, r3, #22
 80122a2:	d402      	bmi.n	80122aa <_puts_r+0x36>
 80122a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122a6:	f001 f8e6 	bl	8013476 <__retarget_lock_acquire_recursive>
 80122aa:	89a3      	ldrh	r3, [r4, #12]
 80122ac:	0719      	lsls	r1, r3, #28
 80122ae:	d51d      	bpl.n	80122ec <_puts_r+0x78>
 80122b0:	6923      	ldr	r3, [r4, #16]
 80122b2:	b1db      	cbz	r3, 80122ec <_puts_r+0x78>
 80122b4:	3e01      	subs	r6, #1
 80122b6:	68a3      	ldr	r3, [r4, #8]
 80122b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80122bc:	3b01      	subs	r3, #1
 80122be:	60a3      	str	r3, [r4, #8]
 80122c0:	bb39      	cbnz	r1, 8012312 <_puts_r+0x9e>
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	da38      	bge.n	8012338 <_puts_r+0xc4>
 80122c6:	4622      	mov	r2, r4
 80122c8:	210a      	movs	r1, #10
 80122ca:	4628      	mov	r0, r5
 80122cc:	f000 f848 	bl	8012360 <__swbuf_r>
 80122d0:	3001      	adds	r0, #1
 80122d2:	d011      	beq.n	80122f8 <_puts_r+0x84>
 80122d4:	250a      	movs	r5, #10
 80122d6:	e011      	b.n	80122fc <_puts_r+0x88>
 80122d8:	4b1b      	ldr	r3, [pc, #108]	; (8012348 <_puts_r+0xd4>)
 80122da:	429c      	cmp	r4, r3
 80122dc:	d101      	bne.n	80122e2 <_puts_r+0x6e>
 80122de:	68ac      	ldr	r4, [r5, #8]
 80122e0:	e7da      	b.n	8012298 <_puts_r+0x24>
 80122e2:	4b1a      	ldr	r3, [pc, #104]	; (801234c <_puts_r+0xd8>)
 80122e4:	429c      	cmp	r4, r3
 80122e6:	bf08      	it	eq
 80122e8:	68ec      	ldreq	r4, [r5, #12]
 80122ea:	e7d5      	b.n	8012298 <_puts_r+0x24>
 80122ec:	4621      	mov	r1, r4
 80122ee:	4628      	mov	r0, r5
 80122f0:	f000 f888 	bl	8012404 <__swsetup_r>
 80122f4:	2800      	cmp	r0, #0
 80122f6:	d0dd      	beq.n	80122b4 <_puts_r+0x40>
 80122f8:	f04f 35ff 	mov.w	r5, #4294967295
 80122fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122fe:	07da      	lsls	r2, r3, #31
 8012300:	d405      	bmi.n	801230e <_puts_r+0x9a>
 8012302:	89a3      	ldrh	r3, [r4, #12]
 8012304:	059b      	lsls	r3, r3, #22
 8012306:	d402      	bmi.n	801230e <_puts_r+0x9a>
 8012308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801230a:	f001 f8b5 	bl	8013478 <__retarget_lock_release_recursive>
 801230e:	4628      	mov	r0, r5
 8012310:	bd70      	pop	{r4, r5, r6, pc}
 8012312:	2b00      	cmp	r3, #0
 8012314:	da04      	bge.n	8012320 <_puts_r+0xac>
 8012316:	69a2      	ldr	r2, [r4, #24]
 8012318:	429a      	cmp	r2, r3
 801231a:	dc06      	bgt.n	801232a <_puts_r+0xb6>
 801231c:	290a      	cmp	r1, #10
 801231e:	d004      	beq.n	801232a <_puts_r+0xb6>
 8012320:	6823      	ldr	r3, [r4, #0]
 8012322:	1c5a      	adds	r2, r3, #1
 8012324:	6022      	str	r2, [r4, #0]
 8012326:	7019      	strb	r1, [r3, #0]
 8012328:	e7c5      	b.n	80122b6 <_puts_r+0x42>
 801232a:	4622      	mov	r2, r4
 801232c:	4628      	mov	r0, r5
 801232e:	f000 f817 	bl	8012360 <__swbuf_r>
 8012332:	3001      	adds	r0, #1
 8012334:	d1bf      	bne.n	80122b6 <_puts_r+0x42>
 8012336:	e7df      	b.n	80122f8 <_puts_r+0x84>
 8012338:	6823      	ldr	r3, [r4, #0]
 801233a:	250a      	movs	r5, #10
 801233c:	1c5a      	adds	r2, r3, #1
 801233e:	6022      	str	r2, [r4, #0]
 8012340:	701d      	strb	r5, [r3, #0]
 8012342:	e7db      	b.n	80122fc <_puts_r+0x88>
 8012344:	08014e60 	.word	0x08014e60
 8012348:	08014e80 	.word	0x08014e80
 801234c:	08014e40 	.word	0x08014e40

08012350 <puts>:
 8012350:	4b02      	ldr	r3, [pc, #8]	; (801235c <puts+0xc>)
 8012352:	4601      	mov	r1, r0
 8012354:	6818      	ldr	r0, [r3, #0]
 8012356:	f7ff bf8d 	b.w	8012274 <_puts_r>
 801235a:	bf00      	nop
 801235c:	24000024 	.word	0x24000024

08012360 <__swbuf_r>:
 8012360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012362:	460e      	mov	r6, r1
 8012364:	4614      	mov	r4, r2
 8012366:	4605      	mov	r5, r0
 8012368:	b118      	cbz	r0, 8012372 <__swbuf_r+0x12>
 801236a:	6983      	ldr	r3, [r0, #24]
 801236c:	b90b      	cbnz	r3, 8012372 <__swbuf_r+0x12>
 801236e:	f000 ffdf 	bl	8013330 <__sinit>
 8012372:	4b21      	ldr	r3, [pc, #132]	; (80123f8 <__swbuf_r+0x98>)
 8012374:	429c      	cmp	r4, r3
 8012376:	d12b      	bne.n	80123d0 <__swbuf_r+0x70>
 8012378:	686c      	ldr	r4, [r5, #4]
 801237a:	69a3      	ldr	r3, [r4, #24]
 801237c:	60a3      	str	r3, [r4, #8]
 801237e:	89a3      	ldrh	r3, [r4, #12]
 8012380:	071a      	lsls	r2, r3, #28
 8012382:	d52f      	bpl.n	80123e4 <__swbuf_r+0x84>
 8012384:	6923      	ldr	r3, [r4, #16]
 8012386:	b36b      	cbz	r3, 80123e4 <__swbuf_r+0x84>
 8012388:	6923      	ldr	r3, [r4, #16]
 801238a:	6820      	ldr	r0, [r4, #0]
 801238c:	1ac0      	subs	r0, r0, r3
 801238e:	6963      	ldr	r3, [r4, #20]
 8012390:	b2f6      	uxtb	r6, r6
 8012392:	4283      	cmp	r3, r0
 8012394:	4637      	mov	r7, r6
 8012396:	dc04      	bgt.n	80123a2 <__swbuf_r+0x42>
 8012398:	4621      	mov	r1, r4
 801239a:	4628      	mov	r0, r5
 801239c:	f000 ff34 	bl	8013208 <_fflush_r>
 80123a0:	bb30      	cbnz	r0, 80123f0 <__swbuf_r+0x90>
 80123a2:	68a3      	ldr	r3, [r4, #8]
 80123a4:	3b01      	subs	r3, #1
 80123a6:	60a3      	str	r3, [r4, #8]
 80123a8:	6823      	ldr	r3, [r4, #0]
 80123aa:	1c5a      	adds	r2, r3, #1
 80123ac:	6022      	str	r2, [r4, #0]
 80123ae:	701e      	strb	r6, [r3, #0]
 80123b0:	6963      	ldr	r3, [r4, #20]
 80123b2:	3001      	adds	r0, #1
 80123b4:	4283      	cmp	r3, r0
 80123b6:	d004      	beq.n	80123c2 <__swbuf_r+0x62>
 80123b8:	89a3      	ldrh	r3, [r4, #12]
 80123ba:	07db      	lsls	r3, r3, #31
 80123bc:	d506      	bpl.n	80123cc <__swbuf_r+0x6c>
 80123be:	2e0a      	cmp	r6, #10
 80123c0:	d104      	bne.n	80123cc <__swbuf_r+0x6c>
 80123c2:	4621      	mov	r1, r4
 80123c4:	4628      	mov	r0, r5
 80123c6:	f000 ff1f 	bl	8013208 <_fflush_r>
 80123ca:	b988      	cbnz	r0, 80123f0 <__swbuf_r+0x90>
 80123cc:	4638      	mov	r0, r7
 80123ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123d0:	4b0a      	ldr	r3, [pc, #40]	; (80123fc <__swbuf_r+0x9c>)
 80123d2:	429c      	cmp	r4, r3
 80123d4:	d101      	bne.n	80123da <__swbuf_r+0x7a>
 80123d6:	68ac      	ldr	r4, [r5, #8]
 80123d8:	e7cf      	b.n	801237a <__swbuf_r+0x1a>
 80123da:	4b09      	ldr	r3, [pc, #36]	; (8012400 <__swbuf_r+0xa0>)
 80123dc:	429c      	cmp	r4, r3
 80123de:	bf08      	it	eq
 80123e0:	68ec      	ldreq	r4, [r5, #12]
 80123e2:	e7ca      	b.n	801237a <__swbuf_r+0x1a>
 80123e4:	4621      	mov	r1, r4
 80123e6:	4628      	mov	r0, r5
 80123e8:	f000 f80c 	bl	8012404 <__swsetup_r>
 80123ec:	2800      	cmp	r0, #0
 80123ee:	d0cb      	beq.n	8012388 <__swbuf_r+0x28>
 80123f0:	f04f 37ff 	mov.w	r7, #4294967295
 80123f4:	e7ea      	b.n	80123cc <__swbuf_r+0x6c>
 80123f6:	bf00      	nop
 80123f8:	08014e60 	.word	0x08014e60
 80123fc:	08014e80 	.word	0x08014e80
 8012400:	08014e40 	.word	0x08014e40

08012404 <__swsetup_r>:
 8012404:	4b32      	ldr	r3, [pc, #200]	; (80124d0 <__swsetup_r+0xcc>)
 8012406:	b570      	push	{r4, r5, r6, lr}
 8012408:	681d      	ldr	r5, [r3, #0]
 801240a:	4606      	mov	r6, r0
 801240c:	460c      	mov	r4, r1
 801240e:	b125      	cbz	r5, 801241a <__swsetup_r+0x16>
 8012410:	69ab      	ldr	r3, [r5, #24]
 8012412:	b913      	cbnz	r3, 801241a <__swsetup_r+0x16>
 8012414:	4628      	mov	r0, r5
 8012416:	f000 ff8b 	bl	8013330 <__sinit>
 801241a:	4b2e      	ldr	r3, [pc, #184]	; (80124d4 <__swsetup_r+0xd0>)
 801241c:	429c      	cmp	r4, r3
 801241e:	d10f      	bne.n	8012440 <__swsetup_r+0x3c>
 8012420:	686c      	ldr	r4, [r5, #4]
 8012422:	89a3      	ldrh	r3, [r4, #12]
 8012424:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012428:	0719      	lsls	r1, r3, #28
 801242a:	d42c      	bmi.n	8012486 <__swsetup_r+0x82>
 801242c:	06dd      	lsls	r5, r3, #27
 801242e:	d411      	bmi.n	8012454 <__swsetup_r+0x50>
 8012430:	2309      	movs	r3, #9
 8012432:	6033      	str	r3, [r6, #0]
 8012434:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012438:	81a3      	strh	r3, [r4, #12]
 801243a:	f04f 30ff 	mov.w	r0, #4294967295
 801243e:	e03e      	b.n	80124be <__swsetup_r+0xba>
 8012440:	4b25      	ldr	r3, [pc, #148]	; (80124d8 <__swsetup_r+0xd4>)
 8012442:	429c      	cmp	r4, r3
 8012444:	d101      	bne.n	801244a <__swsetup_r+0x46>
 8012446:	68ac      	ldr	r4, [r5, #8]
 8012448:	e7eb      	b.n	8012422 <__swsetup_r+0x1e>
 801244a:	4b24      	ldr	r3, [pc, #144]	; (80124dc <__swsetup_r+0xd8>)
 801244c:	429c      	cmp	r4, r3
 801244e:	bf08      	it	eq
 8012450:	68ec      	ldreq	r4, [r5, #12]
 8012452:	e7e6      	b.n	8012422 <__swsetup_r+0x1e>
 8012454:	0758      	lsls	r0, r3, #29
 8012456:	d512      	bpl.n	801247e <__swsetup_r+0x7a>
 8012458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801245a:	b141      	cbz	r1, 801246e <__swsetup_r+0x6a>
 801245c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012460:	4299      	cmp	r1, r3
 8012462:	d002      	beq.n	801246a <__swsetup_r+0x66>
 8012464:	4630      	mov	r0, r6
 8012466:	f001 fc11 	bl	8013c8c <_free_r>
 801246a:	2300      	movs	r3, #0
 801246c:	6363      	str	r3, [r4, #52]	; 0x34
 801246e:	89a3      	ldrh	r3, [r4, #12]
 8012470:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012474:	81a3      	strh	r3, [r4, #12]
 8012476:	2300      	movs	r3, #0
 8012478:	6063      	str	r3, [r4, #4]
 801247a:	6923      	ldr	r3, [r4, #16]
 801247c:	6023      	str	r3, [r4, #0]
 801247e:	89a3      	ldrh	r3, [r4, #12]
 8012480:	f043 0308 	orr.w	r3, r3, #8
 8012484:	81a3      	strh	r3, [r4, #12]
 8012486:	6923      	ldr	r3, [r4, #16]
 8012488:	b94b      	cbnz	r3, 801249e <__swsetup_r+0x9a>
 801248a:	89a3      	ldrh	r3, [r4, #12]
 801248c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012494:	d003      	beq.n	801249e <__swsetup_r+0x9a>
 8012496:	4621      	mov	r1, r4
 8012498:	4630      	mov	r0, r6
 801249a:	f001 f813 	bl	80134c4 <__smakebuf_r>
 801249e:	89a0      	ldrh	r0, [r4, #12]
 80124a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124a4:	f010 0301 	ands.w	r3, r0, #1
 80124a8:	d00a      	beq.n	80124c0 <__swsetup_r+0xbc>
 80124aa:	2300      	movs	r3, #0
 80124ac:	60a3      	str	r3, [r4, #8]
 80124ae:	6963      	ldr	r3, [r4, #20]
 80124b0:	425b      	negs	r3, r3
 80124b2:	61a3      	str	r3, [r4, #24]
 80124b4:	6923      	ldr	r3, [r4, #16]
 80124b6:	b943      	cbnz	r3, 80124ca <__swsetup_r+0xc6>
 80124b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80124bc:	d1ba      	bne.n	8012434 <__swsetup_r+0x30>
 80124be:	bd70      	pop	{r4, r5, r6, pc}
 80124c0:	0781      	lsls	r1, r0, #30
 80124c2:	bf58      	it	pl
 80124c4:	6963      	ldrpl	r3, [r4, #20]
 80124c6:	60a3      	str	r3, [r4, #8]
 80124c8:	e7f4      	b.n	80124b4 <__swsetup_r+0xb0>
 80124ca:	2000      	movs	r0, #0
 80124cc:	e7f7      	b.n	80124be <__swsetup_r+0xba>
 80124ce:	bf00      	nop
 80124d0:	24000024 	.word	0x24000024
 80124d4:	08014e60 	.word	0x08014e60
 80124d8:	08014e80 	.word	0x08014e80
 80124dc:	08014e40 	.word	0x08014e40

080124e0 <quorem>:
 80124e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e4:	6903      	ldr	r3, [r0, #16]
 80124e6:	690c      	ldr	r4, [r1, #16]
 80124e8:	42a3      	cmp	r3, r4
 80124ea:	4607      	mov	r7, r0
 80124ec:	f2c0 8081 	blt.w	80125f2 <quorem+0x112>
 80124f0:	3c01      	subs	r4, #1
 80124f2:	f101 0814 	add.w	r8, r1, #20
 80124f6:	f100 0514 	add.w	r5, r0, #20
 80124fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80124fe:	9301      	str	r3, [sp, #4]
 8012500:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012504:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012508:	3301      	adds	r3, #1
 801250a:	429a      	cmp	r2, r3
 801250c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012510:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012514:	fbb2 f6f3 	udiv	r6, r2, r3
 8012518:	d331      	bcc.n	801257e <quorem+0x9e>
 801251a:	f04f 0e00 	mov.w	lr, #0
 801251e:	4640      	mov	r0, r8
 8012520:	46ac      	mov	ip, r5
 8012522:	46f2      	mov	sl, lr
 8012524:	f850 2b04 	ldr.w	r2, [r0], #4
 8012528:	b293      	uxth	r3, r2
 801252a:	fb06 e303 	mla	r3, r6, r3, lr
 801252e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012532:	b29b      	uxth	r3, r3
 8012534:	ebaa 0303 	sub.w	r3, sl, r3
 8012538:	0c12      	lsrs	r2, r2, #16
 801253a:	f8dc a000 	ldr.w	sl, [ip]
 801253e:	fb06 e202 	mla	r2, r6, r2, lr
 8012542:	fa13 f38a 	uxtah	r3, r3, sl
 8012546:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801254a:	fa1f fa82 	uxth.w	sl, r2
 801254e:	f8dc 2000 	ldr.w	r2, [ip]
 8012552:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012556:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801255a:	b29b      	uxth	r3, r3
 801255c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012560:	4581      	cmp	r9, r0
 8012562:	f84c 3b04 	str.w	r3, [ip], #4
 8012566:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801256a:	d2db      	bcs.n	8012524 <quorem+0x44>
 801256c:	f855 300b 	ldr.w	r3, [r5, fp]
 8012570:	b92b      	cbnz	r3, 801257e <quorem+0x9e>
 8012572:	9b01      	ldr	r3, [sp, #4]
 8012574:	3b04      	subs	r3, #4
 8012576:	429d      	cmp	r5, r3
 8012578:	461a      	mov	r2, r3
 801257a:	d32e      	bcc.n	80125da <quorem+0xfa>
 801257c:	613c      	str	r4, [r7, #16]
 801257e:	4638      	mov	r0, r7
 8012580:	f001 fa74 	bl	8013a6c <__mcmp>
 8012584:	2800      	cmp	r0, #0
 8012586:	db24      	blt.n	80125d2 <quorem+0xf2>
 8012588:	3601      	adds	r6, #1
 801258a:	4628      	mov	r0, r5
 801258c:	f04f 0c00 	mov.w	ip, #0
 8012590:	f858 2b04 	ldr.w	r2, [r8], #4
 8012594:	f8d0 e000 	ldr.w	lr, [r0]
 8012598:	b293      	uxth	r3, r2
 801259a:	ebac 0303 	sub.w	r3, ip, r3
 801259e:	0c12      	lsrs	r2, r2, #16
 80125a0:	fa13 f38e 	uxtah	r3, r3, lr
 80125a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80125a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125b2:	45c1      	cmp	r9, r8
 80125b4:	f840 3b04 	str.w	r3, [r0], #4
 80125b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80125bc:	d2e8      	bcs.n	8012590 <quorem+0xb0>
 80125be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80125c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80125c6:	b922      	cbnz	r2, 80125d2 <quorem+0xf2>
 80125c8:	3b04      	subs	r3, #4
 80125ca:	429d      	cmp	r5, r3
 80125cc:	461a      	mov	r2, r3
 80125ce:	d30a      	bcc.n	80125e6 <quorem+0x106>
 80125d0:	613c      	str	r4, [r7, #16]
 80125d2:	4630      	mov	r0, r6
 80125d4:	b003      	add	sp, #12
 80125d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125da:	6812      	ldr	r2, [r2, #0]
 80125dc:	3b04      	subs	r3, #4
 80125de:	2a00      	cmp	r2, #0
 80125e0:	d1cc      	bne.n	801257c <quorem+0x9c>
 80125e2:	3c01      	subs	r4, #1
 80125e4:	e7c7      	b.n	8012576 <quorem+0x96>
 80125e6:	6812      	ldr	r2, [r2, #0]
 80125e8:	3b04      	subs	r3, #4
 80125ea:	2a00      	cmp	r2, #0
 80125ec:	d1f0      	bne.n	80125d0 <quorem+0xf0>
 80125ee:	3c01      	subs	r4, #1
 80125f0:	e7eb      	b.n	80125ca <quorem+0xea>
 80125f2:	2000      	movs	r0, #0
 80125f4:	e7ee      	b.n	80125d4 <quorem+0xf4>
	...

080125f8 <_dtoa_r>:
 80125f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125fc:	ec59 8b10 	vmov	r8, r9, d0
 8012600:	b095      	sub	sp, #84	; 0x54
 8012602:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012604:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8012606:	9107      	str	r1, [sp, #28]
 8012608:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801260c:	4606      	mov	r6, r0
 801260e:	9209      	str	r2, [sp, #36]	; 0x24
 8012610:	9310      	str	r3, [sp, #64]	; 0x40
 8012612:	b975      	cbnz	r5, 8012632 <_dtoa_r+0x3a>
 8012614:	2010      	movs	r0, #16
 8012616:	f000 ff95 	bl	8013544 <malloc>
 801261a:	4602      	mov	r2, r0
 801261c:	6270      	str	r0, [r6, #36]	; 0x24
 801261e:	b920      	cbnz	r0, 801262a <_dtoa_r+0x32>
 8012620:	4bab      	ldr	r3, [pc, #684]	; (80128d0 <_dtoa_r+0x2d8>)
 8012622:	21ea      	movs	r1, #234	; 0xea
 8012624:	48ab      	ldr	r0, [pc, #684]	; (80128d4 <_dtoa_r+0x2dc>)
 8012626:	f001 fd9b 	bl	8014160 <__assert_func>
 801262a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801262e:	6005      	str	r5, [r0, #0]
 8012630:	60c5      	str	r5, [r0, #12]
 8012632:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012634:	6819      	ldr	r1, [r3, #0]
 8012636:	b151      	cbz	r1, 801264e <_dtoa_r+0x56>
 8012638:	685a      	ldr	r2, [r3, #4]
 801263a:	604a      	str	r2, [r1, #4]
 801263c:	2301      	movs	r3, #1
 801263e:	4093      	lsls	r3, r2
 8012640:	608b      	str	r3, [r1, #8]
 8012642:	4630      	mov	r0, r6
 8012644:	f000 ffd4 	bl	80135f0 <_Bfree>
 8012648:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801264a:	2200      	movs	r2, #0
 801264c:	601a      	str	r2, [r3, #0]
 801264e:	f1b9 0300 	subs.w	r3, r9, #0
 8012652:	bfbb      	ittet	lt
 8012654:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012658:	9303      	strlt	r3, [sp, #12]
 801265a:	2300      	movge	r3, #0
 801265c:	2201      	movlt	r2, #1
 801265e:	bfac      	ite	ge
 8012660:	6023      	strge	r3, [r4, #0]
 8012662:	6022      	strlt	r2, [r4, #0]
 8012664:	4b9c      	ldr	r3, [pc, #624]	; (80128d8 <_dtoa_r+0x2e0>)
 8012666:	9c03      	ldr	r4, [sp, #12]
 8012668:	43a3      	bics	r3, r4
 801266a:	d11a      	bne.n	80126a2 <_dtoa_r+0xaa>
 801266c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801266e:	f242 730f 	movw	r3, #9999	; 0x270f
 8012672:	6013      	str	r3, [r2, #0]
 8012674:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012678:	ea53 0308 	orrs.w	r3, r3, r8
 801267c:	f000 8512 	beq.w	80130a4 <_dtoa_r+0xaac>
 8012680:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012682:	b953      	cbnz	r3, 801269a <_dtoa_r+0xa2>
 8012684:	4b95      	ldr	r3, [pc, #596]	; (80128dc <_dtoa_r+0x2e4>)
 8012686:	e01f      	b.n	80126c8 <_dtoa_r+0xd0>
 8012688:	4b95      	ldr	r3, [pc, #596]	; (80128e0 <_dtoa_r+0x2e8>)
 801268a:	9300      	str	r3, [sp, #0]
 801268c:	3308      	adds	r3, #8
 801268e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012690:	6013      	str	r3, [r2, #0]
 8012692:	9800      	ldr	r0, [sp, #0]
 8012694:	b015      	add	sp, #84	; 0x54
 8012696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801269a:	4b90      	ldr	r3, [pc, #576]	; (80128dc <_dtoa_r+0x2e4>)
 801269c:	9300      	str	r3, [sp, #0]
 801269e:	3303      	adds	r3, #3
 80126a0:	e7f5      	b.n	801268e <_dtoa_r+0x96>
 80126a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80126a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80126aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80126b2:	d10b      	bne.n	80126cc <_dtoa_r+0xd4>
 80126b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80126b6:	2301      	movs	r3, #1
 80126b8:	6013      	str	r3, [r2, #0]
 80126ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80126bc:	2b00      	cmp	r3, #0
 80126be:	f000 84ee 	beq.w	801309e <_dtoa_r+0xaa6>
 80126c2:	4888      	ldr	r0, [pc, #544]	; (80128e4 <_dtoa_r+0x2ec>)
 80126c4:	6018      	str	r0, [r3, #0]
 80126c6:	1e43      	subs	r3, r0, #1
 80126c8:	9300      	str	r3, [sp, #0]
 80126ca:	e7e2      	b.n	8012692 <_dtoa_r+0x9a>
 80126cc:	a913      	add	r1, sp, #76	; 0x4c
 80126ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80126d2:	aa12      	add	r2, sp, #72	; 0x48
 80126d4:	4630      	mov	r0, r6
 80126d6:	f001 fa6d 	bl	8013bb4 <__d2b>
 80126da:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80126de:	4605      	mov	r5, r0
 80126e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80126e2:	2900      	cmp	r1, #0
 80126e4:	d047      	beq.n	8012776 <_dtoa_r+0x17e>
 80126e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80126e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80126ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80126f0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80126f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80126f8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80126fc:	2400      	movs	r4, #0
 80126fe:	ec43 2b16 	vmov	d6, r2, r3
 8012702:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012706:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80128b8 <_dtoa_r+0x2c0>
 801270a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801270e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80128c0 <_dtoa_r+0x2c8>
 8012712:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012716:	eeb0 7b46 	vmov.f64	d7, d6
 801271a:	ee06 1a90 	vmov	s13, r1
 801271e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8012722:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80128c8 <_dtoa_r+0x2d0>
 8012726:	eea5 7b06 	vfma.f64	d7, d5, d6
 801272a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801272e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012736:	ee16 ba90 	vmov	fp, s13
 801273a:	9411      	str	r4, [sp, #68]	; 0x44
 801273c:	d508      	bpl.n	8012750 <_dtoa_r+0x158>
 801273e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012742:	eeb4 6b47 	vcmp.f64	d6, d7
 8012746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801274a:	bf18      	it	ne
 801274c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012750:	f1bb 0f16 	cmp.w	fp, #22
 8012754:	d832      	bhi.n	80127bc <_dtoa_r+0x1c4>
 8012756:	4b64      	ldr	r3, [pc, #400]	; (80128e8 <_dtoa_r+0x2f0>)
 8012758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801275c:	ed93 7b00 	vldr	d7, [r3]
 8012760:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012764:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801276c:	d501      	bpl.n	8012772 <_dtoa_r+0x17a>
 801276e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012772:	2300      	movs	r3, #0
 8012774:	e023      	b.n	80127be <_dtoa_r+0x1c6>
 8012776:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012778:	4401      	add	r1, r0
 801277a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801277e:	2b20      	cmp	r3, #32
 8012780:	bfc3      	ittte	gt
 8012782:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012786:	fa04 f303 	lslgt.w	r3, r4, r3
 801278a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801278e:	f1c3 0320 	rsble	r3, r3, #32
 8012792:	bfc6      	itte	gt
 8012794:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012798:	ea43 0308 	orrgt.w	r3, r3, r8
 801279c:	fa08 f303 	lslle.w	r3, r8, r3
 80127a0:	ee07 3a90 	vmov	s15, r3
 80127a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80127a8:	3901      	subs	r1, #1
 80127aa:	ed8d 7b00 	vstr	d7, [sp]
 80127ae:	9c01      	ldr	r4, [sp, #4]
 80127b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127b4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80127b8:	2401      	movs	r4, #1
 80127ba:	e7a0      	b.n	80126fe <_dtoa_r+0x106>
 80127bc:	2301      	movs	r3, #1
 80127be:	930f      	str	r3, [sp, #60]	; 0x3c
 80127c0:	1a43      	subs	r3, r0, r1
 80127c2:	1e5a      	subs	r2, r3, #1
 80127c4:	bf45      	ittet	mi
 80127c6:	f1c3 0301 	rsbmi	r3, r3, #1
 80127ca:	9305      	strmi	r3, [sp, #20]
 80127cc:	2300      	movpl	r3, #0
 80127ce:	2300      	movmi	r3, #0
 80127d0:	9206      	str	r2, [sp, #24]
 80127d2:	bf54      	ite	pl
 80127d4:	9305      	strpl	r3, [sp, #20]
 80127d6:	9306      	strmi	r3, [sp, #24]
 80127d8:	f1bb 0f00 	cmp.w	fp, #0
 80127dc:	db18      	blt.n	8012810 <_dtoa_r+0x218>
 80127de:	9b06      	ldr	r3, [sp, #24]
 80127e0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80127e4:	445b      	add	r3, fp
 80127e6:	9306      	str	r3, [sp, #24]
 80127e8:	2300      	movs	r3, #0
 80127ea:	9a07      	ldr	r2, [sp, #28]
 80127ec:	2a09      	cmp	r2, #9
 80127ee:	d849      	bhi.n	8012884 <_dtoa_r+0x28c>
 80127f0:	2a05      	cmp	r2, #5
 80127f2:	bfc4      	itt	gt
 80127f4:	3a04      	subgt	r2, #4
 80127f6:	9207      	strgt	r2, [sp, #28]
 80127f8:	9a07      	ldr	r2, [sp, #28]
 80127fa:	f1a2 0202 	sub.w	r2, r2, #2
 80127fe:	bfcc      	ite	gt
 8012800:	2400      	movgt	r4, #0
 8012802:	2401      	movle	r4, #1
 8012804:	2a03      	cmp	r2, #3
 8012806:	d848      	bhi.n	801289a <_dtoa_r+0x2a2>
 8012808:	e8df f002 	tbb	[pc, r2]
 801280c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012810:	9b05      	ldr	r3, [sp, #20]
 8012812:	2200      	movs	r2, #0
 8012814:	eba3 030b 	sub.w	r3, r3, fp
 8012818:	9305      	str	r3, [sp, #20]
 801281a:	920e      	str	r2, [sp, #56]	; 0x38
 801281c:	f1cb 0300 	rsb	r3, fp, #0
 8012820:	e7e3      	b.n	80127ea <_dtoa_r+0x1f2>
 8012822:	2200      	movs	r2, #0
 8012824:	9208      	str	r2, [sp, #32]
 8012826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012828:	2a00      	cmp	r2, #0
 801282a:	dc39      	bgt.n	80128a0 <_dtoa_r+0x2a8>
 801282c:	f04f 0a01 	mov.w	sl, #1
 8012830:	46d1      	mov	r9, sl
 8012832:	4652      	mov	r2, sl
 8012834:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012838:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801283a:	2100      	movs	r1, #0
 801283c:	6079      	str	r1, [r7, #4]
 801283e:	2004      	movs	r0, #4
 8012840:	f100 0c14 	add.w	ip, r0, #20
 8012844:	4594      	cmp	ip, r2
 8012846:	6879      	ldr	r1, [r7, #4]
 8012848:	d92f      	bls.n	80128aa <_dtoa_r+0x2b2>
 801284a:	4630      	mov	r0, r6
 801284c:	930c      	str	r3, [sp, #48]	; 0x30
 801284e:	f000 fe8f 	bl	8013570 <_Balloc>
 8012852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012854:	9000      	str	r0, [sp, #0]
 8012856:	4602      	mov	r2, r0
 8012858:	2800      	cmp	r0, #0
 801285a:	d149      	bne.n	80128f0 <_dtoa_r+0x2f8>
 801285c:	4b23      	ldr	r3, [pc, #140]	; (80128ec <_dtoa_r+0x2f4>)
 801285e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012862:	e6df      	b.n	8012624 <_dtoa_r+0x2c>
 8012864:	2201      	movs	r2, #1
 8012866:	e7dd      	b.n	8012824 <_dtoa_r+0x22c>
 8012868:	2200      	movs	r2, #0
 801286a:	9208      	str	r2, [sp, #32]
 801286c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801286e:	eb0b 0a02 	add.w	sl, fp, r2
 8012872:	f10a 0901 	add.w	r9, sl, #1
 8012876:	464a      	mov	r2, r9
 8012878:	2a01      	cmp	r2, #1
 801287a:	bfb8      	it	lt
 801287c:	2201      	movlt	r2, #1
 801287e:	e7db      	b.n	8012838 <_dtoa_r+0x240>
 8012880:	2201      	movs	r2, #1
 8012882:	e7f2      	b.n	801286a <_dtoa_r+0x272>
 8012884:	2401      	movs	r4, #1
 8012886:	2200      	movs	r2, #0
 8012888:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801288c:	f04f 3aff 	mov.w	sl, #4294967295
 8012890:	2100      	movs	r1, #0
 8012892:	46d1      	mov	r9, sl
 8012894:	2212      	movs	r2, #18
 8012896:	9109      	str	r1, [sp, #36]	; 0x24
 8012898:	e7ce      	b.n	8012838 <_dtoa_r+0x240>
 801289a:	2201      	movs	r2, #1
 801289c:	9208      	str	r2, [sp, #32]
 801289e:	e7f5      	b.n	801288c <_dtoa_r+0x294>
 80128a0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80128a4:	46d1      	mov	r9, sl
 80128a6:	4652      	mov	r2, sl
 80128a8:	e7c6      	b.n	8012838 <_dtoa_r+0x240>
 80128aa:	3101      	adds	r1, #1
 80128ac:	6079      	str	r1, [r7, #4]
 80128ae:	0040      	lsls	r0, r0, #1
 80128b0:	e7c6      	b.n	8012840 <_dtoa_r+0x248>
 80128b2:	bf00      	nop
 80128b4:	f3af 8000 	nop.w
 80128b8:	636f4361 	.word	0x636f4361
 80128bc:	3fd287a7 	.word	0x3fd287a7
 80128c0:	8b60c8b3 	.word	0x8b60c8b3
 80128c4:	3fc68a28 	.word	0x3fc68a28
 80128c8:	509f79fb 	.word	0x509f79fb
 80128cc:	3fd34413 	.word	0x3fd34413
 80128d0:	08014db9 	.word	0x08014db9
 80128d4:	08014dd0 	.word	0x08014dd0
 80128d8:	7ff00000 	.word	0x7ff00000
 80128dc:	08014db5 	.word	0x08014db5
 80128e0:	08014dac 	.word	0x08014dac
 80128e4:	08014d89 	.word	0x08014d89
 80128e8:	08014f28 	.word	0x08014f28
 80128ec:	08014e2f 	.word	0x08014e2f
 80128f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80128f2:	9900      	ldr	r1, [sp, #0]
 80128f4:	6011      	str	r1, [r2, #0]
 80128f6:	f1b9 0f0e 	cmp.w	r9, #14
 80128fa:	d872      	bhi.n	80129e2 <_dtoa_r+0x3ea>
 80128fc:	2c00      	cmp	r4, #0
 80128fe:	d070      	beq.n	80129e2 <_dtoa_r+0x3ea>
 8012900:	f1bb 0f00 	cmp.w	fp, #0
 8012904:	f340 80a6 	ble.w	8012a54 <_dtoa_r+0x45c>
 8012908:	49ca      	ldr	r1, [pc, #808]	; (8012c34 <_dtoa_r+0x63c>)
 801290a:	f00b 020f 	and.w	r2, fp, #15
 801290e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8012912:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012916:	ed92 7b00 	vldr	d7, [r2]
 801291a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801291e:	f000 808d 	beq.w	8012a3c <_dtoa_r+0x444>
 8012922:	4ac5      	ldr	r2, [pc, #788]	; (8012c38 <_dtoa_r+0x640>)
 8012924:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012928:	ed92 6b08 	vldr	d6, [r2, #32]
 801292c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012930:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012934:	f001 010f 	and.w	r1, r1, #15
 8012938:	2203      	movs	r2, #3
 801293a:	48bf      	ldr	r0, [pc, #764]	; (8012c38 <_dtoa_r+0x640>)
 801293c:	2900      	cmp	r1, #0
 801293e:	d17f      	bne.n	8012a40 <_dtoa_r+0x448>
 8012940:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012944:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012948:	ed8d 7b02 	vstr	d7, [sp, #8]
 801294c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801294e:	2900      	cmp	r1, #0
 8012950:	f000 80b2 	beq.w	8012ab8 <_dtoa_r+0x4c0>
 8012954:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012958:	ed9d 7b02 	vldr	d7, [sp, #8]
 801295c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012964:	f140 80a8 	bpl.w	8012ab8 <_dtoa_r+0x4c0>
 8012968:	f1b9 0f00 	cmp.w	r9, #0
 801296c:	f000 80a4 	beq.w	8012ab8 <_dtoa_r+0x4c0>
 8012970:	f1ba 0f00 	cmp.w	sl, #0
 8012974:	dd31      	ble.n	80129da <_dtoa_r+0x3e2>
 8012976:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801297a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801297e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012982:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012986:	3201      	adds	r2, #1
 8012988:	4650      	mov	r0, sl
 801298a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801298e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012992:	ee07 2a90 	vmov	s15, r2
 8012996:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801299a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801299e:	ed8d 5b02 	vstr	d5, [sp, #8]
 80129a2:	9c03      	ldr	r4, [sp, #12]
 80129a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80129a8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80129ac:	2800      	cmp	r0, #0
 80129ae:	f040 8086 	bne.w	8012abe <_dtoa_r+0x4c6>
 80129b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80129b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80129ba:	ec42 1b17 	vmov	d7, r1, r2
 80129be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80129c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c6:	f300 8272 	bgt.w	8012eae <_dtoa_r+0x8b6>
 80129ca:	eeb1 7b47 	vneg.f64	d7, d7
 80129ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80129d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129d6:	f100 8267 	bmi.w	8012ea8 <_dtoa_r+0x8b0>
 80129da:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80129de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80129e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80129e4:	2a00      	cmp	r2, #0
 80129e6:	f2c0 8129 	blt.w	8012c3c <_dtoa_r+0x644>
 80129ea:	f1bb 0f0e 	cmp.w	fp, #14
 80129ee:	f300 8125 	bgt.w	8012c3c <_dtoa_r+0x644>
 80129f2:	4b90      	ldr	r3, [pc, #576]	; (8012c34 <_dtoa_r+0x63c>)
 80129f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80129f8:	ed93 6b00 	vldr	d6, [r3]
 80129fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	f280 80c3 	bge.w	8012b8a <_dtoa_r+0x592>
 8012a04:	f1b9 0f00 	cmp.w	r9, #0
 8012a08:	f300 80bf 	bgt.w	8012b8a <_dtoa_r+0x592>
 8012a0c:	f040 824c 	bne.w	8012ea8 <_dtoa_r+0x8b0>
 8012a10:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012a14:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012a18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a24:	464c      	mov	r4, r9
 8012a26:	464f      	mov	r7, r9
 8012a28:	f280 8222 	bge.w	8012e70 <_dtoa_r+0x878>
 8012a2c:	f8dd 8000 	ldr.w	r8, [sp]
 8012a30:	2331      	movs	r3, #49	; 0x31
 8012a32:	f808 3b01 	strb.w	r3, [r8], #1
 8012a36:	f10b 0b01 	add.w	fp, fp, #1
 8012a3a:	e21e      	b.n	8012e7a <_dtoa_r+0x882>
 8012a3c:	2202      	movs	r2, #2
 8012a3e:	e77c      	b.n	801293a <_dtoa_r+0x342>
 8012a40:	07cc      	lsls	r4, r1, #31
 8012a42:	d504      	bpl.n	8012a4e <_dtoa_r+0x456>
 8012a44:	ed90 6b00 	vldr	d6, [r0]
 8012a48:	3201      	adds	r2, #1
 8012a4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012a4e:	1049      	asrs	r1, r1, #1
 8012a50:	3008      	adds	r0, #8
 8012a52:	e773      	b.n	801293c <_dtoa_r+0x344>
 8012a54:	d02e      	beq.n	8012ab4 <_dtoa_r+0x4bc>
 8012a56:	f1cb 0100 	rsb	r1, fp, #0
 8012a5a:	4a76      	ldr	r2, [pc, #472]	; (8012c34 <_dtoa_r+0x63c>)
 8012a5c:	f001 000f 	and.w	r0, r1, #15
 8012a60:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012a64:	ed92 7b00 	vldr	d7, [r2]
 8012a68:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8012a6c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012a70:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012a74:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8012a78:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012a7c:	486e      	ldr	r0, [pc, #440]	; (8012c38 <_dtoa_r+0x640>)
 8012a7e:	1109      	asrs	r1, r1, #4
 8012a80:	2400      	movs	r4, #0
 8012a82:	2202      	movs	r2, #2
 8012a84:	b939      	cbnz	r1, 8012a96 <_dtoa_r+0x49e>
 8012a86:	2c00      	cmp	r4, #0
 8012a88:	f43f af60 	beq.w	801294c <_dtoa_r+0x354>
 8012a8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012a90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012a94:	e75a      	b.n	801294c <_dtoa_r+0x354>
 8012a96:	07cf      	lsls	r7, r1, #31
 8012a98:	d509      	bpl.n	8012aae <_dtoa_r+0x4b6>
 8012a9a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8012a9e:	ed90 7b00 	vldr	d7, [r0]
 8012aa2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012aa6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012aaa:	3201      	adds	r2, #1
 8012aac:	2401      	movs	r4, #1
 8012aae:	1049      	asrs	r1, r1, #1
 8012ab0:	3008      	adds	r0, #8
 8012ab2:	e7e7      	b.n	8012a84 <_dtoa_r+0x48c>
 8012ab4:	2202      	movs	r2, #2
 8012ab6:	e749      	b.n	801294c <_dtoa_r+0x354>
 8012ab8:	465f      	mov	r7, fp
 8012aba:	4648      	mov	r0, r9
 8012abc:	e765      	b.n	801298a <_dtoa_r+0x392>
 8012abe:	ec42 1b17 	vmov	d7, r1, r2
 8012ac2:	4a5c      	ldr	r2, [pc, #368]	; (8012c34 <_dtoa_r+0x63c>)
 8012ac4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012ac8:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012acc:	9a00      	ldr	r2, [sp, #0]
 8012ace:	1814      	adds	r4, r2, r0
 8012ad0:	9a08      	ldr	r2, [sp, #32]
 8012ad2:	b352      	cbz	r2, 8012b2a <_dtoa_r+0x532>
 8012ad4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012ad8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012adc:	f8dd 8000 	ldr.w	r8, [sp]
 8012ae0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012ae4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012ae8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012aec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012af0:	ee14 2a90 	vmov	r2, s9
 8012af4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012af8:	3230      	adds	r2, #48	; 0x30
 8012afa:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012afe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b06:	f808 2b01 	strb.w	r2, [r8], #1
 8012b0a:	d439      	bmi.n	8012b80 <_dtoa_r+0x588>
 8012b0c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012b10:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b18:	d472      	bmi.n	8012c00 <_dtoa_r+0x608>
 8012b1a:	45a0      	cmp	r8, r4
 8012b1c:	f43f af5d 	beq.w	80129da <_dtoa_r+0x3e2>
 8012b20:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012b24:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012b28:	e7e0      	b.n	8012aec <_dtoa_r+0x4f4>
 8012b2a:	f8dd 8000 	ldr.w	r8, [sp]
 8012b2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012b32:	4621      	mov	r1, r4
 8012b34:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012b38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012b3c:	ee14 2a90 	vmov	r2, s9
 8012b40:	3230      	adds	r2, #48	; 0x30
 8012b42:	f808 2b01 	strb.w	r2, [r8], #1
 8012b46:	45a0      	cmp	r8, r4
 8012b48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012b4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012b50:	d118      	bne.n	8012b84 <_dtoa_r+0x58c>
 8012b52:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012b56:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012b5a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b62:	dc4d      	bgt.n	8012c00 <_dtoa_r+0x608>
 8012b64:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012b68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b70:	f57f af33 	bpl.w	80129da <_dtoa_r+0x3e2>
 8012b74:	4688      	mov	r8, r1
 8012b76:	3901      	subs	r1, #1
 8012b78:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8012b7c:	2b30      	cmp	r3, #48	; 0x30
 8012b7e:	d0f9      	beq.n	8012b74 <_dtoa_r+0x57c>
 8012b80:	46bb      	mov	fp, r7
 8012b82:	e02a      	b.n	8012bda <_dtoa_r+0x5e2>
 8012b84:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012b88:	e7d6      	b.n	8012b38 <_dtoa_r+0x540>
 8012b8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b8e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012b92:	f8dd 8000 	ldr.w	r8, [sp]
 8012b96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012b9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012b9e:	ee15 3a10 	vmov	r3, s10
 8012ba2:	3330      	adds	r3, #48	; 0x30
 8012ba4:	f808 3b01 	strb.w	r3, [r8], #1
 8012ba8:	9b00      	ldr	r3, [sp, #0]
 8012baa:	eba8 0303 	sub.w	r3, r8, r3
 8012bae:	4599      	cmp	r9, r3
 8012bb0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012bb4:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012bb8:	d133      	bne.n	8012c22 <_dtoa_r+0x62a>
 8012bba:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012bbe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bc6:	dc1a      	bgt.n	8012bfe <_dtoa_r+0x606>
 8012bc8:	eeb4 7b46 	vcmp.f64	d7, d6
 8012bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd0:	d103      	bne.n	8012bda <_dtoa_r+0x5e2>
 8012bd2:	ee15 3a10 	vmov	r3, s10
 8012bd6:	07d9      	lsls	r1, r3, #31
 8012bd8:	d411      	bmi.n	8012bfe <_dtoa_r+0x606>
 8012bda:	4629      	mov	r1, r5
 8012bdc:	4630      	mov	r0, r6
 8012bde:	f000 fd07 	bl	80135f0 <_Bfree>
 8012be2:	2300      	movs	r3, #0
 8012be4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012be6:	f888 3000 	strb.w	r3, [r8]
 8012bea:	f10b 0301 	add.w	r3, fp, #1
 8012bee:	6013      	str	r3, [r2, #0]
 8012bf0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	f43f ad4d 	beq.w	8012692 <_dtoa_r+0x9a>
 8012bf8:	f8c3 8000 	str.w	r8, [r3]
 8012bfc:	e549      	b.n	8012692 <_dtoa_r+0x9a>
 8012bfe:	465f      	mov	r7, fp
 8012c00:	4643      	mov	r3, r8
 8012c02:	4698      	mov	r8, r3
 8012c04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c08:	2a39      	cmp	r2, #57	; 0x39
 8012c0a:	d106      	bne.n	8012c1a <_dtoa_r+0x622>
 8012c0c:	9a00      	ldr	r2, [sp, #0]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d1f7      	bne.n	8012c02 <_dtoa_r+0x60a>
 8012c12:	9900      	ldr	r1, [sp, #0]
 8012c14:	2230      	movs	r2, #48	; 0x30
 8012c16:	3701      	adds	r7, #1
 8012c18:	700a      	strb	r2, [r1, #0]
 8012c1a:	781a      	ldrb	r2, [r3, #0]
 8012c1c:	3201      	adds	r2, #1
 8012c1e:	701a      	strb	r2, [r3, #0]
 8012c20:	e7ae      	b.n	8012b80 <_dtoa_r+0x588>
 8012c22:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012c26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c2e:	d1b2      	bne.n	8012b96 <_dtoa_r+0x59e>
 8012c30:	e7d3      	b.n	8012bda <_dtoa_r+0x5e2>
 8012c32:	bf00      	nop
 8012c34:	08014f28 	.word	0x08014f28
 8012c38:	08014f00 	.word	0x08014f00
 8012c3c:	9908      	ldr	r1, [sp, #32]
 8012c3e:	2900      	cmp	r1, #0
 8012c40:	f000 80d1 	beq.w	8012de6 <_dtoa_r+0x7ee>
 8012c44:	9907      	ldr	r1, [sp, #28]
 8012c46:	2901      	cmp	r1, #1
 8012c48:	f300 80b4 	bgt.w	8012db4 <_dtoa_r+0x7bc>
 8012c4c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012c4e:	2900      	cmp	r1, #0
 8012c50:	f000 80ac 	beq.w	8012dac <_dtoa_r+0x7b4>
 8012c54:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012c58:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012c5c:	461c      	mov	r4, r3
 8012c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8012c60:	9b05      	ldr	r3, [sp, #20]
 8012c62:	4413      	add	r3, r2
 8012c64:	9305      	str	r3, [sp, #20]
 8012c66:	9b06      	ldr	r3, [sp, #24]
 8012c68:	2101      	movs	r1, #1
 8012c6a:	4413      	add	r3, r2
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	9306      	str	r3, [sp, #24]
 8012c70:	f000 fd7a 	bl	8013768 <__i2b>
 8012c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c76:	4607      	mov	r7, r0
 8012c78:	f1b8 0f00 	cmp.w	r8, #0
 8012c7c:	dd0d      	ble.n	8012c9a <_dtoa_r+0x6a2>
 8012c7e:	9a06      	ldr	r2, [sp, #24]
 8012c80:	2a00      	cmp	r2, #0
 8012c82:	dd0a      	ble.n	8012c9a <_dtoa_r+0x6a2>
 8012c84:	4542      	cmp	r2, r8
 8012c86:	9905      	ldr	r1, [sp, #20]
 8012c88:	bfa8      	it	ge
 8012c8a:	4642      	movge	r2, r8
 8012c8c:	1a89      	subs	r1, r1, r2
 8012c8e:	9105      	str	r1, [sp, #20]
 8012c90:	9906      	ldr	r1, [sp, #24]
 8012c92:	eba8 0802 	sub.w	r8, r8, r2
 8012c96:	1a8a      	subs	r2, r1, r2
 8012c98:	9206      	str	r2, [sp, #24]
 8012c9a:	b303      	cbz	r3, 8012cde <_dtoa_r+0x6e6>
 8012c9c:	9a08      	ldr	r2, [sp, #32]
 8012c9e:	2a00      	cmp	r2, #0
 8012ca0:	f000 80a6 	beq.w	8012df0 <_dtoa_r+0x7f8>
 8012ca4:	2c00      	cmp	r4, #0
 8012ca6:	dd13      	ble.n	8012cd0 <_dtoa_r+0x6d8>
 8012ca8:	4639      	mov	r1, r7
 8012caa:	4622      	mov	r2, r4
 8012cac:	4630      	mov	r0, r6
 8012cae:	930c      	str	r3, [sp, #48]	; 0x30
 8012cb0:	f000 fe16 	bl	80138e0 <__pow5mult>
 8012cb4:	462a      	mov	r2, r5
 8012cb6:	4601      	mov	r1, r0
 8012cb8:	4607      	mov	r7, r0
 8012cba:	4630      	mov	r0, r6
 8012cbc:	f000 fd6a 	bl	8013794 <__multiply>
 8012cc0:	4629      	mov	r1, r5
 8012cc2:	900a      	str	r0, [sp, #40]	; 0x28
 8012cc4:	4630      	mov	r0, r6
 8012cc6:	f000 fc93 	bl	80135f0 <_Bfree>
 8012cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ccc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cce:	4615      	mov	r5, r2
 8012cd0:	1b1a      	subs	r2, r3, r4
 8012cd2:	d004      	beq.n	8012cde <_dtoa_r+0x6e6>
 8012cd4:	4629      	mov	r1, r5
 8012cd6:	4630      	mov	r0, r6
 8012cd8:	f000 fe02 	bl	80138e0 <__pow5mult>
 8012cdc:	4605      	mov	r5, r0
 8012cde:	2101      	movs	r1, #1
 8012ce0:	4630      	mov	r0, r6
 8012ce2:	f000 fd41 	bl	8013768 <__i2b>
 8012ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	4604      	mov	r4, r0
 8012cec:	f340 8082 	ble.w	8012df4 <_dtoa_r+0x7fc>
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	4601      	mov	r1, r0
 8012cf4:	4630      	mov	r0, r6
 8012cf6:	f000 fdf3 	bl	80138e0 <__pow5mult>
 8012cfa:	9b07      	ldr	r3, [sp, #28]
 8012cfc:	2b01      	cmp	r3, #1
 8012cfe:	4604      	mov	r4, r0
 8012d00:	dd7b      	ble.n	8012dfa <_dtoa_r+0x802>
 8012d02:	2300      	movs	r3, #0
 8012d04:	930a      	str	r3, [sp, #40]	; 0x28
 8012d06:	6922      	ldr	r2, [r4, #16]
 8012d08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012d0c:	6910      	ldr	r0, [r2, #16]
 8012d0e:	f000 fcdb 	bl	80136c8 <__hi0bits>
 8012d12:	f1c0 0020 	rsb	r0, r0, #32
 8012d16:	9b06      	ldr	r3, [sp, #24]
 8012d18:	4418      	add	r0, r3
 8012d1a:	f010 001f 	ands.w	r0, r0, #31
 8012d1e:	f000 808d 	beq.w	8012e3c <_dtoa_r+0x844>
 8012d22:	f1c0 0220 	rsb	r2, r0, #32
 8012d26:	2a04      	cmp	r2, #4
 8012d28:	f340 8086 	ble.w	8012e38 <_dtoa_r+0x840>
 8012d2c:	f1c0 001c 	rsb	r0, r0, #28
 8012d30:	9b05      	ldr	r3, [sp, #20]
 8012d32:	4403      	add	r3, r0
 8012d34:	9305      	str	r3, [sp, #20]
 8012d36:	9b06      	ldr	r3, [sp, #24]
 8012d38:	4403      	add	r3, r0
 8012d3a:	4480      	add	r8, r0
 8012d3c:	9306      	str	r3, [sp, #24]
 8012d3e:	9b05      	ldr	r3, [sp, #20]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	dd05      	ble.n	8012d50 <_dtoa_r+0x758>
 8012d44:	4629      	mov	r1, r5
 8012d46:	461a      	mov	r2, r3
 8012d48:	4630      	mov	r0, r6
 8012d4a:	f000 fe23 	bl	8013994 <__lshift>
 8012d4e:	4605      	mov	r5, r0
 8012d50:	9b06      	ldr	r3, [sp, #24]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	dd05      	ble.n	8012d62 <_dtoa_r+0x76a>
 8012d56:	4621      	mov	r1, r4
 8012d58:	461a      	mov	r2, r3
 8012d5a:	4630      	mov	r0, r6
 8012d5c:	f000 fe1a 	bl	8013994 <__lshift>
 8012d60:	4604      	mov	r4, r0
 8012d62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d06b      	beq.n	8012e40 <_dtoa_r+0x848>
 8012d68:	4621      	mov	r1, r4
 8012d6a:	4628      	mov	r0, r5
 8012d6c:	f000 fe7e 	bl	8013a6c <__mcmp>
 8012d70:	2800      	cmp	r0, #0
 8012d72:	da65      	bge.n	8012e40 <_dtoa_r+0x848>
 8012d74:	2300      	movs	r3, #0
 8012d76:	4629      	mov	r1, r5
 8012d78:	220a      	movs	r2, #10
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	f000 fc5a 	bl	8013634 <__multadd>
 8012d80:	9b08      	ldr	r3, [sp, #32]
 8012d82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d86:	4605      	mov	r5, r0
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	f000 8192 	beq.w	80130b2 <_dtoa_r+0xaba>
 8012d8e:	4639      	mov	r1, r7
 8012d90:	2300      	movs	r3, #0
 8012d92:	220a      	movs	r2, #10
 8012d94:	4630      	mov	r0, r6
 8012d96:	f000 fc4d 	bl	8013634 <__multadd>
 8012d9a:	f1ba 0f00 	cmp.w	sl, #0
 8012d9e:	4607      	mov	r7, r0
 8012da0:	f300 808e 	bgt.w	8012ec0 <_dtoa_r+0x8c8>
 8012da4:	9b07      	ldr	r3, [sp, #28]
 8012da6:	2b02      	cmp	r3, #2
 8012da8:	dc51      	bgt.n	8012e4e <_dtoa_r+0x856>
 8012daa:	e089      	b.n	8012ec0 <_dtoa_r+0x8c8>
 8012dac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012dae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012db2:	e751      	b.n	8012c58 <_dtoa_r+0x660>
 8012db4:	f109 34ff 	add.w	r4, r9, #4294967295
 8012db8:	42a3      	cmp	r3, r4
 8012dba:	bfbf      	itttt	lt
 8012dbc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8012dbe:	1ae3      	sublt	r3, r4, r3
 8012dc0:	18d2      	addlt	r2, r2, r3
 8012dc2:	4613      	movlt	r3, r2
 8012dc4:	bfb7      	itett	lt
 8012dc6:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012dc8:	1b1c      	subge	r4, r3, r4
 8012dca:	4623      	movlt	r3, r4
 8012dcc:	2400      	movlt	r4, #0
 8012dce:	f1b9 0f00 	cmp.w	r9, #0
 8012dd2:	bfb5      	itete	lt
 8012dd4:	9a05      	ldrlt	r2, [sp, #20]
 8012dd6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8012dda:	eba2 0809 	sublt.w	r8, r2, r9
 8012dde:	464a      	movge	r2, r9
 8012de0:	bfb8      	it	lt
 8012de2:	2200      	movlt	r2, #0
 8012de4:	e73b      	b.n	8012c5e <_dtoa_r+0x666>
 8012de6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012dea:	9f08      	ldr	r7, [sp, #32]
 8012dec:	461c      	mov	r4, r3
 8012dee:	e743      	b.n	8012c78 <_dtoa_r+0x680>
 8012df0:	461a      	mov	r2, r3
 8012df2:	e76f      	b.n	8012cd4 <_dtoa_r+0x6dc>
 8012df4:	9b07      	ldr	r3, [sp, #28]
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	dc18      	bgt.n	8012e2c <_dtoa_r+0x834>
 8012dfa:	9b02      	ldr	r3, [sp, #8]
 8012dfc:	b9b3      	cbnz	r3, 8012e2c <_dtoa_r+0x834>
 8012dfe:	9b03      	ldr	r3, [sp, #12]
 8012e00:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8012e04:	b9a2      	cbnz	r2, 8012e30 <_dtoa_r+0x838>
 8012e06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8012e0a:	0d12      	lsrs	r2, r2, #20
 8012e0c:	0512      	lsls	r2, r2, #20
 8012e0e:	b18a      	cbz	r2, 8012e34 <_dtoa_r+0x83c>
 8012e10:	9b05      	ldr	r3, [sp, #20]
 8012e12:	3301      	adds	r3, #1
 8012e14:	9305      	str	r3, [sp, #20]
 8012e16:	9b06      	ldr	r3, [sp, #24]
 8012e18:	3301      	adds	r3, #1
 8012e1a:	9306      	str	r3, [sp, #24]
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8012e20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	f47f af6f 	bne.w	8012d06 <_dtoa_r+0x70e>
 8012e28:	2001      	movs	r0, #1
 8012e2a:	e774      	b.n	8012d16 <_dtoa_r+0x71e>
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	e7f6      	b.n	8012e1e <_dtoa_r+0x826>
 8012e30:	9b02      	ldr	r3, [sp, #8]
 8012e32:	e7f4      	b.n	8012e1e <_dtoa_r+0x826>
 8012e34:	920a      	str	r2, [sp, #40]	; 0x28
 8012e36:	e7f3      	b.n	8012e20 <_dtoa_r+0x828>
 8012e38:	d081      	beq.n	8012d3e <_dtoa_r+0x746>
 8012e3a:	4610      	mov	r0, r2
 8012e3c:	301c      	adds	r0, #28
 8012e3e:	e777      	b.n	8012d30 <_dtoa_r+0x738>
 8012e40:	f1b9 0f00 	cmp.w	r9, #0
 8012e44:	dc37      	bgt.n	8012eb6 <_dtoa_r+0x8be>
 8012e46:	9b07      	ldr	r3, [sp, #28]
 8012e48:	2b02      	cmp	r3, #2
 8012e4a:	dd34      	ble.n	8012eb6 <_dtoa_r+0x8be>
 8012e4c:	46ca      	mov	sl, r9
 8012e4e:	f1ba 0f00 	cmp.w	sl, #0
 8012e52:	d10d      	bne.n	8012e70 <_dtoa_r+0x878>
 8012e54:	4621      	mov	r1, r4
 8012e56:	4653      	mov	r3, sl
 8012e58:	2205      	movs	r2, #5
 8012e5a:	4630      	mov	r0, r6
 8012e5c:	f000 fbea 	bl	8013634 <__multadd>
 8012e60:	4601      	mov	r1, r0
 8012e62:	4604      	mov	r4, r0
 8012e64:	4628      	mov	r0, r5
 8012e66:	f000 fe01 	bl	8013a6c <__mcmp>
 8012e6a:	2800      	cmp	r0, #0
 8012e6c:	f73f adde 	bgt.w	8012a2c <_dtoa_r+0x434>
 8012e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e72:	f8dd 8000 	ldr.w	r8, [sp]
 8012e76:	ea6f 0b03 	mvn.w	fp, r3
 8012e7a:	f04f 0900 	mov.w	r9, #0
 8012e7e:	4621      	mov	r1, r4
 8012e80:	4630      	mov	r0, r6
 8012e82:	f000 fbb5 	bl	80135f0 <_Bfree>
 8012e86:	2f00      	cmp	r7, #0
 8012e88:	f43f aea7 	beq.w	8012bda <_dtoa_r+0x5e2>
 8012e8c:	f1b9 0f00 	cmp.w	r9, #0
 8012e90:	d005      	beq.n	8012e9e <_dtoa_r+0x8a6>
 8012e92:	45b9      	cmp	r9, r7
 8012e94:	d003      	beq.n	8012e9e <_dtoa_r+0x8a6>
 8012e96:	4649      	mov	r1, r9
 8012e98:	4630      	mov	r0, r6
 8012e9a:	f000 fba9 	bl	80135f0 <_Bfree>
 8012e9e:	4639      	mov	r1, r7
 8012ea0:	4630      	mov	r0, r6
 8012ea2:	f000 fba5 	bl	80135f0 <_Bfree>
 8012ea6:	e698      	b.n	8012bda <_dtoa_r+0x5e2>
 8012ea8:	2400      	movs	r4, #0
 8012eaa:	4627      	mov	r7, r4
 8012eac:	e7e0      	b.n	8012e70 <_dtoa_r+0x878>
 8012eae:	46bb      	mov	fp, r7
 8012eb0:	4604      	mov	r4, r0
 8012eb2:	4607      	mov	r7, r0
 8012eb4:	e5ba      	b.n	8012a2c <_dtoa_r+0x434>
 8012eb6:	9b08      	ldr	r3, [sp, #32]
 8012eb8:	46ca      	mov	sl, r9
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	f000 8100 	beq.w	80130c0 <_dtoa_r+0xac8>
 8012ec0:	f1b8 0f00 	cmp.w	r8, #0
 8012ec4:	dd05      	ble.n	8012ed2 <_dtoa_r+0x8da>
 8012ec6:	4639      	mov	r1, r7
 8012ec8:	4642      	mov	r2, r8
 8012eca:	4630      	mov	r0, r6
 8012ecc:	f000 fd62 	bl	8013994 <__lshift>
 8012ed0:	4607      	mov	r7, r0
 8012ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d05d      	beq.n	8012f94 <_dtoa_r+0x99c>
 8012ed8:	6879      	ldr	r1, [r7, #4]
 8012eda:	4630      	mov	r0, r6
 8012edc:	f000 fb48 	bl	8013570 <_Balloc>
 8012ee0:	4680      	mov	r8, r0
 8012ee2:	b928      	cbnz	r0, 8012ef0 <_dtoa_r+0x8f8>
 8012ee4:	4b82      	ldr	r3, [pc, #520]	; (80130f0 <_dtoa_r+0xaf8>)
 8012ee6:	4602      	mov	r2, r0
 8012ee8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012eec:	f7ff bb9a 	b.w	8012624 <_dtoa_r+0x2c>
 8012ef0:	693a      	ldr	r2, [r7, #16]
 8012ef2:	3202      	adds	r2, #2
 8012ef4:	0092      	lsls	r2, r2, #2
 8012ef6:	f107 010c 	add.w	r1, r7, #12
 8012efa:	300c      	adds	r0, #12
 8012efc:	f000 fb2a 	bl	8013554 <memcpy>
 8012f00:	2201      	movs	r2, #1
 8012f02:	4641      	mov	r1, r8
 8012f04:	4630      	mov	r0, r6
 8012f06:	f000 fd45 	bl	8013994 <__lshift>
 8012f0a:	9b00      	ldr	r3, [sp, #0]
 8012f0c:	3301      	adds	r3, #1
 8012f0e:	9305      	str	r3, [sp, #20]
 8012f10:	9b00      	ldr	r3, [sp, #0]
 8012f12:	4453      	add	r3, sl
 8012f14:	9309      	str	r3, [sp, #36]	; 0x24
 8012f16:	9b02      	ldr	r3, [sp, #8]
 8012f18:	f003 0301 	and.w	r3, r3, #1
 8012f1c:	46b9      	mov	r9, r7
 8012f1e:	9308      	str	r3, [sp, #32]
 8012f20:	4607      	mov	r7, r0
 8012f22:	9b05      	ldr	r3, [sp, #20]
 8012f24:	4621      	mov	r1, r4
 8012f26:	3b01      	subs	r3, #1
 8012f28:	4628      	mov	r0, r5
 8012f2a:	9302      	str	r3, [sp, #8]
 8012f2c:	f7ff fad8 	bl	80124e0 <quorem>
 8012f30:	4603      	mov	r3, r0
 8012f32:	3330      	adds	r3, #48	; 0x30
 8012f34:	9006      	str	r0, [sp, #24]
 8012f36:	4649      	mov	r1, r9
 8012f38:	4628      	mov	r0, r5
 8012f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f3c:	f000 fd96 	bl	8013a6c <__mcmp>
 8012f40:	463a      	mov	r2, r7
 8012f42:	4682      	mov	sl, r0
 8012f44:	4621      	mov	r1, r4
 8012f46:	4630      	mov	r0, r6
 8012f48:	f000 fdac 	bl	8013aa4 <__mdiff>
 8012f4c:	68c2      	ldr	r2, [r0, #12]
 8012f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f50:	4680      	mov	r8, r0
 8012f52:	bb0a      	cbnz	r2, 8012f98 <_dtoa_r+0x9a0>
 8012f54:	4601      	mov	r1, r0
 8012f56:	4628      	mov	r0, r5
 8012f58:	f000 fd88 	bl	8013a6c <__mcmp>
 8012f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f5e:	4602      	mov	r2, r0
 8012f60:	4641      	mov	r1, r8
 8012f62:	4630      	mov	r0, r6
 8012f64:	920e      	str	r2, [sp, #56]	; 0x38
 8012f66:	930a      	str	r3, [sp, #40]	; 0x28
 8012f68:	f000 fb42 	bl	80135f0 <_Bfree>
 8012f6c:	9b07      	ldr	r3, [sp, #28]
 8012f6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012f70:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8012f74:	ea43 0102 	orr.w	r1, r3, r2
 8012f78:	9b08      	ldr	r3, [sp, #32]
 8012f7a:	430b      	orrs	r3, r1
 8012f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f7e:	d10d      	bne.n	8012f9c <_dtoa_r+0x9a4>
 8012f80:	2b39      	cmp	r3, #57	; 0x39
 8012f82:	d029      	beq.n	8012fd8 <_dtoa_r+0x9e0>
 8012f84:	f1ba 0f00 	cmp.w	sl, #0
 8012f88:	dd01      	ble.n	8012f8e <_dtoa_r+0x996>
 8012f8a:	9b06      	ldr	r3, [sp, #24]
 8012f8c:	3331      	adds	r3, #49	; 0x31
 8012f8e:	9a02      	ldr	r2, [sp, #8]
 8012f90:	7013      	strb	r3, [r2, #0]
 8012f92:	e774      	b.n	8012e7e <_dtoa_r+0x886>
 8012f94:	4638      	mov	r0, r7
 8012f96:	e7b8      	b.n	8012f0a <_dtoa_r+0x912>
 8012f98:	2201      	movs	r2, #1
 8012f9a:	e7e1      	b.n	8012f60 <_dtoa_r+0x968>
 8012f9c:	f1ba 0f00 	cmp.w	sl, #0
 8012fa0:	db06      	blt.n	8012fb0 <_dtoa_r+0x9b8>
 8012fa2:	9907      	ldr	r1, [sp, #28]
 8012fa4:	ea41 0a0a 	orr.w	sl, r1, sl
 8012fa8:	9908      	ldr	r1, [sp, #32]
 8012faa:	ea5a 0101 	orrs.w	r1, sl, r1
 8012fae:	d120      	bne.n	8012ff2 <_dtoa_r+0x9fa>
 8012fb0:	2a00      	cmp	r2, #0
 8012fb2:	ddec      	ble.n	8012f8e <_dtoa_r+0x996>
 8012fb4:	4629      	mov	r1, r5
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	4630      	mov	r0, r6
 8012fba:	9305      	str	r3, [sp, #20]
 8012fbc:	f000 fcea 	bl	8013994 <__lshift>
 8012fc0:	4621      	mov	r1, r4
 8012fc2:	4605      	mov	r5, r0
 8012fc4:	f000 fd52 	bl	8013a6c <__mcmp>
 8012fc8:	2800      	cmp	r0, #0
 8012fca:	9b05      	ldr	r3, [sp, #20]
 8012fcc:	dc02      	bgt.n	8012fd4 <_dtoa_r+0x9dc>
 8012fce:	d1de      	bne.n	8012f8e <_dtoa_r+0x996>
 8012fd0:	07da      	lsls	r2, r3, #31
 8012fd2:	d5dc      	bpl.n	8012f8e <_dtoa_r+0x996>
 8012fd4:	2b39      	cmp	r3, #57	; 0x39
 8012fd6:	d1d8      	bne.n	8012f8a <_dtoa_r+0x992>
 8012fd8:	9a02      	ldr	r2, [sp, #8]
 8012fda:	2339      	movs	r3, #57	; 0x39
 8012fdc:	7013      	strb	r3, [r2, #0]
 8012fde:	4643      	mov	r3, r8
 8012fe0:	4698      	mov	r8, r3
 8012fe2:	3b01      	subs	r3, #1
 8012fe4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8012fe8:	2a39      	cmp	r2, #57	; 0x39
 8012fea:	d051      	beq.n	8013090 <_dtoa_r+0xa98>
 8012fec:	3201      	adds	r2, #1
 8012fee:	701a      	strb	r2, [r3, #0]
 8012ff0:	e745      	b.n	8012e7e <_dtoa_r+0x886>
 8012ff2:	2a00      	cmp	r2, #0
 8012ff4:	dd03      	ble.n	8012ffe <_dtoa_r+0xa06>
 8012ff6:	2b39      	cmp	r3, #57	; 0x39
 8012ff8:	d0ee      	beq.n	8012fd8 <_dtoa_r+0x9e0>
 8012ffa:	3301      	adds	r3, #1
 8012ffc:	e7c7      	b.n	8012f8e <_dtoa_r+0x996>
 8012ffe:	9a05      	ldr	r2, [sp, #20]
 8013000:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013002:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013006:	428a      	cmp	r2, r1
 8013008:	d02b      	beq.n	8013062 <_dtoa_r+0xa6a>
 801300a:	4629      	mov	r1, r5
 801300c:	2300      	movs	r3, #0
 801300e:	220a      	movs	r2, #10
 8013010:	4630      	mov	r0, r6
 8013012:	f000 fb0f 	bl	8013634 <__multadd>
 8013016:	45b9      	cmp	r9, r7
 8013018:	4605      	mov	r5, r0
 801301a:	f04f 0300 	mov.w	r3, #0
 801301e:	f04f 020a 	mov.w	r2, #10
 8013022:	4649      	mov	r1, r9
 8013024:	4630      	mov	r0, r6
 8013026:	d107      	bne.n	8013038 <_dtoa_r+0xa40>
 8013028:	f000 fb04 	bl	8013634 <__multadd>
 801302c:	4681      	mov	r9, r0
 801302e:	4607      	mov	r7, r0
 8013030:	9b05      	ldr	r3, [sp, #20]
 8013032:	3301      	adds	r3, #1
 8013034:	9305      	str	r3, [sp, #20]
 8013036:	e774      	b.n	8012f22 <_dtoa_r+0x92a>
 8013038:	f000 fafc 	bl	8013634 <__multadd>
 801303c:	4639      	mov	r1, r7
 801303e:	4681      	mov	r9, r0
 8013040:	2300      	movs	r3, #0
 8013042:	220a      	movs	r2, #10
 8013044:	4630      	mov	r0, r6
 8013046:	f000 faf5 	bl	8013634 <__multadd>
 801304a:	4607      	mov	r7, r0
 801304c:	e7f0      	b.n	8013030 <_dtoa_r+0xa38>
 801304e:	f1ba 0f00 	cmp.w	sl, #0
 8013052:	9a00      	ldr	r2, [sp, #0]
 8013054:	bfcc      	ite	gt
 8013056:	46d0      	movgt	r8, sl
 8013058:	f04f 0801 	movle.w	r8, #1
 801305c:	4490      	add	r8, r2
 801305e:	f04f 0900 	mov.w	r9, #0
 8013062:	4629      	mov	r1, r5
 8013064:	2201      	movs	r2, #1
 8013066:	4630      	mov	r0, r6
 8013068:	9302      	str	r3, [sp, #8]
 801306a:	f000 fc93 	bl	8013994 <__lshift>
 801306e:	4621      	mov	r1, r4
 8013070:	4605      	mov	r5, r0
 8013072:	f000 fcfb 	bl	8013a6c <__mcmp>
 8013076:	2800      	cmp	r0, #0
 8013078:	dcb1      	bgt.n	8012fde <_dtoa_r+0x9e6>
 801307a:	d102      	bne.n	8013082 <_dtoa_r+0xa8a>
 801307c:	9b02      	ldr	r3, [sp, #8]
 801307e:	07db      	lsls	r3, r3, #31
 8013080:	d4ad      	bmi.n	8012fde <_dtoa_r+0x9e6>
 8013082:	4643      	mov	r3, r8
 8013084:	4698      	mov	r8, r3
 8013086:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801308a:	2a30      	cmp	r2, #48	; 0x30
 801308c:	d0fa      	beq.n	8013084 <_dtoa_r+0xa8c>
 801308e:	e6f6      	b.n	8012e7e <_dtoa_r+0x886>
 8013090:	9a00      	ldr	r2, [sp, #0]
 8013092:	429a      	cmp	r2, r3
 8013094:	d1a4      	bne.n	8012fe0 <_dtoa_r+0x9e8>
 8013096:	f10b 0b01 	add.w	fp, fp, #1
 801309a:	2331      	movs	r3, #49	; 0x31
 801309c:	e778      	b.n	8012f90 <_dtoa_r+0x998>
 801309e:	4b15      	ldr	r3, [pc, #84]	; (80130f4 <_dtoa_r+0xafc>)
 80130a0:	f7ff bb12 	b.w	80126c8 <_dtoa_r+0xd0>
 80130a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	f47f aaee 	bne.w	8012688 <_dtoa_r+0x90>
 80130ac:	4b12      	ldr	r3, [pc, #72]	; (80130f8 <_dtoa_r+0xb00>)
 80130ae:	f7ff bb0b 	b.w	80126c8 <_dtoa_r+0xd0>
 80130b2:	f1ba 0f00 	cmp.w	sl, #0
 80130b6:	dc03      	bgt.n	80130c0 <_dtoa_r+0xac8>
 80130b8:	9b07      	ldr	r3, [sp, #28]
 80130ba:	2b02      	cmp	r3, #2
 80130bc:	f73f aec7 	bgt.w	8012e4e <_dtoa_r+0x856>
 80130c0:	f8dd 8000 	ldr.w	r8, [sp]
 80130c4:	4621      	mov	r1, r4
 80130c6:	4628      	mov	r0, r5
 80130c8:	f7ff fa0a 	bl	80124e0 <quorem>
 80130cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80130d0:	f808 3b01 	strb.w	r3, [r8], #1
 80130d4:	9a00      	ldr	r2, [sp, #0]
 80130d6:	eba8 0202 	sub.w	r2, r8, r2
 80130da:	4592      	cmp	sl, r2
 80130dc:	ddb7      	ble.n	801304e <_dtoa_r+0xa56>
 80130de:	4629      	mov	r1, r5
 80130e0:	2300      	movs	r3, #0
 80130e2:	220a      	movs	r2, #10
 80130e4:	4630      	mov	r0, r6
 80130e6:	f000 faa5 	bl	8013634 <__multadd>
 80130ea:	4605      	mov	r5, r0
 80130ec:	e7ea      	b.n	80130c4 <_dtoa_r+0xacc>
 80130ee:	bf00      	nop
 80130f0:	08014e2f 	.word	0x08014e2f
 80130f4:	08014d88 	.word	0x08014d88
 80130f8:	08014dac 	.word	0x08014dac

080130fc <__sflush_r>:
 80130fc:	898a      	ldrh	r2, [r1, #12]
 80130fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013102:	4605      	mov	r5, r0
 8013104:	0710      	lsls	r0, r2, #28
 8013106:	460c      	mov	r4, r1
 8013108:	d458      	bmi.n	80131bc <__sflush_r+0xc0>
 801310a:	684b      	ldr	r3, [r1, #4]
 801310c:	2b00      	cmp	r3, #0
 801310e:	dc05      	bgt.n	801311c <__sflush_r+0x20>
 8013110:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013112:	2b00      	cmp	r3, #0
 8013114:	dc02      	bgt.n	801311c <__sflush_r+0x20>
 8013116:	2000      	movs	r0, #0
 8013118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801311c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801311e:	2e00      	cmp	r6, #0
 8013120:	d0f9      	beq.n	8013116 <__sflush_r+0x1a>
 8013122:	2300      	movs	r3, #0
 8013124:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013128:	682f      	ldr	r7, [r5, #0]
 801312a:	602b      	str	r3, [r5, #0]
 801312c:	d032      	beq.n	8013194 <__sflush_r+0x98>
 801312e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013130:	89a3      	ldrh	r3, [r4, #12]
 8013132:	075a      	lsls	r2, r3, #29
 8013134:	d505      	bpl.n	8013142 <__sflush_r+0x46>
 8013136:	6863      	ldr	r3, [r4, #4]
 8013138:	1ac0      	subs	r0, r0, r3
 801313a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801313c:	b10b      	cbz	r3, 8013142 <__sflush_r+0x46>
 801313e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013140:	1ac0      	subs	r0, r0, r3
 8013142:	2300      	movs	r3, #0
 8013144:	4602      	mov	r2, r0
 8013146:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013148:	6a21      	ldr	r1, [r4, #32]
 801314a:	4628      	mov	r0, r5
 801314c:	47b0      	blx	r6
 801314e:	1c43      	adds	r3, r0, #1
 8013150:	89a3      	ldrh	r3, [r4, #12]
 8013152:	d106      	bne.n	8013162 <__sflush_r+0x66>
 8013154:	6829      	ldr	r1, [r5, #0]
 8013156:	291d      	cmp	r1, #29
 8013158:	d82c      	bhi.n	80131b4 <__sflush_r+0xb8>
 801315a:	4a2a      	ldr	r2, [pc, #168]	; (8013204 <__sflush_r+0x108>)
 801315c:	40ca      	lsrs	r2, r1
 801315e:	07d6      	lsls	r6, r2, #31
 8013160:	d528      	bpl.n	80131b4 <__sflush_r+0xb8>
 8013162:	2200      	movs	r2, #0
 8013164:	6062      	str	r2, [r4, #4]
 8013166:	04d9      	lsls	r1, r3, #19
 8013168:	6922      	ldr	r2, [r4, #16]
 801316a:	6022      	str	r2, [r4, #0]
 801316c:	d504      	bpl.n	8013178 <__sflush_r+0x7c>
 801316e:	1c42      	adds	r2, r0, #1
 8013170:	d101      	bne.n	8013176 <__sflush_r+0x7a>
 8013172:	682b      	ldr	r3, [r5, #0]
 8013174:	b903      	cbnz	r3, 8013178 <__sflush_r+0x7c>
 8013176:	6560      	str	r0, [r4, #84]	; 0x54
 8013178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801317a:	602f      	str	r7, [r5, #0]
 801317c:	2900      	cmp	r1, #0
 801317e:	d0ca      	beq.n	8013116 <__sflush_r+0x1a>
 8013180:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013184:	4299      	cmp	r1, r3
 8013186:	d002      	beq.n	801318e <__sflush_r+0x92>
 8013188:	4628      	mov	r0, r5
 801318a:	f000 fd7f 	bl	8013c8c <_free_r>
 801318e:	2000      	movs	r0, #0
 8013190:	6360      	str	r0, [r4, #52]	; 0x34
 8013192:	e7c1      	b.n	8013118 <__sflush_r+0x1c>
 8013194:	6a21      	ldr	r1, [r4, #32]
 8013196:	2301      	movs	r3, #1
 8013198:	4628      	mov	r0, r5
 801319a:	47b0      	blx	r6
 801319c:	1c41      	adds	r1, r0, #1
 801319e:	d1c7      	bne.n	8013130 <__sflush_r+0x34>
 80131a0:	682b      	ldr	r3, [r5, #0]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d0c4      	beq.n	8013130 <__sflush_r+0x34>
 80131a6:	2b1d      	cmp	r3, #29
 80131a8:	d001      	beq.n	80131ae <__sflush_r+0xb2>
 80131aa:	2b16      	cmp	r3, #22
 80131ac:	d101      	bne.n	80131b2 <__sflush_r+0xb6>
 80131ae:	602f      	str	r7, [r5, #0]
 80131b0:	e7b1      	b.n	8013116 <__sflush_r+0x1a>
 80131b2:	89a3      	ldrh	r3, [r4, #12]
 80131b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131b8:	81a3      	strh	r3, [r4, #12]
 80131ba:	e7ad      	b.n	8013118 <__sflush_r+0x1c>
 80131bc:	690f      	ldr	r7, [r1, #16]
 80131be:	2f00      	cmp	r7, #0
 80131c0:	d0a9      	beq.n	8013116 <__sflush_r+0x1a>
 80131c2:	0793      	lsls	r3, r2, #30
 80131c4:	680e      	ldr	r6, [r1, #0]
 80131c6:	bf08      	it	eq
 80131c8:	694b      	ldreq	r3, [r1, #20]
 80131ca:	600f      	str	r7, [r1, #0]
 80131cc:	bf18      	it	ne
 80131ce:	2300      	movne	r3, #0
 80131d0:	eba6 0807 	sub.w	r8, r6, r7
 80131d4:	608b      	str	r3, [r1, #8]
 80131d6:	f1b8 0f00 	cmp.w	r8, #0
 80131da:	dd9c      	ble.n	8013116 <__sflush_r+0x1a>
 80131dc:	6a21      	ldr	r1, [r4, #32]
 80131de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80131e0:	4643      	mov	r3, r8
 80131e2:	463a      	mov	r2, r7
 80131e4:	4628      	mov	r0, r5
 80131e6:	47b0      	blx	r6
 80131e8:	2800      	cmp	r0, #0
 80131ea:	dc06      	bgt.n	80131fa <__sflush_r+0xfe>
 80131ec:	89a3      	ldrh	r3, [r4, #12]
 80131ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131f2:	81a3      	strh	r3, [r4, #12]
 80131f4:	f04f 30ff 	mov.w	r0, #4294967295
 80131f8:	e78e      	b.n	8013118 <__sflush_r+0x1c>
 80131fa:	4407      	add	r7, r0
 80131fc:	eba8 0800 	sub.w	r8, r8, r0
 8013200:	e7e9      	b.n	80131d6 <__sflush_r+0xda>
 8013202:	bf00      	nop
 8013204:	20400001 	.word	0x20400001

08013208 <_fflush_r>:
 8013208:	b538      	push	{r3, r4, r5, lr}
 801320a:	690b      	ldr	r3, [r1, #16]
 801320c:	4605      	mov	r5, r0
 801320e:	460c      	mov	r4, r1
 8013210:	b913      	cbnz	r3, 8013218 <_fflush_r+0x10>
 8013212:	2500      	movs	r5, #0
 8013214:	4628      	mov	r0, r5
 8013216:	bd38      	pop	{r3, r4, r5, pc}
 8013218:	b118      	cbz	r0, 8013222 <_fflush_r+0x1a>
 801321a:	6983      	ldr	r3, [r0, #24]
 801321c:	b90b      	cbnz	r3, 8013222 <_fflush_r+0x1a>
 801321e:	f000 f887 	bl	8013330 <__sinit>
 8013222:	4b14      	ldr	r3, [pc, #80]	; (8013274 <_fflush_r+0x6c>)
 8013224:	429c      	cmp	r4, r3
 8013226:	d11b      	bne.n	8013260 <_fflush_r+0x58>
 8013228:	686c      	ldr	r4, [r5, #4]
 801322a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d0ef      	beq.n	8013212 <_fflush_r+0xa>
 8013232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013234:	07d0      	lsls	r0, r2, #31
 8013236:	d404      	bmi.n	8013242 <_fflush_r+0x3a>
 8013238:	0599      	lsls	r1, r3, #22
 801323a:	d402      	bmi.n	8013242 <_fflush_r+0x3a>
 801323c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801323e:	f000 f91a 	bl	8013476 <__retarget_lock_acquire_recursive>
 8013242:	4628      	mov	r0, r5
 8013244:	4621      	mov	r1, r4
 8013246:	f7ff ff59 	bl	80130fc <__sflush_r>
 801324a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801324c:	07da      	lsls	r2, r3, #31
 801324e:	4605      	mov	r5, r0
 8013250:	d4e0      	bmi.n	8013214 <_fflush_r+0xc>
 8013252:	89a3      	ldrh	r3, [r4, #12]
 8013254:	059b      	lsls	r3, r3, #22
 8013256:	d4dd      	bmi.n	8013214 <_fflush_r+0xc>
 8013258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801325a:	f000 f90d 	bl	8013478 <__retarget_lock_release_recursive>
 801325e:	e7d9      	b.n	8013214 <_fflush_r+0xc>
 8013260:	4b05      	ldr	r3, [pc, #20]	; (8013278 <_fflush_r+0x70>)
 8013262:	429c      	cmp	r4, r3
 8013264:	d101      	bne.n	801326a <_fflush_r+0x62>
 8013266:	68ac      	ldr	r4, [r5, #8]
 8013268:	e7df      	b.n	801322a <_fflush_r+0x22>
 801326a:	4b04      	ldr	r3, [pc, #16]	; (801327c <_fflush_r+0x74>)
 801326c:	429c      	cmp	r4, r3
 801326e:	bf08      	it	eq
 8013270:	68ec      	ldreq	r4, [r5, #12]
 8013272:	e7da      	b.n	801322a <_fflush_r+0x22>
 8013274:	08014e60 	.word	0x08014e60
 8013278:	08014e80 	.word	0x08014e80
 801327c:	08014e40 	.word	0x08014e40

08013280 <std>:
 8013280:	2300      	movs	r3, #0
 8013282:	b510      	push	{r4, lr}
 8013284:	4604      	mov	r4, r0
 8013286:	e9c0 3300 	strd	r3, r3, [r0]
 801328a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801328e:	6083      	str	r3, [r0, #8]
 8013290:	8181      	strh	r1, [r0, #12]
 8013292:	6643      	str	r3, [r0, #100]	; 0x64
 8013294:	81c2      	strh	r2, [r0, #14]
 8013296:	6183      	str	r3, [r0, #24]
 8013298:	4619      	mov	r1, r3
 801329a:	2208      	movs	r2, #8
 801329c:	305c      	adds	r0, #92	; 0x5c
 801329e:	f7fe fb87 	bl	80119b0 <memset>
 80132a2:	4b05      	ldr	r3, [pc, #20]	; (80132b8 <std+0x38>)
 80132a4:	6263      	str	r3, [r4, #36]	; 0x24
 80132a6:	4b05      	ldr	r3, [pc, #20]	; (80132bc <std+0x3c>)
 80132a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80132aa:	4b05      	ldr	r3, [pc, #20]	; (80132c0 <std+0x40>)
 80132ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80132ae:	4b05      	ldr	r3, [pc, #20]	; (80132c4 <std+0x44>)
 80132b0:	6224      	str	r4, [r4, #32]
 80132b2:	6323      	str	r3, [r4, #48]	; 0x30
 80132b4:	bd10      	pop	{r4, pc}
 80132b6:	bf00      	nop
 80132b8:	080140b5 	.word	0x080140b5
 80132bc:	080140d7 	.word	0x080140d7
 80132c0:	0801410f 	.word	0x0801410f
 80132c4:	08014133 	.word	0x08014133

080132c8 <_cleanup_r>:
 80132c8:	4901      	ldr	r1, [pc, #4]	; (80132d0 <_cleanup_r+0x8>)
 80132ca:	f000 b8af 	b.w	801342c <_fwalk_reent>
 80132ce:	bf00      	nop
 80132d0:	08013209 	.word	0x08013209

080132d4 <__sfmoreglue>:
 80132d4:	b570      	push	{r4, r5, r6, lr}
 80132d6:	1e4a      	subs	r2, r1, #1
 80132d8:	2568      	movs	r5, #104	; 0x68
 80132da:	4355      	muls	r5, r2
 80132dc:	460e      	mov	r6, r1
 80132de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80132e2:	f000 fd23 	bl	8013d2c <_malloc_r>
 80132e6:	4604      	mov	r4, r0
 80132e8:	b140      	cbz	r0, 80132fc <__sfmoreglue+0x28>
 80132ea:	2100      	movs	r1, #0
 80132ec:	e9c0 1600 	strd	r1, r6, [r0]
 80132f0:	300c      	adds	r0, #12
 80132f2:	60a0      	str	r0, [r4, #8]
 80132f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80132f8:	f7fe fb5a 	bl	80119b0 <memset>
 80132fc:	4620      	mov	r0, r4
 80132fe:	bd70      	pop	{r4, r5, r6, pc}

08013300 <__sfp_lock_acquire>:
 8013300:	4801      	ldr	r0, [pc, #4]	; (8013308 <__sfp_lock_acquire+0x8>)
 8013302:	f000 b8b8 	b.w	8013476 <__retarget_lock_acquire_recursive>
 8013306:	bf00      	nop
 8013308:	2400086c 	.word	0x2400086c

0801330c <__sfp_lock_release>:
 801330c:	4801      	ldr	r0, [pc, #4]	; (8013314 <__sfp_lock_release+0x8>)
 801330e:	f000 b8b3 	b.w	8013478 <__retarget_lock_release_recursive>
 8013312:	bf00      	nop
 8013314:	2400086c 	.word	0x2400086c

08013318 <__sinit_lock_acquire>:
 8013318:	4801      	ldr	r0, [pc, #4]	; (8013320 <__sinit_lock_acquire+0x8>)
 801331a:	f000 b8ac 	b.w	8013476 <__retarget_lock_acquire_recursive>
 801331e:	bf00      	nop
 8013320:	24000867 	.word	0x24000867

08013324 <__sinit_lock_release>:
 8013324:	4801      	ldr	r0, [pc, #4]	; (801332c <__sinit_lock_release+0x8>)
 8013326:	f000 b8a7 	b.w	8013478 <__retarget_lock_release_recursive>
 801332a:	bf00      	nop
 801332c:	24000867 	.word	0x24000867

08013330 <__sinit>:
 8013330:	b510      	push	{r4, lr}
 8013332:	4604      	mov	r4, r0
 8013334:	f7ff fff0 	bl	8013318 <__sinit_lock_acquire>
 8013338:	69a3      	ldr	r3, [r4, #24]
 801333a:	b11b      	cbz	r3, 8013344 <__sinit+0x14>
 801333c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013340:	f7ff bff0 	b.w	8013324 <__sinit_lock_release>
 8013344:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013348:	6523      	str	r3, [r4, #80]	; 0x50
 801334a:	4b13      	ldr	r3, [pc, #76]	; (8013398 <__sinit+0x68>)
 801334c:	4a13      	ldr	r2, [pc, #76]	; (801339c <__sinit+0x6c>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	62a2      	str	r2, [r4, #40]	; 0x28
 8013352:	42a3      	cmp	r3, r4
 8013354:	bf04      	itt	eq
 8013356:	2301      	moveq	r3, #1
 8013358:	61a3      	streq	r3, [r4, #24]
 801335a:	4620      	mov	r0, r4
 801335c:	f000 f820 	bl	80133a0 <__sfp>
 8013360:	6060      	str	r0, [r4, #4]
 8013362:	4620      	mov	r0, r4
 8013364:	f000 f81c 	bl	80133a0 <__sfp>
 8013368:	60a0      	str	r0, [r4, #8]
 801336a:	4620      	mov	r0, r4
 801336c:	f000 f818 	bl	80133a0 <__sfp>
 8013370:	2200      	movs	r2, #0
 8013372:	60e0      	str	r0, [r4, #12]
 8013374:	2104      	movs	r1, #4
 8013376:	6860      	ldr	r0, [r4, #4]
 8013378:	f7ff ff82 	bl	8013280 <std>
 801337c:	68a0      	ldr	r0, [r4, #8]
 801337e:	2201      	movs	r2, #1
 8013380:	2109      	movs	r1, #9
 8013382:	f7ff ff7d 	bl	8013280 <std>
 8013386:	68e0      	ldr	r0, [r4, #12]
 8013388:	2202      	movs	r2, #2
 801338a:	2112      	movs	r1, #18
 801338c:	f7ff ff78 	bl	8013280 <std>
 8013390:	2301      	movs	r3, #1
 8013392:	61a3      	str	r3, [r4, #24]
 8013394:	e7d2      	b.n	801333c <__sinit+0xc>
 8013396:	bf00      	nop
 8013398:	08014d74 	.word	0x08014d74
 801339c:	080132c9 	.word	0x080132c9

080133a0 <__sfp>:
 80133a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133a2:	4607      	mov	r7, r0
 80133a4:	f7ff ffac 	bl	8013300 <__sfp_lock_acquire>
 80133a8:	4b1e      	ldr	r3, [pc, #120]	; (8013424 <__sfp+0x84>)
 80133aa:	681e      	ldr	r6, [r3, #0]
 80133ac:	69b3      	ldr	r3, [r6, #24]
 80133ae:	b913      	cbnz	r3, 80133b6 <__sfp+0x16>
 80133b0:	4630      	mov	r0, r6
 80133b2:	f7ff ffbd 	bl	8013330 <__sinit>
 80133b6:	3648      	adds	r6, #72	; 0x48
 80133b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80133bc:	3b01      	subs	r3, #1
 80133be:	d503      	bpl.n	80133c8 <__sfp+0x28>
 80133c0:	6833      	ldr	r3, [r6, #0]
 80133c2:	b30b      	cbz	r3, 8013408 <__sfp+0x68>
 80133c4:	6836      	ldr	r6, [r6, #0]
 80133c6:	e7f7      	b.n	80133b8 <__sfp+0x18>
 80133c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80133cc:	b9d5      	cbnz	r5, 8013404 <__sfp+0x64>
 80133ce:	4b16      	ldr	r3, [pc, #88]	; (8013428 <__sfp+0x88>)
 80133d0:	60e3      	str	r3, [r4, #12]
 80133d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80133d6:	6665      	str	r5, [r4, #100]	; 0x64
 80133d8:	f000 f84c 	bl	8013474 <__retarget_lock_init_recursive>
 80133dc:	f7ff ff96 	bl	801330c <__sfp_lock_release>
 80133e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80133e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80133e8:	6025      	str	r5, [r4, #0]
 80133ea:	61a5      	str	r5, [r4, #24]
 80133ec:	2208      	movs	r2, #8
 80133ee:	4629      	mov	r1, r5
 80133f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80133f4:	f7fe fadc 	bl	80119b0 <memset>
 80133f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80133fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013400:	4620      	mov	r0, r4
 8013402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013404:	3468      	adds	r4, #104	; 0x68
 8013406:	e7d9      	b.n	80133bc <__sfp+0x1c>
 8013408:	2104      	movs	r1, #4
 801340a:	4638      	mov	r0, r7
 801340c:	f7ff ff62 	bl	80132d4 <__sfmoreglue>
 8013410:	4604      	mov	r4, r0
 8013412:	6030      	str	r0, [r6, #0]
 8013414:	2800      	cmp	r0, #0
 8013416:	d1d5      	bne.n	80133c4 <__sfp+0x24>
 8013418:	f7ff ff78 	bl	801330c <__sfp_lock_release>
 801341c:	230c      	movs	r3, #12
 801341e:	603b      	str	r3, [r7, #0]
 8013420:	e7ee      	b.n	8013400 <__sfp+0x60>
 8013422:	bf00      	nop
 8013424:	08014d74 	.word	0x08014d74
 8013428:	ffff0001 	.word	0xffff0001

0801342c <_fwalk_reent>:
 801342c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013430:	4606      	mov	r6, r0
 8013432:	4688      	mov	r8, r1
 8013434:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013438:	2700      	movs	r7, #0
 801343a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801343e:	f1b9 0901 	subs.w	r9, r9, #1
 8013442:	d505      	bpl.n	8013450 <_fwalk_reent+0x24>
 8013444:	6824      	ldr	r4, [r4, #0]
 8013446:	2c00      	cmp	r4, #0
 8013448:	d1f7      	bne.n	801343a <_fwalk_reent+0xe>
 801344a:	4638      	mov	r0, r7
 801344c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013450:	89ab      	ldrh	r3, [r5, #12]
 8013452:	2b01      	cmp	r3, #1
 8013454:	d907      	bls.n	8013466 <_fwalk_reent+0x3a>
 8013456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801345a:	3301      	adds	r3, #1
 801345c:	d003      	beq.n	8013466 <_fwalk_reent+0x3a>
 801345e:	4629      	mov	r1, r5
 8013460:	4630      	mov	r0, r6
 8013462:	47c0      	blx	r8
 8013464:	4307      	orrs	r7, r0
 8013466:	3568      	adds	r5, #104	; 0x68
 8013468:	e7e9      	b.n	801343e <_fwalk_reent+0x12>
	...

0801346c <_localeconv_r>:
 801346c:	4800      	ldr	r0, [pc, #0]	; (8013470 <_localeconv_r+0x4>)
 801346e:	4770      	bx	lr
 8013470:	24000178 	.word	0x24000178

08013474 <__retarget_lock_init_recursive>:
 8013474:	4770      	bx	lr

08013476 <__retarget_lock_acquire_recursive>:
 8013476:	4770      	bx	lr

08013478 <__retarget_lock_release_recursive>:
 8013478:	4770      	bx	lr

0801347a <__swhatbuf_r>:
 801347a:	b570      	push	{r4, r5, r6, lr}
 801347c:	460e      	mov	r6, r1
 801347e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013482:	2900      	cmp	r1, #0
 8013484:	b096      	sub	sp, #88	; 0x58
 8013486:	4614      	mov	r4, r2
 8013488:	461d      	mov	r5, r3
 801348a:	da07      	bge.n	801349c <__swhatbuf_r+0x22>
 801348c:	2300      	movs	r3, #0
 801348e:	602b      	str	r3, [r5, #0]
 8013490:	89b3      	ldrh	r3, [r6, #12]
 8013492:	061a      	lsls	r2, r3, #24
 8013494:	d410      	bmi.n	80134b8 <__swhatbuf_r+0x3e>
 8013496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801349a:	e00e      	b.n	80134ba <__swhatbuf_r+0x40>
 801349c:	466a      	mov	r2, sp
 801349e:	f000 fe9f 	bl	80141e0 <_fstat_r>
 80134a2:	2800      	cmp	r0, #0
 80134a4:	dbf2      	blt.n	801348c <__swhatbuf_r+0x12>
 80134a6:	9a01      	ldr	r2, [sp, #4]
 80134a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80134ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80134b0:	425a      	negs	r2, r3
 80134b2:	415a      	adcs	r2, r3
 80134b4:	602a      	str	r2, [r5, #0]
 80134b6:	e7ee      	b.n	8013496 <__swhatbuf_r+0x1c>
 80134b8:	2340      	movs	r3, #64	; 0x40
 80134ba:	2000      	movs	r0, #0
 80134bc:	6023      	str	r3, [r4, #0]
 80134be:	b016      	add	sp, #88	; 0x58
 80134c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080134c4 <__smakebuf_r>:
 80134c4:	898b      	ldrh	r3, [r1, #12]
 80134c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134c8:	079d      	lsls	r5, r3, #30
 80134ca:	4606      	mov	r6, r0
 80134cc:	460c      	mov	r4, r1
 80134ce:	d507      	bpl.n	80134e0 <__smakebuf_r+0x1c>
 80134d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80134d4:	6023      	str	r3, [r4, #0]
 80134d6:	6123      	str	r3, [r4, #16]
 80134d8:	2301      	movs	r3, #1
 80134da:	6163      	str	r3, [r4, #20]
 80134dc:	b002      	add	sp, #8
 80134de:	bd70      	pop	{r4, r5, r6, pc}
 80134e0:	ab01      	add	r3, sp, #4
 80134e2:	466a      	mov	r2, sp
 80134e4:	f7ff ffc9 	bl	801347a <__swhatbuf_r>
 80134e8:	9900      	ldr	r1, [sp, #0]
 80134ea:	4605      	mov	r5, r0
 80134ec:	4630      	mov	r0, r6
 80134ee:	f000 fc1d 	bl	8013d2c <_malloc_r>
 80134f2:	b948      	cbnz	r0, 8013508 <__smakebuf_r+0x44>
 80134f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134f8:	059a      	lsls	r2, r3, #22
 80134fa:	d4ef      	bmi.n	80134dc <__smakebuf_r+0x18>
 80134fc:	f023 0303 	bic.w	r3, r3, #3
 8013500:	f043 0302 	orr.w	r3, r3, #2
 8013504:	81a3      	strh	r3, [r4, #12]
 8013506:	e7e3      	b.n	80134d0 <__smakebuf_r+0xc>
 8013508:	4b0d      	ldr	r3, [pc, #52]	; (8013540 <__smakebuf_r+0x7c>)
 801350a:	62b3      	str	r3, [r6, #40]	; 0x28
 801350c:	89a3      	ldrh	r3, [r4, #12]
 801350e:	6020      	str	r0, [r4, #0]
 8013510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013514:	81a3      	strh	r3, [r4, #12]
 8013516:	9b00      	ldr	r3, [sp, #0]
 8013518:	6163      	str	r3, [r4, #20]
 801351a:	9b01      	ldr	r3, [sp, #4]
 801351c:	6120      	str	r0, [r4, #16]
 801351e:	b15b      	cbz	r3, 8013538 <__smakebuf_r+0x74>
 8013520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013524:	4630      	mov	r0, r6
 8013526:	f000 fe6d 	bl	8014204 <_isatty_r>
 801352a:	b128      	cbz	r0, 8013538 <__smakebuf_r+0x74>
 801352c:	89a3      	ldrh	r3, [r4, #12]
 801352e:	f023 0303 	bic.w	r3, r3, #3
 8013532:	f043 0301 	orr.w	r3, r3, #1
 8013536:	81a3      	strh	r3, [r4, #12]
 8013538:	89a0      	ldrh	r0, [r4, #12]
 801353a:	4305      	orrs	r5, r0
 801353c:	81a5      	strh	r5, [r4, #12]
 801353e:	e7cd      	b.n	80134dc <__smakebuf_r+0x18>
 8013540:	080132c9 	.word	0x080132c9

08013544 <malloc>:
 8013544:	4b02      	ldr	r3, [pc, #8]	; (8013550 <malloc+0xc>)
 8013546:	4601      	mov	r1, r0
 8013548:	6818      	ldr	r0, [r3, #0]
 801354a:	f000 bbef 	b.w	8013d2c <_malloc_r>
 801354e:	bf00      	nop
 8013550:	24000024 	.word	0x24000024

08013554 <memcpy>:
 8013554:	440a      	add	r2, r1
 8013556:	4291      	cmp	r1, r2
 8013558:	f100 33ff 	add.w	r3, r0, #4294967295
 801355c:	d100      	bne.n	8013560 <memcpy+0xc>
 801355e:	4770      	bx	lr
 8013560:	b510      	push	{r4, lr}
 8013562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013566:	f803 4f01 	strb.w	r4, [r3, #1]!
 801356a:	4291      	cmp	r1, r2
 801356c:	d1f9      	bne.n	8013562 <memcpy+0xe>
 801356e:	bd10      	pop	{r4, pc}

08013570 <_Balloc>:
 8013570:	b570      	push	{r4, r5, r6, lr}
 8013572:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013574:	4604      	mov	r4, r0
 8013576:	460d      	mov	r5, r1
 8013578:	b976      	cbnz	r6, 8013598 <_Balloc+0x28>
 801357a:	2010      	movs	r0, #16
 801357c:	f7ff ffe2 	bl	8013544 <malloc>
 8013580:	4602      	mov	r2, r0
 8013582:	6260      	str	r0, [r4, #36]	; 0x24
 8013584:	b920      	cbnz	r0, 8013590 <_Balloc+0x20>
 8013586:	4b18      	ldr	r3, [pc, #96]	; (80135e8 <_Balloc+0x78>)
 8013588:	4818      	ldr	r0, [pc, #96]	; (80135ec <_Balloc+0x7c>)
 801358a:	2166      	movs	r1, #102	; 0x66
 801358c:	f000 fde8 	bl	8014160 <__assert_func>
 8013590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013594:	6006      	str	r6, [r0, #0]
 8013596:	60c6      	str	r6, [r0, #12]
 8013598:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801359a:	68f3      	ldr	r3, [r6, #12]
 801359c:	b183      	cbz	r3, 80135c0 <_Balloc+0x50>
 801359e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80135a6:	b9b8      	cbnz	r0, 80135d8 <_Balloc+0x68>
 80135a8:	2101      	movs	r1, #1
 80135aa:	fa01 f605 	lsl.w	r6, r1, r5
 80135ae:	1d72      	adds	r2, r6, #5
 80135b0:	0092      	lsls	r2, r2, #2
 80135b2:	4620      	mov	r0, r4
 80135b4:	f000 fb5a 	bl	8013c6c <_calloc_r>
 80135b8:	b160      	cbz	r0, 80135d4 <_Balloc+0x64>
 80135ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80135be:	e00e      	b.n	80135de <_Balloc+0x6e>
 80135c0:	2221      	movs	r2, #33	; 0x21
 80135c2:	2104      	movs	r1, #4
 80135c4:	4620      	mov	r0, r4
 80135c6:	f000 fb51 	bl	8013c6c <_calloc_r>
 80135ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135cc:	60f0      	str	r0, [r6, #12]
 80135ce:	68db      	ldr	r3, [r3, #12]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d1e4      	bne.n	801359e <_Balloc+0x2e>
 80135d4:	2000      	movs	r0, #0
 80135d6:	bd70      	pop	{r4, r5, r6, pc}
 80135d8:	6802      	ldr	r2, [r0, #0]
 80135da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80135de:	2300      	movs	r3, #0
 80135e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80135e4:	e7f7      	b.n	80135d6 <_Balloc+0x66>
 80135e6:	bf00      	nop
 80135e8:	08014db9 	.word	0x08014db9
 80135ec:	08014ea0 	.word	0x08014ea0

080135f0 <_Bfree>:
 80135f0:	b570      	push	{r4, r5, r6, lr}
 80135f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80135f4:	4605      	mov	r5, r0
 80135f6:	460c      	mov	r4, r1
 80135f8:	b976      	cbnz	r6, 8013618 <_Bfree+0x28>
 80135fa:	2010      	movs	r0, #16
 80135fc:	f7ff ffa2 	bl	8013544 <malloc>
 8013600:	4602      	mov	r2, r0
 8013602:	6268      	str	r0, [r5, #36]	; 0x24
 8013604:	b920      	cbnz	r0, 8013610 <_Bfree+0x20>
 8013606:	4b09      	ldr	r3, [pc, #36]	; (801362c <_Bfree+0x3c>)
 8013608:	4809      	ldr	r0, [pc, #36]	; (8013630 <_Bfree+0x40>)
 801360a:	218a      	movs	r1, #138	; 0x8a
 801360c:	f000 fda8 	bl	8014160 <__assert_func>
 8013610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013614:	6006      	str	r6, [r0, #0]
 8013616:	60c6      	str	r6, [r0, #12]
 8013618:	b13c      	cbz	r4, 801362a <_Bfree+0x3a>
 801361a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801361c:	6862      	ldr	r2, [r4, #4]
 801361e:	68db      	ldr	r3, [r3, #12]
 8013620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013624:	6021      	str	r1, [r4, #0]
 8013626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801362a:	bd70      	pop	{r4, r5, r6, pc}
 801362c:	08014db9 	.word	0x08014db9
 8013630:	08014ea0 	.word	0x08014ea0

08013634 <__multadd>:
 8013634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013638:	690e      	ldr	r6, [r1, #16]
 801363a:	4607      	mov	r7, r0
 801363c:	4698      	mov	r8, r3
 801363e:	460c      	mov	r4, r1
 8013640:	f101 0014 	add.w	r0, r1, #20
 8013644:	2300      	movs	r3, #0
 8013646:	6805      	ldr	r5, [r0, #0]
 8013648:	b2a9      	uxth	r1, r5
 801364a:	fb02 8101 	mla	r1, r2, r1, r8
 801364e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013652:	0c2d      	lsrs	r5, r5, #16
 8013654:	fb02 c505 	mla	r5, r2, r5, ip
 8013658:	b289      	uxth	r1, r1
 801365a:	3301      	adds	r3, #1
 801365c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013660:	429e      	cmp	r6, r3
 8013662:	f840 1b04 	str.w	r1, [r0], #4
 8013666:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801366a:	dcec      	bgt.n	8013646 <__multadd+0x12>
 801366c:	f1b8 0f00 	cmp.w	r8, #0
 8013670:	d022      	beq.n	80136b8 <__multadd+0x84>
 8013672:	68a3      	ldr	r3, [r4, #8]
 8013674:	42b3      	cmp	r3, r6
 8013676:	dc19      	bgt.n	80136ac <__multadd+0x78>
 8013678:	6861      	ldr	r1, [r4, #4]
 801367a:	4638      	mov	r0, r7
 801367c:	3101      	adds	r1, #1
 801367e:	f7ff ff77 	bl	8013570 <_Balloc>
 8013682:	4605      	mov	r5, r0
 8013684:	b928      	cbnz	r0, 8013692 <__multadd+0x5e>
 8013686:	4602      	mov	r2, r0
 8013688:	4b0d      	ldr	r3, [pc, #52]	; (80136c0 <__multadd+0x8c>)
 801368a:	480e      	ldr	r0, [pc, #56]	; (80136c4 <__multadd+0x90>)
 801368c:	21b5      	movs	r1, #181	; 0xb5
 801368e:	f000 fd67 	bl	8014160 <__assert_func>
 8013692:	6922      	ldr	r2, [r4, #16]
 8013694:	3202      	adds	r2, #2
 8013696:	f104 010c 	add.w	r1, r4, #12
 801369a:	0092      	lsls	r2, r2, #2
 801369c:	300c      	adds	r0, #12
 801369e:	f7ff ff59 	bl	8013554 <memcpy>
 80136a2:	4621      	mov	r1, r4
 80136a4:	4638      	mov	r0, r7
 80136a6:	f7ff ffa3 	bl	80135f0 <_Bfree>
 80136aa:	462c      	mov	r4, r5
 80136ac:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80136b0:	3601      	adds	r6, #1
 80136b2:	f8c3 8014 	str.w	r8, [r3, #20]
 80136b6:	6126      	str	r6, [r4, #16]
 80136b8:	4620      	mov	r0, r4
 80136ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136be:	bf00      	nop
 80136c0:	08014e2f 	.word	0x08014e2f
 80136c4:	08014ea0 	.word	0x08014ea0

080136c8 <__hi0bits>:
 80136c8:	0c03      	lsrs	r3, r0, #16
 80136ca:	041b      	lsls	r3, r3, #16
 80136cc:	b9d3      	cbnz	r3, 8013704 <__hi0bits+0x3c>
 80136ce:	0400      	lsls	r0, r0, #16
 80136d0:	2310      	movs	r3, #16
 80136d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80136d6:	bf04      	itt	eq
 80136d8:	0200      	lsleq	r0, r0, #8
 80136da:	3308      	addeq	r3, #8
 80136dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80136e0:	bf04      	itt	eq
 80136e2:	0100      	lsleq	r0, r0, #4
 80136e4:	3304      	addeq	r3, #4
 80136e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80136ea:	bf04      	itt	eq
 80136ec:	0080      	lsleq	r0, r0, #2
 80136ee:	3302      	addeq	r3, #2
 80136f0:	2800      	cmp	r0, #0
 80136f2:	db05      	blt.n	8013700 <__hi0bits+0x38>
 80136f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80136f8:	f103 0301 	add.w	r3, r3, #1
 80136fc:	bf08      	it	eq
 80136fe:	2320      	moveq	r3, #32
 8013700:	4618      	mov	r0, r3
 8013702:	4770      	bx	lr
 8013704:	2300      	movs	r3, #0
 8013706:	e7e4      	b.n	80136d2 <__hi0bits+0xa>

08013708 <__lo0bits>:
 8013708:	6803      	ldr	r3, [r0, #0]
 801370a:	f013 0207 	ands.w	r2, r3, #7
 801370e:	4601      	mov	r1, r0
 8013710:	d00b      	beq.n	801372a <__lo0bits+0x22>
 8013712:	07da      	lsls	r2, r3, #31
 8013714:	d424      	bmi.n	8013760 <__lo0bits+0x58>
 8013716:	0798      	lsls	r0, r3, #30
 8013718:	bf49      	itett	mi
 801371a:	085b      	lsrmi	r3, r3, #1
 801371c:	089b      	lsrpl	r3, r3, #2
 801371e:	2001      	movmi	r0, #1
 8013720:	600b      	strmi	r3, [r1, #0]
 8013722:	bf5c      	itt	pl
 8013724:	600b      	strpl	r3, [r1, #0]
 8013726:	2002      	movpl	r0, #2
 8013728:	4770      	bx	lr
 801372a:	b298      	uxth	r0, r3
 801372c:	b9b0      	cbnz	r0, 801375c <__lo0bits+0x54>
 801372e:	0c1b      	lsrs	r3, r3, #16
 8013730:	2010      	movs	r0, #16
 8013732:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013736:	bf04      	itt	eq
 8013738:	0a1b      	lsreq	r3, r3, #8
 801373a:	3008      	addeq	r0, #8
 801373c:	071a      	lsls	r2, r3, #28
 801373e:	bf04      	itt	eq
 8013740:	091b      	lsreq	r3, r3, #4
 8013742:	3004      	addeq	r0, #4
 8013744:	079a      	lsls	r2, r3, #30
 8013746:	bf04      	itt	eq
 8013748:	089b      	lsreq	r3, r3, #2
 801374a:	3002      	addeq	r0, #2
 801374c:	07da      	lsls	r2, r3, #31
 801374e:	d403      	bmi.n	8013758 <__lo0bits+0x50>
 8013750:	085b      	lsrs	r3, r3, #1
 8013752:	f100 0001 	add.w	r0, r0, #1
 8013756:	d005      	beq.n	8013764 <__lo0bits+0x5c>
 8013758:	600b      	str	r3, [r1, #0]
 801375a:	4770      	bx	lr
 801375c:	4610      	mov	r0, r2
 801375e:	e7e8      	b.n	8013732 <__lo0bits+0x2a>
 8013760:	2000      	movs	r0, #0
 8013762:	4770      	bx	lr
 8013764:	2020      	movs	r0, #32
 8013766:	4770      	bx	lr

08013768 <__i2b>:
 8013768:	b510      	push	{r4, lr}
 801376a:	460c      	mov	r4, r1
 801376c:	2101      	movs	r1, #1
 801376e:	f7ff feff 	bl	8013570 <_Balloc>
 8013772:	4602      	mov	r2, r0
 8013774:	b928      	cbnz	r0, 8013782 <__i2b+0x1a>
 8013776:	4b05      	ldr	r3, [pc, #20]	; (801378c <__i2b+0x24>)
 8013778:	4805      	ldr	r0, [pc, #20]	; (8013790 <__i2b+0x28>)
 801377a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801377e:	f000 fcef 	bl	8014160 <__assert_func>
 8013782:	2301      	movs	r3, #1
 8013784:	6144      	str	r4, [r0, #20]
 8013786:	6103      	str	r3, [r0, #16]
 8013788:	bd10      	pop	{r4, pc}
 801378a:	bf00      	nop
 801378c:	08014e2f 	.word	0x08014e2f
 8013790:	08014ea0 	.word	0x08014ea0

08013794 <__multiply>:
 8013794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013798:	4614      	mov	r4, r2
 801379a:	690a      	ldr	r2, [r1, #16]
 801379c:	6923      	ldr	r3, [r4, #16]
 801379e:	429a      	cmp	r2, r3
 80137a0:	bfb8      	it	lt
 80137a2:	460b      	movlt	r3, r1
 80137a4:	460d      	mov	r5, r1
 80137a6:	bfbc      	itt	lt
 80137a8:	4625      	movlt	r5, r4
 80137aa:	461c      	movlt	r4, r3
 80137ac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80137b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80137b4:	68ab      	ldr	r3, [r5, #8]
 80137b6:	6869      	ldr	r1, [r5, #4]
 80137b8:	eb0a 0709 	add.w	r7, sl, r9
 80137bc:	42bb      	cmp	r3, r7
 80137be:	b085      	sub	sp, #20
 80137c0:	bfb8      	it	lt
 80137c2:	3101      	addlt	r1, #1
 80137c4:	f7ff fed4 	bl	8013570 <_Balloc>
 80137c8:	b930      	cbnz	r0, 80137d8 <__multiply+0x44>
 80137ca:	4602      	mov	r2, r0
 80137cc:	4b42      	ldr	r3, [pc, #264]	; (80138d8 <__multiply+0x144>)
 80137ce:	4843      	ldr	r0, [pc, #268]	; (80138dc <__multiply+0x148>)
 80137d0:	f240 115d 	movw	r1, #349	; 0x15d
 80137d4:	f000 fcc4 	bl	8014160 <__assert_func>
 80137d8:	f100 0614 	add.w	r6, r0, #20
 80137dc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80137e0:	4633      	mov	r3, r6
 80137e2:	2200      	movs	r2, #0
 80137e4:	4543      	cmp	r3, r8
 80137e6:	d31e      	bcc.n	8013826 <__multiply+0x92>
 80137e8:	f105 0c14 	add.w	ip, r5, #20
 80137ec:	f104 0314 	add.w	r3, r4, #20
 80137f0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80137f4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80137f8:	9202      	str	r2, [sp, #8]
 80137fa:	ebac 0205 	sub.w	r2, ip, r5
 80137fe:	3a15      	subs	r2, #21
 8013800:	f022 0203 	bic.w	r2, r2, #3
 8013804:	3204      	adds	r2, #4
 8013806:	f105 0115 	add.w	r1, r5, #21
 801380a:	458c      	cmp	ip, r1
 801380c:	bf38      	it	cc
 801380e:	2204      	movcc	r2, #4
 8013810:	9201      	str	r2, [sp, #4]
 8013812:	9a02      	ldr	r2, [sp, #8]
 8013814:	9303      	str	r3, [sp, #12]
 8013816:	429a      	cmp	r2, r3
 8013818:	d808      	bhi.n	801382c <__multiply+0x98>
 801381a:	2f00      	cmp	r7, #0
 801381c:	dc55      	bgt.n	80138ca <__multiply+0x136>
 801381e:	6107      	str	r7, [r0, #16]
 8013820:	b005      	add	sp, #20
 8013822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013826:	f843 2b04 	str.w	r2, [r3], #4
 801382a:	e7db      	b.n	80137e4 <__multiply+0x50>
 801382c:	f8b3 a000 	ldrh.w	sl, [r3]
 8013830:	f1ba 0f00 	cmp.w	sl, #0
 8013834:	d020      	beq.n	8013878 <__multiply+0xe4>
 8013836:	f105 0e14 	add.w	lr, r5, #20
 801383a:	46b1      	mov	r9, r6
 801383c:	2200      	movs	r2, #0
 801383e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013842:	f8d9 b000 	ldr.w	fp, [r9]
 8013846:	b2a1      	uxth	r1, r4
 8013848:	fa1f fb8b 	uxth.w	fp, fp
 801384c:	fb0a b101 	mla	r1, sl, r1, fp
 8013850:	4411      	add	r1, r2
 8013852:	f8d9 2000 	ldr.w	r2, [r9]
 8013856:	0c24      	lsrs	r4, r4, #16
 8013858:	0c12      	lsrs	r2, r2, #16
 801385a:	fb0a 2404 	mla	r4, sl, r4, r2
 801385e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013862:	b289      	uxth	r1, r1
 8013864:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013868:	45f4      	cmp	ip, lr
 801386a:	f849 1b04 	str.w	r1, [r9], #4
 801386e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013872:	d8e4      	bhi.n	801383e <__multiply+0xaa>
 8013874:	9901      	ldr	r1, [sp, #4]
 8013876:	5072      	str	r2, [r6, r1]
 8013878:	9a03      	ldr	r2, [sp, #12]
 801387a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801387e:	3304      	adds	r3, #4
 8013880:	f1b9 0f00 	cmp.w	r9, #0
 8013884:	d01f      	beq.n	80138c6 <__multiply+0x132>
 8013886:	6834      	ldr	r4, [r6, #0]
 8013888:	f105 0114 	add.w	r1, r5, #20
 801388c:	46b6      	mov	lr, r6
 801388e:	f04f 0a00 	mov.w	sl, #0
 8013892:	880a      	ldrh	r2, [r1, #0]
 8013894:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013898:	fb09 b202 	mla	r2, r9, r2, fp
 801389c:	4492      	add	sl, r2
 801389e:	b2a4      	uxth	r4, r4
 80138a0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80138a4:	f84e 4b04 	str.w	r4, [lr], #4
 80138a8:	f851 4b04 	ldr.w	r4, [r1], #4
 80138ac:	f8be 2000 	ldrh.w	r2, [lr]
 80138b0:	0c24      	lsrs	r4, r4, #16
 80138b2:	fb09 2404 	mla	r4, r9, r4, r2
 80138b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80138ba:	458c      	cmp	ip, r1
 80138bc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80138c0:	d8e7      	bhi.n	8013892 <__multiply+0xfe>
 80138c2:	9a01      	ldr	r2, [sp, #4]
 80138c4:	50b4      	str	r4, [r6, r2]
 80138c6:	3604      	adds	r6, #4
 80138c8:	e7a3      	b.n	8013812 <__multiply+0x7e>
 80138ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d1a5      	bne.n	801381e <__multiply+0x8a>
 80138d2:	3f01      	subs	r7, #1
 80138d4:	e7a1      	b.n	801381a <__multiply+0x86>
 80138d6:	bf00      	nop
 80138d8:	08014e2f 	.word	0x08014e2f
 80138dc:	08014ea0 	.word	0x08014ea0

080138e0 <__pow5mult>:
 80138e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138e4:	4615      	mov	r5, r2
 80138e6:	f012 0203 	ands.w	r2, r2, #3
 80138ea:	4606      	mov	r6, r0
 80138ec:	460f      	mov	r7, r1
 80138ee:	d007      	beq.n	8013900 <__pow5mult+0x20>
 80138f0:	4c25      	ldr	r4, [pc, #148]	; (8013988 <__pow5mult+0xa8>)
 80138f2:	3a01      	subs	r2, #1
 80138f4:	2300      	movs	r3, #0
 80138f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80138fa:	f7ff fe9b 	bl	8013634 <__multadd>
 80138fe:	4607      	mov	r7, r0
 8013900:	10ad      	asrs	r5, r5, #2
 8013902:	d03d      	beq.n	8013980 <__pow5mult+0xa0>
 8013904:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013906:	b97c      	cbnz	r4, 8013928 <__pow5mult+0x48>
 8013908:	2010      	movs	r0, #16
 801390a:	f7ff fe1b 	bl	8013544 <malloc>
 801390e:	4602      	mov	r2, r0
 8013910:	6270      	str	r0, [r6, #36]	; 0x24
 8013912:	b928      	cbnz	r0, 8013920 <__pow5mult+0x40>
 8013914:	4b1d      	ldr	r3, [pc, #116]	; (801398c <__pow5mult+0xac>)
 8013916:	481e      	ldr	r0, [pc, #120]	; (8013990 <__pow5mult+0xb0>)
 8013918:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801391c:	f000 fc20 	bl	8014160 <__assert_func>
 8013920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013924:	6004      	str	r4, [r0, #0]
 8013926:	60c4      	str	r4, [r0, #12]
 8013928:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801392c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013930:	b94c      	cbnz	r4, 8013946 <__pow5mult+0x66>
 8013932:	f240 2171 	movw	r1, #625	; 0x271
 8013936:	4630      	mov	r0, r6
 8013938:	f7ff ff16 	bl	8013768 <__i2b>
 801393c:	2300      	movs	r3, #0
 801393e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013942:	4604      	mov	r4, r0
 8013944:	6003      	str	r3, [r0, #0]
 8013946:	f04f 0900 	mov.w	r9, #0
 801394a:	07eb      	lsls	r3, r5, #31
 801394c:	d50a      	bpl.n	8013964 <__pow5mult+0x84>
 801394e:	4639      	mov	r1, r7
 8013950:	4622      	mov	r2, r4
 8013952:	4630      	mov	r0, r6
 8013954:	f7ff ff1e 	bl	8013794 <__multiply>
 8013958:	4639      	mov	r1, r7
 801395a:	4680      	mov	r8, r0
 801395c:	4630      	mov	r0, r6
 801395e:	f7ff fe47 	bl	80135f0 <_Bfree>
 8013962:	4647      	mov	r7, r8
 8013964:	106d      	asrs	r5, r5, #1
 8013966:	d00b      	beq.n	8013980 <__pow5mult+0xa0>
 8013968:	6820      	ldr	r0, [r4, #0]
 801396a:	b938      	cbnz	r0, 801397c <__pow5mult+0x9c>
 801396c:	4622      	mov	r2, r4
 801396e:	4621      	mov	r1, r4
 8013970:	4630      	mov	r0, r6
 8013972:	f7ff ff0f 	bl	8013794 <__multiply>
 8013976:	6020      	str	r0, [r4, #0]
 8013978:	f8c0 9000 	str.w	r9, [r0]
 801397c:	4604      	mov	r4, r0
 801397e:	e7e4      	b.n	801394a <__pow5mult+0x6a>
 8013980:	4638      	mov	r0, r7
 8013982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013986:	bf00      	nop
 8013988:	08014ff0 	.word	0x08014ff0
 801398c:	08014db9 	.word	0x08014db9
 8013990:	08014ea0 	.word	0x08014ea0

08013994 <__lshift>:
 8013994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013998:	460c      	mov	r4, r1
 801399a:	6849      	ldr	r1, [r1, #4]
 801399c:	6923      	ldr	r3, [r4, #16]
 801399e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80139a2:	68a3      	ldr	r3, [r4, #8]
 80139a4:	4607      	mov	r7, r0
 80139a6:	4691      	mov	r9, r2
 80139a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80139ac:	f108 0601 	add.w	r6, r8, #1
 80139b0:	42b3      	cmp	r3, r6
 80139b2:	db0b      	blt.n	80139cc <__lshift+0x38>
 80139b4:	4638      	mov	r0, r7
 80139b6:	f7ff fddb 	bl	8013570 <_Balloc>
 80139ba:	4605      	mov	r5, r0
 80139bc:	b948      	cbnz	r0, 80139d2 <__lshift+0x3e>
 80139be:	4602      	mov	r2, r0
 80139c0:	4b28      	ldr	r3, [pc, #160]	; (8013a64 <__lshift+0xd0>)
 80139c2:	4829      	ldr	r0, [pc, #164]	; (8013a68 <__lshift+0xd4>)
 80139c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80139c8:	f000 fbca 	bl	8014160 <__assert_func>
 80139cc:	3101      	adds	r1, #1
 80139ce:	005b      	lsls	r3, r3, #1
 80139d0:	e7ee      	b.n	80139b0 <__lshift+0x1c>
 80139d2:	2300      	movs	r3, #0
 80139d4:	f100 0114 	add.w	r1, r0, #20
 80139d8:	f100 0210 	add.w	r2, r0, #16
 80139dc:	4618      	mov	r0, r3
 80139de:	4553      	cmp	r3, sl
 80139e0:	db33      	blt.n	8013a4a <__lshift+0xb6>
 80139e2:	6920      	ldr	r0, [r4, #16]
 80139e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80139e8:	f104 0314 	add.w	r3, r4, #20
 80139ec:	f019 091f 	ands.w	r9, r9, #31
 80139f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80139f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80139f8:	d02b      	beq.n	8013a52 <__lshift+0xbe>
 80139fa:	f1c9 0e20 	rsb	lr, r9, #32
 80139fe:	468a      	mov	sl, r1
 8013a00:	2200      	movs	r2, #0
 8013a02:	6818      	ldr	r0, [r3, #0]
 8013a04:	fa00 f009 	lsl.w	r0, r0, r9
 8013a08:	4302      	orrs	r2, r0
 8013a0a:	f84a 2b04 	str.w	r2, [sl], #4
 8013a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a12:	459c      	cmp	ip, r3
 8013a14:	fa22 f20e 	lsr.w	r2, r2, lr
 8013a18:	d8f3      	bhi.n	8013a02 <__lshift+0x6e>
 8013a1a:	ebac 0304 	sub.w	r3, ip, r4
 8013a1e:	3b15      	subs	r3, #21
 8013a20:	f023 0303 	bic.w	r3, r3, #3
 8013a24:	3304      	adds	r3, #4
 8013a26:	f104 0015 	add.w	r0, r4, #21
 8013a2a:	4584      	cmp	ip, r0
 8013a2c:	bf38      	it	cc
 8013a2e:	2304      	movcc	r3, #4
 8013a30:	50ca      	str	r2, [r1, r3]
 8013a32:	b10a      	cbz	r2, 8013a38 <__lshift+0xa4>
 8013a34:	f108 0602 	add.w	r6, r8, #2
 8013a38:	3e01      	subs	r6, #1
 8013a3a:	4638      	mov	r0, r7
 8013a3c:	612e      	str	r6, [r5, #16]
 8013a3e:	4621      	mov	r1, r4
 8013a40:	f7ff fdd6 	bl	80135f0 <_Bfree>
 8013a44:	4628      	mov	r0, r5
 8013a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013a4e:	3301      	adds	r3, #1
 8013a50:	e7c5      	b.n	80139de <__lshift+0x4a>
 8013a52:	3904      	subs	r1, #4
 8013a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a58:	f841 2f04 	str.w	r2, [r1, #4]!
 8013a5c:	459c      	cmp	ip, r3
 8013a5e:	d8f9      	bhi.n	8013a54 <__lshift+0xc0>
 8013a60:	e7ea      	b.n	8013a38 <__lshift+0xa4>
 8013a62:	bf00      	nop
 8013a64:	08014e2f 	.word	0x08014e2f
 8013a68:	08014ea0 	.word	0x08014ea0

08013a6c <__mcmp>:
 8013a6c:	b530      	push	{r4, r5, lr}
 8013a6e:	6902      	ldr	r2, [r0, #16]
 8013a70:	690c      	ldr	r4, [r1, #16]
 8013a72:	1b12      	subs	r2, r2, r4
 8013a74:	d10e      	bne.n	8013a94 <__mcmp+0x28>
 8013a76:	f100 0314 	add.w	r3, r0, #20
 8013a7a:	3114      	adds	r1, #20
 8013a7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013a80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013a84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013a88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013a8c:	42a5      	cmp	r5, r4
 8013a8e:	d003      	beq.n	8013a98 <__mcmp+0x2c>
 8013a90:	d305      	bcc.n	8013a9e <__mcmp+0x32>
 8013a92:	2201      	movs	r2, #1
 8013a94:	4610      	mov	r0, r2
 8013a96:	bd30      	pop	{r4, r5, pc}
 8013a98:	4283      	cmp	r3, r0
 8013a9a:	d3f3      	bcc.n	8013a84 <__mcmp+0x18>
 8013a9c:	e7fa      	b.n	8013a94 <__mcmp+0x28>
 8013a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8013aa2:	e7f7      	b.n	8013a94 <__mcmp+0x28>

08013aa4 <__mdiff>:
 8013aa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013aa8:	460c      	mov	r4, r1
 8013aaa:	4606      	mov	r6, r0
 8013aac:	4611      	mov	r1, r2
 8013aae:	4620      	mov	r0, r4
 8013ab0:	4617      	mov	r7, r2
 8013ab2:	f7ff ffdb 	bl	8013a6c <__mcmp>
 8013ab6:	1e05      	subs	r5, r0, #0
 8013ab8:	d110      	bne.n	8013adc <__mdiff+0x38>
 8013aba:	4629      	mov	r1, r5
 8013abc:	4630      	mov	r0, r6
 8013abe:	f7ff fd57 	bl	8013570 <_Balloc>
 8013ac2:	b930      	cbnz	r0, 8013ad2 <__mdiff+0x2e>
 8013ac4:	4b39      	ldr	r3, [pc, #228]	; (8013bac <__mdiff+0x108>)
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	f240 2132 	movw	r1, #562	; 0x232
 8013acc:	4838      	ldr	r0, [pc, #224]	; (8013bb0 <__mdiff+0x10c>)
 8013ace:	f000 fb47 	bl	8014160 <__assert_func>
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013ad8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013adc:	bfa4      	itt	ge
 8013ade:	463b      	movge	r3, r7
 8013ae0:	4627      	movge	r7, r4
 8013ae2:	4630      	mov	r0, r6
 8013ae4:	6879      	ldr	r1, [r7, #4]
 8013ae6:	bfa6      	itte	ge
 8013ae8:	461c      	movge	r4, r3
 8013aea:	2500      	movge	r5, #0
 8013aec:	2501      	movlt	r5, #1
 8013aee:	f7ff fd3f 	bl	8013570 <_Balloc>
 8013af2:	b920      	cbnz	r0, 8013afe <__mdiff+0x5a>
 8013af4:	4b2d      	ldr	r3, [pc, #180]	; (8013bac <__mdiff+0x108>)
 8013af6:	4602      	mov	r2, r0
 8013af8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013afc:	e7e6      	b.n	8013acc <__mdiff+0x28>
 8013afe:	693e      	ldr	r6, [r7, #16]
 8013b00:	60c5      	str	r5, [r0, #12]
 8013b02:	6925      	ldr	r5, [r4, #16]
 8013b04:	f107 0114 	add.w	r1, r7, #20
 8013b08:	f104 0914 	add.w	r9, r4, #20
 8013b0c:	f100 0e14 	add.w	lr, r0, #20
 8013b10:	f107 0210 	add.w	r2, r7, #16
 8013b14:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013b18:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013b1c:	46f2      	mov	sl, lr
 8013b1e:	2700      	movs	r7, #0
 8013b20:	f859 3b04 	ldr.w	r3, [r9], #4
 8013b24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013b28:	fa1f f883 	uxth.w	r8, r3
 8013b2c:	fa17 f78b 	uxtah	r7, r7, fp
 8013b30:	0c1b      	lsrs	r3, r3, #16
 8013b32:	eba7 0808 	sub.w	r8, r7, r8
 8013b36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013b3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013b3e:	fa1f f888 	uxth.w	r8, r8
 8013b42:	141f      	asrs	r7, r3, #16
 8013b44:	454d      	cmp	r5, r9
 8013b46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013b4a:	f84a 3b04 	str.w	r3, [sl], #4
 8013b4e:	d8e7      	bhi.n	8013b20 <__mdiff+0x7c>
 8013b50:	1b2b      	subs	r3, r5, r4
 8013b52:	3b15      	subs	r3, #21
 8013b54:	f023 0303 	bic.w	r3, r3, #3
 8013b58:	3304      	adds	r3, #4
 8013b5a:	3415      	adds	r4, #21
 8013b5c:	42a5      	cmp	r5, r4
 8013b5e:	bf38      	it	cc
 8013b60:	2304      	movcc	r3, #4
 8013b62:	4419      	add	r1, r3
 8013b64:	4473      	add	r3, lr
 8013b66:	469e      	mov	lr, r3
 8013b68:	460d      	mov	r5, r1
 8013b6a:	4565      	cmp	r5, ip
 8013b6c:	d30e      	bcc.n	8013b8c <__mdiff+0xe8>
 8013b6e:	f10c 0203 	add.w	r2, ip, #3
 8013b72:	1a52      	subs	r2, r2, r1
 8013b74:	f022 0203 	bic.w	r2, r2, #3
 8013b78:	3903      	subs	r1, #3
 8013b7a:	458c      	cmp	ip, r1
 8013b7c:	bf38      	it	cc
 8013b7e:	2200      	movcc	r2, #0
 8013b80:	441a      	add	r2, r3
 8013b82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013b86:	b17b      	cbz	r3, 8013ba8 <__mdiff+0x104>
 8013b88:	6106      	str	r6, [r0, #16]
 8013b8a:	e7a5      	b.n	8013ad8 <__mdiff+0x34>
 8013b8c:	f855 8b04 	ldr.w	r8, [r5], #4
 8013b90:	fa17 f488 	uxtah	r4, r7, r8
 8013b94:	1422      	asrs	r2, r4, #16
 8013b96:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8013b9a:	b2a4      	uxth	r4, r4
 8013b9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8013ba0:	f84e 4b04 	str.w	r4, [lr], #4
 8013ba4:	1417      	asrs	r7, r2, #16
 8013ba6:	e7e0      	b.n	8013b6a <__mdiff+0xc6>
 8013ba8:	3e01      	subs	r6, #1
 8013baa:	e7ea      	b.n	8013b82 <__mdiff+0xde>
 8013bac:	08014e2f 	.word	0x08014e2f
 8013bb0:	08014ea0 	.word	0x08014ea0

08013bb4 <__d2b>:
 8013bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013bb8:	4689      	mov	r9, r1
 8013bba:	2101      	movs	r1, #1
 8013bbc:	ec57 6b10 	vmov	r6, r7, d0
 8013bc0:	4690      	mov	r8, r2
 8013bc2:	f7ff fcd5 	bl	8013570 <_Balloc>
 8013bc6:	4604      	mov	r4, r0
 8013bc8:	b930      	cbnz	r0, 8013bd8 <__d2b+0x24>
 8013bca:	4602      	mov	r2, r0
 8013bcc:	4b25      	ldr	r3, [pc, #148]	; (8013c64 <__d2b+0xb0>)
 8013bce:	4826      	ldr	r0, [pc, #152]	; (8013c68 <__d2b+0xb4>)
 8013bd0:	f240 310a 	movw	r1, #778	; 0x30a
 8013bd4:	f000 fac4 	bl	8014160 <__assert_func>
 8013bd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013bdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013be0:	bb35      	cbnz	r5, 8013c30 <__d2b+0x7c>
 8013be2:	2e00      	cmp	r6, #0
 8013be4:	9301      	str	r3, [sp, #4]
 8013be6:	d028      	beq.n	8013c3a <__d2b+0x86>
 8013be8:	4668      	mov	r0, sp
 8013bea:	9600      	str	r6, [sp, #0]
 8013bec:	f7ff fd8c 	bl	8013708 <__lo0bits>
 8013bf0:	9900      	ldr	r1, [sp, #0]
 8013bf2:	b300      	cbz	r0, 8013c36 <__d2b+0x82>
 8013bf4:	9a01      	ldr	r2, [sp, #4]
 8013bf6:	f1c0 0320 	rsb	r3, r0, #32
 8013bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8013bfe:	430b      	orrs	r3, r1
 8013c00:	40c2      	lsrs	r2, r0
 8013c02:	6163      	str	r3, [r4, #20]
 8013c04:	9201      	str	r2, [sp, #4]
 8013c06:	9b01      	ldr	r3, [sp, #4]
 8013c08:	61a3      	str	r3, [r4, #24]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	bf14      	ite	ne
 8013c0e:	2202      	movne	r2, #2
 8013c10:	2201      	moveq	r2, #1
 8013c12:	6122      	str	r2, [r4, #16]
 8013c14:	b1d5      	cbz	r5, 8013c4c <__d2b+0x98>
 8013c16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013c1a:	4405      	add	r5, r0
 8013c1c:	f8c9 5000 	str.w	r5, [r9]
 8013c20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013c24:	f8c8 0000 	str.w	r0, [r8]
 8013c28:	4620      	mov	r0, r4
 8013c2a:	b003      	add	sp, #12
 8013c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c34:	e7d5      	b.n	8013be2 <__d2b+0x2e>
 8013c36:	6161      	str	r1, [r4, #20]
 8013c38:	e7e5      	b.n	8013c06 <__d2b+0x52>
 8013c3a:	a801      	add	r0, sp, #4
 8013c3c:	f7ff fd64 	bl	8013708 <__lo0bits>
 8013c40:	9b01      	ldr	r3, [sp, #4]
 8013c42:	6163      	str	r3, [r4, #20]
 8013c44:	2201      	movs	r2, #1
 8013c46:	6122      	str	r2, [r4, #16]
 8013c48:	3020      	adds	r0, #32
 8013c4a:	e7e3      	b.n	8013c14 <__d2b+0x60>
 8013c4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013c50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013c54:	f8c9 0000 	str.w	r0, [r9]
 8013c58:	6918      	ldr	r0, [r3, #16]
 8013c5a:	f7ff fd35 	bl	80136c8 <__hi0bits>
 8013c5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013c62:	e7df      	b.n	8013c24 <__d2b+0x70>
 8013c64:	08014e2f 	.word	0x08014e2f
 8013c68:	08014ea0 	.word	0x08014ea0

08013c6c <_calloc_r>:
 8013c6c:	b513      	push	{r0, r1, r4, lr}
 8013c6e:	434a      	muls	r2, r1
 8013c70:	4611      	mov	r1, r2
 8013c72:	9201      	str	r2, [sp, #4]
 8013c74:	f000 f85a 	bl	8013d2c <_malloc_r>
 8013c78:	4604      	mov	r4, r0
 8013c7a:	b118      	cbz	r0, 8013c84 <_calloc_r+0x18>
 8013c7c:	9a01      	ldr	r2, [sp, #4]
 8013c7e:	2100      	movs	r1, #0
 8013c80:	f7fd fe96 	bl	80119b0 <memset>
 8013c84:	4620      	mov	r0, r4
 8013c86:	b002      	add	sp, #8
 8013c88:	bd10      	pop	{r4, pc}
	...

08013c8c <_free_r>:
 8013c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c8e:	2900      	cmp	r1, #0
 8013c90:	d048      	beq.n	8013d24 <_free_r+0x98>
 8013c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c96:	9001      	str	r0, [sp, #4]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8013c9e:	bfb8      	it	lt
 8013ca0:	18e4      	addlt	r4, r4, r3
 8013ca2:	f000 fae3 	bl	801426c <__malloc_lock>
 8013ca6:	4a20      	ldr	r2, [pc, #128]	; (8013d28 <_free_r+0x9c>)
 8013ca8:	9801      	ldr	r0, [sp, #4]
 8013caa:	6813      	ldr	r3, [r2, #0]
 8013cac:	4615      	mov	r5, r2
 8013cae:	b933      	cbnz	r3, 8013cbe <_free_r+0x32>
 8013cb0:	6063      	str	r3, [r4, #4]
 8013cb2:	6014      	str	r4, [r2, #0]
 8013cb4:	b003      	add	sp, #12
 8013cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cba:	f000 badd 	b.w	8014278 <__malloc_unlock>
 8013cbe:	42a3      	cmp	r3, r4
 8013cc0:	d90b      	bls.n	8013cda <_free_r+0x4e>
 8013cc2:	6821      	ldr	r1, [r4, #0]
 8013cc4:	1862      	adds	r2, r4, r1
 8013cc6:	4293      	cmp	r3, r2
 8013cc8:	bf04      	itt	eq
 8013cca:	681a      	ldreq	r2, [r3, #0]
 8013ccc:	685b      	ldreq	r3, [r3, #4]
 8013cce:	6063      	str	r3, [r4, #4]
 8013cd0:	bf04      	itt	eq
 8013cd2:	1852      	addeq	r2, r2, r1
 8013cd4:	6022      	streq	r2, [r4, #0]
 8013cd6:	602c      	str	r4, [r5, #0]
 8013cd8:	e7ec      	b.n	8013cb4 <_free_r+0x28>
 8013cda:	461a      	mov	r2, r3
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	b10b      	cbz	r3, 8013ce4 <_free_r+0x58>
 8013ce0:	42a3      	cmp	r3, r4
 8013ce2:	d9fa      	bls.n	8013cda <_free_r+0x4e>
 8013ce4:	6811      	ldr	r1, [r2, #0]
 8013ce6:	1855      	adds	r5, r2, r1
 8013ce8:	42a5      	cmp	r5, r4
 8013cea:	d10b      	bne.n	8013d04 <_free_r+0x78>
 8013cec:	6824      	ldr	r4, [r4, #0]
 8013cee:	4421      	add	r1, r4
 8013cf0:	1854      	adds	r4, r2, r1
 8013cf2:	42a3      	cmp	r3, r4
 8013cf4:	6011      	str	r1, [r2, #0]
 8013cf6:	d1dd      	bne.n	8013cb4 <_free_r+0x28>
 8013cf8:	681c      	ldr	r4, [r3, #0]
 8013cfa:	685b      	ldr	r3, [r3, #4]
 8013cfc:	6053      	str	r3, [r2, #4]
 8013cfe:	4421      	add	r1, r4
 8013d00:	6011      	str	r1, [r2, #0]
 8013d02:	e7d7      	b.n	8013cb4 <_free_r+0x28>
 8013d04:	d902      	bls.n	8013d0c <_free_r+0x80>
 8013d06:	230c      	movs	r3, #12
 8013d08:	6003      	str	r3, [r0, #0]
 8013d0a:	e7d3      	b.n	8013cb4 <_free_r+0x28>
 8013d0c:	6825      	ldr	r5, [r4, #0]
 8013d0e:	1961      	adds	r1, r4, r5
 8013d10:	428b      	cmp	r3, r1
 8013d12:	bf04      	itt	eq
 8013d14:	6819      	ldreq	r1, [r3, #0]
 8013d16:	685b      	ldreq	r3, [r3, #4]
 8013d18:	6063      	str	r3, [r4, #4]
 8013d1a:	bf04      	itt	eq
 8013d1c:	1949      	addeq	r1, r1, r5
 8013d1e:	6021      	streq	r1, [r4, #0]
 8013d20:	6054      	str	r4, [r2, #4]
 8013d22:	e7c7      	b.n	8013cb4 <_free_r+0x28>
 8013d24:	b003      	add	sp, #12
 8013d26:	bd30      	pop	{r4, r5, pc}
 8013d28:	24000248 	.word	0x24000248

08013d2c <_malloc_r>:
 8013d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d2e:	1ccd      	adds	r5, r1, #3
 8013d30:	f025 0503 	bic.w	r5, r5, #3
 8013d34:	3508      	adds	r5, #8
 8013d36:	2d0c      	cmp	r5, #12
 8013d38:	bf38      	it	cc
 8013d3a:	250c      	movcc	r5, #12
 8013d3c:	2d00      	cmp	r5, #0
 8013d3e:	4606      	mov	r6, r0
 8013d40:	db01      	blt.n	8013d46 <_malloc_r+0x1a>
 8013d42:	42a9      	cmp	r1, r5
 8013d44:	d903      	bls.n	8013d4e <_malloc_r+0x22>
 8013d46:	230c      	movs	r3, #12
 8013d48:	6033      	str	r3, [r6, #0]
 8013d4a:	2000      	movs	r0, #0
 8013d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d4e:	f000 fa8d 	bl	801426c <__malloc_lock>
 8013d52:	4921      	ldr	r1, [pc, #132]	; (8013dd8 <_malloc_r+0xac>)
 8013d54:	680a      	ldr	r2, [r1, #0]
 8013d56:	4614      	mov	r4, r2
 8013d58:	b99c      	cbnz	r4, 8013d82 <_malloc_r+0x56>
 8013d5a:	4f20      	ldr	r7, [pc, #128]	; (8013ddc <_malloc_r+0xb0>)
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	b923      	cbnz	r3, 8013d6a <_malloc_r+0x3e>
 8013d60:	4621      	mov	r1, r4
 8013d62:	4630      	mov	r0, r6
 8013d64:	f000 f996 	bl	8014094 <_sbrk_r>
 8013d68:	6038      	str	r0, [r7, #0]
 8013d6a:	4629      	mov	r1, r5
 8013d6c:	4630      	mov	r0, r6
 8013d6e:	f000 f991 	bl	8014094 <_sbrk_r>
 8013d72:	1c43      	adds	r3, r0, #1
 8013d74:	d123      	bne.n	8013dbe <_malloc_r+0x92>
 8013d76:	230c      	movs	r3, #12
 8013d78:	6033      	str	r3, [r6, #0]
 8013d7a:	4630      	mov	r0, r6
 8013d7c:	f000 fa7c 	bl	8014278 <__malloc_unlock>
 8013d80:	e7e3      	b.n	8013d4a <_malloc_r+0x1e>
 8013d82:	6823      	ldr	r3, [r4, #0]
 8013d84:	1b5b      	subs	r3, r3, r5
 8013d86:	d417      	bmi.n	8013db8 <_malloc_r+0x8c>
 8013d88:	2b0b      	cmp	r3, #11
 8013d8a:	d903      	bls.n	8013d94 <_malloc_r+0x68>
 8013d8c:	6023      	str	r3, [r4, #0]
 8013d8e:	441c      	add	r4, r3
 8013d90:	6025      	str	r5, [r4, #0]
 8013d92:	e004      	b.n	8013d9e <_malloc_r+0x72>
 8013d94:	6863      	ldr	r3, [r4, #4]
 8013d96:	42a2      	cmp	r2, r4
 8013d98:	bf0c      	ite	eq
 8013d9a:	600b      	streq	r3, [r1, #0]
 8013d9c:	6053      	strne	r3, [r2, #4]
 8013d9e:	4630      	mov	r0, r6
 8013da0:	f000 fa6a 	bl	8014278 <__malloc_unlock>
 8013da4:	f104 000b 	add.w	r0, r4, #11
 8013da8:	1d23      	adds	r3, r4, #4
 8013daa:	f020 0007 	bic.w	r0, r0, #7
 8013dae:	1ac2      	subs	r2, r0, r3
 8013db0:	d0cc      	beq.n	8013d4c <_malloc_r+0x20>
 8013db2:	1a1b      	subs	r3, r3, r0
 8013db4:	50a3      	str	r3, [r4, r2]
 8013db6:	e7c9      	b.n	8013d4c <_malloc_r+0x20>
 8013db8:	4622      	mov	r2, r4
 8013dba:	6864      	ldr	r4, [r4, #4]
 8013dbc:	e7cc      	b.n	8013d58 <_malloc_r+0x2c>
 8013dbe:	1cc4      	adds	r4, r0, #3
 8013dc0:	f024 0403 	bic.w	r4, r4, #3
 8013dc4:	42a0      	cmp	r0, r4
 8013dc6:	d0e3      	beq.n	8013d90 <_malloc_r+0x64>
 8013dc8:	1a21      	subs	r1, r4, r0
 8013dca:	4630      	mov	r0, r6
 8013dcc:	f000 f962 	bl	8014094 <_sbrk_r>
 8013dd0:	3001      	adds	r0, #1
 8013dd2:	d1dd      	bne.n	8013d90 <_malloc_r+0x64>
 8013dd4:	e7cf      	b.n	8013d76 <_malloc_r+0x4a>
 8013dd6:	bf00      	nop
 8013dd8:	24000248 	.word	0x24000248
 8013ddc:	2400024c 	.word	0x2400024c

08013de0 <__sfputc_r>:
 8013de0:	6893      	ldr	r3, [r2, #8]
 8013de2:	3b01      	subs	r3, #1
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	b410      	push	{r4}
 8013de8:	6093      	str	r3, [r2, #8]
 8013dea:	da08      	bge.n	8013dfe <__sfputc_r+0x1e>
 8013dec:	6994      	ldr	r4, [r2, #24]
 8013dee:	42a3      	cmp	r3, r4
 8013df0:	db01      	blt.n	8013df6 <__sfputc_r+0x16>
 8013df2:	290a      	cmp	r1, #10
 8013df4:	d103      	bne.n	8013dfe <__sfputc_r+0x1e>
 8013df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dfa:	f7fe bab1 	b.w	8012360 <__swbuf_r>
 8013dfe:	6813      	ldr	r3, [r2, #0]
 8013e00:	1c58      	adds	r0, r3, #1
 8013e02:	6010      	str	r0, [r2, #0]
 8013e04:	7019      	strb	r1, [r3, #0]
 8013e06:	4608      	mov	r0, r1
 8013e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e0c:	4770      	bx	lr

08013e0e <__sfputs_r>:
 8013e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e10:	4606      	mov	r6, r0
 8013e12:	460f      	mov	r7, r1
 8013e14:	4614      	mov	r4, r2
 8013e16:	18d5      	adds	r5, r2, r3
 8013e18:	42ac      	cmp	r4, r5
 8013e1a:	d101      	bne.n	8013e20 <__sfputs_r+0x12>
 8013e1c:	2000      	movs	r0, #0
 8013e1e:	e007      	b.n	8013e30 <__sfputs_r+0x22>
 8013e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e24:	463a      	mov	r2, r7
 8013e26:	4630      	mov	r0, r6
 8013e28:	f7ff ffda 	bl	8013de0 <__sfputc_r>
 8013e2c:	1c43      	adds	r3, r0, #1
 8013e2e:	d1f3      	bne.n	8013e18 <__sfputs_r+0xa>
 8013e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013e34 <_vfiprintf_r>:
 8013e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e38:	460d      	mov	r5, r1
 8013e3a:	b09d      	sub	sp, #116	; 0x74
 8013e3c:	4614      	mov	r4, r2
 8013e3e:	4698      	mov	r8, r3
 8013e40:	4606      	mov	r6, r0
 8013e42:	b118      	cbz	r0, 8013e4c <_vfiprintf_r+0x18>
 8013e44:	6983      	ldr	r3, [r0, #24]
 8013e46:	b90b      	cbnz	r3, 8013e4c <_vfiprintf_r+0x18>
 8013e48:	f7ff fa72 	bl	8013330 <__sinit>
 8013e4c:	4b89      	ldr	r3, [pc, #548]	; (8014074 <_vfiprintf_r+0x240>)
 8013e4e:	429d      	cmp	r5, r3
 8013e50:	d11b      	bne.n	8013e8a <_vfiprintf_r+0x56>
 8013e52:	6875      	ldr	r5, [r6, #4]
 8013e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e56:	07d9      	lsls	r1, r3, #31
 8013e58:	d405      	bmi.n	8013e66 <_vfiprintf_r+0x32>
 8013e5a:	89ab      	ldrh	r3, [r5, #12]
 8013e5c:	059a      	lsls	r2, r3, #22
 8013e5e:	d402      	bmi.n	8013e66 <_vfiprintf_r+0x32>
 8013e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e62:	f7ff fb08 	bl	8013476 <__retarget_lock_acquire_recursive>
 8013e66:	89ab      	ldrh	r3, [r5, #12]
 8013e68:	071b      	lsls	r3, r3, #28
 8013e6a:	d501      	bpl.n	8013e70 <_vfiprintf_r+0x3c>
 8013e6c:	692b      	ldr	r3, [r5, #16]
 8013e6e:	b9eb      	cbnz	r3, 8013eac <_vfiprintf_r+0x78>
 8013e70:	4629      	mov	r1, r5
 8013e72:	4630      	mov	r0, r6
 8013e74:	f7fe fac6 	bl	8012404 <__swsetup_r>
 8013e78:	b1c0      	cbz	r0, 8013eac <_vfiprintf_r+0x78>
 8013e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e7c:	07dc      	lsls	r4, r3, #31
 8013e7e:	d50e      	bpl.n	8013e9e <_vfiprintf_r+0x6a>
 8013e80:	f04f 30ff 	mov.w	r0, #4294967295
 8013e84:	b01d      	add	sp, #116	; 0x74
 8013e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e8a:	4b7b      	ldr	r3, [pc, #492]	; (8014078 <_vfiprintf_r+0x244>)
 8013e8c:	429d      	cmp	r5, r3
 8013e8e:	d101      	bne.n	8013e94 <_vfiprintf_r+0x60>
 8013e90:	68b5      	ldr	r5, [r6, #8]
 8013e92:	e7df      	b.n	8013e54 <_vfiprintf_r+0x20>
 8013e94:	4b79      	ldr	r3, [pc, #484]	; (801407c <_vfiprintf_r+0x248>)
 8013e96:	429d      	cmp	r5, r3
 8013e98:	bf08      	it	eq
 8013e9a:	68f5      	ldreq	r5, [r6, #12]
 8013e9c:	e7da      	b.n	8013e54 <_vfiprintf_r+0x20>
 8013e9e:	89ab      	ldrh	r3, [r5, #12]
 8013ea0:	0598      	lsls	r0, r3, #22
 8013ea2:	d4ed      	bmi.n	8013e80 <_vfiprintf_r+0x4c>
 8013ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013ea6:	f7ff fae7 	bl	8013478 <__retarget_lock_release_recursive>
 8013eaa:	e7e9      	b.n	8013e80 <_vfiprintf_r+0x4c>
 8013eac:	2300      	movs	r3, #0
 8013eae:	9309      	str	r3, [sp, #36]	; 0x24
 8013eb0:	2320      	movs	r3, #32
 8013eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8013eba:	2330      	movs	r3, #48	; 0x30
 8013ebc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014080 <_vfiprintf_r+0x24c>
 8013ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ec4:	f04f 0901 	mov.w	r9, #1
 8013ec8:	4623      	mov	r3, r4
 8013eca:	469a      	mov	sl, r3
 8013ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ed0:	b10a      	cbz	r2, 8013ed6 <_vfiprintf_r+0xa2>
 8013ed2:	2a25      	cmp	r2, #37	; 0x25
 8013ed4:	d1f9      	bne.n	8013eca <_vfiprintf_r+0x96>
 8013ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8013eda:	d00b      	beq.n	8013ef4 <_vfiprintf_r+0xc0>
 8013edc:	465b      	mov	r3, fp
 8013ede:	4622      	mov	r2, r4
 8013ee0:	4629      	mov	r1, r5
 8013ee2:	4630      	mov	r0, r6
 8013ee4:	f7ff ff93 	bl	8013e0e <__sfputs_r>
 8013ee8:	3001      	adds	r0, #1
 8013eea:	f000 80aa 	beq.w	8014042 <_vfiprintf_r+0x20e>
 8013eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ef0:	445a      	add	r2, fp
 8013ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8013ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	f000 80a2 	beq.w	8014042 <_vfiprintf_r+0x20e>
 8013efe:	2300      	movs	r3, #0
 8013f00:	f04f 32ff 	mov.w	r2, #4294967295
 8013f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f08:	f10a 0a01 	add.w	sl, sl, #1
 8013f0c:	9304      	str	r3, [sp, #16]
 8013f0e:	9307      	str	r3, [sp, #28]
 8013f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f14:	931a      	str	r3, [sp, #104]	; 0x68
 8013f16:	4654      	mov	r4, sl
 8013f18:	2205      	movs	r2, #5
 8013f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f1e:	4858      	ldr	r0, [pc, #352]	; (8014080 <_vfiprintf_r+0x24c>)
 8013f20:	f7ec f9e6 	bl	80002f0 <memchr>
 8013f24:	9a04      	ldr	r2, [sp, #16]
 8013f26:	b9d8      	cbnz	r0, 8013f60 <_vfiprintf_r+0x12c>
 8013f28:	06d1      	lsls	r1, r2, #27
 8013f2a:	bf44      	itt	mi
 8013f2c:	2320      	movmi	r3, #32
 8013f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f32:	0713      	lsls	r3, r2, #28
 8013f34:	bf44      	itt	mi
 8013f36:	232b      	movmi	r3, #43	; 0x2b
 8013f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8013f40:	2b2a      	cmp	r3, #42	; 0x2a
 8013f42:	d015      	beq.n	8013f70 <_vfiprintf_r+0x13c>
 8013f44:	9a07      	ldr	r2, [sp, #28]
 8013f46:	4654      	mov	r4, sl
 8013f48:	2000      	movs	r0, #0
 8013f4a:	f04f 0c0a 	mov.w	ip, #10
 8013f4e:	4621      	mov	r1, r4
 8013f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f54:	3b30      	subs	r3, #48	; 0x30
 8013f56:	2b09      	cmp	r3, #9
 8013f58:	d94e      	bls.n	8013ff8 <_vfiprintf_r+0x1c4>
 8013f5a:	b1b0      	cbz	r0, 8013f8a <_vfiprintf_r+0x156>
 8013f5c:	9207      	str	r2, [sp, #28]
 8013f5e:	e014      	b.n	8013f8a <_vfiprintf_r+0x156>
 8013f60:	eba0 0308 	sub.w	r3, r0, r8
 8013f64:	fa09 f303 	lsl.w	r3, r9, r3
 8013f68:	4313      	orrs	r3, r2
 8013f6a:	9304      	str	r3, [sp, #16]
 8013f6c:	46a2      	mov	sl, r4
 8013f6e:	e7d2      	b.n	8013f16 <_vfiprintf_r+0xe2>
 8013f70:	9b03      	ldr	r3, [sp, #12]
 8013f72:	1d19      	adds	r1, r3, #4
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	9103      	str	r1, [sp, #12]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	bfbb      	ittet	lt
 8013f7c:	425b      	neglt	r3, r3
 8013f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8013f82:	9307      	strge	r3, [sp, #28]
 8013f84:	9307      	strlt	r3, [sp, #28]
 8013f86:	bfb8      	it	lt
 8013f88:	9204      	strlt	r2, [sp, #16]
 8013f8a:	7823      	ldrb	r3, [r4, #0]
 8013f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8013f8e:	d10c      	bne.n	8013faa <_vfiprintf_r+0x176>
 8013f90:	7863      	ldrb	r3, [r4, #1]
 8013f92:	2b2a      	cmp	r3, #42	; 0x2a
 8013f94:	d135      	bne.n	8014002 <_vfiprintf_r+0x1ce>
 8013f96:	9b03      	ldr	r3, [sp, #12]
 8013f98:	1d1a      	adds	r2, r3, #4
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	9203      	str	r2, [sp, #12]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	bfb8      	it	lt
 8013fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8013fa6:	3402      	adds	r4, #2
 8013fa8:	9305      	str	r3, [sp, #20]
 8013faa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014090 <_vfiprintf_r+0x25c>
 8013fae:	7821      	ldrb	r1, [r4, #0]
 8013fb0:	2203      	movs	r2, #3
 8013fb2:	4650      	mov	r0, sl
 8013fb4:	f7ec f99c 	bl	80002f0 <memchr>
 8013fb8:	b140      	cbz	r0, 8013fcc <_vfiprintf_r+0x198>
 8013fba:	2340      	movs	r3, #64	; 0x40
 8013fbc:	eba0 000a 	sub.w	r0, r0, sl
 8013fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8013fc4:	9b04      	ldr	r3, [sp, #16]
 8013fc6:	4303      	orrs	r3, r0
 8013fc8:	3401      	adds	r4, #1
 8013fca:	9304      	str	r3, [sp, #16]
 8013fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fd0:	482c      	ldr	r0, [pc, #176]	; (8014084 <_vfiprintf_r+0x250>)
 8013fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013fd6:	2206      	movs	r2, #6
 8013fd8:	f7ec f98a 	bl	80002f0 <memchr>
 8013fdc:	2800      	cmp	r0, #0
 8013fde:	d03f      	beq.n	8014060 <_vfiprintf_r+0x22c>
 8013fe0:	4b29      	ldr	r3, [pc, #164]	; (8014088 <_vfiprintf_r+0x254>)
 8013fe2:	bb1b      	cbnz	r3, 801402c <_vfiprintf_r+0x1f8>
 8013fe4:	9b03      	ldr	r3, [sp, #12]
 8013fe6:	3307      	adds	r3, #7
 8013fe8:	f023 0307 	bic.w	r3, r3, #7
 8013fec:	3308      	adds	r3, #8
 8013fee:	9303      	str	r3, [sp, #12]
 8013ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ff2:	443b      	add	r3, r7
 8013ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8013ff6:	e767      	b.n	8013ec8 <_vfiprintf_r+0x94>
 8013ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ffc:	460c      	mov	r4, r1
 8013ffe:	2001      	movs	r0, #1
 8014000:	e7a5      	b.n	8013f4e <_vfiprintf_r+0x11a>
 8014002:	2300      	movs	r3, #0
 8014004:	3401      	adds	r4, #1
 8014006:	9305      	str	r3, [sp, #20]
 8014008:	4619      	mov	r1, r3
 801400a:	f04f 0c0a 	mov.w	ip, #10
 801400e:	4620      	mov	r0, r4
 8014010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014014:	3a30      	subs	r2, #48	; 0x30
 8014016:	2a09      	cmp	r2, #9
 8014018:	d903      	bls.n	8014022 <_vfiprintf_r+0x1ee>
 801401a:	2b00      	cmp	r3, #0
 801401c:	d0c5      	beq.n	8013faa <_vfiprintf_r+0x176>
 801401e:	9105      	str	r1, [sp, #20]
 8014020:	e7c3      	b.n	8013faa <_vfiprintf_r+0x176>
 8014022:	fb0c 2101 	mla	r1, ip, r1, r2
 8014026:	4604      	mov	r4, r0
 8014028:	2301      	movs	r3, #1
 801402a:	e7f0      	b.n	801400e <_vfiprintf_r+0x1da>
 801402c:	ab03      	add	r3, sp, #12
 801402e:	9300      	str	r3, [sp, #0]
 8014030:	462a      	mov	r2, r5
 8014032:	4b16      	ldr	r3, [pc, #88]	; (801408c <_vfiprintf_r+0x258>)
 8014034:	a904      	add	r1, sp, #16
 8014036:	4630      	mov	r0, r6
 8014038:	f7fd fd52 	bl	8011ae0 <_printf_float>
 801403c:	4607      	mov	r7, r0
 801403e:	1c78      	adds	r0, r7, #1
 8014040:	d1d6      	bne.n	8013ff0 <_vfiprintf_r+0x1bc>
 8014042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014044:	07d9      	lsls	r1, r3, #31
 8014046:	d405      	bmi.n	8014054 <_vfiprintf_r+0x220>
 8014048:	89ab      	ldrh	r3, [r5, #12]
 801404a:	059a      	lsls	r2, r3, #22
 801404c:	d402      	bmi.n	8014054 <_vfiprintf_r+0x220>
 801404e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014050:	f7ff fa12 	bl	8013478 <__retarget_lock_release_recursive>
 8014054:	89ab      	ldrh	r3, [r5, #12]
 8014056:	065b      	lsls	r3, r3, #25
 8014058:	f53f af12 	bmi.w	8013e80 <_vfiprintf_r+0x4c>
 801405c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801405e:	e711      	b.n	8013e84 <_vfiprintf_r+0x50>
 8014060:	ab03      	add	r3, sp, #12
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	462a      	mov	r2, r5
 8014066:	4b09      	ldr	r3, [pc, #36]	; (801408c <_vfiprintf_r+0x258>)
 8014068:	a904      	add	r1, sp, #16
 801406a:	4630      	mov	r0, r6
 801406c:	f7fd ffc4 	bl	8011ff8 <_printf_i>
 8014070:	e7e4      	b.n	801403c <_vfiprintf_r+0x208>
 8014072:	bf00      	nop
 8014074:	08014e60 	.word	0x08014e60
 8014078:	08014e80 	.word	0x08014e80
 801407c:	08014e40 	.word	0x08014e40
 8014080:	08014ffc 	.word	0x08014ffc
 8014084:	08015006 	.word	0x08015006
 8014088:	08011ae1 	.word	0x08011ae1
 801408c:	08013e0f 	.word	0x08013e0f
 8014090:	08015002 	.word	0x08015002

08014094 <_sbrk_r>:
 8014094:	b538      	push	{r3, r4, r5, lr}
 8014096:	4d06      	ldr	r5, [pc, #24]	; (80140b0 <_sbrk_r+0x1c>)
 8014098:	2300      	movs	r3, #0
 801409a:	4604      	mov	r4, r0
 801409c:	4608      	mov	r0, r1
 801409e:	602b      	str	r3, [r5, #0]
 80140a0:	f7f0 fadc 	bl	800465c <_sbrk>
 80140a4:	1c43      	adds	r3, r0, #1
 80140a6:	d102      	bne.n	80140ae <_sbrk_r+0x1a>
 80140a8:	682b      	ldr	r3, [r5, #0]
 80140aa:	b103      	cbz	r3, 80140ae <_sbrk_r+0x1a>
 80140ac:	6023      	str	r3, [r4, #0]
 80140ae:	bd38      	pop	{r3, r4, r5, pc}
 80140b0:	24000870 	.word	0x24000870

080140b4 <__sread>:
 80140b4:	b510      	push	{r4, lr}
 80140b6:	460c      	mov	r4, r1
 80140b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140bc:	f000 f8e2 	bl	8014284 <_read_r>
 80140c0:	2800      	cmp	r0, #0
 80140c2:	bfab      	itete	ge
 80140c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80140c6:	89a3      	ldrhlt	r3, [r4, #12]
 80140c8:	181b      	addge	r3, r3, r0
 80140ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80140ce:	bfac      	ite	ge
 80140d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80140d2:	81a3      	strhlt	r3, [r4, #12]
 80140d4:	bd10      	pop	{r4, pc}

080140d6 <__swrite>:
 80140d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140da:	461f      	mov	r7, r3
 80140dc:	898b      	ldrh	r3, [r1, #12]
 80140de:	05db      	lsls	r3, r3, #23
 80140e0:	4605      	mov	r5, r0
 80140e2:	460c      	mov	r4, r1
 80140e4:	4616      	mov	r6, r2
 80140e6:	d505      	bpl.n	80140f4 <__swrite+0x1e>
 80140e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140ec:	2302      	movs	r3, #2
 80140ee:	2200      	movs	r2, #0
 80140f0:	f000 f898 	bl	8014224 <_lseek_r>
 80140f4:	89a3      	ldrh	r3, [r4, #12]
 80140f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80140fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80140fe:	81a3      	strh	r3, [r4, #12]
 8014100:	4632      	mov	r2, r6
 8014102:	463b      	mov	r3, r7
 8014104:	4628      	mov	r0, r5
 8014106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801410a:	f000 b817 	b.w	801413c <_write_r>

0801410e <__sseek>:
 801410e:	b510      	push	{r4, lr}
 8014110:	460c      	mov	r4, r1
 8014112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014116:	f000 f885 	bl	8014224 <_lseek_r>
 801411a:	1c43      	adds	r3, r0, #1
 801411c:	89a3      	ldrh	r3, [r4, #12]
 801411e:	bf15      	itete	ne
 8014120:	6560      	strne	r0, [r4, #84]	; 0x54
 8014122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801412a:	81a3      	strheq	r3, [r4, #12]
 801412c:	bf18      	it	ne
 801412e:	81a3      	strhne	r3, [r4, #12]
 8014130:	bd10      	pop	{r4, pc}

08014132 <__sclose>:
 8014132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014136:	f000 b831 	b.w	801419c <_close_r>
	...

0801413c <_write_r>:
 801413c:	b538      	push	{r3, r4, r5, lr}
 801413e:	4d07      	ldr	r5, [pc, #28]	; (801415c <_write_r+0x20>)
 8014140:	4604      	mov	r4, r0
 8014142:	4608      	mov	r0, r1
 8014144:	4611      	mov	r1, r2
 8014146:	2200      	movs	r2, #0
 8014148:	602a      	str	r2, [r5, #0]
 801414a:	461a      	mov	r2, r3
 801414c:	f7ee fd42 	bl	8002bd4 <_write>
 8014150:	1c43      	adds	r3, r0, #1
 8014152:	d102      	bne.n	801415a <_write_r+0x1e>
 8014154:	682b      	ldr	r3, [r5, #0]
 8014156:	b103      	cbz	r3, 801415a <_write_r+0x1e>
 8014158:	6023      	str	r3, [r4, #0]
 801415a:	bd38      	pop	{r3, r4, r5, pc}
 801415c:	24000870 	.word	0x24000870

08014160 <__assert_func>:
 8014160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014162:	4614      	mov	r4, r2
 8014164:	461a      	mov	r2, r3
 8014166:	4b09      	ldr	r3, [pc, #36]	; (801418c <__assert_func+0x2c>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	4605      	mov	r5, r0
 801416c:	68d8      	ldr	r0, [r3, #12]
 801416e:	b14c      	cbz	r4, 8014184 <__assert_func+0x24>
 8014170:	4b07      	ldr	r3, [pc, #28]	; (8014190 <__assert_func+0x30>)
 8014172:	9100      	str	r1, [sp, #0]
 8014174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014178:	4906      	ldr	r1, [pc, #24]	; (8014194 <__assert_func+0x34>)
 801417a:	462b      	mov	r3, r5
 801417c:	f000 f81e 	bl	80141bc <fiprintf>
 8014180:	f000 f89f 	bl	80142c2 <abort>
 8014184:	4b04      	ldr	r3, [pc, #16]	; (8014198 <__assert_func+0x38>)
 8014186:	461c      	mov	r4, r3
 8014188:	e7f3      	b.n	8014172 <__assert_func+0x12>
 801418a:	bf00      	nop
 801418c:	24000024 	.word	0x24000024
 8014190:	0801500d 	.word	0x0801500d
 8014194:	0801501a 	.word	0x0801501a
 8014198:	08015048 	.word	0x08015048

0801419c <_close_r>:
 801419c:	b538      	push	{r3, r4, r5, lr}
 801419e:	4d06      	ldr	r5, [pc, #24]	; (80141b8 <_close_r+0x1c>)
 80141a0:	2300      	movs	r3, #0
 80141a2:	4604      	mov	r4, r0
 80141a4:	4608      	mov	r0, r1
 80141a6:	602b      	str	r3, [r5, #0]
 80141a8:	f7f0 fa23 	bl	80045f2 <_close>
 80141ac:	1c43      	adds	r3, r0, #1
 80141ae:	d102      	bne.n	80141b6 <_close_r+0x1a>
 80141b0:	682b      	ldr	r3, [r5, #0]
 80141b2:	b103      	cbz	r3, 80141b6 <_close_r+0x1a>
 80141b4:	6023      	str	r3, [r4, #0]
 80141b6:	bd38      	pop	{r3, r4, r5, pc}
 80141b8:	24000870 	.word	0x24000870

080141bc <fiprintf>:
 80141bc:	b40e      	push	{r1, r2, r3}
 80141be:	b503      	push	{r0, r1, lr}
 80141c0:	4601      	mov	r1, r0
 80141c2:	ab03      	add	r3, sp, #12
 80141c4:	4805      	ldr	r0, [pc, #20]	; (80141dc <fiprintf+0x20>)
 80141c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80141ca:	6800      	ldr	r0, [r0, #0]
 80141cc:	9301      	str	r3, [sp, #4]
 80141ce:	f7ff fe31 	bl	8013e34 <_vfiprintf_r>
 80141d2:	b002      	add	sp, #8
 80141d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80141d8:	b003      	add	sp, #12
 80141da:	4770      	bx	lr
 80141dc:	24000024 	.word	0x24000024

080141e0 <_fstat_r>:
 80141e0:	b538      	push	{r3, r4, r5, lr}
 80141e2:	4d07      	ldr	r5, [pc, #28]	; (8014200 <_fstat_r+0x20>)
 80141e4:	2300      	movs	r3, #0
 80141e6:	4604      	mov	r4, r0
 80141e8:	4608      	mov	r0, r1
 80141ea:	4611      	mov	r1, r2
 80141ec:	602b      	str	r3, [r5, #0]
 80141ee:	f7f0 fa0c 	bl	800460a <_fstat>
 80141f2:	1c43      	adds	r3, r0, #1
 80141f4:	d102      	bne.n	80141fc <_fstat_r+0x1c>
 80141f6:	682b      	ldr	r3, [r5, #0]
 80141f8:	b103      	cbz	r3, 80141fc <_fstat_r+0x1c>
 80141fa:	6023      	str	r3, [r4, #0]
 80141fc:	bd38      	pop	{r3, r4, r5, pc}
 80141fe:	bf00      	nop
 8014200:	24000870 	.word	0x24000870

08014204 <_isatty_r>:
 8014204:	b538      	push	{r3, r4, r5, lr}
 8014206:	4d06      	ldr	r5, [pc, #24]	; (8014220 <_isatty_r+0x1c>)
 8014208:	2300      	movs	r3, #0
 801420a:	4604      	mov	r4, r0
 801420c:	4608      	mov	r0, r1
 801420e:	602b      	str	r3, [r5, #0]
 8014210:	f7f0 fa0b 	bl	800462a <_isatty>
 8014214:	1c43      	adds	r3, r0, #1
 8014216:	d102      	bne.n	801421e <_isatty_r+0x1a>
 8014218:	682b      	ldr	r3, [r5, #0]
 801421a:	b103      	cbz	r3, 801421e <_isatty_r+0x1a>
 801421c:	6023      	str	r3, [r4, #0]
 801421e:	bd38      	pop	{r3, r4, r5, pc}
 8014220:	24000870 	.word	0x24000870

08014224 <_lseek_r>:
 8014224:	b538      	push	{r3, r4, r5, lr}
 8014226:	4d07      	ldr	r5, [pc, #28]	; (8014244 <_lseek_r+0x20>)
 8014228:	4604      	mov	r4, r0
 801422a:	4608      	mov	r0, r1
 801422c:	4611      	mov	r1, r2
 801422e:	2200      	movs	r2, #0
 8014230:	602a      	str	r2, [r5, #0]
 8014232:	461a      	mov	r2, r3
 8014234:	f7f0 fa04 	bl	8004640 <_lseek>
 8014238:	1c43      	adds	r3, r0, #1
 801423a:	d102      	bne.n	8014242 <_lseek_r+0x1e>
 801423c:	682b      	ldr	r3, [r5, #0]
 801423e:	b103      	cbz	r3, 8014242 <_lseek_r+0x1e>
 8014240:	6023      	str	r3, [r4, #0]
 8014242:	bd38      	pop	{r3, r4, r5, pc}
 8014244:	24000870 	.word	0x24000870

08014248 <__ascii_mbtowc>:
 8014248:	b082      	sub	sp, #8
 801424a:	b901      	cbnz	r1, 801424e <__ascii_mbtowc+0x6>
 801424c:	a901      	add	r1, sp, #4
 801424e:	b142      	cbz	r2, 8014262 <__ascii_mbtowc+0x1a>
 8014250:	b14b      	cbz	r3, 8014266 <__ascii_mbtowc+0x1e>
 8014252:	7813      	ldrb	r3, [r2, #0]
 8014254:	600b      	str	r3, [r1, #0]
 8014256:	7812      	ldrb	r2, [r2, #0]
 8014258:	1e10      	subs	r0, r2, #0
 801425a:	bf18      	it	ne
 801425c:	2001      	movne	r0, #1
 801425e:	b002      	add	sp, #8
 8014260:	4770      	bx	lr
 8014262:	4610      	mov	r0, r2
 8014264:	e7fb      	b.n	801425e <__ascii_mbtowc+0x16>
 8014266:	f06f 0001 	mvn.w	r0, #1
 801426a:	e7f8      	b.n	801425e <__ascii_mbtowc+0x16>

0801426c <__malloc_lock>:
 801426c:	4801      	ldr	r0, [pc, #4]	; (8014274 <__malloc_lock+0x8>)
 801426e:	f7ff b902 	b.w	8013476 <__retarget_lock_acquire_recursive>
 8014272:	bf00      	nop
 8014274:	24000868 	.word	0x24000868

08014278 <__malloc_unlock>:
 8014278:	4801      	ldr	r0, [pc, #4]	; (8014280 <__malloc_unlock+0x8>)
 801427a:	f7ff b8fd 	b.w	8013478 <__retarget_lock_release_recursive>
 801427e:	bf00      	nop
 8014280:	24000868 	.word	0x24000868

08014284 <_read_r>:
 8014284:	b538      	push	{r3, r4, r5, lr}
 8014286:	4d07      	ldr	r5, [pc, #28]	; (80142a4 <_read_r+0x20>)
 8014288:	4604      	mov	r4, r0
 801428a:	4608      	mov	r0, r1
 801428c:	4611      	mov	r1, r2
 801428e:	2200      	movs	r2, #0
 8014290:	602a      	str	r2, [r5, #0]
 8014292:	461a      	mov	r2, r3
 8014294:	f7f0 f990 	bl	80045b8 <_read>
 8014298:	1c43      	adds	r3, r0, #1
 801429a:	d102      	bne.n	80142a2 <_read_r+0x1e>
 801429c:	682b      	ldr	r3, [r5, #0]
 801429e:	b103      	cbz	r3, 80142a2 <_read_r+0x1e>
 80142a0:	6023      	str	r3, [r4, #0]
 80142a2:	bd38      	pop	{r3, r4, r5, pc}
 80142a4:	24000870 	.word	0x24000870

080142a8 <__ascii_wctomb>:
 80142a8:	b149      	cbz	r1, 80142be <__ascii_wctomb+0x16>
 80142aa:	2aff      	cmp	r2, #255	; 0xff
 80142ac:	bf85      	ittet	hi
 80142ae:	238a      	movhi	r3, #138	; 0x8a
 80142b0:	6003      	strhi	r3, [r0, #0]
 80142b2:	700a      	strbls	r2, [r1, #0]
 80142b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80142b8:	bf98      	it	ls
 80142ba:	2001      	movls	r0, #1
 80142bc:	4770      	bx	lr
 80142be:	4608      	mov	r0, r1
 80142c0:	4770      	bx	lr

080142c2 <abort>:
 80142c2:	b508      	push	{r3, lr}
 80142c4:	2006      	movs	r0, #6
 80142c6:	f000 f82b 	bl	8014320 <raise>
 80142ca:	2001      	movs	r0, #1
 80142cc:	f7f0 f96a 	bl	80045a4 <_exit>

080142d0 <_raise_r>:
 80142d0:	291f      	cmp	r1, #31
 80142d2:	b538      	push	{r3, r4, r5, lr}
 80142d4:	4604      	mov	r4, r0
 80142d6:	460d      	mov	r5, r1
 80142d8:	d904      	bls.n	80142e4 <_raise_r+0x14>
 80142da:	2316      	movs	r3, #22
 80142dc:	6003      	str	r3, [r0, #0]
 80142de:	f04f 30ff 	mov.w	r0, #4294967295
 80142e2:	bd38      	pop	{r3, r4, r5, pc}
 80142e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80142e6:	b112      	cbz	r2, 80142ee <_raise_r+0x1e>
 80142e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80142ec:	b94b      	cbnz	r3, 8014302 <_raise_r+0x32>
 80142ee:	4620      	mov	r0, r4
 80142f0:	f000 f830 	bl	8014354 <_getpid_r>
 80142f4:	462a      	mov	r2, r5
 80142f6:	4601      	mov	r1, r0
 80142f8:	4620      	mov	r0, r4
 80142fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142fe:	f000 b817 	b.w	8014330 <_kill_r>
 8014302:	2b01      	cmp	r3, #1
 8014304:	d00a      	beq.n	801431c <_raise_r+0x4c>
 8014306:	1c59      	adds	r1, r3, #1
 8014308:	d103      	bne.n	8014312 <_raise_r+0x42>
 801430a:	2316      	movs	r3, #22
 801430c:	6003      	str	r3, [r0, #0]
 801430e:	2001      	movs	r0, #1
 8014310:	e7e7      	b.n	80142e2 <_raise_r+0x12>
 8014312:	2400      	movs	r4, #0
 8014314:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014318:	4628      	mov	r0, r5
 801431a:	4798      	blx	r3
 801431c:	2000      	movs	r0, #0
 801431e:	e7e0      	b.n	80142e2 <_raise_r+0x12>

08014320 <raise>:
 8014320:	4b02      	ldr	r3, [pc, #8]	; (801432c <raise+0xc>)
 8014322:	4601      	mov	r1, r0
 8014324:	6818      	ldr	r0, [r3, #0]
 8014326:	f7ff bfd3 	b.w	80142d0 <_raise_r>
 801432a:	bf00      	nop
 801432c:	24000024 	.word	0x24000024

08014330 <_kill_r>:
 8014330:	b538      	push	{r3, r4, r5, lr}
 8014332:	4d07      	ldr	r5, [pc, #28]	; (8014350 <_kill_r+0x20>)
 8014334:	2300      	movs	r3, #0
 8014336:	4604      	mov	r4, r0
 8014338:	4608      	mov	r0, r1
 801433a:	4611      	mov	r1, r2
 801433c:	602b      	str	r3, [r5, #0]
 801433e:	f7f0 f921 	bl	8004584 <_kill>
 8014342:	1c43      	adds	r3, r0, #1
 8014344:	d102      	bne.n	801434c <_kill_r+0x1c>
 8014346:	682b      	ldr	r3, [r5, #0]
 8014348:	b103      	cbz	r3, 801434c <_kill_r+0x1c>
 801434a:	6023      	str	r3, [r4, #0]
 801434c:	bd38      	pop	{r3, r4, r5, pc}
 801434e:	bf00      	nop
 8014350:	24000870 	.word	0x24000870

08014354 <_getpid_r>:
 8014354:	f7f0 b90e 	b.w	8004574 <_getpid>

08014358 <atan2>:
 8014358:	f000 b862 	b.w	8014420 <__ieee754_atan2>
 801435c:	0000      	movs	r0, r0
	...

08014360 <sqrt>:
 8014360:	b508      	push	{r3, lr}
 8014362:	ed2d 8b04 	vpush	{d8-d9}
 8014366:	eeb0 8b40 	vmov.f64	d8, d0
 801436a:	f000 f927 	bl	80145bc <__ieee754_sqrt>
 801436e:	4b10      	ldr	r3, [pc, #64]	; (80143b0 <sqrt+0x50>)
 8014370:	f993 3000 	ldrsb.w	r3, [r3]
 8014374:	3301      	adds	r3, #1
 8014376:	d011      	beq.n	801439c <sqrt+0x3c>
 8014378:	eeb4 8b48 	vcmp.f64	d8, d8
 801437c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014380:	d60c      	bvs.n	801439c <sqrt+0x3c>
 8014382:	ed9f 9b09 	vldr	d9, [pc, #36]	; 80143a8 <sqrt+0x48>
 8014386:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801438e:	d505      	bpl.n	801439c <sqrt+0x3c>
 8014390:	f7fd fae4 	bl	801195c <__errno>
 8014394:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8014398:	2321      	movs	r3, #33	; 0x21
 801439a:	6003      	str	r3, [r0, #0]
 801439c:	ecbd 8b04 	vpop	{d8-d9}
 80143a0:	bd08      	pop	{r3, pc}
 80143a2:	bf00      	nop
 80143a4:	f3af 8000 	nop.w
	...
 80143b0:	240001f4 	.word	0x240001f4

080143b4 <asinf>:
 80143b4:	b508      	push	{r3, lr}
 80143b6:	ed2d 8b02 	vpush	{d8}
 80143ba:	eeb0 8a40 	vmov.f32	s16, s0
 80143be:	f000 f901 	bl	80145c4 <__ieee754_asinf>
 80143c2:	4b13      	ldr	r3, [pc, #76]	; (8014410 <asinf+0x5c>)
 80143c4:	f993 3000 	ldrsb.w	r3, [r3]
 80143c8:	3301      	adds	r3, #1
 80143ca:	eef0 8a40 	vmov.f32	s17, s0
 80143ce:	d01a      	beq.n	8014406 <asinf+0x52>
 80143d0:	eeb4 8a48 	vcmp.f32	s16, s16
 80143d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d8:	d615      	bvs.n	8014406 <asinf+0x52>
 80143da:	eeb0 0a48 	vmov.f32	s0, s16
 80143de:	f000 fc53 	bl	8014c88 <fabsf>
 80143e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80143e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80143ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ee:	dd0a      	ble.n	8014406 <asinf+0x52>
 80143f0:	f7fd fab4 	bl	801195c <__errno>
 80143f4:	ecbd 8b02 	vpop	{d8}
 80143f8:	2321      	movs	r3, #33	; 0x21
 80143fa:	6003      	str	r3, [r0, #0]
 80143fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8014400:	4804      	ldr	r0, [pc, #16]	; (8014414 <asinf+0x60>)
 8014402:	f000 bc49 	b.w	8014c98 <nanf>
 8014406:	eeb0 0a68 	vmov.f32	s0, s17
 801440a:	ecbd 8b02 	vpop	{d8}
 801440e:	bd08      	pop	{r3, pc}
 8014410:	240001f4 	.word	0x240001f4
 8014414:	08015048 	.word	0x08015048

08014418 <atan2f>:
 8014418:	f000 b9ba 	b.w	8014790 <__ieee754_atan2f>
 801441c:	0000      	movs	r0, r0
	...

08014420 <__ieee754_atan2>:
 8014420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014422:	ee11 6a10 	vmov	r6, s2
 8014426:	ee11 0a90 	vmov	r0, s3
 801442a:	4273      	negs	r3, r6
 801442c:	4f60      	ldr	r7, [pc, #384]	; (80145b0 <__ieee754_atan2+0x190>)
 801442e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8014432:	4333      	orrs	r3, r6
 8014434:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014438:	42bb      	cmp	r3, r7
 801443a:	ed8d 0b00 	vstr	d0, [sp]
 801443e:	d80b      	bhi.n	8014458 <__ieee754_atan2+0x38>
 8014440:	e9dd c500 	ldrd	ip, r5, [sp]
 8014444:	f1cc 0100 	rsb	r1, ip, #0
 8014448:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801444c:	ea41 010c 	orr.w	r1, r1, ip
 8014450:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8014454:	42b9      	cmp	r1, r7
 8014456:	d906      	bls.n	8014466 <__ieee754_atan2+0x46>
 8014458:	ed9d 7b00 	vldr	d7, [sp]
 801445c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8014460:	ed8d 7b00 	vstr	d7, [sp]
 8014464:	e054      	b.n	8014510 <__ieee754_atan2+0xf0>
 8014466:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 801446a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 801446e:	4331      	orrs	r1, r6
 8014470:	d104      	bne.n	801447c <__ieee754_atan2+0x5c>
 8014472:	b003      	add	sp, #12
 8014474:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014478:	f000 ba2e 	b.w	80148d8 <atan>
 801447c:	1784      	asrs	r4, r0, #30
 801447e:	f004 0402 	and.w	r4, r4, #2
 8014482:	ea53 010c 	orrs.w	r1, r3, ip
 8014486:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 801448a:	d109      	bne.n	80144a0 <__ieee754_atan2+0x80>
 801448c:	2c02      	cmp	r4, #2
 801448e:	d069      	beq.n	8014564 <__ieee754_atan2+0x144>
 8014490:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8014578 <__ieee754_atan2+0x158>
 8014494:	ed9d 6b00 	vldr	d6, [sp]
 8014498:	2c03      	cmp	r4, #3
 801449a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 801449e:	e7df      	b.n	8014460 <__ieee754_atan2+0x40>
 80144a0:	ea52 0106 	orrs.w	r1, r2, r6
 80144a4:	d107      	bne.n	80144b6 <__ieee754_atan2+0x96>
 80144a6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8014580 <__ieee754_atan2+0x160>
 80144aa:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8014588 <__ieee754_atan2+0x168>
 80144ae:	2d00      	cmp	r5, #0
 80144b0:	fe26 7b07 	vselge.f64	d7, d6, d7
 80144b4:	e7d4      	b.n	8014460 <__ieee754_atan2+0x40>
 80144b6:	42ba      	cmp	r2, r7
 80144b8:	d10f      	bne.n	80144da <__ieee754_atan2+0xba>
 80144ba:	4293      	cmp	r3, r2
 80144bc:	f104 34ff 	add.w	r4, r4, #4294967295
 80144c0:	d107      	bne.n	80144d2 <__ieee754_atan2+0xb2>
 80144c2:	2c02      	cmp	r4, #2
 80144c4:	d851      	bhi.n	801456a <__ieee754_atan2+0x14a>
 80144c6:	4b3b      	ldr	r3, [pc, #236]	; (80145b4 <__ieee754_atan2+0x194>)
 80144c8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80144cc:	ed94 7b00 	vldr	d7, [r4]
 80144d0:	e7c6      	b.n	8014460 <__ieee754_atan2+0x40>
 80144d2:	2c02      	cmp	r4, #2
 80144d4:	d84c      	bhi.n	8014570 <__ieee754_atan2+0x150>
 80144d6:	4b38      	ldr	r3, [pc, #224]	; (80145b8 <__ieee754_atan2+0x198>)
 80144d8:	e7f6      	b.n	80144c8 <__ieee754_atan2+0xa8>
 80144da:	42bb      	cmp	r3, r7
 80144dc:	d0e3      	beq.n	80144a6 <__ieee754_atan2+0x86>
 80144de:	1a9b      	subs	r3, r3, r2
 80144e0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80144e4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80144e8:	da16      	bge.n	8014518 <__ieee754_atan2+0xf8>
 80144ea:	2800      	cmp	r0, #0
 80144ec:	da01      	bge.n	80144f2 <__ieee754_atan2+0xd2>
 80144ee:	323c      	adds	r2, #60	; 0x3c
 80144f0:	db17      	blt.n	8014522 <__ieee754_atan2+0x102>
 80144f2:	ed9d 7b00 	vldr	d7, [sp]
 80144f6:	ee87 0b01 	vdiv.f64	d0, d7, d1
 80144fa:	f000 fae7 	bl	8014acc <fabs>
 80144fe:	f000 f9eb 	bl	80148d8 <atan>
 8014502:	ed8d 0b00 	vstr	d0, [sp]
 8014506:	2c01      	cmp	r4, #1
 8014508:	d00e      	beq.n	8014528 <__ieee754_atan2+0x108>
 801450a:	2c02      	cmp	r4, #2
 801450c:	d014      	beq.n	8014538 <__ieee754_atan2+0x118>
 801450e:	b9f4      	cbnz	r4, 801454e <__ieee754_atan2+0x12e>
 8014510:	ed9d 0b00 	vldr	d0, [sp]
 8014514:	b003      	add	sp, #12
 8014516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014518:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8014580 <__ieee754_atan2+0x160>
 801451c:	ed8d 7b00 	vstr	d7, [sp]
 8014520:	e7f1      	b.n	8014506 <__ieee754_atan2+0xe6>
 8014522:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8014590 <__ieee754_atan2+0x170>
 8014526:	e7f9      	b.n	801451c <__ieee754_atan2+0xfc>
 8014528:	e9dd 2300 	ldrd	r2, r3, [sp]
 801452c:	9901      	ldr	r1, [sp, #4]
 801452e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014532:	e9cd 2300 	strd	r2, r3, [sp]
 8014536:	e7eb      	b.n	8014510 <__ieee754_atan2+0xf0>
 8014538:	ed9d 6b00 	vldr	d6, [sp]
 801453c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014598 <__ieee754_atan2+0x178>
 8014540:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014544:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80145a0 <__ieee754_atan2+0x180>
 8014548:	ee36 7b47 	vsub.f64	d7, d6, d7
 801454c:	e788      	b.n	8014460 <__ieee754_atan2+0x40>
 801454e:	ed9d 6b00 	vldr	d6, [sp]
 8014552:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8014598 <__ieee754_atan2+0x178>
 8014556:	ee36 7b47 	vsub.f64	d7, d6, d7
 801455a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80145a0 <__ieee754_atan2+0x180>
 801455e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014562:	e77d      	b.n	8014460 <__ieee754_atan2+0x40>
 8014564:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80145a0 <__ieee754_atan2+0x180>
 8014568:	e77a      	b.n	8014460 <__ieee754_atan2+0x40>
 801456a:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 80145a8 <__ieee754_atan2+0x188>
 801456e:	e777      	b.n	8014460 <__ieee754_atan2+0x40>
 8014570:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8014590 <__ieee754_atan2+0x170>
 8014574:	e774      	b.n	8014460 <__ieee754_atan2+0x40>
 8014576:	bf00      	nop
 8014578:	54442d18 	.word	0x54442d18
 801457c:	c00921fb 	.word	0xc00921fb
 8014580:	54442d18 	.word	0x54442d18
 8014584:	3ff921fb 	.word	0x3ff921fb
 8014588:	54442d18 	.word	0x54442d18
 801458c:	bff921fb 	.word	0xbff921fb
	...
 8014598:	33145c07 	.word	0x33145c07
 801459c:	3ca1a626 	.word	0x3ca1a626
 80145a0:	54442d18 	.word	0x54442d18
 80145a4:	400921fb 	.word	0x400921fb
 80145a8:	54442d18 	.word	0x54442d18
 80145ac:	3fe921fb 	.word	0x3fe921fb
 80145b0:	7ff00000 	.word	0x7ff00000
 80145b4:	08015158 	.word	0x08015158
 80145b8:	08015170 	.word	0x08015170

080145bc <__ieee754_sqrt>:
 80145bc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80145c0:	4770      	bx	lr
	...

080145c4 <__ieee754_asinf>:
 80145c4:	b538      	push	{r3, r4, r5, lr}
 80145c6:	ee10 5a10 	vmov	r5, s0
 80145ca:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80145ce:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80145d2:	ed2d 8b04 	vpush	{d8-d9}
 80145d6:	d10c      	bne.n	80145f2 <__ieee754_asinf+0x2e>
 80145d8:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8014750 <__ieee754_asinf+0x18c>
 80145dc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8014754 <__ieee754_asinf+0x190>
 80145e0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80145e4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80145e8:	eeb0 0a67 	vmov.f32	s0, s15
 80145ec:	ecbd 8b04 	vpop	{d8-d9}
 80145f0:	bd38      	pop	{r3, r4, r5, pc}
 80145f2:	dd04      	ble.n	80145fe <__ieee754_asinf+0x3a>
 80145f4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80145f8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80145fc:	e7f6      	b.n	80145ec <__ieee754_asinf+0x28>
 80145fe:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8014602:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014606:	da0b      	bge.n	8014620 <__ieee754_asinf+0x5c>
 8014608:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 801460c:	da52      	bge.n	80146b4 <__ieee754_asinf+0xf0>
 801460e:	eddf 7a52 	vldr	s15, [pc, #328]	; 8014758 <__ieee754_asinf+0x194>
 8014612:	ee70 7a27 	vadd.f32	s15, s0, s15
 8014616:	eef4 7ae8 	vcmpe.f32	s15, s17
 801461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801461e:	dce5      	bgt.n	80145ec <__ieee754_asinf+0x28>
 8014620:	f000 fb32 	bl	8014c88 <fabsf>
 8014624:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8014628:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801462c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8014630:	eddf 7a4a 	vldr	s15, [pc, #296]	; 801475c <__ieee754_asinf+0x198>
 8014634:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8014760 <__ieee754_asinf+0x19c>
 8014638:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8014764 <__ieee754_asinf+0x1a0>
 801463c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8014640:	eddf 7a49 	vldr	s15, [pc, #292]	; 8014768 <__ieee754_asinf+0x1a4>
 8014644:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014648:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801476c <__ieee754_asinf+0x1a8>
 801464c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014650:	eddf 7a47 	vldr	s15, [pc, #284]	; 8014770 <__ieee754_asinf+0x1ac>
 8014654:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014658:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8014774 <__ieee754_asinf+0x1b0>
 801465c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8014660:	eddf 7a45 	vldr	s15, [pc, #276]	; 8014778 <__ieee754_asinf+0x1b4>
 8014664:	eee8 7a07 	vfma.f32	s15, s16, s14
 8014668:	ed9f 7a44 	vldr	s14, [pc, #272]	; 801477c <__ieee754_asinf+0x1b8>
 801466c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8014670:	eddf 7a43 	vldr	s15, [pc, #268]	; 8014780 <__ieee754_asinf+0x1bc>
 8014674:	eee7 7a08 	vfma.f32	s15, s14, s16
 8014678:	eeb0 0a48 	vmov.f32	s0, s16
 801467c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8014680:	f000 f924 	bl	80148cc <__ieee754_sqrtf>
 8014684:	4b3f      	ldr	r3, [pc, #252]	; (8014784 <__ieee754_asinf+0x1c0>)
 8014686:	ee29 9a08 	vmul.f32	s18, s18, s16
 801468a:	429c      	cmp	r4, r3
 801468c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8014690:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014694:	dd3d      	ble.n	8014712 <__ieee754_asinf+0x14e>
 8014696:	eea0 0a06 	vfma.f32	s0, s0, s12
 801469a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8014788 <__ieee754_asinf+0x1c4>
 801469e:	eee0 7a26 	vfma.f32	s15, s0, s13
 80146a2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014754 <__ieee754_asinf+0x190>
 80146a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80146aa:	2d00      	cmp	r5, #0
 80146ac:	bfd8      	it	le
 80146ae:	eeb1 0a40 	vnegle.f32	s0, s0
 80146b2:	e79b      	b.n	80145ec <__ieee754_asinf+0x28>
 80146b4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80146b8:	eddf 6a28 	vldr	s13, [pc, #160]	; 801475c <__ieee754_asinf+0x198>
 80146bc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8014760 <__ieee754_asinf+0x19c>
 80146c0:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8014774 <__ieee754_asinf+0x1b0>
 80146c4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80146c8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8014768 <__ieee754_asinf+0x1a4>
 80146cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80146d0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801476c <__ieee754_asinf+0x1a8>
 80146d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80146d8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8014770 <__ieee754_asinf+0x1ac>
 80146dc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80146e0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8014764 <__ieee754_asinf+0x1a0>
 80146e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80146e8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8014778 <__ieee754_asinf+0x1b4>
 80146ec:	eee7 6a86 	vfma.f32	s13, s15, s12
 80146f0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801477c <__ieee754_asinf+0x1b8>
 80146f4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80146f8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8014780 <__ieee754_asinf+0x1bc>
 80146fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014704:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8014708:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801470c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8014710:	e76c      	b.n	80145ec <__ieee754_asinf+0x28>
 8014712:	ee10 3a10 	vmov	r3, s0
 8014716:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801471a:	f023 030f 	bic.w	r3, r3, #15
 801471e:	ee07 3a10 	vmov	s14, r3
 8014722:	eea7 8a47 	vfms.f32	s16, s14, s14
 8014726:	ee70 7a07 	vadd.f32	s15, s0, s14
 801472a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801472e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8014732:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014750 <__ieee754_asinf+0x18c>
 8014736:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801473a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 801473e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 801478c <__ieee754_asinf+0x1c8>
 8014742:	eeb0 6a40 	vmov.f32	s12, s0
 8014746:	eea7 6a66 	vfms.f32	s12, s14, s13
 801474a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801474e:	e7aa      	b.n	80146a6 <__ieee754_asinf+0xe2>
 8014750:	b33bbd2e 	.word	0xb33bbd2e
 8014754:	3fc90fdb 	.word	0x3fc90fdb
 8014758:	7149f2ca 	.word	0x7149f2ca
 801475c:	3811ef08 	.word	0x3811ef08
 8014760:	3a4f7f04 	.word	0x3a4f7f04
 8014764:	3e2aaaab 	.word	0x3e2aaaab
 8014768:	bd241146 	.word	0xbd241146
 801476c:	3e4e0aa8 	.word	0x3e4e0aa8
 8014770:	bea6b090 	.word	0xbea6b090
 8014774:	3d9dc62e 	.word	0x3d9dc62e
 8014778:	bf303361 	.word	0xbf303361
 801477c:	4001572d 	.word	0x4001572d
 8014780:	c019d139 	.word	0xc019d139
 8014784:	3f799999 	.word	0x3f799999
 8014788:	333bbd2e 	.word	0x333bbd2e
 801478c:	3f490fdb 	.word	0x3f490fdb

08014790 <__ieee754_atan2f>:
 8014790:	ee10 2a90 	vmov	r2, s1
 8014794:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8014798:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801479c:	b510      	push	{r4, lr}
 801479e:	eef0 7a40 	vmov.f32	s15, s0
 80147a2:	dc06      	bgt.n	80147b2 <__ieee754_atan2f+0x22>
 80147a4:	ee10 0a10 	vmov	r0, s0
 80147a8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80147ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80147b0:	dd04      	ble.n	80147bc <__ieee754_atan2f+0x2c>
 80147b2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80147b6:	eeb0 0a67 	vmov.f32	s0, s15
 80147ba:	bd10      	pop	{r4, pc}
 80147bc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80147c0:	d103      	bne.n	80147ca <__ieee754_atan2f+0x3a>
 80147c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147c6:	f000 b98b 	b.w	8014ae0 <atanf>
 80147ca:	1794      	asrs	r4, r2, #30
 80147cc:	f004 0402 	and.w	r4, r4, #2
 80147d0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80147d4:	b93b      	cbnz	r3, 80147e6 <__ieee754_atan2f+0x56>
 80147d6:	2c02      	cmp	r4, #2
 80147d8:	d05c      	beq.n	8014894 <__ieee754_atan2f+0x104>
 80147da:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80148a8 <__ieee754_atan2f+0x118>
 80147de:	2c03      	cmp	r4, #3
 80147e0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80147e4:	e7e7      	b.n	80147b6 <__ieee754_atan2f+0x26>
 80147e6:	b939      	cbnz	r1, 80147f8 <__ieee754_atan2f+0x68>
 80147e8:	eddf 7a30 	vldr	s15, [pc, #192]	; 80148ac <__ieee754_atan2f+0x11c>
 80147ec:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80148b0 <__ieee754_atan2f+0x120>
 80147f0:	2800      	cmp	r0, #0
 80147f2:	fe67 7a80 	vselge.f32	s15, s15, s0
 80147f6:	e7de      	b.n	80147b6 <__ieee754_atan2f+0x26>
 80147f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80147fc:	d110      	bne.n	8014820 <__ieee754_atan2f+0x90>
 80147fe:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014802:	f104 34ff 	add.w	r4, r4, #4294967295
 8014806:	d107      	bne.n	8014818 <__ieee754_atan2f+0x88>
 8014808:	2c02      	cmp	r4, #2
 801480a:	d846      	bhi.n	801489a <__ieee754_atan2f+0x10a>
 801480c:	4b29      	ldr	r3, [pc, #164]	; (80148b4 <__ieee754_atan2f+0x124>)
 801480e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014812:	edd4 7a00 	vldr	s15, [r4]
 8014816:	e7ce      	b.n	80147b6 <__ieee754_atan2f+0x26>
 8014818:	2c02      	cmp	r4, #2
 801481a:	d841      	bhi.n	80148a0 <__ieee754_atan2f+0x110>
 801481c:	4b26      	ldr	r3, [pc, #152]	; (80148b8 <__ieee754_atan2f+0x128>)
 801481e:	e7f6      	b.n	801480e <__ieee754_atan2f+0x7e>
 8014820:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014824:	d0e0      	beq.n	80147e8 <__ieee754_atan2f+0x58>
 8014826:	1a5b      	subs	r3, r3, r1
 8014828:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801482c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014830:	da1a      	bge.n	8014868 <__ieee754_atan2f+0xd8>
 8014832:	2a00      	cmp	r2, #0
 8014834:	da01      	bge.n	801483a <__ieee754_atan2f+0xaa>
 8014836:	313c      	adds	r1, #60	; 0x3c
 8014838:	db19      	blt.n	801486e <__ieee754_atan2f+0xde>
 801483a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801483e:	f000 fa23 	bl	8014c88 <fabsf>
 8014842:	f000 f94d 	bl	8014ae0 <atanf>
 8014846:	eef0 7a40 	vmov.f32	s15, s0
 801484a:	2c01      	cmp	r4, #1
 801484c:	d012      	beq.n	8014874 <__ieee754_atan2f+0xe4>
 801484e:	2c02      	cmp	r4, #2
 8014850:	d017      	beq.n	8014882 <__ieee754_atan2f+0xf2>
 8014852:	2c00      	cmp	r4, #0
 8014854:	d0af      	beq.n	80147b6 <__ieee754_atan2f+0x26>
 8014856:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80148bc <__ieee754_atan2f+0x12c>
 801485a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801485e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80148c0 <__ieee754_atan2f+0x130>
 8014862:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014866:	e7a6      	b.n	80147b6 <__ieee754_atan2f+0x26>
 8014868:	eddf 7a10 	vldr	s15, [pc, #64]	; 80148ac <__ieee754_atan2f+0x11c>
 801486c:	e7ed      	b.n	801484a <__ieee754_atan2f+0xba>
 801486e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80148c4 <__ieee754_atan2f+0x134>
 8014872:	e7ea      	b.n	801484a <__ieee754_atan2f+0xba>
 8014874:	ee17 3a90 	vmov	r3, s15
 8014878:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801487c:	ee07 3a90 	vmov	s15, r3
 8014880:	e799      	b.n	80147b6 <__ieee754_atan2f+0x26>
 8014882:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80148bc <__ieee754_atan2f+0x12c>
 8014886:	ee77 7a80 	vadd.f32	s15, s15, s0
 801488a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80148c0 <__ieee754_atan2f+0x130>
 801488e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014892:	e790      	b.n	80147b6 <__ieee754_atan2f+0x26>
 8014894:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80148c0 <__ieee754_atan2f+0x130>
 8014898:	e78d      	b.n	80147b6 <__ieee754_atan2f+0x26>
 801489a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80148c8 <__ieee754_atan2f+0x138>
 801489e:	e78a      	b.n	80147b6 <__ieee754_atan2f+0x26>
 80148a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80148c4 <__ieee754_atan2f+0x134>
 80148a4:	e787      	b.n	80147b6 <__ieee754_atan2f+0x26>
 80148a6:	bf00      	nop
 80148a8:	c0490fdb 	.word	0xc0490fdb
 80148ac:	3fc90fdb 	.word	0x3fc90fdb
 80148b0:	bfc90fdb 	.word	0xbfc90fdb
 80148b4:	08015188 	.word	0x08015188
 80148b8:	08015194 	.word	0x08015194
 80148bc:	33bbbd2e 	.word	0x33bbbd2e
 80148c0:	40490fdb 	.word	0x40490fdb
 80148c4:	00000000 	.word	0x00000000
 80148c8:	3f490fdb 	.word	0x3f490fdb

080148cc <__ieee754_sqrtf>:
 80148cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80148d0:	4770      	bx	lr
 80148d2:	0000      	movs	r0, r0
 80148d4:	0000      	movs	r0, r0
	...

080148d8 <atan>:
 80148d8:	b538      	push	{r3, r4, r5, lr}
 80148da:	eeb0 7b40 	vmov.f64	d7, d0
 80148de:	ee17 5a90 	vmov	r5, s15
 80148e2:	4b73      	ldr	r3, [pc, #460]	; (8014ab0 <atan+0x1d8>)
 80148e4:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80148e8:	429c      	cmp	r4, r3
 80148ea:	dd13      	ble.n	8014914 <atan+0x3c>
 80148ec:	4b71      	ldr	r3, [pc, #452]	; (8014ab4 <atan+0x1dc>)
 80148ee:	429c      	cmp	r4, r3
 80148f0:	dc03      	bgt.n	80148fa <atan+0x22>
 80148f2:	d107      	bne.n	8014904 <atan+0x2c>
 80148f4:	ee10 3a10 	vmov	r3, s0
 80148f8:	b123      	cbz	r3, 8014904 <atan+0x2c>
 80148fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80148fe:	eeb0 0b47 	vmov.f64	d0, d7
 8014902:	bd38      	pop	{r3, r4, r5, pc}
 8014904:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8014a40 <atan+0x168>
 8014908:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8014a48 <atan+0x170>
 801490c:	2d00      	cmp	r5, #0
 801490e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8014912:	e7f4      	b.n	80148fe <atan+0x26>
 8014914:	4b68      	ldr	r3, [pc, #416]	; (8014ab8 <atan+0x1e0>)
 8014916:	429c      	cmp	r4, r3
 8014918:	dc11      	bgt.n	801493e <atan+0x66>
 801491a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801491e:	429c      	cmp	r4, r3
 8014920:	dc0a      	bgt.n	8014938 <atan+0x60>
 8014922:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8014926:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8014a50 <atan+0x178>
 801492a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801492e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014936:	dce2      	bgt.n	80148fe <atan+0x26>
 8014938:	f04f 33ff 	mov.w	r3, #4294967295
 801493c:	e013      	b.n	8014966 <atan+0x8e>
 801493e:	f000 f8c5 	bl	8014acc <fabs>
 8014942:	4b5e      	ldr	r3, [pc, #376]	; (8014abc <atan+0x1e4>)
 8014944:	429c      	cmp	r4, r3
 8014946:	dc4f      	bgt.n	80149e8 <atan+0x110>
 8014948:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801494c:	429c      	cmp	r4, r3
 801494e:	dc41      	bgt.n	80149d4 <atan+0xfc>
 8014950:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8014954:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014958:	2300      	movs	r3, #0
 801495a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801495e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8014962:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014966:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014a58 <atan+0x180>
 801496a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801496e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8014972:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014a60 <atan+0x188>
 8014976:	eea5 3b06 	vfma.f64	d3, d5, d6
 801497a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014a68 <atan+0x190>
 801497e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014982:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014a70 <atan+0x198>
 8014986:	eea6 3b05 	vfma.f64	d3, d6, d5
 801498a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8014a78 <atan+0x1a0>
 801498e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8014992:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8014a80 <atan+0x1a8>
 8014996:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014a88 <atan+0x1b0>
 801499a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801499e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014a90 <atan+0x1b8>
 80149a2:	eea5 2b06 	vfma.f64	d2, d5, d6
 80149a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014a98 <atan+0x1c0>
 80149aa:	eea2 6b05 	vfma.f64	d6, d2, d5
 80149ae:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8014aa0 <atan+0x1c8>
 80149b2:	eea6 2b05 	vfma.f64	d2, d6, d5
 80149b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8014aa8 <atan+0x1d0>
 80149ba:	1c5a      	adds	r2, r3, #1
 80149bc:	eea2 6b05 	vfma.f64	d6, d2, d5
 80149c0:	ee26 6b05 	vmul.f64	d6, d6, d5
 80149c4:	eea3 6b04 	vfma.f64	d6, d3, d4
 80149c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80149cc:	d121      	bne.n	8014a12 <atan+0x13a>
 80149ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80149d2:	e794      	b.n	80148fe <atan+0x26>
 80149d4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80149d8:	2301      	movs	r3, #1
 80149da:	ee30 6b47 	vsub.f64	d6, d0, d7
 80149de:	ee30 0b07 	vadd.f64	d0, d0, d7
 80149e2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80149e6:	e7be      	b.n	8014966 <atan+0x8e>
 80149e8:	4b35      	ldr	r3, [pc, #212]	; (8014ac0 <atan+0x1e8>)
 80149ea:	429c      	cmp	r4, r3
 80149ec:	da0b      	bge.n	8014a06 <atan+0x12e>
 80149ee:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80149f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80149f6:	ee30 5b47 	vsub.f64	d5, d0, d7
 80149fa:	eea0 6b07 	vfma.f64	d6, d0, d7
 80149fe:	2302      	movs	r3, #2
 8014a00:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8014a04:	e7af      	b.n	8014966 <atan+0x8e>
 8014a06:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8014a0a:	2303      	movs	r3, #3
 8014a0c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8014a10:	e7a9      	b.n	8014966 <atan+0x8e>
 8014a12:	4a2c      	ldr	r2, [pc, #176]	; (8014ac4 <atan+0x1ec>)
 8014a14:	492c      	ldr	r1, [pc, #176]	; (8014ac8 <atan+0x1f0>)
 8014a16:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014a1a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8014a1e:	ed93 5b00 	vldr	d5, [r3]
 8014a22:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014a26:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014a2a:	ed92 6b00 	vldr	d6, [r2]
 8014a2e:	2d00      	cmp	r5, #0
 8014a30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014a34:	bfb8      	it	lt
 8014a36:	eeb1 7b47 	vneglt.f64	d7, d7
 8014a3a:	e760      	b.n	80148fe <atan+0x26>
 8014a3c:	f3af 8000 	nop.w
 8014a40:	54442d18 	.word	0x54442d18
 8014a44:	3ff921fb 	.word	0x3ff921fb
 8014a48:	54442d18 	.word	0x54442d18
 8014a4c:	bff921fb 	.word	0xbff921fb
 8014a50:	8800759c 	.word	0x8800759c
 8014a54:	7e37e43c 	.word	0x7e37e43c
 8014a58:	e322da11 	.word	0xe322da11
 8014a5c:	3f90ad3a 	.word	0x3f90ad3a
 8014a60:	24760deb 	.word	0x24760deb
 8014a64:	3fa97b4b 	.word	0x3fa97b4b
 8014a68:	a0d03d51 	.word	0xa0d03d51
 8014a6c:	3fb10d66 	.word	0x3fb10d66
 8014a70:	c54c206e 	.word	0xc54c206e
 8014a74:	3fb745cd 	.word	0x3fb745cd
 8014a78:	920083ff 	.word	0x920083ff
 8014a7c:	3fc24924 	.word	0x3fc24924
 8014a80:	5555550d 	.word	0x5555550d
 8014a84:	3fd55555 	.word	0x3fd55555
 8014a88:	52defd9a 	.word	0x52defd9a
 8014a8c:	bfadde2d 	.word	0xbfadde2d
 8014a90:	2c6a6c2f 	.word	0x2c6a6c2f
 8014a94:	bfa2b444 	.word	0xbfa2b444
 8014a98:	af749a6d 	.word	0xaf749a6d
 8014a9c:	bfb3b0f2 	.word	0xbfb3b0f2
 8014aa0:	fe231671 	.word	0xfe231671
 8014aa4:	bfbc71c6 	.word	0xbfbc71c6
 8014aa8:	9998ebc4 	.word	0x9998ebc4
 8014aac:	bfc99999 	.word	0xbfc99999
 8014ab0:	440fffff 	.word	0x440fffff
 8014ab4:	7ff00000 	.word	0x7ff00000
 8014ab8:	3fdbffff 	.word	0x3fdbffff
 8014abc:	3ff2ffff 	.word	0x3ff2ffff
 8014ac0:	40038000 	.word	0x40038000
 8014ac4:	080151a0 	.word	0x080151a0
 8014ac8:	080151c0 	.word	0x080151c0

08014acc <fabs>:
 8014acc:	ec51 0b10 	vmov	r0, r1, d0
 8014ad0:	ee10 2a10 	vmov	r2, s0
 8014ad4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014ad8:	ec43 2b10 	vmov	d0, r2, r3
 8014adc:	4770      	bx	lr
	...

08014ae0 <atanf>:
 8014ae0:	b538      	push	{r3, r4, r5, lr}
 8014ae2:	ee10 5a10 	vmov	r5, s0
 8014ae6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8014aea:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8014aee:	eef0 7a40 	vmov.f32	s15, s0
 8014af2:	db0f      	blt.n	8014b14 <atanf+0x34>
 8014af4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8014af8:	dd04      	ble.n	8014b04 <atanf+0x24>
 8014afa:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014afe:	eeb0 0a67 	vmov.f32	s0, s15
 8014b02:	bd38      	pop	{r3, r4, r5, pc}
 8014b04:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014c3c <atanf+0x15c>
 8014b08:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8014c40 <atanf+0x160>
 8014b0c:	2d00      	cmp	r5, #0
 8014b0e:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8014b12:	e7f4      	b.n	8014afe <atanf+0x1e>
 8014b14:	4b4b      	ldr	r3, [pc, #300]	; (8014c44 <atanf+0x164>)
 8014b16:	429c      	cmp	r4, r3
 8014b18:	dc10      	bgt.n	8014b3c <atanf+0x5c>
 8014b1a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014b1e:	da0a      	bge.n	8014b36 <atanf+0x56>
 8014b20:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014c48 <atanf+0x168>
 8014b24:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014b2c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b34:	dce3      	bgt.n	8014afe <atanf+0x1e>
 8014b36:	f04f 33ff 	mov.w	r3, #4294967295
 8014b3a:	e013      	b.n	8014b64 <atanf+0x84>
 8014b3c:	f000 f8a4 	bl	8014c88 <fabsf>
 8014b40:	4b42      	ldr	r3, [pc, #264]	; (8014c4c <atanf+0x16c>)
 8014b42:	429c      	cmp	r4, r3
 8014b44:	dc4f      	bgt.n	8014be6 <atanf+0x106>
 8014b46:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014b4a:	429c      	cmp	r4, r3
 8014b4c:	dc41      	bgt.n	8014bd2 <atanf+0xf2>
 8014b4e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014b52:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014b56:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014b64:	1c5a      	adds	r2, r3, #1
 8014b66:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014b6a:	eddf 5a39 	vldr	s11, [pc, #228]	; 8014c50 <atanf+0x170>
 8014b6e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8014c54 <atanf+0x174>
 8014b72:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8014c58 <atanf+0x178>
 8014b76:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8014c5c <atanf+0x17c>
 8014b7a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014b7e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014b82:	eddf 5a37 	vldr	s11, [pc, #220]	; 8014c60 <atanf+0x180>
 8014b86:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014b8a:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8014c64 <atanf+0x184>
 8014b8e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014b92:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014c68 <atanf+0x188>
 8014b96:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014b9a:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8014c6c <atanf+0x18c>
 8014b9e:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014ba2:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014c70 <atanf+0x190>
 8014ba6:	eee7 5a05 	vfma.f32	s11, s14, s10
 8014baa:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8014c74 <atanf+0x194>
 8014bae:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014bb2:	eddf 5a31 	vldr	s11, [pc, #196]	; 8014c78 <atanf+0x198>
 8014bb6:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014bba:	eea5 0a87 	vfma.f32	s0, s11, s14
 8014bbe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014bc2:	eea6 0a26 	vfma.f32	s0, s12, s13
 8014bc6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014bca:	d121      	bne.n	8014c10 <atanf+0x130>
 8014bcc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014bd0:	e795      	b.n	8014afe <atanf+0x1e>
 8014bd2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014bd6:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014bda:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014bde:	2301      	movs	r3, #1
 8014be0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014be4:	e7be      	b.n	8014b64 <atanf+0x84>
 8014be6:	4b25      	ldr	r3, [pc, #148]	; (8014c7c <atanf+0x19c>)
 8014be8:	429c      	cmp	r4, r3
 8014bea:	dc0b      	bgt.n	8014c04 <atanf+0x124>
 8014bec:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014bf4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014bf8:	2302      	movs	r3, #2
 8014bfa:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014c02:	e7af      	b.n	8014b64 <atanf+0x84>
 8014c04:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014c08:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014c0c:	2303      	movs	r3, #3
 8014c0e:	e7a9      	b.n	8014b64 <atanf+0x84>
 8014c10:	4a1b      	ldr	r2, [pc, #108]	; (8014c80 <atanf+0x1a0>)
 8014c12:	491c      	ldr	r1, [pc, #112]	; (8014c84 <atanf+0x1a4>)
 8014c14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014c18:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014c1c:	ed93 7a00 	vldr	s14, [r3]
 8014c20:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014c24:	2d00      	cmp	r5, #0
 8014c26:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014c2a:	ed92 0a00 	vldr	s0, [r2]
 8014c2e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014c32:	bfb8      	it	lt
 8014c34:	eef1 7a67 	vneglt.f32	s15, s15
 8014c38:	e761      	b.n	8014afe <atanf+0x1e>
 8014c3a:	bf00      	nop
 8014c3c:	3fc90fdb 	.word	0x3fc90fdb
 8014c40:	bfc90fdb 	.word	0xbfc90fdb
 8014c44:	3edfffff 	.word	0x3edfffff
 8014c48:	7149f2ca 	.word	0x7149f2ca
 8014c4c:	3f97ffff 	.word	0x3f97ffff
 8014c50:	3c8569d7 	.word	0x3c8569d7
 8014c54:	3d4bda59 	.word	0x3d4bda59
 8014c58:	bd15a221 	.word	0xbd15a221
 8014c5c:	be4ccccd 	.word	0xbe4ccccd
 8014c60:	3d886b35 	.word	0x3d886b35
 8014c64:	3dba2e6e 	.word	0x3dba2e6e
 8014c68:	3e124925 	.word	0x3e124925
 8014c6c:	3eaaaaab 	.word	0x3eaaaaab
 8014c70:	bd6ef16b 	.word	0xbd6ef16b
 8014c74:	bd9d8795 	.word	0xbd9d8795
 8014c78:	bde38e38 	.word	0xbde38e38
 8014c7c:	401bffff 	.word	0x401bffff
 8014c80:	080151e0 	.word	0x080151e0
 8014c84:	080151f0 	.word	0x080151f0

08014c88 <fabsf>:
 8014c88:	ee10 3a10 	vmov	r3, s0
 8014c8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014c90:	ee00 3a10 	vmov	s0, r3
 8014c94:	4770      	bx	lr
	...

08014c98 <nanf>:
 8014c98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014ca0 <nanf+0x8>
 8014c9c:	4770      	bx	lr
 8014c9e:	bf00      	nop
 8014ca0:	7fc00000 	.word	0x7fc00000

08014ca4 <_init>:
 8014ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ca6:	bf00      	nop
 8014ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014caa:	bc08      	pop	{r3}
 8014cac:	469e      	mov	lr, r3
 8014cae:	4770      	bx	lr

08014cb0 <_fini>:
 8014cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cb2:	bf00      	nop
 8014cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cb6:	bc08      	pop	{r3}
 8014cb8:	469e      	mov	lr, r3
 8014cba:	4770      	bx	lr
